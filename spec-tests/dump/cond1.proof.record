==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x5 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x5)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (and $x10 $x12)))
 (let (($x19 (and $x14 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x5 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x5)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (and $x10 $x12)))
 (let (($x19 (and $x14 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv32771 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460591/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%10%bbentry () (_ BitVec 32))
(assert
 (let (($x82 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x83 (not $x82)))
 (let (($x84 (or $x82 $x83)))
 (let (($x85 (= $x84 false)))
 (let (($x86 (= $x85 true)))
 (let ((?x62 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x72 (concat ?x71 (concat ?x68 (concat ?x64 ?x62)))))
 (let (($x73 (= ?x72 input.dst.llvm-%x)))
 (let (($x74 (= $x73 true)))
 (let (($x56 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x57 (= $x56 true)))
 (let (($x58 (= $x57 true)))
 (let ((?x31 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x49 (= (_ bv0 32) ?x31)))
 (let ((?x40 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x43 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x40)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (and $x32 $x43)))
 (let (($x50 (and $x45 $x49)))
 (let (($x19 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (and $x19 $x50)))
 (let (($x7 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x33 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x17 $x7)))))))
 (let (($x52 (and $x33 $x51)))
 (let (($x53 (= $x52 true)))
 (let (($x54 (= $x53 true)))
 (let (($x59 (and $x54 $x58)))
 (let (($x75 (and $x59 $x74)))
 (let (($x15 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x47 (= $x15 input.spec-%tmpvar-1.L1%3%d)))
 (let (($x76 (and $x47 $x75)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x77 (and $x11 $x76)))
 (let (($x48 (= (_ bv5 32) input.spec-%tmpvar-2.L1%10%bbentry)))
 (let (($x78 (and $x48 $x77)))
 (let ((?x24 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x44 (= ?x24 input.spec-%tmpvar-3.L1%10%bbentry)))
 (let (($x79 (and $x44 $x78)))
 (let (($x34 (= (_ bv12 32) input.spec-%tmpvar-4.L1%10%bbentry)))
 (let (($x80 (and $x34 $x79)))
 (let ((?x13 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x23 (= ?x13 input.spec-%tmpvar-5.L1%10%bbentry)))
 (let (($x81 (and $x23 $x80)))
 (let (($x87 (=> $x81 $x86)))
 (not $x87))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%10%bbentry () (_ BitVec 32))
(assert
 (let (($x82 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x83 (not $x82)))
 (let (($x84 (or $x82 $x83)))
 (let (($x85 (= $x84 false)))
 (let (($x86 (= $x85 true)))
 (let ((?x62 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x72 (concat ?x71 (concat ?x68 (concat ?x64 ?x62)))))
 (let (($x73 (= ?x72 input.dst.llvm-%x)))
 (let (($x74 (= $x73 true)))
 (let (($x56 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x57 (= $x56 true)))
 (let (($x58 (= $x57 true)))
 (let ((?x31 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x49 (= (_ bv0 32) ?x31)))
 (let ((?x40 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x43 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x40)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (and $x32 $x43)))
 (let (($x50 (and $x45 $x49)))
 (let (($x19 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (and $x19 $x50)))
 (let (($x7 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x33 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x17 $x7)))))))
 (let (($x52 (and $x33 $x51)))
 (let (($x53 (= $x52 true)))
 (let (($x54 (= $x53 true)))
 (let (($x59 (and $x54 $x58)))
 (let (($x75 (and $x59 $x74)))
 (let (($x15 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x47 (= $x15 input.spec-%tmpvar-1.L1%3%d)))
 (let (($x76 (and $x47 $x75)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x77 (and $x11 $x76)))
 (let (($x48 (= (_ bv5 32) input.spec-%tmpvar-2.L1%10%bbentry)))
 (let (($x78 (and $x48 $x77)))
 (let ((?x24 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x44 (= ?x24 input.spec-%tmpvar-3.L1%10%bbentry)))
 (let (($x79 (and $x44 $x78)))
 (let (($x34 (= (_ bv12 32) input.spec-%tmpvar-4.L1%10%bbentry)))
 (let (($x80 (and $x34 $x79)))
 (let ((?x13 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x23 (= ?x13 input.spec-%tmpvar-5.L1%10%bbentry)))
 (let (($x81 (and $x23 $x80)))
 (let (($x87 (=> $x81 $x86)))
 (not $x87))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.spec-%tmpvar-1.L1%3%d false)
(= input.dst.llvm-%x #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.spec-%var-x-0 #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%tmpvar-0.L1%3%d #b00000000000000000000000000000000)
(= input.spec-%tmpvar-2.L1%10%bbentry #b00000000000000000000000000000101)
(= input.spec-%tmpvar-3.L1%10%bbentry #b11111111111111111111111111111011)
(= input.spec-%tmpvar-4.L1%10%bbentry #b00000000000000000000000000001100)
(= input.spec-%tmpvar-5.L1%10%bbentry #b00000000000000000000000000001100)
(= input.dst.llvm-mem @fun_5)
(function @fun_5
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%tmpvar-3.L1%10%bbentry () (_ BitVec 32)
    #xfffffffb)
  (define-fun input.spec-%tmpvar-5.L1%10%bbentry () (_ BitVec 32)
    #x0000000c)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L1%3%d () Bool
    false)
  (define-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.L1%10%bbentry () (_ BitVec 32)
    #x00000005)
  (define-fun input.spec-%tmpvar-4.L1%10%bbentry () (_ BitVec 32)
    #x0000000c)
  (define-fun input.spec-%var-x-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x40000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x40000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%x () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-x-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.spec-%tmpvar-1.L1%3%d () Bool false)
(define-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-2.L1%10%bbentry () (_ BitVec 32) (_ bv5 32))
(define-fun input.spec-%tmpvar-3.L1%10%bbentry () (_ BitVec 32) (_ bv4294967291 32))
(define-fun input.spec-%tmpvar-4.L1%10%bbentry () (_ BitVec 32) (_ bv12 32))
(define-fun input.spec-%tmpvar-5.L1%10%bbentry () (_ BitVec 32) (_ bv12 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460591/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%10%bbentry () (_ BitVec 32))
(assert
 (let (($x86 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x87 (not $x86)))
 (let (($x88 (or $x86 $x87)))
 (let (($x29 (not $x88)))
 (let (($x11 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x84 (not $x11)))
 (let (($x85 (or $x11 $x84)))
 (let (($x61 (or $x85 $x29)))
 (let (($x89 (= $x61 true)))
 (let (($x90 (= $x89 true)))
 (let ((?x66 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x74 (concat ?x73 (concat ?x65 (concat ?x68 ?x66)))))
 (let (($x75 (= ?x74 input.dst.llvm-%x)))
 (let (($x76 (= $x75 true)))
 (let (($x57 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x58 (= $x57 true)))
 (let (($x59 (= $x58 true)))
 (let ((?x49 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x50 (= (_ bv0 32) ?x49)))
 (let ((?x43 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x45 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x43)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x31 (and $x8 $x45)))
 (let (($x51 (and $x31 $x50)))
 (let (($x14 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (and $x14 $x51)))
 (let (($x36 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x32 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x6 $x36)))))))
 (let (($x53 (and $x32 $x52)))
 (let (($x54 (= $x53 true)))
 (let (($x55 (= $x54 true)))
 (let (($x60 (and $x55 $x59)))
 (let (($x77 (and $x60 $x76)))
 (let (($x46 (= $x11 input.spec-%tmpvar-1.L1%3%d)))
 (let (($x78 (and $x46 $x77)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x79 (and $x35 $x78)))
 (let (($x41 (= (_ bv5 32) input.spec-%tmpvar-2.L1%10%bbentry)))
 (let (($x80 (and $x41 $x79)))
 (let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x26 (= ?x5 input.spec-%tmpvar-3.L1%10%bbentry)))
 (let (($x81 (and $x26 $x80)))
 (let (($x20 (= (_ bv12 32) input.spec-%tmpvar-4.L1%10%bbentry)))
 (let (($x82 (and $x20 $x81)))
 (let ((?x27 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x18 (= ?x27 input.spec-%tmpvar-5.L1%10%bbentry)))
 (let (($x83 (and $x18 $x82)))
 (let (($x91 (=> $x83 $x90)))
 (not $x91))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%10%bbentry () (_ BitVec 32))
(assert
 (let (($x86 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x87 (not $x86)))
 (let (($x88 (or $x86 $x87)))
 (let (($x29 (not $x88)))
 (let (($x11 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x84 (not $x11)))
 (let (($x85 (or $x11 $x84)))
 (let (($x61 (or $x85 $x29)))
 (let (($x89 (= $x61 true)))
 (let (($x90 (= $x89 true)))
 (let ((?x66 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x74 (concat ?x73 (concat ?x65 (concat ?x68 ?x66)))))
 (let (($x75 (= ?x74 input.dst.llvm-%x)))
 (let (($x76 (= $x75 true)))
 (let (($x57 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x58 (= $x57 true)))
 (let (($x59 (= $x58 true)))
 (let ((?x49 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x50 (= (_ bv0 32) ?x49)))
 (let ((?x43 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x45 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x43)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x31 (and $x8 $x45)))
 (let (($x51 (and $x31 $x50)))
 (let (($x14 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (and $x14 $x51)))
 (let (($x36 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x32 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x6 $x36)))))))
 (let (($x53 (and $x32 $x52)))
 (let (($x54 (= $x53 true)))
 (let (($x55 (= $x54 true)))
 (let (($x60 (and $x55 $x59)))
 (let (($x77 (and $x60 $x76)))
 (let (($x46 (= $x11 input.spec-%tmpvar-1.L1%3%d)))
 (let (($x78 (and $x46 $x77)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x79 (and $x35 $x78)))
 (let (($x41 (= (_ bv5 32) input.spec-%tmpvar-2.L1%10%bbentry)))
 (let (($x80 (and $x41 $x79)))
 (let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x26 (= ?x5 input.spec-%tmpvar-3.L1%10%bbentry)))
 (let (($x81 (and $x26 $x80)))
 (let (($x20 (= (_ bv12 32) input.spec-%tmpvar-4.L1%10%bbentry)))
 (let (($x82 (and $x20 $x81)))
 (let ((?x27 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x18 (= ?x27 input.spec-%tmpvar-5.L1%10%bbentry)))
 (let (($x83 (and $x18 $x82)))
 (let (($x91 (=> $x83 $x90)))
 (not $x91))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460591/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%10%bbentry () (_ BitVec 32))
(assert
 (let ((?x91 (bvadd (_ bv4294967291 32) input.dst.llvm-%x)))
 (let ((?x21 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x92 (= ?x21 ?x91)))
 (let (($x47 (= $x92 true)))
 (let (($x42 (= $x47 true)))
 (let ((?x72 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x74 (concat ?x69 (concat ?x68 (concat ?x64 ?x72)))))
 (let (($x82 (= ?x74 input.dst.llvm-%x)))
 (let (($x83 (= $x82 true)))
 (let (($x75 (= input.dst.llvm-%x ?x74)))
 (let ((?x34 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x34)))
 (let ((?x57 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x33 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x57)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (and $x30 $x33)))
 (let (($x50 (and $x32 $x44)))
 (let (($x14 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and $x14 $x50)))
 (let (($x25 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x51 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x48 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x49 $x51)))))))
 (let (($x78 (and (and (and $x48 $x25) $x59) $x75)))
 (let (($x79 (= $x78 true)))
 (let (($x80 (= $x79 true)))
 (let (($x41 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x43 (= $x41 true)))
 (let (($x6 (= $x43 true)))
 (let (($x81 (and $x6 $x80)))
 (let (($x84 (and $x81 $x83)))
 (let (($x86 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) $x84)))
 (let (($x58 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x9 (= $x58 input.spec-%tmpvar-1.L1%3%d)))
 (let (($x87 (and $x9 $x86)))
 (let (($x55 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x88 (and $x55 $x87)))
 (let (($x12 (= (_ bv5 32) input.spec-%tmpvar-2.L1%10%bbentry)))
 (let (($x29 (and $x12 $x88)))
 (let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x15 (= ?x19 input.spec-%tmpvar-3.L1%10%bbentry)))
 (let (($x61 (and $x15 $x29)))
 (let (($x26 (= (_ bv12 32) input.spec-%tmpvar-4.L1%10%bbentry)))
 (let (($x89 (and $x26 $x61)))
 (let (($x18 (= ?x21 input.spec-%tmpvar-5.L1%10%bbentry)))
 (let (($x90 (and $x18 $x89)))
 (let (($x71 (=> $x90 $x42)))
 (not $x71))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%10%bbentry () (_ BitVec 32))
(assert
 (let ((?x91 (bvadd (_ bv4294967291 32) input.dst.llvm-%x)))
 (let ((?x21 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x92 (= ?x21 ?x91)))
 (let (($x47 (= $x92 true)))
 (let (($x42 (= $x47 true)))
 (let ((?x72 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x74 (concat ?x69 (concat ?x68 (concat ?x64 ?x72)))))
 (let (($x82 (= ?x74 input.dst.llvm-%x)))
 (let (($x83 (= $x82 true)))
 (let (($x75 (= input.dst.llvm-%x ?x74)))
 (let ((?x34 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x34)))
 (let ((?x57 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x33 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x57)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (and $x30 $x33)))
 (let (($x50 (and $x32 $x44)))
 (let (($x14 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and $x14 $x50)))
 (let (($x25 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x51 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x48 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x49 $x51)))))))
 (let (($x78 (and (and (and $x48 $x25) $x59) $x75)))
 (let (($x79 (= $x78 true)))
 (let (($x80 (= $x79 true)))
 (let (($x41 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x43 (= $x41 true)))
 (let (($x6 (= $x43 true)))
 (let (($x81 (and $x6 $x80)))
 (let (($x84 (and $x81 $x83)))
 (let (($x86 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) $x84)))
 (let (($x58 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x9 (= $x58 input.spec-%tmpvar-1.L1%3%d)))
 (let (($x87 (and $x9 $x86)))
 (let (($x55 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x88 (and $x55 $x87)))
 (let (($x12 (= (_ bv5 32) input.spec-%tmpvar-2.L1%10%bbentry)))
 (let (($x29 (and $x12 $x88)))
 (let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x15 (= ?x19 input.spec-%tmpvar-3.L1%10%bbentry)))
 (let (($x61 (and $x15 $x29)))
 (let (($x26 (= (_ bv12 32) input.spec-%tmpvar-4.L1%10%bbentry)))
 (let (($x89 (and $x26 $x61)))
 (let (($x18 (= ?x21 input.spec-%tmpvar-5.L1%10%bbentry)))
 (let (($x90 (and $x18 $x89)))
 (let (($x71 (=> $x90 $x42)))
 (not $x71))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460591/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%10%bbentry () (_ BitVec 32))
(assert
 (let ((?x71 (bvadd (_ bv12 32) input.dst.llvm-%x)))
 (let ((?x20 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x93 (= ?x20 ?x71)))
 (let (($x28 (= $x93 true)))
 (let (($x23 (= $x28 true)))
 (let ((?x69 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x75 (concat ?x74 (concat ?x72 (concat ?x67 ?x69)))))
 (let (($x86 (= ?x75 input.dst.llvm-%x)))
 (let (($x87 (= $x86 true)))
 (let (($x78 (= input.dst.llvm-%x ?x75)))
 (let ((?x44 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x50 (= (_ bv0 32) ?x44)))
 (let ((?x33 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x32 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x33)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x34 (and $x31 $x32)))
 (let (($x59 (and $x34 $x50)))
 (let (($x30 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (and $x30 $x59)))
 (let (($x45 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x37 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x14 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x10 $x37)))))))
 (let (($x81 (and (and (and $x14 $x45) $x77) $x78)))
 (let (($x82 (= $x81 true)))
 (let (($x83 (= $x82 true)))
 (let (($x39 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x41 (not $x39)))
 (let (($x43 (= $x41 true)))
 (let (($x6 (= $x43 true)))
 (let (($x84 (and $x6 $x83)))
 (let (($x88 (and $x84 $x87)))
 (let (($x61 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) $x88)))
 (let (($x58 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x9 (= $x58 input.spec-%tmpvar-1.L1%3%d)))
 (let (($x89 (and $x9 $x61)))
 (let (($x55 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x90 (and $x55 $x89)))
 (let (($x12 (= (_ bv5 32) input.spec-%tmpvar-2.L1%10%bbentry)))
 (let (($x91 (and $x12 $x90)))
 (let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x15 (= ?x19 input.spec-%tmpvar-3.L1%10%bbentry)))
 (let (($x92 (and $x15 $x91)))
 (let (($x24 (= (_ bv12 32) input.spec-%tmpvar-4.L1%10%bbentry)))
 (let (($x47 (and $x24 $x92)))
 (let (($x21 (= ?x20 input.spec-%tmpvar-5.L1%10%bbentry)))
 (let (($x42 (and $x21 $x47)))
 (let (($x70 (=> $x42 $x23)))
 (not $x70)))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%10%bbentry () (_ BitVec 32))
(assert
 (let ((?x71 (bvadd (_ bv12 32) input.dst.llvm-%x)))
 (let ((?x20 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x93 (= ?x20 ?x71)))
 (let (($x28 (= $x93 true)))
 (let (($x23 (= $x28 true)))
 (let ((?x69 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x75 (concat ?x74 (concat ?x72 (concat ?x67 ?x69)))))
 (let (($x86 (= ?x75 input.dst.llvm-%x)))
 (let (($x87 (= $x86 true)))
 (let (($x78 (= input.dst.llvm-%x ?x75)))
 (let ((?x44 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x50 (= (_ bv0 32) ?x44)))
 (let ((?x33 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x32 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x33)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x34 (and $x31 $x32)))
 (let (($x59 (and $x34 $x50)))
 (let (($x30 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (and $x30 $x59)))
 (let (($x45 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x37 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x14 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x10 $x37)))))))
 (let (($x81 (and (and (and $x14 $x45) $x77) $x78)))
 (let (($x82 (= $x81 true)))
 (let (($x83 (= $x82 true)))
 (let (($x39 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x41 (not $x39)))
 (let (($x43 (= $x41 true)))
 (let (($x6 (= $x43 true)))
 (let (($x84 (and $x6 $x83)))
 (let (($x88 (and $x84 $x87)))
 (let (($x61 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) $x88)))
 (let (($x58 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x9 (= $x58 input.spec-%tmpvar-1.L1%3%d)))
 (let (($x89 (and $x9 $x61)))
 (let (($x55 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x90 (and $x55 $x89)))
 (let (($x12 (= (_ bv5 32) input.spec-%tmpvar-2.L1%10%bbentry)))
 (let (($x91 (and $x12 $x90)))
 (let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x15 (= ?x19 input.spec-%tmpvar-3.L1%10%bbentry)))
 (let (($x92 (and $x15 $x91)))
 (let (($x24 (= (_ bv12 32) input.spec-%tmpvar-4.L1%10%bbentry)))
 (let (($x47 (and $x24 $x92)))
 (let (($x21 (= ?x20 input.spec-%tmpvar-5.L1%10%bbentry)))
 (let (($x42 (and $x21 $x47)))
 (let (($x70 (=> $x42 $x23)))
 (not $x70)))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460591/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%10%bbentry () (_ BitVec 32))
(assert
 (let ((?x93 (bvadd (_ bv4294967291 32) input.dst.llvm-%x)))
 (let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x28 (= ?x19 ?x93)))
 (let (($x23 (= $x28 true)))
 (let (($x70 (= $x23 true)))
 (let ((?x60 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x62 (concat ?x68 (concat ?x65 (concat ?x74 ?x60)))))
 (let (($x87 (= ?x62 input.dst.llvm-%x)))
 (let (($x88 (= $x87 true)))
 (let (($x75 (= input.dst.llvm-%x ?x62)))
 (let ((?x34 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x34)))
 (let ((?x57 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x33 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x57)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (and $x30 $x33)))
 (let (($x50 (and $x32 $x44)))
 (let (($x38 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and $x38 $x50)))
 (let (($x53 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x8 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x37 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x79 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x37 $x8)))))))
 (let (($x82 (and (and (and $x79 $x53) $x59) $x75)))
 (let (($x83 (= $x82 true)))
 (let (($x84 (= $x83 true)))
 (let (($x85 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x39 (= $x85 true)))
 (let (($x41 (= $x39 true)))
 (let (($x86 (and $x41 $x84)))
 (let (($x61 (and $x86 $x88)))
 (let (($x58 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x89 (and $x58 $x61)))
 (let (($x9 (= $x58 input.spec-%tmpvar-1.L1%3%d)))
 (let (($x90 (and $x9 $x89)))
 (let (($x55 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x91 (and $x55 $x90)))
 (let (($x12 (= (_ bv5 32) input.spec-%tmpvar-2.L1%10%bbentry)))
 (let (($x92 (and $x12 $x91)))
 (let (($x15 (= ?x19 input.spec-%tmpvar-3.L1%10%bbentry)))
 (let (($x47 (and $x15 $x92)))
 (let (($x18 (= (_ bv12 32) input.spec-%tmpvar-4.L1%10%bbentry)))
 (let (($x42 (and $x18 $x47)))
 (let ((?x26 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x20 (= ?x26 input.spec-%tmpvar-5.L1%10%bbentry)))
 (let (($x71 (and $x20 $x42)))
 (let (($x94 (=> $x71 $x70)))
 (not $x94))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%10%bbentry () (_ BitVec 32))
(assert
 (let ((?x93 (bvadd (_ bv4294967291 32) input.dst.llvm-%x)))
 (let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x28 (= ?x19 ?x93)))
 (let (($x23 (= $x28 true)))
 (let (($x70 (= $x23 true)))
 (let ((?x60 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x62 (concat ?x68 (concat ?x65 (concat ?x74 ?x60)))))
 (let (($x87 (= ?x62 input.dst.llvm-%x)))
 (let (($x88 (= $x87 true)))
 (let (($x75 (= input.dst.llvm-%x ?x62)))
 (let ((?x34 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x34)))
 (let ((?x57 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x33 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x57)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (and $x30 $x33)))
 (let (($x50 (and $x32 $x44)))
 (let (($x38 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and $x38 $x50)))
 (let (($x53 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x8 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x37 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x79 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x37 $x8)))))))
 (let (($x82 (and (and (and $x79 $x53) $x59) $x75)))
 (let (($x83 (= $x82 true)))
 (let (($x84 (= $x83 true)))
 (let (($x85 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x39 (= $x85 true)))
 (let (($x41 (= $x39 true)))
 (let (($x86 (and $x41 $x84)))
 (let (($x61 (and $x86 $x88)))
 (let (($x58 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x89 (and $x58 $x61)))
 (let (($x9 (= $x58 input.spec-%tmpvar-1.L1%3%d)))
 (let (($x90 (and $x9 $x89)))
 (let (($x55 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x91 (and $x55 $x90)))
 (let (($x12 (= (_ bv5 32) input.spec-%tmpvar-2.L1%10%bbentry)))
 (let (($x92 (and $x12 $x91)))
 (let (($x15 (= ?x19 input.spec-%tmpvar-3.L1%10%bbentry)))
 (let (($x47 (and $x15 $x92)))
 (let (($x18 (= (_ bv12 32) input.spec-%tmpvar-4.L1%10%bbentry)))
 (let (($x42 (and $x18 $x47)))
 (let ((?x26 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x20 (= ?x26 input.spec-%tmpvar-5.L1%10%bbentry)))
 (let (($x71 (and $x20 $x42)))
 (let (($x94 (=> $x71 $x70)))
 (not $x94))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460591/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%10%bbentry () (_ BitVec 32))
(assert
 (let ((?x94 (bvadd (_ bv12 32) input.dst.llvm-%x)))
 (let ((?x21 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x22 (= ?x21 ?x94)))
 (let (($x43 (= $x22 true)))
 (let (($x11 (= $x43 true)))
 (let ((?x64 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x82 (concat ?x75 (concat ?x73 (concat ?x65 ?x64)))))
 (let (($x90 (= ?x82 input.dst.llvm-%x)))
 (let (($x91 (= $x90 true)))
 (let (($x83 (= input.dst.llvm-%x ?x82)))
 (let ((?x50 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x50)))
 (let ((?x32 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x34 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x32)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (and $x57 $x34)))
 (let (($x81 (and $x44 $x59)))
 (let (($x31 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (and $x31 $x81)))
 (let (($x54 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x14 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x76 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x30 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x76 $x14)))))))
 (let (($x87 (and (and (and $x30 $x54) $x77) $x83)))
 (let (($x88 (= $x87 true)))
 (let (($x61 (= $x88 true)))
 (let (($x85 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x39 (not $x85)))
 (let (($x41 (= $x39 true)))
 (let (($x6 (= $x41 true)))
 (let (($x89 (and $x6 $x61)))
 (let (($x92 (and $x89 $x91)))
 (let (($x58 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x47 (and $x58 $x92)))
 (let (($x9 (= $x58 input.spec-%tmpvar-1.L1%3%d)))
 (let (($x42 (and $x9 $x47)))
 (let (($x55 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x71 (and $x55 $x42)))
 (let (($x12 (= (_ bv5 32) input.spec-%tmpvar-2.L1%10%bbentry)))
 (let (($x93 (and $x12 $x71)))
 (let (($x24 (= ?x21 input.spec-%tmpvar-3.L1%10%bbentry)))
 (let (($x28 (and $x24 $x93)))
 (let (($x26 (= (_ bv12 32) input.spec-%tmpvar-4.L1%10%bbentry)))
 (let (($x23 (and $x26 $x28)))
 (let ((?x20 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x15 (= ?x20 input.spec-%tmpvar-5.L1%10%bbentry)))
 (let (($x70 (and $x15 $x23)))
 (let (($x80 (=> $x70 $x11)))
 (not $x80)))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%10%bbentry () (_ BitVec 32))
(assert
 (let ((?x94 (bvadd (_ bv12 32) input.dst.llvm-%x)))
 (let ((?x21 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x22 (= ?x21 ?x94)))
 (let (($x43 (= $x22 true)))
 (let (($x11 (= $x43 true)))
 (let ((?x64 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x82 (concat ?x75 (concat ?x73 (concat ?x65 ?x64)))))
 (let (($x90 (= ?x82 input.dst.llvm-%x)))
 (let (($x91 (= $x90 true)))
 (let (($x83 (= input.dst.llvm-%x ?x82)))
 (let ((?x50 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x50)))
 (let ((?x32 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x34 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x32)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (and $x57 $x34)))
 (let (($x81 (and $x44 $x59)))
 (let (($x31 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (and $x31 $x81)))
 (let (($x54 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x14 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x76 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x30 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x76 $x14)))))))
 (let (($x87 (and (and (and $x30 $x54) $x77) $x83)))
 (let (($x88 (= $x87 true)))
 (let (($x61 (= $x88 true)))
 (let (($x85 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x39 (not $x85)))
 (let (($x41 (= $x39 true)))
 (let (($x6 (= $x41 true)))
 (let (($x89 (and $x6 $x61)))
 (let (($x92 (and $x89 $x91)))
 (let (($x58 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x47 (and $x58 $x92)))
 (let (($x9 (= $x58 input.spec-%tmpvar-1.L1%3%d)))
 (let (($x42 (and $x9 $x47)))
 (let (($x55 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x71 (and $x55 $x42)))
 (let (($x12 (= (_ bv5 32) input.spec-%tmpvar-2.L1%10%bbentry)))
 (let (($x93 (and $x12 $x71)))
 (let (($x24 (= ?x21 input.spec-%tmpvar-3.L1%10%bbentry)))
 (let (($x28 (and $x24 $x93)))
 (let (($x26 (= (_ bv12 32) input.spec-%tmpvar-4.L1%10%bbentry)))
 (let (($x23 (and $x26 $x28)))
 (let ((?x20 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x15 (= ?x20 input.spec-%tmpvar-5.L1%10%bbentry)))
 (let (($x70 (and $x15 $x23)))
 (let (($x80 (=> $x70 $x11)))
 (not $x80)))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460591/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%10%bbentry () (_ BitVec 32))
(assert
 (let (($x28 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x23 (not $x28)))
 (let (($x70 (or $x28 $x23)))
 (let (($x94 (= $x70 true)))
 (let (($x22 (= $x94 true)))
 (let ((?x60 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x87 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x88 (concat ?x87 (concat ?x67 (concat ?x72 ?x60)))))
 (let (($x61 (= ?x88 input.dst.llvm-%x)))
 (let (($x89 (= $x61 true)))
 (let (($x77 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x86 (= $x77 true)))
 (let (($x69 (= $x86 true)))
 (let ((?x57 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x33 (= (_ bv0 32) ?x57)))
 (let ((?x84 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x51 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x84)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x31 (and $x30 $x51)))
 (let (($x32 (and $x31 $x33)))
 (let (($x6 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x34 (and $x6 $x32)))
 (let (($x76 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x25 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x49 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x25 $x76)))))))
 (let (($x44 (and $x49 $x34)))
 (let (($x50 (= $x44 true)))
 (let (($x59 (= $x50 true)))
 (let (($x62 (and $x59 $x69)))
 (let (($x90 (and $x62 $x89)))
 (let (($x58 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x9 (= $x58 input.spec-%tmpvar-1.L1%3%d)))
 (let (($x91 (and $x9 $x90)))
 (let (($x55 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x92 (and $x55 $x91)))
 (let (($x12 (= (_ bv5 32) input.spec-%tmpvar-2.L1%10%bbentry)))
 (let (($x47 (and $x12 $x92)))
 (let ((?x21 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x24 (= ?x21 input.spec-%tmpvar-3.L1%10%bbentry)))
 (let (($x42 (and $x24 $x47)))
 (let (($x26 (= (_ bv12 32) input.spec-%tmpvar-4.L1%10%bbentry)))
 (let (($x71 (and $x26 $x42)))
 (let ((?x20 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x15 (= ?x20 input.spec-%tmpvar-5.L1%10%bbentry)))
 (let (($x93 (and $x15 $x71)))
 (let (($x43 (=> $x93 $x22)))
 (not $x43))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%10%bbentry () (_ BitVec 32))
(assert
 (let (($x28 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x23 (not $x28)))
 (let (($x70 (or $x28 $x23)))
 (let (($x94 (= $x70 true)))
 (let (($x22 (= $x94 true)))
 (let ((?x60 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x87 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x88 (concat ?x87 (concat ?x67 (concat ?x72 ?x60)))))
 (let (($x61 (= ?x88 input.dst.llvm-%x)))
 (let (($x89 (= $x61 true)))
 (let (($x77 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x86 (= $x77 true)))
 (let (($x69 (= $x86 true)))
 (let ((?x57 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x33 (= (_ bv0 32) ?x57)))
 (let ((?x84 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x51 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x84)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x31 (and $x30 $x51)))
 (let (($x32 (and $x31 $x33)))
 (let (($x6 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x34 (and $x6 $x32)))
 (let (($x76 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x25 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x49 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x25 $x76)))))))
 (let (($x44 (and $x49 $x34)))
 (let (($x50 (= $x44 true)))
 (let (($x59 (= $x50 true)))
 (let (($x62 (and $x59 $x69)))
 (let (($x90 (and $x62 $x89)))
 (let (($x58 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x9 (= $x58 input.spec-%tmpvar-1.L1%3%d)))
 (let (($x91 (and $x9 $x90)))
 (let (($x55 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x92 (and $x55 $x91)))
 (let (($x12 (= (_ bv5 32) input.spec-%tmpvar-2.L1%10%bbentry)))
 (let (($x47 (and $x12 $x92)))
 (let ((?x21 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x24 (= ?x21 input.spec-%tmpvar-3.L1%10%bbentry)))
 (let (($x42 (and $x24 $x47)))
 (let (($x26 (= (_ bv12 32) input.spec-%tmpvar-4.L1%10%bbentry)))
 (let (($x71 (and $x26 $x42)))
 (let ((?x20 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x15 (= ?x20 input.spec-%tmpvar-5.L1%10%bbentry)))
 (let (($x93 (and $x15 $x71)))
 (let (($x43 (=> $x93 $x22)))
 (not $x43))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460591/query
