==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x11 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x11)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (and $x14 $x12)))
 (let (($x19 (and $x10 $x18)))
 (and $x19 $x20)))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x11 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x11)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (and $x14 $x12)))
 (let (($x19 (and $x10 $x18)))
 (and $x19 $x20)))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310054/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%10%bbentry () (_ BitVec 32))
(assert
 (let (($x72 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x73 (not $x72)))
 (let (($x74 (or $x72 $x73)))
 (let (($x75 (= $x74 false)))
 (let (($x76 (= $x75 true)))
 (let ((?x50 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x61 (concat ?x60 (concat ?x57 (concat ?x53 ?x50)))))
 (let (($x62 (= ?x61 input.dst.llvm-%x)))
 (let (($x63 (= $x62 true)))
 (let (($x64 (= $x63 true)))
 (let (($x23 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x34 (= $x23 true)))
 (let (($x36 (= $x34 true)))
 (let (($x29 (= $x36 true)))
 (let ((?x12 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x9 (= (_ bv0 32) ?x12)))
 (let ((?x40 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x40)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x35 (and $x13 $x26)))
 (let (($x38 (and $x35 $x9)))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x20 $x38)))
 (let (($x14 (= $x15 true)))
 (let (($x6 (= $x14 true)))
 (let (($x8 (= $x6 true)))
 (let (($x41 (and $x8 $x29)))
 (let (($x65 (and $x41 $x64)))
 (let (($x46 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x24 (= $x46 input.spec-%tmpvar-1.L1%3%d)))
 (let (($x66 (and $x24 $x65)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x67 (and $x16 $x66)))
 (let (($x43 (= (_ bv5 32) input.spec-%tmpvar-2.L1%10%bbentry)))
 (let (($x68 (and $x43 $x67)))
 (let ((?x28 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x37 (= ?x28 input.spec-%tmpvar-3.L1%10%bbentry)))
 (let (($x69 (and $x37 $x68)))
 (let (($x44 (= (_ bv12 32) input.spec-%tmpvar-4.L1%10%bbentry)))
 (let (($x70 (and $x44 $x69)))
 (let ((?x22 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x10 (= ?x22 input.spec-%tmpvar-5.L1%10%bbentry)))
 (let (($x71 (and $x10 $x70)))
 (let (($x77 (=> $x71 $x76)))
 (not $x77)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%10%bbentry () (_ BitVec 32))
(assert
 (let (($x72 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x73 (not $x72)))
 (let (($x74 (or $x72 $x73)))
 (let (($x75 (= $x74 false)))
 (let (($x76 (= $x75 true)))
 (let ((?x50 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x61 (concat ?x60 (concat ?x57 (concat ?x53 ?x50)))))
 (let (($x62 (= ?x61 input.dst.llvm-%x)))
 (let (($x63 (= $x62 true)))
 (let (($x64 (= $x63 true)))
 (let (($x23 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x34 (= $x23 true)))
 (let (($x36 (= $x34 true)))
 (let (($x29 (= $x36 true)))
 (let ((?x12 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x9 (= (_ bv0 32) ?x12)))
 (let ((?x40 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x40)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x35 (and $x13 $x26)))
 (let (($x38 (and $x35 $x9)))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x20 $x38)))
 (let (($x14 (= $x15 true)))
 (let (($x6 (= $x14 true)))
 (let (($x8 (= $x6 true)))
 (let (($x41 (and $x8 $x29)))
 (let (($x65 (and $x41 $x64)))
 (let (($x46 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x24 (= $x46 input.spec-%tmpvar-1.L1%3%d)))
 (let (($x66 (and $x24 $x65)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x67 (and $x16 $x66)))
 (let (($x43 (= (_ bv5 32) input.spec-%tmpvar-2.L1%10%bbentry)))
 (let (($x68 (and $x43 $x67)))
 (let ((?x28 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x37 (= ?x28 input.spec-%tmpvar-3.L1%10%bbentry)))
 (let (($x69 (and $x37 $x68)))
 (let (($x44 (= (_ bv12 32) input.spec-%tmpvar-4.L1%10%bbentry)))
 (let (($x70 (and $x44 $x69)))
 (let ((?x22 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x10 (= ?x22 input.spec-%tmpvar-5.L1%10%bbentry)))
 (let (($x71 (and $x10 $x70)))
 (let (($x77 (=> $x71 $x76)))
 (not $x77)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.spec-%tmpvar-1.L1%3%d false)
(= input.dst.llvm-%x #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.spec-%var-x-0 #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%tmpvar-0.L1%3%d #b00000000000000000000000000000000)
(= input.spec-%tmpvar-2.L1%10%bbentry #b00000000000000000000000000000101)
(= input.spec-%tmpvar-3.L1%10%bbentry #b11111111111111111111111111111011)
(= input.spec-%tmpvar-4.L1%10%bbentry #b00000000000000000000000000001100)
(= input.spec-%tmpvar-5.L1%10%bbentry #b00000000000000000000000000001100)
(= input.dst.llvm-mem @fun_4)
(function @fun_4
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%tmpvar-3.L1%10%bbentry () (_ BitVec 32)
    #xfffffffb)
  (define-fun input.spec-%tmpvar-5.L1%10%bbentry () (_ BitVec 32)
    #x0000000c)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L1%3%d () Bool
    false)
  (define-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.L1%10%bbentry () (_ BitVec 32)
    #x00000005)
  (define-fun input.spec-%tmpvar-4.L1%10%bbentry () (_ BitVec 32)
    #x0000000c)
  (define-fun input.spec-%var-x-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%x () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv8396800 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-x-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv8396800 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv8396803 32))
(define-fun input.spec-%tmpvar-1.L1%3%d () Bool false)
(define-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-2.L1%10%bbentry () (_ BitVec 32) (_ bv5 32))
(define-fun input.spec-%tmpvar-3.L1%10%bbentry () (_ BitVec 32) (_ bv4294967291 32))
(define-fun input.spec-%tmpvar-4.L1%10%bbentry () (_ BitVec 32) (_ bv12 32))
(define-fun input.spec-%tmpvar-5.L1%10%bbentry () (_ BitVec 32) (_ bv12 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310054/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%10%bbentry () (_ BitVec 32))
(assert
 (let (($x76 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x77 (not $x76)))
 (let (($x78 (or $x76 $x77)))
 (let (($x48 (not $x78)))
 (let (($x46 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x74 (not $x46)))
 (let (($x75 (or $x46 $x74)))
 (let (($x49 (or $x75 $x48)))
 (let (($x79 (= $x49 true)))
 (let (($x80 (= $x79 true)))
 (let ((?x55 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x63 (concat ?x62 (concat ?x54 (concat ?x51 ?x55)))))
 (let (($x64 (= ?x63 input.dst.llvm-%x)))
 (let (($x65 (= $x64 true)))
 (let (($x66 (= $x65 true)))
 (let (($x23 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x34 (= $x23 true)))
 (let (($x36 (= $x34 true)))
 (let (($x29 (= $x36 true)))
 (let ((?x12 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x9 (= (_ bv0 32) ?x12)))
 (let ((?x40 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x40)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x35 (and $x13 $x26)))
 (let (($x38 (and $x35 $x9)))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x20 $x38)))
 (let (($x14 (= $x15 true)))
 (let (($x6 (= $x14 true)))
 (let (($x8 (= $x6 true)))
 (let (($x41 (and $x8 $x29)))
 (let (($x67 (and $x41 $x66)))
 (let (($x24 (= $x46 input.spec-%tmpvar-1.L1%3%d)))
 (let (($x68 (and $x24 $x67)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x69 (and $x16 $x68)))
 (let (($x43 (= (_ bv5 32) input.spec-%tmpvar-2.L1%10%bbentry)))
 (let (($x70 (and $x43 $x69)))
 (let ((?x28 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x37 (= ?x28 input.spec-%tmpvar-3.L1%10%bbentry)))
 (let (($x71 (and $x37 $x70)))
 (let (($x44 (= (_ bv12 32) input.spec-%tmpvar-4.L1%10%bbentry)))
 (let (($x72 (and $x44 $x71)))
 (let ((?x22 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x10 (= ?x22 input.spec-%tmpvar-5.L1%10%bbentry)))
 (let (($x73 (and $x10 $x72)))
 (let (($x81 (=> $x73 $x80)))
 (not $x81)))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%10%bbentry () (_ BitVec 32))
(assert
 (let (($x76 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x77 (not $x76)))
 (let (($x78 (or $x76 $x77)))
 (let (($x48 (not $x78)))
 (let (($x46 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x74 (not $x46)))
 (let (($x75 (or $x46 $x74)))
 (let (($x49 (or $x75 $x48)))
 (let (($x79 (= $x49 true)))
 (let (($x80 (= $x79 true)))
 (let ((?x55 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x63 (concat ?x62 (concat ?x54 (concat ?x51 ?x55)))))
 (let (($x64 (= ?x63 input.dst.llvm-%x)))
 (let (($x65 (= $x64 true)))
 (let (($x66 (= $x65 true)))
 (let (($x23 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x34 (= $x23 true)))
 (let (($x36 (= $x34 true)))
 (let (($x29 (= $x36 true)))
 (let ((?x12 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x9 (= (_ bv0 32) ?x12)))
 (let ((?x40 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x40)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x35 (and $x13 $x26)))
 (let (($x38 (and $x35 $x9)))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x20 $x38)))
 (let (($x14 (= $x15 true)))
 (let (($x6 (= $x14 true)))
 (let (($x8 (= $x6 true)))
 (let (($x41 (and $x8 $x29)))
 (let (($x67 (and $x41 $x66)))
 (let (($x24 (= $x46 input.spec-%tmpvar-1.L1%3%d)))
 (let (($x68 (and $x24 $x67)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x69 (and $x16 $x68)))
 (let (($x43 (= (_ bv5 32) input.spec-%tmpvar-2.L1%10%bbentry)))
 (let (($x70 (and $x43 $x69)))
 (let ((?x28 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x37 (= ?x28 input.spec-%tmpvar-3.L1%10%bbentry)))
 (let (($x71 (and $x37 $x70)))
 (let (($x44 (= (_ bv12 32) input.spec-%tmpvar-4.L1%10%bbentry)))
 (let (($x72 (and $x44 $x71)))
 (let ((?x22 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x10 (= ?x22 input.spec-%tmpvar-5.L1%10%bbentry)))
 (let (($x73 (and $x10 $x72)))
 (let (($x81 (=> $x73 $x80)))
 (not $x81)))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310054/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%10%bbentry () (_ BitVec 32))
(assert
 (let ((?x80 (bvadd (_ bv4294967291 32) input.dst.llvm-%x)))
 (let ((?x10 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x81 (= ?x10 ?x80)))
 (let (($x82 (= $x81 true)))
 (let (($x59 (= $x82 true)))
 (let ((?x38 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x55 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x52 (concat ?x55 (concat ?x39 (concat ?x50 ?x38)))))
 (let (($x70 (= ?x52 input.dst.llvm-%x)))
 (let (($x71 (= $x70 true)))
 (let (($x72 (= $x71 true)))
 (let (($x58 (= input.dst.llvm-%x ?x52)))
 (let ((?x6 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x32 (= (_ bv0 32) ?x6)))
 (let ((?x9 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x41 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x9)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x35 (and $x42 $x41)))
 (let (($x14 (and $x35 $x32)))
 (let (($x25 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x13 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (and (and (and $x13 $x25) $x14) $x58)))
 (let (($x66 (= $x65 true)))
 (let (($x67 (= $x66 true)))
 (let (($x68 (= $x67 true)))
 (let (($x24 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x30 (= $x24 true)))
 (let (($x40 (= $x30 true)))
 (let (($x5 (= $x40 true)))
 (let (($x69 (and $x5 $x68)))
 (let (($x73 (and $x69 $x72)))
 (let (($x75 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) $x73)))
 (let (($x45 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x16 (= $x45 input.spec-%tmpvar-1.L1%3%d)))
 (let (($x76 (and $x16 $x75)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x77 (and $x57 $x76)))
 (let (($x29 (= (_ bv5 32) input.spec-%tmpvar-2.L1%10%bbentry)))
 (let (($x78 (and $x29 $x77)))
 (let ((?x26 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x22 (= ?x26 input.spec-%tmpvar-3.L1%10%bbentry)))
 (let (($x48 (and $x22 $x78)))
 (let (($x27 (= (_ bv12 32) input.spec-%tmpvar-4.L1%10%bbentry)))
 (let (($x49 (and $x27 $x48)))
 (let (($x37 (= ?x10 input.spec-%tmpvar-5.L1%10%bbentry)))
 (let (($x79 (and $x37 $x49)))
 (let (($x60 (=> $x79 $x59)))
 (not $x60)))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%10%bbentry () (_ BitVec 32))
(assert
 (let ((?x80 (bvadd (_ bv4294967291 32) input.dst.llvm-%x)))
 (let ((?x10 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x81 (= ?x10 ?x80)))
 (let (($x82 (= $x81 true)))
 (let (($x59 (= $x82 true)))
 (let ((?x38 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x55 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x52 (concat ?x55 (concat ?x39 (concat ?x50 ?x38)))))
 (let (($x70 (= ?x52 input.dst.llvm-%x)))
 (let (($x71 (= $x70 true)))
 (let (($x72 (= $x71 true)))
 (let (($x58 (= input.dst.llvm-%x ?x52)))
 (let ((?x6 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x32 (= (_ bv0 32) ?x6)))
 (let ((?x9 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x41 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x9)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x35 (and $x42 $x41)))
 (let (($x14 (and $x35 $x32)))
 (let (($x25 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x13 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (and (and (and $x13 $x25) $x14) $x58)))
 (let (($x66 (= $x65 true)))
 (let (($x67 (= $x66 true)))
 (let (($x68 (= $x67 true)))
 (let (($x24 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x30 (= $x24 true)))
 (let (($x40 (= $x30 true)))
 (let (($x5 (= $x40 true)))
 (let (($x69 (and $x5 $x68)))
 (let (($x73 (and $x69 $x72)))
 (let (($x75 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) $x73)))
 (let (($x45 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x16 (= $x45 input.spec-%tmpvar-1.L1%3%d)))
 (let (($x76 (and $x16 $x75)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x77 (and $x57 $x76)))
 (let (($x29 (= (_ bv5 32) input.spec-%tmpvar-2.L1%10%bbentry)))
 (let (($x78 (and $x29 $x77)))
 (let ((?x26 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x22 (= ?x26 input.spec-%tmpvar-3.L1%10%bbentry)))
 (let (($x48 (and $x22 $x78)))
 (let (($x27 (= (_ bv12 32) input.spec-%tmpvar-4.L1%10%bbentry)))
 (let (($x49 (and $x27 $x48)))
 (let (($x37 (= ?x10 input.spec-%tmpvar-5.L1%10%bbentry)))
 (let (($x79 (and $x37 $x49)))
 (let (($x60 (=> $x79 $x59)))
 (not $x60)))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310054/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%10%bbentry () (_ BitVec 32))
(assert
 (let ((?x59 (bvadd (_ bv12 32) input.dst.llvm-%x)))
 (let ((?x20 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x60 (= ?x20 ?x59)))
 (let (($x83 (= $x60 true)))
 (let (($x12 (= $x83 true)))
 (let ((?x51 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x43 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x17 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x52 (concat ?x17 (concat ?x50 (concat ?x43 ?x51)))))
 (let (($x72 (= ?x52 input.dst.llvm-%x)))
 (let (($x73 (= $x72 true)))
 (let (($x75 (= $x73 true)))
 (let (($x58 (= input.dst.llvm-%x ?x52)))
 (let ((?x35 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x6 (= (_ bv0 32) ?x35)))
 (let ((?x61 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x9 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x61)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (and $x23 $x9)))
 (let (($x32 (and $x41 $x6)))
 (let (($x25 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x13 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x67 (and (and (and $x13 $x25) $x32) $x58)))
 (let (($x68 (= $x67 true)))
 (let (($x69 (= $x68 true)))
 (let (($x70 (= $x69 true)))
 (let (($x31 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x24 (not $x31)))
 (let (($x30 (= $x24 true)))
 (let (($x40 (= $x30 true)))
 (let (($x5 (= $x40 true)))
 (let (($x71 (and $x5 $x70)))
 (let (($x76 (and $x71 $x75)))
 (let (($x78 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) $x76)))
 (let (($x45 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x16 (= $x45 input.spec-%tmpvar-1.L1%3%d)))
 (let (($x48 (and $x16 $x78)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x49 (and $x57 $x48)))
 (let (($x29 (= (_ bv5 32) input.spec-%tmpvar-2.L1%10%bbentry)))
 (let (($x79 (and $x29 $x49)))
 (let ((?x26 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x22 (= ?x26 input.spec-%tmpvar-3.L1%10%bbentry)))
 (let (($x80 (and $x22 $x79)))
 (let (($x33 (= (_ bv12 32) input.spec-%tmpvar-4.L1%10%bbentry)))
 (let (($x81 (and $x33 $x80)))
 (let (($x10 (= ?x20 input.spec-%tmpvar-5.L1%10%bbentry)))
 (let (($x82 (and $x10 $x81)))
 (let (($x46 (=> $x82 $x12)))
 (not $x46))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%10%bbentry () (_ BitVec 32))
(assert
 (let ((?x59 (bvadd (_ bv12 32) input.dst.llvm-%x)))
 (let ((?x20 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x60 (= ?x20 ?x59)))
 (let (($x83 (= $x60 true)))
 (let (($x12 (= $x83 true)))
 (let ((?x51 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x43 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x17 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x52 (concat ?x17 (concat ?x50 (concat ?x43 ?x51)))))
 (let (($x72 (= ?x52 input.dst.llvm-%x)))
 (let (($x73 (= $x72 true)))
 (let (($x75 (= $x73 true)))
 (let (($x58 (= input.dst.llvm-%x ?x52)))
 (let ((?x35 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x6 (= (_ bv0 32) ?x35)))
 (let ((?x61 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x9 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x61)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (and $x23 $x9)))
 (let (($x32 (and $x41 $x6)))
 (let (($x25 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x13 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x67 (and (and (and $x13 $x25) $x32) $x58)))
 (let (($x68 (= $x67 true)))
 (let (($x69 (= $x68 true)))
 (let (($x70 (= $x69 true)))
 (let (($x31 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x24 (not $x31)))
 (let (($x30 (= $x24 true)))
 (let (($x40 (= $x30 true)))
 (let (($x5 (= $x40 true)))
 (let (($x71 (and $x5 $x70)))
 (let (($x76 (and $x71 $x75)))
 (let (($x78 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) $x76)))
 (let (($x45 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x16 (= $x45 input.spec-%tmpvar-1.L1%3%d)))
 (let (($x48 (and $x16 $x78)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x49 (and $x57 $x48)))
 (let (($x29 (= (_ bv5 32) input.spec-%tmpvar-2.L1%10%bbentry)))
 (let (($x79 (and $x29 $x49)))
 (let ((?x26 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x22 (= ?x26 input.spec-%tmpvar-3.L1%10%bbentry)))
 (let (($x80 (and $x22 $x79)))
 (let (($x33 (= (_ bv12 32) input.spec-%tmpvar-4.L1%10%bbentry)))
 (let (($x81 (and $x33 $x80)))
 (let (($x10 (= ?x20 input.spec-%tmpvar-5.L1%10%bbentry)))
 (let (($x82 (and $x10 $x81)))
 (let (($x46 (=> $x82 $x12)))
 (not $x46))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310054/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%10%bbentry () (_ BitVec 32))
(assert
 (let ((?x59 (bvadd (_ bv4294967291 32) input.dst.llvm-%x)))
 (let ((?x26 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x60 (= ?x26 ?x59)))
 (let (($x83 (= $x60 true)))
 (let (($x12 (= $x83 true)))
 (let ((?x66 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x17 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x55 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x39 (concat ?x51 (concat ?x55 (concat ?x17 ?x66)))))
 (let (($x72 (= ?x39 input.dst.llvm-%x)))
 (let (($x73 (= $x72 true)))
 (let (($x75 (= $x73 true)))
 (let (($x38 (= input.dst.llvm-%x ?x39)))
 (let ((?x61 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x9 (= (_ bv0 32) ?x61)))
 (let ((?x63 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x23 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x63)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x42 (and $x25 $x23)))
 (let (($x41 (and $x42 $x9)))
 (let (($x7 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x47 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x67 (and (and (and $x47 $x7) $x41) $x38)))
 (let (($x68 (= $x67 true)))
 (let (($x69 (= $x68 true)))
 (let (($x70 (= $x69 true)))
 (let (($x74 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x31 (= $x74 true)))
 (let (($x24 (= $x31 true)))
 (let (($x30 (= $x24 true)))
 (let (($x71 (and $x30 $x70)))
 (let (($x76 (and $x71 $x75)))
 (let (($x45 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x78 (and $x45 $x76)))
 (let (($x16 (= $x45 input.spec-%tmpvar-1.L1%3%d)))
 (let (($x48 (and $x16 $x78)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x49 (and $x57 $x48)))
 (let (($x29 (= (_ bv5 32) input.spec-%tmpvar-2.L1%10%bbentry)))
 (let (($x79 (and $x29 $x49)))
 (let (($x22 (= ?x26 input.spec-%tmpvar-3.L1%10%bbentry)))
 (let (($x80 (and $x22 $x79)))
 (let (($x37 (= (_ bv12 32) input.spec-%tmpvar-4.L1%10%bbentry)))
 (let (($x81 (and $x37 $x80)))
 (let ((?x27 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x20 (= ?x27 input.spec-%tmpvar-5.L1%10%bbentry)))
 (let (($x82 (and $x20 $x81)))
 (let (($x46 (=> $x82 $x12)))
 (not $x46)))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%10%bbentry () (_ BitVec 32))
(assert
 (let ((?x59 (bvadd (_ bv4294967291 32) input.dst.llvm-%x)))
 (let ((?x26 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x60 (= ?x26 ?x59)))
 (let (($x83 (= $x60 true)))
 (let (($x12 (= $x83 true)))
 (let ((?x66 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x17 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x55 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x39 (concat ?x51 (concat ?x55 (concat ?x17 ?x66)))))
 (let (($x72 (= ?x39 input.dst.llvm-%x)))
 (let (($x73 (= $x72 true)))
 (let (($x75 (= $x73 true)))
 (let (($x38 (= input.dst.llvm-%x ?x39)))
 (let ((?x61 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x9 (= (_ bv0 32) ?x61)))
 (let ((?x63 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x23 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x63)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x42 (and $x25 $x23)))
 (let (($x41 (and $x42 $x9)))
 (let (($x7 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x47 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x67 (and (and (and $x47 $x7) $x41) $x38)))
 (let (($x68 (= $x67 true)))
 (let (($x69 (= $x68 true)))
 (let (($x70 (= $x69 true)))
 (let (($x74 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x31 (= $x74 true)))
 (let (($x24 (= $x31 true)))
 (let (($x30 (= $x24 true)))
 (let (($x71 (and $x30 $x70)))
 (let (($x76 (and $x71 $x75)))
 (let (($x45 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x78 (and $x45 $x76)))
 (let (($x16 (= $x45 input.spec-%tmpvar-1.L1%3%d)))
 (let (($x48 (and $x16 $x78)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x49 (and $x57 $x48)))
 (let (($x29 (= (_ bv5 32) input.spec-%tmpvar-2.L1%10%bbentry)))
 (let (($x79 (and $x29 $x49)))
 (let (($x22 (= ?x26 input.spec-%tmpvar-3.L1%10%bbentry)))
 (let (($x80 (and $x22 $x79)))
 (let (($x37 (= (_ bv12 32) input.spec-%tmpvar-4.L1%10%bbentry)))
 (let (($x81 (and $x37 $x80)))
 (let ((?x27 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x20 (= ?x27 input.spec-%tmpvar-5.L1%10%bbentry)))
 (let (($x82 (and $x20 $x81)))
 (let (($x46 (=> $x82 $x12)))
 (not $x46)))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310054/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%10%bbentry () (_ BitVec 32))
(assert
 (let ((?x12 (bvadd (_ bv12 32) input.dst.llvm-%x)))
 (let ((?x10 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x46 (= ?x10 ?x12)))
 (let (($x84 (= $x46 true)))
 (let (($x6 (= $x84 true)))
 (let ((?x51 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x55 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x38 (concat ?x39 (concat ?x66 (concat ?x55 ?x51)))))
 (let (($x76 (= ?x38 input.dst.llvm-%x)))
 (let (($x78 (= $x76 true)))
 (let (($x48 (= $x78 true)))
 (let (($x67 (= input.dst.llvm-%x ?x38)))
 (let ((?x61 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x9 (= (_ bv0 32) ?x61)))
 (let ((?x63 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x23 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x63)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x42 (and $x25 $x23)))
 (let (($x41 (and $x42 $x9)))
 (let (($x52 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x7 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x70 (and (and (and $x7 $x52) $x41) $x67)))
 (let (($x71 (= $x70 true)))
 (let (($x72 (= $x71 true)))
 (let (($x73 (= $x72 true)))
 (let (($x74 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x31 (not $x74)))
 (let (($x24 (= $x31 true)))
 (let (($x30 (= $x24 true)))
 (let (($x40 (= $x30 true)))
 (let (($x75 (and $x40 $x73)))
 (let (($x49 (and $x75 $x48)))
 (let (($x45 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x79 (and $x45 $x49)))
 (let (($x16 (= $x45 input.spec-%tmpvar-1.L1%3%d)))
 (let (($x80 (and $x16 $x79)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x81 (and $x57 $x80)))
 (let (($x29 (= (_ bv5 32) input.spec-%tmpvar-2.L1%10%bbentry)))
 (let (($x82 (and $x29 $x81)))
 (let (($x33 (= ?x10 input.spec-%tmpvar-3.L1%10%bbentry)))
 (let (($x59 (and $x33 $x82)))
 (let (($x27 (= (_ bv12 32) input.spec-%tmpvar-4.L1%10%bbentry)))
 (let (($x60 (and $x27 $x59)))
 (let ((?x20 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x22 (= ?x20 input.spec-%tmpvar-5.L1%10%bbentry)))
 (let (($x83 (and $x22 $x60)))
 (let (($x32 (=> $x83 $x6)))
 (not $x32))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%10%bbentry () (_ BitVec 32))
(assert
 (let ((?x12 (bvadd (_ bv12 32) input.dst.llvm-%x)))
 (let ((?x10 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x46 (= ?x10 ?x12)))
 (let (($x84 (= $x46 true)))
 (let (($x6 (= $x84 true)))
 (let ((?x51 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x55 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x38 (concat ?x39 (concat ?x66 (concat ?x55 ?x51)))))
 (let (($x76 (= ?x38 input.dst.llvm-%x)))
 (let (($x78 (= $x76 true)))
 (let (($x48 (= $x78 true)))
 (let (($x67 (= input.dst.llvm-%x ?x38)))
 (let ((?x61 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x9 (= (_ bv0 32) ?x61)))
 (let ((?x63 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x23 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x63)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x42 (and $x25 $x23)))
 (let (($x41 (and $x42 $x9)))
 (let (($x52 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x7 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x70 (and (and (and $x7 $x52) $x41) $x67)))
 (let (($x71 (= $x70 true)))
 (let (($x72 (= $x71 true)))
 (let (($x73 (= $x72 true)))
 (let (($x74 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x31 (not $x74)))
 (let (($x24 (= $x31 true)))
 (let (($x30 (= $x24 true)))
 (let (($x40 (= $x30 true)))
 (let (($x75 (and $x40 $x73)))
 (let (($x49 (and $x75 $x48)))
 (let (($x45 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x79 (and $x45 $x49)))
 (let (($x16 (= $x45 input.spec-%tmpvar-1.L1%3%d)))
 (let (($x80 (and $x16 $x79)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x81 (and $x57 $x80)))
 (let (($x29 (= (_ bv5 32) input.spec-%tmpvar-2.L1%10%bbentry)))
 (let (($x82 (and $x29 $x81)))
 (let (($x33 (= ?x10 input.spec-%tmpvar-3.L1%10%bbentry)))
 (let (($x59 (and $x33 $x82)))
 (let (($x27 (= (_ bv12 32) input.spec-%tmpvar-4.L1%10%bbentry)))
 (let (($x60 (and $x27 $x59)))
 (let ((?x20 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x22 (= ?x20 input.spec-%tmpvar-5.L1%10%bbentry)))
 (let (($x83 (and $x22 $x60)))
 (let (($x32 (=> $x83 $x6)))
 (not $x32))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310054/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%10%bbentry () (_ BitVec 32))
(assert
 (let (($x82 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x59 (not $x82)))
 (let (($x60 (or $x82 $x59)))
 (let (($x83 (= $x60 true)))
 (let (($x12 (= $x83 true)))
 (let ((?x17 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x71 (concat ?x70 (concat ?x19 (concat ?x50 ?x17)))))
 (let (($x72 (= ?x71 input.dst.llvm-%x)))
 (let (($x73 (= $x72 true)))
 (let (($x75 (= $x73 true)))
 (let (($x61 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x9 (= $x61 true)))
 (let (($x41 (= $x9 true)))
 (let (($x69 (= $x41 true)))
 (let ((?x52 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x52)))
 (let ((?x5 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x47 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x5)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x30 $x47)))
 (let (($x13 (and $x7 $x68)))
 (let (($x31 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (and $x31 $x13)))
 (let (($x65 (= $x25 true)))
 (let (($x63 (= $x65 true)))
 (let (($x23 (= $x63 true)))
 (let (($x58 (and $x23 $x69)))
 (let (($x76 (and $x58 $x75)))
 (let (($x45 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x16 (= $x45 input.spec-%tmpvar-1.L1%3%d)))
 (let (($x78 (and $x16 $x76)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x48 (and $x57 $x78)))
 (let (($x29 (= (_ bv5 32) input.spec-%tmpvar-2.L1%10%bbentry)))
 (let (($x49 (and $x29 $x48)))
 (let ((?x10 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x33 (= ?x10 input.spec-%tmpvar-3.L1%10%bbentry)))
 (let (($x79 (and $x33 $x49)))
 (let (($x27 (= (_ bv12 32) input.spec-%tmpvar-4.L1%10%bbentry)))
 (let (($x80 (and $x27 $x79)))
 (let ((?x20 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x22 (= ?x20 input.spec-%tmpvar-5.L1%10%bbentry)))
 (let (($x81 (and $x22 $x80)))
 (let (($x46 (=> $x81 $x12)))
 (not $x46)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%10%bbentry () (_ BitVec 32))
(assert
 (let (($x82 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x59 (not $x82)))
 (let (($x60 (or $x82 $x59)))
 (let (($x83 (= $x60 true)))
 (let (($x12 (= $x83 true)))
 (let ((?x17 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x71 (concat ?x70 (concat ?x19 (concat ?x50 ?x17)))))
 (let (($x72 (= ?x71 input.dst.llvm-%x)))
 (let (($x73 (= $x72 true)))
 (let (($x75 (= $x73 true)))
 (let (($x61 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x9 (= $x61 true)))
 (let (($x41 (= $x9 true)))
 (let (($x69 (= $x41 true)))
 (let ((?x52 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x52)))
 (let ((?x5 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x47 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x5)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x30 $x47)))
 (let (($x13 (and $x7 $x68)))
 (let (($x31 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (and $x31 $x13)))
 (let (($x65 (= $x25 true)))
 (let (($x63 (= $x65 true)))
 (let (($x23 (= $x63 true)))
 (let (($x58 (and $x23 $x69)))
 (let (($x76 (and $x58 $x75)))
 (let (($x45 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x16 (= $x45 input.spec-%tmpvar-1.L1%3%d)))
 (let (($x78 (and $x16 $x76)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x48 (and $x57 $x78)))
 (let (($x29 (= (_ bv5 32) input.spec-%tmpvar-2.L1%10%bbentry)))
 (let (($x49 (and $x29 $x48)))
 (let ((?x10 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x33 (= ?x10 input.spec-%tmpvar-3.L1%10%bbentry)))
 (let (($x79 (and $x33 $x49)))
 (let (($x27 (= (_ bv12 32) input.spec-%tmpvar-4.L1%10%bbentry)))
 (let (($x80 (and $x27 $x79)))
 (let ((?x20 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x22 (= ?x20 input.spec-%tmpvar-5.L1%10%bbentry)))
 (let (($x81 (and $x22 $x80)))
 (let (($x46 (=> $x81 $x12)))
 (not $x46)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310054/query
