==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x5 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x5)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (and $x10 $x12)))
 (let (($x19 (and $x14 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x5 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x5)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (and $x10 $x12)))
 (let (($x19 (and $x14 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv32771 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087209/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%10%bbentry () (_ BitVec 32))
(assert
 (let (($x80 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x81 (not $x80)))
 (let (($x82 (or $x80 $x81)))
 (let (($x83 (= $x82 false)))
 (let (($x84 (= $x83 true)))
 (let ((?x60 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x70 (concat ?x69 (concat ?x66 (concat ?x62 ?x60)))))
 (let (($x71 (= ?x70 input.dst.llvm-%x)))
 (let (($x72 (= $x71 true)))
 (let (($x55 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x56 (= $x55 true)))
 (let ((?x48 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x49 (= (_ bv0 32) ?x48)))
 (let ((?x14 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x39 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x14)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (and $x36 $x39)))
 (let (($x50 (and $x41 $x49)))
 (let (($x8 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (and $x8 $x50)))
 (let (($x16 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x9 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x28 $x16)))))))
 (let (($x52 (and $x9 $x51)))
 (let (($x53 (= $x52 true)))
 (let (($x57 (and $x53 $x56)))
 (let (($x73 (and $x57 $x72)))
 (let (($x24 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x32 (= $x24 input.spec-%tmpvar-1.L2%3%d)))
 (let (($x74 (and $x32 $x73)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x75 (and $x29 $x74)))
 (let (($x47 (= (_ bv5 32) input.spec-%tmpvar-2.L2%10%bbentry)))
 (let (($x76 (and $x47 $x75)))
 (let ((?x25 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x11 (= ?x25 input.spec-%tmpvar-3.L2%10%bbentry)))
 (let (($x77 (and $x11 $x76)))
 (let (($x5 (= (_ bv12 32) input.spec-%tmpvar-4.L2%10%bbentry)))
 (let (($x78 (and $x5 $x77)))
 (let ((?x18 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x20 (= ?x18 input.spec-%tmpvar-5.L2%10%bbentry)))
 (let (($x79 (and $x20 $x78)))
 (let (($x85 (=> $x79 $x84)))
 (not $x85))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%10%bbentry () (_ BitVec 32))
(assert
 (let (($x80 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x81 (not $x80)))
 (let (($x82 (or $x80 $x81)))
 (let (($x83 (= $x82 false)))
 (let (($x84 (= $x83 true)))
 (let ((?x60 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x70 (concat ?x69 (concat ?x66 (concat ?x62 ?x60)))))
 (let (($x71 (= ?x70 input.dst.llvm-%x)))
 (let (($x72 (= $x71 true)))
 (let (($x55 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x56 (= $x55 true)))
 (let ((?x48 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x49 (= (_ bv0 32) ?x48)))
 (let ((?x14 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x39 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x14)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (and $x36 $x39)))
 (let (($x50 (and $x41 $x49)))
 (let (($x8 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (and $x8 $x50)))
 (let (($x16 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x9 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x28 $x16)))))))
 (let (($x52 (and $x9 $x51)))
 (let (($x53 (= $x52 true)))
 (let (($x57 (and $x53 $x56)))
 (let (($x73 (and $x57 $x72)))
 (let (($x24 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x32 (= $x24 input.spec-%tmpvar-1.L2%3%d)))
 (let (($x74 (and $x32 $x73)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x75 (and $x29 $x74)))
 (let (($x47 (= (_ bv5 32) input.spec-%tmpvar-2.L2%10%bbentry)))
 (let (($x76 (and $x47 $x75)))
 (let ((?x25 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x11 (= ?x25 input.spec-%tmpvar-3.L2%10%bbentry)))
 (let (($x77 (and $x11 $x76)))
 (let (($x5 (= (_ bv12 32) input.spec-%tmpvar-4.L2%10%bbentry)))
 (let (($x78 (and $x5 $x77)))
 (let ((?x18 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x20 (= ?x18 input.spec-%tmpvar-5.L2%10%bbentry)))
 (let (($x79 (and $x20 $x78)))
 (let (($x85 (=> $x79 $x84)))
 (not $x85))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.spec-%tmpvar-1.L2%3%d false)
(= input.dst.llvm-%x #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.spec-%var-x-0 #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%tmpvar-0.L2%3%d #b00000000000000000000000000000000)
(= input.spec-%tmpvar-2.L2%10%bbentry #b00000000000000000000000000000101)
(= input.spec-%tmpvar-3.L2%10%bbentry #b11111111111111111111111111111011)
(= input.spec-%tmpvar-4.L2%10%bbentry #b00000000000000000000000000001100)
(= input.spec-%tmpvar-5.L2%10%bbentry #b00000000000000000000000000001100)
(= input.dst.llvm-mem @fun_5)
(function @fun_5
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%tmpvar-3.L2%10%bbentry () (_ BitVec 32)
    #xfffffffb)
  (define-fun input.spec-%tmpvar-5.L2%10%bbentry () (_ BitVec 32)
    #x0000000c)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%3%d () Bool
    false)
  (define-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.L2%10%bbentry () (_ BitVec 32)
    #x00000005)
  (define-fun input.spec-%tmpvar-4.L2%10%bbentry () (_ BitVec 32)
    #x0000000c)
  (define-fun input.spec-%var-x-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x40000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x40000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%x () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-x-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.spec-%tmpvar-1.L2%3%d () Bool false)
(define-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-2.L2%10%bbentry () (_ BitVec 32) (_ bv5 32))
(define-fun input.spec-%tmpvar-3.L2%10%bbentry () (_ BitVec 32) (_ bv4294967291 32))
(define-fun input.spec-%tmpvar-4.L2%10%bbentry () (_ BitVec 32) (_ bv12 32))
(define-fun input.spec-%tmpvar-5.L2%10%bbentry () (_ BitVec 32) (_ bv12 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087209/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%10%bbentry () (_ BitVec 32))
(assert
 (let (($x84 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x85 (not $x84)))
 (let (($x86 (or $x84 $x85)))
 (let (($x31 (not $x86)))
 (let (($x29 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x82 (not $x29)))
 (let (($x83 (or $x29 $x82)))
 (let (($x59 (or $x83 $x31)))
 (let (($x87 (= $x59 true)))
 (let ((?x64 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x72 (concat ?x71 (concat ?x63 (concat ?x66 ?x64)))))
 (let (($x73 (= ?x72 input.dst.llvm-%x)))
 (let (($x74 (= $x73 true)))
 (let (($x56 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x57 (= $x56 true)))
 (let ((?x49 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x50 (= (_ bv0 32) ?x49)))
 (let ((?x39 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x41 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x39)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (and $x37 $x41)))
 (let (($x51 (and $x48 $x50)))
 (let (($x6 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (and $x6 $x51)))
 (let (($x19 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x36 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x10 $x19)))))))
 (let (($x53 (and $x36 $x52)))
 (let (($x54 (= $x53 true)))
 (let (($x58 (and $x54 $x57)))
 (let (($x75 (and $x58 $x74)))
 (let (($x26 (= $x29 input.spec-%tmpvar-1.L2%3%d)))
 (let (($x76 (and $x26 $x75)))
 (let (($x30 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x77 (and $x30 $x76)))
 (let (($x46 (= (_ bv5 32) input.spec-%tmpvar-2.L2%10%bbentry)))
 (let (($x78 (and $x46 $x77)))
 (let ((?x13 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x35 (= ?x13 input.spec-%tmpvar-3.L2%10%bbentry)))
 (let (($x79 (and $x35 $x78)))
 (let (($x34 (= (_ bv12 32) input.spec-%tmpvar-4.L2%10%bbentry)))
 (let (($x80 (and $x34 $x79)))
 (let ((?x43 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x21 (= ?x43 input.spec-%tmpvar-5.L2%10%bbentry)))
 (let (($x81 (and $x21 $x80)))
 (let (($x88 (=> $x81 $x87)))
 (not $x88)))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%10%bbentry () (_ BitVec 32))
(assert
 (let (($x84 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x85 (not $x84)))
 (let (($x86 (or $x84 $x85)))
 (let (($x31 (not $x86)))
 (let (($x29 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x82 (not $x29)))
 (let (($x83 (or $x29 $x82)))
 (let (($x59 (or $x83 $x31)))
 (let (($x87 (= $x59 true)))
 (let ((?x64 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x72 (concat ?x71 (concat ?x63 (concat ?x66 ?x64)))))
 (let (($x73 (= ?x72 input.dst.llvm-%x)))
 (let (($x74 (= $x73 true)))
 (let (($x56 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x57 (= $x56 true)))
 (let ((?x49 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x50 (= (_ bv0 32) ?x49)))
 (let ((?x39 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x41 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x39)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (and $x37 $x41)))
 (let (($x51 (and $x48 $x50)))
 (let (($x6 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (and $x6 $x51)))
 (let (($x19 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x36 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x10 $x19)))))))
 (let (($x53 (and $x36 $x52)))
 (let (($x54 (= $x53 true)))
 (let (($x58 (and $x54 $x57)))
 (let (($x75 (and $x58 $x74)))
 (let (($x26 (= $x29 input.spec-%tmpvar-1.L2%3%d)))
 (let (($x76 (and $x26 $x75)))
 (let (($x30 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x77 (and $x30 $x76)))
 (let (($x46 (= (_ bv5 32) input.spec-%tmpvar-2.L2%10%bbentry)))
 (let (($x78 (and $x46 $x77)))
 (let ((?x13 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x35 (= ?x13 input.spec-%tmpvar-3.L2%10%bbentry)))
 (let (($x79 (and $x35 $x78)))
 (let (($x34 (= (_ bv12 32) input.spec-%tmpvar-4.L2%10%bbentry)))
 (let (($x80 (and $x34 $x79)))
 (let ((?x43 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x21 (= ?x43 input.spec-%tmpvar-5.L2%10%bbentry)))
 (let (($x81 (and $x21 $x80)))
 (let (($x88 (=> $x81 $x87)))
 (not $x88)))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087209/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%10%bbentry () (_ BitVec 32))
(assert
 (let ((?x89 (bvadd (_ bv4294967291 32) input.dst.llvm-%x)))
 (let ((?x13 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x32 (= ?x13 ?x89)))
 (let (($x42 (= $x32 true)))
 (let ((?x71 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x73 (concat ?x72 (concat ?x64 (concat ?x60 ?x71)))))
 (let (($x80 (= ?x73 input.dst.llvm-%x)))
 (let (($x81 (= $x80 true)))
 (let (($x74 (= input.dst.llvm-%x ?x73)))
 (let ((?x45 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x12 (= (_ bv0 32) ?x45)))
 (let ((?x47 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x41 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x47)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (and $x44 $x41)))
 (let (($x38 (and $x6 $x12)))
 (let (($x17 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (and $x17 $x38)))
 (let (($x57 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x49 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x40 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x36 $x49)))))))
 (let (($x77 (and (and (and $x40 $x57) $x58) $x74)))
 (let (($x78 (= $x77 true)))
 (let (($x27 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x30 (= $x27 true)))
 (let (($x79 (and $x30 $x78)))
 (let (($x82 (and $x79 $x81)))
 (let (($x84 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) $x82)))
 (let (($x19 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x55 (= $x19 input.spec-%tmpvar-1.L2%3%d)))
 (let (($x85 (and $x55 $x84)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x86 (and $x20 $x85)))
 (let (($x10 (= (_ bv5 32) input.spec-%tmpvar-2.L2%10%bbentry)))
 (let (($x31 (and $x10 $x86)))
 (let ((?x28 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x15 (= ?x28 input.spec-%tmpvar-3.L2%10%bbentry)))
 (let (($x59 (and $x15 $x31)))
 (let (($x18 (= (_ bv12 32) input.spec-%tmpvar-4.L2%10%bbentry)))
 (let (($x87 (and $x18 $x59)))
 (let (($x25 (= ?x13 input.spec-%tmpvar-5.L2%10%bbentry)))
 (let (($x88 (and $x25 $x87)))
 (let (($x69 (=> $x88 $x42)))
 (not $x69)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%10%bbentry () (_ BitVec 32))
(assert
 (let ((?x89 (bvadd (_ bv4294967291 32) input.dst.llvm-%x)))
 (let ((?x13 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x32 (= ?x13 ?x89)))
 (let (($x42 (= $x32 true)))
 (let ((?x71 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x73 (concat ?x72 (concat ?x64 (concat ?x60 ?x71)))))
 (let (($x80 (= ?x73 input.dst.llvm-%x)))
 (let (($x81 (= $x80 true)))
 (let (($x74 (= input.dst.llvm-%x ?x73)))
 (let ((?x45 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x12 (= (_ bv0 32) ?x45)))
 (let ((?x47 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x41 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x47)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (and $x44 $x41)))
 (let (($x38 (and $x6 $x12)))
 (let (($x17 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (and $x17 $x38)))
 (let (($x57 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x49 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x40 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x36 $x49)))))))
 (let (($x77 (and (and (and $x40 $x57) $x58) $x74)))
 (let (($x78 (= $x77 true)))
 (let (($x27 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x30 (= $x27 true)))
 (let (($x79 (and $x30 $x78)))
 (let (($x82 (and $x79 $x81)))
 (let (($x84 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) $x82)))
 (let (($x19 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x55 (= $x19 input.spec-%tmpvar-1.L2%3%d)))
 (let (($x85 (and $x55 $x84)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x86 (and $x20 $x85)))
 (let (($x10 (= (_ bv5 32) input.spec-%tmpvar-2.L2%10%bbentry)))
 (let (($x31 (and $x10 $x86)))
 (let ((?x28 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x15 (= ?x28 input.spec-%tmpvar-3.L2%10%bbentry)))
 (let (($x59 (and $x15 $x31)))
 (let (($x18 (= (_ bv12 32) input.spec-%tmpvar-4.L2%10%bbentry)))
 (let (($x87 (and $x18 $x59)))
 (let (($x25 (= ?x13 input.spec-%tmpvar-5.L2%10%bbentry)))
 (let (($x88 (and $x25 $x87)))
 (let (($x69 (=> $x88 $x42)))
 (not $x69)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087209/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%10%bbentry () (_ BitVec 32))
(assert
 (let ((?x90 (bvadd (_ bv12 32) input.dst.llvm-%x)))
 (let ((?x8 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x29 (= ?x8 ?x90)))
 (let (($x26 (= $x29 true)))
 (let ((?x72 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x74 (concat ?x73 (concat ?x71 (concat ?x66 ?x72)))))
 (let (($x84 (= ?x74 input.dst.llvm-%x)))
 (let (($x85 (= $x84 true)))
 (let (($x77 (= input.dst.llvm-%x ?x74)))
 (let ((?x12 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x38 (= (_ bv0 32) ?x12)))
 (let ((?x41 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x41)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (and $x37 $x6)))
 (let (($x58 (and $x45 $x38)))
 (let (($x44 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x76 (and $x44 $x58)))
 (let (($x16 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x51 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x17 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x53 $x51)))))))
 (let (($x80 (and (and (and $x17 $x16) $x76) $x77)))
 (let (($x81 (= $x80 true)))
 (let (($x56 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x27 (not $x56)))
 (let (($x30 (= $x27 true)))
 (let (($x82 (and $x30 $x81)))
 (let (($x86 (and $x82 $x85)))
 (let (($x59 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) $x86)))
 (let (($x19 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x55 (= $x19 input.spec-%tmpvar-1.L2%3%d)))
 (let (($x87 (and $x55 $x59)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x88 (and $x20 $x87)))
 (let (($x10 (= (_ bv5 32) input.spec-%tmpvar-2.L2%10%bbentry)))
 (let (($x89 (and $x10 $x88)))
 (let ((?x28 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x15 (= ?x28 input.spec-%tmpvar-3.L2%10%bbentry)))
 (let (($x32 (and $x15 $x89)))
 (let (($x35 (= (_ bv12 32) input.spec-%tmpvar-4.L2%10%bbentry)))
 (let (($x42 (and $x35 $x32)))
 (let (($x13 (= ?x8 input.spec-%tmpvar-5.L2%10%bbentry)))
 (let (($x69 (and $x13 $x42)))
 (let (($x70 (=> $x69 $x26)))
 (not $x70))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%10%bbentry () (_ BitVec 32))
(assert
 (let ((?x90 (bvadd (_ bv12 32) input.dst.llvm-%x)))
 (let ((?x8 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x29 (= ?x8 ?x90)))
 (let (($x26 (= $x29 true)))
 (let ((?x72 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x74 (concat ?x73 (concat ?x71 (concat ?x66 ?x72)))))
 (let (($x84 (= ?x74 input.dst.llvm-%x)))
 (let (($x85 (= $x84 true)))
 (let (($x77 (= input.dst.llvm-%x ?x74)))
 (let ((?x12 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x38 (= (_ bv0 32) ?x12)))
 (let ((?x41 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x41)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (and $x37 $x6)))
 (let (($x58 (and $x45 $x38)))
 (let (($x44 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x76 (and $x44 $x58)))
 (let (($x16 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x51 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x17 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x53 $x51)))))))
 (let (($x80 (and (and (and $x17 $x16) $x76) $x77)))
 (let (($x81 (= $x80 true)))
 (let (($x56 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x27 (not $x56)))
 (let (($x30 (= $x27 true)))
 (let (($x82 (and $x30 $x81)))
 (let (($x86 (and $x82 $x85)))
 (let (($x59 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) $x86)))
 (let (($x19 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x55 (= $x19 input.spec-%tmpvar-1.L2%3%d)))
 (let (($x87 (and $x55 $x59)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x88 (and $x20 $x87)))
 (let (($x10 (= (_ bv5 32) input.spec-%tmpvar-2.L2%10%bbentry)))
 (let (($x89 (and $x10 $x88)))
 (let ((?x28 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x15 (= ?x28 input.spec-%tmpvar-3.L2%10%bbentry)))
 (let (($x32 (and $x15 $x89)))
 (let (($x35 (= (_ bv12 32) input.spec-%tmpvar-4.L2%10%bbentry)))
 (let (($x42 (and $x35 $x32)))
 (let (($x13 (= ?x8 input.spec-%tmpvar-5.L2%10%bbentry)))
 (let (($x69 (and $x13 $x42)))
 (let (($x70 (=> $x69 $x26)))
 (not $x70))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087209/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%10%bbentry () (_ BitVec 32))
(assert
 (let ((?x29 (bvadd (_ bv4294967291 32) input.dst.llvm-%x)))
 (let ((?x28 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x26 (= ?x28 ?x29)))
 (let (($x70 (= $x26 true)))
 (let ((?x68 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x63 (concat ?x64 (concat ?x65 (concat ?x73 ?x68)))))
 (let (($x85 (= ?x63 input.dst.llvm-%x)))
 (let (($x86 (= $x85 true)))
 (let (($x74 (= input.dst.llvm-%x ?x63)))
 (let ((?x45 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x12 (= (_ bv0 32) ?x45)))
 (let ((?x47 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x41 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x47)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (and $x44 $x41)))
 (let (($x38 (and $x6 $x12)))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (and $x52 $x38)))
 (let (($x14 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x54 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x51 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x78 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x51 $x54)))))))
 (let (($x81 (and (and (and $x78 $x14) $x58) $x74)))
 (let (($x82 (= $x81 true)))
 (let (($x83 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x56 (= $x83 true)))
 (let (($x84 (and $x56 $x82)))
 (let (($x59 (and $x84 $x86)))
 (let (($x19 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x87 (and $x19 $x59)))
 (let (($x55 (= $x19 input.spec-%tmpvar-1.L2%3%d)))
 (let (($x88 (and $x55 $x87)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x89 (and $x20 $x88)))
 (let (($x10 (= (_ bv5 32) input.spec-%tmpvar-2.L2%10%bbentry)))
 (let (($x32 (and $x10 $x89)))
 (let (($x15 (= ?x28 input.spec-%tmpvar-3.L2%10%bbentry)))
 (let (($x42 (and $x15 $x32)))
 (let (($x25 (= (_ bv12 32) input.spec-%tmpvar-4.L2%10%bbentry)))
 (let (($x69 (and $x25 $x42)))
 (let ((?x18 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x8 (= ?x18 input.spec-%tmpvar-5.L2%10%bbentry)))
 (let (($x90 (and $x8 $x69)))
 (let (($x91 (=> $x90 $x70)))
 (not $x91)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%10%bbentry () (_ BitVec 32))
(assert
 (let ((?x29 (bvadd (_ bv4294967291 32) input.dst.llvm-%x)))
 (let ((?x28 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x26 (= ?x28 ?x29)))
 (let (($x70 (= $x26 true)))
 (let ((?x68 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x63 (concat ?x64 (concat ?x65 (concat ?x73 ?x68)))))
 (let (($x85 (= ?x63 input.dst.llvm-%x)))
 (let (($x86 (= $x85 true)))
 (let (($x74 (= input.dst.llvm-%x ?x63)))
 (let ((?x45 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x12 (= (_ bv0 32) ?x45)))
 (let ((?x47 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x41 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x47)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (and $x44 $x41)))
 (let (($x38 (and $x6 $x12)))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (and $x52 $x38)))
 (let (($x14 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x54 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x51 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x78 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x51 $x54)))))))
 (let (($x81 (and (and (and $x78 $x14) $x58) $x74)))
 (let (($x82 (= $x81 true)))
 (let (($x83 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x56 (= $x83 true)))
 (let (($x84 (and $x56 $x82)))
 (let (($x59 (and $x84 $x86)))
 (let (($x19 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x87 (and $x19 $x59)))
 (let (($x55 (= $x19 input.spec-%tmpvar-1.L2%3%d)))
 (let (($x88 (and $x55 $x87)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x89 (and $x20 $x88)))
 (let (($x10 (= (_ bv5 32) input.spec-%tmpvar-2.L2%10%bbentry)))
 (let (($x32 (and $x10 $x89)))
 (let (($x15 (= ?x28 input.spec-%tmpvar-3.L2%10%bbentry)))
 (let (($x42 (and $x15 $x32)))
 (let (($x25 (= (_ bv12 32) input.spec-%tmpvar-4.L2%10%bbentry)))
 (let (($x69 (and $x25 $x42)))
 (let ((?x18 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x8 (= ?x18 input.spec-%tmpvar-5.L2%10%bbentry)))
 (let (($x90 (and $x8 $x69)))
 (let (($x91 (=> $x90 $x70)))
 (not $x91)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087209/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%10%bbentry () (_ BitVec 32))
(assert
 (let ((?x24 (bvadd (_ bv12 32) input.dst.llvm-%x)))
 (let ((?x13 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x27 (= ?x13 ?x24)))
 (let (($x11 (= $x27 true)))
 (let ((?x60 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x81 (concat ?x74 (concat ?x62 (concat ?x65 ?x60)))))
 (let (($x88 (= ?x81 input.dst.llvm-%x)))
 (let (($x89 (= $x88 true)))
 (let (($x82 (= input.dst.llvm-%x ?x81)))
 (let ((?x38 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x58 (= (_ bv0 32) ?x38)))
 (let ((?x6 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x45 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x6)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (and $x47 $x45)))
 (let (($x80 (and $x12 $x58)))
 (let (($x37 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x76 (and $x37 $x80)))
 (let (($x48 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x17 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x44 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x75 $x17)))))))
 (let (($x86 (and (and (and $x44 $x48) $x76) $x82)))
 (let (($x59 (= $x86 true)))
 (let (($x83 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x56 (not $x83)))
 (let (($x30 (= $x56 true)))
 (let (($x87 (and $x30 $x59)))
 (let (($x32 (and $x87 $x89)))
 (let (($x19 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x42 (and $x19 $x32)))
 (let (($x55 (= $x19 input.spec-%tmpvar-1.L2%3%d)))
 (let (($x69 (and $x55 $x42)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x90 (and $x20 $x69)))
 (let (($x10 (= (_ bv5 32) input.spec-%tmpvar-2.L2%10%bbentry)))
 (let (($x29 (and $x10 $x90)))
 (let (($x35 (= ?x13 input.spec-%tmpvar-3.L2%10%bbentry)))
 (let (($x26 (and $x35 $x29)))
 (let (($x18 (= (_ bv12 32) input.spec-%tmpvar-4.L2%10%bbentry)))
 (let (($x70 (and $x18 $x26)))
 (let ((?x8 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x15 (= ?x8 input.spec-%tmpvar-5.L2%10%bbentry)))
 (let (($x91 (and $x15 $x70)))
 (let (($x79 (=> $x91 $x11)))
 (not $x79))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%10%bbentry () (_ BitVec 32))
(assert
 (let ((?x24 (bvadd (_ bv12 32) input.dst.llvm-%x)))
 (let ((?x13 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x27 (= ?x13 ?x24)))
 (let (($x11 (= $x27 true)))
 (let ((?x60 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x81 (concat ?x74 (concat ?x62 (concat ?x65 ?x60)))))
 (let (($x88 (= ?x81 input.dst.llvm-%x)))
 (let (($x89 (= $x88 true)))
 (let (($x82 (= input.dst.llvm-%x ?x81)))
 (let ((?x38 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x58 (= (_ bv0 32) ?x38)))
 (let ((?x6 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x45 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x6)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (and $x47 $x45)))
 (let (($x80 (and $x12 $x58)))
 (let (($x37 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x76 (and $x37 $x80)))
 (let (($x48 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x17 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x44 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x75 $x17)))))))
 (let (($x86 (and (and (and $x44 $x48) $x76) $x82)))
 (let (($x59 (= $x86 true)))
 (let (($x83 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x56 (not $x83)))
 (let (($x30 (= $x56 true)))
 (let (($x87 (and $x30 $x59)))
 (let (($x32 (and $x87 $x89)))
 (let (($x19 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x42 (and $x19 $x32)))
 (let (($x55 (= $x19 input.spec-%tmpvar-1.L2%3%d)))
 (let (($x69 (and $x55 $x42)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x90 (and $x20 $x69)))
 (let (($x10 (= (_ bv5 32) input.spec-%tmpvar-2.L2%10%bbentry)))
 (let (($x29 (and $x10 $x90)))
 (let (($x35 (= ?x13 input.spec-%tmpvar-3.L2%10%bbentry)))
 (let (($x26 (and $x35 $x29)))
 (let (($x18 (= (_ bv12 32) input.spec-%tmpvar-4.L2%10%bbentry)))
 (let (($x70 (and $x18 $x26)))
 (let ((?x8 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x15 (= ?x8 input.spec-%tmpvar-5.L2%10%bbentry)))
 (let (($x91 (and $x15 $x70)))
 (let (($x79 (=> $x91 $x11)))
 (not $x79))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087209/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%10%bbentry () (_ BitVec 32))
(assert
 (let (($x26 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x70 (not $x26)))
 (let (($x91 (or $x26 $x70)))
 (let (($x24 (= $x91 true)))
 (let ((?x73 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x82 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x86 (concat ?x82 (concat ?x61 (concat ?x62 ?x73)))))
 (let (($x59 (= ?x86 input.dst.llvm-%x)))
 (let (($x87 (= $x59 true)))
 (let (($x76 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x85 (= $x76 true)))
 (let ((?x41 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x6 (= (_ bv0 32) ?x41)))
 (let ((?x49 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x37 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x49)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (and $x48 $x37)))
 (let (($x45 (and $x47 $x6)))
 (let (($x9 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (and $x9 $x45)))
 (let (($x40 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x44 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x75 $x40)))))))
 (let (($x38 (and $x44 $x12)))
 (let (($x58 (= $x38 true)))
 (let (($x72 (and $x58 $x85)))
 (let (($x88 (and $x72 $x87)))
 (let (($x19 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x55 (= $x19 input.spec-%tmpvar-1.L2%3%d)))
 (let (($x89 (and $x55 $x88)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x32 (and $x20 $x89)))
 (let (($x10 (= (_ bv5 32) input.spec-%tmpvar-2.L2%10%bbentry)))
 (let (($x42 (and $x10 $x32)))
 (let ((?x13 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x35 (= ?x13 input.spec-%tmpvar-3.L2%10%bbentry)))
 (let (($x69 (and $x35 $x42)))
 (let (($x18 (= (_ bv12 32) input.spec-%tmpvar-4.L2%10%bbentry)))
 (let (($x90 (and $x18 $x69)))
 (let ((?x8 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x15 (= ?x8 input.spec-%tmpvar-5.L2%10%bbentry)))
 (let (($x29 (and $x15 $x90)))
 (let (($x27 (=> $x29 $x24)))
 (not $x27)))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%10%bbentry () (_ BitVec 32))
(assert
 (let (($x26 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x70 (not $x26)))
 (let (($x91 (or $x26 $x70)))
 (let (($x24 (= $x91 true)))
 (let ((?x73 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x82 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x86 (concat ?x82 (concat ?x61 (concat ?x62 ?x73)))))
 (let (($x59 (= ?x86 input.dst.llvm-%x)))
 (let (($x87 (= $x59 true)))
 (let (($x76 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x85 (= $x76 true)))
 (let ((?x41 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x6 (= (_ bv0 32) ?x41)))
 (let ((?x49 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x37 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x49)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (and $x48 $x37)))
 (let (($x45 (and $x47 $x6)))
 (let (($x9 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (and $x9 $x45)))
 (let (($x40 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x44 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x75 $x40)))))))
 (let (($x38 (and $x44 $x12)))
 (let (($x58 (= $x38 true)))
 (let (($x72 (and $x58 $x85)))
 (let (($x88 (and $x72 $x87)))
 (let (($x19 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x55 (= $x19 input.spec-%tmpvar-1.L2%3%d)))
 (let (($x89 (and $x55 $x88)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x32 (and $x20 $x89)))
 (let (($x10 (= (_ bv5 32) input.spec-%tmpvar-2.L2%10%bbentry)))
 (let (($x42 (and $x10 $x32)))
 (let ((?x13 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x35 (= ?x13 input.spec-%tmpvar-3.L2%10%bbentry)))
 (let (($x69 (and $x35 $x42)))
 (let (($x18 (= (_ bv12 32) input.spec-%tmpvar-4.L2%10%bbentry)))
 (let (($x90 (and $x18 $x69)))
 (let ((?x8 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x15 (= ?x8 input.spec-%tmpvar-5.L2%10%bbentry)))
 (let (($x29 (and $x15 $x90)))
 (let (($x27 (=> $x29 $x24)))
 (not $x27)))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087209/query
