=FunctionName: foo
=result: 1
=cg_with_asm_annotation
=cg_with_backtracker
=cg_with_rank
=corr_graph foo.A1
=src_tfg
=TFG_SSA:
=TFG_SPEC src.spec.foo:
=TFG:
=Nodes: L0%0%d L2%13%d L2%14%bbentry L2%15%bbentry L2%17%d L2%18%bbentry L2%21%bbentry L2%23%bbentry L2%25%d L2%26%bbentry L2%29%bbentry L2%31%bbentry L2%32%bbentry E0%0%d
=Edges:
L0%0%d => L2%13%d
L2%13%d => L2%15%bbentry
L2%13%d => L2%14%bbentry
L2%14%bbentry => L2%17%d
L2%17%d => L2%21%bbentry
L2%17%d => L2%18%bbentry
L2%18%bbentry => L2%23%bbentry
L2%21%bbentry => L2%23%bbentry
L2%23%bbentry => L2%32%bbentry
L2%15%bbentry => L2%25%d
L2%25%d => L2%29%bbentry
L2%25%d => L2%26%bbentry
L2%26%bbentry => L2%31%bbentry
L2%29%bbentry => L2%31%bbentry
L2%31%bbentry => L2%32%bbentry
L2%32%bbentry => E0%0%d
=graph done
=is_ssa_graph:
1
=StartState:
=spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=state_end
=PC to var-version map at L0%0%d
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at L2%13%d
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at L2%14%bbentry
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at L2%15%bbentry
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at L2%17%d
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at L2%18%bbentry
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at L2%21%bbentry
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at L2%23%bbentry
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at L2%25%d
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at L2%26%bbentry
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at L2%29%bbentry
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at L2%31%bbentry
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at L2%32%bbentry
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at E0%0%d
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=graph_with_var_versions done
=FunctionName: foo
=Input: tfg-method-arg.0
=arg addr
1 : (undefined) : UNDEFINED
=arg val
1 : input.spec-%var-x-0 : BV:32
=arg end
=Node outputs: E0%0%d
=Output: spec-%ret-reg
1 : input.spec-%tmpvar-21.E0%0%d : BV:32
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
=Touched symbols:
=Symbol-map done
=Locals-map:
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;foo}
=memlabel_map.0 for call-context {*;foo}
mlheap.src.spec.foo : memlabel-mem--heap
=Edge: L0%0%d => L2%13%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-0.L2%13%d
1 : SORT2EXPR.VAR : MAP[BV:32 -> BV:32]
2 : map_init(1) : MAP[BV:32 -> BV:32]
=spec-%tmpvar-1.L2%13%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-10.L2%13%d
1 : input.spec-%var-x-0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvslt(1, 2) : BOOL
=spec-%tmpvar-2.L2%13%d
1 : 5 { 0x5 +1.59e129 } : BV:32
=spec-%tmpvar-3.L2%13%d
1 : input.spec-%var-x-0 : BV:32
2 : 5 { 0x5 +1.59e129 } : BV:32
3 : bvsub(1, 2) : BV:32
=spec-%tmpvar-4.L2%13%d
1 : SORT2EXPR.VAR : MAP[BV:32 -> BV:32]
2 : map_init(1) : MAP[BV:32 -> BV:32]
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : input.spec-%var-x-0 : BV:32
5 : 5 { 0x5 +1.59e129 } : BV:32
6 : bvsub(4, 5) : BV:32
7 : map_set(2, 3, 6) : MAP[BV:32 -> BV:32]
=spec-%tmpvar-5.L2%13%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%tmpvar-6.L2%13%d
1 : 12 { 0xc +1.143e129 } : BV:32
=spec-%tmpvar-7.L2%13%d
1 : 12 { 0xc +1.143e129 } : BV:32
2 : input.spec-%var-x-0 : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-8.L2%13%d
1 : SORT2EXPR.VAR : MAP[BV:32 -> BV:32]
2 : map_init(1) : MAP[BV:32 -> BV:32]
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : input.spec-%var-x-0 : BV:32
5 : 5 { 0x5 +1.59e129 } : BV:32
6 : bvsub(4, 5) : BV:32
7 : map_set(2, 3, 6) : MAP[BV:32 -> BV:32]
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : 12 { 0xc +1.143e129 } : BV:32
10 : bvadd(9, 4) : BV:32
11 : map_set(7, 8, 10) : MAP[BV:32 -> BV:32]
=spec-%tmpvar-9.L2%13%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-t1-0.L2%13%d
1 : SORT2EXPR.VAR : MAP[BV:32 -> BV:32]
2 : map_init(1) : MAP[BV:32 -> BV:32]
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : input.spec-%var-x-0 : BV:32
5 : 5 { 0x5 +1.59e129 } : BV:32
6 : bvsub(4, 5) : BV:32
7 : map_set(2, 3, 6) : MAP[BV:32 -> BV:32]
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : 12 { 0xc +1.143e129 } : BV:32
10 : bvadd(9, 4) : BV:32
11 : map_set(7, 8, 10) : MAP[BV:32 -> BV:32]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:(((((((func_head*ctor_map)*ctor_bv)*ctor_bv)*intrinsic_app_bvsub)*((intrinsic_app_map_set*ctor_bv)*ctor_bv))*intrinsic_app_bvadd)*(((intrinsic_app_map_set*letin_def)*ctor_bv)*intrinsic_app_bvslt))
tfg_edge_comment end

=Edge: L2%13%d => L2%15%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-10.L2%13%d : BOOL
2 : not(1) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:16:ite_false_split
tfg_edge_comment end

=Edge: L2%13%d => L2%14%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-10.L2%13%d : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:16:ite_true_split
tfg_edge_comment end

=Edge: L2%14%bbentry => L2%17%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-11.L2%17%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-12.L2%17%d
1 : input.spec-%var-t1-0.L2%13%d : MAP[BV:32 -> BV:32]
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((bb_entry*ctor_bv)*intrinsic_app_map_get)
tfg_edge_comment end

=Edge: L2%17%d => L2%21%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-12.L2%17%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:22:match_sum_cond_1
tfg_edge_comment end

=Edge: L2%17%d => L2%18%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-12.L2%17%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:19:match_sum_cond_0
tfg_edge_comment end

=Edge: L2%18%bbentry => L2%23%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-13.L2%23%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-14.L2%23%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-u-0.L2%23%bbentry
1 : input.spec-%tmpvar-12.L2%17%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(((bb_entry*match_sum_val_0)*ctor_bv)*match_sum_merge_0)
tfg_edge_comment end

=Edge: L2%21%bbentry => L2%23%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-14.L2%23%bbentry
1 : input.spec-%tmpvar-12.L2%17%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=spec-%var-y-0.L2%23%bbentry
1 : input.spec-%tmpvar-12.L2%17%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((bb_entry*match_sum_val_1)*match_sum_merge_1)
tfg_edge_comment end

=Edge: L2%23%bbentry => L2%32%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-19.L2%32%bbentry
1 : input.spec-%tmpvar-14.L2%23%bbentry : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*ite_true_merge)
tfg_edge_comment end

=Edge: L2%15%bbentry => L2%25%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-15.L2%25%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%tmpvar-16.L2%25%d
1 : input.spec-%var-t1-0.L2%13%d : MAP[BV:32 -> BV:32]
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((bb_entry*ctor_bv)*intrinsic_app_map_get)
tfg_edge_comment end

=Edge: L2%25%d => L2%29%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-16.L2%25%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:30:match_sum_cond_1
tfg_edge_comment end

=Edge: L2%25%d => L2%26%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-16.L2%25%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:27:match_sum_cond_0
tfg_edge_comment end

=Edge: L2%26%bbentry => L2%31%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-17.L2%31%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-18.L2%31%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-u-1.L2%31%bbentry
1 : input.spec-%tmpvar-16.L2%25%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(((bb_entry*match_sum_val_0)*ctor_bv)*match_sum_merge_0)
tfg_edge_comment end

=Edge: L2%29%bbentry => L2%31%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-18.L2%31%bbentry
1 : input.spec-%tmpvar-16.L2%25%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=spec-%var-y-1.L2%31%bbentry
1 : input.spec-%tmpvar-16.L2%25%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((bb_entry*match_sum_val_1)*match_sum_merge_1)
tfg_edge_comment end

=Edge: L2%31%bbentry => L2%32%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-19.L2%32%bbentry
1 : input.spec-%tmpvar-18.L2%31%bbentry : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*ite_false_merge)
tfg_edge_comment end

=Edge: L2%32%bbentry => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-20.E0%0%d
1 : input.spec-%tmpvar-19.L2%32%bbentry : BV:32
=spec-%tmpvar-21.E0%0%d
1 : input.spec-%tmpvar-19.L2%32%bbentry : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((bb_entry*letin_body)*func_ret)
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=graph_with_precondition_done

=Locs in src.spec.foo
=Loc 1 in src.spec.foo.
REGMEM
spec-%var-x-0
1 : input.spec-%var-x-0 : BV:32
=Loc 29 in src.spec.foo.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--heap
=Loc 30 in src.spec.foo.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 31 in src.spec.foo.
REGMEM
spec-%tmpvar-10.L2%13%d
1 : input.spec-%tmpvar-10.L2%13%d : BOOL
=Loc 32 in src.spec.foo.
REGMEM
spec-%tmpvar-16.L2%25%d
1 : input.spec-%tmpvar-16.L2%25%d : SUM[UNIT,BV:32]
=Loc 33 in src.spec.foo.
REGMEM
spec-%tmpvar-12.L2%17%d
1 : input.spec-%tmpvar-12.L2%17%d : SUM[UNIT,BV:32]
=Loc 34 in src.spec.foo.
REGMEM
spec-%tmpvar-11.L2%17%d
1 : input.spec-%tmpvar-11.L2%17%d : BV:32
=Loc 35 in src.spec.foo.
REGMEM
spec-%var-t1-0.L2%13%d
1 : input.spec-%var-t1-0.L2%13%d : MAP[BV:32 -> BV:32]
=Loc 36 in src.spec.foo.
REGMEM
spec-%tmpvar-15.L2%25%d
1 : input.spec-%tmpvar-15.L2%25%d : BV:32
=Loc 37 in src.spec.foo.
REGMEM
spec-%tmpvar-19.L2%32%bbentry
1 : input.spec-%tmpvar-19.L2%32%bbentry : BV:32
=Loc 38 in src.spec.foo.
REGMEM
spec-%tmpvar-20.E0%0%d
1 : input.spec-%tmpvar-20.E0%0%d : BV:32
=Loc 39 in src.spec.foo.
REGMEM
spec-%tmpvar-21.E0%0%d
1 : input.spec-%tmpvar-21.E0%0%d : BV:32
=Loc 40 in src.spec.foo.
REGMEM
spec-%tmpvar-0.L2%13%d
1 : input.spec-%tmpvar-0.L2%13%d : MAP[BV:32 -> BV:32]
=Loc 41 in src.spec.foo.
REGMEM
spec-%tmpvar-1.L2%13%d
1 : input.spec-%tmpvar-1.L2%13%d : BV:32
=Loc 42 in src.spec.foo.
REGMEM
spec-%tmpvar-2.L2%13%d
1 : input.spec-%tmpvar-2.L2%13%d : BV:32
=Loc 43 in src.spec.foo.
REGMEM
spec-%tmpvar-3.L2%13%d
1 : input.spec-%tmpvar-3.L2%13%d : BV:32
=Loc 44 in src.spec.foo.
REGMEM
spec-%tmpvar-4.L2%13%d
1 : input.spec-%tmpvar-4.L2%13%d : MAP[BV:32 -> BV:32]
=Loc 45 in src.spec.foo.
REGMEM
spec-%tmpvar-5.L2%13%d
1 : input.spec-%tmpvar-5.L2%13%d : BV:32
=Loc 46 in src.spec.foo.
REGMEM
spec-%tmpvar-6.L2%13%d
1 : input.spec-%tmpvar-6.L2%13%d : BV:32
=Loc 47 in src.spec.foo.
REGMEM
spec-%tmpvar-7.L2%13%d
1 : input.spec-%tmpvar-7.L2%13%d : BV:32
=Loc 48 in src.spec.foo.
REGMEM
spec-%tmpvar-8.L2%13%d
1 : input.spec-%tmpvar-8.L2%13%d : MAP[BV:32 -> BV:32]
=Loc 49 in src.spec.foo.
REGMEM
spec-%tmpvar-9.L2%13%d
1 : input.spec-%tmpvar-9.L2%13%d : BV:32
=Loc 50 in src.spec.foo.
REGMEM
spec-%tmpvar-13.L2%23%bbentry
1 : input.spec-%tmpvar-13.L2%23%bbentry : BV:32
=Loc 51 in src.spec.foo.
REGMEM
spec-%tmpvar-14.L2%23%bbentry
1 : input.spec-%tmpvar-14.L2%23%bbentry : BV:32
=Loc 52 in src.spec.foo.
REGMEM
spec-%var-u-0.L2%23%bbentry
1 : input.spec-%var-u-0.L2%23%bbentry : UNIT
=Loc 53 in src.spec.foo.
REGMEM
spec-%var-y-0.L2%23%bbentry
1 : input.spec-%var-y-0.L2%23%bbentry : BV:32
=Loc 54 in src.spec.foo.
REGMEM
spec-%tmpvar-17.L2%31%bbentry
1 : input.spec-%tmpvar-17.L2%31%bbentry : BV:32
=Loc 55 in src.spec.foo.
REGMEM
spec-%tmpvar-18.L2%31%bbentry
1 : input.spec-%tmpvar-18.L2%31%bbentry : BV:32
=Loc 56 in src.spec.foo.
REGMEM
spec-%var-u-1.L2%31%bbentry
1 : input.spec-%var-u-1.L2%31%bbentry : UNIT
=Loc 57 in src.spec.foo.
REGMEM
spec-%var-y-1.L2%31%bbentry
1 : input.spec-%var-y-1.L2%31%bbentry : BV:32
=Locs end
=Liveness in src.spec.foo
=live locs at L0%0%d
1, 
=live locs at L2%13%d
31, 35, 
=live locs at L2%14%bbentry
35, 
=live locs at L2%15%bbentry
35, 
=live locs at L2%17%d
33, 
=live locs at L2%18%bbentry

=live locs at L2%21%bbentry
33, 
=live locs at L2%23%bbentry
51, 
=live locs at L2%25%d
32, 
=live locs at L2%26%bbentry

=live locs at L2%29%bbentry
32, 
=live locs at L2%31%bbentry
55, 
=live locs at L2%32%bbentry
37, 
=live locs at E0%0%d
39[f], 

=Definedness in src.spec.foo
=loc definedness at L0%0%d
1, 29, 30
=loc definedness at L2%13%d
1, 29, 30, 31, 35, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49
=loc definedness at L2%14%bbentry
1, 29, 30, 31, 35, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49
=loc definedness at L2%15%bbentry
1, 29, 30, 31, 35, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49
=loc definedness at L2%17%d
1, 29, 30, 31, 33, 34, 35, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49
=loc definedness at L2%18%bbentry
1, 29, 30, 31, 33, 34, 35, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49
=loc definedness at L2%21%bbentry
1, 29, 30, 31, 33, 34, 35, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49
=loc definedness at L2%23%bbentry
1, 29, 30, 31, 33, 34, 35, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51
=loc definedness at L2%25%d
1, 29, 30, 31, 32, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49
=loc definedness at L2%26%bbentry
1, 29, 30, 31, 32, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49
=loc definedness at L2%29%bbentry
1, 29, 30, 31, 32, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49
=loc definedness at L2%31%bbentry
1, 29, 30, 31, 32, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 55
=loc definedness at L2%32%bbentry
1, 29, 30, 31, 35, 37, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49
=loc definedness at E0%0%d
1, 29, 30, 31, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49

=Branch affecting variable locs in src.spec.foo
=branch affecting variable locs at L0%0%d
1
=branch affecting variable locs at L2%13%d
31, 35
=branch affecting variable locs at L2%14%bbentry
35
=branch affecting variable locs at L2%15%bbentry
35
=branch affecting variable locs at L2%17%d
33
=branch affecting variable locs at L2%18%bbentry

=branch affecting variable locs at L2%21%bbentry

=branch affecting variable locs at L2%23%bbentry

=branch affecting variable locs at L2%25%d
32
=branch affecting variable locs at L2%26%bbentry

=branch affecting variable locs at L2%29%bbentry

=branch affecting variable locs at L2%31%bbentry

=branch affecting variable locs at L2%32%bbentry

=branch affecting variable locs at E0%0%d


=Relevant Memlabels in src.spec.foo
=relevant memlabels
=function: foo
memlabel-mem--heap
memlabel-mem--arg.0
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%13%d
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%13%d for loc_id 31 {input.spec-%tmpvar-10.L2%13%d }
1 : input.spec-%var-x-0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvslt(1, 2) : BOOL
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%13%d for loc_id 35 {input.spec-%var-t1-0.L2%13%d }
1 : Lambda33 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda34 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
9 : input.spec-%var-x-0 : BV:32
10 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
11 : bvadd(9, 10) : BV:32
12 : map_set(8, 5, 11) : MAP[BV:32 -> BV:32]
13 : 1 { 0x1 +1.11e129 } : BV:32
14 : 12 { 0xc +1.143e129 } : BV:32
15 : bvadd(9, 14) : BV:32
16 : map_set(12, 13, 15) : MAP[BV:32 -> BV:32]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%13%d for loc_id 40 {input.spec-%tmpvar-0.L2%13%d }
1 : Lambda33 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda34 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%13%d for loc_id 41 {input.spec-%tmpvar-1.L2%13%d }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%13%d for loc_id 42 {input.spec-%tmpvar-2.L2%13%d }
1 : 5 { 0x5 +1.59e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%13%d for loc_id 43 {input.spec-%tmpvar-3.L2%13%d }
1 : input.spec-%var-x-0 : BV:32
2 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%13%d for loc_id 44 {input.spec-%tmpvar-4.L2%13%d }
1 : Lambda33 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda34 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
9 : input.spec-%var-x-0 : BV:32
10 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
11 : bvadd(9, 10) : BV:32
12 : map_set(8, 5, 11) : MAP[BV:32 -> BV:32]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%13%d for loc_id 45 {input.spec-%tmpvar-5.L2%13%d }
1 : 1 { 0x1 +1.11e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%13%d for loc_id 46 {input.spec-%tmpvar-6.L2%13%d }
1 : 12 { 0xc +1.143e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%13%d for loc_id 47 {input.spec-%tmpvar-7.L2%13%d }
1 : input.spec-%var-x-0 : BV:32
2 : 12 { 0xc +1.143e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%13%d for loc_id 48 {input.spec-%tmpvar-8.L2%13%d }
1 : Lambda33 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda34 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
9 : input.spec-%var-x-0 : BV:32
10 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
11 : bvadd(9, 10) : BV:32
12 : map_set(8, 5, 11) : MAP[BV:32 -> BV:32]
13 : 1 { 0x1 +1.11e129 } : BV:32
14 : 12 { 0xc +1.143e129 } : BV:32
15 : bvadd(9, 14) : BV:32
16 : map_set(12, 13, 15) : MAP[BV:32 -> BV:32]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%13%d for loc_id 49 {input.spec-%tmpvar-9.L2%13%d }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%13%d done
=graph_with_edge_structures.loc_to_expr_map at L2%13%d=>L2%14%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%13%d=>L2%14%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%13%d=>L2%15%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%13%d=>L2%15%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%14%bbentry=>L2%17%d
=graph_with_edge_structures.loc_to_expr_map at L2%14%bbentry=>L2%17%d for loc_id 33 {input.spec-%tmpvar-12.L2%17%d }
1 : input.spec-%var-t1-0.L2%13%d : MAP[BV:32 -> BV:32]
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=graph_with_edge_structures.loc_to_expr_map at L2%14%bbentry=>L2%17%d for loc_id 34 {input.spec-%tmpvar-11.L2%17%d }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%14%bbentry=>L2%17%d done
=graph_with_edge_structures.loc_to_expr_map at L2%15%bbentry=>L2%25%d
=graph_with_edge_structures.loc_to_expr_map at L2%15%bbentry=>L2%25%d for loc_id 32 {input.spec-%tmpvar-16.L2%25%d }
1 : input.spec-%var-t1-0.L2%13%d : MAP[BV:32 -> BV:32]
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=graph_with_edge_structures.loc_to_expr_map at L2%15%bbentry=>L2%25%d for loc_id 36 {input.spec-%tmpvar-15.L2%25%d }
1 : 1 { 0x1 +1.11e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%15%bbentry=>L2%25%d done
=graph_with_edge_structures.loc_to_expr_map at L2%17%d=>L2%18%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%17%d=>L2%18%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%17%d=>L2%21%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%17%d=>L2%21%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%18%bbentry=>L2%23%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%18%bbentry=>L2%23%bbentry for loc_id 50 {input.spec-%tmpvar-13.L2%23%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%18%bbentry=>L2%23%bbentry for loc_id 51 {input.spec-%tmpvar-14.L2%23%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%18%bbentry=>L2%23%bbentry for loc_id 52 {input.spec-%var-u-0.L2%23%bbentry }
1 : input.spec-%tmpvar-12.L2%17%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=graph_with_edge_structures.loc_to_expr_map at L2%18%bbentry=>L2%23%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%21%bbentry=>L2%23%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%21%bbentry=>L2%23%bbentry for loc_id 51 {input.spec-%tmpvar-14.L2%23%bbentry }
1 : input.spec-%tmpvar-12.L2%17%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%21%bbentry=>L2%23%bbentry for loc_id 53 {input.spec-%var-y-0.L2%23%bbentry }
1 : input.spec-%tmpvar-12.L2%17%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%21%bbentry=>L2%23%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%23%bbentry=>L2%32%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%23%bbentry=>L2%32%bbentry for loc_id 37 {input.spec-%tmpvar-19.L2%32%bbentry }
1 : input.spec-%tmpvar-14.L2%23%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%23%bbentry=>L2%32%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%25%d=>L2%26%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%25%d=>L2%26%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%25%d=>L2%29%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%25%d=>L2%29%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%26%bbentry=>L2%31%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%26%bbentry=>L2%31%bbentry for loc_id 54 {input.spec-%tmpvar-17.L2%31%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%26%bbentry=>L2%31%bbentry for loc_id 55 {input.spec-%tmpvar-18.L2%31%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%26%bbentry=>L2%31%bbentry for loc_id 56 {input.spec-%var-u-1.L2%31%bbentry }
1 : input.spec-%tmpvar-16.L2%25%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=graph_with_edge_structures.loc_to_expr_map at L2%26%bbentry=>L2%31%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%29%bbentry=>L2%31%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%29%bbentry=>L2%31%bbentry for loc_id 55 {input.spec-%tmpvar-18.L2%31%bbentry }
1 : input.spec-%tmpvar-16.L2%25%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%29%bbentry=>L2%31%bbentry for loc_id 57 {input.spec-%var-y-1.L2%31%bbentry }
1 : input.spec-%tmpvar-16.L2%25%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%29%bbentry=>L2%31%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%31%bbentry=>L2%32%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%31%bbentry=>L2%32%bbentry for loc_id 37 {input.spec-%tmpvar-19.L2%32%bbentry }
1 : input.spec-%tmpvar-18.L2%31%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%31%bbentry=>L2%32%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%32%bbentry=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at L2%32%bbentry=>E0%0%d for loc_id 38 {input.spec-%tmpvar-20.E0%0%d }
1 : input.spec-%tmpvar-19.L2%32%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%32%bbentry=>E0%0%d for loc_id 39 {input.spec-%tmpvar-21.E0%0%d }
1 : input.spec-%tmpvar-19.L2%32%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%32%bbentry=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at L2%13%d:
vacuous mls at L2%14%bbentry:
vacuous mls at L2%15%bbentry:
vacuous mls at L2%17%d:
vacuous mls at L2%18%bbentry:
vacuous mls at L2%21%bbentry:
vacuous mls at L2%23%bbentry:
vacuous mls at L2%25%d:
vacuous mls at L2%26%bbentry:
vacuous mls at L2%29%bbentry:
vacuous mls at L2%31%bbentry:
vacuous mls at L2%32%bbentry:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at L2%13%d:
non-vacuous mls at L2%14%bbentry:
non-vacuous mls at L2%15%bbentry:
non-vacuous mls at L2%17%d:
non-vacuous mls at L2%18%bbentry:
non-vacuous mls at L2%21%bbentry:
non-vacuous mls at L2%23%bbentry:
non-vacuous mls at L2%25%d:
non-vacuous mls at L2%26%bbentry:
non-vacuous mls at L2%29%bbentry:
non-vacuous mls at L2%31%bbentry:
non-vacuous mls at L2%32%bbentry:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in src.spec.foo
=avail_exprs begin
=loc 1
=loc_expr
140273 : input.spec-%var-x-0 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 31
=loc_expr
140335 : input.spec-%tmpvar-10.L2%13%d : BOOL
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-x-0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvslt(1, 2) : BOOL
=avail_exprs_val.end
=loc 32
=loc_expr
140338 : input.spec-%tmpvar-16.L2%25%d : SUM[UNIT,BV:32]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : Lambda33 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda34 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
9 : input.spec-%var-x-0 : BV:32
10 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
11 : bvadd(9, 10) : BV:32
12 : map_set(8, 5, 11) : MAP[BV:32 -> BV:32]
13 : 1 { 0x1 +1.11e129 } : BV:32
14 : 12 { 0xc +1.143e129 } : BV:32
15 : bvadd(9, 14) : BV:32
16 : map_set(12, 13, 15) : MAP[BV:32 -> BV:32]
17 : map_get(16, 13) : SUM[UNIT,BV:32]
=avail_exprs_val.end
=loc 33
=loc_expr
140342 : input.spec-%tmpvar-12.L2%17%d : SUM[UNIT,BV:32]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : Lambda33 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda34 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
9 : input.spec-%var-x-0 : BV:32
10 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
11 : bvadd(9, 10) : BV:32
12 : map_set(8, 5, 11) : MAP[BV:32 -> BV:32]
13 : 1 { 0x1 +1.11e129 } : BV:32
14 : 12 { 0xc +1.143e129 } : BV:32
15 : bvadd(9, 14) : BV:32
16 : map_set(12, 13, 15) : MAP[BV:32 -> BV:32]
17 : map_get(16, 5) : SUM[UNIT,BV:32]
=avail_exprs_val.end
=loc 34
=loc_expr
140477 : input.spec-%tmpvar-11.L2%17%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 35
=loc_expr
140466 : input.spec-%var-t1-0.L2%13%d : MAP[BV:32 -> BV:32]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : Lambda33 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda34 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
9 : input.spec-%var-x-0 : BV:32
10 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
11 : bvadd(9, 10) : BV:32
12 : map_set(8, 5, 11) : MAP[BV:32 -> BV:32]
13 : 1 { 0x1 +1.11e129 } : BV:32
14 : 12 { 0xc +1.143e129 } : BV:32
15 : bvadd(9, 14) : BV:32
16 : map_set(12, 13, 15) : MAP[BV:32 -> BV:32]
=avail_exprs_val.end
=loc 36
=loc_expr
140479 : input.spec-%tmpvar-15.L2%25%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 1 { 0x1 +1.11e129 } : BV:32
=avail_exprs_val.end
=loc 40
=loc_expr
140481 : input.spec-%tmpvar-0.L2%13%d : MAP[BV:32 -> BV:32]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : Lambda33 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda34 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=avail_exprs_val.end
=loc 41
=loc_expr
140482 : input.spec-%tmpvar-1.L2%13%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 42
=loc_expr
140483 : input.spec-%tmpvar-2.L2%13%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 5 { 0x5 +1.59e129 } : BV:32
=avail_exprs_val.end
=loc 43
=loc_expr
140484 : input.spec-%tmpvar-3.L2%13%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-x-0 : BV:32
2 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
3 : bvadd(1, 2) : BV:32
=avail_exprs_val.end
=loc 44
=loc_expr
140485 : input.spec-%tmpvar-4.L2%13%d : MAP[BV:32 -> BV:32]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : Lambda33 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda34 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
9 : input.spec-%var-x-0 : BV:32
10 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
11 : bvadd(9, 10) : BV:32
12 : map_set(8, 5, 11) : MAP[BV:32 -> BV:32]
=avail_exprs_val.end
=loc 45
=loc_expr
140486 : input.spec-%tmpvar-5.L2%13%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 1 { 0x1 +1.11e129 } : BV:32
=avail_exprs_val.end
=loc 46
=loc_expr
140487 : input.spec-%tmpvar-6.L2%13%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 12 { 0xc +1.143e129 } : BV:32
=avail_exprs_val.end
=loc 47
=loc_expr
140488 : input.spec-%tmpvar-7.L2%13%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-x-0 : BV:32
2 : 12 { 0xc +1.143e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=avail_exprs_val.end
=loc 48
=loc_expr
140489 : input.spec-%tmpvar-8.L2%13%d : MAP[BV:32 -> BV:32]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : Lambda33 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda34 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
9 : input.spec-%var-x-0 : BV:32
10 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
11 : bvadd(9, 10) : BV:32
12 : map_set(8, 5, 11) : MAP[BV:32 -> BV:32]
13 : 1 { 0x1 +1.11e129 } : BV:32
14 : 12 { 0xc +1.143e129 } : BV:32
15 : bvadd(9, 14) : BV:32
16 : map_set(12, 13, 15) : MAP[BV:32 -> BV:32]
=avail_exprs_val.end
=loc 49
=loc_expr
140490 : input.spec-%tmpvar-9.L2%13%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 50
=loc_expr
140491 : input.spec-%tmpvar-13.L2%23%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 52
=loc_expr
140492 : input.spec-%var-u-0.L2%23%bbentry : UNIT
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : Lambda33 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda34 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
9 : input.spec-%var-x-0 : BV:32
10 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
11 : bvadd(9, 10) : BV:32
12 : map_set(8, 5, 11) : MAP[BV:32 -> BV:32]
13 : 1 { 0x1 +1.11e129 } : BV:32
14 : 12 { 0xc +1.143e129 } : BV:32
15 : bvadd(9, 14) : BV:32
16 : map_set(12, 13, 15) : MAP[BV:32 -> BV:32]
17 : map_get(16, 5) : SUM[UNIT,BV:32]
18 : 0 { 0x0 +1.0e1025 } : INT
19 : sum_get(17, 18) : UNIT
=avail_exprs_val.end
=loc 53
=loc_expr
140493 : input.spec-%var-y-0.L2%23%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : Lambda33 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda34 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
9 : input.spec-%var-x-0 : BV:32
10 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
11 : bvadd(9, 10) : BV:32
12 : map_set(8, 5, 11) : MAP[BV:32 -> BV:32]
13 : 1 { 0x1 +1.11e129 } : BV:32
14 : 12 { 0xc +1.143e129 } : BV:32
15 : bvadd(9, 14) : BV:32
16 : map_set(12, 13, 15) : MAP[BV:32 -> BV:32]
17 : map_get(16, 5) : SUM[UNIT,BV:32]
18 : 1 { 0x1 +1.0e1025 } : INT
19 : sum_get(17, 18) : BV:32
=avail_exprs_val.end
=loc 54
=loc_expr
140494 : input.spec-%tmpvar-17.L2%31%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 56
=loc_expr
140495 : input.spec-%var-u-1.L2%31%bbentry : UNIT
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : Lambda33 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda34 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
9 : input.spec-%var-x-0 : BV:32
10 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
11 : bvadd(9, 10) : BV:32
12 : map_set(8, 5, 11) : MAP[BV:32 -> BV:32]
13 : 1 { 0x1 +1.11e129 } : BV:32
14 : 12 { 0xc +1.143e129 } : BV:32
15 : bvadd(9, 14) : BV:32
16 : map_set(12, 13, 15) : MAP[BV:32 -> BV:32]
17 : map_get(16, 13) : SUM[UNIT,BV:32]
18 : 0 { 0x0 +1.0e1025 } : INT
19 : sum_get(17, 18) : UNIT
=avail_exprs_val.end
=loc 57
=loc_expr
140496 : input.spec-%var-y-1.L2%31%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : Lambda33 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda34 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
9 : input.spec-%var-x-0 : BV:32
10 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
11 : bvadd(9, 10) : BV:32
12 : map_set(8, 5, 11) : MAP[BV:32 -> BV:32]
13 : 1 { 0x1 +1.11e129 } : BV:32
14 : 12 { 0xc +1.143e129 } : BV:32
15 : bvadd(9, 14) : BV:32
16 : map_set(12, 13, 15) : MAP[BV:32 -> BV:32]
17 : map_get(16, 13) : SUM[UNIT,BV:32]
18 : 1 { 0x1 +1.0e1025 } : INT
19 : sum_get(17, 18) : BV:32
=avail_exprs_val.end
=avail_exprs end
=sprel_map in src.spec.foo
=loc 34 expr
1 : input.spec-%tmpvar-11.L2%17%d : BV:32
=loc 34 spreled-expr
140278 : 0 { 0x0 +1.0e129 } : BV:32
=loc 36 expr
1 : input.spec-%tmpvar-15.L2%25%d : BV:32
=loc 36 spreled-expr
140286 : 1 { 0x1 +1.11e129 } : BV:32
=loc 40 expr
1 : input.spec-%tmpvar-0.L2%13%d : MAP[BV:32 -> BV:32]
=loc 40 spreled-expr
140497 : Lambda33 : BV:32
140331 : 0 { 0x0 } : BOOL
140498 : lambda(140497, 140331) : FUNCTION[BV:32 -> BOOL]
140499 : Lambda34 : BV:32
140278 : 0 { 0x0 +1.0e129 } : BV:32
140500 : lambda(140499, 140278) : FUNCTION[BV:32 -> BV:32]
140501 : map(140498, 140500) : MAP[BV:32 -> BV:32]
140502 : sym_const(140501) : MAP[BV:32 -> BV:32]
=loc 41 expr
1 : input.spec-%tmpvar-1.L2%13%d : BV:32
=loc 41 spreled-expr
140278 : 0 { 0x0 +1.0e129 } : BV:32
=loc 42 expr
1 : input.spec-%tmpvar-2.L2%13%d : BV:32
=loc 42 spreled-expr
140279 : 5 { 0x5 +1.59e129 } : BV:32
=loc 45 expr
1 : input.spec-%tmpvar-5.L2%13%d : BV:32
=loc 45 spreled-expr
140286 : 1 { 0x1 +1.11e129 } : BV:32
=loc 46 expr
1 : input.spec-%tmpvar-6.L2%13%d : BV:32
=loc 46 spreled-expr
140287 : 12 { 0xc +1.143e129 } : BV:32
=loc 49 expr
1 : input.spec-%tmpvar-9.L2%13%d : BV:32
=loc 49 spreled-expr
140278 : 0 { 0x0 +1.0e129 } : BV:32
=loc 50 expr
1 : input.spec-%tmpvar-13.L2%23%bbentry : BV:32
=loc 50 spreled-expr
140278 : 0 { 0x0 +1.0e129 } : BV:32
=loc 54 expr
1 : input.spec-%tmpvar-17.L2%31%bbentry : BV:32
=loc 54 spreled-expr
140278 : 0 { 0x0 +1.0e129 } : BV:32
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;foo}
=loc_id 1 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 29 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 30 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 31 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 32 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 33 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 34 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 35 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 36 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 37 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 38 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 39 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 40 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 41 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 42 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 43 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 44 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 45 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 46 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 47 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 48 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 49 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 50 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 51 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 52 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 53 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 54 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 55 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 56 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 57 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 34 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 36 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 40 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 41 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 42 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 45 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 46 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 49 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 50 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 54 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>L2%13%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%13%d=>L2%14%bbentry
1 : input.spec-%tmpvar-10.L2%13%d : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%13%d=>L2%15%bbentry
1 : input.spec-%tmpvar-10.L2%13%d : BOOL
2 : not(1) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%14%bbentry=>L2%17%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%15%bbentry=>L2%25%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%17%d=>L2%18%bbentry
1 : input.spec-%tmpvar-12.L2%17%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%17%d=>L2%21%bbentry
1 : input.spec-%tmpvar-12.L2%17%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%18%bbentry=>L2%23%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%21%bbentry=>L2%23%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%23%bbentry=>L2%32%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%25%d=>L2%26%bbentry
1 : input.spec-%tmpvar-16.L2%25%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%25%d=>L2%29%bbentry
1 : input.spec-%tmpvar-16.L2%25%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%26%bbentry=>L2%31%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%29%bbentry=>L2%31%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%31%bbentry=>L2%32%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%32%bbentry=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>L2%13%d
=spec-%tmpvar-0.L2%13%d
1 : Lambda33 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda34 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=spec-%tmpvar-1.L2%13%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-10.L2%13%d
1 : input.spec-%var-x-0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvslt(1, 2) : BOOL
=spec-%tmpvar-2.L2%13%d
1 : 5 { 0x5 +1.59e129 } : BV:32
=spec-%tmpvar-3.L2%13%d
1 : input.spec-%var-x-0 : BV:32
2 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-4.L2%13%d
1 : Lambda33 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda34 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
9 : input.spec-%var-x-0 : BV:32
10 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
11 : bvadd(9, 10) : BV:32
12 : map_set(8, 5, 11) : MAP[BV:32 -> BV:32]
=spec-%tmpvar-5.L2%13%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%tmpvar-6.L2%13%d
1 : 12 { 0xc +1.143e129 } : BV:32
=spec-%tmpvar-7.L2%13%d
1 : input.spec-%var-x-0 : BV:32
2 : 12 { 0xc +1.143e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-8.L2%13%d
1 : Lambda33 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda34 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
9 : input.spec-%var-x-0 : BV:32
10 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
11 : bvadd(9, 10) : BV:32
12 : map_set(8, 5, 11) : MAP[BV:32 -> BV:32]
13 : 1 { 0x1 +1.11e129 } : BV:32
14 : 12 { 0xc +1.143e129 } : BV:32
15 : bvadd(9, 14) : BV:32
16 : map_set(12, 13, 15) : MAP[BV:32 -> BV:32]
=spec-%tmpvar-9.L2%13%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-t1-0.L2%13%d
1 : Lambda33 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda34 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
9 : input.spec-%var-x-0 : BV:32
10 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
11 : bvadd(9, 10) : BV:32
12 : map_set(8, 5, 11) : MAP[BV:32 -> BV:32]
13 : 1 { 0x1 +1.11e129 } : BV:32
14 : 12 { 0xc +1.143e129 } : BV:32
15 : bvadd(9, 14) : BV:32
16 : map_set(12, 13, 15) : MAP[BV:32 -> BV:32]
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%13%d=>L2%14%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%13%d=>L2%15%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%14%bbentry=>L2%17%d
=spec-%tmpvar-11.L2%17%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-12.L2%17%d
1 : input.spec-%var-t1-0.L2%13%d : MAP[BV:32 -> BV:32]
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%15%bbentry=>L2%25%d
=spec-%tmpvar-15.L2%25%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%tmpvar-16.L2%25%d
1 : input.spec-%var-t1-0.L2%13%d : MAP[BV:32 -> BV:32]
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%17%d=>L2%18%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%17%d=>L2%21%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%18%bbentry=>L2%23%bbentry
=spec-%tmpvar-13.L2%23%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-14.L2%23%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-u-0.L2%23%bbentry
1 : input.spec-%tmpvar-12.L2%17%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%21%bbentry=>L2%23%bbentry
=spec-%tmpvar-14.L2%23%bbentry
1 : input.spec-%tmpvar-12.L2%17%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=spec-%var-y-0.L2%23%bbentry
1 : input.spec-%tmpvar-12.L2%17%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%23%bbentry=>L2%32%bbentry
=spec-%tmpvar-19.L2%32%bbentry
1 : input.spec-%tmpvar-14.L2%23%bbentry : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%25%d=>L2%26%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%25%d=>L2%29%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%26%bbentry=>L2%31%bbentry
=spec-%tmpvar-17.L2%31%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-18.L2%31%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-u-1.L2%31%bbentry
1 : input.spec-%tmpvar-16.L2%25%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%29%bbentry=>L2%31%bbentry
=spec-%tmpvar-18.L2%31%bbentry
1 : input.spec-%tmpvar-16.L2%25%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=spec-%var-y-1.L2%31%bbentry
1 : input.spec-%tmpvar-16.L2%25%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%31%bbentry=>L2%32%bbentry
=spec-%tmpvar-19.L2%32%bbentry
1 : input.spec-%tmpvar-18.L2%31%bbentry : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%32%bbentry=>E0%0%d
=spec-%tmpvar-20.E0%0%d
1 : input.spec-%tmpvar-19.L2%32%bbentry : BV:32
=spec-%tmpvar-21.E0%0%d
1 : input.spec-%tmpvar-19.L2%32%bbentry : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>L2%13%d
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>L2%13%d done
=graph_with_simplified_assets.simplified_assumes at L2%13%d=>L2%14%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%13%d=>L2%14%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%13%d=>L2%15%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%13%d=>L2%15%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%14%bbentry=>L2%17%d
=graph_with_simplified_assets.simplified_assumes at L2%14%bbentry=>L2%17%d done
=graph_with_simplified_assets.simplified_assumes at L2%15%bbentry=>L2%25%d
=graph_with_simplified_assets.simplified_assumes at L2%15%bbentry=>L2%25%d done
=graph_with_simplified_assets.simplified_assumes at L2%17%d=>L2%18%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%17%d=>L2%18%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%17%d=>L2%21%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%17%d=>L2%21%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%18%bbentry=>L2%23%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%18%bbentry=>L2%23%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%21%bbentry=>L2%23%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%21%bbentry=>L2%23%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%23%bbentry=>L2%32%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%23%bbentry=>L2%32%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%25%d=>L2%26%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%25%d=>L2%26%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%25%d=>L2%29%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%25%d=>L2%29%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%26%bbentry=>L2%31%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%26%bbentry=>L2%31%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%29%bbentry=>L2%31%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%29%bbentry=>L2%31%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%31%bbentry=>L2%32%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%31%bbentry=>L2%32%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%32%bbentry=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at L2%32%bbentry=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
0
=String-contents:
=Nextpc-map:
=Nextpc-map done
=suffixpaths for src.spec.foo
=suffixpath_at_L0%0%d for src.spec.foo
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_L2%13%d for src.spec.foo
=suffixpath_at_L2%13%d.graph_edge_composition
(L0%0%d=>L2%13%d)
=suffixpath_at_L2%14%bbentry for src.spec.foo
=suffixpath_at_L2%14%bbentry.graph_edge_composition
((L0%0%d=>L2%13%d)*(L2%13%d=>L2%14%bbentry))
=suffixpath_at_L2%15%bbentry for src.spec.foo
=suffixpath_at_L2%15%bbentry.graph_edge_composition
((L0%0%d=>L2%13%d)*(L2%13%d=>L2%15%bbentry))
=suffixpath_at_L2%17%d for src.spec.foo
=suffixpath_at_L2%17%d.graph_edge_composition
((L0%0%d=>L2%13%d)*((L2%13%d=>L2%14%bbentry)*(L2%14%bbentry=>L2%17%d)))
=suffixpath_at_L2%18%bbentry for src.spec.foo
=suffixpath_at_L2%18%bbentry.graph_edge_composition
((L0%0%d=>L2%13%d)*((L2%13%d=>L2%14%bbentry)*((L2%14%bbentry=>L2%17%d)*(L2%17%d=>L2%18%bbentry))))
=suffixpath_at_L2%21%bbentry for src.spec.foo
=suffixpath_at_L2%21%bbentry.graph_edge_composition
((L0%0%d=>L2%13%d)*((L2%13%d=>L2%14%bbentry)*((L2%14%bbentry=>L2%17%d)*(L2%17%d=>L2%21%bbentry))))
=suffixpath_at_L2%23%bbentry for src.spec.foo
=suffixpath_at_L2%23%bbentry.graph_edge_composition
(((L0%0%d=>L2%13%d)*((L2%13%d=>L2%14%bbentry)*((L2%14%bbentry=>L2%17%d)*((L2%17%d=>L2%18%bbentry)*(L2%18%bbentry=>L2%23%bbentry)))))+((L0%0%d=>L2%13%d)*((L2%13%d=>L2%14%bbentry)*((L2%14%bbentry=>L2%17%d)*((L2%17%d=>L2%21%bbentry)*(L2%21%bbentry=>L2%23%bbentry))))))
=suffixpath_at_L2%25%d for src.spec.foo
=suffixpath_at_L2%25%d.graph_edge_composition
((L0%0%d=>L2%13%d)*((L2%13%d=>L2%15%bbentry)*(L2%15%bbentry=>L2%25%d)))
=suffixpath_at_L2%26%bbentry for src.spec.foo
=suffixpath_at_L2%26%bbentry.graph_edge_composition
((L0%0%d=>L2%13%d)*((L2%13%d=>L2%15%bbentry)*((L2%15%bbentry=>L2%25%d)*(L2%25%d=>L2%26%bbentry))))
=suffixpath_at_L2%29%bbentry for src.spec.foo
=suffixpath_at_L2%29%bbentry.graph_edge_composition
((L0%0%d=>L2%13%d)*((L2%13%d=>L2%15%bbentry)*((L2%15%bbentry=>L2%25%d)*(L2%25%d=>L2%29%bbentry))))
=suffixpath_at_L2%31%bbentry for src.spec.foo
=suffixpath_at_L2%31%bbentry.graph_edge_composition
(((L0%0%d=>L2%13%d)*((L2%13%d=>L2%15%bbentry)*((L2%15%bbentry=>L2%25%d)*((L2%25%d=>L2%26%bbentry)*(L2%26%bbentry=>L2%31%bbentry)))))+((L0%0%d=>L2%13%d)*((L2%13%d=>L2%15%bbentry)*((L2%15%bbentry=>L2%25%d)*((L2%25%d=>L2%29%bbentry)*(L2%29%bbentry=>L2%31%bbentry))))))
=suffixpath_at_L2%32%bbentry for src.spec.foo
=suffixpath_at_L2%32%bbentry.graph_edge_composition
(((((L0%0%d=>L2%13%d)*((L2%13%d=>L2%14%bbentry)*((L2%14%bbentry=>L2%17%d)*((L2%17%d=>L2%18%bbentry)*(L2%18%bbentry=>L2%23%bbentry)))))+((L0%0%d=>L2%13%d)*((L2%13%d=>L2%14%bbentry)*((L2%14%bbentry=>L2%17%d)*((L2%17%d=>L2%21%bbentry)*(L2%21%bbentry=>L2%23%bbentry))))))*(L2%23%bbentry=>L2%32%bbentry))+((((L0%0%d=>L2%13%d)*((L2%13%d=>L2%15%bbentry)*((L2%15%bbentry=>L2%25%d)*((L2%25%d=>L2%26%bbentry)*(L2%26%bbentry=>L2%31%bbentry)))))+((L0%0%d=>L2%13%d)*((L2%13%d=>L2%15%bbentry)*((L2%15%bbentry=>L2%25%d)*((L2%25%d=>L2%29%bbentry)*(L2%29%bbentry=>L2%31%bbentry))))))*(L2%31%bbentry=>L2%32%bbentry)))
=suffixpath_at_E0%0%d for src.spec.foo
=suffixpath_at_E0%0%d.graph_edge_composition
((((((L0%0%d=>L2%13%d)*((L2%13%d=>L2%14%bbentry)*((L2%14%bbentry=>L2%17%d)*((L2%17%d=>L2%18%bbentry)*(L2%18%bbentry=>L2%23%bbentry)))))+((L0%0%d=>L2%13%d)*((L2%13%d=>L2%14%bbentry)*((L2%14%bbentry=>L2%17%d)*((L2%17%d=>L2%21%bbentry)*(L2%21%bbentry=>L2%23%bbentry))))))*(L2%23%bbentry=>L2%32%bbentry))+((((L0%0%d=>L2%13%d)*((L2%13%d=>L2%15%bbentry)*((L2%15%bbentry=>L2%25%d)*((L2%25%d=>L2%26%bbentry)*(L2%26%bbentry=>L2%31%bbentry)))))+((L0%0%d=>L2%13%d)*((L2%13%d=>L2%15%bbentry)*((L2%15%bbentry=>L2%25%d)*((L2%25%d=>L2%29%bbentry)*(L2%29%bbentry=>L2%31%bbentry))))))*(L2%31%bbentry=>L2%32%bbentry)))*(L2%32%bbentry=>E0%0%d))
=suffixpaths for src.spec.foo done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>L2%13%d
tfg.assumes_around_edge at L0%0%d=>L2%13%d done
tfg.assumes_around_edge at L2%13%d=>L2%14%bbentry
tfg.assumes_around_edge at L2%13%d=>L2%14%bbentry done
tfg.assumes_around_edge at L2%13%d=>L2%15%bbentry
tfg.assumes_around_edge at L2%13%d=>L2%15%bbentry done
tfg.assumes_around_edge at L2%14%bbentry=>L2%17%d
tfg.assumes_around_edge at L2%14%bbentry=>L2%17%d done
tfg.assumes_around_edge at L2%15%bbentry=>L2%25%d
tfg.assumes_around_edge at L2%15%bbentry=>L2%25%d done
tfg.assumes_around_edge at L2%17%d=>L2%18%bbentry
tfg.assumes_around_edge at L2%17%d=>L2%18%bbentry done
tfg.assumes_around_edge at L2%17%d=>L2%21%bbentry
tfg.assumes_around_edge at L2%17%d=>L2%21%bbentry done
tfg.assumes_around_edge at L2%18%bbentry=>L2%23%bbentry
tfg.assumes_around_edge at L2%18%bbentry=>L2%23%bbentry done
tfg.assumes_around_edge at L2%21%bbentry=>L2%23%bbentry
tfg.assumes_around_edge at L2%21%bbentry=>L2%23%bbentry done
tfg.assumes_around_edge at L2%23%bbentry=>L2%32%bbentry
tfg.assumes_around_edge at L2%23%bbentry=>L2%32%bbentry done
tfg.assumes_around_edge at L2%25%d=>L2%26%bbentry
tfg.assumes_around_edge at L2%25%d=>L2%26%bbentry done
tfg.assumes_around_edge at L2%25%d=>L2%29%bbentry
tfg.assumes_around_edge at L2%25%d=>L2%29%bbentry done
tfg.assumes_around_edge at L2%26%bbentry=>L2%31%bbentry
tfg.assumes_around_edge at L2%26%bbentry=>L2%31%bbentry done
tfg.assumes_around_edge at L2%29%bbentry=>L2%31%bbentry
tfg.assumes_around_edge at L2%29%bbentry=>L2%31%bbentry done
tfg.assumes_around_edge at L2%31%bbentry=>L2%32%bbentry
tfg.assumes_around_edge at L2%31%bbentry=>L2%32%bbentry done
tfg.assumes_around_edge at L2%32%bbentry=>E0%0%d
tfg.assumes_around_edge at L2%32%bbentry=>E0%0%d done
tfg.assumes_around_edge done
=TFGdone
=TFG_SPEC_done
=TFG_SSA_done
=dst_tfg
=TFG_SSA:
=TFG_LLVM dst.llvm.foo:
=TFG:
=Nodes: L0%0%d Lentry%2%d Lif.else%1%d Lif.then%1%d Lreturn%1%bbentry E0%0%d
=Edges:
L0%0%d => Lentry%2%d
Lentry%2%d => Lif.then%1%d
Lentry%2%d => Lif.else%1%d
Lif.else%1%d => Lreturn%1%bbentry
Lif.then%1%d => Lreturn%1%bbentry
Lreturn%1%bbentry => E0%0%d
=graph done
=is_ssa_graph:
1
=StartState:
=dst.llvm-%x
1 : input.dst.llvm-%x : BV:32
=dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=state_end
=PC to var-version map at L0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lentry%2%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lif.else%1%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lif.then%1%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lreturn%1%bbentry
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at E0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=graph_with_var_versions done
=FunctionName: foo
=Input: tfg-method-arg.0
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%x : BV:32
=arg end
=Node outputs: E0%0%d
=Output: heap
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=Output: llvm-indir_tgt
1 : retaddr_const : BV:32
=Output: llvm-%ret-reg
1 : input.dst.llvm-%retval.0.Lreturn%1%bbentry : BV:32
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : foo : 9 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%x : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;foo}
=memlabel_map.0 for call-context {*;foo}
mlheap.dst.llvm.foo : memlabel-mem-may-straddle-symbol.1-heap
=Edge: L0%0%d => Lentry%2%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.local_alloc_count.Lentry%2%d
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=dst.cur_rounding_mode.Lentry%2%d
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.llvm-%cmp.Lentry%2%d
1 : input.dst.llvm-%x : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvslt(1, 2) : BOOL
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(start_pc_edge*  %cmp = icmp slt i32 %x, 0, !dbg !15)
tfg_edge_comment end

=Edge: Lentry%2%d => Lif.then%1%d
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp.Lentry%2%d : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %cmp, label %if.then, label %if.else, !dbg !17*  br i1 %cmp, label %if.then, label %if.else, !dbg !17)*  br i1 %cmp, label %if.then, label %if.else, !dbg !17)
tfg_edge_comment end

=Edge: Lentry%2%d => Lif.else%1%d
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp.Lentry%2%d : BOOL
2 : not(1) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %cmp, label %if.then, label %if.else, !dbg !17*  br i1 %cmp, label %if.then, label %if.else, !dbg !17)*  br i1 %cmp, label %if.then, label %if.else, !dbg !17)
tfg_edge_comment end

=Edge: Lif.else%1%d => Lreturn%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%retval.0.Lreturn%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 12 { 0xc +1.143e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%retval.0.phi.tmpvar.if.else.Lreturn%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 12 { 0xc +1.143e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%add.Lreturn%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 12 { 0xc +1.143e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:1:(((  %add = add nsw i32 %x, 12, !dbg !20*  br label %return, !dbg !21)*(  %retval.0 = phi i32 [ %sub, %if.then ], [ %add, %if.else ], !dbg !22*  br label %return, !dbg !21))*(  br label %return, !dbg !21*  br label %return, !dbg !21))
tfg_edge_comment end

=Edge: Lif.then%1%d => Lreturn%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%retval.0.Lreturn%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 5 { 0x5 +1.59e129 } : BV:32
3 : bvsub(1, 2) : BV:32
=dst.llvm-%retval.0.phi.tmpvar.if.then.Lreturn%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 5 { 0x5 +1.59e129 } : BV:32
3 : bvsub(1, 2) : BV:32
=dst.llvm-%sub.Lreturn%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 5 { 0x5 +1.59e129 } : BV:32
3 : bvsub(1, 2) : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:1:(((  %sub = sub nsw i32 %x, 5, !dbg !18*  br label %return, !dbg !19)*(  %retval.0 = phi i32 [ %sub, %if.then ], [ %add, %if.else ], !dbg !22*  br label %return, !dbg !19))*(  br label %return, !dbg !19*  br label %return, !dbg !19))
tfg_edge_comment end

=Edge: Lreturn%1%bbentry => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%retval.0.Lreturn%1%bbentry : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*  ret i32 %retval.0, !dbg !23)
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%x : BV:32
=predicate done
=graph_with_precondition_done

=Locs in dst.llvm.foo
=Loc 100002 in dst.llvm.foo.
REGMEM
dst.llvm-%x
1 : input.dst.llvm-%x : BV:32
=Loc 100008 in dst.llvm.foo.
REGMEM
dst.llvm-%hidden-reg
1 : input.dst.llvm-%hidden-reg : BV:32
=Loc 100010 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.0
1 : input.dst.llvm-callee-save.0 : BV:32
=Loc 100011 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.1
1 : input.dst.llvm-callee-save.1 : BV:32
=Loc 100012 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.2
1 : input.dst.llvm-callee-save.2 : BV:32
=Loc 100013 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.3
1 : input.dst.llvm-callee-save.3 : BV:32
=Loc 100016 in dst.llvm.foo.
REGMEM
dst.local_alloc_count.=L0%0%d=
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=Loc 100017 in dst.llvm.foo.
REGMEM
dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=Loc 100019 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 100020 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
=Loc 100021 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem-may-straddle-symbol.1-heap
=Loc 100022 in dst.llvm.foo.
REGMEM
dst.llvm-%cmp.Lentry%2%d
1 : input.dst.llvm-%cmp.Lentry%2%d : BOOL
=Loc 100023 in dst.llvm.foo.
REGMEM
dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=Loc 100024 in dst.llvm.foo.
REGMEM
dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=Loc 100025 in dst.llvm.foo.
REGMEM
dst.llvm-%retval.0.Lreturn%1%bbentry
1 : input.dst.llvm-%retval.0.Lreturn%1%bbentry : BV:32
=Loc 100026 in dst.llvm.foo.
REGMEM
dst.llvm-indir_tgt.E0%0%d
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=Loc 100027 in dst.llvm.foo.
REGMEM
dst.llvm-%add.Lreturn%1%bbentry
1 : input.dst.llvm-%add.Lreturn%1%bbentry : BV:32
=Loc 100028 in dst.llvm.foo.
REGMEM
dst.llvm-%retval.0.phi.tmpvar.if.else.Lreturn%1%bbentry
1 : input.dst.llvm-%retval.0.phi.tmpvar.if.else.Lreturn%1%bbentry : BV:32
=Loc 100029 in dst.llvm.foo.
REGMEM
dst.llvm-%retval.0.phi.tmpvar.if.then.Lreturn%1%bbentry
1 : input.dst.llvm-%retval.0.phi.tmpvar.if.then.Lreturn%1%bbentry : BV:32
=Loc 100030 in dst.llvm.foo.
REGMEM
dst.llvm-%sub.Lreturn%1%bbentry
1 : input.dst.llvm-%sub.Lreturn%1%bbentry : BV:32
=Loc 100031 in dst.llvm.foo.
REGMEM
dst.local_alloc_count.Lentry%2%d
1 : input.dst.local_alloc_count.Lentry%2%d : COUNT
=Loc 100032 in dst.llvm.foo.
REGMEM
dst.cur_rounding_mode.Lentry%2%d
1 : input.dst.cur_rounding_mode.Lentry%2%d : ROUNDING_MODE
=Locs end
=Liveness in dst.llvm.foo
=live locs at L0%0%d
100002, 100021, 
=live locs at Lentry%2%d
100002, 100021, 100022, 
=live locs at Lif.else%1%d
100002, 100021, 
=live locs at Lif.then%1%d
100002, 100021, 
=live locs at Lreturn%1%bbentry
100021, 100025[f], 
=live locs at E0%0%d
100021, 100025[f], 

=Definedness in dst.llvm.foo
=loc definedness at L0%0%d
100002, 100017, 100019, 100020, 100021
=loc definedness at Lentry%2%d
100002, 100017, 100019, 100020, 100021, 100022, 100031, 100032
=loc definedness at Lif.else%1%d
100002, 100017, 100019, 100020, 100021, 100022, 100031, 100032
=loc definedness at Lif.then%1%d
100002, 100017, 100019, 100020, 100021, 100022, 100031, 100032
=loc definedness at Lreturn%1%bbentry
100002, 100017, 100019, 100020, 100021, 100022, 100025, 100031, 100032
=loc definedness at E0%0%d
100002, 100017, 100019, 100020, 100021, 100022, 100023, 100024, 100025, 100026, 100031, 100032

=Branch affecting variable locs in dst.llvm.foo
=branch affecting variable locs at L0%0%d
100002
=branch affecting variable locs at Lentry%2%d
100022
=branch affecting variable locs at Lif.else%1%d

=branch affecting variable locs at Lif.then%1%d

=branch affecting variable locs at Lreturn%1%bbentry

=branch affecting variable locs at E0%0%d


=Relevant Memlabels in dst.llvm.foo
=relevant memlabels
=function: foo
memlabel-mem--arg.0
memlabel-mem-may-straddle-symbol.1-heap
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lentry%2%d
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lentry%2%d for loc_id 100022 {input.dst.llvm-%cmp.Lentry%2%d }
1 : input.dst.llvm-%x : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvslt(1, 2) : BOOL
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lentry%2%d for loc_id 100031 {input.dst.local_alloc_count.Lentry%2%d }
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lentry%2%d for loc_id 100032 {input.dst.cur_rounding_mode.Lentry%2%d }
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lentry%2%d done
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>Lif.else%1%d
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>Lif.else%1%d done
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>Lif.then%1%d
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>Lif.then%1%d done
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lreturn%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lreturn%1%bbentry for loc_id 100025 {input.dst.llvm-%retval.0.Lreturn%1%bbentry }
1 : 12 { 0xc +1.143e129 } : BV:32
2 : input.dst.llvm-%x : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lreturn%1%bbentry for loc_id 100027 {input.dst.llvm-%add.Lreturn%1%bbentry }
1 : 12 { 0xc +1.143e129 } : BV:32
2 : input.dst.llvm-%x : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lreturn%1%bbentry for loc_id 100028 {input.dst.llvm-%retval.0.phi.tmpvar.if.else.Lreturn%1%bbentry }
1 : 12 { 0xc +1.143e129 } : BV:32
2 : input.dst.llvm-%x : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lreturn%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lreturn%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lreturn%1%bbentry for loc_id 100025 {input.dst.llvm-%retval.0.Lreturn%1%bbentry }
1 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
2 : input.dst.llvm-%x : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lreturn%1%bbentry for loc_id 100029 {input.dst.llvm-%retval.0.phi.tmpvar.if.then.Lreturn%1%bbentry }
1 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
2 : input.dst.llvm-%x : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lreturn%1%bbentry for loc_id 100030 {input.dst.llvm-%sub.Lreturn%1%bbentry }
1 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
2 : input.dst.llvm-%x : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lreturn%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lreturn%1%bbentry=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at Lreturn%1%bbentry=>E0%0%d for loc_id 100023 {input.dst.llvm-%hidden-reg.E0%0%d }
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lreturn%1%bbentry=>E0%0%d for loc_id 100024 {input.dst.llvm-%ret-reg.E0%0%d }
1 : input.dst.llvm-%retval.0.Lreturn%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lreturn%1%bbentry=>E0%0%d for loc_id 100026 {input.dst.llvm-indir_tgt.E0%0%d }
1 : retaddr_const : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lreturn%1%bbentry=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at Lentry%2%d:
vacuous mls at Lif.else%1%d:
vacuous mls at Lif.then%1%d:
vacuous mls at Lreturn%1%bbentry:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at Lentry%2%d:
non-vacuous mls at Lif.else%1%d:
non-vacuous mls at Lif.then%1%d:
non-vacuous mls at Lreturn%1%bbentry:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in dst.llvm.foo
=avail_exprs begin
=loc 100002
=loc_expr
140448 : input.dst.llvm-%x : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100008
=loc_expr
140571 : input.dst.llvm-%hidden-reg : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100010
=loc_expr
140572 : input.dst.llvm-callee-save.0 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100011
=loc_expr
140574 : input.dst.llvm-callee-save.1 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100012
=loc_expr
140576 : input.dst.llvm-callee-save.2 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100013
=loc_expr
140578 : input.dst.llvm-callee-save.3 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100016
=loc_expr
140456 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100017
=loc_expr
140451 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100022
=loc_expr
140702 : input.dst.llvm-%cmp.Lentry%2%d : BOOL
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%x : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvslt(1, 2) : BOOL
=avail_exprs_val.end
=loc 100023
=loc_expr
140709 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=avail_exprs_val.end
=loc 100024
=loc_expr
140710 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%retval.0.Lreturn%1%bbentry : BV:32
=avail_exprs_val.end
=loc 100026
=loc_expr
140711 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : retaddr_const : BV:32
=avail_exprs_val.end
=loc 100027
=loc_expr
140715 : input.dst.llvm-%add.Lreturn%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 12 { 0xc +1.143e129 } : BV:32
2 : input.dst.llvm-%x : BV:32
3 : bvadd(1, 2) : BV:32
=avail_exprs_val.end
=loc 100028
=loc_expr
140716 : input.dst.llvm-%retval.0.phi.tmpvar.if.else.Lreturn%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 12 { 0xc +1.143e129 } : BV:32
2 : input.dst.llvm-%x : BV:32
3 : bvadd(1, 2) : BV:32
=avail_exprs_val.end
=loc 100029
=loc_expr
140717 : input.dst.llvm-%retval.0.phi.tmpvar.if.then.Lreturn%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
2 : input.dst.llvm-%x : BV:32
3 : bvadd(1, 2) : BV:32
=avail_exprs_val.end
=loc 100030
=loc_expr
140719 : input.dst.llvm-%sub.Lreturn%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
2 : input.dst.llvm-%x : BV:32
3 : bvadd(1, 2) : BV:32
=avail_exprs_val.end
=loc 100031
=loc_expr
140720 : input.dst.local_alloc_count.Lentry%2%d : COUNT
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.end
=loc 100032
=loc_expr
140721 : input.dst.cur_rounding_mode.Lentry%2%d : ROUNDING_MODE
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=avail_exprs_val.end
=avail_exprs end
=sprel_map in dst.llvm.foo
=loc 100026 expr
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=loc 100026 spreled-expr
140267 : retaddr_const : BV:32
=loc 100031 expr
1 : input.dst.local_alloc_count.Lentry%2%d : COUNT
=loc 100031 spreled-expr
140456 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=loc 100032 expr
1 : input.dst.cur_rounding_mode.Lentry%2%d : ROUNDING_MODE
=loc 100032 spreled-expr
140455 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;foo}
=loc_id 100002 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100008 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100010 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100011 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100012 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100013 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100016 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100017 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100019 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100020 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100021 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100022 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100023 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100024 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100025 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100026 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100027 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100028 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100029 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100030 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100031 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100032 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 100026 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100031 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100032 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>Lentry%2%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lentry%2%d=>Lif.else%1%d
1 : input.dst.llvm-%cmp.Lentry%2%d : BOOL
2 : not(1) : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lentry%2%d=>Lif.then%1%d
1 : input.dst.llvm-%cmp.Lentry%2%d : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lif.else%1%d=>Lreturn%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lif.then%1%d=>Lreturn%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lreturn%1%bbentry=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>Lentry%2%d
=dst.local_alloc_count.Lentry%2%d
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=dst.cur_rounding_mode.Lentry%2%d
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.llvm-%cmp.Lentry%2%d
1 : input.dst.llvm-%x : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvslt(1, 2) : BOOL
=state_end
=graph_with_simplified_assets.simplified_to_state at Lentry%2%d=>Lif.else%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state at Lentry%2%d=>Lif.then%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state at Lif.else%1%d=>Lreturn%1%bbentry
=dst.llvm-%retval.0.Lreturn%1%bbentry
1 : 12 { 0xc +1.143e129 } : BV:32
2 : input.dst.llvm-%x : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%retval.0.phi.tmpvar.if.else.Lreturn%1%bbentry
1 : 12 { 0xc +1.143e129 } : BV:32
2 : input.dst.llvm-%x : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%add.Lreturn%1%bbentry
1 : 12 { 0xc +1.143e129 } : BV:32
2 : input.dst.llvm-%x : BV:32
3 : bvadd(1, 2) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lif.then%1%d=>Lreturn%1%bbentry
=dst.llvm-%retval.0.Lreturn%1%bbentry
1 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
2 : input.dst.llvm-%x : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%retval.0.phi.tmpvar.if.then.Lreturn%1%bbentry
1 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
2 : input.dst.llvm-%x : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%sub.Lreturn%1%bbentry
1 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
2 : input.dst.llvm-%x : BV:32
3 : bvadd(1, 2) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lreturn%1%bbentry=>E0%0%d
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%retval.0.Lreturn%1%bbentry : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lentry%2%d
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lentry%2%d done
=graph_with_simplified_assets.simplified_assumes at Lentry%2%d=>Lif.else%1%d
=graph_with_simplified_assets.simplified_assumes at Lentry%2%d=>Lif.else%1%d done
=graph_with_simplified_assets.simplified_assumes at Lentry%2%d=>Lif.then%1%d
=graph_with_simplified_assets.simplified_assumes at Lentry%2%d=>Lif.then%1%d done
=graph_with_simplified_assets.simplified_assumes at Lif.else%1%d=>Lreturn%1%bbentry
=graph_with_simplified_assets.simplified_assumes at Lif.else%1%d=>Lreturn%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lif.then%1%d=>Lreturn%1%bbentry
=graph_with_simplified_assets.simplified_assumes at Lif.then%1%d=>Lreturn%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lreturn%1%bbentry=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at Lreturn%1%bbentry=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
0
=String-contents:
=Nextpc-map:
=Nextpc-map done
=suffixpaths for dst.llvm.foo
=suffixpath_at_L0%0%d for dst.llvm.foo
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_Lentry%2%d for dst.llvm.foo
=suffixpath_at_Lentry%2%d.graph_edge_composition
(L0%0%d=>Lentry%2%d)
=suffixpath_at_Lif.else%1%d for dst.llvm.foo
=suffixpath_at_Lif.else%1%d.graph_edge_composition
((L0%0%d=>Lentry%2%d)*(Lentry%2%d=>Lif.else%1%d))
=suffixpath_at_Lif.then%1%d for dst.llvm.foo
=suffixpath_at_Lif.then%1%d.graph_edge_composition
((L0%0%d=>Lentry%2%d)*(Lentry%2%d=>Lif.then%1%d))
=suffixpath_at_Lreturn%1%bbentry for dst.llvm.foo
=suffixpath_at_Lreturn%1%bbentry.graph_edge_composition
(((L0%0%d=>Lentry%2%d)*((Lentry%2%d=>Lif.else%1%d)*(Lif.else%1%d=>Lreturn%1%bbentry)))+((L0%0%d=>Lentry%2%d)*((Lentry%2%d=>Lif.then%1%d)*(Lif.then%1%d=>Lreturn%1%bbentry))))
=suffixpath_at_E0%0%d for dst.llvm.foo
=suffixpath_at_E0%0%d.graph_edge_composition
((((L0%0%d=>Lentry%2%d)*((Lentry%2%d=>Lif.else%1%d)*(Lif.else%1%d=>Lreturn%1%bbentry)))+((L0%0%d=>Lentry%2%d)*((Lentry%2%d=>Lif.then%1%d)*(Lif.then%1%d=>Lreturn%1%bbentry))))*(Lreturn%1%bbentry=>E0%0%d))
=suffixpaths for dst.llvm.foo done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>Lentry%2%d
tfg.assumes_around_edge at L0%0%d=>Lentry%2%d done
tfg.assumes_around_edge at Lentry%2%d=>Lif.else%1%d
tfg.assumes_around_edge at Lentry%2%d=>Lif.else%1%d done
tfg.assumes_around_edge at Lentry%2%d=>Lif.then%1%d
tfg.assumes_around_edge at Lentry%2%d=>Lif.then%1%d done
tfg.assumes_around_edge at Lif.else%1%d=>Lreturn%1%bbentry
tfg.assumes_around_edge at Lif.else%1%d=>Lreturn%1%bbentry done
tfg.assumes_around_edge at Lif.then%1%d=>Lreturn%1%bbentry
tfg.assumes_around_edge at Lif.then%1%d=>Lreturn%1%bbentry done
tfg.assumes_around_edge at Lreturn%1%bbentry=>E0%0%d
tfg.assumes_around_edge at Lreturn%1%bbentry=>E0%0%d done
tfg.assumes_around_edge done
=TFGdone
=PC_to_linename:
=pc
Lentry%1%d
=linename
line 2
=pc
Lentry%2%d
=linename
line 2
=pc
Lif.else%1%d
=linename
line 5
=pc
Lif.else%2%d
=linename
line 5
=pc
Lif.then%1%d
=linename
line 3
=pc
Lif.then%2%d
=linename
line 3
=pc
Lreturn%1%d
=linename
line 6
=PC_to_linename done
=PC_to_column_name:
=pc
Lentry%1%d
=column_name
 at column 9
=pc
Lentry%2%d
=column_name
 at column 7
=pc
Lif.else%1%d
=column_name
 at column 14
=pc
Lif.else%2%d
=column_name
 at column 5
=pc
Lif.then%1%d
=column_name
 at column 14
=pc
Lif.then%2%d
=column_name
 at column 5
=pc
Lreturn%1%d
=column_name
 at column 1
=PC_to_column_name done
=PC_to_line_and_column:
=pc
Lentry%1%d
=line_and_column
(line 2 at column 9)
=pc
Lentry%2%d
=line_and_column
(line 2 at column 7)
=pc
Lif.else%1%d
=line_and_column
(line 5 at column 14)
=pc
Lif.else%2%d
=line_and_column
(line 5 at column 5)
=pc
Lif.then%1%d
=line_and_column
(line 3 at column 14)
=pc
Lif.then%2%d
=line_and_column
(line 3 at column 5)
=pc
Lreturn%1%d
=line_and_column
line 6
=PC_to_line_and_column done
=SourceToLLVMVarnames:
=SourceToLLVMVarnames done
=InputLLVMToSourceVarnames:
input.dst.llvm-%x : L0%0%d : x'
input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : L0%0%d : input.dst.local./*___y___foo__x__=L0%0%argnum0=/
input.dst.local_alloc_count.=L0%0%d= : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.llvm-%cmp : L0%0%d : (x' <_s 0)
input.dst.llvm-%sub : L0%0%d : ((-5) + x')
input.dst.llvm-%add : L0%0%d : (12 + x')
input.dst.llvm-%hidden-reg : L0%0%d : input.dst.llvm-%hidden-reg
input.dst.llvm-callee-save.0 : L0%0%d : input.dst.llvm-callee-save.0
input.dst.llvm-callee-save.1 : L0%0%d : input.dst.llvm-callee-save.1
input.dst.llvm-callee-save.2 : L0%0%d : input.dst.llvm-callee-save.2
input.dst.llvm-callee-save.3 : L0%0%d : input.dst.llvm-callee-save.3
input.dst.llvm-%retval.0.phi.tmpvar.if.then : L0%0%d : input.dst.llvm-%sub
input.dst.llvm-%retval.0.phi.tmpvar.if.else : L0%0%d : input.dst.llvm-%add
input.dst.llvm-%ret-reg : L0%0%d : input.dst.llvm-%retval.0
input.dst.llvm-indir_tgt : L0%0%d : return-address
input.dst.local_alloc_count : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.cur_rounding_mode : L0%0%d : ROUND_to_nearest_ties_to_even
input.dst.llvm-indir_tgt.E0%0%d : L0%0%d : return-address
input.dst.llvm-%cmp.Lentry%2%d : L0%0%d : (x' <_s 0)
input.dst.llvm-%add.Lreturn%1%bbentry : L0%0%d : (12 + x')
input.dst.llvm-%retval.0.phi.tmpvar.if.then.Lreturn%1%bbentry : L0%0%d : ((-5) + x')
input.dst.llvm-%ret-reg.E0%0%d : L0%0%d : input.dst.llvm-%retval.0.Lreturn%1%bbentry
input.dst.llvm-%retval.0.phi.tmpvar.if.else.Lreturn%1%bbentry : L0%0%d : (12 + x')
input.dst.llvm-%hidden-reg.E0%0%d : L0%0%d : bvxor(bvxor(bvxor(bvxor(input.dst.llvm-%hidden-reg, input.dst.llvm-callee-save.0), input.dst.llvm-callee-save.1), input.dst.llvm-callee-save.2), input.dst.llvm-callee-save.3)
input.dst.llvm-%sub.Lreturn%1%bbentry : L0%0%d : ((-5) + x')
input.dst.local_alloc_count.Lentry%2%d : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.cur_rounding_mode.Lentry%2%d : L0%0%d : ROUND_to_nearest_ties_to_even
=InputLLVMToSourceVarnames done
=PotentialSCEVRelations:
=dst.llvm-%sub
=dst.llvm-%sub loop pc: L0%0%d
=dst.llvm-%sub val_scevb
=dst.llvm-%sub val_scevb scev
=dst.llvm-%sub val_scevb scev loop: L0%0%d
=dst.llvm-%sub val_scevb scev scev_overflow_flag: 
=dst.llvm-%sub val_scevb scev scev_expr
1 : 11111111111111111111111111111011b
2 : input.dst.llvm-%x : BV32
3 : scev_op_add(1, 2) : loop L0%0%d : 
=dst.llvm-%sub val_scevb scev scev_expr done
=dst.llvm-%sub val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%sub val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%sub val_scevb signed lower bound: 32:4294967295
=dst.llvm-%sub val_scevb signed upper bound: 32:4294967295
=dst.llvm-%sub atuse_scevb
=dst.llvm-%sub atuse_scevb scev
=dst.llvm-%sub atuse_scevb scev loop: L0%0%d
=dst.llvm-%sub atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%sub atuse_scevb scev scev_expr
1 : 11111111111111111111111111111011b
2 : input.dst.llvm-%x : BV32
3 : scev_op_add(1, 2) : loop L0%0%d : 
=dst.llvm-%sub atuse_scevb scev scev_expr done
=dst.llvm-%sub atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%sub atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%sub atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%sub atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%sub atexit_scev nullptr
=dst.llvm-%retval.0
=dst.llvm-%retval.0 loop pc: L0%0%d
=dst.llvm-%retval.0 val_scevb
=dst.llvm-%retval.0 val_scevb scev
=dst.llvm-%retval.0 val_scevb scev loop: L0%0%d
=dst.llvm-%retval.0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%retval.0 val_scevb scev scev_expr
4 : input.dst.llvm-%retval.0 : BV32
=dst.llvm-%retval.0 val_scevb scev scev_expr done
=dst.llvm-%retval.0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%retval.0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%retval.0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%retval.0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%retval.0 atuse_scevb
=dst.llvm-%retval.0 atuse_scevb scev
=dst.llvm-%retval.0 atuse_scevb scev loop: L0%0%d
=dst.llvm-%retval.0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%retval.0 atuse_scevb scev scev_expr
4 : input.dst.llvm-%retval.0 : BV32
=dst.llvm-%retval.0 atuse_scevb scev scev_expr done
=dst.llvm-%retval.0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%retval.0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%retval.0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%retval.0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%retval.0 atexit_scev nullptr
=dst.llvm-%add
=dst.llvm-%add loop pc: L0%0%d
=dst.llvm-%add val_scevb
=dst.llvm-%add val_scevb scev
=dst.llvm-%add val_scevb scev loop: L0%0%d
=dst.llvm-%add val_scevb scev scev_overflow_flag: 
=dst.llvm-%add val_scevb scev scev_expr
5 : 00000000000000000000000000001100b
2 : input.dst.llvm-%x : BV32
6 : scev_op_add(5, 2) : loop L0%0%d : 
=dst.llvm-%add val_scevb scev scev_expr done
=dst.llvm-%add val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%add val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%add val_scevb signed lower bound: 32:4294967295
=dst.llvm-%add val_scevb signed upper bound: 32:4294967295
=dst.llvm-%add atuse_scevb
=dst.llvm-%add atuse_scevb scev
=dst.llvm-%add atuse_scevb scev loop: L0%0%d
=dst.llvm-%add atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%add atuse_scevb scev scev_expr
5 : 00000000000000000000000000001100b
2 : input.dst.llvm-%x : BV32
6 : scev_op_add(5, 2) : loop L0%0%d : 
=dst.llvm-%add atuse_scevb scev scev_expr done
=dst.llvm-%add atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%add atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%add atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%add atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%add atexit_scev nullptr
=PotentialSCEVRelations done
=ReachingDefinitionsForLocs:
=Reaching Definitions at L0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns done
=Reaching Definitions at Lentry%2%d
=reaching defns for expr 0
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-%cmp.Lentry%2%d : BOOL
=reaching defns for expr 4 edges
  L0%0%d=>Lentry%2%d
=reaching defns for expr 4 edges done
=reaching defns done
=Reaching Definitions at Lif.else%1%d
=reaching defns for expr 0
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-%cmp.Lentry%2%d : BOOL
=reaching defns for expr 4 edges
  L0%0%d=>Lentry%2%d
=reaching defns for expr 4 edges done
=reaching defns done
=Reaching Definitions at Lif.then%1%d
=reaching defns for expr 0
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-%cmp.Lentry%2%d : BOOL
=reaching defns for expr 4 edges
  L0%0%d=>Lentry%2%d
=reaching defns for expr 4 edges done
=reaching defns done
=Reaching Definitions at Lreturn%1%bbentry
=reaching defns for expr 0
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-%retval.0.phi.tmpvar.if.then.Lreturn%1%bbentry : BV:32
=reaching defns for expr 4 edges
  Lif.then%1%d=>Lreturn%1%bbentry
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-%add.Lreturn%1%bbentry : BV:32
=reaching defns for expr 5 edges
  Lif.else%1%d=>Lreturn%1%bbentry
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-%retval.0.phi.tmpvar.if.else.Lreturn%1%bbentry : BV:32
=reaching defns for expr 6 edges
  Lif.else%1%d=>Lreturn%1%bbentry
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-%cmp.Lentry%2%d : BOOL
=reaching defns for expr 7 edges
  L0%0%d=>Lentry%2%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%retval.0.Lreturn%1%bbentry : BV:32
=reaching defns for expr 8 edges
  Lif.else%1%d=>Lreturn%1%bbentry
  Lif.then%1%d=>Lreturn%1%bbentry
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%sub.Lreturn%1%bbentry : BV:32
=reaching defns for expr 9 edges
  Lif.then%1%d=>Lreturn%1%bbentry
=reaching defns for expr 9 edges done
=reaching defns done
=Reaching Definitions at E0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=reaching defns for expr 4 edges
  Lreturn%1%bbentry=>E0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-%retval.0.phi.tmpvar.if.then.Lreturn%1%bbentry : BV:32
=reaching defns for expr 5 edges
  Lif.then%1%d=>Lreturn%1%bbentry
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-%add.Lreturn%1%bbentry : BV:32
=reaching defns for expr 6 edges
  Lif.else%1%d=>Lreturn%1%bbentry
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-%retval.0.phi.tmpvar.if.else.Lreturn%1%bbentry : BV:32
=reaching defns for expr 7 edges
  Lif.else%1%d=>Lreturn%1%bbentry
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%cmp.Lentry%2%d : BOOL
=reaching defns for expr 8 edges
  L0%0%d=>Lentry%2%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=reaching defns for expr 9 edges
  Lreturn%1%bbentry=>E0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=reaching defns for expr 10 edges
  Lreturn%1%bbentry=>E0%0%d
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%retval.0.Lreturn%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lif.else%1%d=>Lreturn%1%bbentry
  Lif.then%1%d=>Lreturn%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%sub.Lreturn%1%bbentry : BV:32
=reaching defns for expr 12 edges
  Lif.then%1%d=>Lreturn%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns done
=ReachingDefinitionsForLocs done
=VarnameToLRStatus Begin:
=LR status for var input.dst.llvm-%x
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.local./*___y___foo__x__=L0%0%argnum0=/
lr_status_top
=LR status for var input.dst.local_alloc_count.=L0%0%d=
lr_status_top
=LR status for var input.dst.llvm-%hidden-reg
lr_status_top
=LR status for var input.dst.llvm-callee-save.0
lr_status_top
=LR status for var input.dst.llvm-callee-save.1
lr_status_top
=LR status for var input.dst.llvm-callee-save.2
lr_status_top
=LR status for var input.dst.llvm-callee-save.3
lr_status_top
=LR status for var input.dst.llvm-indir_tgt.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%cmp.Lentry%2%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%add.Lreturn%1%bbentry
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%retval.0.phi.tmpvar.if.then.Lreturn%1%bbentry
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%retval.0.Lreturn%1%bbentry
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%ret-reg.E0%0%d
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%retval.0.phi.tmpvar.if.else.Lreturn%1%bbentry
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%hidden-reg.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%sub.Lreturn%1%bbentry
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.local_alloc_count.Lentry%2%d
lr_status_linearly_related(; )
=LR status for var input.dst.cur_rounding_mode.Lentry%2%d
lr_status_linearly_related(; )
=VarnameToLRStatus End
=TFG_LLVM_done
=TFG_SSA_done
=eqcheck_info
=eqcheck
=proof_filename cond2.proof
=function_name foo
=asm_filename NONE
=fixed_reg_mappings begin
0 : 0 : 0
0 : 4 : 4
=fixed_reg_mappings end
=rodata_map begin
=rodata_map end
=dst_iseq
=dst_iseq done
=dst_insn_pcs
=dst_insn_pcs done
=xml_output_format text-color
=use_only_relocatable_memlabels 0
=run_safety_check 0
=debug_header_pc_lsprels
=Local offsets from compile log
=Local offsets from compile log done
=done
=spec_iospecs
=SpecFuncIOSpecs
=FunctionName: foo
=EntryPreconds
=pred 0
=Comment
equal-arg0
=LhsExpr
1 : $spec-arg-0 : BV:32
2 : $llvm-arg-0 : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=EntryPreconds done
=ExitAsserts
=pred 0
=Comment
equal-ret
=LhsExpr
1 : $spec-ret : BV:32
2 : $llvm-ret : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=ExitAsserts done
=SpecFuncIOSpecs done
=eqcheck done
=graph_with_guessing
=Nodes: L0%0%d_L0%0%d E0%0%d_E0%0%d
=Edges:
L0%0%d_L0%0%d => E0%0%d_E0%0%d
=graph done
=is_ssa_graph:
0
=StartState:
=state_end
=graph_with_var_versions done
=FunctionName: foo
=Input: tfg-method-arg.0
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%x : BV:32
=arg end
=Node outputs: E0%0%d_E0%0%d
=Node outputs done for E0%0%d_E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : foo : 9 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%x : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
=Edge: L0%0%d_L0%0%d => E0%0%d_E0%0%d
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L0%0%d to E0%0%d at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
((L0%0%d#{0,0}=>L2%13%d#{0,0})*((((L2%13%d#{0,0}=>L2%14%bbentry#{0,0})*((L2%14%bbentry#{0,0}=>L2%17%d#{0,0})*((((L2%17%d#{0,0}=>L2%18%bbentry#{0,0})*(L2%18%bbentry#{0,0}=>L2%23%bbentry#{0,0}))+((L2%17%d#{0,0}=>L2%21%bbentry#{0,0})*(L2%21%bbentry#{0,0}=>L2%23%bbentry#{0,0})))*(L2%23%bbentry#{0,0}=>L2%32%bbentry#{0,0}))))+((L2%13%d#{0,0}=>L2%15%bbentry#{0,0})*((L2%15%bbentry#{0,0}=>L2%25%d#{0,0})*((((L2%25%d#{0,0}=>L2%26%bbentry#{0,0})*(L2%26%bbentry#{0,0}=>L2%31%bbentry#{0,0}))+((L2%25%d#{0,0}=>L2%29%bbentry#{0,0})*(L2%29%bbentry#{0,0}=>L2%31%bbentry#{0,0})))*(L2%31%bbentry#{0,0}=>L2%32%bbentry#{0,0})))))*(L2%32%bbentry#{0,0}=>E0%0%d#{0,0})))
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from L0%0%d to E0%0%d at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((L0%0%d#{0,0}=>Lentry%2%d#{0,0})*((((Lentry%2%d#{0,0}=>Lif.else%1%d#{0,0})*(Lif.else%1%d#{0,0}=>Lreturn%1%bbentry#{0,0}))+((Lentry%2%d#{0,0}=>Lif.then%1%d#{0,0})*(Lif.then%1%d#{0,0}=>Lreturn%1%bbentry#{0,0})))*(Lreturn%1%bbentry#{0,0}=>E0%0%d#{0,0})))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
equal-arg0
=LhsExpr
1 : input.spec-%var-x-0 : BV:32
2 : input.dst.llvm-%x : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.1
=Comment
precond-mlasserts
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : bvand(10, 11) : BV:32
13 : 0 { 0x0 +1.0e129 } : BV:32
14 : eq(12, 13) : BOOL
15 : and(9, 14) : BOOL
16 : eq(10, 1) : BOOL
17 : and(15, 16) : BOOL
18 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
21 : region_agrees_with_memlabel(18, 13, 19, 20) : BOOL
22 : and(17, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.2
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%x : BV:32
=predicate done
=graph_with_precondition_done

=Locs in foo.A1
=Locs end
=Liveness in foo.A1
=live locs at L0%0%d_L0%0%d

=live locs at E0%0%d_E0%0%d


=Definedness in foo.A1

=Branch affecting variable locs in foo.A1

=Relevant Memlabels in foo.A1
=relevant memlabels
=function: foo
memlabel-mem--arg.0
memlabel-mem-may-straddle-symbol.1-heap
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
=graph_with_ml_contiguity_info non-vacuous mls
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in foo.A1
=avail_exprs begin
=avail_exprs end
=sprel_map in foo.A1
=sprel_map done
=lr-status-map
=lr-status-map done
=lr-status-for-sprel-locs-map
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=global counterexamples for reason inductive-invariants
=global nodece 0
=global nodece 0 nodece z3.ce3.num_edges_traversed0
=global nodece 0 nodece_path
=global nodece 0 nodece_path.graph_edge_composition
(epsilon)
=global nodece 0 nodece_cached_counterexample
=counter_example_begin z3.ce3 b2eb96ddc7a88856e7c9abd9e5a5c839
=input.spec-%var-x-0
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%tmpvar-11.L2%17%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L2%13%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-t1-0.L2%13%d
1 : Lambda91 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2 { 0x2 +1.23e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda92 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 2) : BOOL
20 : and(18, 19) : BOOL
21 : bvule(4, 17) : BOOL
22 : bvule(17, 4) : BOOL
23 : and(21, 22) : BOOL
24 : 17 { 0x11 +1.202e129 } : BV:32
25 : bvule(8, 17) : BOOL
26 : bvule(17, 10) : BOOL
27 : and(25, 26) : BOOL
28 : 6 { 0x6 +1.71e129 } : BV:32
29 : ite(27, 28, 28) : BV:32
30 : ite(23, 24, 29) : BV:32
31 : ite(20, 2, 30) : BV:32
32 : lambda(17, 31) : FUNCTION[BV:32 -> BV:32]
33 : map(16, 32) : MAP[BV:32 -> BV:32]
34 : sym_const(33) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-15.L2%25%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-5.L2%13%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-0.L2%13%d
1 : Lambda95 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda96 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-2.L2%13%d
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%tmpvar-3.L2%13%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-4.L2%13%d
1 : Lambda99 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda100 : BV:32
17 : bvule(2, 16) : BOOL
18 : bvule(16, 2) : BOOL
19 : and(17, 18) : BOOL
20 : bvule(7, 16) : BOOL
21 : bvule(16, 9) : BOOL
22 : and(20, 21) : BOOL
23 : 7 { 0x7 +1.83e129 } : BV:32
24 : ite(22, 23, 23) : BV:32
25 : ite(19, 2, 24) : BV:32
26 : lambda(16, 25) : FUNCTION[BV:32 -> BV:32]
27 : map(15, 26) : MAP[BV:32 -> BV:32]
28 : sym_const(27) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L2%13%d
1 : 0 { 0x0 } : BOOL
=input.spec-%tmpvar-12.L2%17%d
1 : 32768 { 0x8000 +1.390625e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%tmpvar-8.L2%13%d
1 : Lambda103 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2 { 0x2 +1.23e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda104 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 2) : BOOL
20 : and(18, 19) : BOOL
21 : bvule(4, 17) : BOOL
22 : bvule(17, 4) : BOOL
23 : and(21, 22) : BOOL
24 : 17 { 0x11 +1.202e129 } : BV:32
25 : bvule(8, 17) : BOOL
26 : bvule(17, 10) : BOOL
27 : and(25, 26) : BOOL
28 : 8 { 0x8 +1.95e129 } : BV:32
29 : ite(27, 28, 28) : BV:32
30 : ite(23, 24, 29) : BV:32
31 : ite(20, 2, 30) : BV:32
32 : lambda(17, 31) : FUNCTION[BV:32 -> BV:32]
33 : map(16, 32) : MAP[BV:32 -> BV:32]
34 : sym_const(33) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L2%13%d
1 : 17 { 0x11 +1.202e129 } : BV:32
=input.spec-%tmpvar-16.L2%25%d
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
2 : unit : UNIT
3 : 17 { 0x11 +1.202e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%tmpvar-6.L2%13%d
1 : 12 { 0xc +1.143e129 } : BV:32
=input.spec-%tmpvar-9.L2%13%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-13.L2%23%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-y-0.L2%23%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-17.L2%31%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4146626899 ] -> 0, [ 4146626900; 4146626900 ] -> 5, [ 4146626901; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 4146626899 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4146626900; 4146626903 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4146626904; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4146626900 { 0xf7288154 -148340396 -1.31644678e111 } : BV:32
=input.spec-%var-y-1.L2%31%bbentry
1 : 17 { 0x11 +1.202e129 } : BV:32
=input.spec-%var-t1-0.L2%13%d.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-12.L2%17%d.0
1 : 32768 { 0x8000 +1.390625e129 } : BV:32
=input.spec-%var-t1-0.L2%13%d.1.1
1 : ([ 0; 0 ] -> 0, [ 1; 1 ] -> 17, [ 2; 4294967295 ] -> 6, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-12.L2%17%d.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L2%25%d.0
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
=input.spec-%tmpvar-16.L2%25%d.2
1 : 17 { 0x11 +1.202e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4146626900 { 0xf7288154 -148340396 -1.31644678e111 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 4146626903 { 0xf7288157 -148340393 -1.31644713e111 } : BV:32
=input.spec-%tmpvar-0.L2%13%d.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-0.L2%13%d.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-4.L2%13%d.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-4.L2%13%d.1.1
1 : ([ 0; 0 ] -> 0, [ 1; 4294967295 ] -> 7, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-8.L2%13%d.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-8.L2%13%d.1.1
1 : ([ 0; 0 ] -> 0, [ 1; 1 ] -> 17, [ 2; 4294967295 ] -> 8, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
3384839195
=counter_example_end
=global nodece 0 num_edges_traversed 0
=global nodece 0 nodece_visted_pcs: 
L0%0%d_L0%0%d
=global nodece 1
=global nodece 1 nodece z3v487.ce4.num_edges_traversed0
=global nodece 1 nodece_path
=global nodece 1 nodece_path.graph_edge_composition
(epsilon)
=global nodece 1 nodece_cached_counterexample
=counter_example_begin z3v487.ce4 7bd01d2863b9744517e0e89eb8ec75a
=input.spec-%var-x-0
1 : 32 { 0x20 +1.381e129 } : BV:32
=input.spec-%tmpvar-11.L2%17%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L2%13%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-t1-0.L2%13%d
1 : Lambda115 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2 { 0x2 +1.23e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda116 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 2) : BOOL
20 : and(18, 19) : BOOL
21 : 27 { 0x1b +1.321e129 } : BV:32
22 : bvule(4, 17) : BOOL
23 : bvule(17, 4) : BOOL
24 : and(22, 23) : BOOL
25 : 44 { 0x2c +1.524e129 } : BV:32
26 : bvule(8, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : 6 { 0x6 +1.71e129 } : BV:32
30 : ite(28, 29, 29) : BV:32
31 : ite(24, 25, 30) : BV:32
32 : ite(20, 21, 31) : BV:32
33 : lambda(17, 32) : FUNCTION[BV:32 -> BV:32]
34 : map(16, 33) : MAP[BV:32 -> BV:32]
35 : sym_const(34) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-15.L2%25%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-5.L2%13%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-0.L2%13%d
1 : Lambda119 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda120 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-2.L2%13%d
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%tmpvar-3.L2%13%d
1 : 27 { 0x1b +1.321e129 } : BV:32
=input.spec-%tmpvar-4.L2%13%d
1 : Lambda123 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda124 : BV:32
17 : bvule(2, 16) : BOOL
18 : bvule(16, 2) : BOOL
19 : and(17, 18) : BOOL
20 : 27 { 0x1b +1.321e129 } : BV:32
21 : bvule(7, 16) : BOOL
22 : bvule(16, 9) : BOOL
23 : and(21, 22) : BOOL
24 : 7 { 0x7 +1.83e129 } : BV:32
25 : ite(23, 24, 24) : BV:32
26 : ite(19, 20, 25) : BV:32
27 : lambda(16, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(15, 27) : MAP[BV:32 -> BV:32]
29 : sym_const(28) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L2%13%d
1 : 0 { 0x0 } : BOOL
=input.spec-%tmpvar-12.L2%17%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : 27 { 0x1b +1.321e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%tmpvar-8.L2%13%d
1 : Lambda127 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2 { 0x2 +1.23e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda128 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 2) : BOOL
20 : and(18, 19) : BOOL
21 : 27 { 0x1b +1.321e129 } : BV:32
22 : bvule(4, 17) : BOOL
23 : bvule(17, 4) : BOOL
24 : and(22, 23) : BOOL
25 : 44 { 0x2c +1.524e129 } : BV:32
26 : bvule(8, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : 8 { 0x8 +1.95e129 } : BV:32
30 : ite(28, 29, 29) : BV:32
31 : ite(24, 25, 30) : BV:32
32 : ite(20, 21, 31) : BV:32
33 : lambda(17, 32) : FUNCTION[BV:32 -> BV:32]
34 : map(16, 33) : MAP[BV:32 -> BV:32]
35 : sym_const(34) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L2%13%d
1 : 44 { 0x2c +1.524e129 } : BV:32
=input.spec-%tmpvar-16.L2%25%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : 44 { 0x2c +1.524e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%tmpvar-6.L2%13%d
1 : 12 { 0xc +1.143e129 } : BV:32
=input.spec-%tmpvar-9.L2%13%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-13.L2%23%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-y-0.L2%23%bbentry
1 : 27 { 0x1b +1.321e129 } : BV:32
=input.spec-%tmpvar-17.L2%31%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 32 { 0x20 +1.381e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1006632963 ] -> 0, [ 1006632964; 1006632964 ] -> 32, [ 1006632965; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1006632963 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1006632964; 1006632967 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1006632968; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1006632964 { 0x3c000004 +1.47e249 } : BV:32
=input.spec-%var-y-1.L2%31%bbentry
1 : 44 { 0x2c +1.524e129 } : BV:32
=input.spec-%var-t1-0.L2%13%d.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-12.L2%17%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-t1-0.L2%13%d.1.1
1 : ([ 0; 0 ] -> 27, [ 1; 1 ] -> 44, [ 2; 4294967295 ] -> 6, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-12.L2%17%d.2
1 : 27 { 0x1b +1.321e129 } : BV:32
=input.spec-%tmpvar-16.L2%25%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-16.L2%25%d.2
1 : 44 { 0x2c +1.524e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1006632964 { 0x3c000004 +1.47e249 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1006632967 { 0x3c000007 +1.83e249 } : BV:32
=input.spec-%tmpvar-0.L2%13%d.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-0.L2%13%d.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-4.L2%13%d.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-4.L2%13%d.1.1
1 : ([ 0; 0 ] -> 27, [ 1; 4294967295 ] -> 7, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-8.L2%13%d.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-8.L2%13%d.1.1
1 : ([ 0; 0 ] -> 27, [ 1; 1 ] -> 44, [ 2; 4294967295 ] -> 8, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
482446137
=counter_example_end
=global nodece 1 num_edges_traversed 0
=global nodece 1 nodece_visted_pcs: 
L0%0%d_L0%0%d
=graph_with_ce done
=point_set for reason inductive-invariants
=inductive-invariants point_set global exprs map
=inductive-invariants point_set global exprs map done
=inductive-invariants point_set points
=inductive-invariants point_set points done
=out-of-bound-exprs for reason inductive-invariants
=out-of-bound-exprs for reason inductive-invariants at L0%0%d_L0%0%d

=out-of-bound-exprs for reason inductive-invariants at E0%0%d_E0%0%d

=graph_with_points done
=Invariant state at node L0%0%d_L0%0%d for reason inductive-invariants
=pc L0%0%d_L0%0%d inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond.description

=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond.expr is null
=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond done
=pc L0%0%d_L0%0%d inductive-invariants invariant_state done
=Invariant state at node E0%0%d_E0%0%d for reason inductive-invariants
=pc E0%0%d_E0%0%d inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond.description

=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond.expr is null
=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond done
=pc E0%0%d_E0%0%d inductive-invariants invariant_state done
=invariant_state_changed_at_pcs for reason inductive-invariants:
=graph_with_guessing done
=graph_with_correctness_covers begin
=graph_with_correctness_covers done
=m_dst_fcall_edges_already_updated_from_pcs:
=m_internal_pcs:
=m_super_edges:
=AllocaPCLocalSprelAssumptionsBegin:
=Local offsets from compile log
=Local offsets from compile log done
=done
=AllocaPCLocalSprelAssumptionsEnd
=DeallocaPCLocalSprelAssumptionsBegin:
=Local offsets from compile log
=Local offsets from compile log done
=done
=DeallocaPCLocalSprelAssumptionsEnd
=src_tfg pcs reaching pcpair L0%0%d_L0%0%d
=src_tfg pc: L0%0%d
=exit_pc_asserts at E0%0%d_E0%0%d
=exit_pc_assert.0 at E0%0%d_E0%0%d
=Comment
equal-ret
=LhsExpr
1 : input.spec-%tmpvar-21.E0%0%d : BV:32
2 : input.dst.llvm-%retval.0.Lreturn%1%bbentry : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge well-formedness condition
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond cg_path
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond src_path
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond dst_path
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond pred.0
=Comment
wfcond.from_pcL0%0%d_L0%0%d.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : input.dst.llvm-%x : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvslt(1, 2) : BOOL
4 : not(3) : BOOL
5 : or(3, 4) : BOOL
6 : not(5) : BOOL
7 : input.spec-%var-x-0 : BV:32
8 : bvslt(7, 2) : BOOL
9 : not(8) : BOOL
10 : 1 { 0x1 } : BOOL
11 : and(10, 8) : BOOL
12 : or(9, 11) : BOOL
13 : or(6, 12) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond cg_path
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond cg_path.graph_edge_composition
(L0%0%d_L0%0%d=>E0%0%d_E0%0%d)
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond src_path
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond dst_path
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond pred.0
=Comment
equal-ret
=LhsExpr
1 : input.spec-%tmpvar-21.E0%0%d : BV:32
2 : input.dst.llvm-%retval.0.Lreturn%1%bbentry : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge well-formedness condition done
=Ranking exprs done
=dst-to-src submaps done
=cg-edge-contains-repeated-src-tfg-edge at edge-id L0%0%d_L0%0%d=>E0%0%d_E0%0%d
0
=cg-edge-contains-repeated-src-tfg-edge-map done
=cg.assumes_around_edge
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #0
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #0.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #0.pred
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
140449 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140450 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140580 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
140451 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
140581 : 4 { 0x4 +1.0e1025 } : INT
140331 : 0 { 0x0 } : BOOL
140582 : select(140449, 140450, 140580, 140451, 140581, 140331) : BV:32
=RhsExpr
140448 : input.dst.llvm-%x : BV:32
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #1
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #1.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #1.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #1.pred
=Comment
equal-arg0
=LhsExpr
140273 : input.spec-%var-x-0 : BV:32
140448 : input.dst.llvm-%x : BV:32
140751 : eq(140273, 140448) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #2
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #2.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #2.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #2.pred
=Comment
precond-mlasserts
=LhsExpr
140736 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
140737 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
140738 : bvule(140736, 140737) : BOOL
140722 : 4 { 0x4 +1.47e129 } : BV:32
140506 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
140739 : bvadd(140722, 140506) : BV:32
140740 : bvadd(140736, 140739) : BV:32
140741 : eq(140737, 140740) : BOOL
140742 : and(140738, 140741) : BOOL
140451 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
140743 : 3 { 0x3 +1.35e129 } : BV:32
140744 : bvand(140451, 140743) : BV:32
140278 : 0 { 0x0 +1.0e129 } : BV:32
140745 : eq(140744, 140278) : BOOL
140746 : and(140742, 140745) : BOOL
140747 : eq(140451, 140736) : BOOL
140748 : and(140746, 140747) : BOOL
140450 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140286 : 1 { 0x1 +1.11e129 } : BV:32
140452 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
140749 : region_agrees_with_memlabel(140450, 140278, 140286, 140452) : BOOL
140750 : and(140748, 140749) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d done
cg.assumes_around_edge done
=corr_graph_done
=bv_rank_map
=bv_rank at L0%0%d_L0%0%d
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=bv_rank at E0%0%d_E0%0%d
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=cg_with_rank done
=cg_with_backtracker done
=asm filename

=cg_with_asm_annotation done
