=FunctionName: foo
=result: 1
=cg_with_asm_annotation
=cg_with_backtracker
=cg_with_rank
=corr_graph foo.A2.B2.C1
=src_tfg
=TFG_SSA:
=TFG_SPEC src.spec.foo:
=TFG:
=Nodes: L0%0%d L3%6%bbentry L3%7%d L3%8%bbentry L3%9%bbentry E0%0%d
=Edges:
L0%0%d => L3%6%bbentry
L3%6%bbentry => L3%7%d
L3%7%d => L3%9%bbentry
L3%7%d => L3%8%bbentry
L3%8%bbentry => E0%0%d
L3%9%bbentry => L3%6%bbentry (backedge) 
=graph done
=is_ssa_graph:
1
=StartState:
=spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=state_end
=PC to var-version map at L0%0%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%6%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%7%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%8%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%9%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at E0%0%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=graph_with_var_versions done
=FunctionName: foo
=Input: tfg-method-arg.0
=arg addr
1 : (undefined) : UNDEFINED
=arg val
1 : input.spec-%var-n-1 : BV:32
=arg end
=Node outputs: E0%0%d
=Output: spec-%ret-reg
1 : input.spec-%tmpvar-10.E0%0%d : MAP[BV:32 -> BV:32]
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
=Touched symbols:
=Symbol-map done
=Locals-map:
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;foo}
=memlabel_map.0 for call-context {*;foo}
mlheap.src.spec.foo : memlabel-mem--heap
=Edge: L0%0%d => L3%6%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%var-m-0.L3%6%bbentry
1 : SORT2EXPR.VAR : MAP[BV:32 -> BV:32]
2 : map_init(1) : MAP[BV:32 -> BV:32]
=spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-8.L3%6%bbentry
1 : SORT2EXPR.VAR : MAP[BV:32 -> BV:32]
2 : map_init(1) : MAP[BV:32 -> BV:32]
=spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-n-0.L3%6%bbentry
1 : input.spec-%var-n-1 : BV:32
=src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((((func_head*ctor_bv)*ctor_map)*(inline_entry*func_head))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=Edge: L3%6%bbentry => L3%7%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-0.L3%7%d
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
2 : input.spec-%var-n-0.L3%6%bbentry : BV:32
3 : bvuge(1, 2) : BOOL
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*intrinsic_app_bvuge)
tfg_edge_comment end

=Edge: L3%7%d => L3%9%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-0.L3%7%d : BOOL
2 : not(1) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:5:ite_false_split
tfg_edge_comment end

=Edge: L3%7%d => L3%8%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-0.L3%7%d : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:5:ite_true_split
tfg_edge_comment end

=Edge: L3%8%bbentry => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-10.E0%0%d
1 : input.spec-%var-m-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
=spec-%tmpvar-5.E0%0%d
1 : input.spec-%var-m-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
=spec-%tmpvar-6.E0%0%d
1 : input.spec-%var-m-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
=spec-%tmpvar-9.E0%0%d
1 : input.spec-%var-m-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(((bb_entry*ite_true_merge)*func_ret)*(inline_exit*func_ret))
tfg_edge_comment end

=Edge: L3%9%bbentry => L3%6%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%var-m-0.L3%6%bbentry
1 : input.spec-%var-m-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : input.spec-%var-i-0.L3%6%bbentry : BV:32
3 : map_set(1, 2, 2) : MAP[BV:32 -> BV:32]
=spec-%var-i-0.L3%6%bbentry
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%var-n-0.L3%6%bbentry
1 : input.spec-%var-n-0.L3%6%bbentry : BV:32
=src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : input.src.spec-ghostvar.itervar.1.L3%6%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%tmpvar-2.L3%6%bbentry
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-3.L3%6%bbentry
1 : input.spec-%var-m-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : input.spec-%var-i-0.L3%6%bbentry : BV:32
3 : map_set(1, 2, 2) : MAP[BV:32 -> BV:32]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((((bb_entry*ctor_bv)*intrinsic_app_bvadd)*(intrinsic_app_map_set*tailrec_backedge))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=graph_with_precondition_done

=Locs in src.spec.foo
=Loc 1 in src.spec.foo.
REGMEM
spec-%var-n-1
1 : input.spec-%var-n-1 : BV:32
=Loc 16 in src.spec.foo.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--heap
=Loc 17 in src.spec.foo.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 18 in src.spec.foo.
REGMEM
spec-%tmpvar-0.L3%7%d
1 : input.spec-%tmpvar-0.L3%7%d : BOOL
=Loc 19 in src.spec.foo.
REGMEM
spec-%var-i-0.L3%6%bbentry
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
=Loc 20 in src.spec.foo.
REGMEM
spec-%var-n-0.L3%6%bbentry
1 : input.spec-%var-n-0.L3%6%bbentry : BV:32
=Loc 21 in src.spec.foo.
REGMEM
spec-%tmpvar-10.E0%0%d
1 : input.spec-%tmpvar-10.E0%0%d : MAP[BV:32 -> BV:32]
=Loc 22 in src.spec.foo.
REGMEM
spec-%tmpvar-5.E0%0%d
1 : input.spec-%tmpvar-5.E0%0%d : MAP[BV:32 -> BV:32]
=Loc 23 in src.spec.foo.
REGMEM
spec-%tmpvar-6.E0%0%d
1 : input.spec-%tmpvar-6.E0%0%d : MAP[BV:32 -> BV:32]
=Loc 24 in src.spec.foo.
REGMEM
spec-%tmpvar-9.E0%0%d
1 : input.spec-%tmpvar-9.E0%0%d : MAP[BV:32 -> BV:32]
=Loc 25 in src.spec.foo.
REGMEM
spec-%var-m-0.L3%6%bbentry
1 : input.spec-%var-m-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
=Loc 26 in src.spec.foo.
REGMEM
spec-%tmpvar-7.L3%6%bbentry
1 : input.spec-%tmpvar-7.L3%6%bbentry : BV:32
=Loc 27 in src.spec.foo.
REGMEM
spec-%tmpvar-8.L3%6%bbentry
1 : input.spec-%tmpvar-8.L3%6%bbentry : MAP[BV:32 -> BV:32]
=Loc 28 in src.spec.foo.
REGMEM
src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : input.src.spec-ghostvar.itervar.1.L3%6%bbentry : BV:32
=Loc 29 in src.spec.foo.
REGMEM
spec-%tmpvar-1.L3%6%bbentry
1 : input.spec-%tmpvar-1.L3%6%bbentry : BV:32
=Loc 30 in src.spec.foo.
REGMEM
spec-%tmpvar-2.L3%6%bbentry
1 : input.spec-%tmpvar-2.L3%6%bbentry : BV:32
=Loc 31 in src.spec.foo.
REGMEM
spec-%tmpvar-3.L3%6%bbentry
1 : input.spec-%tmpvar-3.L3%6%bbentry : MAP[BV:32 -> BV:32]
=Locs end
=Liveness in src.spec.foo
=live locs at L0%0%d
1, 
=live locs at L3%6%bbentry
19, 20, 25, 
=live locs at L3%7%d
18, 19, 20, 25, 
=live locs at L3%8%bbentry
25, 
=live locs at L3%9%bbentry
19, 20, 25, 
=live locs at E0%0%d
21, 

=Definedness in src.spec.foo
=loc definedness at L0%0%d
1, 16, 17
=loc definedness at L3%6%bbentry
1, 16, 17, 19, 20, 25, 26, 27, 28
=loc definedness at L3%7%d
1, 16, 17, 18, 19, 20, 25, 26, 27, 28
=loc definedness at L3%8%bbentry
1, 16, 17, 18, 19, 20, 25, 26, 27, 28
=loc definedness at L3%9%bbentry
1, 16, 17, 18, 19, 20, 25, 26, 27, 28
=loc definedness at E0%0%d
1, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28

=Branch affecting variable locs in src.spec.foo
=branch affecting variable locs at L0%0%d
1
=branch affecting variable locs at L3%6%bbentry
19, 20
=branch affecting variable locs at L3%7%d
18, 19, 20
=branch affecting variable locs at L3%8%bbentry

=branch affecting variable locs at L3%9%bbentry
19, 20
=branch affecting variable locs at E0%0%d


=Relevant Memlabels in src.spec.foo
=relevant memlabels
=function: foo
memlabel-mem--heap
memlabel-mem--arg.0
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%6%bbentry
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%6%bbentry for loc_id 19 {input.spec-%var-i-0.L3%6%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%6%bbentry for loc_id 20 {input.spec-%var-n-0.L3%6%bbentry }
1 : input.spec-%var-n-1 : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%6%bbentry for loc_id 25 {input.spec-%var-m-0.L3%6%bbentry }
1 : Lambda18 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda19 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%6%bbentry for loc_id 26 {input.spec-%tmpvar-7.L3%6%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%6%bbentry for loc_id 27 {input.spec-%tmpvar-8.L3%6%bbentry }
1 : Lambda18 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda19 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%6%bbentry for loc_id 28 {input.src.spec-ghostvar.itervar.1.L3%6%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%6%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%6%bbentry=>L3%7%d
=graph_with_edge_structures.loc_to_expr_map at L3%6%bbentry=>L3%7%d for loc_id 18 {input.spec-%tmpvar-0.L3%7%d }
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
2 : input.spec-%var-n-0.L3%6%bbentry : BV:32
3 : bvuge(1, 2) : BOOL
=graph_with_edge_structures.loc_to_expr_map at L3%6%bbentry=>L3%7%d done
=graph_with_edge_structures.loc_to_expr_map at L3%7%d=>L3%8%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%7%d=>L3%8%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%7%d=>L3%9%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%7%d=>L3%9%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%8%bbentry=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at L3%8%bbentry=>E0%0%d for loc_id 21 {input.spec-%tmpvar-10.E0%0%d }
1 : input.spec-%var-m-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
=graph_with_edge_structures.loc_to_expr_map at L3%8%bbentry=>E0%0%d for loc_id 22 {input.spec-%tmpvar-5.E0%0%d }
1 : input.spec-%var-m-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
=graph_with_edge_structures.loc_to_expr_map at L3%8%bbentry=>E0%0%d for loc_id 23 {input.spec-%tmpvar-6.E0%0%d }
1 : input.spec-%var-m-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
=graph_with_edge_structures.loc_to_expr_map at L3%8%bbentry=>E0%0%d for loc_id 24 {input.spec-%tmpvar-9.E0%0%d }
1 : input.spec-%var-m-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
=graph_with_edge_structures.loc_to_expr_map at L3%8%bbentry=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map at L3%9%bbentry=>L3%6%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%9%bbentry=>L3%6%bbentry for loc_id 19 {input.spec-%var-i-0.L3%6%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-i-0.L3%6%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%9%bbentry=>L3%6%bbentry for loc_id 25 {input.spec-%var-m-0.L3%6%bbentry }
1 : input.spec-%var-m-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : input.spec-%var-i-0.L3%6%bbentry : BV:32
3 : map_set(1, 2, 2) : MAP[BV:32 -> BV:32]
=graph_with_edge_structures.loc_to_expr_map at L3%9%bbentry=>L3%6%bbentry for loc_id 28 {input.src.spec-ghostvar.itervar.1.L3%6%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.spec-ghostvar.itervar.1.L3%6%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%9%bbentry=>L3%6%bbentry for loc_id 29 {input.spec-%tmpvar-1.L3%6%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%9%bbentry=>L3%6%bbentry for loc_id 30 {input.spec-%tmpvar-2.L3%6%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-i-0.L3%6%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%9%bbentry=>L3%6%bbentry for loc_id 31 {input.spec-%tmpvar-3.L3%6%bbentry }
1 : input.spec-%var-m-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : input.spec-%var-i-0.L3%6%bbentry : BV:32
3 : map_set(1, 2, 2) : MAP[BV:32 -> BV:32]
=graph_with_edge_structures.loc_to_expr_map at L3%9%bbentry=>L3%6%bbentry done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at L3%6%bbentry:
vacuous mls at L3%7%d:
vacuous mls at L3%8%bbentry:
vacuous mls at L3%9%bbentry:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at L3%6%bbentry:
non-vacuous mls at L3%7%d:
non-vacuous mls at L3%8%bbentry:
non-vacuous mls at L3%9%bbentry:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in src.spec.foo
=avail_exprs begin
=loc 1
=loc_expr
140273 : input.spec-%var-n-1 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 20
=loc_expr
140311 : input.spec-%var-n-0.L3%6%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-n-1 : BV:32
=avail_exprs_val.end
=loc 26
=loc_expr
140359 : input.spec-%tmpvar-7.L3%6%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 27
=loc_expr
140360 : input.spec-%tmpvar-8.L3%6%bbentry : MAP[BV:32 -> BV:32]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : Lambda18 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda19 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=avail_exprs_val.end
=loc 29
=loc_expr
140361 : input.spec-%tmpvar-1.L3%6%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 1 { 0x1 +1.11e129 } : BV:32
=avail_exprs_val.end
=avail_exprs end
=sprel_map in src.spec.foo
=loc 26 expr
1 : input.spec-%tmpvar-7.L3%6%bbentry : BV:32
=loc 26 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 27 expr
1 : input.spec-%tmpvar-8.L3%6%bbentry : MAP[BV:32 -> BV:32]
=loc 27 spreled-expr
140376 : Lambda18 : BV:32
140303 : 0 { 0x0 } : BOOL
140379 : lambda(140376, 140303) : FUNCTION[BV:32 -> BOOL]
140448 : Lambda19 : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
140449 : lambda(140448, 140276) : FUNCTION[BV:32 -> BV:32]
140450 : map(140379, 140449) : MAP[BV:32 -> BV:32]
140459 : sym_const(140450) : MAP[BV:32 -> BV:32]
=loc 29 expr
1 : input.spec-%tmpvar-1.L3%6%bbentry : BV:32
=loc 29 spreled-expr
140286 : 1 { 0x1 +1.11e129 } : BV:32
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;foo}
=loc_id 1 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 16 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 17 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 18 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 19 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 20 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 21 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 22 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 23 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 24 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 25 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 26 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 27 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 28 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 29 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 30 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 31 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 26 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 27 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 29 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>L3%6%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%6%bbentry=>L3%7%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%7%d=>L3%8%bbentry
1 : input.spec-%tmpvar-0.L3%7%d : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%7%d=>L3%9%bbentry
1 : input.spec-%tmpvar-0.L3%7%d : BOOL
2 : not(1) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%8%bbentry=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%9%bbentry=>L3%6%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>L3%6%bbentry
=spec-%var-m-0.L3%6%bbentry
1 : Lambda18 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda19 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-8.L3%6%bbentry
1 : Lambda18 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda19 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-n-0.L3%6%bbentry
1 : input.spec-%var-n-1 : BV:32
=src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%6%bbentry=>L3%7%d
=spec-%tmpvar-0.L3%7%d
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
2 : input.spec-%var-n-0.L3%6%bbentry : BV:32
3 : bvuge(1, 2) : BOOL
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%7%d=>L3%8%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%7%d=>L3%9%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%8%bbentry=>E0%0%d
=spec-%tmpvar-10.E0%0%d
1 : input.spec-%var-m-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
=spec-%tmpvar-5.E0%0%d
1 : input.spec-%var-m-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
=spec-%tmpvar-6.E0%0%d
1 : input.spec-%var-m-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
=spec-%tmpvar-9.E0%0%d
1 : input.spec-%var-m-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%9%bbentry=>L3%6%bbentry
=spec-%var-m-0.L3%6%bbentry
1 : input.spec-%var-m-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : input.spec-%var-i-0.L3%6%bbentry : BV:32
3 : map_set(1, 2, 2) : MAP[BV:32 -> BV:32]
=spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-i-0.L3%6%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.spec-ghostvar.itervar.1.L3%6%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%tmpvar-2.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-i-0.L3%6%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-3.L3%6%bbentry
1 : input.spec-%var-m-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : input.spec-%var-i-0.L3%6%bbentry : BV:32
3 : map_set(1, 2, 2) : MAP[BV:32 -> BV:32]
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>L3%6%bbentry
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>L3%6%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%6%bbentry=>L3%7%d
=graph_with_simplified_assets.simplified_assumes at L3%6%bbentry=>L3%7%d done
=graph_with_simplified_assets.simplified_assumes at L3%7%d=>L3%8%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%7%d=>L3%8%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%7%d=>L3%9%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%7%d=>L3%9%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%8%bbentry=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at L3%8%bbentry=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes at L3%9%bbentry=>L3%6%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%9%bbentry=>L3%6%bbentry done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
0
=String-contents:
=Nextpc-map:
=Nextpc-map done
=suffixpaths for src.spec.foo
=suffixpath_at_L0%0%d for src.spec.foo
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_L3%6%bbentry for src.spec.foo
=suffixpath_at_L3%6%bbentry.graph_edge_composition
(L0%0%d=>L3%6%bbentry)
=suffixpath_at_L3%7%d for src.spec.foo
=suffixpath_at_L3%7%d.graph_edge_composition
((L0%0%d=>L3%6%bbentry)*(L3%6%bbentry=>L3%7%d))
=suffixpath_at_L3%8%bbentry for src.spec.foo
=suffixpath_at_L3%8%bbentry.graph_edge_composition
((L0%0%d=>L3%6%bbentry)*((L3%6%bbentry=>L3%7%d)*(L3%7%d=>L3%8%bbentry)))
=suffixpath_at_L3%9%bbentry for src.spec.foo
=suffixpath_at_L3%9%bbentry.graph_edge_composition
((L0%0%d=>L3%6%bbentry)*((L3%6%bbentry=>L3%7%d)*(L3%7%d=>L3%9%bbentry)))
=suffixpath_at_E0%0%d for src.spec.foo
=suffixpath_at_E0%0%d.graph_edge_composition
((L0%0%d=>L3%6%bbentry)*((L3%6%bbentry=>L3%7%d)*((L3%7%d=>L3%8%bbentry)*(L3%8%bbentry=>E0%0%d))))
=suffixpaths for src.spec.foo done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>L3%6%bbentry
tfg.assumes_around_edge at L0%0%d=>L3%6%bbentry done
tfg.assumes_around_edge at L3%6%bbentry=>L3%7%d
tfg.assumes_around_edge at L3%6%bbentry=>L3%7%d done
tfg.assumes_around_edge at L3%7%d=>L3%8%bbentry
tfg.assumes_around_edge at L3%7%d=>L3%8%bbentry done
tfg.assumes_around_edge at L3%7%d=>L3%9%bbentry
tfg.assumes_around_edge at L3%7%d=>L3%9%bbentry done
tfg.assumes_around_edge at L3%8%bbentry=>E0%0%d
tfg.assumes_around_edge at L3%8%bbentry=>E0%0%d done
tfg.assumes_around_edge at L3%9%bbentry=>L3%6%bbentry
tfg.assumes_around_edge at L3%9%bbentry=>L3%6%bbentry done
tfg.assumes_around_edge done
=TFGdone
=TFG_SPEC_done
=TFG_SSA_done
=dst_tfg
=TFG_SSA:
=TFG_LLVM dst.llvm.foo:
=TFG:
=Nodes: L0%0%d Lfor.body%1%d Lfor.cond%1%bbentry Lfor.cond%2%d Lfor.end%1%d E0%0%d
=Edges:
L0%0%d => Lfor.cond%1%bbentry
Lfor.cond%1%bbentry => Lfor.cond%2%d
Lfor.cond%2%d => Lfor.body%1%d
Lfor.cond%2%d => Lfor.end%1%d
Lfor.end%1%d => E0%0%d
Lfor.body%1%d => Lfor.cond%1%bbentry (backedge) 
=graph done
=is_ssa_graph:
1
=StartState:
=dst.llvm-%m
1 : input.dst.llvm-%m : BV:32
=dst.llvm-%n
1 : input.dst.llvm-%n : BV:32
=dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=state_end
=PC to var-version map at L0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.body%1%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.cond%1%bbentry
=version for dst.llvm-mem
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.cond%2%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.end%1%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at E0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=graph_with_var_versions done
=FunctionName: foo
=Input: tfg-method-arg.0
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%n : BV:32
=arg end
=Input: tfg-method-arg.1
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
=arg val
1 : input.dst.llvm-%m : BV:32
=arg end
=Node outputs: E0%0%d
=Output: heap
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=Output: llvm-indir_tgt
1 : retaddr_const : BV:32
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : foo : 15 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%n : 4 : 4 : 0
C_LOCAL=L0%0%argnum1= : dst.llvm-%m : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;foo}
=memlabel_map.0 for call-context {*;foo}
mlheap.dst.llvm.foo : memlabel-mem-may-straddle-symbol.1-heap
=memlabel_map.1 for call-context {*;foo}
mlvar.dst.llvm.foo.0 : memlabel-mem-no-straddle-symbol.1-heap-arg.1
=Edge: L0%0%d => Lfor.cond%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-mem.Lfor.cond%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=dst.local_alloc_count.Lfor.cond%1%bbentry
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : input.dst.llvm-%m : BV:32
2 : 4 { 0x4 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:-1:((((start_pc_edge*  br label %for.cond, !dbg !21)*(  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ], !dbg !20*  br label %for.cond, !dbg !21))*(  br label %for.cond, !dbg !21*  br label %for.cond, !dbg !21))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=Edge: Lfor.cond%1%bbentry => Lfor.cond%2%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%cmp.Lfor.cond%2%d
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*  %cmp = icmp ult i32 %i.0, %n, !dbg !22)
tfg_edge_comment end

=Edge: Lfor.cond%2%d => Lfor.body%1%d
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %cmp, label %for.body, label %for.end, !dbg !24*  br i1 %cmp, label %for.body, label %for.end, !dbg !24)*  br i1 %cmp, label %for.body, label %for.end, !dbg !24)
tfg_edge_comment end

=Edge: Lfor.cond%2%d => Lfor.end%1%d
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
2 : not(1) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %cmp, label %for.body, label %for.end, !dbg !24*  br i1 %cmp, label %for.body, label %for.end, !dbg !24)*  br i1 %cmp, label %for.body, label %for.end, !dbg !24)
tfg_edge_comment end

=Edge: Lfor.end%1%d => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:1:  ret void, !dbg !33
tfg_edge_comment end

=Edge: Lfor.body%1%d => Lfor.cond%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-mem.Lfor.cond%1%bbentry
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.0 : MEMLABEL
4 : input.dst.llvm-%m : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : store(1, 2, 3, 10, 6, 11, 12) : ARRAY[BV:32 -> BV:8]
=dst.llvm-%4a6096e63df7dc5991ad505e64cd4823.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%4a6096e63df7dc5991ad505e64cd4823.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%m : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(3, 4) : BV:32
6 : bvadd(2, 5) : BV:32
7 : bvadd(1, 6) : BV:32
=dst.llvm-%4a6096e63df7dc5991ad505e64cd4823.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%arrayidx.Lfor.cond%1%bbentry
1 : input.dst.llvm-%m : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(3, 4) : BV:32
6 : bvadd(2, 5) : BV:32
7 : bvadd(1, 6) : BV:32
=dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : input.dst.llvm-%m : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(3, 4) : BV:32
6 : bvadd(2, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : 4 { 0x4 +1.0e1025 } : INT
9 : islangaligned(7, 8) : BOOL
=EdgeAssume.1
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvslt(1, 2) : BOOL
4 : 32 { 0x20 +1.0e1025 } : INT
5 : bvsign_ext(1, 4) : BV:64
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvzero_ext(6, 4) : BV:64
8 : bvmul(5, 7) : BV:64
9 : 63 { 0x3f +1.0e1025 } : INT
10 : bvextract(8, 9, 4) : BV:32
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : eq(10, 11) : BOOL
13 : eq(10, 2) : BOOL
14 : ite(3, 12, 13) : BOOL
15 : 4 { 0x4 +1.0e1025 } : INT
16 : isindexforsize(14, 15) : BOOL
17 : input.dst.llvm-%m : BV:32
18 : bvmul(1, 6) : BV:32
19 : bvadd(2, 18) : BV:32
20 : bvadd(17, 19) : BV:32
21 : isgepoffset(20, 18) : BOOL
22 : and(16, 21) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:1:((  %arrayidx = getelementptr inbounds i32, i32* %m, i32 %i.0, !dbg !25*(  %arrayidx = getelementptr inbounds i32, i32* %m, i32 %i.0, !dbg !25*  %arrayidx = getelementptr inbounds i32, i32* %m, i32 %i.0, !dbg !25))*(((((  store i32 %i.0, i32* %arrayidx, align 4, !dbg !27*  br label %for.inc, !dbg !28)*  br label %for.inc, !dbg !28)*  br label %for.inc, !dbg !28)*(((  %inc = add i32 %i.0, 1, !dbg !29*  br label %for.cond, !dbg !30, !llvm.loop !31)*(  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ], !dbg !20*  br label %for.cond, !dbg !30, !llvm.loop !31))*(  br label %for.cond, !dbg !30, !llvm.loop !31*  br label %for.cond, !dbg !30, !llvm.loop !31)))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge)))
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%n : BV:32
=predicate done
=start_pc_precondition.1
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%m : BV:32
=predicate done
=graph_with_precondition_done

=Locs in dst.llvm.foo
=Loc 100004 in dst.llvm.foo.
REGMEM
dst.llvm-%n
1 : input.dst.llvm-%n : BV:32
=Loc 100007 in dst.llvm.foo.
REGMEM
dst.llvm-%m
1 : input.dst.llvm-%m : BV:32
=Loc 100012 in dst.llvm.foo.
REGMEM
dst.llvm-%hidden-reg
1 : input.dst.llvm-%hidden-reg : BV:32
=Loc 100013 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.0
1 : input.dst.llvm-callee-save.0 : BV:32
=Loc 100014 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.1
1 : input.dst.llvm-callee-save.1 : BV:32
=Loc 100015 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.2
1 : input.dst.llvm-callee-save.2 : BV:32
=Loc 100016 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.3
1 : input.dst.llvm-callee-save.3 : BV:32
=Loc 100020 in dst.llvm.foo.
REGMEM
dst.local_alloc_count.=L0%0%d=
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=Loc 100021 in dst.llvm.foo.
REGMEM
dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=Loc 100022 in dst.llvm.foo.
REGMEM
dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
=Loc 100024 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 100025 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/
=Loc 100026 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
=Loc 100027 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem-may-straddle-symbol.1-heap
=Loc 100028 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.1
=Loc 100029 in dst.llvm.foo.
REGMEM
dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=Loc 100030 in dst.llvm.foo.
REGMEM
dst.llvm-indir_tgt.E0%0%d
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=Loc 100031 in dst.llvm.foo.
REGMEM
dst.llvm-%cmp.Lfor.cond%2%d
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=Loc 100032 in dst.llvm.foo.
REGMEM
dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=Loc 100033 in dst.llvm.foo.
REGMEM
dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=Loc 100034 in dst.llvm.foo.
REGMEM
dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=Loc 100035 in dst.llvm.foo.
REGMEM
dst.llvm-%4a6096e63df7dc5991ad505e64cd4823.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%4a6096e63df7dc5991ad505e64cd4823.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=Loc 100036 in dst.llvm.foo.
REGMEM
dst.llvm-%4a6096e63df7dc5991ad505e64cd4823.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%4a6096e63df7dc5991ad505e64cd4823.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=Loc 100037 in dst.llvm.foo.
REGMEM
dst.llvm-%4a6096e63df7dc5991ad505e64cd4823.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%4a6096e63df7dc5991ad505e64cd4823.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=Loc 100038 in dst.llvm.foo.
REGMEM
dst.llvm-%arrayidx.Lfor.cond%1%bbentry
1 : input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry : BV:32
=Loc 100039 in dst.llvm.foo.
REGMEM
dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=Loc 100040 in dst.llvm.foo.
REGMEM
dst.llvm-%inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=Loc 100041 in dst.llvm.foo.
REGMEM
dst.local_alloc_count.Lfor.cond%1%bbentry
1 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
=Loc 100042 in dst.llvm.foo.
REGMEM
dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : ROUNDING_MODE
=Loc 100043 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 100044 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem-may-straddle-symbol.1-heap
=Loc 100045 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/
=Loc 100046 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
=Loc 100047 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.1
=Locs end
=Liveness in dst.llvm.foo
=live locs at L0%0%d
100004, 100007, 100027, 
=live locs at Lfor.body%1%d
100004, 100007, 100032, 100044, 
=live locs at Lfor.cond%1%bbentry
100004, 100007, 100032, 100044, 
=live locs at Lfor.cond%2%d
100004, 100007, 100031, 100032, 100044, 
=live locs at Lfor.end%1%d
100044, 
=live locs at E0%0%d
100044, 

=Definedness in dst.llvm.foo
=loc definedness at L0%0%d
100004, 100007, 100021, 100022, 100024, 100025, 100026, 100027, 100028
=loc definedness at Lfor.body%1%d
100004, 100007, 100021, 100022, 100024, 100025, 100026, 100027, 100028, 100031, 100032, 100033, 100034, 100041, 100042, 100043, 100044, 100045, 100046, 100047
=loc definedness at Lfor.cond%1%bbentry
100004, 100007, 100021, 100022, 100024, 100025, 100026, 100027, 100028, 100032, 100033, 100034, 100041, 100042, 100043, 100044, 100045, 100046, 100047
=loc definedness at Lfor.cond%2%d
100004, 100007, 100021, 100022, 100024, 100025, 100026, 100027, 100028, 100031, 100032, 100033, 100034, 100041, 100042, 100043, 100044, 100045, 100046, 100047
=loc definedness at Lfor.end%1%d
100004, 100007, 100021, 100022, 100024, 100025, 100026, 100027, 100028, 100031, 100032, 100033, 100034, 100041, 100042, 100043, 100044, 100045, 100046, 100047
=loc definedness at E0%0%d
100004, 100007, 100021, 100022, 100024, 100025, 100026, 100027, 100028, 100029, 100030, 100031, 100032, 100033, 100034, 100041, 100042, 100043, 100044, 100045, 100046, 100047

=Branch affecting variable locs in dst.llvm.foo
=branch affecting variable locs at L0%0%d
100004
=branch affecting variable locs at Lfor.body%1%d
100004, 100032
=branch affecting variable locs at Lfor.cond%1%bbentry
100004, 100032
=branch affecting variable locs at Lfor.cond%2%d
100004, 100031, 100032
=branch affecting variable locs at Lfor.end%1%d

=branch affecting variable locs at E0%0%d


=Relevant Memlabels in dst.llvm.foo
=relevant memlabels
=function: foo
memlabel-mem--arg.0
memlabel-mem-may-straddle-symbol.1-heap
memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
memlabel-mem--arg.1
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100032 {input.dst.llvm-%i.0.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100033 {input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100034 {input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100041 {input.dst.local_alloc_count.Lfor.cond%1%bbentry }
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100042 {input.dst.cur_rounding_mode.Lfor.cond%1%bbentry }
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100043 {memmask(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-mem--arg.0) }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100044 {memmask(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-heap) }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100045 {memmask(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/) }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100046 {memmask(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/) }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100047 {memmask(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-mem--arg.1) }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100032 {input.dst.llvm-%i.0.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100034 {input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100035 {input.dst.llvm-%4a6096e63df7dc5991ad505e64cd4823.gepoffset.1.total_offset.Lfor.cond%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100036 {input.dst.llvm-%4a6096e63df7dc5991ad505e64cd4823.gepoffset.2.total_offset.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%m : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100037 {input.dst.llvm-%4a6096e63df7dc5991ad505e64cd4823.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100038 {input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%m : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100039 {input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100040 {input.dst.llvm-%inc.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100044 {memmask(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-heap) }
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.1 : MEMLABEL
4 : input.dst.llvm-%m : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : store(1, 2, 3, 8, 6, 9, 10) : ARRAY[BV:32 -> BV:8]
12 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
13 : memmask(11, 2, 12) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100047 {memmask(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-mem--arg.1) }
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.1 : MEMLABEL
4 : input.dst.llvm-%m : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : store(1, 2, 3, 8, 6, 9, 10) : ARRAY[BV:32 -> BV:8]
12 : memlabel-mem--arg.1 : MEMLABEL
13 : memmask(11, 2, 12) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%1%bbentry=>Lfor.cond%2%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%1%bbentry=>Lfor.cond%2%d for loc_id 100031 {input.dst.llvm-%cmp.Lfor.cond%2%d }
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%1%bbentry=>Lfor.cond%2%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.body%1%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.body%1%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.end%1%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.end%1%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.end%1%d=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.end%1%d=>E0%0%d for loc_id 100029 {input.dst.llvm-%hidden-reg.E0%0%d }
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.end%1%d=>E0%0%d for loc_id 100030 {input.dst.llvm-indir_tgt.E0%0%d }
1 : retaddr_const : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.end%1%d=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at Lfor.body%1%d:
vacuous mls at Lfor.cond%1%bbentry:
vacuous mls at Lfor.cond%2%d:
vacuous mls at Lfor.end%1%d:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at Lfor.body%1%d:
non-vacuous mls at Lfor.cond%1%bbentry:
non-vacuous mls at Lfor.cond%2%d:
non-vacuous mls at Lfor.end%1%d:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in dst.llvm.foo
=avail_exprs begin
=loc 100004
=loc_expr
140368 : input.dst.llvm-%n : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100007
=loc_expr
140367 : input.dst.llvm-%m : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100012
=loc_expr
140419 : input.dst.llvm-%hidden-reg : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100013
=loc_expr
140420 : input.dst.llvm-callee-save.0 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100014
=loc_expr
140422 : input.dst.llvm-callee-save.1 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100015
=loc_expr
140424 : input.dst.llvm-callee-save.2 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100016
=loc_expr
140426 : input.dst.llvm-callee-save.3 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100020
=loc_expr
140386 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100021
=loc_expr
140381 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100022
=loc_expr
140382 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100029
=loc_expr
140540 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=avail_exprs_val.end
=loc 100030
=loc_expr
140541 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : retaddr_const : BV:32
=avail_exprs_val.end
=loc 100033
=loc_expr
140542 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100041
=loc_expr
140549 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.end
=loc 100042
=loc_expr
140550 : input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : ROUNDING_MODE
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=avail_exprs_val.end
=loc 100043
=loc_expr
140526 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
140375 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140300 : memlabel-mem--arg.0 : MEMLABEL
140551 : memmask(140526, 140375, 140300) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.end
=loc 100045
=loc_expr
140526 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
140375 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140428 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
140552 : memmask(140526, 140375, 140428) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.end
=loc 100046
=loc_expr
140526 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
140375 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140430 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
140553 : memmask(140526, 140375, 140430) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.end
=avail_exprs end
=sprel_map in dst.llvm.foo
=loc 100030 expr
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=loc 100030 spreled-expr
140267 : retaddr_const : BV:32
=loc 100033 expr
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=loc 100033 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100041 expr
1 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
=loc 100041 spreled-expr
140386 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=loc 100042 expr
1 : input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : ROUNDING_MODE
=loc 100042 spreled-expr
140385 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;foo}
=loc_id 100004 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100007 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.1, )
=loc_id 100012 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100013 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100014 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100015 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100016 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100020 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100021 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100022 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100024 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100025 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100026 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100027 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100028 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100029 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100030 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100031 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100032 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100033 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100034 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100035 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100036 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.1, )
=loc_id 100037 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100038 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.1, )
=loc_id 100039 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100040 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100041 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100042 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100043 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100044 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100045 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100046 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100047 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 100030 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100033 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100041 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100042 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>Lfor.cond%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.body%1%d=>Lfor.cond%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond%1%bbentry=>Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond%2%d=>Lfor.body%1%d
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond%2%d=>Lfor.end%1%d
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
2 : not(1) : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.end%1%d=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>Lfor.cond%1%bbentry
=dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-mem.Lfor.cond%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=dst.local_alloc_count.Lfor.cond%1%bbentry
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.body%1%d=>Lfor.cond%1%bbentry
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-mem.Lfor.cond%1%bbentry
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.1 : MEMLABEL
4 : input.dst.llvm-%m : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : store(1, 2, 3, 8, 6, 9, 10) : ARRAY[BV:32 -> BV:8]
=dst.llvm-%4a6096e63df7dc5991ad505e64cd4823.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%4a6096e63df7dc5991ad505e64cd4823.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%m : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%4a6096e63df7dc5991ad505e64cd4823.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%arrayidx.Lfor.cond%1%bbentry
1 : input.dst.llvm-%m : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%inc.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond%1%bbentry=>Lfor.cond%2%d
=dst.llvm-%cmp.Lfor.cond%2%d
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond%2%d=>Lfor.body%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond%2%d=>Lfor.end%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.end%1%d=>E0%0%d
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lfor.cond%1%bbentry
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lfor.cond%1%bbentry assume# 0
1 : input.dst.llvm-%m : BV:32
2 : 4 { 0x4 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lfor.cond%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%d=>Lfor.cond%1%bbentry
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%d=>Lfor.cond%1%bbentry assume# 0
1 : 4 { 0x4 +1.0e1025 } : BV:64
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : 32 { 0x20 +1.0e1025 } : INT
4 : bvsign_ext(2, 3) : BV:64
5 : bvmul(1, 4) : BV:64
6 : 63 { 0x3f +1.0e1025 } : INT
7 : bvextract(5, 6, 3) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvslt(2, 8) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : ite(9, 10, 8) : BV:32
12 : eq(7, 11) : BOOL
13 : 4 { 0x4 +1.0e1025 } : INT
14 : isindexforsize(12, 13) : BOOL
15 : input.dst.llvm-%m : BV:32
16 : 4 { 0x4 +1.47e129 } : BV:32
17 : bvmul(16, 2) : BV:32
18 : bvadd(15, 17) : BV:32
19 : isgepoffset(18, 17) : BOOL
20 : and(14, 19) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%d=>Lfor.cond%1%bbentry assume# 1
1 : input.dst.llvm-%m : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
6 : 4 { 0x4 +1.0e1025 } : INT
7 : islangaligned(5, 6) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%d=>Lfor.cond%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%1%bbentry=>Lfor.cond%2%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%1%bbentry=>Lfor.cond%2%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.body%1%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.body%1%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.end%1%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.end%1%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.end%1%d=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at Lfor.end%1%d=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
1
=String-contents:
=Nextpc-map:
=Nextpc-map done
=suffixpaths for dst.llvm.foo
=suffixpath_at_L0%0%d for dst.llvm.foo
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_Lfor.body%1%d for dst.llvm.foo
=suffixpath_at_Lfor.body%1%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*(Lfor.cond%2%d=>Lfor.body%1%d)))
=suffixpath_at_Lfor.cond%1%bbentry for dst.llvm.foo
=suffixpath_at_Lfor.cond%1%bbentry.graph_edge_composition
(L0%0%d=>Lfor.cond%1%bbentry)
=suffixpath_at_Lfor.cond%2%d for dst.llvm.foo
=suffixpath_at_Lfor.cond%2%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.cond%2%d))
=suffixpath_at_Lfor.end%1%d for dst.llvm.foo
=suffixpath_at_Lfor.end%1%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*(Lfor.cond%2%d=>Lfor.end%1%d)))
=suffixpath_at_E0%0%d for dst.llvm.foo
=suffixpath_at_E0%0%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.end%1%d)*(Lfor.end%1%d=>E0%0%d))))
=suffixpaths for dst.llvm.foo done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry assume #0
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry assume #0.ec
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry assume #0.pred
=Comment
undef-behaviour-align-assume.edge.L0%0%d=>Lfor.cond%1%bbentry
=LhsExpr
140367 : input.dst.llvm-%m : BV:32
140341 : 4 { 0x4 +1.0e1025 } : INT
140387 : islangaligned(140367, 140341) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry done
tfg.assumes_around_edge at Lfor.body%1%d=>Lfor.cond%1%bbentry
tfg.assumes_around_edge at Lfor.body%1%d=>Lfor.cond%1%bbentry assume #0
tfg.assumes_around_edge at Lfor.body%1%d=>Lfor.cond%1%bbentry assume #0.ec
tfg.assumes_around_edge at Lfor.body%1%d=>Lfor.cond%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lfor.body%1%d=>Lfor.cond%1%bbentry assume #0.pred
=Comment
undef-behavioursome.edge.Lfor.body%1%d=>Lfor.cond%1%bbentry
=LhsExpr
140453 : 4 { 0x4 +1.0e1025 } : BV:64
140518 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
140398 : 32 { 0x20 +1.0e1025 } : INT
140529 : bvsign_ext(140518, 140398) : BV:64
140603 : bvmul(140453, 140529) : BV:64
140402 : 63 { 0x3f +1.0e1025 } : INT
140604 : bvextract(140603, 140402, 140398) : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
140528 : bvslt(140518, 140276) : BOOL
140404 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
140617 : ite(140528, 140404, 140276) : BV:32
140619 : eq(140604, 140617) : BOOL
140341 : 4 { 0x4 +1.0e1025 } : INT
140621 : isindexforsize(140619, 140341) : BOOL
140367 : input.dst.llvm-%m : BV:32
140338 : 4 { 0x4 +1.47e129 } : BV:32
140578 : bvmul(140338, 140518) : BV:32
140582 : bvadd(140367, 140578) : BV:32
140623 : isgepoffset(140582, 140578) : BOOL
140625 : and(140621, 140623) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lfor.body%1%d=>Lfor.cond%1%bbentry assume #1
tfg.assumes_around_edge at Lfor.body%1%d=>Lfor.cond%1%bbentry assume #1.ec
tfg.assumes_around_edge at Lfor.body%1%d=>Lfor.cond%1%bbentry assume #1.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lfor.body%1%d=>Lfor.cond%1%bbentry assume #1.pred
=Comment
undef-behaviour-align-assume.edge.Lfor.body%1%d=>Lfor.cond%1%bbentry
=LhsExpr
140367 : input.dst.llvm-%m : BV:32
140338 : 4 { 0x4 +1.47e129 } : BV:32
140518 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
140578 : bvmul(140338, 140518) : BV:32
140582 : bvadd(140367, 140578) : BV:32
140341 : 4 { 0x4 +1.0e1025 } : INT
140594 : islangaligned(140582, 140341) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lfor.body%1%d=>Lfor.cond%1%bbentry done
tfg.assumes_around_edge at Lfor.cond%1%bbentry=>Lfor.cond%2%d
tfg.assumes_around_edge at Lfor.cond%1%bbentry=>Lfor.cond%2%d done
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.body%1%d
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.body%1%d done
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.end%1%d
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.end%1%d done
tfg.assumes_around_edge at Lfor.end%1%d=>E0%0%d
tfg.assumes_around_edge at Lfor.end%1%d=>E0%0%d done
tfg.assumes_around_edge done
=TFGdone
=PC_to_linename:
=pc
Lentry%1%d
=linename
line 2
=pc
Lfor.body%1%d
=linename
line 3
=pc
Lfor.body%2%d
=linename
line 3
=pc
Lfor.body%3%d
=linename
line 4
=pc
Lfor.cond%1%d
=linename
line 2
=pc
Lfor.cond%2%d
=linename
line 2
=pc
Lfor.end%1%d
=linename
line 5
=pc
Lfor.inc%1%d
=linename
line 2
=pc
Lfor.inc%2%d
=linename
line 2
=PC_to_linename done
=PC_to_column_name:
=pc
Lentry%1%d
=column_name
 at column 8
=pc
Lfor.body%1%d
=column_name
 at column 5
=pc
Lfor.body%2%d
=column_name
 at column 10
=pc
Lfor.body%3%d
=column_name
 at column 3
=pc
Lfor.cond%1%d
=column_name
 at column 26
=pc
Lfor.cond%2%d
=column_name
 at column 3
=pc
Lfor.end%1%d
=column_name
 at column 1
=pc
Lfor.inc%1%d
=column_name
 at column 31
=pc
Lfor.inc%2%d
=column_name
 at column 3
=PC_to_column_name done
=PC_to_line_and_column:
=pc
Lentry%1%d
=line_and_column
(line 2 at column 8)
=pc
Lfor.body%1%d
=line_and_column
(line 3 at column 5)
=pc
Lfor.body%2%d
=line_and_column
(line 3 at column 10)
=pc
Lfor.body%3%d
=line_and_column
line 4
=pc
Lfor.cond%1%d
=line_and_column
(line 2 at column 26)
=pc
Lfor.cond%2%d
=line_and_column
(line 2 at column 3)
=pc
Lfor.end%1%d
=line_and_column
line 5
=pc
Lfor.inc%1%d
=line_and_column
(line 2 at column 31)
=pc
Lfor.inc%2%d
=line_and_column
(line 2 at column 3)
=PC_to_line_and_column done
=SourceToLLVMVarnames:
=SourceToLLVMVarnames done
=InputLLVMToSourceVarnames:
input.dst.llvm-%m : L0%0%d : m'
input.dst.llvm-%n : L0%0%d : n'
input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : L0%0%d : input.dst.local./*___y___foo__x__=L0%0%argnum0=/
input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : L0%0%d : input.dst.local./*___y___foo__x__=L0%0%argnum1=/
input.dst.local_alloc_count.=L0%0%d= : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.llvm-%i.0.phi.tmpvar.entry : L0%0%d : 0
input.dst.llvm-%i.0 : Lfor.cond%1%bbentry : i'
input.dst.llvm-%inc : Lfor.inc%2%bbentry : i'
input.dst.llvm-%hidden-reg : L0%0%d : input.dst.llvm-%hidden-reg
input.dst.llvm-callee-save.0 : L0%0%d : input.dst.llvm-callee-save.0
input.dst.llvm-callee-save.1 : L0%0%d : input.dst.llvm-callee-save.1
input.dst.llvm-callee-save.2 : L0%0%d : input.dst.llvm-callee-save.2
input.dst.llvm-callee-save.3 : L0%0%d : input.dst.llvm-callee-save.3
input.dst.llvm-%arrayidx : L0%0%d : input.dst.llvm-%4a6096e63df7dc5991ad505e64cd4823.gepoffset.2.total_offset
input.dst.llvm-indir_tgt : L0%0%d : return-address
input.dst.local_alloc_count : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.cur_rounding_mode : L0%0%d : ROUND_to_nearest_ties_to_even
input.dst.llvm-indir_tgt.E0%0%d : L0%0%d : return-address
input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : L0%0%d : 0
input.dst.llvm-%hidden-reg.E0%0%d : L0%0%d : bvxor(bvxor(bvxor(bvxor(input.dst.llvm-%hidden-reg, input.dst.llvm-callee-save.0), input.dst.llvm-callee-save.1), input.dst.llvm-callee-save.2), input.dst.llvm-callee-save.3)
input.dst.local_alloc_count.Lfor.cond%1%bbentry : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : L0%0%d : ROUND_to_nearest_ties_to_even
=InputLLVMToSourceVarnames done
=PotentialSCEVRelations:
=dst.llvm-%i.0
=dst.llvm-%i.0 loop pc: Lfor.cond%1%d
=dst.llvm-%i.0 val_scevb
=dst.llvm-%i.0 val_scevb scev
=dst.llvm-%i.0 val_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%i.0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%i.0 val_scevb scev scev_expr
1 : 00000000000000000000000000000000b
2 : 00000000000000000000000000000001b
3 : scev_op_addrec(1, 2) : loop Lfor.cond%1%d : 
=dst.llvm-%i.0 val_scevb scev scev_expr done
=dst.llvm-%i.0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%i.0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%i.0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%i.0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%i.0 atuse_scevb
=dst.llvm-%i.0 atuse_scevb scev
=dst.llvm-%i.0 atuse_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%i.0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%i.0 atuse_scevb scev scev_expr
1 : 00000000000000000000000000000000b
2 : 00000000000000000000000000000001b
3 : scev_op_addrec(1, 2) : loop Lfor.cond%1%d : 
=dst.llvm-%i.0 atuse_scevb scev scev_expr done
=dst.llvm-%i.0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%i.0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%i.0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%i.0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%i.0 atexit_scev
=dst.llvm-%i.0 atexit_scev loop: L0%0%d
=dst.llvm-%i.0 atexit_scev scev_overflow_flag: 
=dst.llvm-%i.0 atexit_scev scev_expr
4 : input.dst.llvm-%n : BV32
=dst.llvm-%i.0 atexit_scev scev_expr done
=dst.llvm-%arrayidx
=dst.llvm-%arrayidx loop pc: Lfor.cond%1%d
=dst.llvm-%arrayidx val_scevb
=dst.llvm-%arrayidx val_scevb scev
=dst.llvm-%arrayidx val_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%arrayidx val_scevb scev scev_overflow_flag: 
=dst.llvm-%arrayidx val_scevb scev scev_expr
5 : input.dst.llvm-%m : BV32
6 : 00000000000000000000000000000100b
7 : scev_op_addrec(5, 6) : loop Lfor.cond%1%d : 
=dst.llvm-%arrayidx val_scevb scev scev_expr done
=dst.llvm-%arrayidx val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%arrayidx val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%arrayidx val_scevb signed lower bound: 32:4294967295
=dst.llvm-%arrayidx val_scevb signed upper bound: 32:4294967295
=dst.llvm-%arrayidx atuse_scevb
=dst.llvm-%arrayidx atuse_scevb scev
=dst.llvm-%arrayidx atuse_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%arrayidx atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%arrayidx atuse_scevb scev scev_expr
5 : input.dst.llvm-%m : BV32
6 : 00000000000000000000000000000100b
7 : scev_op_addrec(5, 6) : loop Lfor.cond%1%d : 
=dst.llvm-%arrayidx atuse_scevb scev scev_expr done
=dst.llvm-%arrayidx atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%arrayidx atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%arrayidx atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%arrayidx atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%arrayidx atexit_scev
=dst.llvm-%arrayidx atexit_scev loop: L0%0%d
=dst.llvm-%arrayidx atexit_scev scev_overflow_flag: 
=dst.llvm-%arrayidx atexit_scev scev_expr
6 : 00000000000000000000000000000100b
4 : input.dst.llvm-%n : BV32
8 : scev_op_mul(6, 4) : loop L0%0%d : 
5 : input.dst.llvm-%m : BV32
9 : scev_op_add(8, 5) : loop L0%0%d : 
=dst.llvm-%arrayidx atexit_scev scev_expr done
=dst.llvm-%inc
=dst.llvm-%inc loop pc: Lfor.cond%1%d
=dst.llvm-%inc val_scevb
=dst.llvm-%inc val_scevb scev
=dst.llvm-%inc val_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%inc val_scevb scev scev_overflow_flag: 
=dst.llvm-%inc val_scevb scev scev_expr
2 : 00000000000000000000000000000001b
10 : scev_op_addrec(2, 2) : loop Lfor.cond%1%d : 
=dst.llvm-%inc val_scevb scev scev_expr done
=dst.llvm-%inc val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%inc val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%inc val_scevb signed lower bound: 32:4294967295
=dst.llvm-%inc val_scevb signed upper bound: 32:4294967295
=dst.llvm-%inc atuse_scevb
=dst.llvm-%inc atuse_scevb scev
=dst.llvm-%inc atuse_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%inc atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%inc atuse_scevb scev scev_expr
2 : 00000000000000000000000000000001b
10 : scev_op_addrec(2, 2) : loop Lfor.cond%1%d : 
=dst.llvm-%inc atuse_scevb scev scev_expr done
=dst.llvm-%inc atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%inc atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%inc atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%inc atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%inc atexit_scev
=dst.llvm-%inc atexit_scev loop: L0%0%d
=dst.llvm-%inc atexit_scev scev_overflow_flag: 
=dst.llvm-%inc atexit_scev scev_expr
2 : 00000000000000000000000000000001b
4 : input.dst.llvm-%n : BV32
11 : scev_op_add(2, 4) : loop L0%0%d : 
=dst.llvm-%inc atexit_scev scev_expr done
=PotentialSCEVRelations done
=ReachingDefinitionsForLocs:
=Reaching Definitions at L0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns done
=Reaching Definitions at Lfor.body%1%d
=reaching defns for expr 0
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 7 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 8 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 9 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%4a6096e63df7dc5991ad505e64cd4823.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%4a6096e63df7dc5991ad505e64cd4823.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%4a6096e63df7dc5991ad505e64cd4823.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns done
=Reaching Definitions at Lfor.cond%1%bbentry
=reaching defns for expr 0
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 7 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 8 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 9 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%4a6096e63df7dc5991ad505e64cd4823.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%4a6096e63df7dc5991ad505e64cd4823.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%4a6096e63df7dc5991ad505e64cd4823.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns done
=Reaching Definitions at Lfor.cond%2%d
=reaching defns for expr 0
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 7 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 8 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 9 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%4a6096e63df7dc5991ad505e64cd4823.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%4a6096e63df7dc5991ad505e64cd4823.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%4a6096e63df7dc5991ad505e64cd4823.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns done
=Reaching Definitions at Lfor.end%1%d
=reaching defns for expr 0
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 7 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 8 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 9 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%4a6096e63df7dc5991ad505e64cd4823.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%4a6096e63df7dc5991ad505e64cd4823.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%4a6096e63df7dc5991ad505e64cd4823.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns done
=Reaching Definitions at E0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 7 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 8 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 9 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=reaching defns for expr 10 edges
  Lfor.end%1%d=>E0%0%d
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=reaching defns for expr 11 edges
  Lfor.end%1%d=>E0%0%d
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%4a6096e63df7dc5991ad505e64cd4823.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%4a6096e63df7dc5991ad505e64cd4823.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%4a6096e63df7dc5991ad505e64cd4823.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns done
=ReachingDefinitionsForLocs done
=VarnameToLRStatus Begin:
=LR status for var input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.1, )
=LR status for var input.dst.llvm-%m
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.1, )
=LR status for var input.dst.llvm-%n
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.local./*___y___foo__x__=L0%0%argnum0=/
lr_status_top
=LR status for var input.dst.local./*___y___foo__x__=L0%0%argnum1=/
lr_status_top
=LR status for var input.dst.local_alloc_count.=L0%0%d=
lr_status_top
=LR status for var input.dst.llvm-%hidden-reg
lr_status_top
=LR status for var input.dst.llvm-callee-save.0
lr_status_top
=LR status for var input.dst.llvm-callee-save.1
lr_status_top
=LR status for var input.dst.llvm-callee-save.2
lr_status_top
=LR status for var input.dst.llvm-callee-save.3
lr_status_top
=LR status for var input.dst.llvm-%4a6096e63df7dc5991ad505e64cd4823.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%i.0.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%cmp.Lfor.cond%2%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-indir_tgt.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%4a6096e63df7dc5991ad505e64cd4823.gepoffset.1.total_offset.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%hidden-reg.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%4a6096e63df7dc5991ad505e64cd4823.gepoffset.2.total_offset.Lfor.cond%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.1, )
=LR status for var input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%inc.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.local_alloc_count.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=VarnameToLRStatus End
=TFG_LLVM_done
=TFG_SSA_done
=eqcheck_info
=eqcheck
=proof_filename loop7.proof
=function_name foo
=asm_filename NONE
=fixed_reg_mappings begin
0 : 0 : 0
0 : 4 : 4
=fixed_reg_mappings end
=rodata_map begin
=rodata_map end
=dst_iseq
=dst_iseq done
=dst_insn_pcs
=dst_insn_pcs done
=xml_output_format text-color
=use_only_relocatable_memlabels 0
=run_safety_check 0
=debug_header_pc_lsprels
=Local offsets from compile log
=Local offsets from compile log done
=done
=spec_iospecs
=SpecFuncIOSpecs
=FunctionName: foo
=EntryPreconds
=pred 0
=Comment
equal-arg0
=LhsExpr
1 : $spec-arg-0 : BV:32
2 : $llvm-arg-0 : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=EntryPreconds done
=ExitAsserts
=pred 0
=Comment
pointer-implements-variable-sized-map
=LhsExpr
1 : $spec-ret : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : $llvm-arg-0 : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : $llvm-md : ARRAY[BV:32 -> BV:8]
11 : $llvm-ma : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : $llvm-arg-1 : BV:32
14 : 4 { 0x4 +1.47e129 } : BV:32
15 : bvmul(9, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=ExitAsserts done
=SpecFuncIOSpecs done
=eqcheck done
=graph_with_guessing
=Nodes: L0%0%d_L0%0%d L3%6%bbentry_Lfor.cond%1%bbentry E0%0%d_E0%0%d
=Edges:
L0%0%d_L0%0%d => L3%6%bbentry_Lfor.cond%1%bbentry
L3%6%bbentry_Lfor.cond%1%bbentry => L3%6%bbentry_Lfor.cond%1%bbentry
L3%6%bbentry_Lfor.cond%1%bbentry => E0%0%d_E0%0%d
=graph done
=is_ssa_graph:
0
=StartState:
=state_end
=graph_with_var_versions done
=FunctionName: foo
=Input: tfg-method-arg.0
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%n : BV:32
=arg end
=Input: tfg-method-arg.1
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
=arg val
1 : input.dst.llvm-%m : BV:32
=arg end
=Node outputs: E0%0%d_E0%0%d
=Node outputs done for E0%0%d_E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : foo : 15 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%n : 4 : 4 : 0
C_LOCAL=L0%0%argnum1= : dst.llvm-%m : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
=Edge: L0%0%d_L0%0%d => L3%6%bbentry_Lfor.cond%1%bbentry
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L0%0%d to L3%6%bbentry at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
(L0%0%d#{0,0}=>L3%6%bbentry#{0,0})
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from L0%0%d to Lfor.cond%1%bbentry at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
(L0%0%d#{0,0}=>Lfor.cond%1%bbentry#{0,0})
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L3%6%bbentry_Lfor.cond%1%bbentry => L3%6%bbentry_Lfor.cond%1%bbentry
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L3%6%bbentry to L3%6%bbentry at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
((L3%6%bbentry#{0,0}=>L3%7%d#{0,0})*((L3%7%d#{0,0}=>L3%9%bbentry#{0,0})*(L3%9%bbentry#{0,0}=>L3%6%bbentry#{1,0})))
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lfor.cond%1%bbentry to Lfor.cond%1%bbentry at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((Lfor.cond%1%bbentry#{0,0}=>Lfor.cond%2%d#{0,0})*((Lfor.cond%2%d#{0,0}=>Lfor.body%1%d#{0,0})*(Lfor.body%1%d#{0,0}=>Lfor.cond%1%bbentry#{1,0})))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L3%6%bbentry_Lfor.cond%1%bbentry => E0%0%d_E0%0%d
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L3%6%bbentry to E0%0%d at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
((L3%6%bbentry#{0,0}=>L3%7%d#{0,0})*((L3%7%d#{0,0}=>L3%8%bbentry#{0,0})*(L3%8%bbentry#{0,0}=>E0%0%d#{0,0})))
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lfor.cond%1%bbentry to E0%0%d at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((Lfor.cond%1%bbentry#{0,0}=>Lfor.cond%2%d#{0,0})*((Lfor.cond%2%d#{0,0}=>Lfor.end%1%d#{0,0})*(Lfor.end%1%d#{0,0}=>E0%0%d#{0,0})))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
equal-arg0
=LhsExpr
1 : input.spec-%var-n-1 : BV:32
2 : input.dst.llvm-%n : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.1
=Comment
precond-mlasserts
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : bvuge(1, 10) : BOOL
18 : bvule(1, 11) : BOOL
19 : and(17, 18) : BOOL
20 : bvuge(2, 10) : BOOL
21 : bvule(2, 11) : BOOL
22 : and(20, 21) : BOOL
23 : not(22) : BOOL
24 : andnot1(19, 23) : BOOL
25 : bvuge(10, 1) : BOOL
26 : bvule(10, 2) : BOOL
27 : and(25, 26) : BOOL
28 : bvuge(11, 1) : BOOL
29 : bvule(11, 2) : BOOL
30 : and(28, 29) : BOOL
31 : not(30) : BOOL
32 : andnot1(27, 31) : BOOL
33 : and(24, 32) : BOOL
34 : and(16, 33) : BOOL
35 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
36 : 3 { 0x3 +1.35e129 } : BV:32
37 : bvand(35, 36) : BV:32
38 : 0 { 0x0 +1.0e129 } : BV:32
39 : eq(37, 38) : BOOL
40 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
41 : bvand(40, 36) : BV:32
42 : eq(41, 38) : BOOL
43 : and(39, 42) : BOOL
44 : and(34, 43) : BOOL
45 : eq(35, 1) : BOOL
46 : eq(40, 10) : BOOL
47 : and(45, 46) : BOOL
48 : and(44, 47) : BOOL
49 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
50 : 1 { 0x1 +1.11e129 } : BV:32
51 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
52 : region_agrees_with_memlabel(49, 38, 50, 51) : BOOL
53 : and(48, 52) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.2
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%m : BV:32
=predicate done
=start_pc_precondition.3
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%n : BV:32
=predicate done
=graph_with_precondition_done

=Locs in foo.A2.B2.C1
=Locs end
=Liveness in foo.A2.B2.C1
=live locs at L0%0%d_L0%0%d

=live locs at L3%6%bbentry_Lfor.cond%1%bbentry

=live locs at E0%0%d_E0%0%d


=Definedness in foo.A2.B2.C1

=Branch affecting variable locs in foo.A2.B2.C1

=Relevant Memlabels in foo.A2.B2.C1
=relevant memlabels
=function: foo
memlabel-mem--arg.0
memlabel-mem-may-straddle-symbol.1-heap
memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
memlabel-mem--arg.1
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
=graph_with_ml_contiguity_info non-vacuous mls
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in foo.A2.B2.C1
=avail_exprs begin
=avail_exprs end
=sprel_map in foo.A2.B2.C1
=sprel_map done
=lr-status-map
=lr-status-map done
=lr-status-for-sprel-locs-map
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=global counterexamples for reason inductive-invariants
=global nodece 0
=global nodece 0 nodece z3v487.ce3.num_edges_traversed1
=global nodece 0 nodece_path
=global nodece 0 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 0 nodece_cached_counterexample
=counter_example_begin z3v487.ce3 3cc7555acb45ffa5bffdf1882ad1663
=input.spec-%var-n-1
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-m-0.L3%6%bbentry
1 : Lambda18 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda19 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : Lambda18 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda19 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 8; 131071 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 131072; 131075 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 131076; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 131072 { 0x20000 +1.1562500e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1610438063 { 0x5ffd55af +1.97917735e64 } : COUNT
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1610438063 { 0x5ffd55af +1.97917735e64 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 131072 { 0x20000 +1.1562500e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 131075 { 0x20003 +1.1562535e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-8.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
1370483088
=counter_example_end
=global nodece 0 num_edges_traversed 1
=global nodece 0 nodece_visted_pcs: 
L0%0%d_L0%0%d -> L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 1
=global nodece 1 nodece z3.ce4.num_edges_traversed0
=global nodece 1 nodece_path
=global nodece 1 nodece_path.graph_edge_composition
(epsilon)
=global nodece 1 nodece_cached_counterexample
=counter_example_begin z3.ce4 ea8ddfd42c7cfaa7791e9ab2ea2bf6
=input.spec-%var-n-1
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : Lambda40 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda41 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3022116431 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3022116432; 3022116435 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3022116436; 4009542247 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4009542248; 4009542251 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 4009542252; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3022116432 { 0xb421d650 -1272850864 -1.26435279e233 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4009542248 { 0xeefcc268 -285425048 -1.97468280e94 } : BV:32
=input.spec-%var-n-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4009542248 { 0xeefcc268 -285425048 -1.97468280e94 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 4009542251 { 0xeefcc26b -285425045 -1.97468316e94 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3022116432 { 0xb421d650 -1272850864 -1.26435279e233 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3022116435 { 0xb421d653 -1272850861 -1.26435315e233 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-8.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
2494662331
=counter_example_end
=global nodece 1 num_edges_traversed 0
=global nodece 1 nodece_visted_pcs: 
L0%0%d_L0%0%d
=global nodece 2
=global nodece 2 nodece z3v487.ce25.num_edges_traversed1
=global nodece 2 nodece_path
=global nodece 2 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 2 nodece_cached_counterexample
=counter_example_begin z3v487.ce25 891ac322745f58ea732ee49f2a75e63
=input.spec-%var-n-1
1 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-m-0.L3%6%bbentry
1 : Lambda18 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda19 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : Lambda18 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda19 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%m
1 : 67372032 { 0x4040400 +1.3137207e137 } : BV:32
=input.dst.llvm-%n
1 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1928898595 ] -> 4, [ 1928898596; 1928898596 ] -> 0, [ 1928898597; 4294967295 ] -> 4, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 49279 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 49280; 49283 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 49284; 1928898595 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1928898596; 1928898599 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1928898600; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 49280 { 0xc080 +1.587463e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1928898596 { 0x72f8a824 +1.94263124e102 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 632200485 { 0x25ae9d25 +1.36417067e204 } : COUNT
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 1928898595 ] -> 4, [ 1928898596; 1928898596 ] -> 0, [ 1928898597; 4294967295 ] -> 4, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 632200485 { 0x25ae9d25 +1.36417067e204 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1928898596 { 0x72f8a824 +1.94263124e102 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1928898599 { 0x72f8a827 +1.94263160e102 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 49280 { 0xc080 +1.587463e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 49283 { 0xc083 +1.587499e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-8.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
4045775723
=counter_example_end
=global nodece 2 num_edges_traversed 1
=global nodece 2 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 3
=global nodece 3 nodece z3.ce26.num_edges_traversed1
=global nodece 3 nodece_path
=global nodece 3 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 3 nodece_cached_counterexample
=counter_example_begin z3.ce26 fd61d267c63fd846374a2c13fe1f747
=input.spec-%var-n-1
1 : 256 { 0x100 +1.3051e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-m-0.L3%6%bbentry
1 : Lambda18 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda19 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : Lambda18 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda19 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 256 { 0x100 +1.3051e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4290772984 ] -> 0, [ 4290772985; 4290772985 ] -> 1, [ 4290772986; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 773111803 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 773111804; 773111807 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 773111808; 4290772983 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4290772984; 4290772987 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4290772988; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4290772984 { 0xffbffff8 -4194312 -1.49999904e128 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 773111804 { 0x2e14bffc +1.16210889e221 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 331088346 { 0x13bc01da +1.46880650e168 } : COUNT
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4290772984 ] -> 0, [ 4290772985; 4290772985 ] -> 1, [ 4290772986; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 256 { 0x100 +1.3051e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 331088346 { 0x13bc01da +1.46880650e168 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 773111804 { 0x2e14bffc +1.16210889e221 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 773111807 { 0x2e14bfff +1.16210925e221 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4290772984 { 0xffbffff8 -4194312 -1.49999904e128 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 4290772987 { 0xffbffffb -4194309 -1.49999940e128 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-8.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
3453640367
=counter_example_end
=global nodece 3 num_edges_traversed 1
=global nodece 3 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 4
=global nodece 4 nodece z3.ce47.num_edges_traversed1
=global nodece 4 nodece_path
=global nodece 4 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 4 nodece_cached_counterexample
=counter_example_begin z3.ce47 eb588897c2c5c26fbae6e0fb1377587
=input.spec-%var-n-1
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-m-0.L3%6%bbentry
1 : Lambda18 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda19 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : Lambda18 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda19 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%m
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967291 ] -> 0, [ 4294967292; 4294967292 ] -> 4, [ 4294967293; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 4294967287 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4294967288; 4294967291 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4294967292; 4294967295 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1823059443 { 0x6ca9adf3 +1.32562100e90 } : COUNT
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967291 ] -> 0, [ 4294967292; 4294967292 ] -> 4, [ 4294967293; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1823059443 { 0x6ca9adf3 +1.32562100e90 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-8.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
502475613
=counter_example_end
=global nodece 4 num_edges_traversed 1
=global nodece 4 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 5
=global nodece 5 nodece z3.ce69.num_edges_traversed1
=global nodece 5 nodece_path
=global nodece 5 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 5 nodece_cached_counterexample
=counter_example_begin z3.ce69 f9aeaf832db9bb92da6bbe76bd925624
=input.spec-%var-n-1
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-m-0.L3%6%bbentry
1 : Lambda18 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda19 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : Lambda18 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda19 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3094978159 ] -> 0, [ 3094978160; 3094978160 ] -> 1, [ 3094978161; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 469542959 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 469542960; 469542963 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 469542964; 3094978159 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3094978160; 3094978163 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3094978164; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3094978160 { 0xb8799e70 -1199989136 -1.95014762e241 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 469542960 { 0x1bfca830 +1.97388267e184 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 492961346 { 0x1d61fe42 +1.76557183e187 } : COUNT
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 3094978159 ] -> 0, [ 3094978160; 3094978160 ] -> 1, [ 3094978161; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 492961346 { 0x1d61fe42 +1.76557183e187 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 469542960 { 0x1bfca830 +1.97388267e184 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 469542963 { 0x1bfca833 +1.97388303e184 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3094978160 { 0xb8799e70 -1199989136 -1.95014762e241 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3094978163 { 0xb8799e73 -1199989133 -1.95014798e241 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-8.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
507686758
=counter_example_end
=global nodece 5 num_edges_traversed 1
=global nodece 5 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 6
=global nodece 6 nodece z3.ce91.num_edges_traversed1
=global nodece 6 nodece_path
=global nodece 6 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 6 nodece_cached_counterexample
=counter_example_begin z3.ce91 d4524a93d21038a530b62735c8b5ba4e
=input.spec-%var-n-1
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-m-0.L3%6%bbentry
1 : Lambda18 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda19 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : Lambda18 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda19 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%m
1 : 4294967040 { 0xffffff00 -256 -1.99996948e128 } : BV:32
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4082104039 ] -> 255, [ 4082104040; 4082104040 ] -> 0, [ 4082104041; 4294967295 ] -> 255, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2143289083 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2143289084; 2143289087 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2143289088; 4082104039 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4082104040; 4082104043 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 4082104044; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2143289084 { 0x7fbffefc +1.49996900e128 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4082104040 { 0xf34ff6e8 -212863256 -1.62472248e103 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1652578445 { 0x6280588d +1.270235e70 } : COUNT
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4082104039 ] -> 255, [ 4082104040; 4082104040 ] -> 0, [ 4082104041; 4294967295 ] -> 255, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1652578445 { 0x6280588d +1.270235e70 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4082104040 { 0xf34ff6e8 -212863256 -1.62472248e103 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 4082104043 { 0xf34ff6eb -212863253 -1.62472283e103 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2143289084 { 0x7fbffefc +1.49996900e128 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2143289087 { 0x7fbffeff +1.49996936e128 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-8.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
3498938333
=counter_example_end
=global nodece 6 num_edges_traversed 1
=global nodece 6 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 7
=global nodece 7 nodece z3.ce113.num_edges_traversed1
=global nodece 7 nodece_path
=global nodece 7 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 7 nodece_cached_counterexample
=counter_example_begin z3.ce113 3a496557667970183c8aeb36879a55ab
=input.spec-%var-n-1
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-m-0.L3%6%bbentry
1 : Lambda18 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda19 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : Lambda18 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda19 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967294 ] -> 0, [ 4294967295; 4294967295 ] -> 128, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3718480039 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3718480040; 3718480043 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3718480044; 4294967291 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4294967292; 4294967295 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3718480040 { 0xdda380a8 -576487256 -1.27736377e60 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1537132368 { 0x5b9ec750 +1.24045753e56 } : COUNT
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967294 ] -> 0, [ 4294967295; 4294967295 ] -> 128, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1537132368 { 0x5b9ec750 +1.24045753e56 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3718480040 { 0xdda380a8 -576487256 -1.27736377e60 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3718480043 { 0xdda380ab -576487253 -1.27736413e60 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-8.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
391162385
=counter_example_end
=global nodece 7 num_edges_traversed 1
=global nodece 7 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 8
=global nodece 8 nodece z3.ce537.num_edges_traversed0
=global nodece 8 nodece_path
=global nodece 8 nodece_path.graph_edge_composition
(epsilon)
=global nodece 8 nodece_cached_counterexample
=counter_example_begin z3.ce537 920e7fe679324b46ee4c9927f909c30
=input.spec-%var-n-1
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-m-0.L3%6%bbentry
1 : Lambda537 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda538 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : Lambda541 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda542 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%m
1 : 3370867460 { 0xc8eb5b04 -924099836 -1.83871507e18 } : BV:32
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 428757511 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 428757512; 428757515 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 428757516; 3516715647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3516715648; 3516715651 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3516715652; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3516715648 { 0xd19cd280 -778251648 -1.22517395e36 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 428757512 { 0x198e5208 +1.11187839e180 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-m-0.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 428757512 { 0x198e5208 +1.11187839e180 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 428757515 { 0x198e520b +1.11187875e180 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3516715648 { 0xd19cd280 -778251648 -1.22517395e36 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3516715651 { 0xd19cd283 -778251645 -1.22517430e36 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-8.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
846012974
=counter_example_end
=global nodece 8 num_edges_traversed 0
=global nodece 8 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 9
=global nodece 9 nodece z3v487.ce538.num_edges_traversed0
=global nodece 9 nodece_path
=global nodece 9 nodece_path.graph_edge_composition
(epsilon)
=global nodece 9 nodece_cached_counterexample
=counter_example_begin z3v487.ce538 12a977bd247bd8b5b783984b6a0f3a0
=input.spec-%var-n-1
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-m-0.L3%6%bbentry
1 : Lambda549 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda550 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : Lambda553 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda554 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%m
1 : 302120976 { 0x12020010 +1.1562690e165 } : BV:32
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 33685567 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 33685568; 33685571 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 33685572; 2222981187 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2222981188; 2222981191 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2222981192; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2222981188 { 0x84800044 -2071986108 -1.810e138 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 33685568 { 0x2020040 +1.1563262e133 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-m-0.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 33685568 { 0x2020040 +1.1563262e133 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 33685571 { 0x2020043 +1.1563298e133 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2222981188 { 0x84800044 -2071986108 -1.810e138 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2222981191 { 0x84800047 -2071986105 -1.846e138 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-8.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
2516558234
=counter_example_end
=global nodece 9 num_edges_traversed 0
=global nodece 9 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 10
=global nodece 10 nodece z3v487.ce612.num_edges_traversed2
=global nodece 10 nodece_path
=global nodece 10 nodece_path.graph_edge_composition
(epsilon)
=global nodece 10 nodece_cached_counterexample
=counter_example_begin z3v487.ce612 f65eac8593b1ec40f8e776afecb66527
=input.spec-%var-n-1
1 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-m-0.L3%6%bbentry
1 : Lambda609 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : lambda(1, 3) : FUNCTION[BV:32 -> BOOL]
5 : Lambda610 : BV:32
6 : eq(5, 2) : BOOL
7 : ite(6, 2, 2) : BV:32
8 : lambda(5, 7) : FUNCTION[BV:32 -> BV:32]
9 : map(4, 8) : MAP[BV:32 -> BV:32]
10 : sym_const(9) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : Lambda18 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda19 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%m
1 : 67372032 { 0x4040400 +1.3137207e137 } : BV:32
=input.dst.llvm-%n
1 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1928898595 ] -> 4, [ 1928898596; 1928898596 ] -> 0, [ 1928898597; 4294967295 ] -> 4, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 49279 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 49280; 49283 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 49284; 1928898595 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1928898596; 1928898599 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1928898600; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 49280 { 0xc080 +1.587463e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1928898596 { 0x72f8a824 +1.94263124e102 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 67372031 ] -> 4, [ 67372032; 67372032 ] -> 0, [ 67372033; 67372033 ] -> 0, [ 67372034; 67372034 ] -> 0, [ 67372035; 67372035 ] -> 0, [ 67372036; 1928898595 ] -> 4, [ 1928898596; 1928898596 ] -> 0, [ 1928898597; 4294967295 ] -> 4, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 632200485 { 0x25ae9d25 +1.36417067e204 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1928898596 { 0x72f8a824 +1.94263124e102 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1928898599 { 0x72f8a827 +1.94263160e102 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 49280 { 0xc080 +1.587463e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 49283 { 0xc083 +1.587499e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-8.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
4045775723
=counter_example_end
=global nodece 10 num_edges_traversed 2
=global nodece 10 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 11
=global nodece 11 nodece z3v487.ce629.num_edges_traversed3
=global nodece 11 nodece_path
=global nodece 11 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 11 nodece_cached_counterexample
=counter_example_begin z3v487.ce629 a8ccfe705bc5d38280103e81e2e247c8
=input.spec-%var-n-1
1 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%var-m-0.L3%6%bbentry
1 : Lambda617 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : eq(1, 4) : BOOL
6 : or(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda618 : BV:32
9 : eq(8, 4) : BOOL
10 : eq(8, 2) : BOOL
11 : ite(10, 2, 2) : BV:32
12 : ite(9, 4, 11) : BV:32
13 : lambda(8, 12) : FUNCTION[BV:32 -> BV:32]
14 : map(7, 13) : MAP[BV:32 -> BV:32]
15 : sym_const(14) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : Lambda18 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda19 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%m
1 : 67372032 { 0x4040400 +1.3137207e137 } : BV:32
=input.dst.llvm-%n
1 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1928898595 ] -> 4, [ 1928898596; 1928898596 ] -> 0, [ 1928898597; 4294967295 ] -> 4, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 49279 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 49280; 49283 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 49284; 1928898595 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1928898596; 1928898599 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1928898600; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 49280 { 0xc080 +1.587463e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1928898596 { 0x72f8a824 +1.94263124e102 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 67372031 ] -> 4, [ 67372032; 67372032 ] -> 0, [ 67372033; 67372033 ] -> 0, [ 67372034; 67372034 ] -> 0, [ 67372035; 67372035 ] -> 0, [ 67372036; 67372036 ] -> 1, [ 67372037; 67372037 ] -> 0, [ 67372038; 67372038 ] -> 0, [ 67372039; 67372039 ] -> 0, [ 67372040; 1928898595 ] -> 4, [ 1928898596; 1928898596 ] -> 0, [ 1928898597; 4294967295 ] -> 4, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 632200485 { 0x25ae9d25 +1.36417067e204 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1928898596 { 0x72f8a824 +1.94263124e102 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1928898599 { 0x72f8a827 +1.94263160e102 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 49280 { 0xc080 +1.587463e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 49283 { 0xc083 +1.587499e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-8.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
4045775723
=counter_example_end
=global nodece 11 num_edges_traversed 3
=global nodece 11 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 12
=global nodece 12 nodece z3v487.ce649.num_edges_traversed4
=global nodece 12 nodece_path
=global nodece 12 nodece_path.graph_edge_composition
(epsilon)
=global nodece 12 nodece_cached_counterexample
=counter_example_begin z3v487.ce649 358cad85c668eb95a9d908367148e2
=input.spec-%var-n-1
1 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-m-0.L3%6%bbentry
1 : Lambda625 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : eq(1, 4) : BOOL
6 : or(3, 5) : BOOL
7 : 2 { 0x2 +1.23e129 } : BV:32
8 : eq(1, 7) : BOOL
9 : or(6, 8) : BOOL
10 : lambda(1, 9) : FUNCTION[BV:32 -> BOOL]
11 : Lambda626 : BV:32
12 : eq(11, 7) : BOOL
13 : eq(11, 4) : BOOL
14 : eq(11, 2) : BOOL
15 : ite(14, 2, 2) : BV:32
16 : ite(13, 4, 15) : BV:32
17 : ite(12, 7, 16) : BV:32
18 : lambda(11, 17) : FUNCTION[BV:32 -> BV:32]
19 : map(10, 18) : MAP[BV:32 -> BV:32]
20 : sym_const(19) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : Lambda18 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda19 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%m
1 : 67372032 { 0x4040400 +1.3137207e137 } : BV:32
=input.dst.llvm-%n
1 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1928898595 ] -> 4, [ 1928898596; 1928898596 ] -> 0, [ 1928898597; 4294967295 ] -> 4, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 49279 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 49280; 49283 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 49284; 1928898595 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1928898596; 1928898599 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1928898600; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 49280 { 0xc080 +1.587463e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1928898596 { 0x72f8a824 +1.94263124e102 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 67372031 ] -> 4, [ 67372032; 67372032 ] -> 0, [ 67372033; 67372033 ] -> 0, [ 67372034; 67372034 ] -> 0, [ 67372035; 67372035 ] -> 0, [ 67372036; 67372036 ] -> 1, [ 67372037; 67372037 ] -> 0, [ 67372038; 67372038 ] -> 0, [ 67372039; 67372039 ] -> 0, [ 67372040; 67372040 ] -> 2, [ 67372041; 67372041 ] -> 0, [ 67372042; 67372042 ] -> 0, [ 67372043; 67372043 ] -> 0, [ 67372044; 1928898595 ] -> 4, [ 1928898596; 1928898596 ] -> 0, [ 1928898597; 4294967295 ] -> 4, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 632200485 { 0x25ae9d25 +1.36417067e204 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1928898596 { 0x72f8a824 +1.94263124e102 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1928898599 { 0x72f8a827 +1.94263160e102 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 49280 { 0xc080 +1.587463e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 49283 { 0xc083 +1.587499e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-8.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
4045775723
=counter_example_end
=global nodece 12 num_edges_traversed 4
=global nodece 12 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 13
=global nodece 13 nodece z3.ce602.num_edges_traversed2
=global nodece 13 nodece_path
=global nodece 13 nodece_path.graph_edge_composition
(epsilon)
=global nodece 13 nodece_cached_counterexample
=counter_example_begin z3.ce602 c3e2bd7c53aed125ebe6f348373abc8
=input.spec-%var-n-1
1 : 256 { 0x100 +1.3051e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-m-0.L3%6%bbentry
1 : Lambda601 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : lambda(1, 3) : FUNCTION[BV:32 -> BOOL]
5 : Lambda602 : BV:32
6 : eq(5, 2) : BOOL
7 : ite(6, 2, 2) : BV:32
8 : lambda(5, 7) : FUNCTION[BV:32 -> BV:32]
9 : map(4, 8) : MAP[BV:32 -> BV:32]
10 : sym_const(9) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : Lambda18 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda19 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 256 { 0x100 +1.3051e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4290772984 ] -> 0, [ 4290772985; 4290772985 ] -> 1, [ 4290772986; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 773111803 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 773111804; 773111807 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 773111808; 4290772983 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4290772984; 4290772987 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4290772988; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4290772984 { 0xffbffff8 -4194312 -1.49999904e128 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 773111804 { 0x2e14bffc +1.16210889e221 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4290772984 ] -> 0, [ 4290772985; 4290772985 ] -> 1, [ 4290772986; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 256 { 0x100 +1.3051e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 331088346 { 0x13bc01da +1.46880650e168 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 773111804 { 0x2e14bffc +1.16210889e221 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 773111807 { 0x2e14bfff +1.16210925e221 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4290772984 { 0xffbffff8 -4194312 -1.49999904e128 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 4290772987 { 0xffbffffb -4194309 -1.49999940e128 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-8.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
3453640367
=counter_example_end
=global nodece 13 num_edges_traversed 2
=global nodece 13 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 14
=global nodece 14 nodece z3.ce588.num_edges_traversed2
=global nodece 14 nodece_path
=global nodece 14 nodece_path.graph_edge_composition
(epsilon)
=global nodece 14 nodece_cached_counterexample
=counter_example_begin z3.ce588 83abd1291ec619604041c4ce467898f6
=input.spec-%var-n-1
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-m-0.L3%6%bbentry
1 : Lambda593 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : lambda(1, 3) : FUNCTION[BV:32 -> BOOL]
5 : Lambda594 : BV:32
6 : eq(5, 2) : BOOL
7 : ite(6, 2, 2) : BV:32
8 : lambda(5, 7) : FUNCTION[BV:32 -> BV:32]
9 : map(4, 8) : MAP[BV:32 -> BV:32]
10 : sym_const(9) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : Lambda18 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda19 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3094978159 ] -> 0, [ 3094978160; 3094978160 ] -> 1, [ 3094978161; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 469542959 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 469542960; 469542963 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 469542964; 3094978159 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3094978160; 3094978163 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3094978164; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3094978160 { 0xb8799e70 -1199989136 -1.95014762e241 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 469542960 { 0x1bfca830 +1.97388267e184 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 3094978159 ] -> 0, [ 3094978160; 3094978160 ] -> 1, [ 3094978161; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 492961346 { 0x1d61fe42 +1.76557183e187 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 469542960 { 0x1bfca830 +1.97388267e184 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 469542963 { 0x1bfca833 +1.97388303e184 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3094978160 { 0xb8799e70 -1199989136 -1.95014762e241 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3094978163 { 0xb8799e73 -1199989133 -1.95014798e241 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-8.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
507686758
=counter_example_end
=global nodece 14 num_edges_traversed 2
=global nodece 14 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 15
=global nodece 15 nodece z3.ce578.num_edges_traversed2
=global nodece 15 nodece_path
=global nodece 15 nodece_path.graph_edge_composition
(epsilon)
=global nodece 15 nodece_cached_counterexample
=counter_example_begin z3.ce578 c9bd1585dd5cebdb60a1cc2582d9bc2e
=input.spec-%var-n-1
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-m-0.L3%6%bbentry
1 : Lambda585 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : lambda(1, 3) : FUNCTION[BV:32 -> BOOL]
5 : Lambda586 : BV:32
6 : eq(5, 2) : BOOL
7 : ite(6, 2, 2) : BV:32
8 : lambda(5, 7) : FUNCTION[BV:32 -> BV:32]
9 : map(4, 8) : MAP[BV:32 -> BV:32]
10 : sym_const(9) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : Lambda18 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda19 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%m
1 : 4294967040 { 0xffffff00 -256 -1.99996948e128 } : BV:32
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4082104039 ] -> 255, [ 4082104040; 4082104040 ] -> 0, [ 4082104041; 4294967295 ] -> 255, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2143289083 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2143289084; 2143289087 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2143289088; 4082104039 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4082104040; 4082104043 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 4082104044; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2143289084 { 0x7fbffefc +1.49996900e128 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4082104040 { 0xf34ff6e8 -212863256 -1.62472248e103 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4082104039 ] -> 255, [ 4082104040; 4082104040 ] -> 0, [ 4082104041; 4294967039 ] -> 255, [ 4294967040; 4294967040 ] -> 0, [ 4294967041; 4294967041 ] -> 0, [ 4294967042; 4294967042 ] -> 0, [ 4294967043; 4294967043 ] -> 0, [ 4294967044; 4294967295 ] -> 255, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1652578445 { 0x6280588d +1.270235e70 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4082104040 { 0xf34ff6e8 -212863256 -1.62472248e103 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 4082104043 { 0xf34ff6eb -212863253 -1.62472283e103 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2143289084 { 0x7fbffefc +1.49996900e128 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2143289087 { 0x7fbffeff +1.49996936e128 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-8.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
3498938333
=counter_example_end
=global nodece 15 num_edges_traversed 2
=global nodece 15 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 16
=global nodece 16 nodece z3.ce568.num_edges_traversed2
=global nodece 16 nodece_path
=global nodece 16 nodece_path.graph_edge_composition
(epsilon)
=global nodece 16 nodece_cached_counterexample
=counter_example_begin z3.ce568 23d409c5815c78a379f671a5e1fdb7
=input.spec-%var-n-1
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-m-0.L3%6%bbentry
1 : Lambda577 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : lambda(1, 3) : FUNCTION[BV:32 -> BOOL]
5 : Lambda578 : BV:32
6 : eq(5, 2) : BOOL
7 : ite(6, 2, 2) : BV:32
8 : lambda(5, 7) : FUNCTION[BV:32 -> BV:32]
9 : map(4, 8) : MAP[BV:32 -> BV:32]
10 : sym_const(9) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : Lambda18 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda19 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967294 ] -> 0, [ 4294967295; 4294967295 ] -> 128, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3718480039 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3718480040; 3718480043 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3718480044; 4294967291 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4294967292; 4294967295 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3718480040 { 0xdda380a8 -576487256 -1.27736377e60 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967294 ] -> 0, [ 4294967295; 4294967295 ] -> 128, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1537132368 { 0x5b9ec750 +1.24045753e56 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3718480040 { 0xdda380a8 -576487256 -1.27736377e60 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3718480043 { 0xdda380ab -576487253 -1.27736413e60 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-8.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
391162385
=counter_example_end
=global nodece 16 num_edges_traversed 2
=global nodece 16 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 17
=global nodece 17 nodece z3.ce558.num_edges_traversed1
=global nodece 17 nodece_path
=global nodece 17 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 17 nodece_cached_counterexample
=counter_example_begin z3.ce558 b3a7623b37d9126f594dd08572b2a4f2
=input.spec-%var-n-1
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1823132657 { 0x6caacbf1 +1.33434879e90 } : BV:32
=input.spec-%var-m-0.L3%6%bbentry
1 : Lambda569 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : eq(1, 2) : BOOL
10 : or(8, 9) : BOOL
11 : lambda(1, 10) : FUNCTION[BV:32 -> BOOL]
12 : Lambda570 : BV:32
13 : eq(12, 2) : BOOL
14 : bvule(2, 12) : BOOL
15 : bvule(12, 4) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 2, 2) : BV:32
18 : ite(13, 2, 17) : BV:32
19 : lambda(12, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(11, 19) : MAP[BV:32 -> BV:32]
21 : sym_const(20) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : Lambda541 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda542 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%m
1 : 3370867460 { 0xc8eb5b04 -924099836 -1.83871507e18 } : BV:32
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 428757511 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 428757512; 428757515 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 428757516; 3516715647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3516715648; 3516715651 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3516715652; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3516715648 { 0xd19cd280 -778251648 -1.22517395e36 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 428757512 { 0x198e5208 +1.11187839e180 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-m-0.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1733897150 { 0x67592bbe +1.69664740e79 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 428757512 { 0x198e5208 +1.11187839e180 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 428757515 { 0x198e520b +1.11187875e180 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3516715648 { 0xd19cd280 -778251648 -1.22517395e36 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3516715651 { 0xd19cd283 -778251645 -1.22517430e36 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-8.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
761135030
=counter_example_end
=global nodece 17 num_edges_traversed 1
=global nodece 17 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 18
=global nodece 18 nodece z3.ce748.num_edges_traversed2
=global nodece 18 nodece_path
=global nodece 18 nodece_path.graph_edge_composition
(epsilon)
=global nodece 18 nodece_cached_counterexample
=counter_example_begin z3.ce748 1e22bbdf1b9d9b527b11ea2659cd3c4
=input.spec-%var-n-1
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1823132658 { 0x6caacbf2 +1.33434891e90 } : BV:32
=input.spec-%var-m-0.L3%6%bbentry
1 : Lambda657 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : eq(1, 2) : BOOL
10 : or(8, 9) : BOOL
11 : 1 { 0x1 +1.11e129 } : BV:32
12 : eq(1, 11) : BOOL
13 : or(10, 12) : BOOL
14 : lambda(1, 13) : FUNCTION[BV:32 -> BOOL]
15 : Lambda658 : BV:32
16 : eq(15, 11) : BOOL
17 : eq(15, 2) : BOOL
18 : bvule(2, 15) : BOOL
19 : bvule(15, 4) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : ite(17, 2, 21) : BV:32
23 : ite(16, 11, 22) : BV:32
24 : lambda(15, 23) : FUNCTION[BV:32 -> BV:32]
25 : map(14, 24) : MAP[BV:32 -> BV:32]
26 : sym_const(25) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : Lambda541 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda542 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%m
1 : 3370867460 { 0xc8eb5b04 -924099836 -1.83871507e18 } : BV:32
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 428757511 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 428757512; 428757515 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 428757516; 3516715647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3516715648; 3516715651 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3516715652; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3516715648 { 0xd19cd280 -778251648 -1.22517395e36 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 428757512 { 0x198e5208 +1.11187839e180 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 3370867463 ] -> 0, [ 3370867464; 3370867464 ] -> 1, [ 3370867465; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-m-0.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1733897151 { 0x67592bbf +1.69664752e79 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 428757512 { 0x198e5208 +1.11187839e180 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 428757515 { 0x198e520b +1.11187875e180 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3516715648 { 0xd19cd280 -778251648 -1.22517395e36 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3516715651 { 0xd19cd283 -778251645 -1.22517430e36 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-8.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
761135030
=counter_example_end
=global nodece 18 num_edges_traversed 2
=global nodece 18 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 19
=global nodece 19 nodece z3.ce762.num_edges_traversed1
=global nodece 19 nodece_path
=global nodece 19 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 19 nodece_cached_counterexample
=counter_example_begin z3.ce762 5a401d6c1b150d7def44dbfe9a8d44
=input.spec-%var-n-1
1 : 32 { 0x20 +1.381e129 } : BV:32
=input.spec-%tmpvar-0.L3%7%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry
1 : 2309816328 { 0x89ad0008 -1985150968 -1.35156345e148 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1507538375 { 0x59db35c7 +1.71257865e52 } : BV:32
=input.spec-%tmpvar-3.L3%6%bbentry
1 : Lambda708 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2 { 0x2 +1.23e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : eq(1, 8) : BOOL
17 : or(15, 16) : BOOL
18 : lambda(1, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda709 : BV:32
20 : eq(19, 8) : BOOL
21 : bvule(2, 19) : BOOL
22 : bvule(19, 10) : BOOL
23 : and(21, 22) : BOOL
24 : ite(23, 2, 2) : BV:32
25 : ite(20, 8, 24) : BV:32
26 : lambda(19, 25) : FUNCTION[BV:32 -> BV:32]
27 : map(18, 26) : MAP[BV:32 -> BV:32]
28 : sym_const(27) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-m-0.L3%6%bbentry
1 : Lambda712 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2 { 0x2 +1.23e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : eq(1, 8) : BOOL
17 : or(15, 16) : BOOL
18 : lambda(1, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda713 : BV:32
20 : eq(19, 8) : BOOL
21 : bvule(2, 19) : BOOL
22 : bvule(19, 10) : BOOL
23 : and(21, 22) : BOOL
24 : ite(23, 2, 2) : BV:32
25 : ite(20, 8, 24) : BV:32
26 : lambda(19, 25) : FUNCTION[BV:32 -> BV:32]
27 : map(18, 26) : MAP[BV:32 -> BV:32]
28 : sym_const(27) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : Lambda693 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda694 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%m
1 : 2309816316 { 0x89acfffc -1985150980 -1.35156202e148 } : BV:32
=input.dst.llvm-%n
1 : 32 { 0x20 +1.381e129 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 3988725843 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3988725844; 3988725847 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3988725848; 4185830607 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4185830608; 4185830611 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 4185830612; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3988725844 { 0xedbf2054 -306241452 -1.49317407e92 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4185830608 { 0xf97eb4d0 -109136688 -1.98989295e115 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 2309816327 ] -> 0, [ 2309816328; 2309816328 ] -> 3, [ 2309816329; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 32 { 0x20 +1.381e129 } : BV:32
=input.spec-%tmpvar-2.L3%6%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-m-0.L3%6%bbentry.0.1
1 : ([ 0; 2 ] -> true, [ 3; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%4a6096e63df7dc5991ad505e64cd4823.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 12 { 0xc +1.143e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 2075451572 { 0x7bb4e0b4 +1.41310739e120 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%4a6096e63df7dc5991ad505e64cd4823.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 12 { 0xc +1.143e129 } : BV:32
=input.dst.llvm-%4a6096e63df7dc5991ad505e64cd4823.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 2309816328 { 0x89ad0008 -1985150968 -1.35156345e148 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%inc.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4185830608 { 0xf97eb4d0 -109136688 -1.98989295e115 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 4185830611 { 0xf97eb4d3 -109136685 -1.98989331e115 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3988725844 { 0xedbf2054 -306241452 -1.49317407e92 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3988725847 { 0xedbf2057 -306241449 -1.49317443e92 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-8.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
3231215427
=counter_example_end
=global nodece 19 num_edges_traversed 1
=global nodece 19 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 20
=global nodece 20 nodece z3.ce792.num_edges_traversed2
=global nodece 20 nodece_path
=global nodece 20 nodece_path.graph_edge_composition
(epsilon)
=global nodece 20 nodece_cached_counterexample
=counter_example_begin z3.ce792 667ef99865cfa6b943c535a64be97ae
=input.spec-%var-n-1
1 : 32 { 0x20 +1.381e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1507538376 { 0x59db35c8 +1.71257877e52 } : BV:32
=input.spec-%var-m-0.L3%6%bbentry
1 : Lambda720 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2 { 0x2 +1.23e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : eq(1, 8) : BOOL
17 : or(15, 16) : BOOL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : eq(1, 18) : BOOL
20 : or(17, 19) : BOOL
21 : lambda(1, 20) : FUNCTION[BV:32 -> BOOL]
22 : Lambda721 : BV:32
23 : eq(22, 18) : BOOL
24 : eq(22, 8) : BOOL
25 : bvule(2, 22) : BOOL
26 : bvule(22, 10) : BOOL
27 : and(25, 26) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(24, 8, 28) : BV:32
30 : ite(23, 18, 29) : BV:32
31 : lambda(22, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(21, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : Lambda693 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda694 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%m
1 : 2309816316 { 0x89acfffc -1985150980 -1.35156202e148 } : BV:32
=input.dst.llvm-%n
1 : 32 { 0x20 +1.381e129 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 3988725843 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3988725844; 3988725847 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3988725848; 4185830607 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4185830608; 4185830611 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 4185830612; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3988725844 { 0xedbf2054 -306241452 -1.49317407e92 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4185830608 { 0xf97eb4d0 -109136688 -1.98989295e115 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 2309816327 ] -> 0, [ 2309816328; 2309816328 ] -> 3, [ 2309816329; 2309816331 ] -> 0, [ 2309816332; 2309816332 ] -> 4, [ 2309816333; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 32 { 0x20 +1.381e129 } : BV:32
=input.spec-%var-m-0.L3%6%bbentry.0.1
1 : ([ 0; 2 ] -> true, [ 3; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 2075451573 { 0x7bb4e0b5 +1.41310751e120 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4185830608 { 0xf97eb4d0 -109136688 -1.98989295e115 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 4185830611 { 0xf97eb4d3 -109136685 -1.98989331e115 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3988725844 { 0xedbf2054 -306241452 -1.49317407e92 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3988725847 { 0xedbf2057 -306241449 -1.49317443e92 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-8.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
3231215427
=counter_example_end
=global nodece 20 num_edges_traversed 2
=global nodece 20 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 21
=global nodece 21 nodece z3.ce815.num_edges_traversed1
=global nodece 21 nodece_path
=global nodece 21 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 21 nodece_cached_counterexample
=counter_example_begin z3.ce815 2c9b92e078cfc2603f76a25615bd417c
=input.spec-%var-n-1
1 : 6 { 0x6 +1.71e129 } : BV:32
=input.spec-%tmpvar-0.L3%7%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry
1 : 2147483660 { 0x8000000c -2147483636 -1.143e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1632906161 { 0x61542bb1 +1.65758335e67 } : BV:32
=input.spec-%tmpvar-3.L3%6%bbentry
1 : Lambda771 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : eq(1, 8) : BOOL
17 : or(15, 16) : BOOL
18 : lambda(1, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda772 : BV:32
20 : eq(19, 8) : BOOL
21 : bvule(2, 19) : BOOL
22 : bvule(19, 10) : BOOL
23 : and(21, 22) : BOOL
24 : ite(23, 2, 2) : BV:32
25 : ite(20, 8, 24) : BV:32
26 : lambda(19, 25) : FUNCTION[BV:32 -> BV:32]
27 : map(18, 26) : MAP[BV:32 -> BV:32]
28 : sym_const(27) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-m-0.L3%6%bbentry
1 : Lambda775 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : eq(1, 8) : BOOL
17 : or(15, 16) : BOOL
18 : lambda(1, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda776 : BV:32
20 : eq(19, 8) : BOOL
21 : bvule(2, 19) : BOOL
22 : bvule(19, 10) : BOOL
23 : and(21, 22) : BOOL
24 : ite(23, 2, 2) : BV:32
25 : ite(20, 8, 24) : BV:32
26 : lambda(19, 25) : FUNCTION[BV:32 -> BV:32]
27 : map(18, 26) : MAP[BV:32 -> BV:32]
28 : sym_const(27) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : Lambda756 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda757 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%m
1 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
=input.dst.llvm-%n
1 : 6 { 0x6 +1.71e129 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 1047199675 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1047199676; 1047199679 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1047199680; 3577380855 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3577380856; 3577380859 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3577380860; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3577380856 { 0xd53a7ff8 -717586440 -1.45703029e43 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1047199676 { 0x3e6affbc +1.83592939e253 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 2147483659 ] -> 0, [ 2147483660; 2147483660 ] -> 4, [ 2147483661; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 6 { 0x6 +1.71e129 } : BV:32
=input.spec-%tmpvar-2.L3%6%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%var-m-0.L3%6%bbentry.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%4a6096e63df7dc5991ad505e64cd4823.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1104064350 { 0x41ceaf5e +1.61472678e4 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%4a6096e63df7dc5991ad505e64cd4823.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%4a6096e63df7dc5991ad505e64cd4823.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 2147483660 { 0x8000000c -2147483636 -1.143e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%inc.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1047199676 { 0x3e6affbc +1.83592939e253 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1047199679 { 0x3e6affbf +1.83592975e253 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3577380856 { 0xd53a7ff8 -717586440 -1.45703029e43 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3577380859 { 0xd53a7ffb -717586437 -1.45703065e43 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-8.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
685534922
=counter_example_end
=global nodece 21 num_edges_traversed 1
=global nodece 21 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 22
=global nodece 22 nodece z3.ce845.num_edges_traversed2
=global nodece 22 nodece_path
=global nodece 22 nodece_path.graph_edge_composition
(epsilon)
=global nodece 22 nodece_cached_counterexample
=counter_example_begin z3.ce845 a5891a8cfab1b598623e5598e094e9c8
=input.spec-%var-n-1
1 : 6 { 0x6 +1.71e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 6 { 0x6 +1.71e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1632906162 { 0x61542bb2 +1.65758347e67 } : BV:32
=input.spec-%var-m-0.L3%6%bbentry
1 : Lambda783 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : eq(1, 8) : BOOL
17 : or(15, 16) : BOOL
18 : 5 { 0x5 +1.59e129 } : BV:32
19 : eq(1, 18) : BOOL
20 : or(17, 19) : BOOL
21 : lambda(1, 20) : FUNCTION[BV:32 -> BOOL]
22 : Lambda784 : BV:32
23 : eq(22, 18) : BOOL
24 : eq(22, 8) : BOOL
25 : bvule(2, 22) : BOOL
26 : bvule(22, 10) : BOOL
27 : and(25, 26) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(24, 8, 28) : BV:32
30 : ite(23, 18, 29) : BV:32
31 : lambda(22, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(21, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : Lambda756 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda757 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%m
1 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
=input.dst.llvm-%n
1 : 6 { 0x6 +1.71e129 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 1047199675 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1047199676; 1047199679 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1047199680; 3577380855 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3577380856; 3577380859 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3577380860; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3577380856 { 0xd53a7ff8 -717586440 -1.45703029e43 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1047199676 { 0x3e6affbc +1.83592939e253 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 2147483659 ] -> 0, [ 2147483660; 2147483660 ] -> 4, [ 2147483661; 2147483663 ] -> 0, [ 2147483664; 2147483664 ] -> 5, [ 2147483665; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 6 { 0x6 +1.71e129 } : BV:32
=input.spec-%var-m-0.L3%6%bbentry.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 6 { 0x6 +1.71e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1104064351 { 0x41ceaf5f +1.61472690e4 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1047199676 { 0x3e6affbc +1.83592939e253 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1047199679 { 0x3e6affbf +1.83592975e253 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3577380856 { 0xd53a7ff8 -717586440 -1.45703029e43 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3577380859 { 0xd53a7ffb -717586437 -1.45703065e43 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-8.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
685534922
=counter_example_end
=global nodece 22 num_edges_traversed 2
=global nodece 22 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 23
=global nodece 23 nodece z3.ce868.num_edges_traversed0
=global nodece 23 nodece_path
=global nodece 23 nodece_path.graph_edge_composition
(epsilon)
=global nodece 23 nodece_cached_counterexample
=counter_example_begin z3.ce868 1d5cd3d48d8659d69ba151976748cc
=input.spec-%var-n-1
1 : 6175698 { 0x5e3bd2 +1.73620057e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 6175698 { 0x5e3bd2 +1.73620057e129 } : BV:32
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-m-0.L3%6%bbentry
1 : Lambda899 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 6175697 { 0x5e3bd1 +1.73620045e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 6175698 { 0x5e3bd2 +1.73620057e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda900 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : Lambda903 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda904 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 6175698 { 0x5e3bd2 +1.73620057e129 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 1091555911 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1091555912; 1091555915 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1091555916; 2628009163 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2628009164; 2628009167 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2628009168; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2628009164 { 0x9ca43ccc -1666958132 -1.28310537e186 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1091555912 { 0x410fd248 +1.12360477e3 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 6175698 { 0x5e3bd2 +1.73620057e129 } : BV:32
=input.spec-%var-m-0.L3%6%bbentry.0.1
1 : ([ 0; 6175697 ] -> true, [ 6175698; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 6175698 { 0x5e3bd2 +1.73620057e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1091555912 { 0x410fd248 +1.12360477e3 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1091555915 { 0x410fd24b +1.12360513e3 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2628009164 { 0x9ca43ccc -1666958132 -1.28310537e186 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2628009167 { 0x9ca43ccf -1666958129 -1.28310573e186 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-8.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
136305910
=counter_example_end
=global nodece 23 num_edges_traversed 0
=global nodece 23 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 24
=global nodece 24 nodece z3v487.ce869.num_edges_traversed0
=global nodece 24 nodece_path
=global nodece 24 nodece_path.graph_edge_composition
(epsilon)
=global nodece 24 nodece_cached_counterexample
=counter_example_begin z3v487.ce869 d062edd0f74a1c61073a5dd5c6b8c7a
=input.spec-%var-n-1
1 : 1140976729 { 0x4401ec59 +1.1502525e9 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1140976729 { 0x4401ec59 +1.1502525e9 } : BV:32
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-m-0.L3%6%bbentry
1 : Lambda911 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1140976728 { 0x4401ec58 +1.1502513e9 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1140976729 { 0x4401ec59 +1.1502525e9 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda912 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : Lambda915 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda916 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 1140976729 { 0x4401ec59 +1.1502525e9 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 227 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 228; 231 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 232; 367 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 368; 371 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 372; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 368 { 0x170 +1.4386e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 228 { 0xe4 +1.2717e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 1140976729 { 0x4401ec59 +1.1502525e9 } : BV:32
=input.spec-%var-m-0.L3%6%bbentry.0.1
1 : ([ 0; 1140976728 ] -> true, [ 1140976729; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1140976729 { 0x4401ec59 +1.1502525e9 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 228 { 0xe4 +1.2717e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 231 { 0xe7 +1.2753e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 368 { 0x170 +1.4386e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 371 { 0x173 +1.4422e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-8.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
1062468737
=counter_example_end
=global nodece 24 num_edges_traversed 0
=global nodece 24 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 25
=global nodece 25 nodece z3v487.ce1099.num_edges_traversed2
=global nodece 25 nodece_path
=global nodece 25 nodece_path.graph_edge_composition
(epsilon)
=global nodece 25 nodece_cached_counterexample
=counter_example_begin z3v487.ce1099 94393f4ebccfe657413fde90ffd04ef
=retaddr_const
1 : 1728220986 { 0x67028f3a +1.1999592e79 } : BV:32
=input.spec-%var-n-1
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-0.L3%7%d
1 : 1 { 0x1 } : BOOL
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-5.E0%0%d
1 : Lambda18 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda19 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.E0%0%d
1 : Lambda18 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda19 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.spec-%var-m-0.L3%6%bbentry
1 : Lambda18 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda19 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-6.E0%0%d
1 : Lambda18 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda19 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : Lambda18 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda19 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 8; 131071 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 131072; 131075 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 131076; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 131072 { 0x20000 +1.1562500e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.E0%0%d
1 : Lambda18 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda19 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-indir_tgt.E0%0%d
1 : 1728220986 { 0x67028f3a +1.1999592e79 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 988310424 { 0x3ae86b98 +1.81578350e246 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1610438063 { 0x5ffd55af +1.97917735e64 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 131072 { 0x20000 +1.1562500e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 131075 { 0x20003 +1.1562535e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-8.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
4159958888
=counter_example_end
=global nodece 25 num_edges_traversed 2
=global nodece 25 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 26
=global nodece 26 nodece z3.ce1069.num_edges_traversed2
=global nodece 26 nodece_path
=global nodece 26 nodece_path.graph_edge_composition
(epsilon)
=global nodece 26 nodece_cached_counterexample
=counter_example_begin z3.ce1069 2fd3c191b82eeff9b330ab496961857
=retaddr_const
1 : 1792942131 { 0x6ade2033 +1.73535764e86 } : BV:32
=input.spec-%var-n-1
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-0.L3%7%d
1 : 1 { 0x1 } : BOOL
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-5.E0%0%d
1 : Lambda18 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda19 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.E0%0%d
1 : Lambda18 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda19 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.spec-%var-m-0.L3%6%bbentry
1 : Lambda18 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda19 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-6.E0%0%d
1 : Lambda18 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda19 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : Lambda18 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda19 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%m
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967291 ] -> 0, [ 4294967292; 4294967292 ] -> 4, [ 4294967293; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 4294967287 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4294967288; 4294967291 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4294967292; 4294967295 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967291 ] -> 0, [ 4294967292; 4294967292 ] -> 4, [ 4294967293; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.E0%0%d
1 : Lambda18 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda19 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-indir_tgt.E0%0%d
1 : 1792942131 { 0x6ade2033 +1.73535764e86 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 137685777 { 0x834eb11 +1.41342365e145 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1823059443 { 0x6ca9adf3 +1.32562100e90 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-8.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
2647962325
=counter_example_end
=global nodece 26 num_edges_traversed 2
=global nodece 26 nodece_visted_pcs: 
E0%0%d_E0%0%d
=graph_with_ce done
=point_set for reason inductive-invariants
=inductive-invariants point_set global exprs map
=inductive-invariants point_set point_expr 1
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : bvuge(1, 10) : BOOL
18 : bvule(1, 11) : BOOL
19 : and(17, 18) : BOOL
20 : bvuge(2, 10) : BOOL
21 : bvule(2, 11) : BOOL
22 : and(20, 21) : BOOL
23 : not(22) : BOOL
24 : andnot1(19, 23) : BOOL
25 : bvuge(10, 1) : BOOL
26 : bvule(10, 2) : BOOL
27 : and(25, 26) : BOOL
28 : bvuge(11, 1) : BOOL
29 : bvule(11, 2) : BOOL
30 : and(28, 29) : BOOL
31 : not(30) : BOOL
32 : andnot1(27, 31) : BOOL
33 : and(24, 32) : BOOL
34 : and(16, 33) : BOOL
35 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
36 : 3 { 0x3 +1.35e129 } : BV:32
37 : bvand(35, 36) : BV:32
38 : 0 { 0x0 +1.0e129 } : BV:32
39 : eq(37, 38) : BOOL
40 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
41 : bvand(40, 36) : BV:32
42 : eq(41, 38) : BOOL
43 : and(39, 42) : BOOL
44 : and(34, 43) : BOOL
45 : eq(35, 1) : BOOL
46 : eq(40, 10) : BOOL
47 : and(45, 46) : BOOL
48 : and(44, 47) : BOOL
49 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
50 : 1 { 0x1 +1.11e129 } : BV:32
51 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
52 : region_agrees_with_memlabel(49, 38, 50, 51) : BOOL
53 : and(48, 52) : BOOL
=inductive-invariants point_set point_expr 2
1 : input.spec-%var-n-1 : BV:32
=inductive-invariants point_set point_expr 3
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
=inductive-invariants point_set point_expr 4
1 : input.spec-%var-n-0.L3%6%bbentry : BV:32
=inductive-invariants point_set point_expr 5
1 : input.dst.llvm-%m : BV:32
=inductive-invariants point_set point_expr 6
1 : input.dst.llvm-%n : BV:32
=inductive-invariants point_set point_expr 7
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=inductive-invariants point_set point_expr 8
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 9
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 10
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 11
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 12
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 13
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 14
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 15
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 16
1 : input.spec-%var-m-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 17
1 : input.spec-%var-m-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%m : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : bvadd(14, 5) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(10, 11, 12, 15, 16, 17) : BV:32
19 : lambda(9, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(8, 19) : MAP[BV:32 -> BV:32]
21 : eq(1, 20) : BOOL
=inductive-invariants point_set point_expr 18
1 : input.spec-%var-m-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 19
1 : input.spec-%tmpvar-10.E0%0%d : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 20
1 : spec-%var-m-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : SORT2EXPR.VAR : MAP[BV:32 -> BV:32]
3 : map_init(2) : MAP[BV:32 -> BV:32]
4 : eq(1, 3) : BOOL
=inductive-invariants point_set point_expr 21
1 : spec-%tmpvar-8.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : SORT2EXPR.VAR : MAP[BV:32 -> BV:32]
3 : map_init(2) : MAP[BV:32 -> BV:32]
4 : eq(1, 3) : BOOL
=inductive-invariants point_set global exprs map done
=inductive-invariants point_set points
=inductive-invariants point_set point z3v487.ce3
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 val 2 for input.spec-%var-n-1
0
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 val 3 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 val 4 for input.spec-%var-n-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 val 5 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 val 6 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 done
=inductive-invariants point_set point z3.ce4
=inductive-invariants point_set point z3.ce4 expr point z3.ce4
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 val 2 for input.spec-%var-n-1
0
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 val 3 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 val 4 for input.spec-%var-n-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 val 5 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 val 6 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 done
=inductive-invariants point_set point z3.ce113
=inductive-invariants point_set point z3.ce113 expr point z3.ce113
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 2 for input.spec-%var-n-1
2147483648
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 3 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 4 for input.spec-%var-n-0.L3%6%bbentry
2147483648
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 5 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 6 for input.dst.llvm-%n
2147483648
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 done
=inductive-invariants point_set point z3.ce91
=inductive-invariants point_set point z3.ce91 expr point z3.ce91
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 2 for input.spec-%var-n-1
4294967295
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 3 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 4 for input.spec-%var-n-0.L3%6%bbentry
4294967295
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 5 for input.dst.llvm-%m
4294967040
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 6 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 done
=inductive-invariants point_set point z3.ce69
=inductive-invariants point_set point z3.ce69 expr point z3.ce69
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 2 for input.spec-%var-n-1
1
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 3 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 4 for input.spec-%var-n-0.L3%6%bbentry
1
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 5 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 6 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 done
=inductive-invariants point_set point z3v487.ce70
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 2 for input.spec-%var-n-1
16843009
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 3 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 4 for input.spec-%var-n-0.L3%6%bbentry
16843009
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 5 for input.dst.llvm-%m
16843008
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 6 for input.dst.llvm-%n
16843009
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 done
=inductive-invariants point_set point z3v487.ce25
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 2 for input.spec-%var-n-1
67372036
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 3 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 4 for input.spec-%var-n-0.L3%6%bbentry
67372036
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 5 for input.dst.llvm-%m
67372032
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 6 for input.dst.llvm-%n
67372036
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 done
=inductive-invariants point_set point z3v487.ce92
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 2 for input.spec-%var-n-1
4294967295
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 3 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 4 for input.spec-%var-n-0.L3%6%bbentry
4294967295
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 5 for input.dst.llvm-%m
4294967040
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 6 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 done
=inductive-invariants point_set point z3.ce26
=inductive-invariants point_set point z3.ce26 expr point z3.ce26
=inductive-invariants point_set point z3.ce26 expr point z3.ce26 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce26 expr point z3.ce26 val 2 for input.spec-%var-n-1
256
=inductive-invariants point_set point z3.ce26 expr point z3.ce26 val 3 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce26 expr point z3.ce26 val 4 for input.spec-%var-n-0.L3%6%bbentry
256
=inductive-invariants point_set point z3.ce26 expr point z3.ce26 val 5 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce26 expr point z3.ce26 val 6 for input.dst.llvm-%n
256
=inductive-invariants point_set point z3.ce26 expr point z3.ce26 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce26 expr point z3.ce26 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce26 expr point z3.ce26 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce26 expr point z3.ce26 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce26 expr point z3.ce26 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce26 expr point z3.ce26 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce26 expr point z3.ce26 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce26 expr point z3.ce26 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce26 expr point z3.ce26 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce26 expr point z3.ce26 done
=inductive-invariants point_set point z3v487.ce548
=inductive-invariants point_set point z3v487.ce548 expr point z3v487.ce548
=inductive-invariants point_set point z3v487.ce548 expr point z3v487.ce548 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce548 expr point z3v487.ce548 val 2 for input.spec-%var-n-1
4294967295
=inductive-invariants point_set point z3v487.ce548 expr point z3v487.ce548 val 3 for input.spec-%var-i-0.L3%6%bbentry
1
=inductive-invariants point_set point z3v487.ce548 expr point z3v487.ce548 val 4 for input.spec-%var-n-0.L3%6%bbentry
4294967295
=inductive-invariants point_set point z3v487.ce548 expr point z3v487.ce548 val 5 for input.dst.llvm-%m
302120976
=inductive-invariants point_set point z3v487.ce548 expr point z3v487.ce548 val 6 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3v487.ce548 expr point z3v487.ce548 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce548 expr point z3v487.ce548 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce548 expr point z3v487.ce548 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce548 expr point z3v487.ce548 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce548 expr point z3v487.ce548 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce548 expr point z3v487.ce548 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce548 expr point z3v487.ce548 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce548 expr point z3v487.ce548 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce548 expr point z3v487.ce548 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce548 expr point z3v487.ce548 done
=inductive-invariants point_set point z3.ce558
=inductive-invariants point_set point z3.ce558 expr point z3.ce558
=inductive-invariants point_set point z3.ce558 expr point z3.ce558 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce558 expr point z3.ce558 val 2 for input.spec-%var-n-1
4294967295
=inductive-invariants point_set point z3.ce558 expr point z3.ce558 val 3 for input.spec-%var-i-0.L3%6%bbentry
1
=inductive-invariants point_set point z3.ce558 expr point z3.ce558 val 4 for input.spec-%var-n-0.L3%6%bbentry
4294967295
=inductive-invariants point_set point z3.ce558 expr point z3.ce558 val 5 for input.dst.llvm-%m
3370867460
=inductive-invariants point_set point z3.ce558 expr point z3.ce558 val 6 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3.ce558 expr point z3.ce558 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce558 expr point z3.ce558 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce558 expr point z3.ce558 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce558 expr point z3.ce558 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce558 expr point z3.ce558 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce558 expr point z3.ce558 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce558 expr point z3.ce558 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce558 expr point z3.ce558 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce558 expr point z3.ce558 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce558 expr point z3.ce558 done
=inductive-invariants point_set point z3.ce47
=inductive-invariants point_set point z3.ce47 expr point z3.ce47
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 2 for input.spec-%var-n-1
0
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 3 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 4 for input.spec-%var-n-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 5 for input.dst.llvm-%m
4
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 6 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 done
=inductive-invariants point_set point z3v487.ce48
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 2 for input.spec-%var-n-1
0
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 3 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 4 for input.spec-%var-n-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 5 for input.dst.llvm-%m
4
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 6 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 done
=inductive-invariants point_set point z3v487.ce114
=inductive-invariants point_set point z3v487.ce114 expr point z3v487.ce114
=inductive-invariants point_set point z3v487.ce114 expr point z3v487.ce114 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce114 expr point z3v487.ce114 val 2 for input.spec-%var-n-1
2147483648
=inductive-invariants point_set point z3v487.ce114 expr point z3v487.ce114 val 3 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce114 expr point z3v487.ce114 val 4 for input.spec-%var-n-0.L3%6%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce114 expr point z3v487.ce114 val 5 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce114 expr point z3v487.ce114 val 6 for input.dst.llvm-%n
2147483648
=inductive-invariants point_set point z3v487.ce114 expr point z3v487.ce114 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce114 expr point z3v487.ce114 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce114 expr point z3v487.ce114 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce114 expr point z3v487.ce114 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce114 expr point z3v487.ce114 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce114 expr point z3v487.ce114 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce114 expr point z3v487.ce114 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce114 expr point z3v487.ce114 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce114 expr point z3v487.ce114 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce114 expr point z3v487.ce114 done
=inductive-invariants point_set point z3.ce135
=inductive-invariants point_set point z3.ce135 expr point z3.ce135
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 2 for input.spec-%var-n-1
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 3 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 4 for input.spec-%var-n-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 5 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 6 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 done
=inductive-invariants point_set point z3v487.ce136
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 2 for input.spec-%var-n-1
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 3 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 4 for input.spec-%var-n-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 5 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 6 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 done
=inductive-invariants point_set point z3.ce157
=inductive-invariants point_set point z3.ce157 expr point z3.ce157
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 2 for input.spec-%var-n-1
0
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 3 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 4 for input.spec-%var-n-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 5 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 6 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 done
=inductive-invariants point_set point z3v487.ce158
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 2 for input.spec-%var-n-1
0
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 3 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 4 for input.spec-%var-n-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 5 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 6 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 done
=inductive-invariants point_set point z3v487.ce180
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 2 for input.spec-%var-n-1
0
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 3 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 4 for input.spec-%var-n-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 5 for input.dst.llvm-%m
252
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 6 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 done
=inductive-invariants point_set point z3.ce179
=inductive-invariants point_set point z3.ce179 expr point z3.ce179
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 2 for input.spec-%var-n-1
1
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 3 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 4 for input.spec-%var-n-0.L3%6%bbentry
1
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 5 for input.dst.llvm-%m
248
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 6 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 done
=inductive-invariants point_set point z3v487.ce223
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 2 for input.spec-%var-n-1
1
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 3 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 4 for input.spec-%var-n-0.L3%6%bbentry
1
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 5 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 6 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 done
=inductive-invariants point_set point z3.ce245
=inductive-invariants point_set point z3.ce245 expr point z3.ce245
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 2 for input.spec-%var-n-1
0
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 3 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 4 for input.spec-%var-n-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 5 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 6 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 done
=inductive-invariants point_set point z3.ce201
=inductive-invariants point_set point z3.ce201 expr point z3.ce201
=inductive-invariants point_set point z3.ce201 expr point z3.ce201 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce201 expr point z3.ce201 val 2 for input.spec-%var-n-1
0
=inductive-invariants point_set point z3.ce201 expr point z3.ce201 val 3 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce201 expr point z3.ce201 val 4 for input.spec-%var-n-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce201 expr point z3.ce201 val 5 for input.dst.llvm-%m
4
=inductive-invariants point_set point z3.ce201 expr point z3.ce201 val 6 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce201 expr point z3.ce201 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce201 expr point z3.ce201 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce201 expr point z3.ce201 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce201 expr point z3.ce201 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce201 expr point z3.ce201 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce201 expr point z3.ce201 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce201 expr point z3.ce201 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce201 expr point z3.ce201 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce201 expr point z3.ce201 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce201 expr point z3.ce201 done
=inductive-invariants point_set point z3v487.ce202
=inductive-invariants point_set point z3v487.ce202 expr point z3v487.ce202
=inductive-invariants point_set point z3v487.ce202 expr point z3v487.ce202 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce202 expr point z3v487.ce202 val 2 for input.spec-%var-n-1
0
=inductive-invariants point_set point z3v487.ce202 expr point z3v487.ce202 val 3 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce202 expr point z3v487.ce202 val 4 for input.spec-%var-n-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce202 expr point z3v487.ce202 val 5 for input.dst.llvm-%m
4
=inductive-invariants point_set point z3v487.ce202 expr point z3v487.ce202 val 6 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce202 expr point z3v487.ce202 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce202 expr point z3v487.ce202 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce202 expr point z3v487.ce202 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce202 expr point z3v487.ce202 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce202 expr point z3v487.ce202 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce202 expr point z3v487.ce202 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce202 expr point z3v487.ce202 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce202 expr point z3v487.ce202 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce202 expr point z3v487.ce202 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce202 expr point z3v487.ce202 done
=inductive-invariants point_set point z3.ce224
=inductive-invariants point_set point z3.ce224 expr point z3.ce224
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 2 for input.spec-%var-n-1
1
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 3 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 4 for input.spec-%var-n-0.L3%6%bbentry
1
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 5 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 6 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 done
=inductive-invariants point_set point z3v487.ce246
=inductive-invariants point_set point z3v487.ce246 expr point z3v487.ce246
=inductive-invariants point_set point z3v487.ce246 expr point z3v487.ce246 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce246 expr point z3v487.ce246 val 2 for input.spec-%var-n-1
0
=inductive-invariants point_set point z3v487.ce246 expr point z3v487.ce246 val 3 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce246 expr point z3v487.ce246 val 4 for input.spec-%var-n-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce246 expr point z3v487.ce246 val 5 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce246 expr point z3v487.ce246 val 6 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce246 expr point z3v487.ce246 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce246 expr point z3v487.ce246 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce246 expr point z3v487.ce246 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce246 expr point z3v487.ce246 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce246 expr point z3v487.ce246 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce246 expr point z3v487.ce246 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce246 expr point z3v487.ce246 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce246 expr point z3v487.ce246 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce246 expr point z3v487.ce246 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce246 expr point z3v487.ce246 done
=inductive-invariants point_set point z3v487.ce629
=inductive-invariants point_set point z3v487.ce629 expr point z3v487.ce629
=inductive-invariants point_set point z3v487.ce629 expr point z3v487.ce629 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce629 expr point z3v487.ce629 val 2 for input.spec-%var-n-1
67372036
=inductive-invariants point_set point z3v487.ce629 expr point z3v487.ce629 val 3 for input.spec-%var-i-0.L3%6%bbentry
2
=inductive-invariants point_set point z3v487.ce629 expr point z3v487.ce629 val 4 for input.spec-%var-n-0.L3%6%bbentry
67372036
=inductive-invariants point_set point z3v487.ce629 expr point z3v487.ce629 val 5 for input.dst.llvm-%m
67372032
=inductive-invariants point_set point z3v487.ce629 expr point z3v487.ce629 val 6 for input.dst.llvm-%n
67372036
=inductive-invariants point_set point z3v487.ce629 expr point z3v487.ce629 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3v487.ce629 expr point z3v487.ce629 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce629 expr point z3v487.ce629 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce629 expr point z3v487.ce629 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce629 expr point z3v487.ce629 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce629 expr point z3v487.ce629 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce629 expr point z3v487.ce629 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce629 expr point z3v487.ce629 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce629 expr point z3v487.ce629 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce629 expr point z3v487.ce629 done
=inductive-invariants point_set point z3.ce665
=inductive-invariants point_set point z3.ce665 expr point z3.ce665
=inductive-invariants point_set point z3.ce665 expr point z3.ce665 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce665 expr point z3.ce665 val 2 for input.spec-%var-n-1
256
=inductive-invariants point_set point z3.ce665 expr point z3.ce665 val 3 for input.spec-%var-i-0.L3%6%bbentry
2
=inductive-invariants point_set point z3.ce665 expr point z3.ce665 val 4 for input.spec-%var-n-0.L3%6%bbentry
256
=inductive-invariants point_set point z3.ce665 expr point z3.ce665 val 5 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce665 expr point z3.ce665 val 6 for input.dst.llvm-%n
256
=inductive-invariants point_set point z3.ce665 expr point z3.ce665 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3.ce665 expr point z3.ce665 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce665 expr point z3.ce665 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce665 expr point z3.ce665 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce665 expr point z3.ce665 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce665 expr point z3.ce665 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce665 expr point z3.ce665 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce665 expr point z3.ce665 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce665 expr point z3.ce665 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce665 expr point z3.ce665 done
=inductive-invariants point_set point z3.ce695
=inductive-invariants point_set point z3.ce695 expr point z3.ce695
=inductive-invariants point_set point z3.ce695 expr point z3.ce695 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce695 expr point z3.ce695 val 2 for input.spec-%var-n-1
4294967295
=inductive-invariants point_set point z3.ce695 expr point z3.ce695 val 3 for input.spec-%var-i-0.L3%6%bbentry
2
=inductive-invariants point_set point z3.ce695 expr point z3.ce695 val 4 for input.spec-%var-n-0.L3%6%bbentry
4294967295
=inductive-invariants point_set point z3.ce695 expr point z3.ce695 val 5 for input.dst.llvm-%m
4294967040
=inductive-invariants point_set point z3.ce695 expr point z3.ce695 val 6 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3.ce695 expr point z3.ce695 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3.ce695 expr point z3.ce695 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce695 expr point z3.ce695 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce695 expr point z3.ce695 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce695 expr point z3.ce695 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce695 expr point z3.ce695 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce695 expr point z3.ce695 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce695 expr point z3.ce695 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce695 expr point z3.ce695 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce695 expr point z3.ce695 done
=inductive-invariants point_set point z3.ce718
=inductive-invariants point_set point z3.ce718 expr point z3.ce718
=inductive-invariants point_set point z3.ce718 expr point z3.ce718 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce718 expr point z3.ce718 val 2 for input.spec-%var-n-1
2147483648
=inductive-invariants point_set point z3.ce718 expr point z3.ce718 val 3 for input.spec-%var-i-0.L3%6%bbentry
2
=inductive-invariants point_set point z3.ce718 expr point z3.ce718 val 4 for input.spec-%var-n-0.L3%6%bbentry
2147483648
=inductive-invariants point_set point z3.ce718 expr point z3.ce718 val 5 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce718 expr point z3.ce718 val 6 for input.dst.llvm-%n
2147483648
=inductive-invariants point_set point z3.ce718 expr point z3.ce718 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3.ce718 expr point z3.ce718 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce718 expr point z3.ce718 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce718 expr point z3.ce718 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce718 expr point z3.ce718 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce718 expr point z3.ce718 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce718 expr point z3.ce718 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce718 expr point z3.ce718 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce718 expr point z3.ce718 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce718 expr point z3.ce718 done
=inductive-invariants point_set point z3v487.ce763
=inductive-invariants point_set point z3v487.ce763 expr point z3v487.ce763
=inductive-invariants point_set point z3v487.ce763 expr point z3v487.ce763 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce763 expr point z3v487.ce763 val 2 for input.spec-%var-n-1
4
=inductive-invariants point_set point z3v487.ce763 expr point z3v487.ce763 val 3 for input.spec-%var-i-0.L3%6%bbentry
4
=inductive-invariants point_set point z3v487.ce763 expr point z3v487.ce763 val 4 for input.spec-%var-n-0.L3%6%bbentry
4
=inductive-invariants point_set point z3v487.ce763 expr point z3v487.ce763 val 5 for input.dst.llvm-%m
705691856
=inductive-invariants point_set point z3v487.ce763 expr point z3v487.ce763 val 6 for input.dst.llvm-%n
4
=inductive-invariants point_set point z3v487.ce763 expr point z3v487.ce763 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3v487.ce763 expr point z3v487.ce763 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce763 expr point z3v487.ce763 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce763 expr point z3v487.ce763 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce763 expr point z3v487.ce763 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce763 expr point z3v487.ce763 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce763 expr point z3v487.ce763 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce763 expr point z3v487.ce763 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce763 expr point z3v487.ce763 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce763 expr point z3v487.ce763 done
=inductive-invariants point_set point z3.ce762
=inductive-invariants point_set point z3.ce762 expr point z3.ce762
=inductive-invariants point_set point z3.ce762 expr point z3.ce762 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce762 expr point z3.ce762 val 2 for input.spec-%var-n-1
32
=inductive-invariants point_set point z3.ce762 expr point z3.ce762 val 3 for input.spec-%var-i-0.L3%6%bbentry
4
=inductive-invariants point_set point z3.ce762 expr point z3.ce762 val 4 for input.spec-%var-n-0.L3%6%bbentry
32
=inductive-invariants point_set point z3.ce762 expr point z3.ce762 val 5 for input.dst.llvm-%m
2309816316
=inductive-invariants point_set point z3.ce762 expr point z3.ce762 val 6 for input.dst.llvm-%n
32
=inductive-invariants point_set point z3.ce762 expr point z3.ce762 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3.ce762 expr point z3.ce762 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce762 expr point z3.ce762 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce762 expr point z3.ce762 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce762 expr point z3.ce762 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce762 expr point z3.ce762 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce762 expr point z3.ce762 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce762 expr point z3.ce762 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce762 expr point z3.ce762 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce762 expr point z3.ce762 done
=inductive-invariants point_set point z3v487.ce816
=inductive-invariants point_set point z3v487.ce816 expr point z3v487.ce816
=inductive-invariants point_set point z3v487.ce816 expr point z3v487.ce816 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce816 expr point z3v487.ce816 val 2 for input.spec-%var-n-1
5
=inductive-invariants point_set point z3v487.ce816 expr point z3v487.ce816 val 3 for input.spec-%var-i-0.L3%6%bbentry
5
=inductive-invariants point_set point z3v487.ce816 expr point z3v487.ce816 val 4 for input.spec-%var-n-0.L3%6%bbentry
5
=inductive-invariants point_set point z3v487.ce816 expr point z3v487.ce816 val 5 for input.dst.llvm-%m
2147483640
=inductive-invariants point_set point z3v487.ce816 expr point z3v487.ce816 val 6 for input.dst.llvm-%n
5
=inductive-invariants point_set point z3v487.ce816 expr point z3v487.ce816 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
5
=inductive-invariants point_set point z3v487.ce816 expr point z3v487.ce816 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce816 expr point z3v487.ce816 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce816 expr point z3v487.ce816 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce816 expr point z3v487.ce816 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce816 expr point z3v487.ce816 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce816 expr point z3v487.ce816 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce816 expr point z3v487.ce816 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce816 expr point z3v487.ce816 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce816 expr point z3v487.ce816 done
=inductive-invariants point_set point z3.ce815
=inductive-invariants point_set point z3.ce815 expr point z3.ce815
=inductive-invariants point_set point z3.ce815 expr point z3.ce815 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce815 expr point z3.ce815 val 2 for input.spec-%var-n-1
6
=inductive-invariants point_set point z3.ce815 expr point z3.ce815 val 3 for input.spec-%var-i-0.L3%6%bbentry
5
=inductive-invariants point_set point z3.ce815 expr point z3.ce815 val 4 for input.spec-%var-n-0.L3%6%bbentry
6
=inductive-invariants point_set point z3.ce815 expr point z3.ce815 val 5 for input.dst.llvm-%m
2147483644
=inductive-invariants point_set point z3.ce815 expr point z3.ce815 val 6 for input.dst.llvm-%n
6
=inductive-invariants point_set point z3.ce815 expr point z3.ce815 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
5
=inductive-invariants point_set point z3.ce815 expr point z3.ce815 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce815 expr point z3.ce815 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce815 expr point z3.ce815 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce815 expr point z3.ce815 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce815 expr point z3.ce815 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce815 expr point z3.ce815 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce815 expr point z3.ce815 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce815 expr point z3.ce815 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce815 expr point z3.ce815 done
=inductive-invariants point_set points done
=out-of-bound-exprs for reason inductive-invariants
=out-of-bound-exprs for reason inductive-invariants at L0%0%d_L0%0%d

=out-of-bound-exprs for reason inductive-invariants at L3%6%bbentry_Lfor.cond%1%bbentry

=out-of-bound-exprs for reason inductive-invariants at E0%0%d_E0%0%d

=graph_with_points done
=Invariant state at node L0%0%d_L0%0%d for reason inductive-invariants
=pc L0%0%d_L0%0%d inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond.description

=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond.expr is null
=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond done
=pc L0%0%d_L0%0%d inductive-invariants invariant_state done
=Invariant state at node L3%6%bbentry_Lfor.cond%1%bbentry for reason inductive-invariants
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state failcond.description

=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state failcond.expr is null
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state failcond done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability name abstract-memlabel-asserts
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability expr_group_type HOUDINI_EXPECTS_STABILITY with 1 exprs
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability point_expr 1
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : bvuge(1, 10) : BOOL
18 : bvule(1, 11) : BOOL
19 : and(17, 18) : BOOL
20 : bvuge(2, 10) : BOOL
21 : bvule(2, 11) : BOOL
22 : and(20, 21) : BOOL
23 : not(22) : BOOL
24 : andnot1(19, 23) : BOOL
25 : bvuge(10, 1) : BOOL
26 : bvule(10, 2) : BOOL
27 : and(25, 26) : BOOL
28 : bvuge(11, 1) : BOOL
29 : bvule(11, 2) : BOOL
30 : and(28, 29) : BOOL
31 : not(30) : BOOL
32 : andnot1(27, 31) : BOOL
33 : and(24, 32) : BOOL
34 : and(16, 33) : BOOL
35 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
36 : 3 { 0x3 +1.35e129 } : BV:32
37 : bvand(35, 36) : BV:32
38 : 0 { 0x0 +1.0e129 } : BV:32
39 : eq(37, 38) : BOOL
40 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
41 : bvand(40, 36) : BV:32
42 : eq(41, 38) : BOOL
43 : and(39, 42) : BOOL
44 : and(34, 43) : BOOL
45 : eq(35, 1) : BOOL
46 : eq(40, 10) : BOOL
47 : and(45, 46) : BOOL
48 : and(44, 47) : BOOL
49 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
50 : 1 { 0x1 +1.11e129 } : BV:32
51 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
52 : region_agrees_with_memlabel(49, 38, 50, 51) : BOOL
53 : and(48, 52) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability pred 0
=Comment
abstract-memlabel-asserts-houdini-guess
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : bvuge(1, 10) : BOOL
18 : bvule(1, 11) : BOOL
19 : and(17, 18) : BOOL
20 : bvuge(2, 10) : BOOL
21 : bvule(2, 11) : BOOL
22 : and(20, 21) : BOOL
23 : not(22) : BOOL
24 : andnot1(19, 23) : BOOL
25 : bvuge(10, 1) : BOOL
26 : bvule(10, 2) : BOOL
27 : and(25, 26) : BOOL
28 : bvuge(11, 1) : BOOL
29 : bvule(11, 2) : BOOL
30 : and(28, 29) : BOOL
31 : not(30) : BOOL
32 : andnot1(27, 31) : BOOL
33 : and(24, 32) : BOOL
34 : and(16, 33) : BOOL
35 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
36 : 3 { 0x3 +1.35e129 } : BV:32
37 : bvand(35, 36) : BV:32
38 : 0 { 0x0 +1.0e129 } : BV:32
39 : eq(37, 38) : BOOL
40 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
41 : bvand(40, 36) : BV:32
42 : eq(41, 38) : BOOL
43 : and(39, 42) : BOOL
44 : and(34, 43) : BOOL
45 : eq(35, 1) : BOOL
46 : eq(40, 10) : BOOL
47 : and(45, 46) : BOOL
48 : and(44, 47) : BOOL
49 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
50 : 1 { 0x1 +1.11e129 } : BV:32
51 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
52 : region_agrees_with_memlabel(49, 38, 50, 51) : BOOL
53 : and(48, 52) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability predicate_set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ce 0: z3v487.ce3
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ces set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability summary: number of exprs=1; number of visited CEs=1; number of preds=1
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv name expr-group-bvs
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv expr_group_type BV_EQ with 6 exprs
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 2
1 : input.spec-%var-n-1 : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 3
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 4
1 : input.spec-%var-n-0.L3%6%bbentry : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 5
1 : input.dst.llvm-%m : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 6
1 : input.dst.llvm-%n : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 7
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 0
=Comment
expr-group-bvs.linear2-32-free_var_idx.7
=LhsExpr
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 1
=Comment
expr-group-bvs.linear2-32-free_var_idx.6
=LhsExpr
1 : input.spec-%var-n-1 : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%n : BV:32
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 2
=Comment
expr-group-bvs.linear1-2-free_var_idx.5
=LhsExpr
1 : 0 { 0x0 } : BV:2
=RhsExpr
1 : input.dst.llvm-%m : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 0 { 0x0 +1.0e1025 } : INT
4 : bvextract(1, 2, 3) : BV:2
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 3
=Comment
expr-group-bvs.linear2-32-free_var_idx.4
=LhsExpr
1 : input.spec-%var-n-1 : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.spec-%var-n-0.L3%6%bbentry : BV:32
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv predicate_set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 0: z3v487.ce3
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 1: z3.ce69
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 2: z3v487.ce25
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 3: z3.ce26
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 4: z3.ce558
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 5: z3.ce47
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 6: z3v487.ce629
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ces set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv summary: number of exprs=6; number of visited CEs=7; number of preds=4
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv output matrix
matrix:
4
-2147483648->0; 2->4294967295; 3->0; 4->1; 5->0; 6->0; 7->0; 
5
-2147483648->0; 2->0; 3->0; 4->0; 5->1073741824; 6->0; 7->0; 
6
-2147483648->0; 2->4294967295; 3->0; 4->0; 5->0; 6->1; 7->0; 
7
-2147483648->0; 2->0; 3->4294967295; 4->0; 5->0; 6->0; 7->1; 
matrix done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv state elems done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const name src-branches-const-ineq
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const point_expr 3
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const pred 0
=Comment
src-branches-const-ineq.ub-unsigned
=LhsExpr
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
2 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const pred 1
=Comment
src-branches-const-ineq.lb-signed
=LhsExpr
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvsge(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const predicate_set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 0: z3v487.ce3
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 1: z3v487.ce629
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 2: z3.ce762
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 3: z3.ce815
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ces set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=2
=m_lower_bound_signed_cur 0
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967294
=m_lower_bound_signed_known 0
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967294
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 3
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_exprs done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const name src-branches-const-ineq
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const point_expr 4
1 : input.spec-%var-n-0.L3%6%bbentry : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const predicate_set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 0: z3v487.ce3
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 1: z3.ce113
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 2: z3.ce91
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 3: z3v487.ce25
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ces set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=0
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967295
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 3
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_exprs done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%n
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const point_expr 6
1 : input.dst.llvm-%n : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const predicate_set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 0: z3v487.ce3
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 1: z3.ce113
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 2: z3.ce91
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 3: z3v487.ce25
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ces set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=0
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967295
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 3
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_exprs done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const point_expr 7
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const pred 0
=Comment
dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.ub-unsigned
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const pred 1
=Comment
dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.lb-signed
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvsge(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const predicate_set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 0: z3v487.ce3
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 1: z3v487.ce629
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 2: z3.ce762
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 3: z3.ce815
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ces set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=2
=m_lower_bound_signed_cur 0
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967294
=m_lower_bound_signed_known 0
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967294
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 3
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_exprs done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini name dst-ineq
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini expr_group_type HOUDINI with 8 exprs
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 8
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 9
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 10
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 11
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 12
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 13
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 14
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 15
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini pred 0
=Comment
dst-ineq-houdini-guess
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini predicate_set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini visited ce 0: z3v487.ce3
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini visited ce 1: z3.ce91
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini visited ce 2: z3v487.ce25
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini visited ces set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini summary: number of exprs=8; number of visited CEs=3; number of preds=1
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based name spec-coupling-invariants
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based expr_group_type HOUDINI_AXIOM_BASED with 6 exprs
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 16
1 : input.spec-%var-m-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 17
1 : input.spec-%var-m-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%m : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : bvadd(14, 5) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(10, 11, 12, 15, 16, 17) : BV:32
19 : lambda(9, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(8, 19) : MAP[BV:32 -> BV:32]
21 : eq(1, 20) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 18
1 : input.spec-%var-m-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 19
1 : input.spec-%tmpvar-10.E0%0%d : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 20
1 : spec-%var-m-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : SORT2EXPR.VAR : MAP[BV:32 -> BV:32]
3 : map_init(2) : MAP[BV:32 -> BV:32]
4 : eq(1, 3) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 21
1 : spec-%tmpvar-8.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : SORT2EXPR.VAR : MAP[BV:32 -> BV:32]
3 : map_init(2) : MAP[BV:32 -> BV:32]
4 : eq(1, 3) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based pred 0
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-m-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based predicate_set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based visited ce 0: z3v487.ce3
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based visited ces set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based summary: number of exprs=6; number of visited CEs=1; number of preds=1
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state done
=Invariant state at node E0%0%d_E0%0%d for reason inductive-invariants
=pc E0%0%d_E0%0%d inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond.description

=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond.expr is null
=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond done
=pc E0%0%d_E0%0%d inductive-invariants invariant_state done
=invariant_state_changed_at_pcs for reason inductive-invariants:
=graph_with_guessing done
=graph_with_correctness_covers begin
=graph_with_correctness_covers done
=m_dst_fcall_edges_already_updated_from_pcs:
=m_internal_pcs:
=m_super_edges:
=AllocaPCLocalSprelAssumptionsBegin:
=Local offsets from compile log
=Local offsets from compile log done
=done
=AllocaPCLocalSprelAssumptionsEnd
=DeallocaPCLocalSprelAssumptionsBegin:
=Local offsets from compile log
=Local offsets from compile log done
=done
=DeallocaPCLocalSprelAssumptionsEnd
=src_tfg pcs reaching pcpair L0%0%d_L0%0%d
=src_tfg pc: L0%0%d
=exit_pc_asserts at E0%0%d_E0%0%d
=exit_pc_assert.0 at E0%0%d_E0%0%d
=Comment
pointer-implements-variable-sized-map
=LhsExpr
1 : input.spec-%tmpvar-10.E0%0%d : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry
=well-formedness-conditions for L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry edge well-formedness condition
=well-formedness-conditions for L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry edge well-formedness condition done
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry edge well-formedness condition
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond cg_path
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond src_path
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond dst_path
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond pred.0
=Comment
wfcond.from_pcL3%6%bbentry_Lfor.cond%1%bbentry.to_pcL3%6%bbentry_Lfor.cond%1%bbentry-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
4 : not(3) : BOOL
5 : input.spec-%var-i-0.L3%6%bbentry : BV:32
6 : input.spec-%var-n-0.L3%6%bbentry : BV:32
7 : bvuge(5, 6) : BOOL
8 : not(7) : BOOL
9 : or(4, 8) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry edge well-formedness condition done
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge well-formedness condition
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond pred.0
=Comment
wfcond.from_pcL3%6%bbentry_Lfor.cond%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
4 : input.spec-%var-i-0.L3%6%bbentry : BV:32
5 : input.spec-%var-n-0.L3%6%bbentry : BV:32
6 : bvuge(4, 5) : BOOL
7 : or(3, 6) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d)
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond pred.0
=Comment
pointer-implements-variable-sized-map
=LhsExpr
1 : input.spec-%tmpvar-10.E0%0%d : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge well-formedness condition done
=Ranking exprs at node L3%6%bbentry_Lfor.cond%1%bbentry
=SRC Ranking expr 0
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
=SRC Ranking expr 1
1 : input.spec-%var-n-0.L3%6%bbentry : BV:32
=SRC Tie Breaking expr 0
1 : input.spec-%var-n-1 : BV:32
=SRC Tie Breaking expr 1
1 : input.spec-%var-m-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
=DST Ranking expr 0
1 : input.dst.llvm-%m : BV:32
=DST Ranking expr 1
1 : input.dst.llvm-%n : BV:32
=DST Ranking expr 2
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=bv_rank_exprs done
=Ranking exprs done
=dst-to-src submaps done
=cg-edge-contains-repeated-src-tfg-edge at edge-id L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry
0
=cg-edge-contains-repeated-src-tfg-edge at edge-id L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry
1
=cg-edge-contains-repeated-src-tfg-edge at edge-id L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d
1
=cg-edge-contains-repeated-src-tfg-edge-map done
=cg.assumes_around_edge
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #0
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #0.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #0.pred
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
140374 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140375 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140428 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
140382 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
140341 : 4 { 0x4 +1.0e1025 } : INT
140303 : 0 { 0x0 } : BOOL
140429 : select(140374, 140375, 140428, 140382, 140341, 140303) : BV:32
=RhsExpr
140367 : input.dst.llvm-%m : BV:32
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #1
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #1.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #1.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #1.pred
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
140374 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140375 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140430 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
140381 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
140341 : 4 { 0x4 +1.0e1025 } : INT
140303 : 0 { 0x0 } : BOOL
140431 : select(140374, 140375, 140430, 140381, 140341, 140303) : BV:32
=RhsExpr
140368 : input.dst.llvm-%n : BV:32
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #2
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #2.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #2.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #2.pred
=Comment
undef-behaviour-align-assume.edge.L0%0%d=>Lfor.cond%1%bbentry
=LhsExpr
140367 : input.dst.llvm-%m : BV:32
140341 : 4 { 0x4 +1.0e1025 } : INT
140387 : islangaligned(140367, 140341) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #3
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #3.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #3.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #3.pred
=Comment
precond-mlasserts
=LhsExpr
140685 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
140686 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
140687 : bvule(140685, 140686) : BOOL
140338 : 4 { 0x4 +1.47e129 } : BV:32
140404 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
140688 : bvadd(140338, 140404) : BV:32
140689 : bvadd(140685, 140688) : BV:32
140690 : eq(140686, 140689) : BOOL
140691 : and(140687, 140690) : BOOL
140692 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
140693 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
140694 : bvule(140692, 140693) : BOOL
140695 : and(140691, 140694) : BOOL
140696 : bvadd(140692, 140688) : BV:32
140697 : eq(140693, 140696) : BOOL
140698 : and(140695, 140697) : BOOL
140699 : bvuge(140685, 140692) : BOOL
140700 : bvule(140685, 140693) : BOOL
140701 : and(140699, 140700) : BOOL
140703 : bvuge(140686, 140692) : BOOL
140704 : bvule(140686, 140693) : BOOL
140705 : and(140703, 140704) : BOOL
140706 : not(140705) : BOOL
140707 : andnot1(140701, 140706) : BOOL
140702 : bvuge(140692, 140685) : BOOL
140708 : bvule(140692, 140686) : BOOL
140709 : and(140702, 140708) : BOOL
140711 : bvuge(140693, 140685) : BOOL
140712 : bvule(140693, 140686) : BOOL
140713 : and(140711, 140712) : BOOL
140714 : not(140713) : BOOL
140715 : andnot1(140709, 140714) : BOOL
140710 : and(140707, 140715) : BOOL
140716 : and(140698, 140710) : BOOL
140382 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
140717 : 3 { 0x3 +1.35e129 } : BV:32
140718 : bvand(140382, 140717) : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
140719 : eq(140718, 140276) : BOOL
140381 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
140720 : bvand(140381, 140717) : BV:32
140721 : eq(140720, 140276) : BOOL
140722 : and(140719, 140721) : BOOL
140723 : and(140716, 140722) : BOOL
140724 : eq(140382, 140685) : BOOL
140725 : eq(140381, 140692) : BOOL
140726 : and(140724, 140725) : BOOL
140727 : and(140723, 140726) : BOOL
140375 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140286 : 1 { 0x1 +1.11e129 } : BV:32
140383 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
140728 : region_agrees_with_memlabel(140375, 140276, 140286, 140383) : BOOL
140729 : and(140727, 140728) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #4
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #4.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #4.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #4.pred
=Comment
equal-arg0
=LhsExpr
140273 : input.spec-%var-n-1 : BV:32
140368 : input.dst.llvm-%n : BV:32
140730 : eq(140273, 140368) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry done
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry assume #0
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry assume #0.ec
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry assume #0.pred
=Comment
merged-predicate
=LhsExpr
140518 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
140368 : input.dst.llvm-%n : BV:32
140519 : bvult(140518, 140368) : BOOL
140453 : 4 { 0x4 +1.0e1025 } : BV:64
140398 : 32 { 0x20 +1.0e1025 } : INT
140529 : bvsign_ext(140518, 140398) : BV:64
140603 : bvmul(140453, 140529) : BV:64
140402 : 63 { 0x3f +1.0e1025 } : INT
140604 : bvextract(140603, 140402, 140398) : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
140528 : bvslt(140518, 140276) : BOOL
140404 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
140617 : ite(140528, 140404, 140276) : BV:32
140619 : eq(140604, 140617) : BOOL
140341 : 4 { 0x4 +1.0e1025 } : INT
140621 : isindexforsize(140619, 140341) : BOOL
140367 : input.dst.llvm-%m : BV:32
140338 : 4 { 0x4 +1.47e129 } : BV:32
140578 : bvmul(140338, 140518) : BV:32
140582 : bvadd(140367, 140578) : BV:32
140623 : isgepoffset(140582, 140578) : BOOL
140625 : and(140621, 140623) : BOOL
140594 : islangaligned(140582, 140341) : BOOL
143240 : and(140625, 140594) : BOOL
140275 : 1 { 0x1 } : BOOL
143241 : eq(143240, 140275) : BOOL
143253 : implies(140519, 143241) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry done
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d done
cg.assumes_around_edge done
=corr_graph_done
=bv_rank_map
=bv_rank at L0%0%d_L0%0%d
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=bv_rank at L3%6%bbentry_Lfor.cond%1%bbentry
m_dst_rank: 1, m_src_rank: 0, m_spec_rank: 6
=bv_rank at E0%0%d_E0%0%d
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=cg_with_rank done
=cg_with_backtracker done
=asm filename

=cg_with_asm_annotation done
