==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x10 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x10)))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x13)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x8 $x6)))
 (let (($x19 (and $x9 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x10 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x10)))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x13)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x8 $x6)))
 (let (($x19 (and $x9 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv32771 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791810/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32))
(assert
 (let (($x197 (= false true)))
 (let ((?x173 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x175 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x178 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x181 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x182 (concat ?x181 (concat ?x178 (concat ?x175 ?x173)))))
 (let (($x183 (= ?x182 input.dst.llvm-%x)))
 (let (($x184 (= $x183 true)))
 (let (($x168 (forall ((input.ind-%var57X (_ BitVec 32)) )(let ((?x155 (bvadd (bvmul input.ind-%var57X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x159 (concat (select input.dst.llvm-mem (bvadd ?x155 (_ bv1 32))) (select input.dst.llvm-mem ?x155))))
 (let ((?x165 (concat (select input.dst.llvm-mem (bvadd ?x155 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x155 (_ bv2 32))) ?x159))))
 (let ((?x5 (input.spec-%var-x-0.1.1 input.ind-%var57X)))
 (let (($x6 (input.spec-%var-x-0.0.1 input.ind-%var57X)))
 (=> $x6 (= ?x5 ?x165))))))))
 ))
 (let (($x134 (forall ((input.ind-%var56X (_ BitVec 32)) )(let (($x6 (input.spec-%var-x-0.0.1 input.ind-%var56X)))
 (= $x6 (and (bvsle (_ bv0 32) input.ind-%var56X) (bvslt input.ind-%var56X (_ bv10 32))))))
 ))
 (let (($x169 (and $x134 $x168)))
 (let (($x170 (= $x169 true)))
 (let (($x116 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x115 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%x (_ bv3 32)))))
 (let (($x122 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x115 $x116)))))))
 (let (($x110 (= $x122 true)))
 (let ((?x103 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x104 (= (_ bv0 32) ?x103)))
 (let ((?x100 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x101 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x100)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (and $x99 $x101)))
 (let (($x105 (and $x102 $x104)))
 (let (($x87 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x87 $x105)))
 (let (($x92 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x98 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x91 $x92)))))))
 (let (($x107 (and $x98 $x106)))
 (let (($x108 (= $x107 true)))
 (let ((?x68 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let (($x79 (bvugt ?x68 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x68 (_ bv3 32)))))
 (let (($x85 (=> (bvule ?x68 (bvsub (bvadd ?x68 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x78 $x79)))))))
 (let (($x70 (= $x85 true)))
 (let (($x109 (and $x70 $x108)))
 (let (($x111 (and $x109 $x110)))
 (let (($x171 (and $x111 $x170)))
 (let (($x185 (and $x171 $x184)))
 (let ((?x47 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let (($x60 (= ?x47 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x49 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x50 (ite $x49 (_ bv1 32) (_ bv0 32))))
 (let (($x56 (bvuge ?x50 (_ bv1 32))))
 (let (($x61 (=> $x56 $x60)))
 (let (($x57 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x58 (= $x56 $x57)))
 (let (($x20 (= false false)))
 (let (($x51 (= ?x50 (_ bv0 32))))
 (let (($x55 (=> $x51 $x20)))
 (let (($x53 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x54 (= $x51 $x53)))
 (let (($x64 (and (and (and $x54 $x55) $x58) $x61)))
 (let (($x186 (and $x64 $x185)))
 (let ((?x35 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let (($x37 (= ?x35 input.spec-%tmpvar-4.L2%10%d.2)))
 (let (($x40 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x38 (ite $x40 (_ bv1 32) (_ bv0 32))))
 (let (($x17 (bvuge ?x38 (_ bv1 32))))
 (let (($x9 (=> $x17 $x37)))
 (let (($x15 (bvuge input.spec-%tmpvar-4.L2%10%d.0 (_ bv1 32))))
 (let (($x10 (= $x17 $x15)))
 (let (($x28 (= ?x38 (_ bv0 32))))
 (let (($x22 (=> $x28 $x20)))
 (let (($x14 (= input.spec-%tmpvar-4.L2%10%d.0 (_ bv0 32))))
 (let (($x19 (= $x28 $x14)))
 (let (($x48 (and (and (and $x19 $x22) $x10) $x9)))
 (let (($x187 (and $x48 $x186)))
 (let (($x42 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x188 (and $x42 $x187)))
 (let (($x44 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%d)))
 (let (($x189 (and $x44 $x188)))
 (let (($x45 (= ?x47 input.spec-%var-x0-0.L2%10%d)))
 (let (($x190 (and $x45 $x189)))
 (let (($x32 (= (_ bv12 32) input.spec-%tmpvar-5.L2%17%bbentry)))
 (let (($x191 (and $x32 $x190)))
 (let (($x192 (and $x20 $x191)))
 (let ((?x27 (bvadd ?x47 ?x35)))
 (let (($x29 (= ?x27 input.spec-%tmpvar-6.L2%17%bbentry)))
 (let (($x193 (and $x29 $x192)))
 (let (($x7 (= ?x35 input.spec-%var-x1-0.L2%17%bbentry)))
 (let (($x194 (and $x7 $x193)))
 (let (($x13 (= (_ bv45 32) input.spec-%tmpvar-2.L2%18%bbentry)))
 (let (($x195 (and $x13 $x194)))
 (let (($x196 (and $x20 $x195)))
 (let (($x198 (=> $x196 $x197)))
 (not $x198))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32))
(assert
 (let (($x197 (= false true)))
 (let ((?x173 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x175 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x178 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x181 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x182 (concat ?x181 (concat ?x178 (concat ?x175 ?x173)))))
 (let (($x183 (= ?x182 input.dst.llvm-%x)))
 (let (($x184 (= $x183 true)))
 (let (($x168 (forall ((input.ind-%var57X (_ BitVec 32)) )(let ((?x155 (bvadd (bvmul input.ind-%var57X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x159 (concat (select input.dst.llvm-mem (bvadd ?x155 (_ bv1 32))) (select input.dst.llvm-mem ?x155))))
 (let ((?x165 (concat (select input.dst.llvm-mem (bvadd ?x155 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x155 (_ bv2 32))) ?x159))))
 (let ((?x5 (input.spec-%var-x-0.1.1 input.ind-%var57X)))
 (let (($x6 (input.spec-%var-x-0.0.1 input.ind-%var57X)))
 (=> $x6 (= ?x5 ?x165))))))))
 ))
 (let (($x134 (forall ((input.ind-%var56X (_ BitVec 32)) )(let (($x6 (input.spec-%var-x-0.0.1 input.ind-%var56X)))
 (= $x6 (and (bvsle (_ bv0 32) input.ind-%var56X) (bvslt input.ind-%var56X (_ bv10 32))))))
 ))
 (let (($x169 (and $x134 $x168)))
 (let (($x170 (= $x169 true)))
 (let (($x116 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x115 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%x (_ bv3 32)))))
 (let (($x122 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x115 $x116)))))))
 (let (($x110 (= $x122 true)))
 (let ((?x103 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x104 (= (_ bv0 32) ?x103)))
 (let ((?x100 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x101 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x100)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (and $x99 $x101)))
 (let (($x105 (and $x102 $x104)))
 (let (($x87 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x87 $x105)))
 (let (($x92 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x98 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x91 $x92)))))))
 (let (($x107 (and $x98 $x106)))
 (let (($x108 (= $x107 true)))
 (let ((?x68 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let (($x79 (bvugt ?x68 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x68 (_ bv3 32)))))
 (let (($x85 (=> (bvule ?x68 (bvsub (bvadd ?x68 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x78 $x79)))))))
 (let (($x70 (= $x85 true)))
 (let (($x109 (and $x70 $x108)))
 (let (($x111 (and $x109 $x110)))
 (let (($x171 (and $x111 $x170)))
 (let (($x185 (and $x171 $x184)))
 (let ((?x47 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let (($x60 (= ?x47 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x49 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x50 (ite $x49 (_ bv1 32) (_ bv0 32))))
 (let (($x56 (bvuge ?x50 (_ bv1 32))))
 (let (($x61 (=> $x56 $x60)))
 (let (($x57 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x58 (= $x56 $x57)))
 (let (($x20 (= false false)))
 (let (($x51 (= ?x50 (_ bv0 32))))
 (let (($x55 (=> $x51 $x20)))
 (let (($x53 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x54 (= $x51 $x53)))
 (let (($x64 (and (and (and $x54 $x55) $x58) $x61)))
 (let (($x186 (and $x64 $x185)))
 (let ((?x35 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let (($x37 (= ?x35 input.spec-%tmpvar-4.L2%10%d.2)))
 (let (($x40 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x38 (ite $x40 (_ bv1 32) (_ bv0 32))))
 (let (($x17 (bvuge ?x38 (_ bv1 32))))
 (let (($x9 (=> $x17 $x37)))
 (let (($x15 (bvuge input.spec-%tmpvar-4.L2%10%d.0 (_ bv1 32))))
 (let (($x10 (= $x17 $x15)))
 (let (($x28 (= ?x38 (_ bv0 32))))
 (let (($x22 (=> $x28 $x20)))
 (let (($x14 (= input.spec-%tmpvar-4.L2%10%d.0 (_ bv0 32))))
 (let (($x19 (= $x28 $x14)))
 (let (($x48 (and (and (and $x19 $x22) $x10) $x9)))
 (let (($x187 (and $x48 $x186)))
 (let (($x42 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x188 (and $x42 $x187)))
 (let (($x44 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%d)))
 (let (($x189 (and $x44 $x188)))
 (let (($x45 (= ?x47 input.spec-%var-x0-0.L2%10%d)))
 (let (($x190 (and $x45 $x189)))
 (let (($x32 (= (_ bv12 32) input.spec-%tmpvar-5.L2%17%bbentry)))
 (let (($x191 (and $x32 $x190)))
 (let (($x192 (and $x20 $x191)))
 (let ((?x27 (bvadd ?x47 ?x35)))
 (let (($x29 (= ?x27 input.spec-%tmpvar-6.L2%17%bbentry)))
 (let (($x193 (and $x29 $x192)))
 (let (($x7 (= ?x35 input.spec-%var-x1-0.L2%17%bbentry)))
 (let (($x194 (and $x7 $x193)))
 (let (($x13 (= (_ bv45 32) input.spec-%tmpvar-2.L2%18%bbentry)))
 (let (($x195 (and $x13 $x194)))
 (let (($x196 (and $x20 $x195)))
 (let (($x198 (=> $x196 $x197)))
 (not $x198))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32)
    #x00002000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32)
    #x00020000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x47220118)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x4723fffe)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x4722011b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x47220118)
  (define-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32)
    #x0000000c)
  (define-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32)
    #x0000002d)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x4722011a) #x23
    (ite (= x!0 #x47220119) #xff
    (ite (= x!0 #x4722011b) #x47
    (ite (= x!0 #x47220118) #xfe
      #x00)))))
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000001 x!0)
         (ite (bvule #x0000000a x!0)
              (ite (bvule #x0000000b x!0) #x0000000b #x0000000a)
              #x00000001)
         #x00000000))
  (define-fun input.spec-%var-x-0.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000001) #x00000000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x4722011b)
                                     (k!2 #x4722011a)
                                     (k!2 #x47220119)
                                     (k!2 #x47220118)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x4722011b)
                                     (k!2 #x4722011a)
                                     (k!2 #x47220119)
                                     (k!2 #x47220118)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x4722011b)
                                     (k!2 #x4722011a)
                                     (k!2 #x47220119)
                                     (k!2 #x47220118)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #x4722011b)
                                     (k!2 #x4722011a)
                                     (k!2 #x47220119)
                                     (k!2 #x47220118))))))
        (concat a!1 a!2 a!3 a!4)))))
  (define-fun input.spec-%var-x-0.0.1!4 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000001) true
    (ite (= x!0 #x00000000) true
      false)))
  (define-fun input.spec-%var-x-0.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-0.0.1!4 (k!3 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32)
    #x04000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xd0123004)
  (define-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32)
    #x08000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x02112c80)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xd0123007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xd0123004)
  (define-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32)
    #x0000000c)
  (define-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32)
    #x0000002d)
  (define-fun input.spec-%var-x-0.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000001) true
    (ite (= x!0 #x00000000) true
      (not (or (not (bvsle #x00000000 x!0)) (bvsle #x0000000a x!0))))))
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xd0123007) #x02
    (ite (= x!0 #xd0123004) #x80
    (ite (= x!0 #xd0123006) #x11
    (ite (= x!0 #xd0123005) #x2c
      #x00)))))
  (define-fun input.spec-%var-x-0.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000001) #x00000000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #xd0123007)
                                     (k!2 #xd0123006)
                                     (k!2 #xd0123005)
                                     (k!2 #xd0123004)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #xd0123007)
                                     (k!2 #xd0123006)
                                     (k!2 #xd0123005)
                                     (k!2 #xd0123004)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #xd0123007)
                                     (k!2 #xd0123006)
                                     (k!2 #xd0123005)
                                     (k!2 #xd0123004)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #xd0123007)
                                     (k!2 #xd0123006)
                                     (k!2 #xd0123005)
                                     (k!2 #xd0123004))))))
        (concat a!1 a!2 a!3 a!4)))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791810/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32))
(assert
 (let (($x89 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x97 (ite $x89 (_ bv1 32) (_ bv0 32))))
 (let (($x95 (bvuge ?x97 (_ bv1 32))))
 (let (($x67 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x73 (ite $x67 (_ bv1 32) (_ bv0 32))))
 (let (($x84 (= ?x73 (_ bv0 32))))
 (let (($x75 (bvuge ?x73 (_ bv1 32))))
 (let (($x218 (or $x75 $x84)))
 (let (($x219 (and $x218 $x95)))
 (let (($x90 (= ?x97 (_ bv0 32))))
 (let (($x220 (or $x90 $x219)))
 (let (($x221 (or false $x220)))
 (let (($x222 (= $x221 true)))
 (let ((?x124 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x129 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x153 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x201 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x202 (concat ?x201 (concat ?x153 (concat ?x129 ?x124)))))
 (let (($x203 (= ?x202 input.dst.llvm-%x)))
 (let (($x204 (= $x203 true)))
 (let (($x143 (forall ((input.ind-%var135X (_ BitVec 32)) )(let ((?x71 (bvadd (bvmul input.ind-%var135X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x125 (concat (select input.dst.llvm-mem (bvadd ?x71 (_ bv1 32))) (select input.dst.llvm-mem ?x71))))
 (let ((?x146 (concat (select input.dst.llvm-mem (bvadd ?x71 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x71 (_ bv2 32))) ?x125))))
 (let ((?x48 (input.spec-%var-x-0.1.1 input.ind-%var135X)))
 (let (($x68 (input.spec-%var-x-0.0.1 input.ind-%var135X)))
 (=> $x68 (= ?x48 ?x146))))))))
 ))
 (let (($x182 (forall ((input.ind-%var134X (_ BitVec 32)) )(let (($x68 (input.spec-%var-x-0.0.1 input.ind-%var134X)))
 (= $x68 (and (bvsle (_ bv0 32) input.ind-%var134X) (bvslt input.ind-%var134X (_ bv10 32))))))
 ))
 (let (($x141 (and $x182 $x143)))
 (let (($x144 (= $x141 true)))
 (let ((?x159 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x162 (= (_ bv0 32) ?x159)))
 (let ((?x157 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x158 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x157)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x156 (and $x161 $x158)))
 (let (($x165 (and $x156 $x162)))
 (let (($x130 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x166 (and $x130 $x165)))
 (let (($x138 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x160 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x5 $x138)))))))
 (let (($x167 (and $x160 $x166)))
 (let (($x168 (= $x167 true)))
 (let (($x119 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x120 (and true $x119)))
 (let ((?x23 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let (($x114 (= (bvand ?x23 (_ bv4294967292 32)) ?x23)))
 (let (($x112 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x23 (bvsub ?x23 (_ bv4 32))) (bvult ?x23 (bvsub ?x23 (_ bv4 32))))))
 (let (($x113 (and true $x112)))
 (let (($x105 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x111 (and (and (and $x105 $x113) $x114) $x120)))
 (let (($x18 (and $x105 $x111)))
 (let (($x6 (= $x18 true)))
 (let (($x169 (and $x6 $x168)))
 (let (($x148 (and $x169 $x144)))
 (let (($x205 (and $x148 $x204)))
 (let ((?x53 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let (($x87 (= ?x53 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x99 (=> $x95 $x87)))
 (let (($x96 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x98 (= $x95 $x96)))
 (let (($x42 (= false false)))
 (let (($x94 (=> $x90 $x42)))
 (let (($x92 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x93 (= $x90 $x92)))
 (let (($x102 (and (and (and $x93 $x94) $x98) $x99)))
 (let (($x206 (and $x102 $x205)))
 (let ((?x37 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let (($x82 (= ?x37 input.spec-%tmpvar-4.L2%10%d.2)))
 (let (($x83 (=> $x75 $x82)))
 (let (($x79 (bvuge input.spec-%tmpvar-4.L2%10%d.0 (_ bv1 32))))
 (let (($x80 (= $x75 $x79)))
 (let (($x70 (and (and (= $x84 (= input.spec-%tmpvar-4.L2%10%d.0 (_ bv0 32))) (=> $x84 $x42)) $x80)))
 (let (($x88 (and $x70 $x83)))
 (let (($x207 (and $x88 $x206)))
 (let (($x66 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x208 (and $x66 $x207)))
 (let (($x61 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%d)))
 (let (($x209 (and $x61 $x208)))
 (let (($x59 (= ?x53 input.spec-%var-x0-0.L2%10%d)))
 (let (($x210 (and $x59 $x209)))
 (let (($x58 (= (_ bv12 32) input.spec-%tmpvar-5.L2%17%bbentry)))
 (let (($x211 (and $x58 $x210)))
 (let (($x212 (and $x42 $x211)))
 (let ((?x54 (bvadd ?x53 ?x37)))
 (let (($x62 (= ?x54 input.spec-%tmpvar-6.L2%17%bbentry)))
 (let (($x213 (and $x62 $x212)))
 (let (($x51 (= ?x37 input.spec-%var-x1-0.L2%17%bbentry)))
 (let (($x214 (and $x51 $x213)))
 (let (($x36 (= (_ bv45 32) input.spec-%tmpvar-2.L2%18%bbentry)))
 (let (($x215 (and $x36 $x214)))
 (let (($x216 (and $x42 $x215)))
 (let (($x14 (bvugt ?x23 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x23 (_ bv3 32)))))
 (let (($x15 (=> (bvule ?x23 (bvsub (bvadd ?x23 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x16 $x14)))))))
 (let (($x26 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%x (_ bv3 32)))))
 (let (($x12 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x24 $x26)))))))
 (let (($x35 (and $x12 $x15)))
 (let (($x217 (and $x35 $x216)))
 (let (($x223 (=> $x217 $x222)))
 (not $x223))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32))
(assert
 (let (($x89 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x97 (ite $x89 (_ bv1 32) (_ bv0 32))))
 (let (($x95 (bvuge ?x97 (_ bv1 32))))
 (let (($x67 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x73 (ite $x67 (_ bv1 32) (_ bv0 32))))
 (let (($x84 (= ?x73 (_ bv0 32))))
 (let (($x75 (bvuge ?x73 (_ bv1 32))))
 (let (($x218 (or $x75 $x84)))
 (let (($x219 (and $x218 $x95)))
 (let (($x90 (= ?x97 (_ bv0 32))))
 (let (($x220 (or $x90 $x219)))
 (let (($x221 (or false $x220)))
 (let (($x222 (= $x221 true)))
 (let ((?x124 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x129 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x153 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x201 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x202 (concat ?x201 (concat ?x153 (concat ?x129 ?x124)))))
 (let (($x203 (= ?x202 input.dst.llvm-%x)))
 (let (($x204 (= $x203 true)))
 (let (($x143 (forall ((input.ind-%var135X (_ BitVec 32)) )(let ((?x71 (bvadd (bvmul input.ind-%var135X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x125 (concat (select input.dst.llvm-mem (bvadd ?x71 (_ bv1 32))) (select input.dst.llvm-mem ?x71))))
 (let ((?x146 (concat (select input.dst.llvm-mem (bvadd ?x71 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x71 (_ bv2 32))) ?x125))))
 (let ((?x48 (input.spec-%var-x-0.1.1 input.ind-%var135X)))
 (let (($x68 (input.spec-%var-x-0.0.1 input.ind-%var135X)))
 (=> $x68 (= ?x48 ?x146))))))))
 ))
 (let (($x182 (forall ((input.ind-%var134X (_ BitVec 32)) )(let (($x68 (input.spec-%var-x-0.0.1 input.ind-%var134X)))
 (= $x68 (and (bvsle (_ bv0 32) input.ind-%var134X) (bvslt input.ind-%var134X (_ bv10 32))))))
 ))
 (let (($x141 (and $x182 $x143)))
 (let (($x144 (= $x141 true)))
 (let ((?x159 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x162 (= (_ bv0 32) ?x159)))
 (let ((?x157 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x158 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x157)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x156 (and $x161 $x158)))
 (let (($x165 (and $x156 $x162)))
 (let (($x130 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x166 (and $x130 $x165)))
 (let (($x138 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x160 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x5 $x138)))))))
 (let (($x167 (and $x160 $x166)))
 (let (($x168 (= $x167 true)))
 (let (($x119 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x120 (and true $x119)))
 (let ((?x23 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let (($x114 (= (bvand ?x23 (_ bv4294967292 32)) ?x23)))
 (let (($x112 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x23 (bvsub ?x23 (_ bv4 32))) (bvult ?x23 (bvsub ?x23 (_ bv4 32))))))
 (let (($x113 (and true $x112)))
 (let (($x105 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x111 (and (and (and $x105 $x113) $x114) $x120)))
 (let (($x18 (and $x105 $x111)))
 (let (($x6 (= $x18 true)))
 (let (($x169 (and $x6 $x168)))
 (let (($x148 (and $x169 $x144)))
 (let (($x205 (and $x148 $x204)))
 (let ((?x53 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let (($x87 (= ?x53 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x99 (=> $x95 $x87)))
 (let (($x96 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x98 (= $x95 $x96)))
 (let (($x42 (= false false)))
 (let (($x94 (=> $x90 $x42)))
 (let (($x92 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x93 (= $x90 $x92)))
 (let (($x102 (and (and (and $x93 $x94) $x98) $x99)))
 (let (($x206 (and $x102 $x205)))
 (let ((?x37 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let (($x82 (= ?x37 input.spec-%tmpvar-4.L2%10%d.2)))
 (let (($x83 (=> $x75 $x82)))
 (let (($x79 (bvuge input.spec-%tmpvar-4.L2%10%d.0 (_ bv1 32))))
 (let (($x80 (= $x75 $x79)))
 (let (($x70 (and (and (= $x84 (= input.spec-%tmpvar-4.L2%10%d.0 (_ bv0 32))) (=> $x84 $x42)) $x80)))
 (let (($x88 (and $x70 $x83)))
 (let (($x207 (and $x88 $x206)))
 (let (($x66 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x208 (and $x66 $x207)))
 (let (($x61 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%d)))
 (let (($x209 (and $x61 $x208)))
 (let (($x59 (= ?x53 input.spec-%var-x0-0.L2%10%d)))
 (let (($x210 (and $x59 $x209)))
 (let (($x58 (= (_ bv12 32) input.spec-%tmpvar-5.L2%17%bbentry)))
 (let (($x211 (and $x58 $x210)))
 (let (($x212 (and $x42 $x211)))
 (let ((?x54 (bvadd ?x53 ?x37)))
 (let (($x62 (= ?x54 input.spec-%tmpvar-6.L2%17%bbentry)))
 (let (($x213 (and $x62 $x212)))
 (let (($x51 (= ?x37 input.spec-%var-x1-0.L2%17%bbentry)))
 (let (($x214 (and $x51 $x213)))
 (let (($x36 (= (_ bv45 32) input.spec-%tmpvar-2.L2%18%bbentry)))
 (let (($x215 (and $x36 $x214)))
 (let (($x216 (and $x42 $x215)))
 (let (($x14 (bvugt ?x23 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x23 (_ bv3 32)))))
 (let (($x15 (=> (bvule ?x23 (bvsub (bvadd ?x23 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x16 $x14)))))))
 (let (($x26 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%x (_ bv3 32)))))
 (let (($x12 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x24 $x26)))))))
 (let (($x35 (and $x12 $x15)))
 (let (($x217 (and $x35 $x216)))
 (let (($x223 (=> $x217 $x222)))
 (not $x223))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 129 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791810/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x234 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x237 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x234)))
 (let ((?x239 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x237)))
 (let ((?x135 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv1 32)))))
 (let ((?x225 (concat ?x135 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%x)))))
 (let ((?x227 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv2 32)))))
 (let ((?x29 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let ((?x44 (bvadd ?x29 (_ bv3 32))))
 (let ((?x230 (concat (select input.dst.llvm-mem ?x44) (concat ?x227 ?x225))))
 (let ((?x240 (bvadd ?x230 ?x239)))
 (let ((?x16 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let ((?x57 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let ((?x60 (bvadd ?x57 ?x16)))
 (let (($x241 (= ?x60 ?x240)))
 (let (($x242 (= $x241 true)))
 (let ((?x217 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x219 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x222 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x13 (concat ?x49 (concat ?x222 (concat ?x219 ?x217)))))
 (let (($x187 (= ?x13 input.dst.llvm-%x)))
 (let (($x188 (= $x187 true)))
 (let (($x34 (= input.dst.llvm-%x ?x13)))
 (let ((?x212 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x213 (= (_ bv0 32) ?x212)))
 (let ((?x209 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x210 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x209)))
 (let (($x208 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x211 (and $x208 $x210)))
 (let (($x214 (and $x211 $x213)))
 (let (($x207 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x215 (and $x207 $x214)))
 (let (($x204 (forall ((input.ind-%var165X (_ BitVec 32)) )(let ((?x144 (bvadd (bvmul input.ind-%var165X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x136 (concat (select input.dst.llvm-mem (bvadd ?x144 (_ bv1 32))) (select input.dst.llvm-mem ?x144))))
 (let ((?x21 (concat (select input.dst.llvm-mem (bvadd ?x144 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x144 (_ bv2 32))) ?x136))))
 (let ((?x36 (input.spec-%var-x-0.1.1 input.ind-%var165X)))
 (let (($x56 (input.spec-%var-x-0.0.1 input.ind-%var165X)))
 (=> $x56 (= ?x36 ?x21))))))))
 ))
 (let (($x179 (forall ((input.ind-%var164X (_ BitVec 32)) )(let (($x56 (input.spec-%var-x-0.0.1 input.ind-%var164X)))
 (= $x56 (and (bvsle (_ bv0 32) input.ind-%var164X) (bvslt input.ind-%var164X (_ bv10 32))))))
 ))
 (let (($x205 (and $x179 $x204)))
 (let (($x157 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x161 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x166 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x161 $x157)))))))
 (let (($x132 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x133 (and true $x132)))
 (let (($x119 (= (bvand ?x29 (_ bv4294967292 32)) ?x29)))
 (let (($x115 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x29 (bvsub ?x29 (_ bv4 32))) (bvult ?x29 (bvsub ?x29 (_ bv4 32))))))
 (let (($x117 (and true $x115)))
 (let (($x122 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x5 (and (and (and $x122 $x117) $x119) $x133)))
 (let (($x138 (and $x122 $x5)))
 (let (($x170 (and (and (and (and $x138 $x166) $x205) $x215) $x34)))
 (let (($x180 (= $x170 true)))
 (let (($x154 (= $x138 true)))
 (let (($x177 (and $x154 $x180)))
 (let (($x197 (and $x177 $x188)))
 (let (($x94 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x100 (ite $x94 (_ bv1 32) (_ bv0 32))))
 (let (($x87 (bvuge ?x100 (_ bv1 32))))
 (let (($x52 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x53 (ite $x52 (_ bv1 32) (_ bv0 32))))
 (let (($x82 (bvuge ?x53 (_ bv1 32))))
 (let (($x109 (and $x82 $x87)))
 (let (($x198 (and $x109 $x197)))
 (let (($x104 (= ?x57 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x105 (=> $x87 $x104)))
 (let (($x99 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x102 (= $x87 $x99)))
 (let (($x79 (= false false)))
 (let (($x95 (= ?x100 (_ bv0 32))))
 (let (($x86 (=> $x95 $x79)))
 (let (($x98 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x101 (= $x95 $x98)))
 (let (($x108 (and (and (and $x101 $x86) $x102) $x105)))
 (let (($x194 (and $x108 $x198)))
 (let (($x97 (= ?x16 input.spec-%tmpvar-4.L2%10%d.2)))
 (let (($x90 (=> $x82 $x97)))
 (let (($x83 (bvuge input.spec-%tmpvar-4.L2%10%d.0 (_ bv1 32))))
 (let (($x88 (= $x82 $x83)))
 (let (($x54 (= ?x53 (_ bv0 32))))
 (let (($x81 (=> $x54 $x79)))
 (let (($x80 (= input.spec-%tmpvar-4.L2%10%d.0 (_ bv0 32))))
 (let (($x70 (= $x54 $x80)))
 (let (($x93 (and (and (and $x70 $x81) $x88) $x90)))
 (let (($x195 (and $x93 $x194)))
 (let (($x59 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x190 (and $x59 $x195)))
 (let (($x42 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%d)))
 (let (($x191 (and $x42 $x190)))
 (let (($x77 (= ?x57 input.spec-%var-x0-0.L2%10%d)))
 (let (($x189 (and $x77 $x191)))
 (let (($x73 (= (_ bv12 32) input.spec-%tmpvar-5.L2%17%bbentry)))
 (let (($x192 (and $x73 $x189)))
 (let (($x196 (and $x79 $x192)))
 (let (($x61 (= ?x60 input.spec-%tmpvar-6.L2%17%bbentry)))
 (let (($x199 (and $x61 $x196)))
 (let (($x66 (= ?x16 input.spec-%var-x1-0.L2%17%bbentry)))
 (let (($x171 (and $x66 $x199)))
 (let (($x28 (= (_ bv45 32) input.spec-%tmpvar-2.L2%18%bbentry)))
 (let (($x178 (and $x28 $x171)))
 (let (($x174 (and $x79 $x178)))
 (let (($x30 (bvugt ?x29 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x44)))
 (let (($x40 (=> (bvule ?x29 (bvsub (bvadd ?x29 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x47 $x30)))))))
 (let (($x85 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x51 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x62 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x51)))
 (let (($x39 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x62 $x85)))))))
 (let (($x24 (and $x39 $x40)))
 (let (($x25 (and $x24 $x174)))
 (let (($x243 (=> $x25 $x242)))
 (not $x243))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x234 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x237 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x234)))
 (let ((?x239 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x237)))
 (let ((?x135 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv1 32)))))
 (let ((?x225 (concat ?x135 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%x)))))
 (let ((?x227 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv2 32)))))
 (let ((?x29 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let ((?x44 (bvadd ?x29 (_ bv3 32))))
 (let ((?x230 (concat (select input.dst.llvm-mem ?x44) (concat ?x227 ?x225))))
 (let ((?x240 (bvadd ?x230 ?x239)))
 (let ((?x16 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let ((?x57 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let ((?x60 (bvadd ?x57 ?x16)))
 (let (($x241 (= ?x60 ?x240)))
 (let (($x242 (= $x241 true)))
 (let ((?x217 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x219 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x222 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x13 (concat ?x49 (concat ?x222 (concat ?x219 ?x217)))))
 (let (($x187 (= ?x13 input.dst.llvm-%x)))
 (let (($x188 (= $x187 true)))
 (let (($x34 (= input.dst.llvm-%x ?x13)))
 (let ((?x212 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x213 (= (_ bv0 32) ?x212)))
 (let ((?x209 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x210 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x209)))
 (let (($x208 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x211 (and $x208 $x210)))
 (let (($x214 (and $x211 $x213)))
 (let (($x207 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x215 (and $x207 $x214)))
 (let (($x204 (forall ((input.ind-%var165X (_ BitVec 32)) )(let ((?x144 (bvadd (bvmul input.ind-%var165X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x136 (concat (select input.dst.llvm-mem (bvadd ?x144 (_ bv1 32))) (select input.dst.llvm-mem ?x144))))
 (let ((?x21 (concat (select input.dst.llvm-mem (bvadd ?x144 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x144 (_ bv2 32))) ?x136))))
 (let ((?x36 (input.spec-%var-x-0.1.1 input.ind-%var165X)))
 (let (($x56 (input.spec-%var-x-0.0.1 input.ind-%var165X)))
 (=> $x56 (= ?x36 ?x21))))))))
 ))
 (let (($x179 (forall ((input.ind-%var164X (_ BitVec 32)) )(let (($x56 (input.spec-%var-x-0.0.1 input.ind-%var164X)))
 (= $x56 (and (bvsle (_ bv0 32) input.ind-%var164X) (bvslt input.ind-%var164X (_ bv10 32))))))
 ))
 (let (($x205 (and $x179 $x204)))
 (let (($x157 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x161 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x166 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x161 $x157)))))))
 (let (($x132 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x133 (and true $x132)))
 (let (($x119 (= (bvand ?x29 (_ bv4294967292 32)) ?x29)))
 (let (($x115 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x29 (bvsub ?x29 (_ bv4 32))) (bvult ?x29 (bvsub ?x29 (_ bv4 32))))))
 (let (($x117 (and true $x115)))
 (let (($x122 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x5 (and (and (and $x122 $x117) $x119) $x133)))
 (let (($x138 (and $x122 $x5)))
 (let (($x170 (and (and (and (and $x138 $x166) $x205) $x215) $x34)))
 (let (($x180 (= $x170 true)))
 (let (($x154 (= $x138 true)))
 (let (($x177 (and $x154 $x180)))
 (let (($x197 (and $x177 $x188)))
 (let (($x94 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x100 (ite $x94 (_ bv1 32) (_ bv0 32))))
 (let (($x87 (bvuge ?x100 (_ bv1 32))))
 (let (($x52 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x53 (ite $x52 (_ bv1 32) (_ bv0 32))))
 (let (($x82 (bvuge ?x53 (_ bv1 32))))
 (let (($x109 (and $x82 $x87)))
 (let (($x198 (and $x109 $x197)))
 (let (($x104 (= ?x57 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x105 (=> $x87 $x104)))
 (let (($x99 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x102 (= $x87 $x99)))
 (let (($x79 (= false false)))
 (let (($x95 (= ?x100 (_ bv0 32))))
 (let (($x86 (=> $x95 $x79)))
 (let (($x98 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x101 (= $x95 $x98)))
 (let (($x108 (and (and (and $x101 $x86) $x102) $x105)))
 (let (($x194 (and $x108 $x198)))
 (let (($x97 (= ?x16 input.spec-%tmpvar-4.L2%10%d.2)))
 (let (($x90 (=> $x82 $x97)))
 (let (($x83 (bvuge input.spec-%tmpvar-4.L2%10%d.0 (_ bv1 32))))
 (let (($x88 (= $x82 $x83)))
 (let (($x54 (= ?x53 (_ bv0 32))))
 (let (($x81 (=> $x54 $x79)))
 (let (($x80 (= input.spec-%tmpvar-4.L2%10%d.0 (_ bv0 32))))
 (let (($x70 (= $x54 $x80)))
 (let (($x93 (and (and (and $x70 $x81) $x88) $x90)))
 (let (($x195 (and $x93 $x194)))
 (let (($x59 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x190 (and $x59 $x195)))
 (let (($x42 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%d)))
 (let (($x191 (and $x42 $x190)))
 (let (($x77 (= ?x57 input.spec-%var-x0-0.L2%10%d)))
 (let (($x189 (and $x77 $x191)))
 (let (($x73 (= (_ bv12 32) input.spec-%tmpvar-5.L2%17%bbentry)))
 (let (($x192 (and $x73 $x189)))
 (let (($x196 (and $x79 $x192)))
 (let (($x61 (= ?x60 input.spec-%tmpvar-6.L2%17%bbentry)))
 (let (($x199 (and $x61 $x196)))
 (let (($x66 (= ?x16 input.spec-%var-x1-0.L2%17%bbentry)))
 (let (($x171 (and $x66 $x199)))
 (let (($x28 (= (_ bv45 32) input.spec-%tmpvar-2.L2%18%bbentry)))
 (let (($x178 (and $x28 $x171)))
 (let (($x174 (and $x79 $x178)))
 (let (($x30 (bvugt ?x29 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x44)))
 (let (($x40 (=> (bvule ?x29 (bvsub (bvadd ?x29 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x47 $x30)))))))
 (let (($x85 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x51 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x62 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x51)))
 (let (($x39 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x62 $x85)))))))
 (let (($x24 (and $x39 $x40)))
 (let (($x25 (and $x24 $x174)))
 (let (($x243 (=> $x25 $x242)))
 (not $x243))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791810/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x150 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x147 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x150)))
 (let ((?x9 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x147)))
 (let ((?x167 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv1 32)))))
 (let ((?x169 (concat ?x167 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%x)))))
 (let ((?x149 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv2 32)))))
 (let ((?x32 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let ((?x62 (bvadd ?x32 (_ bv3 32))))
 (let ((?x123 (concat (select input.dst.llvm-mem ?x62) (concat ?x149 ?x169))))
 (let ((?x68 (bvadd ?x123 ?x9)))
 (let (($x142 (= (_ bv12 32) ?x68)))
 (let (($x48 (= $x142 true)))
 (let ((?x171 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x174 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x226 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x135 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x184 (concat ?x135 (concat ?x226 (concat ?x174 ?x171)))))
 (let (($x233 (= ?x184 input.dst.llvm-%x)))
 (let (($x231 (= $x233 true)))
 (let (($x225 (= input.dst.llvm-%x ?x184)))
 (let ((?x191 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x189 (= (_ bv0 32) ?x191)))
 (let ((?x194 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x195 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x194)))
 (let (($x198 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x190 (and $x198 $x195)))
 (let (($x192 (and $x190 $x189)))
 (let (($x197 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x196 (and $x197 $x192)))
 (let (($x177 (forall ((input.ind-%var193X (_ BitVec 32)) )(let ((?x224 (bvadd (bvmul input.ind-%var193X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x218 (concat (select input.dst.llvm-mem (bvadd ?x224 (_ bv1 32))) (select input.dst.llvm-mem ?x224))))
 (let ((?x34 (concat (select input.dst.llvm-mem (bvadd ?x224 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x224 (_ bv2 32))) ?x218))))
 (let ((?x28 (input.spec-%var-x-0.1.1 input.ind-%var193X)))
 (let (($x84 (input.spec-%var-x-0.0.1 input.ind-%var193X)))
 (=> $x84 (= ?x28 ?x34))))))))
 ))
 (let (($x201 (forall ((input.ind-%var192X (_ BitVec 32)) )(let (($x84 (input.spec-%var-x-0.0.1 input.ind-%var192X)))
 (= $x84 (and (bvsle (_ bv0 32) input.ind-%var192X) (bvslt input.ind-%var192X (_ bv10 32))))))
 ))
 (let (($x187 (and $x201 $x177)))
 (let (($x181 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x36 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x56 $x181)))))))
 (let (($x160 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x126 (and true $x160)))
 (let (($x132 (= (bvand ?x32 (_ bv4294967292 32)) ?x32)))
 (let (($x120 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x32 (bvsub ?x32 (_ bv4 32))) (bvult ?x32 (bvsub ?x32 (_ bv4 32))))))
 (let (($x18 (and true $x120)))
 (let (($x145 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x161 (and (and (and $x145 $x18) $x132) $x126)))
 (let (($x157 (and $x145 $x161)))
 (let (($x235 (and (and (and (and $x157 $x36) $x187) $x196) $x225)))
 (let (($x236 (= $x235 true)))
 (let (($x158 (= $x157 true)))
 (let (($x232 (and $x158 $x236)))
 (let (($x234 (and $x232 $x231)))
 (let (($x107 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x87 (ite $x107 (_ bv1 32) (_ bv0 32))))
 (let (($x105 (bvuge ?x87 (_ bv1 32))))
 (let (($x67 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x57 (ite $x67 (_ bv1 32) (_ bv0 32))))
 (let (($x60 (= ?x57 (_ bv0 32))))
 (let (($x116 (and $x60 $x105)))
 (let (($x237 (and $x116 $x234)))
 (let ((?x73 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let (($x113 (= ?x73 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x122 (=> $x105 $x113)))
 (let (($x108 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x109 (= $x105 $x108)))
 (let (($x88 (= false false)))
 (let (($x99 (= ?x87 (_ bv0 32))))
 (let (($x104 (=> $x99 $x88)))
 (let (($x106 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x103 (= $x99 $x106)))
 (let (($x110 (and (and (and $x103 $x104) $x109) $x122)))
 (let (($x239 (and $x110 $x237)))
 (let ((?x47 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let (($x95 (= ?x47 input.spec-%tmpvar-4.L2%10%d.2)))
 (let (($x90 (bvuge ?x57 (_ bv1 32))))
 (let (($x96 (=> $x90 $x95)))
 (let (($x93 (bvuge input.spec-%tmpvar-4.L2%10%d.0 (_ bv1 32))))
 (let (($x94 (= $x90 $x93)))
 (let (($x101 (and (and (= $x60 (= input.spec-%tmpvar-4.L2%10%d.0 (_ bv0 32))) (=> $x60 $x88)) $x94)))
 (let (($x86 (and $x101 $x96)))
 (let (($x240 (and $x86 $x239)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x241 (and $x76 $x240)))
 (let (($x81 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%d)))
 (let (($x242 (and $x81 $x241)))
 (let (($x79 (= ?x73 input.spec-%var-x0-0.L2%10%d)))
 (let (($x243 (and $x79 $x242)))
 (let (($x54 (= (_ bv12 32) input.spec-%tmpvar-5.L2%17%bbentry)))
 (let (($x244 (and $x54 $x243)))
 (let (($x58 (and $x88 $x244)))
 (let ((?x42 (bvadd ?x73 ?x47)))
 (let (($x78 (= ?x42 input.spec-%tmpvar-6.L2%17%bbentry)))
 (let (($x15 (and $x78 $x58)))
 (let (($x52 (= ?x47 input.spec-%var-x1-0.L2%17%bbentry)))
 (let (($x8 (and $x52 $x15)))
 (let (($x44 (= (_ bv45 32) input.spec-%tmpvar-2.L2%18%bbentry)))
 (let (($x46 (and $x44 $x8)))
 (let (($x155 (and $x88 $x46)))
 (let (($x26 (bvugt ?x32 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x62)))
 (let (($x72 (=> (bvule ?x32 (bvsub (bvadd ?x32 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x27 $x26)))))))
 (let (($x82 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x66 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x61 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x66)))
 (let (($x12 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x61 $x82)))))))
 (let (($x22 (and $x12 $x72)))
 (let (($x216 (and $x22 $x155)))
 (let (($x143 (=> $x216 $x48)))
 (not $x143))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x150 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x147 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x150)))
 (let ((?x9 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x147)))
 (let ((?x167 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv1 32)))))
 (let ((?x169 (concat ?x167 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%x)))))
 (let ((?x149 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv2 32)))))
 (let ((?x32 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let ((?x62 (bvadd ?x32 (_ bv3 32))))
 (let ((?x123 (concat (select input.dst.llvm-mem ?x62) (concat ?x149 ?x169))))
 (let ((?x68 (bvadd ?x123 ?x9)))
 (let (($x142 (= (_ bv12 32) ?x68)))
 (let (($x48 (= $x142 true)))
 (let ((?x171 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x174 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x226 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x135 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x184 (concat ?x135 (concat ?x226 (concat ?x174 ?x171)))))
 (let (($x233 (= ?x184 input.dst.llvm-%x)))
 (let (($x231 (= $x233 true)))
 (let (($x225 (= input.dst.llvm-%x ?x184)))
 (let ((?x191 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x189 (= (_ bv0 32) ?x191)))
 (let ((?x194 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x195 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x194)))
 (let (($x198 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x190 (and $x198 $x195)))
 (let (($x192 (and $x190 $x189)))
 (let (($x197 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x196 (and $x197 $x192)))
 (let (($x177 (forall ((input.ind-%var193X (_ BitVec 32)) )(let ((?x224 (bvadd (bvmul input.ind-%var193X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x218 (concat (select input.dst.llvm-mem (bvadd ?x224 (_ bv1 32))) (select input.dst.llvm-mem ?x224))))
 (let ((?x34 (concat (select input.dst.llvm-mem (bvadd ?x224 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x224 (_ bv2 32))) ?x218))))
 (let ((?x28 (input.spec-%var-x-0.1.1 input.ind-%var193X)))
 (let (($x84 (input.spec-%var-x-0.0.1 input.ind-%var193X)))
 (=> $x84 (= ?x28 ?x34))))))))
 ))
 (let (($x201 (forall ((input.ind-%var192X (_ BitVec 32)) )(let (($x84 (input.spec-%var-x-0.0.1 input.ind-%var192X)))
 (= $x84 (and (bvsle (_ bv0 32) input.ind-%var192X) (bvslt input.ind-%var192X (_ bv10 32))))))
 ))
 (let (($x187 (and $x201 $x177)))
 (let (($x181 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x36 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x56 $x181)))))))
 (let (($x160 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x126 (and true $x160)))
 (let (($x132 (= (bvand ?x32 (_ bv4294967292 32)) ?x32)))
 (let (($x120 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x32 (bvsub ?x32 (_ bv4 32))) (bvult ?x32 (bvsub ?x32 (_ bv4 32))))))
 (let (($x18 (and true $x120)))
 (let (($x145 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x161 (and (and (and $x145 $x18) $x132) $x126)))
 (let (($x157 (and $x145 $x161)))
 (let (($x235 (and (and (and (and $x157 $x36) $x187) $x196) $x225)))
 (let (($x236 (= $x235 true)))
 (let (($x158 (= $x157 true)))
 (let (($x232 (and $x158 $x236)))
 (let (($x234 (and $x232 $x231)))
 (let (($x107 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x87 (ite $x107 (_ bv1 32) (_ bv0 32))))
 (let (($x105 (bvuge ?x87 (_ bv1 32))))
 (let (($x67 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x57 (ite $x67 (_ bv1 32) (_ bv0 32))))
 (let (($x60 (= ?x57 (_ bv0 32))))
 (let (($x116 (and $x60 $x105)))
 (let (($x237 (and $x116 $x234)))
 (let ((?x73 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let (($x113 (= ?x73 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x122 (=> $x105 $x113)))
 (let (($x108 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x109 (= $x105 $x108)))
 (let (($x88 (= false false)))
 (let (($x99 (= ?x87 (_ bv0 32))))
 (let (($x104 (=> $x99 $x88)))
 (let (($x106 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x103 (= $x99 $x106)))
 (let (($x110 (and (and (and $x103 $x104) $x109) $x122)))
 (let (($x239 (and $x110 $x237)))
 (let ((?x47 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let (($x95 (= ?x47 input.spec-%tmpvar-4.L2%10%d.2)))
 (let (($x90 (bvuge ?x57 (_ bv1 32))))
 (let (($x96 (=> $x90 $x95)))
 (let (($x93 (bvuge input.spec-%tmpvar-4.L2%10%d.0 (_ bv1 32))))
 (let (($x94 (= $x90 $x93)))
 (let (($x101 (and (and (= $x60 (= input.spec-%tmpvar-4.L2%10%d.0 (_ bv0 32))) (=> $x60 $x88)) $x94)))
 (let (($x86 (and $x101 $x96)))
 (let (($x240 (and $x86 $x239)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x241 (and $x76 $x240)))
 (let (($x81 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%d)))
 (let (($x242 (and $x81 $x241)))
 (let (($x79 (= ?x73 input.spec-%var-x0-0.L2%10%d)))
 (let (($x243 (and $x79 $x242)))
 (let (($x54 (= (_ bv12 32) input.spec-%tmpvar-5.L2%17%bbentry)))
 (let (($x244 (and $x54 $x243)))
 (let (($x58 (and $x88 $x244)))
 (let ((?x42 (bvadd ?x73 ?x47)))
 (let (($x78 (= ?x42 input.spec-%tmpvar-6.L2%17%bbentry)))
 (let (($x15 (and $x78 $x58)))
 (let (($x52 (= ?x47 input.spec-%var-x1-0.L2%17%bbentry)))
 (let (($x8 (and $x52 $x15)))
 (let (($x44 (= (_ bv45 32) input.spec-%tmpvar-2.L2%18%bbentry)))
 (let (($x46 (and $x44 $x8)))
 (let (($x155 (and $x88 $x46)))
 (let (($x26 (bvugt ?x32 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x62)))
 (let (($x72 (=> (bvule ?x32 (bvsub (bvadd ?x32 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x27 $x26)))))))
 (let (($x82 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x66 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x61 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x66)))
 (let (($x12 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x61 $x82)))))))
 (let (($x22 (and $x12 $x72)))
 (let (($x216 (and $x22 $x155)))
 (let (($x143 (=> $x216 $x48)))
 (not $x143))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 137 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791810/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x210 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x151)))
 (let ((?x162 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x210)))
 (let ((?x159 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv1 32)))))
 (let ((?x65 (concat ?x159 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%x)))))
 (let ((?x202 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv2 32)))))
 (let ((?x75 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let ((?x61 (bvadd ?x75 (_ bv3 32))))
 (let ((?x212 (concat (select input.dst.llvm-mem ?x61) (concat ?x202 ?x65))))
 (let ((?x124 (bvadd ?x212 ?x162)))
 (let (($x152 (= (_ bv45 32) ?x124)))
 (let (($x214 (= $x152 true)))
 (let ((?x15 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x46 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x146 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x163 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x167 (concat ?x163 (concat ?x146 (concat ?x46 ?x15)))))
 (let (($x193 (= ?x167 input.dst.llvm-%x)))
 (let (($x127 (= $x193 true)))
 (let (($x186 (= input.dst.llvm-%x ?x167)))
 (let ((?x241 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x242 (= (_ bv0 32) ?x241)))
 (let ((?x237 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x239 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x237)))
 (let (($x234 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x240 (and $x234 $x239)))
 (let (($x243 (and $x240 $x242)))
 (let (($x231 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x244 (and $x231 $x243)))
 (let (($x236 (forall ((input.ind-%var221X (_ BitVec 32)) )(let ((?x238 (bvadd (bvmul input.ind-%var221X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x226 (concat (select input.dst.llvm-mem (bvadd ?x238 (_ bv1 32))) (select input.dst.llvm-mem ?x238))))
 (let ((?x184 (concat (select input.dst.llvm-mem (bvadd ?x238 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x238 (_ bv2 32))) ?x226))))
 (let ((?x47 (input.spec-%var-x-0.1.1 input.ind-%var221X)))
 (let (($x55 (input.spec-%var-x-0.0.1 input.ind-%var221X)))
 (=> $x55 (= ?x47 ?x184))))))))
 ))
 (let (($x221 (forall ((input.ind-%var220X (_ BitVec 32)) )(let (($x55 (input.spec-%var-x-0.0.1 input.ind-%var220X)))
 (= $x55 (and (bvsle (_ bv0 32) input.ind-%var220X) (bvslt input.ind-%var220X (_ bv10 32))))))
 ))
 (let (($x232 (and $x221 $x236)))
 (let (($x84 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x201 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x17 $x84)))))))
 (let (($x158 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x166 (and true $x158)))
 (let (($x154 (= (bvand ?x75 (_ bv4294967292 32)) ?x75)))
 (let (($x5 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x75 (bvsub ?x75 (_ bv4 32))) (bvult ?x75 (bvsub ?x75 (_ bv4 32))))))
 (let (($x133 (and true $x5)))
 (let (($x18 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x41 (and (and (and $x18 $x133) $x154) $x166)))
 (let (($x56 (and $x18 $x41)))
 (let (($x164 (and (and (and (and $x56 $x201) $x232) $x244) $x186)))
 (let (($x139 (= $x164 true)))
 (let (($x181 (= $x56 true)))
 (let (($x125 (and $x181 $x139)))
 (let (($x172 (and $x125 $x127)))
 (let (($x114 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x105 (ite $x114 (_ bv1 32) (_ bv0 32))))
 (let (($x108 (= ?x105 (_ bv0 32))))
 (let (($x150 (and $x108 $x172)))
 (let ((?x54 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let (($x117 (= ?x54 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x122 (bvuge ?x105 (_ bv1 32))))
 (let (($x145 (=> $x122 $x117)))
 (let (($x110 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x116 (= $x122 $x110)))
 (let (($x94 (= false false)))
 (let (($x113 (=> $x108 $x94)))
 (let (($x121 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x112 (= $x108 $x121)))
 (let (($x134 (and (and (and $x112 $x113) $x116) $x145)))
 (let (($x147 (and $x134 $x150)))
 (let ((?x27 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let (($x99 (= ?x27 input.spec-%tmpvar-4.L2%10%d.2)))
 (let (($x73 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x42 (ite $x73 (_ bv1 32) (_ bv0 32))))
 (let (($x96 (bvuge ?x42 (_ bv1 32))))
 (let (($x102 (=> $x96 $x99)))
 (let (($x86 (bvuge input.spec-%tmpvar-4.L2%10%d.0 (_ bv1 32))))
 (let (($x107 (= $x96 $x86)))
 (let (($x77 (= ?x42 (_ bv0 32))))
 (let (($x95 (=> $x77 $x94)))
 (let (($x101 (= input.spec-%tmpvar-4.L2%10%d.0 (_ bv0 32))))
 (let (($x100 (= $x77 $x101)))
 (let (($x104 (and (and (and $x100 $x95) $x107) $x102)))
 (let (($x9 (and $x104 $x147)))
 (let (($x70 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x68 (and $x70 $x9)))
 (let (($x97 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%d)))
 (let (($x142 (and $x97 $x68)))
 (let (($x88 (= ?x54 input.spec-%var-x0-0.L2%10%d)))
 (let (($x48 (and $x88 $x142)))
 (let (($x60 (= (_ bv12 32) input.spec-%tmpvar-5.L2%17%bbentry)))
 (let (($x143 (and $x60 $x48)))
 (let (($x183 (and $x94 $x143)))
 (let ((?x81 (bvadd ?x54 ?x27)))
 (let (($x91 (= ?x81 input.spec-%tmpvar-6.L2%17%bbentry)))
 (let (($x74 (and $x91 $x183)))
 (let (($x67 (= ?x27 input.spec-%var-x1-0.L2%17%bbentry)))
 (let (($x40 (and $x67 $x74)))
 (let (($x62 (= (_ bv45 32) input.spec-%tmpvar-2.L2%18%bbentry)))
 (let (($x43 (and $x62 $x40)))
 (let (($x50 (and $x94 $x43)))
 (let (($x85 (bvugt ?x75 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x61)))
 (let (($x7 (=> (bvule ?x75 (bvsub (bvadd ?x75 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x11 $x85)))))))
 (let (($x90 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x53 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x59 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x53)))
 (let (($x39 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x59 $x90)))))))
 (let (($x31 (and $x39 $x7)))
 (let (($x156 (and $x31 $x50)))
 (let (($x136 (=> $x156 $x214)))
 (not $x136)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x210 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x151)))
 (let ((?x162 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x210)))
 (let ((?x159 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv1 32)))))
 (let ((?x65 (concat ?x159 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%x)))))
 (let ((?x202 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv2 32)))))
 (let ((?x75 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let ((?x61 (bvadd ?x75 (_ bv3 32))))
 (let ((?x212 (concat (select input.dst.llvm-mem ?x61) (concat ?x202 ?x65))))
 (let ((?x124 (bvadd ?x212 ?x162)))
 (let (($x152 (= (_ bv45 32) ?x124)))
 (let (($x214 (= $x152 true)))
 (let ((?x15 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x46 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x146 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x163 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x167 (concat ?x163 (concat ?x146 (concat ?x46 ?x15)))))
 (let (($x193 (= ?x167 input.dst.llvm-%x)))
 (let (($x127 (= $x193 true)))
 (let (($x186 (= input.dst.llvm-%x ?x167)))
 (let ((?x241 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x242 (= (_ bv0 32) ?x241)))
 (let ((?x237 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x239 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x237)))
 (let (($x234 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x240 (and $x234 $x239)))
 (let (($x243 (and $x240 $x242)))
 (let (($x231 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x244 (and $x231 $x243)))
 (let (($x236 (forall ((input.ind-%var221X (_ BitVec 32)) )(let ((?x238 (bvadd (bvmul input.ind-%var221X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x226 (concat (select input.dst.llvm-mem (bvadd ?x238 (_ bv1 32))) (select input.dst.llvm-mem ?x238))))
 (let ((?x184 (concat (select input.dst.llvm-mem (bvadd ?x238 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x238 (_ bv2 32))) ?x226))))
 (let ((?x47 (input.spec-%var-x-0.1.1 input.ind-%var221X)))
 (let (($x55 (input.spec-%var-x-0.0.1 input.ind-%var221X)))
 (=> $x55 (= ?x47 ?x184))))))))
 ))
 (let (($x221 (forall ((input.ind-%var220X (_ BitVec 32)) )(let (($x55 (input.spec-%var-x-0.0.1 input.ind-%var220X)))
 (= $x55 (and (bvsle (_ bv0 32) input.ind-%var220X) (bvslt input.ind-%var220X (_ bv10 32))))))
 ))
 (let (($x232 (and $x221 $x236)))
 (let (($x84 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x201 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x17 $x84)))))))
 (let (($x158 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x166 (and true $x158)))
 (let (($x154 (= (bvand ?x75 (_ bv4294967292 32)) ?x75)))
 (let (($x5 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x75 (bvsub ?x75 (_ bv4 32))) (bvult ?x75 (bvsub ?x75 (_ bv4 32))))))
 (let (($x133 (and true $x5)))
 (let (($x18 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x41 (and (and (and $x18 $x133) $x154) $x166)))
 (let (($x56 (and $x18 $x41)))
 (let (($x164 (and (and (and (and $x56 $x201) $x232) $x244) $x186)))
 (let (($x139 (= $x164 true)))
 (let (($x181 (= $x56 true)))
 (let (($x125 (and $x181 $x139)))
 (let (($x172 (and $x125 $x127)))
 (let (($x114 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x105 (ite $x114 (_ bv1 32) (_ bv0 32))))
 (let (($x108 (= ?x105 (_ bv0 32))))
 (let (($x150 (and $x108 $x172)))
 (let ((?x54 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let (($x117 (= ?x54 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x122 (bvuge ?x105 (_ bv1 32))))
 (let (($x145 (=> $x122 $x117)))
 (let (($x110 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x116 (= $x122 $x110)))
 (let (($x94 (= false false)))
 (let (($x113 (=> $x108 $x94)))
 (let (($x121 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x112 (= $x108 $x121)))
 (let (($x134 (and (and (and $x112 $x113) $x116) $x145)))
 (let (($x147 (and $x134 $x150)))
 (let ((?x27 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let (($x99 (= ?x27 input.spec-%tmpvar-4.L2%10%d.2)))
 (let (($x73 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x42 (ite $x73 (_ bv1 32) (_ bv0 32))))
 (let (($x96 (bvuge ?x42 (_ bv1 32))))
 (let (($x102 (=> $x96 $x99)))
 (let (($x86 (bvuge input.spec-%tmpvar-4.L2%10%d.0 (_ bv1 32))))
 (let (($x107 (= $x96 $x86)))
 (let (($x77 (= ?x42 (_ bv0 32))))
 (let (($x95 (=> $x77 $x94)))
 (let (($x101 (= input.spec-%tmpvar-4.L2%10%d.0 (_ bv0 32))))
 (let (($x100 (= $x77 $x101)))
 (let (($x104 (and (and (and $x100 $x95) $x107) $x102)))
 (let (($x9 (and $x104 $x147)))
 (let (($x70 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x68 (and $x70 $x9)))
 (let (($x97 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%d)))
 (let (($x142 (and $x97 $x68)))
 (let (($x88 (= ?x54 input.spec-%var-x0-0.L2%10%d)))
 (let (($x48 (and $x88 $x142)))
 (let (($x60 (= (_ bv12 32) input.spec-%tmpvar-5.L2%17%bbentry)))
 (let (($x143 (and $x60 $x48)))
 (let (($x183 (and $x94 $x143)))
 (let ((?x81 (bvadd ?x54 ?x27)))
 (let (($x91 (= ?x81 input.spec-%tmpvar-6.L2%17%bbentry)))
 (let (($x74 (and $x91 $x183)))
 (let (($x67 (= ?x27 input.spec-%var-x1-0.L2%17%bbentry)))
 (let (($x40 (and $x67 $x74)))
 (let (($x62 (= (_ bv45 32) input.spec-%tmpvar-2.L2%18%bbentry)))
 (let (($x43 (and $x62 $x40)))
 (let (($x50 (and $x94 $x43)))
 (let (($x85 (bvugt ?x75 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x61)))
 (let (($x7 (=> (bvule ?x75 (bvsub (bvadd ?x75 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x11 $x85)))))))
 (let (($x90 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x53 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x59 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x53)))
 (let (($x39 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x59 $x90)))))))
 (let (($x31 (and $x39 $x7)))
 (let (($x156 (and $x31 $x50)))
 (let (($x136 (=> $x156 $x214)))
 (not $x136)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 138 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791810/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32))
(assert
 (let (($x113 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x119 (ite $x113 (_ bv1 32) (_ bv0 32))))
 (let (($x117 (bvuge ?x119 (_ bv1 32))))
 (let (($x100 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x106 (ite $x100 (_ bv1 32) (_ bv0 32))))
 (let (($x96 (= ?x106 (_ bv0 32))))
 (let (($x99 (bvuge ?x106 (_ bv1 32))))
 (let (($x37 (or $x99 $x96)))
 (let (($x168 (and $x37 $x117)))
 (let (($x122 (= ?x119 (_ bv0 32))))
 (let (($x58 (or $x122 $x168)))
 (let (($x218 (or false $x58)))
 (let (($x173 (= $x218 true)))
 (let ((?x211 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x202 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x199 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x212 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x213 (concat ?x212 (concat ?x199 (concat ?x202 ?x211)))))
 (let (($x204 (= ?x213 input.dst.llvm-%x)))
 (let (($x206 (= $x204 true)))
 (let (($x74 (forall ((input.ind-%var248X (_ BitVec 32)) )(let ((?x139 (bvadd (bvmul input.ind-%var248X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x172 (concat (select input.dst.llvm-mem (bvadd ?x139 (_ bv1 32))) (select input.dst.llvm-mem ?x139))))
 (let ((?x48 (concat (select input.dst.llvm-mem (bvadd ?x139 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x139 (_ bv2 32))) ?x172))))
 (let ((?x54 (input.spec-%var-x-0.1.1 input.ind-%var248X)))
 (let (($x94 (input.spec-%var-x-0.0.1 input.ind-%var248X)))
 (=> $x94 (= ?x54 ?x48))))))))
 ))
 (let (($x234 (forall ((input.ind-%var247X (_ BitVec 32)) )(let (($x94 (input.spec-%var-x-0.0.1 input.ind-%var247X)))
 (= $x94 (and (bvsle (_ bv0 32) input.ind-%var247X) (bvslt input.ind-%var247X (_ bv10 32))))))
 ))
 (let (($x40 (and $x234 $x74)))
 (let (($x43 (= $x40 true)))
 (let ((?x25 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x227 (= (_ bv0 32) ?x25)))
 (let ((?x220 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x196 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x220)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x238 (and $x47 $x196)))
 (let (($x188 (and $x238 $x227)))
 (let (($x137 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x178 (and $x137 $x188)))
 (let (($x55 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x221 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x44 $x55)))))))
 (let (($x174 (and $x221 $x178)))
 (let (($x135 (= $x174 true)))
 (let (($x181 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x176 (and true $x181)))
 (let ((?x80 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let (($x157 (= (bvand ?x80 (_ bv4294967292 32)) ?x80)))
 (let (($x126 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x80 (bvsub ?x80 (_ bv4 32))) (bvult ?x80 (bvsub ?x80 (_ bv4 32))))))
 (let (($x160 (and true $x126)))
 (let (($x133 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x228 (and (and (and $x133 $x160) $x157) $x176)))
 (let (($x17 (and $x133 $x228)))
 (let (($x84 (= $x17 true)))
 (let (($x229 (and $x84 $x135)))
 (let (($x50 (and $x229 $x43)))
 (let (($x209 (and $x50 $x206)))
 (let ((?x63 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let (($x120 (= ?x63 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x18 (=> $x117 $x120)))
 (let (($x145 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x134 (= $x117 $x145)))
 (let (($x32 (= false false)))
 (let (($x115 (=> $x122 $x32)))
 (let (($x116 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x118 (= $x122 $x116)))
 (let (($x132 (and (and (and $x118 $x115) $x134) $x18)))
 (let (($x205 (and $x132 $x209)))
 (let ((?x67 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let (($x105 (= ?x67 input.spec-%tmpvar-4.L2%10%d.2)))
 (let (($x108 (=> $x99 $x105)))
 (let (($x102 (bvuge input.spec-%tmpvar-4.L2%10%d.0 (_ bv1 32))))
 (let (($x104 (= $x99 $x102)))
 (let (($x121 (and (and (= $x96 (= input.spec-%tmpvar-4.L2%10%d.0 (_ bv0 32))) (=> $x96 $x32)) $x104)))
 (let (($x112 (and $x121 $x108)))
 (let (($x208 (and $x112 $x205)))
 (let (($x101 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x151 (and $x101 $x208)))
 (let (($x77 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%d)))
 (let (($x210 (and $x77 $x151)))
 (let (($x73 (= ?x63 input.spec-%var-x0-0.L2%10%d)))
 (let (($x162 (and $x73 $x210)))
 (let (($x98 (= (_ bv12 32) input.spec-%tmpvar-5.L2%17%bbentry)))
 (let (($x124 (and $x98 $x162)))
 (let (($x152 (and $x32 $x124)))
 (let ((?x60 (bvadd ?x63 ?x67)))
 (let (($x88 (= ?x60 input.spec-%tmpvar-6.L2%17%bbentry)))
 (let (($x214 (and $x88 $x152)))
 (let (($x91 (= ?x67 input.spec-%var-x1-0.L2%17%bbentry)))
 (let (($x136 (and $x91 $x214)))
 (let (($x16 (= (_ bv45 32) input.spec-%tmpvar-2.L2%18%bbentry)))
 (let (($x215 (and $x16 $x136)))
 (let (($x72 (and $x32 $x215)))
 (let (($x23 (bvugt ?x80 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x80 (_ bv3 32)))))
 (let (($x29 (=> (bvule ?x80 (bvsub (bvadd ?x80 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x22 $x23)))))))
 (let (($x26 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%x (_ bv3 32)))))
 (let (($x66 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x93 $x26)))))))
 (let (($x33 (and $x66 $x29)))
 (let (($x45 (and $x33 $x72)))
 (let (($x28 (=> $x45 $x173)))
 (not $x28))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32))
(assert
 (let (($x113 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x119 (ite $x113 (_ bv1 32) (_ bv0 32))))
 (let (($x117 (bvuge ?x119 (_ bv1 32))))
 (let (($x100 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x106 (ite $x100 (_ bv1 32) (_ bv0 32))))
 (let (($x96 (= ?x106 (_ bv0 32))))
 (let (($x99 (bvuge ?x106 (_ bv1 32))))
 (let (($x37 (or $x99 $x96)))
 (let (($x168 (and $x37 $x117)))
 (let (($x122 (= ?x119 (_ bv0 32))))
 (let (($x58 (or $x122 $x168)))
 (let (($x218 (or false $x58)))
 (let (($x173 (= $x218 true)))
 (let ((?x211 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x202 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x199 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x212 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x213 (concat ?x212 (concat ?x199 (concat ?x202 ?x211)))))
 (let (($x204 (= ?x213 input.dst.llvm-%x)))
 (let (($x206 (= $x204 true)))
 (let (($x74 (forall ((input.ind-%var248X (_ BitVec 32)) )(let ((?x139 (bvadd (bvmul input.ind-%var248X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x172 (concat (select input.dst.llvm-mem (bvadd ?x139 (_ bv1 32))) (select input.dst.llvm-mem ?x139))))
 (let ((?x48 (concat (select input.dst.llvm-mem (bvadd ?x139 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x139 (_ bv2 32))) ?x172))))
 (let ((?x54 (input.spec-%var-x-0.1.1 input.ind-%var248X)))
 (let (($x94 (input.spec-%var-x-0.0.1 input.ind-%var248X)))
 (=> $x94 (= ?x54 ?x48))))))))
 ))
 (let (($x234 (forall ((input.ind-%var247X (_ BitVec 32)) )(let (($x94 (input.spec-%var-x-0.0.1 input.ind-%var247X)))
 (= $x94 (and (bvsle (_ bv0 32) input.ind-%var247X) (bvslt input.ind-%var247X (_ bv10 32))))))
 ))
 (let (($x40 (and $x234 $x74)))
 (let (($x43 (= $x40 true)))
 (let ((?x25 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x227 (= (_ bv0 32) ?x25)))
 (let ((?x220 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x196 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x220)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x238 (and $x47 $x196)))
 (let (($x188 (and $x238 $x227)))
 (let (($x137 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x178 (and $x137 $x188)))
 (let (($x55 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x221 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x44 $x55)))))))
 (let (($x174 (and $x221 $x178)))
 (let (($x135 (= $x174 true)))
 (let (($x181 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x176 (and true $x181)))
 (let ((?x80 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let (($x157 (= (bvand ?x80 (_ bv4294967292 32)) ?x80)))
 (let (($x126 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x80 (bvsub ?x80 (_ bv4 32))) (bvult ?x80 (bvsub ?x80 (_ bv4 32))))))
 (let (($x160 (and true $x126)))
 (let (($x133 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x228 (and (and (and $x133 $x160) $x157) $x176)))
 (let (($x17 (and $x133 $x228)))
 (let (($x84 (= $x17 true)))
 (let (($x229 (and $x84 $x135)))
 (let (($x50 (and $x229 $x43)))
 (let (($x209 (and $x50 $x206)))
 (let ((?x63 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let (($x120 (= ?x63 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x18 (=> $x117 $x120)))
 (let (($x145 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x134 (= $x117 $x145)))
 (let (($x32 (= false false)))
 (let (($x115 (=> $x122 $x32)))
 (let (($x116 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x118 (= $x122 $x116)))
 (let (($x132 (and (and (and $x118 $x115) $x134) $x18)))
 (let (($x205 (and $x132 $x209)))
 (let ((?x67 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let (($x105 (= ?x67 input.spec-%tmpvar-4.L2%10%d.2)))
 (let (($x108 (=> $x99 $x105)))
 (let (($x102 (bvuge input.spec-%tmpvar-4.L2%10%d.0 (_ bv1 32))))
 (let (($x104 (= $x99 $x102)))
 (let (($x121 (and (and (= $x96 (= input.spec-%tmpvar-4.L2%10%d.0 (_ bv0 32))) (=> $x96 $x32)) $x104)))
 (let (($x112 (and $x121 $x108)))
 (let (($x208 (and $x112 $x205)))
 (let (($x101 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x151 (and $x101 $x208)))
 (let (($x77 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%d)))
 (let (($x210 (and $x77 $x151)))
 (let (($x73 (= ?x63 input.spec-%var-x0-0.L2%10%d)))
 (let (($x162 (and $x73 $x210)))
 (let (($x98 (= (_ bv12 32) input.spec-%tmpvar-5.L2%17%bbentry)))
 (let (($x124 (and $x98 $x162)))
 (let (($x152 (and $x32 $x124)))
 (let ((?x60 (bvadd ?x63 ?x67)))
 (let (($x88 (= ?x60 input.spec-%tmpvar-6.L2%17%bbentry)))
 (let (($x214 (and $x88 $x152)))
 (let (($x91 (= ?x67 input.spec-%var-x1-0.L2%17%bbentry)))
 (let (($x136 (and $x91 $x214)))
 (let (($x16 (= (_ bv45 32) input.spec-%tmpvar-2.L2%18%bbentry)))
 (let (($x215 (and $x16 $x136)))
 (let (($x72 (and $x32 $x215)))
 (let (($x23 (bvugt ?x80 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x80 (_ bv3 32)))))
 (let (($x29 (=> (bvule ?x80 (bvsub (bvadd ?x80 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x22 $x23)))))))
 (let (($x26 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%x (_ bv3 32)))))
 (let (($x66 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x93 $x26)))))))
 (let (($x33 (and $x66 $x29)))
 (let (($x45 (and $x33 $x72)))
 (let (($x28 (=> $x45 $x173)))
 (not $x28))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 129 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791810/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x230 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x175 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x230)))
 (let ((?x223 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x175)))
 (let ((?x222 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv1 32)))))
 (let ((?x34 (concat ?x222 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%x)))))
 (let ((?x195 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv2 32)))))
 (let ((?x90 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let ((?x53 (bvadd ?x90 (_ bv3 32))))
 (let ((?x198 (concat (select input.dst.llvm-mem ?x53) (concat ?x195 ?x34))))
 (let ((?x189 (bvadd ?x198 ?x223)))
 (let ((?x22 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let ((?x97 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let ((?x42 (bvadd ?x97 ?x22)))
 (let (($x49 (= ?x42 ?x189)))
 (let (($x192 (= $x49 true)))
 (let ((?x45 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x168 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x173 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x81 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x83 (concat ?x81 (concat ?x173 (concat ?x168 ?x45)))))
 (let (($x242 (= ?x83 input.dst.llvm-%x)))
 (let (($x243 (= $x242 true)))
 (let (($x19 (= input.dst.llvm-%x ?x83)))
 (let ((?x152 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x214 (= (_ bv0 32) ?x152)))
 (let ((?x210 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x162 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x210)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x124 (and $x151 $x162)))
 (let (($x136 (and $x124 $x214)))
 (let (($x208 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x215 (and $x208 $x136)))
 (let (($x206 (forall ((input.ind-%var278X (_ BitVec 32)) )(let ((?x43 (bvadd (bvmul input.ind-%var278X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x159 (concat (select input.dst.llvm-mem (bvadd ?x43 (_ bv1 32))) (select input.dst.llvm-mem ?x43))))
 (let ((?x65 (concat (select input.dst.llvm-mem (bvadd ?x43 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x43 (_ bv2 32))) ?x159))))
 (let ((?x16 (input.spec-%var-x-0.1.1 input.ind-%var278X)))
 (let (($x89 (input.spec-%var-x-0.0.1 input.ind-%var278X)))
 (=> $x89 (= ?x16 ?x65))))))))
 ))
 (let (($x231 (forall ((input.ind-%var277X (_ BitVec 32)) )(let (($x89 (input.spec-%var-x-0.0.1 input.ind-%var277X)))
 (= $x89 (and (bvsle (_ bv0 32) input.ind-%var277X) (bvslt input.ind-%var277X (_ bv10 32))))))
 ))
 (let (($x209 (and $x231 $x206)))
 (let (($x220 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x178 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x47 $x220)))))))
 (let (($x128 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x201 (and true $x128)))
 (let (($x181 (= (bvand ?x90 (_ bv4294967292 32)) ?x90)))
 (let (($x158 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x90 (bvsub ?x90 (_ bv4 32))) (bvult ?x90 (bvsub ?x90 (_ bv4 32))))))
 (let (($x41 (and true $x158)))
 (let (($x36 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x44 (and (and (and $x36 $x41) $x181) $x201)))
 (let (($x55 (and $x36 $x44)))
 (let (($x69 (and (and (and (and $x55 $x178) $x209) $x215) $x19)))
 (let (($x171 (= $x69 true)))
 (let (($x207 (= $x55 true)))
 (let (($x225 (and $x207 $x171)))
 (let (($x15 (and $x225 $x243)))
 (let (($x115 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x6 (ite $x115 (_ bv1 32) (_ bv0 32))))
 (let (($x120 (bvuge ?x6 (_ bv1 32))))
 (let (($x76 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x63 (ite $x76 (_ bv1 32) (_ bv0 32))))
 (let (($x105 (bvuge ?x63 (_ bv1 32))))
 (let (($x179 (and $x105 $x120)))
 (let (($x155 (and $x179 $x15)))
 (let (($x5 (= ?x97 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x133 (=> $x120 $x5)))
 (let (($x18 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x132 (= $x120 $x18)))
 (let (($x102 (= false false)))
 (let (($x117 (= ?x6 (_ bv0 32))))
 (let (($x111 (=> $x117 $x102)))
 (let (($x134 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x165 (= $x117 $x134)))
 (let (($x154 (and (and (and $x165 $x111) $x132) $x133)))
 (let (($x146 (and $x154 $x155)))
 (let (($x119 (= ?x22 input.spec-%tmpvar-4.L2%10%d.2)))
 (let (($x122 (=> $x105 $x119)))
 (let (($x108 (bvuge input.spec-%tmpvar-4.L2%10%d.0 (_ bv1 32))))
 (let (($x112 (= $x105 $x108)))
 (let (($x60 (= ?x63 (_ bv0 32))))
 (let (($x114 (=> $x60 $x102)))
 (let (($x104 (= input.spec-%tmpvar-4.L2%10%d.0 (_ bv0 32))))
 (let (($x121 (= $x60 $x104)))
 (let (($x118 (and (and (and $x121 $x114) $x112) $x122)))
 (let (($x8 (and $x118 $x146)))
 (let (($x73 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x123 (and $x73 $x8)))
 (let (($x32 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%d)))
 (let (($x149 (and $x32 $x123)))
 (let (($x103 (= ?x97 input.spec-%var-x0-0.L2%10%d)))
 (let (($x244 (and $x103 $x149)))
 (let (($x106 (= (_ bv12 32) input.spec-%tmpvar-5.L2%17%bbentry)))
 (let (($x163 (and $x106 $x244)))
 (let (($x46 (and $x102 $x163)))
 (let (($x77 (= ?x42 input.spec-%tmpvar-6.L2%17%bbentry)))
 (let (($x71 (and $x77 $x46)))
 (let (($x101 (= ?x22 input.spec-%var-x1-0.L2%17%bbentry)))
 (let (($x226 (and $x101 $x71)))
 (let (($x85 (= (_ bv45 32) input.spec-%tmpvar-2.L2%18%bbentry)))
 (let (($x235 (and $x85 $x226)))
 (let (($x236 (and $x102 $x235)))
 (let (($x35 (bvugt ?x90 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x82 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x53)))
 (let (($x61 (=> (bvule ?x90 (bvsub (bvadd ?x90 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x82 $x35)))))))
 (let (($x109 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x91 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x88 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x91)))
 (let (($x31 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x88 $x109)))))))
 (let (($x93 (and $x31 $x61)))
 (let (($x167 (and $x93 $x236)))
 (let (($x148 (=> $x167 $x192)))
 (not $x148))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x230 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x175 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x230)))
 (let ((?x223 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x175)))
 (let ((?x222 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv1 32)))))
 (let ((?x34 (concat ?x222 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%x)))))
 (let ((?x195 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv2 32)))))
 (let ((?x90 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let ((?x53 (bvadd ?x90 (_ bv3 32))))
 (let ((?x198 (concat (select input.dst.llvm-mem ?x53) (concat ?x195 ?x34))))
 (let ((?x189 (bvadd ?x198 ?x223)))
 (let ((?x22 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let ((?x97 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let ((?x42 (bvadd ?x97 ?x22)))
 (let (($x49 (= ?x42 ?x189)))
 (let (($x192 (= $x49 true)))
 (let ((?x45 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x168 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x173 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x81 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x83 (concat ?x81 (concat ?x173 (concat ?x168 ?x45)))))
 (let (($x242 (= ?x83 input.dst.llvm-%x)))
 (let (($x243 (= $x242 true)))
 (let (($x19 (= input.dst.llvm-%x ?x83)))
 (let ((?x152 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x214 (= (_ bv0 32) ?x152)))
 (let ((?x210 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x162 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x210)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x124 (and $x151 $x162)))
 (let (($x136 (and $x124 $x214)))
 (let (($x208 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x215 (and $x208 $x136)))
 (let (($x206 (forall ((input.ind-%var278X (_ BitVec 32)) )(let ((?x43 (bvadd (bvmul input.ind-%var278X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x159 (concat (select input.dst.llvm-mem (bvadd ?x43 (_ bv1 32))) (select input.dst.llvm-mem ?x43))))
 (let ((?x65 (concat (select input.dst.llvm-mem (bvadd ?x43 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x43 (_ bv2 32))) ?x159))))
 (let ((?x16 (input.spec-%var-x-0.1.1 input.ind-%var278X)))
 (let (($x89 (input.spec-%var-x-0.0.1 input.ind-%var278X)))
 (=> $x89 (= ?x16 ?x65))))))))
 ))
 (let (($x231 (forall ((input.ind-%var277X (_ BitVec 32)) )(let (($x89 (input.spec-%var-x-0.0.1 input.ind-%var277X)))
 (= $x89 (and (bvsle (_ bv0 32) input.ind-%var277X) (bvslt input.ind-%var277X (_ bv10 32))))))
 ))
 (let (($x209 (and $x231 $x206)))
 (let (($x220 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x178 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x47 $x220)))))))
 (let (($x128 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x201 (and true $x128)))
 (let (($x181 (= (bvand ?x90 (_ bv4294967292 32)) ?x90)))
 (let (($x158 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x90 (bvsub ?x90 (_ bv4 32))) (bvult ?x90 (bvsub ?x90 (_ bv4 32))))))
 (let (($x41 (and true $x158)))
 (let (($x36 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x44 (and (and (and $x36 $x41) $x181) $x201)))
 (let (($x55 (and $x36 $x44)))
 (let (($x69 (and (and (and (and $x55 $x178) $x209) $x215) $x19)))
 (let (($x171 (= $x69 true)))
 (let (($x207 (= $x55 true)))
 (let (($x225 (and $x207 $x171)))
 (let (($x15 (and $x225 $x243)))
 (let (($x115 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x6 (ite $x115 (_ bv1 32) (_ bv0 32))))
 (let (($x120 (bvuge ?x6 (_ bv1 32))))
 (let (($x76 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x63 (ite $x76 (_ bv1 32) (_ bv0 32))))
 (let (($x105 (bvuge ?x63 (_ bv1 32))))
 (let (($x179 (and $x105 $x120)))
 (let (($x155 (and $x179 $x15)))
 (let (($x5 (= ?x97 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x133 (=> $x120 $x5)))
 (let (($x18 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x132 (= $x120 $x18)))
 (let (($x102 (= false false)))
 (let (($x117 (= ?x6 (_ bv0 32))))
 (let (($x111 (=> $x117 $x102)))
 (let (($x134 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x165 (= $x117 $x134)))
 (let (($x154 (and (and (and $x165 $x111) $x132) $x133)))
 (let (($x146 (and $x154 $x155)))
 (let (($x119 (= ?x22 input.spec-%tmpvar-4.L2%10%d.2)))
 (let (($x122 (=> $x105 $x119)))
 (let (($x108 (bvuge input.spec-%tmpvar-4.L2%10%d.0 (_ bv1 32))))
 (let (($x112 (= $x105 $x108)))
 (let (($x60 (= ?x63 (_ bv0 32))))
 (let (($x114 (=> $x60 $x102)))
 (let (($x104 (= input.spec-%tmpvar-4.L2%10%d.0 (_ bv0 32))))
 (let (($x121 (= $x60 $x104)))
 (let (($x118 (and (and (and $x121 $x114) $x112) $x122)))
 (let (($x8 (and $x118 $x146)))
 (let (($x73 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x123 (and $x73 $x8)))
 (let (($x32 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%d)))
 (let (($x149 (and $x32 $x123)))
 (let (($x103 (= ?x97 input.spec-%var-x0-0.L2%10%d)))
 (let (($x244 (and $x103 $x149)))
 (let (($x106 (= (_ bv12 32) input.spec-%tmpvar-5.L2%17%bbentry)))
 (let (($x163 (and $x106 $x244)))
 (let (($x46 (and $x102 $x163)))
 (let (($x77 (= ?x42 input.spec-%tmpvar-6.L2%17%bbentry)))
 (let (($x71 (and $x77 $x46)))
 (let (($x101 (= ?x22 input.spec-%var-x1-0.L2%17%bbentry)))
 (let (($x226 (and $x101 $x71)))
 (let (($x85 (= (_ bv45 32) input.spec-%tmpvar-2.L2%18%bbentry)))
 (let (($x235 (and $x85 $x226)))
 (let (($x236 (and $x102 $x235)))
 (let (($x35 (bvugt ?x90 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x82 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x53)))
 (let (($x61 (=> (bvule ?x90 (bvsub (bvadd ?x90 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x82 $x35)))))))
 (let (($x109 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x91 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x88 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x91)))
 (let (($x31 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x88 $x109)))))))
 (let (($x93 (and $x31 $x61)))
 (let (($x167 (and $x93 $x236)))
 (let (($x148 (=> $x167 $x192)))
 (not $x148))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791810/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x142 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x143 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x142)))
 (let ((?x57 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x143)))
 (let ((?x174 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv1 32)))))
 (let ((?x229 (concat ?x174 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%x)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv2 32)))))
 (let ((?x91 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let ((?x38 (bvadd ?x91 (_ bv3 32))))
 (let ((?x127 (concat (select input.dst.llvm-mem ?x38) (concat ?x68 ?x229))))
 (let ((?x94 (bvadd ?x127 ?x57)))
 (let (($x183 (= (_ bv12 32) ?x94)))
 (let (($x54 (= $x183 true)))
 (let ((?x71 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x235 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x197 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x186 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x222 (concat ?x186 (concat ?x197 (concat ?x235 ?x71)))))
 (let (($x187 (= ?x222 input.dst.llvm-%x)))
 (let (($x180 (= $x187 true)))
 (let (($x239 (= input.dst.llvm-%x ?x222)))
 (let ((?x123 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x149 (= (_ bv0 32) ?x123)))
 (let ((?x155 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x146 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x155)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (and $x15 $x146)))
 (let (($x244 (and $x8 $x149)))
 (let (($x243 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x163 (and $x243 $x244)))
 (let (($x171 (forall ((input.ind-%var306X (_ BitVec 32)) )(let ((?x240 (bvadd (bvmul input.ind-%var306X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x173 (concat (select input.dst.llvm-mem (bvadd ?x240 (_ bv1 32))) (select input.dst.llvm-mem ?x240))))
 (let ((?x83 (concat (select input.dst.llvm-mem (bvadd ?x240 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x240 (_ bv2 32))) ?x173))))
 (let ((?x85 (input.spec-%var-x-0.1.1 input.ind-%var306X)))
 (let (($x78 (input.spec-%var-x-0.0.1 input.ind-%var306X)))
 (=> $x78 (= ?x85 ?x83))))))))
 ))
 (let (($x203 (forall ((input.ind-%var305X (_ BitVec 32)) )(let (($x78 (input.spec-%var-x-0.0.1 input.ind-%var305X)))
 (= $x78 (and (bvsle (_ bv0 32) input.ind-%var305X) (bvslt input.ind-%var305X (_ bv10 32))))))
 ))
 (let (($x225 (and $x203 $x171)))
 (let (($x89 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x231 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x27 $x89)))))))
 (let (($x207 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x221 (and true $x207)))
 (let (($x84 (= (bvand ?x91 (_ bv4294967292 32)) ?x91)))
 (let (($x228 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x91 (bvsub ?x91 (_ bv4 32))) (bvult ?x91 (bvsub ?x91 (_ bv4 32))))))
 (let (($x176 (and true $x228)))
 (let (($x41 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x137 (and (and (and $x41 $x176) $x84) $x221)))
 (let (($x47 (and $x41 $x137)))
 (let (($x224 (and (and (and (and $x47 $x231) $x225) $x163) $x239)))
 (let (($x194 (= $x224 true)))
 (let (($x220 (= $x47 true)))
 (let (($x191 (and $x220 $x194)))
 (let (($x177 (and $x191 $x180)))
 (let (($x111 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x138 (ite $x111 (_ bv1 32) (_ bv0 32))))
 (let (($x5 (bvuge ?x138 (_ bv1 32))))
 (let (($x100 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x97 (ite $x100 (_ bv1 32) (_ bv0 32))))
 (let (($x42 (= ?x97 (_ bv0 32))))
 (let (($x200 (and $x42 $x5)))
 (let (($x230 (and $x200 $x177)))
 (let ((?x96 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let (($x126 (= ?x96 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x160 (=> $x5 $x126)))
 (let (($x133 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x154 (= $x5 $x133)))
 (let (($x108 (= false false)))
 (let (($x120 (= ?x138 (_ bv0 32))))
 (let (($x130 (=> $x120 $x108)))
 (let (($x132 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x131 (= $x120 $x132)))
 (let (($x161 (and (and (and $x131 $x130) $x154) $x160)))
 (let (($x175 (and $x161 $x230)))
 (let ((?x82 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let (($x6 (= ?x82 input.spec-%tmpvar-4.L2%10%d.2)))
 (let (($x119 (bvuge ?x97 (_ bv1 32))))
 (let (($x117 (=> $x119 $x6)))
 (let (($x122 (bvuge input.spec-%tmpvar-4.L2%10%d.0 (_ bv1 32))))
 (let (($x118 (= $x119 $x122)))
 (let (($x134 (and (and (= $x42 (= input.spec-%tmpvar-4.L2%10%d.0 (_ bv0 32))) (=> $x42 $x108)) $x118)))
 (let (($x165 (and $x134 $x117)))
 (let (($x223 (and $x165 $x175)))
 (let (($x103 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x189 (and $x103 $x223)))
 (let (($x102 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%d)))
 (let (($x49 (and $x102 $x189)))
 (let (($x121 (= ?x96 input.spec-%var-x0-0.L2%10%d)))
 (let (($x192 (and $x121 $x49)))
 (let (($x63 (= (_ bv12 32) input.spec-%tmpvar-5.L2%17%bbentry)))
 (let (($x148 (and $x63 $x192)))
 (let (($x182 (and $x108 $x148)))
 (let ((?x107 (bvadd ?x96 ?x82)))
 (let (($x32 (= ?x107 input.spec-%tmpvar-6.L2%17%bbentry)))
 (let (($x29 (and $x32 $x182)))
 (let (($x73 (= ?x82 input.spec-%var-x1-0.L2%17%bbentry)))
 (let (($x95 (and $x73 $x29)))
 (let (($x53 (= (_ bv45 32) input.spec-%tmpvar-2.L2%18%bbentry)))
 (let (($x52 (and $x53 $x95)))
 (let (($x21 (and $x108 $x52)))
 (let (($x79 (bvugt ?x91 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x38)))
 (let (($x14 (=> (bvule ?x91 (bvsub (bvadd ?x91 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x30 $x79)))))))
 (let (($x110 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x101 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x77 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x101)))
 (let (($x66 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x77 $x110)))))))
 (let (($x88 (and $x66 $x14)))
 (let (($x72 (and $x88 $x21)))
 (let (($x74 (=> $x72 $x54)))
 (not $x74))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x142 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x143 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x142)))
 (let ((?x57 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x143)))
 (let ((?x174 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv1 32)))))
 (let ((?x229 (concat ?x174 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%x)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv2 32)))))
 (let ((?x91 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let ((?x38 (bvadd ?x91 (_ bv3 32))))
 (let ((?x127 (concat (select input.dst.llvm-mem ?x38) (concat ?x68 ?x229))))
 (let ((?x94 (bvadd ?x127 ?x57)))
 (let (($x183 (= (_ bv12 32) ?x94)))
 (let (($x54 (= $x183 true)))
 (let ((?x71 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x235 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x197 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x186 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x222 (concat ?x186 (concat ?x197 (concat ?x235 ?x71)))))
 (let (($x187 (= ?x222 input.dst.llvm-%x)))
 (let (($x180 (= $x187 true)))
 (let (($x239 (= input.dst.llvm-%x ?x222)))
 (let ((?x123 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x149 (= (_ bv0 32) ?x123)))
 (let ((?x155 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x146 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x155)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (and $x15 $x146)))
 (let (($x244 (and $x8 $x149)))
 (let (($x243 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x163 (and $x243 $x244)))
 (let (($x171 (forall ((input.ind-%var306X (_ BitVec 32)) )(let ((?x240 (bvadd (bvmul input.ind-%var306X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x173 (concat (select input.dst.llvm-mem (bvadd ?x240 (_ bv1 32))) (select input.dst.llvm-mem ?x240))))
 (let ((?x83 (concat (select input.dst.llvm-mem (bvadd ?x240 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x240 (_ bv2 32))) ?x173))))
 (let ((?x85 (input.spec-%var-x-0.1.1 input.ind-%var306X)))
 (let (($x78 (input.spec-%var-x-0.0.1 input.ind-%var306X)))
 (=> $x78 (= ?x85 ?x83))))))))
 ))
 (let (($x203 (forall ((input.ind-%var305X (_ BitVec 32)) )(let (($x78 (input.spec-%var-x-0.0.1 input.ind-%var305X)))
 (= $x78 (and (bvsle (_ bv0 32) input.ind-%var305X) (bvslt input.ind-%var305X (_ bv10 32))))))
 ))
 (let (($x225 (and $x203 $x171)))
 (let (($x89 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x231 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x27 $x89)))))))
 (let (($x207 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x221 (and true $x207)))
 (let (($x84 (= (bvand ?x91 (_ bv4294967292 32)) ?x91)))
 (let (($x228 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x91 (bvsub ?x91 (_ bv4 32))) (bvult ?x91 (bvsub ?x91 (_ bv4 32))))))
 (let (($x176 (and true $x228)))
 (let (($x41 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x137 (and (and (and $x41 $x176) $x84) $x221)))
 (let (($x47 (and $x41 $x137)))
 (let (($x224 (and (and (and (and $x47 $x231) $x225) $x163) $x239)))
 (let (($x194 (= $x224 true)))
 (let (($x220 (= $x47 true)))
 (let (($x191 (and $x220 $x194)))
 (let (($x177 (and $x191 $x180)))
 (let (($x111 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x138 (ite $x111 (_ bv1 32) (_ bv0 32))))
 (let (($x5 (bvuge ?x138 (_ bv1 32))))
 (let (($x100 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x97 (ite $x100 (_ bv1 32) (_ bv0 32))))
 (let (($x42 (= ?x97 (_ bv0 32))))
 (let (($x200 (and $x42 $x5)))
 (let (($x230 (and $x200 $x177)))
 (let ((?x96 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let (($x126 (= ?x96 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x160 (=> $x5 $x126)))
 (let (($x133 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x154 (= $x5 $x133)))
 (let (($x108 (= false false)))
 (let (($x120 (= ?x138 (_ bv0 32))))
 (let (($x130 (=> $x120 $x108)))
 (let (($x132 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x131 (= $x120 $x132)))
 (let (($x161 (and (and (and $x131 $x130) $x154) $x160)))
 (let (($x175 (and $x161 $x230)))
 (let ((?x82 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let (($x6 (= ?x82 input.spec-%tmpvar-4.L2%10%d.2)))
 (let (($x119 (bvuge ?x97 (_ bv1 32))))
 (let (($x117 (=> $x119 $x6)))
 (let (($x122 (bvuge input.spec-%tmpvar-4.L2%10%d.0 (_ bv1 32))))
 (let (($x118 (= $x119 $x122)))
 (let (($x134 (and (and (= $x42 (= input.spec-%tmpvar-4.L2%10%d.0 (_ bv0 32))) (=> $x42 $x108)) $x118)))
 (let (($x165 (and $x134 $x117)))
 (let (($x223 (and $x165 $x175)))
 (let (($x103 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x189 (and $x103 $x223)))
 (let (($x102 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%d)))
 (let (($x49 (and $x102 $x189)))
 (let (($x121 (= ?x96 input.spec-%var-x0-0.L2%10%d)))
 (let (($x192 (and $x121 $x49)))
 (let (($x63 (= (_ bv12 32) input.spec-%tmpvar-5.L2%17%bbentry)))
 (let (($x148 (and $x63 $x192)))
 (let (($x182 (and $x108 $x148)))
 (let ((?x107 (bvadd ?x96 ?x82)))
 (let (($x32 (= ?x107 input.spec-%tmpvar-6.L2%17%bbentry)))
 (let (($x29 (and $x32 $x182)))
 (let (($x73 (= ?x82 input.spec-%var-x1-0.L2%17%bbentry)))
 (let (($x95 (and $x73 $x29)))
 (let (($x53 (= (_ bv45 32) input.spec-%tmpvar-2.L2%18%bbentry)))
 (let (($x52 (and $x53 $x95)))
 (let (($x21 (and $x108 $x52)))
 (let (($x79 (bvugt ?x91 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x38)))
 (let (($x14 (=> (bvule ?x91 (bvsub (bvadd ?x91 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x30 $x79)))))))
 (let (($x110 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x101 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x77 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x101)))
 (let (($x66 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x77 $x110)))))))
 (let (($x88 (and $x66 $x14)))
 (let (($x72 (and $x88 $x21)))
 (let (($x74 (=> $x72 $x54)))
 (not $x74))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 137 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791810/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x210 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x209)))
 (let ((?x25 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x210)))
 (let ((?x238 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv1 32)))))
 (let ((?x16 (concat ?x238 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%x)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv2 32)))))
 (let ((?x101 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let ((?x23 (bvadd ?x101 (_ bv3 32))))
 (let ((?x124 (concat (select input.dst.llvm-mem ?x23) (concat ?x65 ?x16))))
 (let ((?x43 (bvadd ?x124 ?x25)))
 (let (($x211 (= (_ bv45 32) ?x43)))
 (let (($x214 (= $x211 true)))
 (let ((?x182 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x13 (concat ?x68 (concat ?x72 (concat ?x95 ?x182)))))
 (let (($x172 (= ?x13 input.dst.llvm-%x)))
 (let (($x216 (= $x172 true)))
 (let (($x174 (= input.dst.llvm-%x ?x13)))
 (let ((?x223 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x189 (= (_ bv0 32) ?x223)))
 (let ((?x177 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x230 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x177)))
 (let (($x180 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x175 (and $x180 $x230)))
 (let (($x49 (and $x175 $x189)))
 (let (($x187 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x192 (and $x187 $x49)))
 (let (($x224 (forall ((input.ind-%var334X (_ BitVec 32)) )(let ((?x163 (bvadd (bvmul input.ind-%var334X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x167 (concat (select input.dst.llvm-mem (bvadd ?x163 (_ bv1 32))) (select input.dst.llvm-mem ?x163))))
 (let ((?x170 (concat (select input.dst.llvm-mem (bvadd ?x163 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x163 (_ bv2 32))) ?x167))))
 (let ((?x53 (input.spec-%var-x-0.1.1 input.ind-%var334X)))
 (let (($x87 (input.spec-%var-x-0.0.1 input.ind-%var334X)))
 (=> $x87 (= ?x53 ?x170))))))))
 ))
 (let (($x168 (forall ((input.ind-%var333X (_ BitVec 32)) )(let (($x87 (input.spec-%var-x-0.0.1 input.ind-%var333X)))
 (= $x87 (and (bvsle (_ bv0 32) input.ind-%var333X) (bvslt input.ind-%var333X (_ bv10 32))))))
 ))
 (let (($x194 (and $x168 $x224)))
 (let (($x51 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x34 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x144 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x34 $x51)))))))
 (let (($x47 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x220 (and true $x47)))
 (let (($x44 (= (bvand ?x101 (_ bv4294967292 32)) ?x101)))
 (let (($x188 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x101 (bvsub ?x101 (_ bv4 32))) (bvult ?x101 (bvsub ?x101 (_ bv4 32))))))
 (let (($x201 (and true $x188)))
 (let (($x228 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x233 (and (and (and $x228 $x201) $x44) $x220)))
 (let (($x153 (and $x228 $x233)))
 (let (($x127 (and (and (and (and $x153 $x144) $x194) $x192) $x174)))
 (let (($x219 (= $x127 true)))
 (let (($x27 (= $x153 true)))
 (let (($x147 (and $x27 $x219)))
 (let (($x150 (and $x147 $x216)))
 (let (($x130 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x36 (ite $x130 (_ bv1 32) (_ bv0 32))))
 (let (($x5 (= ?x36 (_ bv0 32))))
 (let (($x125 (and $x5 $x150)))
 (let ((?x60 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let (($x166 (= ?x60 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x126 (bvuge ?x36 (_ bv1 32))))
 (let (($x158 (=> $x126 $x166)))
 (let (($x160 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x161 (= $x126 $x160)))
 (let (($x122 (= false false)))
 (let (($x179 (=> $x5 $x122)))
 (let (($x154 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x157 (= $x5 $x154)))
 (let (($x217 (and (and (and $x157 $x179) $x161) $x158)))
 (let (($x142 (and $x217 $x125)))
 (let ((?x30 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let (($x138 (= ?x30 input.spec-%tmpvar-4.L2%10%d.2)))
 (let (($x76 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x96 (ite $x76 (_ bv1 32) (_ bv0 32))))
 (let (($x6 (bvuge ?x96 (_ bv1 32))))
 (let (($x120 (=> $x6 $x138)))
 (let (($x117 (bvuge input.spec-%tmpvar-4.L2%10%d.0 (_ bv1 32))))
 (let (($x165 (= $x6 $x117)))
 (let (($x107 (= ?x96 (_ bv0 32))))
 (let (($x115 (=> $x107 $x122)))
 (let (($x118 (= input.spec-%tmpvar-4.L2%10%d.0 (_ bv0 32))))
 (let (($x134 (= $x107 $x118)))
 (let (($x131 (and (and (and $x134 $x115) $x165) $x120)))
 (let (($x143 (and $x131 $x142)))
 (let (($x121 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x57 (and $x121 $x143)))
 (let (($x108 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%d)))
 (let (($x94 (and $x108 $x57)))
 (let (($x116 (= ?x60 input.spec-%var-x0-0.L2%10%d)))
 (let (($x183 (and $x116 $x94)))
 (let (($x97 (= (_ bv12 32) input.spec-%tmpvar-5.L2%17%bbentry)))
 (let (($x54 (and $x97 $x183)))
 (let (($x74 (and $x122 $x54)))
 (let ((?x104 (bvadd ?x60 ?x30)))
 (let (($x102 (= ?x104 input.spec-%tmpvar-6.L2%17%bbentry)))
 (let (($x237 (and $x102 $x74)))
 (let (($x103 (= ?x30 input.spec-%var-x1-0.L2%17%bbentry)))
 (let (($x61 (and $x103 $x237)))
 (let (($x38 (= (_ bv45 32) input.spec-%tmpvar-2.L2%18%bbentry)))
 (let (($x98 (and $x38 $x61)))
 (let (($x24 (and $x122 $x98)))
 (let (($x67 (bvugt ?x101 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x23)))
 (let (($x20 (=> (bvule ?x101 (bvsub (bvadd ?x101 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x26 $x67)))))))
 (let (($x145 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x73 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x73)))
 (let (($x31 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x32 $x145)))))))
 (let (($x77 (and $x31 $x20)))
 (let (($x196 (and $x77 $x24)))
 (let (($x50 (=> $x196 $x214)))
 (not $x50)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x210 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x209)))
 (let ((?x25 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x210)))
 (let ((?x238 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv1 32)))))
 (let ((?x16 (concat ?x238 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%x)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv2 32)))))
 (let ((?x101 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let ((?x23 (bvadd ?x101 (_ bv3 32))))
 (let ((?x124 (concat (select input.dst.llvm-mem ?x23) (concat ?x65 ?x16))))
 (let ((?x43 (bvadd ?x124 ?x25)))
 (let (($x211 (= (_ bv45 32) ?x43)))
 (let (($x214 (= $x211 true)))
 (let ((?x182 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x13 (concat ?x68 (concat ?x72 (concat ?x95 ?x182)))))
 (let (($x172 (= ?x13 input.dst.llvm-%x)))
 (let (($x216 (= $x172 true)))
 (let (($x174 (= input.dst.llvm-%x ?x13)))
 (let ((?x223 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x189 (= (_ bv0 32) ?x223)))
 (let ((?x177 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x230 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x177)))
 (let (($x180 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x175 (and $x180 $x230)))
 (let (($x49 (and $x175 $x189)))
 (let (($x187 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x192 (and $x187 $x49)))
 (let (($x224 (forall ((input.ind-%var334X (_ BitVec 32)) )(let ((?x163 (bvadd (bvmul input.ind-%var334X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x167 (concat (select input.dst.llvm-mem (bvadd ?x163 (_ bv1 32))) (select input.dst.llvm-mem ?x163))))
 (let ((?x170 (concat (select input.dst.llvm-mem (bvadd ?x163 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x163 (_ bv2 32))) ?x167))))
 (let ((?x53 (input.spec-%var-x-0.1.1 input.ind-%var334X)))
 (let (($x87 (input.spec-%var-x-0.0.1 input.ind-%var334X)))
 (=> $x87 (= ?x53 ?x170))))))))
 ))
 (let (($x168 (forall ((input.ind-%var333X (_ BitVec 32)) )(let (($x87 (input.spec-%var-x-0.0.1 input.ind-%var333X)))
 (= $x87 (and (bvsle (_ bv0 32) input.ind-%var333X) (bvslt input.ind-%var333X (_ bv10 32))))))
 ))
 (let (($x194 (and $x168 $x224)))
 (let (($x51 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x34 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x144 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x34 $x51)))))))
 (let (($x47 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x220 (and true $x47)))
 (let (($x44 (= (bvand ?x101 (_ bv4294967292 32)) ?x101)))
 (let (($x188 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x101 (bvsub ?x101 (_ bv4 32))) (bvult ?x101 (bvsub ?x101 (_ bv4 32))))))
 (let (($x201 (and true $x188)))
 (let (($x228 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x233 (and (and (and $x228 $x201) $x44) $x220)))
 (let (($x153 (and $x228 $x233)))
 (let (($x127 (and (and (and (and $x153 $x144) $x194) $x192) $x174)))
 (let (($x219 (= $x127 true)))
 (let (($x27 (= $x153 true)))
 (let (($x147 (and $x27 $x219)))
 (let (($x150 (and $x147 $x216)))
 (let (($x130 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x36 (ite $x130 (_ bv1 32) (_ bv0 32))))
 (let (($x5 (= ?x36 (_ bv0 32))))
 (let (($x125 (and $x5 $x150)))
 (let ((?x60 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let (($x166 (= ?x60 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x126 (bvuge ?x36 (_ bv1 32))))
 (let (($x158 (=> $x126 $x166)))
 (let (($x160 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x161 (= $x126 $x160)))
 (let (($x122 (= false false)))
 (let (($x179 (=> $x5 $x122)))
 (let (($x154 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x157 (= $x5 $x154)))
 (let (($x217 (and (and (and $x157 $x179) $x161) $x158)))
 (let (($x142 (and $x217 $x125)))
 (let ((?x30 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let (($x138 (= ?x30 input.spec-%tmpvar-4.L2%10%d.2)))
 (let (($x76 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x96 (ite $x76 (_ bv1 32) (_ bv0 32))))
 (let (($x6 (bvuge ?x96 (_ bv1 32))))
 (let (($x120 (=> $x6 $x138)))
 (let (($x117 (bvuge input.spec-%tmpvar-4.L2%10%d.0 (_ bv1 32))))
 (let (($x165 (= $x6 $x117)))
 (let (($x107 (= ?x96 (_ bv0 32))))
 (let (($x115 (=> $x107 $x122)))
 (let (($x118 (= input.spec-%tmpvar-4.L2%10%d.0 (_ bv0 32))))
 (let (($x134 (= $x107 $x118)))
 (let (($x131 (and (and (and $x134 $x115) $x165) $x120)))
 (let (($x143 (and $x131 $x142)))
 (let (($x121 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x57 (and $x121 $x143)))
 (let (($x108 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%d)))
 (let (($x94 (and $x108 $x57)))
 (let (($x116 (= ?x60 input.spec-%var-x0-0.L2%10%d)))
 (let (($x183 (and $x116 $x94)))
 (let (($x97 (= (_ bv12 32) input.spec-%tmpvar-5.L2%17%bbentry)))
 (let (($x54 (and $x97 $x183)))
 (let (($x74 (and $x122 $x54)))
 (let ((?x104 (bvadd ?x60 ?x30)))
 (let (($x102 (= ?x104 input.spec-%tmpvar-6.L2%17%bbentry)))
 (let (($x237 (and $x102 $x74)))
 (let (($x103 (= ?x30 input.spec-%var-x1-0.L2%17%bbentry)))
 (let (($x61 (and $x103 $x237)))
 (let (($x38 (= (_ bv45 32) input.spec-%tmpvar-2.L2%18%bbentry)))
 (let (($x98 (and $x38 $x61)))
 (let (($x24 (and $x122 $x98)))
 (let (($x67 (bvugt ?x101 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x23)))
 (let (($x20 (=> (bvule ?x101 (bvsub (bvadd ?x101 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x26 $x67)))))))
 (let (($x145 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x73 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x73)))
 (let (($x31 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x32 $x145)))))))
 (let (($x77 (and $x31 $x20)))
 (let (($x196 (and $x77 $x24)))
 (let (($x50 (=> $x196 $x214)))
 (not $x50)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 138 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791810/query
