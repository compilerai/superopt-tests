==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x14 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x11 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x14)))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x11)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x8 $x6)))
 (let (($x19 (and $x7 $x18)))
 (and $x19 $x20)))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x14 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x11 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x14)))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x11)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x8 $x6)))
 (let (($x19 (and $x7 $x18)))
 (and $x19 $x20)))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708044/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L1%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L1%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%18%bbentry () (_ BitVec 32))
(assert
 (let (($x333 (= true false)))
 (let (($x334 (= $x333 true)))
 (let ((?x308 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x310 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x313 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x316 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x317 (concat ?x316 (concat ?x313 (concat ?x310 ?x308)))))
 (let (($x318 (= ?x317 input.dst.llvm-%x)))
 (let (($x319 (= $x318 true)))
 (let (($x320 (= $x319 true)))
 (let (($x301 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x287 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x291 (concat (select input.dst.llvm-mem (bvadd ?x287 (_ bv1 32))) (select input.dst.llvm-mem ?x287))))
 (let ((?x297 (concat (select input.dst.llvm-mem (bvadd ?x287 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x287 (_ bv2 32))) ?x291))))
 (let ((?x230 (ite (input.spec-%var-x-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x252 (bvuge ?x230 (_ bv1 32))))
 (=> $x252 (= (input.spec-%var-x-0.1.1 Lambda1Var) ?x297))))))))
 ))
 (let (($x254 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x227 (ite (and (bvsle (_ bv0 32) Lambda1Var) (bvslt Lambda1Var (_ bv10 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x230 (ite (input.spec-%var-x-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x252 (bvuge ?x230 (_ bv1 32))))
 (= $x252 (bvuge ?x227 (_ bv1 32)))))))
 ))
 (let (($x236 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x47 (= false false)))
 (let ((?x230 (ite (input.spec-%var-x-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x231 (= ?x230 (_ bv0 32))))
 (=> $x231 $x47)))))
 ))
 (let (($x233 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x230 (ite (input.spec-%var-x-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x231 (= ?x230 (_ bv0 32))))
 (= $x231 (= (ite (and (bvsle (_ bv0 32) Lambda1Var) (bvslt Lambda1Var (_ bv10 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x237 (and $x233 $x236)))
 (let (($x255 (and $x237 $x254)))
 (let (($x302 (and $x255 $x301)))
 (let (($x303 (= $x302 true)))
 (let (($x304 (= $x303 true)))
 (let (($x305 (= $x304 true)))
 (let (($x135 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x134 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%x (_ bv3 32)))))
 (let (($x141 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x134 $x135)))))))
 (let (($x129 (= $x141 true)))
 (let (($x130 (= $x129 true)))
 (let (($x142 (= $x130 true)))
 (let ((?x121 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x122 (= (_ bv0 32) ?x121)))
 (let ((?x118 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x119 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x118)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x120 (and $x117 $x119)))
 (let (($x123 (and $x120 $x122)))
 (let (($x116 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x124 (and $x116 $x123)))
 (let (($x125 (= $x124 true)))
 (let (($x126 (= $x125 true)))
 (let (($x127 (= $x126 true)))
 (let ((?x96 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let (($x107 (bvugt ?x96 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x106 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x96 (_ bv3 32)))))
 (let (($x113 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x106 $x107)))))))
 (let (($x98 (= $x113 true)))
 (let (($x99 (= $x98 true)))
 (let (($x114 (= $x99 true)))
 (let (($x128 (and $x114 $x127)))
 (let (($x143 (and $x128 $x142)))
 (let (($x306 (and $x143 $x305)))
 (let (($x321 (and $x306 $x320)))
 (let ((?x26 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let (($x90 (= ?x26 input.spec-%tmpvar-1.L1%3%d.2)))
 (let ((?x77 (ite (input.spec-%var-x-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x87 (bvuge ?x77 (_ bv1 32))))
 (let (($x91 (=> $x87 $x90)))
 (let (($x86 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x88 (= $x87 $x86)))
 (let (($x47 (= false false)))
 (let (($x78 (= ?x77 (_ bv0 32))))
 (let (($x80 (=> $x78 $x47)))
 (let (($x75 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x79 (= $x78 $x75)))
 (let (($x81 (and $x79 $x80)))
 (let (($x89 (and $x81 $x88)))
 (let (($x92 (and $x89 $x91)))
 (let (($x322 (and $x92 $x321)))
 (let ((?x17 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let (($x66 (= ?x17 input.spec-%tmpvar-4.L1%10%d.2)))
 (let ((?x53 (ite (input.spec-%var-x-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x63 (bvuge ?x53 (_ bv1 32))))
 (let (($x67 (=> $x63 $x66)))
 (let (($x62 (bvuge input.spec-%tmpvar-4.L1%10%d.0 (_ bv1 32))))
 (let (($x64 (= $x63 $x62)))
 (let (($x54 (= ?x53 (_ bv0 32))))
 (let (($x56 (=> $x54 $x47)))
 (let (($x51 (= input.spec-%tmpvar-4.L1%10%d.0 (_ bv0 32))))
 (let (($x55 (= $x54 $x51)))
 (let (($x57 (and $x55 $x56)))
 (let (($x65 (and $x57 $x64)))
 (let (($x68 (and $x65 $x67)))
 (let (($x323 (and $x68 $x322)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x324 (and $x36 $x323)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-3.L1%10%d)))
 (let (($x325 (and $x23 $x324)))
 (let (($x5 (= ?x26 input.spec-%var-x0-0.L1%10%d)))
 (let (($x326 (and $x5 $x325)))
 (let (($x14 (= (_ bv12 32) input.spec-%tmpvar-5.L1%17%bbentry)))
 (let (($x327 (and $x14 $x326)))
 (let (($x328 (and $x47 $x327)))
 (let ((?x35 (bvadd ?x26 ?x17)))
 (let (($x10 (= ?x35 input.spec-%tmpvar-6.L1%17%bbentry)))
 (let (($x329 (and $x10 $x328)))
 (let (($x12 (= ?x17 input.spec-%var-x1-0.L1%17%bbentry)))
 (let (($x330 (and $x12 $x329)))
 (let (($x39 (= (_ bv45 32) input.spec-%tmpvar-2.L1%18%bbentry)))
 (let (($x331 (and $x39 $x330)))
 (let (($x332 (and $x47 $x331)))
 (let (($x335 (=> $x332 $x334)))
 (not $x335))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L1%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L1%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%18%bbentry () (_ BitVec 32))
(assert
 (let (($x333 (= true false)))
 (let (($x334 (= $x333 true)))
 (let ((?x308 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x310 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x313 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x316 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x317 (concat ?x316 (concat ?x313 (concat ?x310 ?x308)))))
 (let (($x318 (= ?x317 input.dst.llvm-%x)))
 (let (($x319 (= $x318 true)))
 (let (($x320 (= $x319 true)))
 (let (($x301 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x287 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x291 (concat (select input.dst.llvm-mem (bvadd ?x287 (_ bv1 32))) (select input.dst.llvm-mem ?x287))))
 (let ((?x297 (concat (select input.dst.llvm-mem (bvadd ?x287 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x287 (_ bv2 32))) ?x291))))
 (let ((?x230 (ite (input.spec-%var-x-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x252 (bvuge ?x230 (_ bv1 32))))
 (=> $x252 (= (input.spec-%var-x-0.1.1 Lambda1Var) ?x297))))))))
 ))
 (let (($x254 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x227 (ite (and (bvsle (_ bv0 32) Lambda1Var) (bvslt Lambda1Var (_ bv10 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x230 (ite (input.spec-%var-x-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x252 (bvuge ?x230 (_ bv1 32))))
 (= $x252 (bvuge ?x227 (_ bv1 32)))))))
 ))
 (let (($x236 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x47 (= false false)))
 (let ((?x230 (ite (input.spec-%var-x-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x231 (= ?x230 (_ bv0 32))))
 (=> $x231 $x47)))))
 ))
 (let (($x233 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x230 (ite (input.spec-%var-x-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x231 (= ?x230 (_ bv0 32))))
 (= $x231 (= (ite (and (bvsle (_ bv0 32) Lambda1Var) (bvslt Lambda1Var (_ bv10 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x237 (and $x233 $x236)))
 (let (($x255 (and $x237 $x254)))
 (let (($x302 (and $x255 $x301)))
 (let (($x303 (= $x302 true)))
 (let (($x304 (= $x303 true)))
 (let (($x305 (= $x304 true)))
 (let (($x135 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x134 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%x (_ bv3 32)))))
 (let (($x141 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x134 $x135)))))))
 (let (($x129 (= $x141 true)))
 (let (($x130 (= $x129 true)))
 (let (($x142 (= $x130 true)))
 (let ((?x121 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x122 (= (_ bv0 32) ?x121)))
 (let ((?x118 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x119 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x118)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x120 (and $x117 $x119)))
 (let (($x123 (and $x120 $x122)))
 (let (($x116 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x124 (and $x116 $x123)))
 (let (($x125 (= $x124 true)))
 (let (($x126 (= $x125 true)))
 (let (($x127 (= $x126 true)))
 (let ((?x96 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let (($x107 (bvugt ?x96 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x106 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x96 (_ bv3 32)))))
 (let (($x113 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x106 $x107)))))))
 (let (($x98 (= $x113 true)))
 (let (($x99 (= $x98 true)))
 (let (($x114 (= $x99 true)))
 (let (($x128 (and $x114 $x127)))
 (let (($x143 (and $x128 $x142)))
 (let (($x306 (and $x143 $x305)))
 (let (($x321 (and $x306 $x320)))
 (let ((?x26 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let (($x90 (= ?x26 input.spec-%tmpvar-1.L1%3%d.2)))
 (let ((?x77 (ite (input.spec-%var-x-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x87 (bvuge ?x77 (_ bv1 32))))
 (let (($x91 (=> $x87 $x90)))
 (let (($x86 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x88 (= $x87 $x86)))
 (let (($x47 (= false false)))
 (let (($x78 (= ?x77 (_ bv0 32))))
 (let (($x80 (=> $x78 $x47)))
 (let (($x75 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x79 (= $x78 $x75)))
 (let (($x81 (and $x79 $x80)))
 (let (($x89 (and $x81 $x88)))
 (let (($x92 (and $x89 $x91)))
 (let (($x322 (and $x92 $x321)))
 (let ((?x17 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let (($x66 (= ?x17 input.spec-%tmpvar-4.L1%10%d.2)))
 (let ((?x53 (ite (input.spec-%var-x-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x63 (bvuge ?x53 (_ bv1 32))))
 (let (($x67 (=> $x63 $x66)))
 (let (($x62 (bvuge input.spec-%tmpvar-4.L1%10%d.0 (_ bv1 32))))
 (let (($x64 (= $x63 $x62)))
 (let (($x54 (= ?x53 (_ bv0 32))))
 (let (($x56 (=> $x54 $x47)))
 (let (($x51 (= input.spec-%tmpvar-4.L1%10%d.0 (_ bv0 32))))
 (let (($x55 (= $x54 $x51)))
 (let (($x57 (and $x55 $x56)))
 (let (($x65 (and $x57 $x64)))
 (let (($x68 (and $x65 $x67)))
 (let (($x323 (and $x68 $x322)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x324 (and $x36 $x323)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-3.L1%10%d)))
 (let (($x325 (and $x23 $x324)))
 (let (($x5 (= ?x26 input.spec-%var-x0-0.L1%10%d)))
 (let (($x326 (and $x5 $x325)))
 (let (($x14 (= (_ bv12 32) input.spec-%tmpvar-5.L1%17%bbentry)))
 (let (($x327 (and $x14 $x326)))
 (let (($x328 (and $x47 $x327)))
 (let ((?x35 (bvadd ?x26 ?x17)))
 (let (($x10 (= ?x35 input.spec-%tmpvar-6.L1%17%bbentry)))
 (let (($x329 (and $x10 $x328)))
 (let (($x12 (= ?x17 input.spec-%var-x1-0.L1%17%bbentry)))
 (let (($x330 (and $x12 $x329)))
 (let (($x39 (= (_ bv45 32) input.spec-%tmpvar-2.L1%18%bbentry)))
 (let (($x331 (and $x39 $x330)))
 (let (($x332 (and $x47 $x331)))
 (let (($x335 (=> $x332 $x334)))
 (not $x335))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.spec-%tmpvar-4.L1%10%d.0 () (_ BitVec 32)
    #x10000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x70904010)
  (define-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32)
    #x01000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.L1%10%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xf82200fd)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x70904013)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x70904010)
  (define-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L1%10%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-x0-0.L1%10%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L1%17%bbentry () (_ BitVec 32)
    #x0000000c)
  (define-fun input.spec-%tmpvar-6.L1%17%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-x1-0.L1%17%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.L1%18%bbentry () (_ BitVec 32)
    #x0000002d)
  (define-fun input.spec-%var-x-0.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000001) true
    (ite (= x!0 #x00000000) true
      (not (or (not (bvsle #x00000000 x!0)) (bvsle #x0000000a x!0))))))
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x70904013) #xf8
    (ite (= x!0 #x70904010) #xfd
    (ite (= x!0 #x70904012) #x22
      #x00))))
  (define-fun input.spec-%var-x-0.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000001) #x00000000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x70904013)
                                     (k!2 #x70904012)
                                     (k!2 #x70904011)
                                     (k!2 #x70904010)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x70904013)
                                     (k!2 #x70904012)
                                     (k!2 #x70904011)
                                     (k!2 #x70904010)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x70904013)
                                     (k!2 #x70904012)
                                     (k!2 #x70904011)
                                     (k!2 #x70904010)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #x70904013)
                                     (k!2 #x70904012)
                                     (k!2 #x70904011)
                                     (k!2 #x70904010))))))
        (concat a!1 a!2 a!3 a!4)))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%tmpvar-4.L1%10%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32)
    #x20000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x31a20000)
  (define-fun input.spec-%tmpvar-4.L1%10%d.0 () (_ BitVec 32)
    #x10000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x9a000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x31a20003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x31a20000)
  (define-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L1%10%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-x0-0.L1%10%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L1%17%bbentry () (_ BitVec 32)
    #x0000000c)
  (define-fun input.spec-%tmpvar-6.L1%17%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-x1-0.L1%17%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.L1%18%bbentry () (_ BitVec 32)
    #x0000002d)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x31a20003) #x9a
    (ite (= x!0 #x31a20000) #x04
      #x00)))
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000001 x!0)
         (ite (bvule #x0000000a x!0)
              (ite (bvule #x0000000b x!0) #x0000000b #x0000000a)
              #x00000001)
         #x00000000))
  (define-fun input.spec-%var-x-0.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000001) #x00000000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x31a20003)
                                     (k!2 #x31a20002)
                                     (k!2 #x31a20001)
                                     (k!2 #x31a20000)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x31a20003)
                                     (k!2 #x31a20002)
                                     (k!2 #x31a20001)
                                     (k!2 #x31a20000)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x31a20003)
                                     (k!2 #x31a20002)
                                     (k!2 #x31a20001)
                                     (k!2 #x31a20000)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #x31a20003)
                                     (k!2 #x31a20002)
                                     (k!2 #x31a20001)
                                     (k!2 #x31a20000))))))
        (concat a!1 a!2 a!3 a!4)))))
  (define-fun input.spec-%var-x-0.0.1!4 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000001) true
    (ite (= x!0 #x00000000) true
      false)))
  (define-fun input.spec-%var-x-0.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-0.0.1!4 (k!3 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708044/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L1%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L1%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x120 (ite (input.spec-%var-x-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x132 (bvuge ?x120 (_ bv1 32))))
 (let (($x121 (= ?x120 (_ bv0 32))))
 (let (($x352 (or $x121 $x132)))
 (let ((?x223 (ite (input.spec-%var-x-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x232 (bvuge ?x223 (_ bv1 32))))
 (let (($x353 (and $x232 $x352)))
 (let (($x229 (= ?x223 (_ bv0 32))))
 (let (($x354 (or $x229 $x353)))
 (let (($x355 (or false $x354)))
 (let (($x356 (= $x355 true)))
 (let (($x357 (= $x356 true)))
 (let ((?x83 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x60 (concat ?x59 (concat ?x31 (concat ?x85 ?x83)))))
 (let (($x61 (= ?x60 input.dst.llvm-%x)))
 (let (($x337 (= $x61 true)))
 (let (($x338 (= $x337 true)))
 (let (($x284 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x270 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x281 (concat (select input.dst.llvm-mem (bvadd ?x270 (_ bv1 32))) (select input.dst.llvm-mem ?x270))))
 (let ((?x274 (concat (select input.dst.llvm-mem (bvadd ?x270 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x270 (_ bv2 32))) ?x281))))
 (let ((?x193 (ite (input.spec-%var-x-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x193 (_ bv1 32))))
 (=> $x216 (= (input.spec-%var-x-0.1.1 Lambda1Var) ?x274))))))))
 ))
 (let (($x217 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x190 (ite (and (bvsle (_ bv0 32) Lambda1Var) (bvslt Lambda1Var (_ bv10 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x193 (ite (input.spec-%var-x-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x193 (_ bv1 32))))
 (= $x216 (bvuge ?x190 (_ bv1 32)))))))
 ))
 (let (($x202 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x75 (= false false)))
 (let ((?x193 (ite (input.spec-%var-x-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x194 (= ?x193 (_ bv0 32))))
 (=> $x194 $x75)))))
 ))
 (let (($x197 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x193 (ite (input.spec-%var-x-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x194 (= ?x193 (_ bv0 32))))
 (= $x194 (= (ite (and (bvsle (_ bv0 32) Lambda1Var) (bvslt Lambda1Var (_ bv10 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x203 (and $x197 $x202)))
 (let (($x219 (and $x203 $x217)))
 (let (($x285 (and $x219 $x284)))
 (let (($x69 (= $x285 true)))
 (let (($x70 (= $x69 true)))
 (let (($x71 (= $x70 true)))
 (let ((?x313 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x309 (= (_ bv0 32) ?x313)))
 (let ((?x315 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x316 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x315)))
 (let (($x306 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x312 (and $x306 $x316)))
 (let (($x310 (and $x312 $x309)))
 (let (($x305 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x308 (and $x305 $x310)))
 (let (($x311 (= $x308 true)))
 (let (($x314 (= $x311 true)))
 (let (($x317 (= $x314 true)))
 (let (($x288 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x291 (and true $x288)))
 (let ((?x38 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let (($x166 (= (bvand ?x38 (_ bv4294967292 32)) ?x38)))
 (let (($x287 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x38 (bvsub ?x38 (_ bv4 32))) (bvult ?x38 (bvsub ?x38 (_ bv4 32))))))
 (let (($x295 (and true $x287)))
 (let (($x254 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x299 (and (and (and $x254 $x295) $x166) $x291)))
 (let (($x300 (and $x254 $x299)))
 (let (($x301 (= $x300 true)))
 (let (($x302 (= $x301 true)))
 (let (($x303 (= $x302 true)))
 (let (($x318 (and $x303 $x317)))
 (let (($x72 (and $x318 $x71)))
 (let (($x339 (and $x72 $x338)))
 (let ((?x101 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let (($x236 (= ?x101 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x237 (=> $x232 $x236)))
 (let (($x228 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x233 (= $x232 $x228)))
 (let (($x75 (= false false)))
 (let (($x231 (=> $x229 $x75)))
 (let (($x142 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x230 (= $x229 $x142)))
 (let (($x225 (and $x230 $x231)))
 (let (($x235 (and $x225 $x233)))
 (let (($x252 (and $x235 $x237)))
 (let (($x340 (and $x252 $x339)))
 (let ((?x94 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let (($x134 (= ?x94 input.spec-%tmpvar-4.L1%10%d.2)))
 (let (($x135 (=> $x132 $x134)))
 (let (($x131 (bvuge input.spec-%tmpvar-4.L1%10%d.0 (_ bv1 32))))
 (let (($x140 (= $x132 $x131)))
 (let (($x123 (=> $x121 $x75)))
 (let (($x118 (= input.spec-%tmpvar-4.L1%10%d.0 (_ bv0 32))))
 (let (($x122 (= $x121 $x118)))
 (let (($x124 (and $x122 $x123)))
 (let (($x133 (and $x124 $x140)))
 (let (($x136 (and $x133 $x135)))
 (let (($x341 (and $x136 $x340)))
 (let (($x113 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x342 (and $x113 $x341)))
 (let (($x110 (= (_ bv1 32) input.spec-%tmpvar-3.L1%10%d)))
 (let (($x343 (and $x110 $x342)))
 (let (($x108 (= ?x101 input.spec-%var-x0-0.L1%10%d)))
 (let (($x344 (and $x108 $x343)))
 (let (($x103 (= (_ bv12 32) input.spec-%tmpvar-5.L1%17%bbentry)))
 (let (($x345 (and $x103 $x344)))
 (let (($x346 (and $x75 $x345)))
 (let ((?x112 (bvadd ?x101 ?x94)))
 (let (($x104 (= ?x112 input.spec-%tmpvar-6.L1%17%bbentry)))
 (let (($x347 (and $x104 $x346)))
 (let (($x95 (= ?x94 input.spec-%var-x1-0.L1%17%bbentry)))
 (let (($x348 (and $x95 $x347)))
 (let (($x81 (= (_ bv45 32) input.spec-%tmpvar-2.L1%18%bbentry)))
 (let (($x349 (and $x81 $x348)))
 (let (($x350 (and $x75 $x349)))
 (let (($x55 (bvugt ?x38 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x51 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x38 (_ bv3 32)))))
 (let (($x64 (=> (bvule ?x38 (bvsub (bvadd ?x38 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x51 $x55)))))))
 (let (($x14 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%x (_ bv3 32)))))
 (let (($x36 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x9 $x14)))))))
 (let (($x17 (and $x36 $x64)))
 (let (($x351 (and $x17 $x350)))
 (let (($x358 (=> $x351 $x357)))
 (not $x358))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L1%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L1%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x120 (ite (input.spec-%var-x-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x132 (bvuge ?x120 (_ bv1 32))))
 (let (($x121 (= ?x120 (_ bv0 32))))
 (let (($x352 (or $x121 $x132)))
 (let ((?x223 (ite (input.spec-%var-x-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x232 (bvuge ?x223 (_ bv1 32))))
 (let (($x353 (and $x232 $x352)))
 (let (($x229 (= ?x223 (_ bv0 32))))
 (let (($x354 (or $x229 $x353)))
 (let (($x355 (or false $x354)))
 (let (($x356 (= $x355 true)))
 (let (($x357 (= $x356 true)))
 (let ((?x83 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x60 (concat ?x59 (concat ?x31 (concat ?x85 ?x83)))))
 (let (($x61 (= ?x60 input.dst.llvm-%x)))
 (let (($x337 (= $x61 true)))
 (let (($x338 (= $x337 true)))
 (let (($x284 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x270 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x281 (concat (select input.dst.llvm-mem (bvadd ?x270 (_ bv1 32))) (select input.dst.llvm-mem ?x270))))
 (let ((?x274 (concat (select input.dst.llvm-mem (bvadd ?x270 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x270 (_ bv2 32))) ?x281))))
 (let ((?x193 (ite (input.spec-%var-x-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x193 (_ bv1 32))))
 (=> $x216 (= (input.spec-%var-x-0.1.1 Lambda1Var) ?x274))))))))
 ))
 (let (($x217 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x190 (ite (and (bvsle (_ bv0 32) Lambda1Var) (bvslt Lambda1Var (_ bv10 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x193 (ite (input.spec-%var-x-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x193 (_ bv1 32))))
 (= $x216 (bvuge ?x190 (_ bv1 32)))))))
 ))
 (let (($x202 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x75 (= false false)))
 (let ((?x193 (ite (input.spec-%var-x-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x194 (= ?x193 (_ bv0 32))))
 (=> $x194 $x75)))))
 ))
 (let (($x197 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x193 (ite (input.spec-%var-x-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x194 (= ?x193 (_ bv0 32))))
 (= $x194 (= (ite (and (bvsle (_ bv0 32) Lambda1Var) (bvslt Lambda1Var (_ bv10 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x203 (and $x197 $x202)))
 (let (($x219 (and $x203 $x217)))
 (let (($x285 (and $x219 $x284)))
 (let (($x69 (= $x285 true)))
 (let (($x70 (= $x69 true)))
 (let (($x71 (= $x70 true)))
 (let ((?x313 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x309 (= (_ bv0 32) ?x313)))
 (let ((?x315 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x316 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x315)))
 (let (($x306 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x312 (and $x306 $x316)))
 (let (($x310 (and $x312 $x309)))
 (let (($x305 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x308 (and $x305 $x310)))
 (let (($x311 (= $x308 true)))
 (let (($x314 (= $x311 true)))
 (let (($x317 (= $x314 true)))
 (let (($x288 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x291 (and true $x288)))
 (let ((?x38 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let (($x166 (= (bvand ?x38 (_ bv4294967292 32)) ?x38)))
 (let (($x287 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x38 (bvsub ?x38 (_ bv4 32))) (bvult ?x38 (bvsub ?x38 (_ bv4 32))))))
 (let (($x295 (and true $x287)))
 (let (($x254 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x299 (and (and (and $x254 $x295) $x166) $x291)))
 (let (($x300 (and $x254 $x299)))
 (let (($x301 (= $x300 true)))
 (let (($x302 (= $x301 true)))
 (let (($x303 (= $x302 true)))
 (let (($x318 (and $x303 $x317)))
 (let (($x72 (and $x318 $x71)))
 (let (($x339 (and $x72 $x338)))
 (let ((?x101 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let (($x236 (= ?x101 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x237 (=> $x232 $x236)))
 (let (($x228 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x233 (= $x232 $x228)))
 (let (($x75 (= false false)))
 (let (($x231 (=> $x229 $x75)))
 (let (($x142 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x230 (= $x229 $x142)))
 (let (($x225 (and $x230 $x231)))
 (let (($x235 (and $x225 $x233)))
 (let (($x252 (and $x235 $x237)))
 (let (($x340 (and $x252 $x339)))
 (let ((?x94 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let (($x134 (= ?x94 input.spec-%tmpvar-4.L1%10%d.2)))
 (let (($x135 (=> $x132 $x134)))
 (let (($x131 (bvuge input.spec-%tmpvar-4.L1%10%d.0 (_ bv1 32))))
 (let (($x140 (= $x132 $x131)))
 (let (($x123 (=> $x121 $x75)))
 (let (($x118 (= input.spec-%tmpvar-4.L1%10%d.0 (_ bv0 32))))
 (let (($x122 (= $x121 $x118)))
 (let (($x124 (and $x122 $x123)))
 (let (($x133 (and $x124 $x140)))
 (let (($x136 (and $x133 $x135)))
 (let (($x341 (and $x136 $x340)))
 (let (($x113 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x342 (and $x113 $x341)))
 (let (($x110 (= (_ bv1 32) input.spec-%tmpvar-3.L1%10%d)))
 (let (($x343 (and $x110 $x342)))
 (let (($x108 (= ?x101 input.spec-%var-x0-0.L1%10%d)))
 (let (($x344 (and $x108 $x343)))
 (let (($x103 (= (_ bv12 32) input.spec-%tmpvar-5.L1%17%bbentry)))
 (let (($x345 (and $x103 $x344)))
 (let (($x346 (and $x75 $x345)))
 (let ((?x112 (bvadd ?x101 ?x94)))
 (let (($x104 (= ?x112 input.spec-%tmpvar-6.L1%17%bbentry)))
 (let (($x347 (and $x104 $x346)))
 (let (($x95 (= ?x94 input.spec-%var-x1-0.L1%17%bbentry)))
 (let (($x348 (and $x95 $x347)))
 (let (($x81 (= (_ bv45 32) input.spec-%tmpvar-2.L1%18%bbentry)))
 (let (($x349 (and $x81 $x348)))
 (let (($x350 (and $x75 $x349)))
 (let (($x55 (bvugt ?x38 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x51 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x38 (_ bv3 32)))))
 (let (($x64 (=> (bvule ?x38 (bvsub (bvadd ?x38 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x51 $x55)))))))
 (let (($x14 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%x (_ bv3 32)))))
 (let (($x36 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x9 $x14)))))))
 (let (($x17 (and $x36 $x64)))
 (let (($x351 (and $x17 $x350)))
 (let (($x358 (=> $x351 $x357)))
 (not $x358))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 150 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708044/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L1%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L1%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x366 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x369 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x366)))
 (let ((?x371 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x369)))
 (let ((?x125 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv1 32)))))
 (let ((?x126 (concat ?x125 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%x)))))
 (let ((?x128 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv2 32)))))
 (let ((?x133 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let ((?x112 (bvadd ?x133 (_ bv3 32))))
 (let ((?x362 (concat (select input.dst.llvm-mem ?x112) (concat ?x128 ?x126))))
 (let ((?x372 (bvadd ?x362 ?x371)))
 (let ((?x120 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let ((?x95 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let ((?x75 (bvadd ?x95 ?x120)))
 (let (($x373 (= ?x75 ?x372)))
 (let (($x374 (= $x373 true)))
 (let (($x375 (= $x374 true)))
 (let ((?x238 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x247 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x240 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x242 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x245 (concat ?x242 (concat ?x240 (concat ?x247 ?x238)))))
 (let (($x259 (= ?x245 input.dst.llvm-%x)))
 (let (($x257 (= $x259 true)))
 (let (($x260 (= $x257 true)))
 (let (($x248 (= input.dst.llvm-%x ?x245)))
 (let ((?x220 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x221 (= (_ bv0 32) ?x220)))
 (let ((?x212 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x213 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x212)))
 (let (($x211 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x214 (and $x211 $x213)))
 (let (($x222 (and $x214 $x221)))
 (let (($x210 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x145 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x149 (concat (select input.dst.llvm-mem (bvadd ?x145 (_ bv1 32))) (select input.dst.llvm-mem ?x145))))
 (let ((?x201 (concat (select input.dst.llvm-mem (bvadd ?x145 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x145 (_ bv2 32))) ?x149))))
 (let ((?x33 (ite (input.spec-%var-x-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x320 (bvuge ?x33 (_ bv1 32))))
 (=> $x320 (= (input.spec-%var-x-0.1.1 Lambda1Var) ?x201))))))))
 ))
 (let (($x322 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x7 (ite (and (bvsle (_ bv0 32) Lambda1Var) (bvslt Lambda1Var (_ bv10 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x33 (ite (input.spec-%var-x-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x320 (bvuge ?x33 (_ bv1 32))))
 (= $x320 (bvuge ?x7 (_ bv1 32)))))))
 ))
 (let (($x24 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x80 (= false false)))
 (let ((?x33 (ite (input.spec-%var-x-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x28 (= ?x33 (_ bv0 32))))
 (=> $x28 $x80)))))
 ))
 (let (($x18 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x33 (ite (input.spec-%var-x-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x28 (= ?x33 (_ bv0 32))))
 (= $x28 (= (ite (and (bvsle (_ bv0 32) Lambda1Var) (bvslt Lambda1Var (_ bv10 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x25 (and $x18 $x24)))
 (let (($x324 (and $x25 $x322)))
 (let (($x209 (and $x324 $x210)))
 (let (($x275 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x203 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x216 (and true $x203)))
 (let (($x192 (= (bvand ?x133 (_ bv4294967292 32)) ?x133)))
 (let (($x152 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x133 (bvsub ?x133 (_ bv4 32))) (bvult ?x133 (bvsub ?x133 (_ bv4 32))))))
 (let (($x195 (and true $x152)))
 (let (($x191 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x217 (and (and (and $x191 $x195) $x192) $x216)))
 (let (($x219 (and $x191 $x217)))
 (let (($x266 (and (and (and (and $x219 $x275) $x209) $x222) $x248)))
 (let (($x262 (= $x266 true)))
 (let (($x268 (= $x262 true)))
 (let (($x269 (= $x268 true)))
 (let (($x277 (= $x219 true)))
 (let (($x334 (= $x277 true)))
 (let (($x267 (= $x334 true)))
 (let (($x258 (and $x267 $x269)))
 (let (($x265 (and $x258 $x260)))
 (let ((?x130 (ite (input.spec-%var-x-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x286 (bvuge ?x130 (_ bv1 32))))
 (let ((?x300 (ite (input.spec-%var-x-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x313 (bvuge ?x300 (_ bv1 32))))
 (let (($x317 (and $x313 $x286)))
 (let (($x263 (and $x317 $x265)))
 (let (($x308 (= ?x95 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x311 (=> $x313 $x308)))
 (let (($x312 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x309 (= $x313 $x312)))
 (let (($x80 (= false false)))
 (let (($x301 (= ?x300 (_ bv0 32))))
 (let (($x303 (=> $x301 $x80)))
 (let (($x291 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x302 (= $x301 $x291)))
 (let (($x304 (and $x302 $x303)))
 (let (($x310 (and $x304 $x309)))
 (let (($x314 (and $x310 $x311)))
 (let (($x261 (and $x314 $x263)))
 (let (($x294 (= ?x120 input.spec-%tmpvar-4.L1%10%d.2)))
 (let (($x296 (=> $x286 $x294)))
 (let (($x159 (bvuge input.spec-%tmpvar-4.L1%10%d.0 (_ bv1 32))))
 (let (($x287 (= $x286 $x159)))
 (let (($x236 (= ?x130 (_ bv0 32))))
 (let (($x252 (=> $x236 $x80)))
 (let (($x233 (= input.spec-%tmpvar-4.L1%10%d.0 (_ bv0 32))))
 (let (($x237 (= $x236 $x233)))
 (let (($x251 (and $x237 $x252)))
 (let (($x295 (and $x251 $x287)))
 (let (($x166 (and $x295 $x296)))
 (let (($x264 (and $x166 $x261)))
 (let (($x129 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x137 (and $x129 $x264)))
 (let (($x223 (= (_ bv1 32) input.spec-%tmpvar-3.L1%10%d)))
 (let (($x138 (and $x223 $x137)))
 (let (($x136 (= ?x95 input.spec-%var-x0-0.L1%10%d)))
 (let (($x139 (and $x136 $x138)))
 (let (($x92 (= (_ bv12 32) input.spec-%tmpvar-5.L1%17%bbentry)))
 (let (($x141 (and $x92 $x139)))
 (let (($x156 (and $x80 $x141)))
 (let (($x113 (= ?x75 input.spec-%tmpvar-6.L1%17%bbentry)))
 (let (($x224 (and $x113 $x156)))
 (let (($x108 (= ?x120 input.spec-%var-x1-0.L1%17%bbentry)))
 (let (($x226 (and $x108 $x224)))
 (let (($x107 (= (_ bv45 32) input.spec-%tmpvar-2.L1%18%bbentry)))
 (let (($x227 (and $x107 $x226)))
 (let (($x98 (and $x80 $x227)))
 (let (($x101 (bvugt ?x133 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x103 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x112)))
 (let (($x35 (=> (bvule ?x133 (bvsub (bvadd ?x133 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x103 $x101)))))))
 (let (($x121 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x123 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x67 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x123)))
 (let (($x51 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x67 $x121)))))))
 (let (($x47 (and $x51 $x35)))
 (let (($x99 (and $x47 $x98)))
 (let (($x376 (=> $x99 $x375)))
 (not $x376))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L1%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L1%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x366 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x369 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x366)))
 (let ((?x371 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x369)))
 (let ((?x125 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv1 32)))))
 (let ((?x126 (concat ?x125 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%x)))))
 (let ((?x128 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv2 32)))))
 (let ((?x133 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let ((?x112 (bvadd ?x133 (_ bv3 32))))
 (let ((?x362 (concat (select input.dst.llvm-mem ?x112) (concat ?x128 ?x126))))
 (let ((?x372 (bvadd ?x362 ?x371)))
 (let ((?x120 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let ((?x95 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let ((?x75 (bvadd ?x95 ?x120)))
 (let (($x373 (= ?x75 ?x372)))
 (let (($x374 (= $x373 true)))
 (let (($x375 (= $x374 true)))
 (let ((?x238 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x247 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x240 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x242 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x245 (concat ?x242 (concat ?x240 (concat ?x247 ?x238)))))
 (let (($x259 (= ?x245 input.dst.llvm-%x)))
 (let (($x257 (= $x259 true)))
 (let (($x260 (= $x257 true)))
 (let (($x248 (= input.dst.llvm-%x ?x245)))
 (let ((?x220 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x221 (= (_ bv0 32) ?x220)))
 (let ((?x212 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x213 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x212)))
 (let (($x211 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x214 (and $x211 $x213)))
 (let (($x222 (and $x214 $x221)))
 (let (($x210 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x145 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x149 (concat (select input.dst.llvm-mem (bvadd ?x145 (_ bv1 32))) (select input.dst.llvm-mem ?x145))))
 (let ((?x201 (concat (select input.dst.llvm-mem (bvadd ?x145 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x145 (_ bv2 32))) ?x149))))
 (let ((?x33 (ite (input.spec-%var-x-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x320 (bvuge ?x33 (_ bv1 32))))
 (=> $x320 (= (input.spec-%var-x-0.1.1 Lambda1Var) ?x201))))))))
 ))
 (let (($x322 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x7 (ite (and (bvsle (_ bv0 32) Lambda1Var) (bvslt Lambda1Var (_ bv10 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x33 (ite (input.spec-%var-x-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x320 (bvuge ?x33 (_ bv1 32))))
 (= $x320 (bvuge ?x7 (_ bv1 32)))))))
 ))
 (let (($x24 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x80 (= false false)))
 (let ((?x33 (ite (input.spec-%var-x-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x28 (= ?x33 (_ bv0 32))))
 (=> $x28 $x80)))))
 ))
 (let (($x18 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x33 (ite (input.spec-%var-x-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x28 (= ?x33 (_ bv0 32))))
 (= $x28 (= (ite (and (bvsle (_ bv0 32) Lambda1Var) (bvslt Lambda1Var (_ bv10 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x25 (and $x18 $x24)))
 (let (($x324 (and $x25 $x322)))
 (let (($x209 (and $x324 $x210)))
 (let (($x275 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x203 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x216 (and true $x203)))
 (let (($x192 (= (bvand ?x133 (_ bv4294967292 32)) ?x133)))
 (let (($x152 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x133 (bvsub ?x133 (_ bv4 32))) (bvult ?x133 (bvsub ?x133 (_ bv4 32))))))
 (let (($x195 (and true $x152)))
 (let (($x191 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x217 (and (and (and $x191 $x195) $x192) $x216)))
 (let (($x219 (and $x191 $x217)))
 (let (($x266 (and (and (and (and $x219 $x275) $x209) $x222) $x248)))
 (let (($x262 (= $x266 true)))
 (let (($x268 (= $x262 true)))
 (let (($x269 (= $x268 true)))
 (let (($x277 (= $x219 true)))
 (let (($x334 (= $x277 true)))
 (let (($x267 (= $x334 true)))
 (let (($x258 (and $x267 $x269)))
 (let (($x265 (and $x258 $x260)))
 (let ((?x130 (ite (input.spec-%var-x-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x286 (bvuge ?x130 (_ bv1 32))))
 (let ((?x300 (ite (input.spec-%var-x-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x313 (bvuge ?x300 (_ bv1 32))))
 (let (($x317 (and $x313 $x286)))
 (let (($x263 (and $x317 $x265)))
 (let (($x308 (= ?x95 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x311 (=> $x313 $x308)))
 (let (($x312 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x309 (= $x313 $x312)))
 (let (($x80 (= false false)))
 (let (($x301 (= ?x300 (_ bv0 32))))
 (let (($x303 (=> $x301 $x80)))
 (let (($x291 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x302 (= $x301 $x291)))
 (let (($x304 (and $x302 $x303)))
 (let (($x310 (and $x304 $x309)))
 (let (($x314 (and $x310 $x311)))
 (let (($x261 (and $x314 $x263)))
 (let (($x294 (= ?x120 input.spec-%tmpvar-4.L1%10%d.2)))
 (let (($x296 (=> $x286 $x294)))
 (let (($x159 (bvuge input.spec-%tmpvar-4.L1%10%d.0 (_ bv1 32))))
 (let (($x287 (= $x286 $x159)))
 (let (($x236 (= ?x130 (_ bv0 32))))
 (let (($x252 (=> $x236 $x80)))
 (let (($x233 (= input.spec-%tmpvar-4.L1%10%d.0 (_ bv0 32))))
 (let (($x237 (= $x236 $x233)))
 (let (($x251 (and $x237 $x252)))
 (let (($x295 (and $x251 $x287)))
 (let (($x166 (and $x295 $x296)))
 (let (($x264 (and $x166 $x261)))
 (let (($x129 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x137 (and $x129 $x264)))
 (let (($x223 (= (_ bv1 32) input.spec-%tmpvar-3.L1%10%d)))
 (let (($x138 (and $x223 $x137)))
 (let (($x136 (= ?x95 input.spec-%var-x0-0.L1%10%d)))
 (let (($x139 (and $x136 $x138)))
 (let (($x92 (= (_ bv12 32) input.spec-%tmpvar-5.L1%17%bbentry)))
 (let (($x141 (and $x92 $x139)))
 (let (($x156 (and $x80 $x141)))
 (let (($x113 (= ?x75 input.spec-%tmpvar-6.L1%17%bbentry)))
 (let (($x224 (and $x113 $x156)))
 (let (($x108 (= ?x120 input.spec-%var-x1-0.L1%17%bbentry)))
 (let (($x226 (and $x108 $x224)))
 (let (($x107 (= (_ bv45 32) input.spec-%tmpvar-2.L1%18%bbentry)))
 (let (($x227 (and $x107 $x226)))
 (let (($x98 (and $x80 $x227)))
 (let (($x101 (bvugt ?x133 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x103 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x112)))
 (let (($x35 (=> (bvule ?x133 (bvsub (bvadd ?x133 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x103 $x101)))))))
 (let (($x121 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x123 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x67 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x123)))
 (let (($x51 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x67 $x121)))))))
 (let (($x47 (and $x51 $x35)))
 (let (($x99 (and $x47 $x98)))
 (let (($x376 (=> $x99 $x375)))
 (not $x376))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708044/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L1%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L1%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x305 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x316 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x305)))
 (let ((?x230 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x316)))
 (let ((?x169 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv1 32)))))
 (let ((?x187 (concat ?x169 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%x)))))
 (let ((?x180 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv2 32)))))
 (let ((?x81 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let ((?x101 (bvadd ?x81 (_ bv3 32))))
 (let ((?x297 (concat (select input.dst.llvm-mem ?x101) (concat ?x180 ?x187))))
 (let ((?x231 (bvadd ?x297 ?x230)))
 (let (($x225 (= (_ bv12 32) ?x231)))
 (let (($x253 (= $x225 true)))
 (let (($x254 (= $x253 true)))
 (let ((?x46 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x158 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x155 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x27 (concat ?x155 (concat ?x158 (concat ?x30 ?x46)))))
 (let (($x178 (= ?x27 input.dst.llvm-%x)))
 (let (($x179 (= $x178 true)))
 (let (($x163 (= $x179 true)))
 (let (($x157 (= input.dst.llvm-%x ?x27)))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x82 (= (_ bv0 32) ?x43)))
 (let ((?x332 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x335 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x332)))
 (let (($x330 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x333 (and $x330 $x335)))
 (let (($x10 (and $x333 $x82)))
 (let (($x91 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x87 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x78 (concat (select input.dst.llvm-mem (bvadd ?x87 (_ bv1 32))) (select input.dst.llvm-mem ?x87))))
 (let ((?x96 (concat (select input.dst.llvm-mem (bvadd ?x87 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x87 (_ bv2 32))) ?x78))))
 (let ((?x111 (ite (input.spec-%var-x-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x339 (bvuge ?x111 (_ bv1 32))))
 (=> $x339 (= (input.spec-%var-x-0.1.1 Lambda1Var) ?x96))))))))
 ))
 (let (($x340 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x132 (ite (and (bvsle (_ bv0 32) Lambda1Var) (bvslt Lambda1Var (_ bv10 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x111 (ite (input.spec-%var-x-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x339 (bvuge ?x111 (_ bv1 32))))
 (= $x339 (bvuge ?x132 (_ bv1 32)))))))
 ))
 (let (($x71 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x49 (= false false)))
 (let ((?x111 (ite (input.spec-%var-x-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x104 (= ?x111 (_ bv0 32))))
 (=> $x104 $x49)))))
 ))
 (let (($x283 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x111 (ite (input.spec-%var-x-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x104 (= ?x111 (_ bv0 32))))
 (= $x104 (= (ite (and (bvsle (_ bv0 32) Lambda1Var) (bvslt Lambda1Var (_ bv10 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x39 (and $x283 $x71)))
 (let (($x341 (and $x39 $x340)))
 (let (($x329 (and $x341 $x91)))
 (let (($x201 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x200 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x198 (and true $x200)))
 (let (($x324 (= (bvand ?x81 (_ bv4294967292 32)) ?x81)))
 (let (($x323 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x81 (bvsub ?x81 (_ bv4 32))) (bvult ?x81 (bvsub ?x81 (_ bv4 32))))))
 (let (($x321 (and true $x323)))
 (let (($x18 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x205 (and (and (and $x18 $x321) $x324) $x198)))
 (let (($x146 (and $x18 $x205)))
 (let (($x325 (and (and (and (and $x146 $x201) $x329) $x10) $x157)))
 (let (($x326 (= $x325 true)))
 (let (($x327 (= $x326 true)))
 (let (($x328 (= $x327 true)))
 (let (($x147 (= $x146 true)))
 (let (($x148 (= $x147 true)))
 (let (($x149 (= $x148 true)))
 (let (($x164 (and $x149 $x328)))
 (let (($x162 (and $x164 $x163)))
 (let ((?x288 (ite (input.spec-%var-x-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x308 (= ?x288 (_ bv0 32))))
 (let ((?x217 (ite (input.spec-%var-x-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x33 (bvuge ?x217 (_ bv1 32))))
 (let (($x7 (and $x33 $x308)))
 (let (($x167 (and $x7 $x162)))
 (let ((?x251 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let (($x284 (= ?x251 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x37 (=> $x33 $x284)))
 (let (($x144 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x28 (= $x33 $x144)))
 (let (($x49 (= false false)))
 (let (($x219 (= ?x217 (_ bv0 32))))
 (let (($x334 (=> $x219 $x49)))
 (let (($x203 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x277 (= $x219 $x203)))
 (let (($x267 (and $x277 $x334)))
 (let (($x44 (and $x267 $x28)))
 (let (($x8 (and $x44 $x37)))
 (let (($x171 (and $x8 $x167)))
 (let ((?x233 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let (($x195 (= ?x233 input.spec-%tmpvar-4.L1%10%d.2)))
 (let (($x153 (bvuge ?x288 (_ bv1 32))))
 (let (($x215 (=> $x153 $x195)))
 (let (($x193 (bvuge input.spec-%tmpvar-4.L1%10%d.0 (_ bv1 32))))
 (let (($x331 (= $x153 $x193)))
 (let (($x314 (=> $x308 $x49)))
 (let (($x309 (= input.spec-%tmpvar-4.L1%10%d.0 (_ bv0 32))))
 (let (($x311 (= $x308 $x309)))
 (let (($x317 (and $x311 $x314)))
 (let (($x152 (and $x317 $x331)))
 (let (($x190 (and $x152 $x215)))
 (let (($x170 (and $x190 $x171)))
 (let (($x290 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x168 (and $x290 $x170)))
 (let (($x300 (= (_ bv1 32) input.spec-%tmpvar-3.L1%10%d)))
 (let (($x165 (and $x300 $x168)))
 (let (($x166 (= ?x251 input.spec-%var-x0-0.L1%10%d)))
 (let (($x174 (and $x166 $x165)))
 (let (($x294 (= (_ bv12 32) input.spec-%tmpvar-5.L1%17%bbentry)))
 (let (($x176 (and $x294 $x174)))
 (let (($x172 (and $x49 $x176)))
 (let ((?x286 (bvadd ?x251 ?x233)))
 (let (($x287 (= ?x286 input.spec-%tmpvar-6.L1%17%bbentry)))
 (let (($x173 (and $x287 $x172)))
 (let (($x237 (= ?x233 input.spec-%var-x1-0.L1%17%bbentry)))
 (let (($x181 (and $x237 $x173)))
 (let (($x136 (= (_ bv45 32) input.spec-%tmpvar-2.L1%18%bbentry)))
 (let (($x182 (and $x136 $x181)))
 (let (($x188 (and $x49 $x182)))
 (let (($x56 (bvugt ?x81 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x140 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x101)))
 (let (($x42 (=> (bvule ?x81 (bvsub (bvadd ?x81 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x140 $x56)))))))
 (let (($x12 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x121 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x134 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x121)))
 (let (($x45 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x134 $x12)))))))
 (let (($x123 (and $x45 $x42)))
 (let (($x185 (and $x123 $x188)))
 (let (($x298 (=> $x185 $x254)))
 (not $x298))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L1%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L1%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x305 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x316 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x305)))
 (let ((?x230 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x316)))
 (let ((?x169 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv1 32)))))
 (let ((?x187 (concat ?x169 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%x)))))
 (let ((?x180 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv2 32)))))
 (let ((?x81 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let ((?x101 (bvadd ?x81 (_ bv3 32))))
 (let ((?x297 (concat (select input.dst.llvm-mem ?x101) (concat ?x180 ?x187))))
 (let ((?x231 (bvadd ?x297 ?x230)))
 (let (($x225 (= (_ bv12 32) ?x231)))
 (let (($x253 (= $x225 true)))
 (let (($x254 (= $x253 true)))
 (let ((?x46 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x158 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x155 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x27 (concat ?x155 (concat ?x158 (concat ?x30 ?x46)))))
 (let (($x178 (= ?x27 input.dst.llvm-%x)))
 (let (($x179 (= $x178 true)))
 (let (($x163 (= $x179 true)))
 (let (($x157 (= input.dst.llvm-%x ?x27)))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x82 (= (_ bv0 32) ?x43)))
 (let ((?x332 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x335 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x332)))
 (let (($x330 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x333 (and $x330 $x335)))
 (let (($x10 (and $x333 $x82)))
 (let (($x91 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x87 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x78 (concat (select input.dst.llvm-mem (bvadd ?x87 (_ bv1 32))) (select input.dst.llvm-mem ?x87))))
 (let ((?x96 (concat (select input.dst.llvm-mem (bvadd ?x87 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x87 (_ bv2 32))) ?x78))))
 (let ((?x111 (ite (input.spec-%var-x-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x339 (bvuge ?x111 (_ bv1 32))))
 (=> $x339 (= (input.spec-%var-x-0.1.1 Lambda1Var) ?x96))))))))
 ))
 (let (($x340 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x132 (ite (and (bvsle (_ bv0 32) Lambda1Var) (bvslt Lambda1Var (_ bv10 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x111 (ite (input.spec-%var-x-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x339 (bvuge ?x111 (_ bv1 32))))
 (= $x339 (bvuge ?x132 (_ bv1 32)))))))
 ))
 (let (($x71 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x49 (= false false)))
 (let ((?x111 (ite (input.spec-%var-x-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x104 (= ?x111 (_ bv0 32))))
 (=> $x104 $x49)))))
 ))
 (let (($x283 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x111 (ite (input.spec-%var-x-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x104 (= ?x111 (_ bv0 32))))
 (= $x104 (= (ite (and (bvsle (_ bv0 32) Lambda1Var) (bvslt Lambda1Var (_ bv10 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x39 (and $x283 $x71)))
 (let (($x341 (and $x39 $x340)))
 (let (($x329 (and $x341 $x91)))
 (let (($x201 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x200 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x198 (and true $x200)))
 (let (($x324 (= (bvand ?x81 (_ bv4294967292 32)) ?x81)))
 (let (($x323 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x81 (bvsub ?x81 (_ bv4 32))) (bvult ?x81 (bvsub ?x81 (_ bv4 32))))))
 (let (($x321 (and true $x323)))
 (let (($x18 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x205 (and (and (and $x18 $x321) $x324) $x198)))
 (let (($x146 (and $x18 $x205)))
 (let (($x325 (and (and (and (and $x146 $x201) $x329) $x10) $x157)))
 (let (($x326 (= $x325 true)))
 (let (($x327 (= $x326 true)))
 (let (($x328 (= $x327 true)))
 (let (($x147 (= $x146 true)))
 (let (($x148 (= $x147 true)))
 (let (($x149 (= $x148 true)))
 (let (($x164 (and $x149 $x328)))
 (let (($x162 (and $x164 $x163)))
 (let ((?x288 (ite (input.spec-%var-x-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x308 (= ?x288 (_ bv0 32))))
 (let ((?x217 (ite (input.spec-%var-x-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x33 (bvuge ?x217 (_ bv1 32))))
 (let (($x7 (and $x33 $x308)))
 (let (($x167 (and $x7 $x162)))
 (let ((?x251 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let (($x284 (= ?x251 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x37 (=> $x33 $x284)))
 (let (($x144 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x28 (= $x33 $x144)))
 (let (($x49 (= false false)))
 (let (($x219 (= ?x217 (_ bv0 32))))
 (let (($x334 (=> $x219 $x49)))
 (let (($x203 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x277 (= $x219 $x203)))
 (let (($x267 (and $x277 $x334)))
 (let (($x44 (and $x267 $x28)))
 (let (($x8 (and $x44 $x37)))
 (let (($x171 (and $x8 $x167)))
 (let ((?x233 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let (($x195 (= ?x233 input.spec-%tmpvar-4.L1%10%d.2)))
 (let (($x153 (bvuge ?x288 (_ bv1 32))))
 (let (($x215 (=> $x153 $x195)))
 (let (($x193 (bvuge input.spec-%tmpvar-4.L1%10%d.0 (_ bv1 32))))
 (let (($x331 (= $x153 $x193)))
 (let (($x314 (=> $x308 $x49)))
 (let (($x309 (= input.spec-%tmpvar-4.L1%10%d.0 (_ bv0 32))))
 (let (($x311 (= $x308 $x309)))
 (let (($x317 (and $x311 $x314)))
 (let (($x152 (and $x317 $x331)))
 (let (($x190 (and $x152 $x215)))
 (let (($x170 (and $x190 $x171)))
 (let (($x290 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x168 (and $x290 $x170)))
 (let (($x300 (= (_ bv1 32) input.spec-%tmpvar-3.L1%10%d)))
 (let (($x165 (and $x300 $x168)))
 (let (($x166 (= ?x251 input.spec-%var-x0-0.L1%10%d)))
 (let (($x174 (and $x166 $x165)))
 (let (($x294 (= (_ bv12 32) input.spec-%tmpvar-5.L1%17%bbentry)))
 (let (($x176 (and $x294 $x174)))
 (let (($x172 (and $x49 $x176)))
 (let ((?x286 (bvadd ?x251 ?x233)))
 (let (($x287 (= ?x286 input.spec-%tmpvar-6.L1%17%bbentry)))
 (let (($x173 (and $x287 $x172)))
 (let (($x237 (= ?x233 input.spec-%var-x1-0.L1%17%bbentry)))
 (let (($x181 (and $x237 $x173)))
 (let (($x136 (= (_ bv45 32) input.spec-%tmpvar-2.L1%18%bbentry)))
 (let (($x182 (and $x136 $x181)))
 (let (($x188 (and $x49 $x182)))
 (let (($x56 (bvugt ?x81 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x140 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x101)))
 (let (($x42 (=> (bvule ?x81 (bvsub (bvadd ?x81 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x140 $x56)))))))
 (let (($x12 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x121 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x134 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x121)))
 (let (($x45 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x134 $x12)))))))
 (let (($x123 (and $x45 $x42)))
 (let (($x185 (and $x123 $x188)))
 (let (($x298 (=> $x185 $x254)))
 (not $x298))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 156 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708044/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L1%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L1%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x196 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x249 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x196)))
 (let ((?x291 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x249)))
 (let ((?x279 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv1 32)))))
 (let ((?x271 (concat ?x279 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%x)))))
 (let ((?x356 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv2 32)))))
 (let ((?x34 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let ((?x56 (bvadd ?x34 (_ bv3 32))))
 (let ((?x65 (concat (select input.dst.llvm-mem ?x56) (concat ?x356 ?x271))))
 (let ((?x302 (bvadd ?x65 ?x291)))
 (let (($x303 (= (_ bv45 32) ?x302)))
 (let (($x304 (= $x303 true)))
 (let (($x318 (= $x304 true)))
 (let ((?x79 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x234 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x59 (concat ?x85 (concat ?x48 (concat ?x234 ?x79)))))
 (let (($x348 (= ?x59 input.dst.llvm-%x)))
 (let (($x276 (= $x348 true)))
 (let (($x272 (= $x276 true)))
 (let (($x41 (= input.dst.llvm-%x ?x59)))
 (let ((?x23 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x17 (= (_ bv0 32) ?x23)))
 (let ((?x6 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x94 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x6)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (and $x55 $x94)))
 (let (($x14 (and $x38 $x17)))
 (let (($x376 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x366 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x370 (concat (select input.dst.llvm-mem (bvadd ?x366 (_ bv1 32))) (select input.dst.llvm-mem ?x366))))
 (let ((?x372 (concat (select input.dst.llvm-mem (bvadd ?x366 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x366 (_ bv2 32))) ?x370))))
 (let ((?x252 (ite (input.spec-%var-x-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x259 (bvuge ?x252 (_ bv1 32))))
 (=> $x259 (= (input.spec-%var-x-0.1.1 Lambda1Var) ?x372))))))))
 ))
 (let (($x257 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x229 (ite (and (bvsle (_ bv0 32) Lambda1Var) (bvslt Lambda1Var (_ bv10 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x252 (ite (input.spec-%var-x-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x259 (bvuge ?x252 (_ bv1 32))))
 (= $x259 (bvuge ?x229 (_ bv1 32)))))))
 ))
 (let (($x242 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x228 (= false false)))
 (let ((?x252 (ite (input.spec-%var-x-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x130 (= ?x252 (_ bv0 32))))
 (=> $x130 $x228)))))
 ))
 (let (($x221 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x252 (ite (input.spec-%var-x-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x130 (= ?x252 (_ bv0 32))))
 (= $x130 (= (ite (and (bvsle (_ bv0 32) Lambda1Var) (bvslt Lambda1Var (_ bv10 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x240 (and $x221 $x242)))
 (let (($x265 (and $x240 $x257)))
 (let (($x377 (and $x265 $x376)))
 (let (($x73 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x86 (and true $x87)))
 (let (($x340 (= (bvand ?x34 (_ bv4294967292 32)) ?x34)))
 (let (($x339 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x34 (bvsub ?x34 (_ bv4 32))) (bvult ?x34 (bvsub ?x34 (_ bv4 32))))))
 (let (($x337 (and true $x339)))
 (let (($x280 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x50 (and (and (and $x280 $x337) $x340) $x86)))
 (let (($x68 (and $x280 $x50)))
 (let (($x61 (and (and (and (and $x68 $x73) $x377) $x14) $x41)))
 (let (($x342 (= $x61 true)))
 (let (($x343 (= $x342 true)))
 (let (($x351 (= $x343 true)))
 (let (($x77 (= $x68 true)))
 (let (($x66 (= $x77 true)))
 (let (($x76 (= $x66 true)))
 (let (($x352 (and $x76 $x351)))
 (let (($x347 (and $x352 $x272)))
 (let ((?x205 (ite (input.spec-%var-x-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x146 (= ?x205 (_ bv0 32))))
 (let (($x350 (and $x146 $x347)))
 (let ((?x317 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let (($x256 (= ?x317 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x111 (bvuge ?x205 (_ bv1 32))))
 (let (($x102 (=> $x111 $x256)))
 (let (($x110 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x104 (= $x111 $x110)))
 (let (($x228 (= false false)))
 (let (($x148 (=> $x146 $x228)))
 (let (($x200 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x147 (= $x146 $x200)))
 (let (($x149 (and $x147 $x148)))
 (let (($x122 (and $x149 $x104)))
 (let (($x131 (and $x122 $x102)))
 (let (($x345 (and $x131 $x350)))
 (let ((?x309 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let (($x321 (= ?x309 input.spec-%tmpvar-4.L1%10%d.2)))
 (let ((?x202 (ite (input.spec-%var-x-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x25 (bvuge ?x202 (_ bv1 32))))
 (let (($x84 (=> $x25 $x321)))
 (let (($x16 (bvuge input.spec-%tmpvar-4.L1%10%d.0 (_ bv1 32))))
 (let (($x320 (= $x25 $x16)))
 (let (($x284 (= ?x202 (_ bv0 32))))
 (let (($x8 (=> $x284 $x228)))
 (let (($x28 (= input.spec-%tmpvar-4.L1%10%d.0 (_ bv0 32))))
 (let (($x37 (= $x284 $x28)))
 (let (($x7 (and $x37 $x8)))
 (let (($x323 (and $x7 $x320)))
 (let (($x322 (and $x323 $x84)))
 (let (($x346 (and $x322 $x345)))
 (let (($x206 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x349 (and $x206 $x346)))
 (let (($x217 (= (_ bv1 32) input.spec-%tmpvar-3.L1%10%d)))
 (let (($x344 (and $x217 $x349)))
 (let (($x190 (= ?x317 input.spec-%var-x0-0.L1%10%d)))
 (let (($x353 (and $x190 $x344)))
 (let (($x195 (= (_ bv12 32) input.spec-%tmpvar-5.L1%17%bbentry)))
 (let (($x19 (and $x195 $x353)))
 (let (($x282 (and $x228 $x19)))
 (let ((?x153 (bvadd ?x317 ?x309)))
 (let (($x331 (= ?x153 input.spec-%tmpvar-6.L1%17%bbentry)))
 (let (($x278 (and $x331 $x282)))
 (let (($x311 (= ?x309 input.spec-%var-x1-0.L1%17%bbentry)))
 (let (($x273 (and $x311 $x278)))
 (let (($x166 (= (_ bv45 32) input.spec-%tmpvar-2.L1%18%bbentry)))
 (let (($x355 (and $x166 $x273)))
 (let (($x357 (and $x228 $x355)))
 (let (($x117 (bvugt ?x34 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x56)))
 (let (($x136 (=> (bvule ?x34 (bvsub (bvadd ?x34 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x63 $x117)))))))
 (let (($x5 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x12 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x12)))
 (let (($x103 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x11 $x5)))))))
 (let (($x121 (and $x103 $x136)))
 (let (($x359 (and $x121 $x357)))
 (let (($x151 (=> $x359 $x318)))
 (not $x151)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L1%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L1%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x196 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x249 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x196)))
 (let ((?x291 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x249)))
 (let ((?x279 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv1 32)))))
 (let ((?x271 (concat ?x279 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%x)))))
 (let ((?x356 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv2 32)))))
 (let ((?x34 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let ((?x56 (bvadd ?x34 (_ bv3 32))))
 (let ((?x65 (concat (select input.dst.llvm-mem ?x56) (concat ?x356 ?x271))))
 (let ((?x302 (bvadd ?x65 ?x291)))
 (let (($x303 (= (_ bv45 32) ?x302)))
 (let (($x304 (= $x303 true)))
 (let (($x318 (= $x304 true)))
 (let ((?x79 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x234 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x59 (concat ?x85 (concat ?x48 (concat ?x234 ?x79)))))
 (let (($x348 (= ?x59 input.dst.llvm-%x)))
 (let (($x276 (= $x348 true)))
 (let (($x272 (= $x276 true)))
 (let (($x41 (= input.dst.llvm-%x ?x59)))
 (let ((?x23 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x17 (= (_ bv0 32) ?x23)))
 (let ((?x6 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x94 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x6)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (and $x55 $x94)))
 (let (($x14 (and $x38 $x17)))
 (let (($x376 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x366 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x370 (concat (select input.dst.llvm-mem (bvadd ?x366 (_ bv1 32))) (select input.dst.llvm-mem ?x366))))
 (let ((?x372 (concat (select input.dst.llvm-mem (bvadd ?x366 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x366 (_ bv2 32))) ?x370))))
 (let ((?x252 (ite (input.spec-%var-x-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x259 (bvuge ?x252 (_ bv1 32))))
 (=> $x259 (= (input.spec-%var-x-0.1.1 Lambda1Var) ?x372))))))))
 ))
 (let (($x257 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x229 (ite (and (bvsle (_ bv0 32) Lambda1Var) (bvslt Lambda1Var (_ bv10 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x252 (ite (input.spec-%var-x-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x259 (bvuge ?x252 (_ bv1 32))))
 (= $x259 (bvuge ?x229 (_ bv1 32)))))))
 ))
 (let (($x242 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x228 (= false false)))
 (let ((?x252 (ite (input.spec-%var-x-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x130 (= ?x252 (_ bv0 32))))
 (=> $x130 $x228)))))
 ))
 (let (($x221 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x252 (ite (input.spec-%var-x-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x130 (= ?x252 (_ bv0 32))))
 (= $x130 (= (ite (and (bvsle (_ bv0 32) Lambda1Var) (bvslt Lambda1Var (_ bv10 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x240 (and $x221 $x242)))
 (let (($x265 (and $x240 $x257)))
 (let (($x377 (and $x265 $x376)))
 (let (($x73 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x86 (and true $x87)))
 (let (($x340 (= (bvand ?x34 (_ bv4294967292 32)) ?x34)))
 (let (($x339 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x34 (bvsub ?x34 (_ bv4 32))) (bvult ?x34 (bvsub ?x34 (_ bv4 32))))))
 (let (($x337 (and true $x339)))
 (let (($x280 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x50 (and (and (and $x280 $x337) $x340) $x86)))
 (let (($x68 (and $x280 $x50)))
 (let (($x61 (and (and (and (and $x68 $x73) $x377) $x14) $x41)))
 (let (($x342 (= $x61 true)))
 (let (($x343 (= $x342 true)))
 (let (($x351 (= $x343 true)))
 (let (($x77 (= $x68 true)))
 (let (($x66 (= $x77 true)))
 (let (($x76 (= $x66 true)))
 (let (($x352 (and $x76 $x351)))
 (let (($x347 (and $x352 $x272)))
 (let ((?x205 (ite (input.spec-%var-x-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x146 (= ?x205 (_ bv0 32))))
 (let (($x350 (and $x146 $x347)))
 (let ((?x317 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let (($x256 (= ?x317 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x111 (bvuge ?x205 (_ bv1 32))))
 (let (($x102 (=> $x111 $x256)))
 (let (($x110 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x104 (= $x111 $x110)))
 (let (($x228 (= false false)))
 (let (($x148 (=> $x146 $x228)))
 (let (($x200 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x147 (= $x146 $x200)))
 (let (($x149 (and $x147 $x148)))
 (let (($x122 (and $x149 $x104)))
 (let (($x131 (and $x122 $x102)))
 (let (($x345 (and $x131 $x350)))
 (let ((?x309 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let (($x321 (= ?x309 input.spec-%tmpvar-4.L1%10%d.2)))
 (let ((?x202 (ite (input.spec-%var-x-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x25 (bvuge ?x202 (_ bv1 32))))
 (let (($x84 (=> $x25 $x321)))
 (let (($x16 (bvuge input.spec-%tmpvar-4.L1%10%d.0 (_ bv1 32))))
 (let (($x320 (= $x25 $x16)))
 (let (($x284 (= ?x202 (_ bv0 32))))
 (let (($x8 (=> $x284 $x228)))
 (let (($x28 (= input.spec-%tmpvar-4.L1%10%d.0 (_ bv0 32))))
 (let (($x37 (= $x284 $x28)))
 (let (($x7 (and $x37 $x8)))
 (let (($x323 (and $x7 $x320)))
 (let (($x322 (and $x323 $x84)))
 (let (($x346 (and $x322 $x345)))
 (let (($x206 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x349 (and $x206 $x346)))
 (let (($x217 (= (_ bv1 32) input.spec-%tmpvar-3.L1%10%d)))
 (let (($x344 (and $x217 $x349)))
 (let (($x190 (= ?x317 input.spec-%var-x0-0.L1%10%d)))
 (let (($x353 (and $x190 $x344)))
 (let (($x195 (= (_ bv12 32) input.spec-%tmpvar-5.L1%17%bbentry)))
 (let (($x19 (and $x195 $x353)))
 (let (($x282 (and $x228 $x19)))
 (let ((?x153 (bvadd ?x317 ?x309)))
 (let (($x331 (= ?x153 input.spec-%tmpvar-6.L1%17%bbentry)))
 (let (($x278 (and $x331 $x282)))
 (let (($x311 (= ?x309 input.spec-%var-x1-0.L1%17%bbentry)))
 (let (($x273 (and $x311 $x278)))
 (let (($x166 (= (_ bv45 32) input.spec-%tmpvar-2.L1%18%bbentry)))
 (let (($x355 (and $x166 $x273)))
 (let (($x357 (and $x228 $x355)))
 (let (($x117 (bvugt ?x34 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x56)))
 (let (($x136 (=> (bvule ?x34 (bvsub (bvadd ?x34 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x63 $x117)))))))
 (let (($x5 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x12 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x12)))
 (let (($x103 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x11 $x5)))))))
 (let (($x121 (and $x103 $x136)))
 (let (($x359 (and $x121 $x357)))
 (let (($x151 (=> $x359 $x318)))
 (not $x151)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 155 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708044/query
