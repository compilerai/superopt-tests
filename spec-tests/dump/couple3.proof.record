==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x10 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x10)))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x13)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x8 $x6)))
 (let (($x19 (and $x9 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x10 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x10)))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x13)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x8 $x6)))
 (let (($x19 (and $x9 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv32771 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676054/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32))
(assert
 (let (($x206 (= true false)))
 (let (($x207 (= $x206 true)))
 (let ((?x44 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let (($x190 (= ?x44 input.spec-%tmpvar-4.L2%10%d.2)))
 (let (($x179 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x180 (ite $x179 (_ bv1 32) (_ bv0 32))))
 (let (($x186 (bvuge ?x180 (_ bv1 32))))
 (let (($x191 (=> $x186 $x190)))
 (let (($x187 (bvuge input.spec-%tmpvar-4.L2%10%d.0 (_ bv1 32))))
 (let (($x188 (= $x186 $x187)))
 (let (($x13 (= false false)))
 (let (($x181 (= ?x180 (_ bv0 32))))
 (let (($x185 (=> $x181 $x13)))
 (let (($x183 (= input.spec-%tmpvar-4.L2%10%d.0 (_ bv0 32))))
 (let (($x184 (= $x181 $x183)))
 (let (($x194 (and (and (and $x184 $x185) $x188) $x191)))
 (let (($x195 (= $x194 true)))
 (let ((?x39 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let (($x172 (= ?x39 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x161 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x162 (ite $x161 (_ bv1 32) (_ bv0 32))))
 (let (($x168 (bvuge ?x162 (_ bv1 32))))
 (let (($x173 (=> $x168 $x172)))
 (let (($x169 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x170 (= $x168 $x169)))
 (let (($x163 (= ?x162 (_ bv0 32))))
 (let (($x167 (=> $x163 $x13)))
 (let (($x165 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x166 (= $x163 $x165)))
 (let (($x176 (and (and (and $x166 $x167) $x170) $x173)))
 (let (($x177 (= $x176 true)))
 (let (($x157 (forall ((input.ind-%var73X (_ BitVec 32)) )(let ((?x144 (bvadd (bvmul input.ind-%var73X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x148 (concat (select input.dst.llvm-mem (bvadd ?x144 (_ bv1 32))) (select input.dst.llvm-mem ?x144))))
 (let ((?x154 (concat (select input.dst.llvm-mem (bvadd ?x144 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x144 (_ bv2 32))) ?x148))))
 (let ((?x23 (input.spec-%var-x-0.1.1 input.ind-%var73X)))
 (let (($x114 (input.spec-%var-x-0.0.1 input.ind-%var73X)))
 (=> $x114 (= ?x23 ?x154))))))))
 ))
 (let (($x125 (forall ((input.ind-%var72X (_ BitVec 32)) )(let (($x114 (input.spec-%var-x-0.0.1 input.ind-%var72X)))
 (= $x114 (and (bvsle (_ bv0 32) input.ind-%var72X) (bvslt input.ind-%var72X (_ bv10 32))))))
 ))
 (let (($x158 (and $x125 $x157)))
 (let (($x159 (= $x158 true)))
 (let ((?x97 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x107 (concat ?x106 (concat ?x103 (concat ?x99 ?x97)))))
 (let (($x108 (= ?x107 input.dst.llvm-%x)))
 (let (($x109 (= $x108 true)))
 (let (($x110 (= $x109 true)))
 (let (($x86 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%x (_ bv3 32)))))
 (let (($x92 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x85 $x86)))))))
 (let (($x80 (= $x92 true)))
 (let (($x81 (= $x80 true)))
 (let (($x93 (= $x81 true)))
 (let ((?x71 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x72 (= (_ bv0 32) ?x71)))
 (let ((?x68 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x69 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x68)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (and $x67 $x69)))
 (let (($x73 (and $x70 $x72)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (and $x55 $x73)))
 (let (($x60 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x66 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x59 $x60)))))))
 (let (($x75 (and $x66 $x74)))
 (let (($x76 (= $x75 true)))
 (let (($x77 (= $x76 true)))
 (let (($x78 (= $x77 true)))
 (let ((?x22 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let (($x42 (bvugt ?x22 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x22 (_ bv3 32)))))
 (let (($x51 (=> (bvule ?x22 (bvsub (bvadd ?x22 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x27 $x42)))))))
 (let (($x9 (= $x51 true)))
 (let (($x37 (= $x9 true)))
 (let (($x52 (= $x37 true)))
 (let (($x79 (and $x52 $x78)))
 (let (($x94 (and $x79 $x93)))
 (let (($x111 (and $x94 $x110)))
 (let (($x160 (and $x111 $x159)))
 (let (($x178 (and $x160 $x177)))
 (let (($x196 (and $x178 $x195)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x197 (and $x10 $x196)))
 (let (($x7 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%d)))
 (let (($x198 (and $x7 $x197)))
 (let (($x35 (= ?x39 input.spec-%var-x0-0.L2%10%d)))
 (let (($x199 (and $x35 $x198)))
 (let (($x5 (= (_ bv12 32) input.spec-%tmpvar-5.L2%17%bbentry)))
 (let (($x200 (and $x5 $x199)))
 (let (($x201 (and $x13 $x200)))
 (let ((?x46 (bvadd ?x39 ?x44)))
 (let (($x41 (= ?x46 input.spec-%tmpvar-6.L2%17%bbentry)))
 (let (($x202 (and $x41 $x201)))
 (let (($x47 (= ?x44 input.spec-%var-x1-0.L2%17%bbentry)))
 (let (($x203 (and $x47 $x202)))
 (let (($x20 (= (_ bv45 32) input.spec-%tmpvar-2.L2%18%bbentry)))
 (let (($x204 (and $x20 $x203)))
 (let (($x205 (and $x13 $x204)))
 (let (($x208 (=> $x205 $x207)))
 (not $x208))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32))
(assert
 (let (($x206 (= true false)))
 (let (($x207 (= $x206 true)))
 (let ((?x44 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let (($x190 (= ?x44 input.spec-%tmpvar-4.L2%10%d.2)))
 (let (($x179 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x180 (ite $x179 (_ bv1 32) (_ bv0 32))))
 (let (($x186 (bvuge ?x180 (_ bv1 32))))
 (let (($x191 (=> $x186 $x190)))
 (let (($x187 (bvuge input.spec-%tmpvar-4.L2%10%d.0 (_ bv1 32))))
 (let (($x188 (= $x186 $x187)))
 (let (($x13 (= false false)))
 (let (($x181 (= ?x180 (_ bv0 32))))
 (let (($x185 (=> $x181 $x13)))
 (let (($x183 (= input.spec-%tmpvar-4.L2%10%d.0 (_ bv0 32))))
 (let (($x184 (= $x181 $x183)))
 (let (($x194 (and (and (and $x184 $x185) $x188) $x191)))
 (let (($x195 (= $x194 true)))
 (let ((?x39 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let (($x172 (= ?x39 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x161 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x162 (ite $x161 (_ bv1 32) (_ bv0 32))))
 (let (($x168 (bvuge ?x162 (_ bv1 32))))
 (let (($x173 (=> $x168 $x172)))
 (let (($x169 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x170 (= $x168 $x169)))
 (let (($x163 (= ?x162 (_ bv0 32))))
 (let (($x167 (=> $x163 $x13)))
 (let (($x165 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x166 (= $x163 $x165)))
 (let (($x176 (and (and (and $x166 $x167) $x170) $x173)))
 (let (($x177 (= $x176 true)))
 (let (($x157 (forall ((input.ind-%var73X (_ BitVec 32)) )(let ((?x144 (bvadd (bvmul input.ind-%var73X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x148 (concat (select input.dst.llvm-mem (bvadd ?x144 (_ bv1 32))) (select input.dst.llvm-mem ?x144))))
 (let ((?x154 (concat (select input.dst.llvm-mem (bvadd ?x144 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x144 (_ bv2 32))) ?x148))))
 (let ((?x23 (input.spec-%var-x-0.1.1 input.ind-%var73X)))
 (let (($x114 (input.spec-%var-x-0.0.1 input.ind-%var73X)))
 (=> $x114 (= ?x23 ?x154))))))))
 ))
 (let (($x125 (forall ((input.ind-%var72X (_ BitVec 32)) )(let (($x114 (input.spec-%var-x-0.0.1 input.ind-%var72X)))
 (= $x114 (and (bvsle (_ bv0 32) input.ind-%var72X) (bvslt input.ind-%var72X (_ bv10 32))))))
 ))
 (let (($x158 (and $x125 $x157)))
 (let (($x159 (= $x158 true)))
 (let ((?x97 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x107 (concat ?x106 (concat ?x103 (concat ?x99 ?x97)))))
 (let (($x108 (= ?x107 input.dst.llvm-%x)))
 (let (($x109 (= $x108 true)))
 (let (($x110 (= $x109 true)))
 (let (($x86 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%x (_ bv3 32)))))
 (let (($x92 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x85 $x86)))))))
 (let (($x80 (= $x92 true)))
 (let (($x81 (= $x80 true)))
 (let (($x93 (= $x81 true)))
 (let ((?x71 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x72 (= (_ bv0 32) ?x71)))
 (let ((?x68 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x69 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x68)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (and $x67 $x69)))
 (let (($x73 (and $x70 $x72)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (and $x55 $x73)))
 (let (($x60 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x66 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x59 $x60)))))))
 (let (($x75 (and $x66 $x74)))
 (let (($x76 (= $x75 true)))
 (let (($x77 (= $x76 true)))
 (let (($x78 (= $x77 true)))
 (let ((?x22 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let (($x42 (bvugt ?x22 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x22 (_ bv3 32)))))
 (let (($x51 (=> (bvule ?x22 (bvsub (bvadd ?x22 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x27 $x42)))))))
 (let (($x9 (= $x51 true)))
 (let (($x37 (= $x9 true)))
 (let (($x52 (= $x37 true)))
 (let (($x79 (and $x52 $x78)))
 (let (($x94 (and $x79 $x93)))
 (let (($x111 (and $x94 $x110)))
 (let (($x160 (and $x111 $x159)))
 (let (($x178 (and $x160 $x177)))
 (let (($x196 (and $x178 $x195)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x197 (and $x10 $x196)))
 (let (($x7 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%d)))
 (let (($x198 (and $x7 $x197)))
 (let (($x35 (= ?x39 input.spec-%var-x0-0.L2%10%d)))
 (let (($x199 (and $x35 $x198)))
 (let (($x5 (= (_ bv12 32) input.spec-%tmpvar-5.L2%17%bbentry)))
 (let (($x200 (and $x5 $x199)))
 (let (($x201 (and $x13 $x200)))
 (let ((?x46 (bvadd ?x39 ?x44)))
 (let (($x41 (= ?x46 input.spec-%tmpvar-6.L2%17%bbentry)))
 (let (($x202 (and $x41 $x201)))
 (let (($x47 (= ?x44 input.spec-%var-x1-0.L2%17%bbentry)))
 (let (($x203 (and $x47 $x202)))
 (let (($x20 (= (_ bv45 32) input.spec-%tmpvar-2.L2%18%bbentry)))
 (let (($x204 (and $x20 $x203)))
 (let (($x205 (and $x13 $x204)))
 (let (($x208 (=> $x205 $x207)))
 (not $x208))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32)
    #x0000000c)
  (define-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32)
    #x0000002d)
  (define-fun input.spec-%var-x-0.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x00000001) true
      (not (or (not (bvsle #x00000000 x!0)) (bvsle #x0000000a x!0))))))
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-0.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
    (ite (= x!0 #x00000001) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x0000000b)
                                     (k!2 #x0000000a)
                                     (k!2 #x00000009)
                                     (k!2 #x00000008)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x0000000b)
                                     (k!2 #x0000000a)
                                     (k!2 #x00000009)
                                     (k!2 #x00000008)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x0000000b)
                                     (k!2 #x0000000a)
                                     (k!2 #x00000009)
                                     (k!2 #x00000008)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #x0000000b)
                                     (k!2 #x0000000a)
                                     (k!2 #x00000009)
                                     (k!2 #x00000008))))))
        (concat a!1 a!2 a!3 a!4)))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32)
    #x00200000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x60000000)
  (define-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32)
    #x00000800)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xc0000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x60000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x60000000)
  (define-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32)
    #x0000000c)
  (define-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32)
    #x0000002d)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x60000003) #xc0
      #x00))
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000001 x!0)
         (ite (bvule #x0000000a x!0)
              (ite (bvule #x0000000b x!0) #x0000000b #x0000000a)
              #x00000001)
         #x00000000))
  (define-fun input.spec-%var-x-0.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
    (ite (= x!0 #x00000001) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x60000003)
                                     (k!2 #x60000002)
                                     (k!2 #x60000001)
                                     (k!2 #x60000000)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x60000003)
                                     (k!2 #x60000002)
                                     (k!2 #x60000001)
                                     (k!2 #x60000000)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x60000003)
                                     (k!2 #x60000002)
                                     (k!2 #x60000001)
                                     (k!2 #x60000000)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #x60000003)
                                     (k!2 #x60000002)
                                     (k!2 #x60000001)
                                     (k!2 #x60000000))))))
        (concat a!1 a!2 a!3 a!4)))))
  (define-fun input.spec-%var-x-0.0.1!4 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x00000001) true
      false)))
  (define-fun input.spec-%var-x-0.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-0.0.1!4 (k!3 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676054/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32))
(assert
 (let (($x132 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x133 (ite $x132 (_ bv1 32) (_ bv0 32))))
 (let (($x119 (bvuge ?x133 (_ bv1 32))))
 (let (($x131 (= ?x133 (_ bv0 32))))
 (let (($x225 (or $x131 $x119)))
 (let (($x208 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x209 (ite $x208 (_ bv1 32) (_ bv0 32))))
 (let (($x126 (bvuge ?x209 (_ bv1 32))))
 (let (($x226 (and $x126 $x225)))
 (let (($x26 (= ?x209 (_ bv0 32))))
 (let (($x227 (or $x26 $x226)))
 (let (($x228 (or false $x227)))
 (let (($x229 (= $x228 true)))
 (let (($x230 (= $x229 true)))
 (let ((?x14 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let (($x142 (= ?x14 input.spec-%tmpvar-4.L2%10%d.2)))
 (let (($x18 (=> $x119 $x142)))
 (let (($x120 (bvuge input.spec-%tmpvar-4.L2%10%d.0 (_ bv1 32))))
 (let (($x141 (= $x119 $x120)))
 (let (($x10 (= false false)))
 (let (($x113 (=> $x131 $x10)))
 (let (($x137 (= input.spec-%tmpvar-4.L2%10%d.0 (_ bv0 32))))
 (let (($x140 (= $x131 $x137)))
 (let (($x212 (and (and (and $x140 $x113) $x141) $x18)))
 (let (($x213 (= $x212 true)))
 (let ((?x65 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let (($x118 (= ?x65 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x129 (=> $x126 $x118)))
 (let (($x128 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x112 (= $x126 $x128)))
 (let (($x138 (and (and (= $x26 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))) (=> $x26 $x10)) $x112)))
 (let (($x139 (and $x138 $x129)))
 (let (($x135 (= $x139 true)))
 (let (($x204 (forall ((input.ind-%var123X (_ BitVec 32)) )(let ((?x189 (bvadd (bvmul input.ind-%var123X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x195 (concat (select input.dst.llvm-mem (bvadd ?x189 (_ bv1 32))) (select input.dst.llvm-mem ?x189))))
 (let ((?x201 (concat (select input.dst.llvm-mem (bvadd ?x189 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x189 (_ bv2 32))) ?x195))))
 (let ((?x9 (input.spec-%var-x-0.1.1 input.ind-%var123X)))
 (let (($x162 (input.spec-%var-x-0.0.1 input.ind-%var123X)))
 (=> $x162 (= ?x9 ?x201))))))))
 ))
 (let (($x175 (forall ((input.ind-%var122X (_ BitVec 32)) )(let (($x162 (input.spec-%var-x-0.0.1 input.ind-%var122X)))
 (= $x162 (and (bvsle (_ bv0 32) input.ind-%var122X) (bvslt input.ind-%var122X (_ bv10 32))))))
 ))
 (let (($x205 (and $x175 $x204)))
 (let (($x206 (= $x205 true)))
 (let ((?x152 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x149 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x145 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x154 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x155 (concat ?x154 (concat ?x145 (concat ?x149 ?x152)))))
 (let (($x156 (= ?x155 input.dst.llvm-%x)))
 (let (($x157 (= $x156 true)))
 (let (($x158 (= $x157 true)))
 (let ((?x31 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x114 (= (_ bv0 32) ?x31)))
 (let ((?x109 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x110 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x109)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x111 (and $x108 $x110)))
 (let (($x122 (and $x111 $x114)))
 (let (($x95 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x117 (and $x95 $x122)))
 (let (($x103 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x107 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x102 $x103)))))))
 (let (($x121 (and $x107 $x117)))
 (let (($x123 (= $x121 true)))
 (let (($x124 (= $x123 true)))
 (let (($x125 (= $x124 true)))
 (let (($x85 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x86 (and true $x85)))
 (let ((?x21 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let (($x79 (= (bvand ?x21 (_ bv4294967292 32)) ?x21)))
 (let (($x76 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x21 (bvsub ?x21 (_ bv4 32))) (bvult ?x21 (bvsub ?x21 (_ bv4 32))))))
 (let (($x77 (and true $x76)))
 (let (($x71 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x89 (and (and (and $x71 $x77) $x79) $x86)))
 (let (($x90 (and $x71 $x89)))
 (let (($x92 (= $x90 true)))
 (let (($x80 (= $x92 true)))
 (let (($x81 (= $x80 true)))
 (let (($x23 (and $x81 $x125)))
 (let (($x159 (and $x23 $x158)))
 (let (($x207 (and $x159 $x206)))
 (let (($x136 (and $x207 $x135)))
 (let (($x214 (and $x136 $x213)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x215 (and $x68 $x214)))
 (let (($x55 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%d)))
 (let (($x216 (and $x55 $x215)))
 (let (($x66 (= ?x65 input.spec-%var-x0-0.L2%10%d)))
 (let (($x217 (and $x66 $x216)))
 (let (($x63 (= (_ bv12 32) input.spec-%tmpvar-5.L2%17%bbentry)))
 (let (($x218 (and $x63 $x217)))
 (let (($x219 (and $x10 $x218)))
 (let ((?x58 (bvadd ?x65 ?x14)))
 (let (($x60 (= ?x58 input.spec-%tmpvar-6.L2%17%bbentry)))
 (let (($x220 (and $x60 $x219)))
 (let (($x56 (= ?x14 input.spec-%var-x1-0.L2%17%bbentry)))
 (let (($x221 (and $x56 $x220)))
 (let (($x30 (= (_ bv45 32) input.spec-%tmpvar-2.L2%18%bbentry)))
 (let (($x222 (and $x30 $x221)))
 (let (($x223 (and $x10 $x222)))
 (let (($x12 (bvugt ?x21 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x21 (_ bv3 32)))))
 (let (($x40 (=> (bvule ?x21 (bvsub (bvadd ?x21 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x33 $x12)))))))
 (let (($x48 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%x (_ bv3 32)))))
 (let (($x36 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x19 $x48)))))))
 (let (($x24 (and $x36 $x40)))
 (let (($x224 (and $x24 $x223)))
 (let (($x231 (=> $x224 $x230)))
 (not $x231))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32))
(assert
 (let (($x132 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x133 (ite $x132 (_ bv1 32) (_ bv0 32))))
 (let (($x119 (bvuge ?x133 (_ bv1 32))))
 (let (($x131 (= ?x133 (_ bv0 32))))
 (let (($x225 (or $x131 $x119)))
 (let (($x208 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x209 (ite $x208 (_ bv1 32) (_ bv0 32))))
 (let (($x126 (bvuge ?x209 (_ bv1 32))))
 (let (($x226 (and $x126 $x225)))
 (let (($x26 (= ?x209 (_ bv0 32))))
 (let (($x227 (or $x26 $x226)))
 (let (($x228 (or false $x227)))
 (let (($x229 (= $x228 true)))
 (let (($x230 (= $x229 true)))
 (let ((?x14 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let (($x142 (= ?x14 input.spec-%tmpvar-4.L2%10%d.2)))
 (let (($x18 (=> $x119 $x142)))
 (let (($x120 (bvuge input.spec-%tmpvar-4.L2%10%d.0 (_ bv1 32))))
 (let (($x141 (= $x119 $x120)))
 (let (($x10 (= false false)))
 (let (($x113 (=> $x131 $x10)))
 (let (($x137 (= input.spec-%tmpvar-4.L2%10%d.0 (_ bv0 32))))
 (let (($x140 (= $x131 $x137)))
 (let (($x212 (and (and (and $x140 $x113) $x141) $x18)))
 (let (($x213 (= $x212 true)))
 (let ((?x65 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let (($x118 (= ?x65 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x129 (=> $x126 $x118)))
 (let (($x128 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x112 (= $x126 $x128)))
 (let (($x138 (and (and (= $x26 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))) (=> $x26 $x10)) $x112)))
 (let (($x139 (and $x138 $x129)))
 (let (($x135 (= $x139 true)))
 (let (($x204 (forall ((input.ind-%var123X (_ BitVec 32)) )(let ((?x189 (bvadd (bvmul input.ind-%var123X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x195 (concat (select input.dst.llvm-mem (bvadd ?x189 (_ bv1 32))) (select input.dst.llvm-mem ?x189))))
 (let ((?x201 (concat (select input.dst.llvm-mem (bvadd ?x189 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x189 (_ bv2 32))) ?x195))))
 (let ((?x9 (input.spec-%var-x-0.1.1 input.ind-%var123X)))
 (let (($x162 (input.spec-%var-x-0.0.1 input.ind-%var123X)))
 (=> $x162 (= ?x9 ?x201))))))))
 ))
 (let (($x175 (forall ((input.ind-%var122X (_ BitVec 32)) )(let (($x162 (input.spec-%var-x-0.0.1 input.ind-%var122X)))
 (= $x162 (and (bvsle (_ bv0 32) input.ind-%var122X) (bvslt input.ind-%var122X (_ bv10 32))))))
 ))
 (let (($x205 (and $x175 $x204)))
 (let (($x206 (= $x205 true)))
 (let ((?x152 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x149 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x145 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x154 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x155 (concat ?x154 (concat ?x145 (concat ?x149 ?x152)))))
 (let (($x156 (= ?x155 input.dst.llvm-%x)))
 (let (($x157 (= $x156 true)))
 (let (($x158 (= $x157 true)))
 (let ((?x31 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x114 (= (_ bv0 32) ?x31)))
 (let ((?x109 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x110 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x109)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x111 (and $x108 $x110)))
 (let (($x122 (and $x111 $x114)))
 (let (($x95 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x117 (and $x95 $x122)))
 (let (($x103 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x107 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x102 $x103)))))))
 (let (($x121 (and $x107 $x117)))
 (let (($x123 (= $x121 true)))
 (let (($x124 (= $x123 true)))
 (let (($x125 (= $x124 true)))
 (let (($x85 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x86 (and true $x85)))
 (let ((?x21 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let (($x79 (= (bvand ?x21 (_ bv4294967292 32)) ?x21)))
 (let (($x76 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x21 (bvsub ?x21 (_ bv4 32))) (bvult ?x21 (bvsub ?x21 (_ bv4 32))))))
 (let (($x77 (and true $x76)))
 (let (($x71 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x89 (and (and (and $x71 $x77) $x79) $x86)))
 (let (($x90 (and $x71 $x89)))
 (let (($x92 (= $x90 true)))
 (let (($x80 (= $x92 true)))
 (let (($x81 (= $x80 true)))
 (let (($x23 (and $x81 $x125)))
 (let (($x159 (and $x23 $x158)))
 (let (($x207 (and $x159 $x206)))
 (let (($x136 (and $x207 $x135)))
 (let (($x214 (and $x136 $x213)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x215 (and $x68 $x214)))
 (let (($x55 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%d)))
 (let (($x216 (and $x55 $x215)))
 (let (($x66 (= ?x65 input.spec-%var-x0-0.L2%10%d)))
 (let (($x217 (and $x66 $x216)))
 (let (($x63 (= (_ bv12 32) input.spec-%tmpvar-5.L2%17%bbentry)))
 (let (($x218 (and $x63 $x217)))
 (let (($x219 (and $x10 $x218)))
 (let ((?x58 (bvadd ?x65 ?x14)))
 (let (($x60 (= ?x58 input.spec-%tmpvar-6.L2%17%bbentry)))
 (let (($x220 (and $x60 $x219)))
 (let (($x56 (= ?x14 input.spec-%var-x1-0.L2%17%bbentry)))
 (let (($x221 (and $x56 $x220)))
 (let (($x30 (= (_ bv45 32) input.spec-%tmpvar-2.L2%18%bbentry)))
 (let (($x222 (and $x30 $x221)))
 (let (($x223 (and $x10 $x222)))
 (let (($x12 (bvugt ?x21 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x21 (_ bv3 32)))))
 (let (($x40 (=> (bvule ?x21 (bvsub (bvadd ?x21 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x33 $x12)))))))
 (let (($x48 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%x (_ bv3 32)))))
 (let (($x36 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x19 $x48)))))))
 (let (($x24 (and $x36 $x40)))
 (let (($x224 (and $x24 $x223)))
 (let (($x231 (=> $x224 $x230)))
 (not $x231))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 137 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676054/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x243 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x246 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x243)))
 (let ((?x248 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x246)))
 (let ((?x233 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv1 32)))))
 (let ((?x234 (concat ?x233 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%x)))))
 (let ((?x236 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv2 32)))))
 (let ((?x21 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let ((?x14 (bvadd ?x21 (_ bv3 32))))
 (let ((?x239 (concat (select input.dst.llvm-mem ?x14) (concat ?x236 ?x234))))
 (let ((?x249 (bvadd ?x239 ?x248)))
 (let ((?x43 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let ((?x74 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let ((?x68 (bvadd ?x74 ?x43)))
 (let (($x250 (= ?x68 ?x249)))
 (let (($x251 (= $x250 true)))
 (let (($x252 (= $x251 true)))
 (let (($x166 (= ?x43 input.spec-%tmpvar-4.L2%10%d.2)))
 (let (($x79 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x88 (ite $x79 (_ bv1 32) (_ bv0 32))))
 (let (($x83 (bvuge ?x88 (_ bv1 32))))
 (let (($x176 (=> $x83 $x166)))
 (let (($x173 (bvuge input.spec-%tmpvar-4.L2%10%d.0 (_ bv1 32))))
 (let (($x160 (= $x83 $x173)))
 (let (($x78 (= false false)))
 (let (($x34 (= ?x88 (_ bv0 32))))
 (let (($x171 (=> $x34 $x78)))
 (let (($x93 (= input.spec-%tmpvar-4.L2%10%d.0 (_ bv0 32))))
 (let (($x144 (= $x34 $x93)))
 (let (($x192 (and (and (and $x144 $x171) $x160) $x176)))
 (let (($x182 (= $x192 true)))
 (let (($x227 (= ?x74 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x64 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x27 (ite $x64 (_ bv1 32) (_ bv0 32))))
 (let (($x73 (bvuge ?x27 (_ bv1 32))))
 (let (($x228 (=> $x73 $x227)))
 (let (($x224 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x225 (= $x73 $x224)))
 (let (($x219 (= ?x27 (_ bv0 32))))
 (let (($x223 (=> $x219 $x78)))
 (let (($x221 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x222 (= $x219 $x221)))
 (let (($x231 (and (and (and $x222 $x223) $x225) $x228)))
 (let (($x232 (= $x231 true)))
 (let (($x215 (forall ((input.ind-%var145X (_ BitVec 32)) )(let ((?x140 (bvadd (bvmul input.ind-%var145X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x120 (concat (select input.dst.llvm-mem (bvadd ?x140 (_ bv1 32))) (select input.dst.llvm-mem ?x140))))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd ?x140 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x140 (_ bv2 32))) ?x120))))
 (let ((?x16 (input.spec-%var-x-0.1.1 input.ind-%var145X)))
 (let (($x66 (input.spec-%var-x-0.0.1 input.ind-%var145X)))
 (=> $x66 (= ?x16 ?x212))))))))
 ))
 (let (($x53 (forall ((input.ind-%var144X (_ BitVec 32)) )(let (($x66 (input.spec-%var-x-0.0.1 input.ind-%var144X)))
 (= $x66 (and (bvsle (_ bv0 32) input.ind-%var144X) (bvslt input.ind-%var144X (_ bv10 32))))))
 ))
 (let (($x216 (and $x53 $x215)))
 (let (($x217 (= $x216 true)))
 (let ((?x157 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x159 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x165 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x170 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x175 (concat ?x170 (concat ?x165 (concat ?x159 ?x157)))))
 (let (($x190 (= ?x175 input.dst.llvm-%x)))
 (let (($x195 (= $x190 true)))
 (let (($x198 (= $x195 true)))
 (let (($x9 (= input.dst.llvm-%x ?x175)))
 (let ((?x149 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x152 (= (_ bv0 32) ?x149)))
 (let ((?x147 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x145 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x147)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x153 (and $x146 $x145)))
 (let (($x150 (and $x153 $x152)))
 (let (($x31 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x148 (and $x31 $x150)))
 (let (($x123 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x121 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x154 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x121 $x123)))))))
 (let (($x98 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x99 (and true $x98)))
 (let (($x106 (= (bvand ?x21 (_ bv4294967292 32)) ?x21)))
 (let (($x80 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x21 (bvsub ?x21 (_ bv4 32))) (bvult ?x21 (bvsub ?x21 (_ bv4 32))))))
 (let (($x81 (and true $x80)))
 (let (($x85 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x107 (and (and (and $x85 $x81) $x106) $x99)))
 (let (($x94 (and $x85 $x107)))
 (let (($x200 (and (and (and (and $x94 $x154) true) $x148) $x9)))
 (let (($x196 (= $x200 true)))
 (let (($x197 (= $x196 true)))
 (let (($x191 (= $x197 true)))
 (let (($x95 (= $x94 true)))
 (let (($x108 (= $x95 true)))
 (let (($x109 (= $x108 true)))
 (let (($x194 (and $x109 $x191)))
 (let (($x201 (and $x194 $x198)))
 (let (($x218 (and $x201 $x217)))
 (let (($x37 (and $x218 $x232)))
 (let (($x183 (and $x37 $x182)))
 (let (($x82 (and $x73 $x83)))
 (let (($x179 (and $x82 $x183)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x180 (and $x17 $x179)))
 (let (($x42 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%d)))
 (let (($x178 (and $x42 $x180)))
 (let (($x12 (= ?x74 input.spec-%var-x0-0.L2%10%d)))
 (let (($x181 (and $x12 $x178)))
 (let (($x54 (= (_ bv12 32) input.spec-%tmpvar-5.L2%17%bbentry)))
 (let (($x184 (and $x54 $x181)))
 (let (($x186 (and $x78 $x184)))
 (let (($x63 (= ?x68 input.spec-%tmpvar-6.L2%17%bbentry)))
 (let (($x161 (and $x63 $x186)))
 (let (($x52 (= ?x43 input.spec-%var-x1-0.L2%17%bbentry)))
 (let (($x13 (and $x52 $x161)))
 (let (($x48 (= (_ bv45 32) input.spec-%tmpvar-2.L2%18%bbentry)))
 (let (($x167 (and $x48 $x13)))
 (let (($x187 (and $x78 $x167)))
 (let (($x58 (bvugt ?x21 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x14)))
 (let (($x87 (=> (bvule ?x21 (bvsub (bvadd ?x21 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x11 $x58)))))))
 (let (($x49 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x65 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x65)))
 (let (($x36 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x7 $x49)))))))
 (let (($x41 (and $x36 $x87)))
 (let (($x172 (and $x41 $x187)))
 (let (($x253 (=> $x172 $x252)))
 (not $x253))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x243 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x246 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x243)))
 (let ((?x248 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x246)))
 (let ((?x233 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv1 32)))))
 (let ((?x234 (concat ?x233 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%x)))))
 (let ((?x236 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv2 32)))))
 (let ((?x21 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let ((?x14 (bvadd ?x21 (_ bv3 32))))
 (let ((?x239 (concat (select input.dst.llvm-mem ?x14) (concat ?x236 ?x234))))
 (let ((?x249 (bvadd ?x239 ?x248)))
 (let ((?x43 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let ((?x74 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let ((?x68 (bvadd ?x74 ?x43)))
 (let (($x250 (= ?x68 ?x249)))
 (let (($x251 (= $x250 true)))
 (let (($x252 (= $x251 true)))
 (let (($x166 (= ?x43 input.spec-%tmpvar-4.L2%10%d.2)))
 (let (($x79 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x88 (ite $x79 (_ bv1 32) (_ bv0 32))))
 (let (($x83 (bvuge ?x88 (_ bv1 32))))
 (let (($x176 (=> $x83 $x166)))
 (let (($x173 (bvuge input.spec-%tmpvar-4.L2%10%d.0 (_ bv1 32))))
 (let (($x160 (= $x83 $x173)))
 (let (($x78 (= false false)))
 (let (($x34 (= ?x88 (_ bv0 32))))
 (let (($x171 (=> $x34 $x78)))
 (let (($x93 (= input.spec-%tmpvar-4.L2%10%d.0 (_ bv0 32))))
 (let (($x144 (= $x34 $x93)))
 (let (($x192 (and (and (and $x144 $x171) $x160) $x176)))
 (let (($x182 (= $x192 true)))
 (let (($x227 (= ?x74 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x64 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x27 (ite $x64 (_ bv1 32) (_ bv0 32))))
 (let (($x73 (bvuge ?x27 (_ bv1 32))))
 (let (($x228 (=> $x73 $x227)))
 (let (($x224 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x225 (= $x73 $x224)))
 (let (($x219 (= ?x27 (_ bv0 32))))
 (let (($x223 (=> $x219 $x78)))
 (let (($x221 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x222 (= $x219 $x221)))
 (let (($x231 (and (and (and $x222 $x223) $x225) $x228)))
 (let (($x232 (= $x231 true)))
 (let (($x215 (forall ((input.ind-%var145X (_ BitVec 32)) )(let ((?x140 (bvadd (bvmul input.ind-%var145X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x120 (concat (select input.dst.llvm-mem (bvadd ?x140 (_ bv1 32))) (select input.dst.llvm-mem ?x140))))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd ?x140 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x140 (_ bv2 32))) ?x120))))
 (let ((?x16 (input.spec-%var-x-0.1.1 input.ind-%var145X)))
 (let (($x66 (input.spec-%var-x-0.0.1 input.ind-%var145X)))
 (=> $x66 (= ?x16 ?x212))))))))
 ))
 (let (($x53 (forall ((input.ind-%var144X (_ BitVec 32)) )(let (($x66 (input.spec-%var-x-0.0.1 input.ind-%var144X)))
 (= $x66 (and (bvsle (_ bv0 32) input.ind-%var144X) (bvslt input.ind-%var144X (_ bv10 32))))))
 ))
 (let (($x216 (and $x53 $x215)))
 (let (($x217 (= $x216 true)))
 (let ((?x157 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x159 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x165 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x170 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x175 (concat ?x170 (concat ?x165 (concat ?x159 ?x157)))))
 (let (($x190 (= ?x175 input.dst.llvm-%x)))
 (let (($x195 (= $x190 true)))
 (let (($x198 (= $x195 true)))
 (let (($x9 (= input.dst.llvm-%x ?x175)))
 (let ((?x149 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x152 (= (_ bv0 32) ?x149)))
 (let ((?x147 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x145 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x147)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x153 (and $x146 $x145)))
 (let (($x150 (and $x153 $x152)))
 (let (($x31 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x148 (and $x31 $x150)))
 (let (($x123 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x121 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x154 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x121 $x123)))))))
 (let (($x98 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x99 (and true $x98)))
 (let (($x106 (= (bvand ?x21 (_ bv4294967292 32)) ?x21)))
 (let (($x80 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x21 (bvsub ?x21 (_ bv4 32))) (bvult ?x21 (bvsub ?x21 (_ bv4 32))))))
 (let (($x81 (and true $x80)))
 (let (($x85 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x107 (and (and (and $x85 $x81) $x106) $x99)))
 (let (($x94 (and $x85 $x107)))
 (let (($x200 (and (and (and (and $x94 $x154) true) $x148) $x9)))
 (let (($x196 (= $x200 true)))
 (let (($x197 (= $x196 true)))
 (let (($x191 (= $x197 true)))
 (let (($x95 (= $x94 true)))
 (let (($x108 (= $x95 true)))
 (let (($x109 (= $x108 true)))
 (let (($x194 (and $x109 $x191)))
 (let (($x201 (and $x194 $x198)))
 (let (($x218 (and $x201 $x217)))
 (let (($x37 (and $x218 $x232)))
 (let (($x183 (and $x37 $x182)))
 (let (($x82 (and $x73 $x83)))
 (let (($x179 (and $x82 $x183)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x180 (and $x17 $x179)))
 (let (($x42 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%d)))
 (let (($x178 (and $x42 $x180)))
 (let (($x12 (= ?x74 input.spec-%var-x0-0.L2%10%d)))
 (let (($x181 (and $x12 $x178)))
 (let (($x54 (= (_ bv12 32) input.spec-%tmpvar-5.L2%17%bbentry)))
 (let (($x184 (and $x54 $x181)))
 (let (($x186 (and $x78 $x184)))
 (let (($x63 (= ?x68 input.spec-%tmpvar-6.L2%17%bbentry)))
 (let (($x161 (and $x63 $x186)))
 (let (($x52 (= ?x43 input.spec-%var-x1-0.L2%17%bbentry)))
 (let (($x13 (and $x52 $x161)))
 (let (($x48 (= (_ bv45 32) input.spec-%tmpvar-2.L2%18%bbentry)))
 (let (($x167 (and $x48 $x13)))
 (let (($x187 (and $x78 $x167)))
 (let (($x58 (bvugt ?x21 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x14)))
 (let (($x87 (=> (bvule ?x21 (bvsub (bvadd ?x21 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x11 $x58)))))))
 (let (($x49 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x65 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x65)))
 (let (($x36 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x7 $x49)))))))
 (let (($x41 (and $x36 $x87)))
 (let (($x172 (and $x41 $x187)))
 (let (($x253 (=> $x172 $x252)))
 (not $x253))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676054/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x116 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x135 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x116)))
 (let ((?x203 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x135)))
 (let ((?x202 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv1 32)))))
 (let ((?x204 (concat ?x202 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%x)))))
 (let ((?x126 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv2 32)))))
 (let ((?x56 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let ((?x58 (bvadd ?x56 (_ bv3 32))))
 (let ((?x132 (concat (select input.dst.llvm-mem ?x58) (concat ?x126 ?x204))))
 (let ((?x207 (bvadd ?x132 ?x203)))
 (let (($x208 (= (_ bv12 32) ?x207)))
 (let (($x131 (= $x208 true)))
 (let (($x96 (= $x131 true)))
 (let ((?x52 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let (($x245 (= ?x52 input.spec-%tmpvar-4.L2%10%d.2)))
 (let (($x86 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x90 (ite $x86 (_ bv1 32) (_ bv0 32))))
 (let (($x237 (bvuge ?x90 (_ bv1 32))))
 (let (($x241 (=> $x237 $x245)))
 (let (($x239 (bvuge input.spec-%tmpvar-4.L2%10%d.0 (_ bv1 32))))
 (let (($x247 (= $x237 $x239)))
 (let (($x40 (= false false)))
 (let (($x92 (= ?x90 (_ bv0 32))))
 (let (($x234 (=> $x92 $x40)))
 (let (($x233 (= input.spec-%tmpvar-4.L2%10%d.0 (_ bv0 32))))
 (let (($x188 (= $x92 $x233)))
 (let (($x243 (and (and (and $x188 $x234) $x247) $x241)))
 (let (($x246 (= $x243 true)))
 (let ((?x54 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let (($x13 (= ?x54 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x82 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x85 (ite $x82 (_ bv1 32) (_ bv0 32))))
 (let (($x89 (bvuge ?x85 (_ bv1 32))))
 (let (($x167 (=> $x89 $x13)))
 (let (($x184 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x186 (= $x89 $x184)))
 (let (($x183 (= ?x85 (_ bv0 32))))
 (let (($x181 (=> $x183 $x40)))
 (let (($x180 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x178 (= $x183 $x180)))
 (let (($x238 (and (and (and $x178 $x181) $x186) $x167)))
 (let (($x235 (= $x238 true)))
 (let (($x166 (forall ((input.ind-%var165X (_ BitVec 32)) )(let ((?x231 (bvadd (bvmul input.ind-%var165X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x20 (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv1 32))) (select input.dst.llvm-mem ?x231))))
 (let ((?x160 (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv2 32))) ?x20))))
 (let ((?x74 (input.spec-%var-x-0.1.1 input.ind-%var165X)))
 (let (($x91 (input.spec-%var-x-0.0.1 input.ind-%var165X)))
 (=> $x91 (= ?x74 ?x160))))))))
 ))
 (let (($x213 (forall ((input.ind-%var164X (_ BitVec 32)) )(let (($x91 (input.spec-%var-x-0.0.1 input.ind-%var164X)))
 (= $x91 (and (bvsle (_ bv0 32) input.ind-%var164X) (bvslt input.ind-%var164X (_ bv10 32))))))
 ))
 (let (($x176 (and $x213 $x166)))
 (let (($x192 (= $x176 true)))
 (let ((?x157 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x174 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x196 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x194 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x190 (concat ?x194 (concat ?x196 (concat ?x174 ?x157)))))
 (let (($x38 (= ?x190 input.dst.llvm-%x)))
 (let (($x53 (= $x38 true)))
 (let (($x16 (= $x53 true)))
 (let (($x195 (= input.dst.llvm-%x ?x190)))
 (let ((?x170 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x162 (= (_ bv0 32) ?x170)))
 (let ((?x199 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x155 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x199)))
 (let (($x148 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x169 (and $x148 $x155)))
 (let (($x168 (and $x169 $x162)))
 (let (($x154 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x165 (and $x154 $x168)))
 (let (($x146 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x150 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x31 $x146)))))))
 (let (($x109 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x114 (and true $x109)))
 (let (($x99 (= (bvand ?x56 (_ bv4294967292 32)) ?x56)))
 (let (($x102 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x56 (bvsub ?x56 (_ bv4 32))) (bvult ?x56 (bvsub ?x56 (_ bv4 32))))))
 (let (($x103 (and true $x102)))
 (let (($x105 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x117 (and (and (and $x105 $x103) $x99) $x114)))
 (let (($x121 (and $x105 $x117)))
 (let (($x66 (and (and (and (and $x121 $x150) true) $x165) $x195)))
 (let (($x26 (= $x66 true)))
 (let (($x205 (= $x26 true)))
 (let (($x209 (= $x205 true)))
 (let (($x123 (= $x121 true)))
 (let (($x124 (= $x123 true)))
 (let (($x125 (= $x124 true)))
 (let (($x15 (and $x125 $x209)))
 (let (($x137 (and $x15 $x16)))
 (let (($x182 (and $x137 $x192)))
 (let (($x236 (and $x182 $x235)))
 (let (($x248 (and $x236 $x246)))
 (let (($x80 (and $x89 $x92)))
 (let (($x249 (and $x80 $x248)))
 (let (($x83 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x250 (and $x83 $x249)))
 (let (($x79 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%d)))
 (let (($x251 (and $x79 $x250)))
 (let (($x27 (= ?x54 input.spec-%var-x0-0.L2%10%d)))
 (let (($x252 (and $x27 $x251)))
 (let (($x17 (= (_ bv12 32) input.spec-%tmpvar-5.L2%17%bbentry)))
 (let (($x253 (and $x17 $x252)))
 (let (($x254 (and $x40 $x253)))
 (let ((?x60 (bvadd ?x54 ?x52)))
 (let (($x62 (= ?x60 input.spec-%tmpvar-6.L2%17%bbentry)))
 (let (($x28 (and $x62 $x254)))
 (let (($x63 (= ?x52 input.spec-%var-x1-0.L2%17%bbentry)))
 (let (($x47 (and $x63 $x28)))
 (let (($x59 (= (_ bv45 32) input.spec-%tmpvar-2.L2%18%bbentry)))
 (let (($x75 (and $x59 $x47)))
 (let (($x19 (and $x40 $x75)))
 (let (($x32 (bvugt ?x56 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x58)))
 (let (($x163 (=> (bvule ?x56 (bvsub (bvadd ?x56 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x50 $x32)))))))
 (let (($x6 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x49 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x49)))
 (let (($x30 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x71 $x6)))))))
 (let (($x76 (and $x30 $x163)))
 (let (($x110 (and $x76 $x19)))
 (let (($x134 (=> $x110 $x96)))
 (not $x134))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x116 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x135 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x116)))
 (let ((?x203 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x135)))
 (let ((?x202 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv1 32)))))
 (let ((?x204 (concat ?x202 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%x)))))
 (let ((?x126 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv2 32)))))
 (let ((?x56 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let ((?x58 (bvadd ?x56 (_ bv3 32))))
 (let ((?x132 (concat (select input.dst.llvm-mem ?x58) (concat ?x126 ?x204))))
 (let ((?x207 (bvadd ?x132 ?x203)))
 (let (($x208 (= (_ bv12 32) ?x207)))
 (let (($x131 (= $x208 true)))
 (let (($x96 (= $x131 true)))
 (let ((?x52 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let (($x245 (= ?x52 input.spec-%tmpvar-4.L2%10%d.2)))
 (let (($x86 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x90 (ite $x86 (_ bv1 32) (_ bv0 32))))
 (let (($x237 (bvuge ?x90 (_ bv1 32))))
 (let (($x241 (=> $x237 $x245)))
 (let (($x239 (bvuge input.spec-%tmpvar-4.L2%10%d.0 (_ bv1 32))))
 (let (($x247 (= $x237 $x239)))
 (let (($x40 (= false false)))
 (let (($x92 (= ?x90 (_ bv0 32))))
 (let (($x234 (=> $x92 $x40)))
 (let (($x233 (= input.spec-%tmpvar-4.L2%10%d.0 (_ bv0 32))))
 (let (($x188 (= $x92 $x233)))
 (let (($x243 (and (and (and $x188 $x234) $x247) $x241)))
 (let (($x246 (= $x243 true)))
 (let ((?x54 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let (($x13 (= ?x54 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x82 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x85 (ite $x82 (_ bv1 32) (_ bv0 32))))
 (let (($x89 (bvuge ?x85 (_ bv1 32))))
 (let (($x167 (=> $x89 $x13)))
 (let (($x184 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x186 (= $x89 $x184)))
 (let (($x183 (= ?x85 (_ bv0 32))))
 (let (($x181 (=> $x183 $x40)))
 (let (($x180 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x178 (= $x183 $x180)))
 (let (($x238 (and (and (and $x178 $x181) $x186) $x167)))
 (let (($x235 (= $x238 true)))
 (let (($x166 (forall ((input.ind-%var165X (_ BitVec 32)) )(let ((?x231 (bvadd (bvmul input.ind-%var165X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x20 (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv1 32))) (select input.dst.llvm-mem ?x231))))
 (let ((?x160 (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv2 32))) ?x20))))
 (let ((?x74 (input.spec-%var-x-0.1.1 input.ind-%var165X)))
 (let (($x91 (input.spec-%var-x-0.0.1 input.ind-%var165X)))
 (=> $x91 (= ?x74 ?x160))))))))
 ))
 (let (($x213 (forall ((input.ind-%var164X (_ BitVec 32)) )(let (($x91 (input.spec-%var-x-0.0.1 input.ind-%var164X)))
 (= $x91 (and (bvsle (_ bv0 32) input.ind-%var164X) (bvslt input.ind-%var164X (_ bv10 32))))))
 ))
 (let (($x176 (and $x213 $x166)))
 (let (($x192 (= $x176 true)))
 (let ((?x157 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x174 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x196 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x194 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x190 (concat ?x194 (concat ?x196 (concat ?x174 ?x157)))))
 (let (($x38 (= ?x190 input.dst.llvm-%x)))
 (let (($x53 (= $x38 true)))
 (let (($x16 (= $x53 true)))
 (let (($x195 (= input.dst.llvm-%x ?x190)))
 (let ((?x170 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x162 (= (_ bv0 32) ?x170)))
 (let ((?x199 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x155 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x199)))
 (let (($x148 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x169 (and $x148 $x155)))
 (let (($x168 (and $x169 $x162)))
 (let (($x154 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x165 (and $x154 $x168)))
 (let (($x146 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x150 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x31 $x146)))))))
 (let (($x109 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x114 (and true $x109)))
 (let (($x99 (= (bvand ?x56 (_ bv4294967292 32)) ?x56)))
 (let (($x102 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x56 (bvsub ?x56 (_ bv4 32))) (bvult ?x56 (bvsub ?x56 (_ bv4 32))))))
 (let (($x103 (and true $x102)))
 (let (($x105 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x117 (and (and (and $x105 $x103) $x99) $x114)))
 (let (($x121 (and $x105 $x117)))
 (let (($x66 (and (and (and (and $x121 $x150) true) $x165) $x195)))
 (let (($x26 (= $x66 true)))
 (let (($x205 (= $x26 true)))
 (let (($x209 (= $x205 true)))
 (let (($x123 (= $x121 true)))
 (let (($x124 (= $x123 true)))
 (let (($x125 (= $x124 true)))
 (let (($x15 (and $x125 $x209)))
 (let (($x137 (and $x15 $x16)))
 (let (($x182 (and $x137 $x192)))
 (let (($x236 (and $x182 $x235)))
 (let (($x248 (and $x236 $x246)))
 (let (($x80 (and $x89 $x92)))
 (let (($x249 (and $x80 $x248)))
 (let (($x83 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x250 (and $x83 $x249)))
 (let (($x79 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%d)))
 (let (($x251 (and $x79 $x250)))
 (let (($x27 (= ?x54 input.spec-%var-x0-0.L2%10%d)))
 (let (($x252 (and $x27 $x251)))
 (let (($x17 (= (_ bv12 32) input.spec-%tmpvar-5.L2%17%bbentry)))
 (let (($x253 (and $x17 $x252)))
 (let (($x254 (and $x40 $x253)))
 (let ((?x60 (bvadd ?x54 ?x52)))
 (let (($x62 (= ?x60 input.spec-%tmpvar-6.L2%17%bbentry)))
 (let (($x28 (and $x62 $x254)))
 (let (($x63 (= ?x52 input.spec-%var-x1-0.L2%17%bbentry)))
 (let (($x47 (and $x63 $x28)))
 (let (($x59 (= (_ bv45 32) input.spec-%tmpvar-2.L2%18%bbentry)))
 (let (($x75 (and $x59 $x47)))
 (let (($x19 (and $x40 $x75)))
 (let (($x32 (bvugt ?x56 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x58)))
 (let (($x163 (=> (bvule ?x56 (bvsub (bvadd ?x56 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x50 $x32)))))))
 (let (($x6 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x49 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x49)))
 (let (($x30 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x71 $x6)))))))
 (let (($x76 (and $x30 $x163)))
 (let (($x110 (and $x76 $x19)))
 (let (($x134 (=> $x110 $x96)))
 (not $x134))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 149 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676054/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x220 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x222 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x220)))
 (let ((?x230 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x222)))
 (let ((?x216 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv1 32)))))
 (let ((?x140 (concat ?x216 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%x)))))
 (let ((?x211 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv2 32)))))
 (let ((?x65 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let ((?x32 (bvadd ?x65 (_ bv3 32))))
 (let ((?x224 (concat (select input.dst.llvm-mem ?x32) (concat ?x211 ?x140))))
 (let ((?x142 (bvadd ?x224 ?x230)))
 (let (($x210 (= (_ bv45 32) ?x142)))
 (let (($x119 (= $x210 true)))
 (let (($x226 (= $x119 true)))
 (let ((?x61 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let (($x112 (= ?x61 input.spec-%tmpvar-4.L2%10%d.2)))
 (let (($x110 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x136 (ite $x110 (_ bv1 32) (_ bv0 32))))
 (let (($x204 (bvuge ?x136 (_ bv1 32))))
 (let (($x118 (=> $x204 $x112)))
 (let (($x128 (bvuge input.spec-%tmpvar-4.L2%10%d.0 (_ bv1 32))))
 (let (($x132 (= $x204 $x128)))
 (let (($x24 (= false false)))
 (let (($x206 (= ?x136 (_ bv0 32))))
 (let (($x156 (=> $x206 $x24)))
 (let (($x130 (= input.spec-%tmpvar-4.L2%10%d.0 (_ bv0 32))))
 (let (($x202 (= $x206 $x130)))
 (let (($x129 (and (and (and $x202 $x156) $x132) $x118)))
 (let (($x116 (= $x129 true)))
 (let ((?x17 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let (($x252 (= ?x17 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x80 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x105 (ite $x80 (_ bv1 32) (_ bv0 32))))
 (let (($x248 (bvuge ?x105 (_ bv1 32))))
 (let (($x253 (=> $x248 $x252)))
 (let (($x249 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x250 (= $x248 $x249)))
 (let (($x100 (= ?x105 (_ bv0 32))))
 (let (($x246 (=> $x100 $x24)))
 (let (($x241 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x243 (= $x100 $x241)))
 (let (($x47 (and (and (and $x243 $x246) $x250) $x253)))
 (let (($x75 (= $x47 true)))
 (let (($x239 (forall ((input.ind-%var185X (_ BitVec 32)) )(let ((?x172 (bvadd (bvmul input.ind-%var185X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x238 (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv1 32))) (select input.dst.llvm-mem ?x172))))
 (let ((?x234 (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv2 32))) ?x238))))
 (let ((?x60 (input.spec-%var-x-0.1.1 input.ind-%var185X)))
 (let (($x81 (input.spec-%var-x-0.0.1 input.ind-%var185X)))
 (=> $x81 (= ?x60 ?x234))))))))
 ))
 (let (($x232 (forall ((input.ind-%var184X (_ BitVec 32)) )(let (($x81 (input.spec-%var-x-0.0.1 input.ind-%var184X)))
 (= $x81 (and (bvsle (_ bv0 32) input.ind-%var184X) (bvslt input.ind-%var184X (_ bv10 32))))))
 ))
 (let (($x247 (and $x232 $x239)))
 (let (($x240 (= $x247 true)))
 (let ((?x200 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x197 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x26 (concat ?x66 (concat ?x197 (concat ?x51 ?x200)))))
 (let (($x120 (= ?x26 input.dst.llvm-%x)))
 (let (($x141 (= $x120 true)))
 (let (($x113 (= $x141 true)))
 (let (($x205 (= input.dst.llvm-%x ?x26)))
 (let ((?x165 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x77 (= (_ bv0 32) ?x165)))
 (let ((?x170 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x162 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x170)))
 (let (($x169 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x168 (and $x169 $x162)))
 (let (($x158 (and $x168 $x77)))
 (let (($x147 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x191 (and $x147 $x158)))
 (let (($x198 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x150 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x155 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x150 $x198)))))))
 (let (($x117 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x121 (and true $x117)))
 (let (($x107 (= (bvand ?x65 (_ bv4294967292 32)) ?x65)))
 (let (($x99 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x65 (bvsub ?x65 (_ bv4 32))) (bvult ?x65 (bvsub ?x65 (_ bv4 32))))))
 (let (($x151 (and true $x99)))
 (let (($x104 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x125 (and (and (and $x104 $x151) $x107) $x121)))
 (let (($x193 (and $x104 $x125)))
 (let (($x53 (and (and (and (and $x193 $x155) true) $x191) $x205)))
 (let (($x16 (= $x53 true)))
 (let (($x137 (= $x16 true)))
 (let (($x69 (= $x137 true)))
 (let (($x189 (= $x193 true)))
 (let (($x152 (= $x189 true)))
 (let (($x111 (= $x152 true)))
 (let (($x91 (and $x111 $x69)))
 (let (($x127 (and $x91 $x113)))
 (let (($x244 (and $x127 $x240)))
 (let (($x19 (and $x244 $x75)))
 (let (($x135 (and $x19 $x116)))
 (let (($x203 (and $x100 $x135)))
 (let (($x92 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x207 (and $x92 $x203)))
 (let (($x86 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%d)))
 (let (($x208 (and $x86 $x207)))
 (let (($x85 (= ?x17 input.spec-%var-x0-0.L2%10%d)))
 (let (($x131 (and $x85 $x208)))
 (let (($x83 (= (_ bv12 32) input.spec-%tmpvar-5.L2%17%bbentry)))
 (let (($x96 (and $x83 $x131)))
 (let (($x134 (and $x24 $x96)))
 (let ((?x64 (bvadd ?x17 ?x61)))
 (let (($x73 (= ?x64 input.spec-%tmpvar-6.L2%17%bbentry)))
 (let (($x5 (and $x73 $x134)))
 (let (($x42 (= ?x61 input.spec-%var-x1-0.L2%17%bbentry)))
 (let (($x84 (and $x42 $x5)))
 (let (($x63 (= (_ bv45 32) input.spec-%tmpvar-2.L2%18%bbentry)))
 (let (($x68 (and $x63 $x84)))
 (let (($x57 (and $x24 $x68)))
 (let (($x46 (bvugt ?x65 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x32)))
 (let (($x59 (=> (bvule ?x65 (bvsub (bvadd ?x65 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x39 $x46)))))))
 (let (($x8 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x6 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x55 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x6)))
 (let (($x11 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x55 $x8)))))))
 (let (($x48 (and $x11 $x59)))
 (let (($x44 (and $x48 $x57)))
 (let (($x215 (=> $x44 $x226)))
 (not $x215)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x220 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x222 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x220)))
 (let ((?x230 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x222)))
 (let ((?x216 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv1 32)))))
 (let ((?x140 (concat ?x216 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%x)))))
 (let ((?x211 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv2 32)))))
 (let ((?x65 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let ((?x32 (bvadd ?x65 (_ bv3 32))))
 (let ((?x224 (concat (select input.dst.llvm-mem ?x32) (concat ?x211 ?x140))))
 (let ((?x142 (bvadd ?x224 ?x230)))
 (let (($x210 (= (_ bv45 32) ?x142)))
 (let (($x119 (= $x210 true)))
 (let (($x226 (= $x119 true)))
 (let ((?x61 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let (($x112 (= ?x61 input.spec-%tmpvar-4.L2%10%d.2)))
 (let (($x110 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x136 (ite $x110 (_ bv1 32) (_ bv0 32))))
 (let (($x204 (bvuge ?x136 (_ bv1 32))))
 (let (($x118 (=> $x204 $x112)))
 (let (($x128 (bvuge input.spec-%tmpvar-4.L2%10%d.0 (_ bv1 32))))
 (let (($x132 (= $x204 $x128)))
 (let (($x24 (= false false)))
 (let (($x206 (= ?x136 (_ bv0 32))))
 (let (($x156 (=> $x206 $x24)))
 (let (($x130 (= input.spec-%tmpvar-4.L2%10%d.0 (_ bv0 32))))
 (let (($x202 (= $x206 $x130)))
 (let (($x129 (and (and (and $x202 $x156) $x132) $x118)))
 (let (($x116 (= $x129 true)))
 (let ((?x17 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let (($x252 (= ?x17 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x80 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x105 (ite $x80 (_ bv1 32) (_ bv0 32))))
 (let (($x248 (bvuge ?x105 (_ bv1 32))))
 (let (($x253 (=> $x248 $x252)))
 (let (($x249 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x250 (= $x248 $x249)))
 (let (($x100 (= ?x105 (_ bv0 32))))
 (let (($x246 (=> $x100 $x24)))
 (let (($x241 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x243 (= $x100 $x241)))
 (let (($x47 (and (and (and $x243 $x246) $x250) $x253)))
 (let (($x75 (= $x47 true)))
 (let (($x239 (forall ((input.ind-%var185X (_ BitVec 32)) )(let ((?x172 (bvadd (bvmul input.ind-%var185X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x238 (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv1 32))) (select input.dst.llvm-mem ?x172))))
 (let ((?x234 (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv2 32))) ?x238))))
 (let ((?x60 (input.spec-%var-x-0.1.1 input.ind-%var185X)))
 (let (($x81 (input.spec-%var-x-0.0.1 input.ind-%var185X)))
 (=> $x81 (= ?x60 ?x234))))))))
 ))
 (let (($x232 (forall ((input.ind-%var184X (_ BitVec 32)) )(let (($x81 (input.spec-%var-x-0.0.1 input.ind-%var184X)))
 (= $x81 (and (bvsle (_ bv0 32) input.ind-%var184X) (bvslt input.ind-%var184X (_ bv10 32))))))
 ))
 (let (($x247 (and $x232 $x239)))
 (let (($x240 (= $x247 true)))
 (let ((?x200 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x197 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x26 (concat ?x66 (concat ?x197 (concat ?x51 ?x200)))))
 (let (($x120 (= ?x26 input.dst.llvm-%x)))
 (let (($x141 (= $x120 true)))
 (let (($x113 (= $x141 true)))
 (let (($x205 (= input.dst.llvm-%x ?x26)))
 (let ((?x165 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x77 (= (_ bv0 32) ?x165)))
 (let ((?x170 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x162 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x170)))
 (let (($x169 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x168 (and $x169 $x162)))
 (let (($x158 (and $x168 $x77)))
 (let (($x147 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x191 (and $x147 $x158)))
 (let (($x198 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x150 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x155 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x150 $x198)))))))
 (let (($x117 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x121 (and true $x117)))
 (let (($x107 (= (bvand ?x65 (_ bv4294967292 32)) ?x65)))
 (let (($x99 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x65 (bvsub ?x65 (_ bv4 32))) (bvult ?x65 (bvsub ?x65 (_ bv4 32))))))
 (let (($x151 (and true $x99)))
 (let (($x104 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x125 (and (and (and $x104 $x151) $x107) $x121)))
 (let (($x193 (and $x104 $x125)))
 (let (($x53 (and (and (and (and $x193 $x155) true) $x191) $x205)))
 (let (($x16 (= $x53 true)))
 (let (($x137 (= $x16 true)))
 (let (($x69 (= $x137 true)))
 (let (($x189 (= $x193 true)))
 (let (($x152 (= $x189 true)))
 (let (($x111 (= $x152 true)))
 (let (($x91 (and $x111 $x69)))
 (let (($x127 (and $x91 $x113)))
 (let (($x244 (and $x127 $x240)))
 (let (($x19 (and $x244 $x75)))
 (let (($x135 (and $x19 $x116)))
 (let (($x203 (and $x100 $x135)))
 (let (($x92 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x207 (and $x92 $x203)))
 (let (($x86 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%d)))
 (let (($x208 (and $x86 $x207)))
 (let (($x85 (= ?x17 input.spec-%var-x0-0.L2%10%d)))
 (let (($x131 (and $x85 $x208)))
 (let (($x83 (= (_ bv12 32) input.spec-%tmpvar-5.L2%17%bbentry)))
 (let (($x96 (and $x83 $x131)))
 (let (($x134 (and $x24 $x96)))
 (let ((?x64 (bvadd ?x17 ?x61)))
 (let (($x73 (= ?x64 input.spec-%tmpvar-6.L2%17%bbentry)))
 (let (($x5 (and $x73 $x134)))
 (let (($x42 (= ?x61 input.spec-%var-x1-0.L2%17%bbentry)))
 (let (($x84 (and $x42 $x5)))
 (let (($x63 (= (_ bv45 32) input.spec-%tmpvar-2.L2%18%bbentry)))
 (let (($x68 (and $x63 $x84)))
 (let (($x57 (and $x24 $x68)))
 (let (($x46 (bvugt ?x65 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x32)))
 (let (($x59 (=> (bvule ?x65 (bvsub (bvadd ?x65 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x39 $x46)))))))
 (let (($x8 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x6 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x55 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x6)))
 (let (($x11 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x55 $x8)))))))
 (let (($x48 (and $x11 $x59)))
 (let (($x44 (and $x48 $x57)))
 (let (($x215 (=> $x44 $x226)))
 (not $x215)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 148 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676054/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32))
(assert
 (let (($x84 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x68 (ite $x84 (_ bv1 32) (_ bv0 32))))
 (let (($x159 (bvuge ?x68 (_ bv1 32))))
 (let (($x57 (= ?x68 (_ bv0 32))))
 (let (($x12 (or $x57 $x159)))
 (let (($x139 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x204 (ite $x139 (_ bv1 32) (_ bv0 32))))
 (let (($x118 (bvuge ?x204 (_ bv1 32))))
 (let (($x67 (and $x118 $x12)))
 (let (($x128 (= ?x204 (_ bv0 32))))
 (let (($x22 (or $x128 $x67)))
 (let (($x31 (or false $x22)))
 (let (($x9 (= $x31 true)))
 (let (($x20 (= $x9 true)))
 (let ((?x70 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let (($x217 (= ?x70 input.spec-%tmpvar-4.L2%10%d.2)))
 (let (($x224 (=> $x159 $x217)))
 (let (($x216 (bvuge input.spec-%tmpvar-4.L2%10%d.0 (_ bv1 32))))
 (let (($x23 (= $x159 $x216)))
 (let (($x43 (= false false)))
 (let (($x211 (=> $x57 $x43)))
 (let (($x218 (= input.spec-%tmpvar-4.L2%10%d.0 (_ bv0 32))))
 (let (($x18 (= $x57 $x218)))
 (let (($x219 (and (and (and $x18 $x211) $x23) $x224)))
 (let (($x78 (= $x219 true)))
 (let ((?x83 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let (($x203 (= ?x83 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x207 (=> $x118 $x203)))
 (let (($x129 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x116 (= $x118 $x129)))
 (let (($x131 (and (and (= $x128 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))) (=> $x128 $x43)) $x116)))
 (let (($x96 (and $x131 $x207)))
 (let (($x134 (= $x96 true)))
 (let (($x126 (forall ((input.ind-%var204X (_ BitVec 32)) )(let ((?x248 (bvadd (bvmul input.ind-%var204X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x251 (concat (select input.dst.llvm-mem (bvadd ?x248 (_ bv1 32))) (select input.dst.llvm-mem ?x248))))
 (let ((?x110 (concat (select input.dst.llvm-mem (bvadd ?x248 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x248 (_ bv2 32))) ?x251))))
 (let ((?x64 (input.spec-%var-x-0.1.1 input.ind-%var204X)))
 (let (($x34 (input.spec-%var-x-0.0.1 input.ind-%var204X)))
 (=> $x34 (= ?x64 ?x110))))))))
 ))
 (let (($x161 (forall ((input.ind-%var203X (_ BitVec 32)) )(let (($x34 (input.spec-%var-x-0.0.1 input.ind-%var203X)))
 (= $x34 (and (bvsle (_ bv0 32) input.ind-%var203X) (bvslt input.ind-%var203X (_ bv10 32))))))
 ))
 (let (($x130 (and $x161 $x126)))
 (let (($x202 (= $x130 true)))
 (let ((?x26 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x127 (concat ?x113 (concat ?x91 (concat ?x53 ?x26)))))
 (let (($x54 (= ?x127 input.dst.llvm-%x)))
 (let (($x81 (= $x54 true)))
 (let (($x144 (= $x81 true)))
 (let ((?x194 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x195 (= (_ bv0 32) ?x194)))
 (let ((?x158 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x191 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x158)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (and $x77 $x191)))
 (let (($x66 (and $x38 $x195)))
 (let (($x154 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x157 (and $x154 $x66)))
 (let (($x146 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x165 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x15 $x146)))))))
 (let (($x175 (and $x165 $x157)))
 (let (($x197 (= $x175 true)))
 (let (($x196 (= $x197 true)))
 (let (($x51 (= $x196 true)))
 (let (($x189 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x152 (and true $x189)))
 (let ((?x97 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let (($x114 (= (bvand ?x97 (_ bv4294967292 32)) ?x97)))
 (let (($x108 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x97 (bvsub ?x97 (_ bv4 32))) (bvult ?x97 (bvsub ?x97 (_ bv4 32))))))
 (let (($x95 (and true $x108)))
 (let (($x151 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x153 (and (and (and $x151 $x95) $x114) $x152)))
 (let (($x199 (and $x151 $x153)))
 (let (($x149 (= $x199 true)))
 (let (($x150 (= $x149 true)))
 (let (($x198 (= $x150 true)))
 (let (($x200 (and $x198 $x51)))
 (let (($x228 (and $x200 $x144)))
 (let (($x156 (and $x228 $x202)))
 (let (($x5 (and $x156 $x134)))
 (let (($x223 (and $x5 $x78)))
 (let (($x122 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x225 (and $x122 $x223)))
 (let (($x103 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%d)))
 (let (($x220 (and $x103 $x225)))
 (let (($x101 (= ?x83 input.spec-%var-x0-0.L2%10%d)))
 (let (($x222 (and $x101 $x220)))
 (let (($x92 (= (_ bv12 32) input.spec-%tmpvar-5.L2%17%bbentry)))
 (let (($x230 (and $x92 $x222)))
 (let (($x142 (and $x43 $x230)))
 (let ((?x82 (bvadd ?x83 ?x70)))
 (let (($x89 (= ?x82 input.spec-%tmpvar-6.L2%17%bbentry)))
 (let (($x210 (and $x89 $x142)))
 (let (($x79 (= ?x70 input.spec-%var-x1-0.L2%17%bbentry)))
 (let (($x119 (and $x79 $x210)))
 (let (($x62 (= (_ bv45 32) input.spec-%tmpvar-2.L2%18%bbentry)))
 (let (($x226 (and $x62 $x119)))
 (let (($x215 (and $x43 $x226)))
 (let (($x41 (bvugt ?x97 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x87 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x97 (_ bv3 32)))))
 (let (($x72 (=> (bvule ?x97 (bvsub (bvadd ?x97 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x87 $x41)))))))
 (let (($x21 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%x (_ bv3 32)))))
 (let (($x50 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x36 $x21)))))))
 (let (($x35 (and $x50 $x72)))
 (let (($x227 (and $x35 $x215)))
 (let (($x160 (=> $x227 $x20)))
 (not $x160))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32))
(assert
 (let (($x84 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x68 (ite $x84 (_ bv1 32) (_ bv0 32))))
 (let (($x159 (bvuge ?x68 (_ bv1 32))))
 (let (($x57 (= ?x68 (_ bv0 32))))
 (let (($x12 (or $x57 $x159)))
 (let (($x139 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x204 (ite $x139 (_ bv1 32) (_ bv0 32))))
 (let (($x118 (bvuge ?x204 (_ bv1 32))))
 (let (($x67 (and $x118 $x12)))
 (let (($x128 (= ?x204 (_ bv0 32))))
 (let (($x22 (or $x128 $x67)))
 (let (($x31 (or false $x22)))
 (let (($x9 (= $x31 true)))
 (let (($x20 (= $x9 true)))
 (let ((?x70 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let (($x217 (= ?x70 input.spec-%tmpvar-4.L2%10%d.2)))
 (let (($x224 (=> $x159 $x217)))
 (let (($x216 (bvuge input.spec-%tmpvar-4.L2%10%d.0 (_ bv1 32))))
 (let (($x23 (= $x159 $x216)))
 (let (($x43 (= false false)))
 (let (($x211 (=> $x57 $x43)))
 (let (($x218 (= input.spec-%tmpvar-4.L2%10%d.0 (_ bv0 32))))
 (let (($x18 (= $x57 $x218)))
 (let (($x219 (and (and (and $x18 $x211) $x23) $x224)))
 (let (($x78 (= $x219 true)))
 (let ((?x83 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let (($x203 (= ?x83 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x207 (=> $x118 $x203)))
 (let (($x129 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x116 (= $x118 $x129)))
 (let (($x131 (and (and (= $x128 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))) (=> $x128 $x43)) $x116)))
 (let (($x96 (and $x131 $x207)))
 (let (($x134 (= $x96 true)))
 (let (($x126 (forall ((input.ind-%var204X (_ BitVec 32)) )(let ((?x248 (bvadd (bvmul input.ind-%var204X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x251 (concat (select input.dst.llvm-mem (bvadd ?x248 (_ bv1 32))) (select input.dst.llvm-mem ?x248))))
 (let ((?x110 (concat (select input.dst.llvm-mem (bvadd ?x248 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x248 (_ bv2 32))) ?x251))))
 (let ((?x64 (input.spec-%var-x-0.1.1 input.ind-%var204X)))
 (let (($x34 (input.spec-%var-x-0.0.1 input.ind-%var204X)))
 (=> $x34 (= ?x64 ?x110))))))))
 ))
 (let (($x161 (forall ((input.ind-%var203X (_ BitVec 32)) )(let (($x34 (input.spec-%var-x-0.0.1 input.ind-%var203X)))
 (= $x34 (and (bvsle (_ bv0 32) input.ind-%var203X) (bvslt input.ind-%var203X (_ bv10 32))))))
 ))
 (let (($x130 (and $x161 $x126)))
 (let (($x202 (= $x130 true)))
 (let ((?x26 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x127 (concat ?x113 (concat ?x91 (concat ?x53 ?x26)))))
 (let (($x54 (= ?x127 input.dst.llvm-%x)))
 (let (($x81 (= $x54 true)))
 (let (($x144 (= $x81 true)))
 (let ((?x194 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x195 (= (_ bv0 32) ?x194)))
 (let ((?x158 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x191 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x158)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (and $x77 $x191)))
 (let (($x66 (and $x38 $x195)))
 (let (($x154 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x157 (and $x154 $x66)))
 (let (($x146 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x165 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x15 $x146)))))))
 (let (($x175 (and $x165 $x157)))
 (let (($x197 (= $x175 true)))
 (let (($x196 (= $x197 true)))
 (let (($x51 (= $x196 true)))
 (let (($x189 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x152 (and true $x189)))
 (let ((?x97 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let (($x114 (= (bvand ?x97 (_ bv4294967292 32)) ?x97)))
 (let (($x108 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x97 (bvsub ?x97 (_ bv4 32))) (bvult ?x97 (bvsub ?x97 (_ bv4 32))))))
 (let (($x95 (and true $x108)))
 (let (($x151 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x153 (and (and (and $x151 $x95) $x114) $x152)))
 (let (($x199 (and $x151 $x153)))
 (let (($x149 (= $x199 true)))
 (let (($x150 (= $x149 true)))
 (let (($x198 (= $x150 true)))
 (let (($x200 (and $x198 $x51)))
 (let (($x228 (and $x200 $x144)))
 (let (($x156 (and $x228 $x202)))
 (let (($x5 (and $x156 $x134)))
 (let (($x223 (and $x5 $x78)))
 (let (($x122 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x225 (and $x122 $x223)))
 (let (($x103 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%d)))
 (let (($x220 (and $x103 $x225)))
 (let (($x101 (= ?x83 input.spec-%var-x0-0.L2%10%d)))
 (let (($x222 (and $x101 $x220)))
 (let (($x92 (= (_ bv12 32) input.spec-%tmpvar-5.L2%17%bbentry)))
 (let (($x230 (and $x92 $x222)))
 (let (($x142 (and $x43 $x230)))
 (let ((?x82 (bvadd ?x83 ?x70)))
 (let (($x89 (= ?x82 input.spec-%tmpvar-6.L2%17%bbentry)))
 (let (($x210 (and $x89 $x142)))
 (let (($x79 (= ?x70 input.spec-%var-x1-0.L2%17%bbentry)))
 (let (($x119 (and $x79 $x210)))
 (let (($x62 (= (_ bv45 32) input.spec-%tmpvar-2.L2%18%bbentry)))
 (let (($x226 (and $x62 $x119)))
 (let (($x215 (and $x43 $x226)))
 (let (($x41 (bvugt ?x97 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x87 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x97 (_ bv3 32)))))
 (let (($x72 (=> (bvule ?x97 (bvsub (bvadd ?x97 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x87 $x41)))))))
 (let (($x21 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%x (_ bv3 32)))))
 (let (($x50 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x36 $x21)))))))
 (let (($x35 (and $x50 $x72)))
 (let (($x227 (and $x35 $x215)))
 (let (($x160 (=> $x227 $x20)))
 (not $x160))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676054/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x166 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x181 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x166)))
 (let ((?x177 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x181)))
 (let ((?x74 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv1 32)))))
 (let ((?x231 (concat ?x74 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%x)))))
 (let ((?x164 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv2 32)))))
 (let ((?x232 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let ((?x41 (bvadd ?x232 (_ bv3 32))))
 (let ((?x183 (concat (select input.dst.llvm-mem ?x41) (concat ?x164 ?x231))))
 (let ((?x173 (bvadd ?x183 ?x177)))
 (let ((?x88 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let ((?x92 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let ((?x106 (bvadd ?x92 ?x88)))
 (let (($x187 (= ?x106 ?x173)))
 (let (($x171 (= $x187 true)))
 (let (($x184 (= $x171 true)))
 (let (($x172 (= ?x88 input.spec-%tmpvar-4.L2%10%d.2)))
 (let (($x114 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x145 (ite $x114 (_ bv1 32) (_ bv0 32))))
 (let (($x121 (bvuge ?x145 (_ bv1 32))))
 (let (($x242 (=> $x121 $x172)))
 (let (($x234 (bvuge input.spec-%tmpvar-4.L2%10%d.0 (_ bv1 32))))
 (let (($x93 (= $x121 $x234)))
 (let (($x52 (= false false)))
 (let (($x14 (= ?x145 (_ bv0 32))))
 (let (($x238 (=> $x14 $x52)))
 (let (($x201 (= input.spec-%tmpvar-4.L2%10%d.0 (_ bv0 32))))
 (let (($x190 (= $x14 $x201)))
 (let (($x241 (and (and (and $x190 $x238) $x93) $x242)))
 (let (($x80 (= $x241 true)))
 (let (($x22 (= ?x92 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x124 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x111 (ite $x124 (_ bv1 32) (_ bv0 32))))
 (let (($x109 (bvuge ?x111 (_ bv1 32))))
 (let (($x31 (=> $x109 $x22)))
 (let (($x227 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x12 (= $x109 $x227)))
 (let (($x142 (= ?x111 (_ bv0 32))))
 (let (($x215 (=> $x142 $x52)))
 (let (($x119 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x226 (= $x142 $x119)))
 (let (($x160 (and (and (and $x226 $x215) $x12) $x31)))
 (let (($x212 (= $x160 true)))
 (let (($x225 (forall ((input.ind-%var226X (_ BitVec 32)) )(let ((?x18 (bvadd (bvmul input.ind-%var226X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x216 (concat (select input.dst.llvm-mem (bvadd ?x18 (_ bv1 32))) (select input.dst.llvm-mem ?x18))))
 (let ((?x219 (concat (select input.dst.llvm-mem (bvadd ?x18 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x18 (_ bv2 32))) ?x216))))
 (let ((?x82 (input.spec-%var-x-0.1.1 input.ind-%var226X)))
 (let (($x108 (input.spec-%var-x-0.0.1 input.ind-%var226X)))
 (=> $x108 (= ?x82 ?x219))))))))
 ))
 (let (($x133 (forall ((input.ind-%var225X (_ BitVec 32)) )(let (($x108 (input.spec-%var-x-0.0.1 input.ind-%var225X)))
 (= $x108 (and (bvsle (_ bv0 32) input.ind-%var225X) (bvslt input.ind-%var225X (_ bv10 32))))))
 ))
 (let (($x220 (and $x133 $x225)))
 (let (($x222 (= $x220 true)))
 (let ((?x81 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x228 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x186 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x167 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x161 (concat ?x167 (concat ?x186 (concat ?x228 ?x81)))))
 (let (($x249 (= ?x161 input.dst.llvm-%x)))
 (let (($x251 (= $x249 true)))
 (let (($x47 (= $x251 true)))
 (let (($x64 (= input.dst.llvm-%x ?x161)))
 (let ((?x53 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x26 (= (_ bv0 32) ?x53)))
 (let ((?x69 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x91 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x69)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x205 (and $x137 $x91)))
 (let (($x16 (and $x205 $x26)))
 (let (($x194 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x120 (and $x194 $x16)))
 (let (($x197 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x175 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x113 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x175 $x197)))))))
 (let (($x147 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x169 (and true $x147)))
 (let (($x155 (= (bvand ?x232 (_ bv4294967292 32)) ?x232)))
 (let (($x150 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x232 (bvsub ?x232 (_ bv4 32))) (bvult ?x232 (bvsub ?x232 (_ bv4 32))))))
 (let (($x198 (and true $x150)))
 (let (($x189 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x165 (and (and (and $x189 $x198) $x155) $x169)))
 (let (($x143 (and $x189 $x165)))
 (let (($x19 (and (and (and (and $x143 $x113) true) $x120) $x64)))
 (let (($x252 (= $x19 true)))
 (let (($x253 (= $x252 true)))
 (let (($x250 (= $x253 true)))
 (let (($x154 (= $x143 true)))
 (let (($x77 (= $x154 true)))
 (let (($x158 (= $x77 true)))
 (let (($x28 (and $x158 $x250)))
 (let (($x110 (and $x28 $x47)))
 (let (($x230 (and $x110 $x222)))
 (let (($x27 (and $x230 $x212)))
 (let (($x105 (and $x27 $x80)))
 (let (($x117 (and $x109 $x121)))
 (let (($x247 (and $x117 $x105)))
 (let (($x107 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x240 (and $x107 $x247)))
 (let (($x94 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%d)))
 (let (($x239 (and $x94 $x240)))
 (let (($x99 (= ?x92 input.spec-%var-x0-0.L2%10%d)))
 (let (($x244 (and $x99 $x239)))
 (let (($x122 (= (_ bv12 32) input.spec-%tmpvar-5.L2%17%bbentry)))
 (let (($x100 (and $x122 $x244)))
 (let (($x243 (and $x52 $x100)))
 (let (($x104 (= ?x106 input.spec-%tmpvar-6.L2%17%bbentry)))
 (let (($x37 (and $x104 $x243)))
 (let (($x86 (= ?x88 input.spec-%var-x1-0.L2%17%bbentry)))
 (let (($x233 (and $x86 $x37)))
 (let (($x73 (= (_ bv45 32) input.spec-%tmpvar-2.L2%18%bbentry)))
 (let (($x188 (and $x73 $x233)))
 (let (($x24 (and $x52 $x188)))
 (let (($x76 (bvugt ?x232 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x163 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x41)))
 (let (($x61 (=> (bvule ?x232 (bvsub (bvadd ?x232 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x163 $x76)))))))
 (let (($x56 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x21 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x21)))
 (let (($x39 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x30 $x56)))))))
 (let (($x7 (and $x39 $x61)))
 (let (($x29 (and $x7 $x24)))
 (let (($x214 (=> $x29 $x184)))
 (not $x214))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x166 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x181 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x166)))
 (let ((?x177 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x181)))
 (let ((?x74 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv1 32)))))
 (let ((?x231 (concat ?x74 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%x)))))
 (let ((?x164 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv2 32)))))
 (let ((?x232 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let ((?x41 (bvadd ?x232 (_ bv3 32))))
 (let ((?x183 (concat (select input.dst.llvm-mem ?x41) (concat ?x164 ?x231))))
 (let ((?x173 (bvadd ?x183 ?x177)))
 (let ((?x88 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let ((?x92 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let ((?x106 (bvadd ?x92 ?x88)))
 (let (($x187 (= ?x106 ?x173)))
 (let (($x171 (= $x187 true)))
 (let (($x184 (= $x171 true)))
 (let (($x172 (= ?x88 input.spec-%tmpvar-4.L2%10%d.2)))
 (let (($x114 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x145 (ite $x114 (_ bv1 32) (_ bv0 32))))
 (let (($x121 (bvuge ?x145 (_ bv1 32))))
 (let (($x242 (=> $x121 $x172)))
 (let (($x234 (bvuge input.spec-%tmpvar-4.L2%10%d.0 (_ bv1 32))))
 (let (($x93 (= $x121 $x234)))
 (let (($x52 (= false false)))
 (let (($x14 (= ?x145 (_ bv0 32))))
 (let (($x238 (=> $x14 $x52)))
 (let (($x201 (= input.spec-%tmpvar-4.L2%10%d.0 (_ bv0 32))))
 (let (($x190 (= $x14 $x201)))
 (let (($x241 (and (and (and $x190 $x238) $x93) $x242)))
 (let (($x80 (= $x241 true)))
 (let (($x22 (= ?x92 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x124 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x111 (ite $x124 (_ bv1 32) (_ bv0 32))))
 (let (($x109 (bvuge ?x111 (_ bv1 32))))
 (let (($x31 (=> $x109 $x22)))
 (let (($x227 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x12 (= $x109 $x227)))
 (let (($x142 (= ?x111 (_ bv0 32))))
 (let (($x215 (=> $x142 $x52)))
 (let (($x119 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x226 (= $x142 $x119)))
 (let (($x160 (and (and (and $x226 $x215) $x12) $x31)))
 (let (($x212 (= $x160 true)))
 (let (($x225 (forall ((input.ind-%var226X (_ BitVec 32)) )(let ((?x18 (bvadd (bvmul input.ind-%var226X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x216 (concat (select input.dst.llvm-mem (bvadd ?x18 (_ bv1 32))) (select input.dst.llvm-mem ?x18))))
 (let ((?x219 (concat (select input.dst.llvm-mem (bvadd ?x18 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x18 (_ bv2 32))) ?x216))))
 (let ((?x82 (input.spec-%var-x-0.1.1 input.ind-%var226X)))
 (let (($x108 (input.spec-%var-x-0.0.1 input.ind-%var226X)))
 (=> $x108 (= ?x82 ?x219))))))))
 ))
 (let (($x133 (forall ((input.ind-%var225X (_ BitVec 32)) )(let (($x108 (input.spec-%var-x-0.0.1 input.ind-%var225X)))
 (= $x108 (and (bvsle (_ bv0 32) input.ind-%var225X) (bvslt input.ind-%var225X (_ bv10 32))))))
 ))
 (let (($x220 (and $x133 $x225)))
 (let (($x222 (= $x220 true)))
 (let ((?x81 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x228 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x186 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x167 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x161 (concat ?x167 (concat ?x186 (concat ?x228 ?x81)))))
 (let (($x249 (= ?x161 input.dst.llvm-%x)))
 (let (($x251 (= $x249 true)))
 (let (($x47 (= $x251 true)))
 (let (($x64 (= input.dst.llvm-%x ?x161)))
 (let ((?x53 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x26 (= (_ bv0 32) ?x53)))
 (let ((?x69 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x91 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x69)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x205 (and $x137 $x91)))
 (let (($x16 (and $x205 $x26)))
 (let (($x194 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x120 (and $x194 $x16)))
 (let (($x197 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x175 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x113 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x175 $x197)))))))
 (let (($x147 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x169 (and true $x147)))
 (let (($x155 (= (bvand ?x232 (_ bv4294967292 32)) ?x232)))
 (let (($x150 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x232 (bvsub ?x232 (_ bv4 32))) (bvult ?x232 (bvsub ?x232 (_ bv4 32))))))
 (let (($x198 (and true $x150)))
 (let (($x189 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x165 (and (and (and $x189 $x198) $x155) $x169)))
 (let (($x143 (and $x189 $x165)))
 (let (($x19 (and (and (and (and $x143 $x113) true) $x120) $x64)))
 (let (($x252 (= $x19 true)))
 (let (($x253 (= $x252 true)))
 (let (($x250 (= $x253 true)))
 (let (($x154 (= $x143 true)))
 (let (($x77 (= $x154 true)))
 (let (($x158 (= $x77 true)))
 (let (($x28 (and $x158 $x250)))
 (let (($x110 (and $x28 $x47)))
 (let (($x230 (and $x110 $x222)))
 (let (($x27 (and $x230 $x212)))
 (let (($x105 (and $x27 $x80)))
 (let (($x117 (and $x109 $x121)))
 (let (($x247 (and $x117 $x105)))
 (let (($x107 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x240 (and $x107 $x247)))
 (let (($x94 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%d)))
 (let (($x239 (and $x94 $x240)))
 (let (($x99 (= ?x92 input.spec-%var-x0-0.L2%10%d)))
 (let (($x244 (and $x99 $x239)))
 (let (($x122 (= (_ bv12 32) input.spec-%tmpvar-5.L2%17%bbentry)))
 (let (($x100 (and $x122 $x244)))
 (let (($x243 (and $x52 $x100)))
 (let (($x104 (= ?x106 input.spec-%tmpvar-6.L2%17%bbentry)))
 (let (($x37 (and $x104 $x243)))
 (let (($x86 (= ?x88 input.spec-%var-x1-0.L2%17%bbentry)))
 (let (($x233 (and $x86 $x37)))
 (let (($x73 (= (_ bv45 32) input.spec-%tmpvar-2.L2%18%bbentry)))
 (let (($x188 (and $x73 $x233)))
 (let (($x24 (and $x52 $x188)))
 (let (($x76 (bvugt ?x232 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x163 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x41)))
 (let (($x61 (=> (bvule ?x232 (bvsub (bvadd ?x232 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x163 $x76)))))))
 (let (($x56 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x21 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x21)))
 (let (($x39 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x30 $x56)))))))
 (let (($x7 (and $x39 $x61)))
 (let (($x29 (and $x7 $x24)))
 (let (($x214 (=> $x29 $x184)))
 (not $x214))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676054/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x135 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x134 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x135)))
 (let ((?x206 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x134)))
 (let ((?x136 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv1 32)))))
 (let ((?x126 (concat ?x136 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%x)))))
 (let ((?x118 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv2 32)))))
 (let ((?x95 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let ((?x76 (bvadd ?x95 (_ bv3 32))))
 (let ((?x84 (concat (select input.dst.llvm-mem ?x76) (concat ?x118 ?x126))))
 (let ((?x156 (bvadd ?x84 ?x206)))
 (let (($x139 (= (_ bv12 32) ?x156)))
 (let (($x57 (= $x139 true)))
 (let (($x112 (= $x57 true)))
 (let ((?x86 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let (($x182 (= ?x86 input.spec-%tmpvar-4.L2%10%d.2)))
 (let (($x153 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x152 (ite $x153 (_ bv1 32) (_ bv0 32))))
 (let (($x231 (bvuge ?x152 (_ bv1 32))))
 (let (($x180 (=> $x231 $x182)))
 (let (($x178 (bvuge input.spec-%tmpvar-4.L2%10%d.0 (_ bv1 32))))
 (let (($x183 (= $x231 $x178)))
 (let (($x63 (= false false)))
 (let (($x199 (= ?x152 (_ bv0 32))))
 (let (($x246 (=> $x199 $x63)))
 (let (($x42 (= input.spec-%tmpvar-4.L2%10%d.0 (_ bv0 32))))
 (let (($x74 (= $x199 $x42)))
 (let (($x179 (and (and (and $x74 $x246) $x183) $x180)))
 (let (($x166 (= $x179 true)))
 (let ((?x102 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let (($x37 (= ?x102 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x121 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x193 (ite $x121 (_ bv1 32) (_ bv0 32))))
 (let (($x189 (bvuge ?x193 (_ bv1 32))))
 (let (($x233 (=> $x189 $x37)))
 (let (($x244 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x100 (= $x189 $x244)))
 (let (($x80 (= ?x193 (_ bv0 32))))
 (let (($x239 (=> $x80 $x63)))
 (let (($x247 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x240 (= $x80 $x247)))
 (let (($x29 (and (and (and $x240 $x239) $x100) $x233)))
 (let (($x40 (= $x29 true)))
 (let (($x60 (forall ((input.ind-%var246X (_ BitVec 32)) )(let ((?x31 (bvadd (bvmul input.ind-%var246X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x14 (concat (select input.dst.llvm-mem (bvadd ?x31 (_ bv1 32))) (select input.dst.llvm-mem ?x31))))
 (let ((?x234 (concat (select input.dst.llvm-mem (bvadd ?x31 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x31 (_ bv2 32))) ?x14))))
 (let ((?x92 (input.spec-%var-x-0.1.1 input.ind-%var246X)))
 (let (($x117 (input.spec-%var-x-0.0.1 input.ind-%var246X)))
 (=> $x117 (= ?x92 ?x234))))))))
 ))
 (let (($x219 (forall ((input.ind-%var245X (_ BitVec 32)) )(let (($x117 (input.spec-%var-x-0.0.1 input.ind-%var245X)))
 (= $x117 (and (bvsle (_ bv0 32) input.ind-%var245X) (bvslt input.ind-%var245X (_ bv10 32))))))
 ))
 (let (($x172 (and $x219 $x60)))
 (let (($x242 (= $x172 true)))
 (let ((?x228 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x17 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x250 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x28 (concat ?x250 (concat ?x19 (concat ?x17 ?x228)))))
 (let (($x132 (= ?x28 input.dst.llvm-%x)))
 (let (($x138 (= $x132 true)))
 (let (($x133 (= $x138 true)))
 (let (($x249 (= input.dst.llvm-%x ?x28)))
 (let ((?x13 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x167 (= (_ bv0 32) ?x13)))
 (let ((?x120 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x75 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x120)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x127 (and $x16 $x75)))
 (let (($x34 (and $x127 $x167)))
 (let (($x174 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x236 (and $x174 $x34)))
 (let (($x194 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x26 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x38 $x194)))))))
 (let (($x77 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x158 (and true $x77)))
 (let (($x147 (= (bvand ?x95 (_ bv4294967292 32)) ?x95)))
 (let (($x168 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x95 (bvsub ?x95 (_ bv4 32))) (bvult ?x95 (bvsub ?x95 (_ bv4 32))))))
 (let (($x15 (and true $x168)))
 (let (($x170 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x141 (and (and (and $x170 $x15) $x147) $x158)))
 (let (($x157 (and $x170 $x141)))
 (let (($x83 (and (and (and (and $x157 $x26) true) $x236) $x249)))
 (let (($x108 (= $x83 true)))
 (let (($x128 (= $x108 true)))
 (let (($x130 (= $x128 true)))
 (let (($x175 (= $x157 true)))
 (let (($x197 (= $x175 true)))
 (let (($x196 (= $x197 true)))
 (let (($x204 (and $x196 $x130)))
 (let (($x82 (and $x204 $x133)))
 (let (($x241 (and $x82 $x242)))
 (let (($x185 (and $x241 $x40)))
 (let (($x181 (and $x185 $x166)))
 (let (($x149 (and $x189 $x199)))
 (let (($x177 (and $x149 $x181)))
 (let (($x145 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x173 (and $x145 $x177)))
 (let (($x109 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%d)))
 (let (($x187 (and $x109 $x173)))
 (let (($x124 (= ?x102 input.spec-%var-x0-0.L2%10%d)))
 (let (($x171 (and $x124 $x187)))
 (let (($x123 (= (_ bv12 32) input.spec-%tmpvar-5.L2%17%bbentry)))
 (let (($x184 (and $x123 $x171)))
 (let (($x214 (and $x63 $x184)))
 (let ((?x122 (bvadd ?x102 ?x86)))
 (let (($x99 (= ?x122 input.spec-%tmpvar-6.L2%17%bbentry)))
 (let (($x10 (and $x99 $x214)))
 (let (($x104 (= ?x86 input.spec-%var-x1-0.L2%17%bbentry)))
 (let (($x85 (and $x104 $x10)))
 (let (($x89 (= (_ bv45 32) input.spec-%tmpvar-2.L2%18%bbentry)))
 (let (($x58 (and $x89 $x85)))
 (let (($x45 (and $x63 $x58)))
 (let (($x48 (bvugt ?x95 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x76)))
 (let (($x70 (=> (bvule ?x95 (bvsub (bvadd ?x95 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x59 $x48)))))))
 (let (($x65 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x56 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x56)))
 (let (($x87 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x11 $x65)))))))
 (let (($x25 (and $x87 $x70)))
 (let (($x191 (and $x25 $x45)))
 (let (($x44 (=> $x191 $x112)))
 (not $x44))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x135 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x134 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x135)))
 (let ((?x206 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x134)))
 (let ((?x136 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv1 32)))))
 (let ((?x126 (concat ?x136 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%x)))))
 (let ((?x118 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv2 32)))))
 (let ((?x95 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let ((?x76 (bvadd ?x95 (_ bv3 32))))
 (let ((?x84 (concat (select input.dst.llvm-mem ?x76) (concat ?x118 ?x126))))
 (let ((?x156 (bvadd ?x84 ?x206)))
 (let (($x139 (= (_ bv12 32) ?x156)))
 (let (($x57 (= $x139 true)))
 (let (($x112 (= $x57 true)))
 (let ((?x86 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let (($x182 (= ?x86 input.spec-%tmpvar-4.L2%10%d.2)))
 (let (($x153 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x152 (ite $x153 (_ bv1 32) (_ bv0 32))))
 (let (($x231 (bvuge ?x152 (_ bv1 32))))
 (let (($x180 (=> $x231 $x182)))
 (let (($x178 (bvuge input.spec-%tmpvar-4.L2%10%d.0 (_ bv1 32))))
 (let (($x183 (= $x231 $x178)))
 (let (($x63 (= false false)))
 (let (($x199 (= ?x152 (_ bv0 32))))
 (let (($x246 (=> $x199 $x63)))
 (let (($x42 (= input.spec-%tmpvar-4.L2%10%d.0 (_ bv0 32))))
 (let (($x74 (= $x199 $x42)))
 (let (($x179 (and (and (and $x74 $x246) $x183) $x180)))
 (let (($x166 (= $x179 true)))
 (let ((?x102 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let (($x37 (= ?x102 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x121 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x193 (ite $x121 (_ bv1 32) (_ bv0 32))))
 (let (($x189 (bvuge ?x193 (_ bv1 32))))
 (let (($x233 (=> $x189 $x37)))
 (let (($x244 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x100 (= $x189 $x244)))
 (let (($x80 (= ?x193 (_ bv0 32))))
 (let (($x239 (=> $x80 $x63)))
 (let (($x247 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x240 (= $x80 $x247)))
 (let (($x29 (and (and (and $x240 $x239) $x100) $x233)))
 (let (($x40 (= $x29 true)))
 (let (($x60 (forall ((input.ind-%var246X (_ BitVec 32)) )(let ((?x31 (bvadd (bvmul input.ind-%var246X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x14 (concat (select input.dst.llvm-mem (bvadd ?x31 (_ bv1 32))) (select input.dst.llvm-mem ?x31))))
 (let ((?x234 (concat (select input.dst.llvm-mem (bvadd ?x31 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x31 (_ bv2 32))) ?x14))))
 (let ((?x92 (input.spec-%var-x-0.1.1 input.ind-%var246X)))
 (let (($x117 (input.spec-%var-x-0.0.1 input.ind-%var246X)))
 (=> $x117 (= ?x92 ?x234))))))))
 ))
 (let (($x219 (forall ((input.ind-%var245X (_ BitVec 32)) )(let (($x117 (input.spec-%var-x-0.0.1 input.ind-%var245X)))
 (= $x117 (and (bvsle (_ bv0 32) input.ind-%var245X) (bvslt input.ind-%var245X (_ bv10 32))))))
 ))
 (let (($x172 (and $x219 $x60)))
 (let (($x242 (= $x172 true)))
 (let ((?x228 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x17 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x250 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x28 (concat ?x250 (concat ?x19 (concat ?x17 ?x228)))))
 (let (($x132 (= ?x28 input.dst.llvm-%x)))
 (let (($x138 (= $x132 true)))
 (let (($x133 (= $x138 true)))
 (let (($x249 (= input.dst.llvm-%x ?x28)))
 (let ((?x13 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x167 (= (_ bv0 32) ?x13)))
 (let ((?x120 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x75 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x120)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x127 (and $x16 $x75)))
 (let (($x34 (and $x127 $x167)))
 (let (($x174 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x236 (and $x174 $x34)))
 (let (($x194 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x26 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x38 $x194)))))))
 (let (($x77 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x158 (and true $x77)))
 (let (($x147 (= (bvand ?x95 (_ bv4294967292 32)) ?x95)))
 (let (($x168 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x95 (bvsub ?x95 (_ bv4 32))) (bvult ?x95 (bvsub ?x95 (_ bv4 32))))))
 (let (($x15 (and true $x168)))
 (let (($x170 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x141 (and (and (and $x170 $x15) $x147) $x158)))
 (let (($x157 (and $x170 $x141)))
 (let (($x83 (and (and (and (and $x157 $x26) true) $x236) $x249)))
 (let (($x108 (= $x83 true)))
 (let (($x128 (= $x108 true)))
 (let (($x130 (= $x128 true)))
 (let (($x175 (= $x157 true)))
 (let (($x197 (= $x175 true)))
 (let (($x196 (= $x197 true)))
 (let (($x204 (and $x196 $x130)))
 (let (($x82 (and $x204 $x133)))
 (let (($x241 (and $x82 $x242)))
 (let (($x185 (and $x241 $x40)))
 (let (($x181 (and $x185 $x166)))
 (let (($x149 (and $x189 $x199)))
 (let (($x177 (and $x149 $x181)))
 (let (($x145 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x173 (and $x145 $x177)))
 (let (($x109 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%d)))
 (let (($x187 (and $x109 $x173)))
 (let (($x124 (= ?x102 input.spec-%var-x0-0.L2%10%d)))
 (let (($x171 (and $x124 $x187)))
 (let (($x123 (= (_ bv12 32) input.spec-%tmpvar-5.L2%17%bbentry)))
 (let (($x184 (and $x123 $x171)))
 (let (($x214 (and $x63 $x184)))
 (let ((?x122 (bvadd ?x102 ?x86)))
 (let (($x99 (= ?x122 input.spec-%tmpvar-6.L2%17%bbentry)))
 (let (($x10 (and $x99 $x214)))
 (let (($x104 (= ?x86 input.spec-%var-x1-0.L2%17%bbentry)))
 (let (($x85 (and $x104 $x10)))
 (let (($x89 (= (_ bv45 32) input.spec-%tmpvar-2.L2%18%bbentry)))
 (let (($x58 (and $x89 $x85)))
 (let (($x45 (and $x63 $x58)))
 (let (($x48 (bvugt ?x95 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x76)))
 (let (($x70 (=> (bvule ?x95 (bvsub (bvadd ?x95 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x59 $x48)))))))
 (let (($x65 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x56 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x56)))
 (let (($x87 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x11 $x65)))))))
 (let (($x25 (and $x87 $x70)))
 (let (($x191 (and $x25 $x45)))
 (let (($x44 (=> $x191 $x112)))
 (not $x44))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 149 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676054/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x142 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x119 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x142)))
 (let ((?x12 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x119)))
 (let ((?x225 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv1 32)))))
 (let ((?x218 (concat ?x225 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%x)))))
 (let ((?x23 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv2 32)))))
 (let ((?x125 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let ((?x48 (bvadd ?x125 (_ bv3 32))))
 (let ((?x9 (concat (select input.dst.llvm-mem ?x48) (concat ?x23 ?x218))))
 (let ((?x18 (bvadd ?x9 ?x12)))
 (let (($x221 (= (_ bv45 32) ?x18)))
 (let (($x229 (= $x221 true)))
 (let (($x20 (= $x229 true)))
 (let ((?x104 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let (($x68 (= ?x104 input.spec-%tmpvar-4.L2%10%d.2)))
 (let (($x45 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x191 (ite $x45 (_ bv1 32) (_ bv0 32))))
 (let (($x54 (bvuge ?x191 (_ bv1 32))))
 (let (($x116 (=> $x54 $x68)))
 (let (($x126 (bvuge input.spec-%tmpvar-4.L2%10%d.0 (_ bv1 32))))
 (let (($x129 (= $x54 $x126)))
 (let (($x62 (= false false)))
 (let (($x5 (= ?x191 (_ bv0 32))))
 (let (($x136 (=> $x5 $x62)))
 (let (($x118 (= input.spec-%tmpvar-4.L2%10%d.0 (_ bv0 32))))
 (let (($x208 (= $x5 $x118)))
 (let (($x131 (and (and (and $x208 $x136) $x129) $x116)))
 (let (($x207 (= $x131 true)))
 (let ((?x94 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let (($x187 (= ?x94 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x199 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x198 (ite $x199 (_ bv1 32) (_ bv0 32))))
 (let (($x166 (bvuge ?x198 (_ bv1 32))))
 (let (($x171 (=> $x166 $x187)))
 (let (($x181 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x177 (= $x166 $x181)))
 (let (($x170 (= ?x198 (_ bv0 32))))
 (let (($x179 (=> $x170 $x62)))
 (let (($x182 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x180 (= $x170 $x182)))
 (let (($x10 (and (and (and $x180 $x179) $x177) $x171)))
 (let (($x85 (= $x10 true)))
 (let (($x231 (forall ((input.ind-%var266X (_ BitVec 32)) )(let ((?x100 (bvadd (bvmul input.ind-%var266X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x233 (concat (select input.dst.llvm-mem (bvadd ?x100 (_ bv1 32))) (select input.dst.llvm-mem ?x100))))
 (let ((?x74 (concat (select input.dst.llvm-mem (bvadd ?x100 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x100 (_ bv2 32))) ?x233))))
 (let ((?x102 (input.spec-%var-x-0.1.1 input.ind-%var266X)))
 (let (($x149 (input.spec-%var-x-0.0.1 input.ind-%var266X)))
 (=> $x149 (= ?x102 ?x74))))))))
 ))
 (let (($x27 (forall ((input.ind-%var265X (_ BitVec 32)) )(let (($x149 (input.spec-%var-x-0.0.1 input.ind-%var265X)))
 (= $x149 (and (bvsle (_ bv0 32) input.ind-%var265X) (bvslt input.ind-%var265X (_ bv10 32))))))
 ))
 (let (($x178 (and $x27 $x231)))
 (let (($x183 (= $x178 true)))
 (let ((?x161 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x235 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x249 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x83 (concat ?x249 (concat ?x235 (concat ?x19 ?x161)))))
 (let (($x117 (= ?x83 input.dst.llvm-%x)))
 (let (($x211 (= $x117 true)))
 (let (($x224 (= $x211 true)))
 (let (($x108 (= input.dst.llvm-%x ?x83)))
 (let ((?x34 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x236 (= (_ bv0 32) ?x34)))
 (let ((?x127 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x13 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x127)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x167 (and $x75 $x13)))
 (let (($x110 (and $x167 $x236)))
 (let (($x194 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x186 (and $x194 $x110)))
 (let (($x26 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x205 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x120 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x205 $x26)))))))
 (let (($x158 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x141 (and true $x158)))
 (let (($x165 (= (bvand ?x125 (_ bv4294967292 32)) ?x125)))
 (let (($x146 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x125 (bvsub ?x125 (_ bv4 32))) (bvult ?x125 (bvsub ?x125 (_ bv4 32))))))
 (let (($x147 (and true $x146)))
 (let (($x162 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x197 (and (and (and $x162 $x147) $x165) $x141)))
 (let (($x196 (and $x162 $x197)))
 (let (($x132 (and (and (and (and $x196 $x120) true) $x186) $x108)))
 (let (($x138 (= $x132 true)))
 (let (($x133 (= $x138 true)))
 (let (($x82 (= $x133 true)))
 (let (($x113 (= $x196 true)))
 (let (($x254 (= $x113 true)))
 (let (($x53 (= $x254 true)))
 (let (($x90 (and $x53 $x82)))
 (let (($x159 (and $x90 $x224)))
 (let (($x192 (and $x159 $x183)))
 (let (($x58 (and $x192 $x85)))
 (let (($x135 (and $x58 $x207)))
 (let (($x134 (and $x170 $x135)))
 (let (($x152 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x206 (and $x152 $x134)))
 (let (($x189 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%d)))
 (let (($x156 (and $x189 $x206)))
 (let (($x121 (= ?x94 input.spec-%var-x0-0.L2%10%d)))
 (let (($x139 (and $x121 $x156)))
 (let (($x114 (= (_ bv12 32) input.spec-%tmpvar-5.L2%17%bbentry)))
 (let (($x57 (and $x114 $x139)))
 (let (($x112 (and $x62 $x57)))
 (let ((?x123 (bvadd ?x94 ?x104)))
 (let (($x124 (= ?x123 input.spec-%tmpvar-6.L2%17%bbentry)))
 (let (($x44 (and $x124 $x112)))
 (let (($x99 (= ?x104 input.spec-%var-x1-0.L2%17%bbentry)))
 (let (($x79 (and $x99 $x44)))
 (let (($x101 (= (_ bv45 32) input.spec-%tmpvar-2.L2%18%bbentry)))
 (let (($x106 (and $x101 $x79)))
 (let (($x115 (and $x62 $x106)))
 (let (($x35 (bvugt ?x125 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x48)))
 (let (($x88 (=> (bvule ?x125 (bvsub (bvadd ?x125 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x72 $x35)))))))
 (let (($x97 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x65 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x50 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x65)))
 (let (($x163 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x50 $x97)))))))
 (let (($x71 (and $x163 $x88)))
 (let (($x6 (and $x71 $x115)))
 (let (($x223 (=> $x6 $x20)))
 (not $x223)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x142 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x119 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x142)))
 (let ((?x12 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x119)))
 (let ((?x225 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv1 32)))))
 (let ((?x218 (concat ?x225 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%x)))))
 (let ((?x23 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv2 32)))))
 (let ((?x125 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let ((?x48 (bvadd ?x125 (_ bv3 32))))
 (let ((?x9 (concat (select input.dst.llvm-mem ?x48) (concat ?x23 ?x218))))
 (let ((?x18 (bvadd ?x9 ?x12)))
 (let (($x221 (= (_ bv45 32) ?x18)))
 (let (($x229 (= $x221 true)))
 (let (($x20 (= $x229 true)))
 (let ((?x104 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let (($x68 (= ?x104 input.spec-%tmpvar-4.L2%10%d.2)))
 (let (($x45 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x191 (ite $x45 (_ bv1 32) (_ bv0 32))))
 (let (($x54 (bvuge ?x191 (_ bv1 32))))
 (let (($x116 (=> $x54 $x68)))
 (let (($x126 (bvuge input.spec-%tmpvar-4.L2%10%d.0 (_ bv1 32))))
 (let (($x129 (= $x54 $x126)))
 (let (($x62 (= false false)))
 (let (($x5 (= ?x191 (_ bv0 32))))
 (let (($x136 (=> $x5 $x62)))
 (let (($x118 (= input.spec-%tmpvar-4.L2%10%d.0 (_ bv0 32))))
 (let (($x208 (= $x5 $x118)))
 (let (($x131 (and (and (and $x208 $x136) $x129) $x116)))
 (let (($x207 (= $x131 true)))
 (let ((?x94 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let (($x187 (= ?x94 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x199 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x198 (ite $x199 (_ bv1 32) (_ bv0 32))))
 (let (($x166 (bvuge ?x198 (_ bv1 32))))
 (let (($x171 (=> $x166 $x187)))
 (let (($x181 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x177 (= $x166 $x181)))
 (let (($x170 (= ?x198 (_ bv0 32))))
 (let (($x179 (=> $x170 $x62)))
 (let (($x182 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x180 (= $x170 $x182)))
 (let (($x10 (and (and (and $x180 $x179) $x177) $x171)))
 (let (($x85 (= $x10 true)))
 (let (($x231 (forall ((input.ind-%var266X (_ BitVec 32)) )(let ((?x100 (bvadd (bvmul input.ind-%var266X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x233 (concat (select input.dst.llvm-mem (bvadd ?x100 (_ bv1 32))) (select input.dst.llvm-mem ?x100))))
 (let ((?x74 (concat (select input.dst.llvm-mem (bvadd ?x100 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x100 (_ bv2 32))) ?x233))))
 (let ((?x102 (input.spec-%var-x-0.1.1 input.ind-%var266X)))
 (let (($x149 (input.spec-%var-x-0.0.1 input.ind-%var266X)))
 (=> $x149 (= ?x102 ?x74))))))))
 ))
 (let (($x27 (forall ((input.ind-%var265X (_ BitVec 32)) )(let (($x149 (input.spec-%var-x-0.0.1 input.ind-%var265X)))
 (= $x149 (and (bvsle (_ bv0 32) input.ind-%var265X) (bvslt input.ind-%var265X (_ bv10 32))))))
 ))
 (let (($x178 (and $x27 $x231)))
 (let (($x183 (= $x178 true)))
 (let ((?x161 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x235 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x249 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x83 (concat ?x249 (concat ?x235 (concat ?x19 ?x161)))))
 (let (($x117 (= ?x83 input.dst.llvm-%x)))
 (let (($x211 (= $x117 true)))
 (let (($x224 (= $x211 true)))
 (let (($x108 (= input.dst.llvm-%x ?x83)))
 (let ((?x34 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x236 (= (_ bv0 32) ?x34)))
 (let ((?x127 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x13 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x127)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x167 (and $x75 $x13)))
 (let (($x110 (and $x167 $x236)))
 (let (($x194 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x186 (and $x194 $x110)))
 (let (($x26 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x205 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x120 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x205 $x26)))))))
 (let (($x158 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x141 (and true $x158)))
 (let (($x165 (= (bvand ?x125 (_ bv4294967292 32)) ?x125)))
 (let (($x146 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x125 (bvsub ?x125 (_ bv4 32))) (bvult ?x125 (bvsub ?x125 (_ bv4 32))))))
 (let (($x147 (and true $x146)))
 (let (($x162 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x197 (and (and (and $x162 $x147) $x165) $x141)))
 (let (($x196 (and $x162 $x197)))
 (let (($x132 (and (and (and (and $x196 $x120) true) $x186) $x108)))
 (let (($x138 (= $x132 true)))
 (let (($x133 (= $x138 true)))
 (let (($x82 (= $x133 true)))
 (let (($x113 (= $x196 true)))
 (let (($x254 (= $x113 true)))
 (let (($x53 (= $x254 true)))
 (let (($x90 (and $x53 $x82)))
 (let (($x159 (and $x90 $x224)))
 (let (($x192 (and $x159 $x183)))
 (let (($x58 (and $x192 $x85)))
 (let (($x135 (and $x58 $x207)))
 (let (($x134 (and $x170 $x135)))
 (let (($x152 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x206 (and $x152 $x134)))
 (let (($x189 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%d)))
 (let (($x156 (and $x189 $x206)))
 (let (($x121 (= ?x94 input.spec-%var-x0-0.L2%10%d)))
 (let (($x139 (and $x121 $x156)))
 (let (($x114 (= (_ bv12 32) input.spec-%tmpvar-5.L2%17%bbentry)))
 (let (($x57 (and $x114 $x139)))
 (let (($x112 (and $x62 $x57)))
 (let ((?x123 (bvadd ?x94 ?x104)))
 (let (($x124 (= ?x123 input.spec-%tmpvar-6.L2%17%bbentry)))
 (let (($x44 (and $x124 $x112)))
 (let (($x99 (= ?x104 input.spec-%var-x1-0.L2%17%bbentry)))
 (let (($x79 (and $x99 $x44)))
 (let (($x101 (= (_ bv45 32) input.spec-%tmpvar-2.L2%18%bbentry)))
 (let (($x106 (and $x101 $x79)))
 (let (($x115 (and $x62 $x106)))
 (let (($x35 (bvugt ?x125 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x48)))
 (let (($x88 (=> (bvule ?x125 (bvsub (bvadd ?x125 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x72 $x35)))))))
 (let (($x97 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x65 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x50 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x65)))
 (let (($x163 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x50 $x97)))))))
 (let (($x71 (and $x163 $x88)))
 (let (($x6 (and $x71 $x115)))
 (let (($x223 (=> $x6 $x20)))
 (not $x223)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 148 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676054/query
