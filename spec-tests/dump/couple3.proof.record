==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x10 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x10)))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x13)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x8 $x6)))
 (let (($x19 (and $x9 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x10 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x10)))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x13)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x8 $x6)))
 (let (($x19 (and $x9 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv32771 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460714/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L1%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L1%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%18%bbentry () (_ BitVec 32))
(assert
 (let (($x219 (= true false)))
 (let (($x220 (= $x219 true)))
 (let ((?x195 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x197 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x200 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x203 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x204 (concat ?x203 (concat ?x200 (concat ?x197 ?x195)))))
 (let (($x205 (= ?x204 input.dst.llvm-%x)))
 (let (($x206 (= $x205 true)))
 (let (($x189 (forall ((Lambda3 (_ BitVec 32)) )(let ((?x176 (bvadd (bvmul Lambda3 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x180 (concat (select input.dst.llvm-mem (bvadd ?x176 (_ bv1 32))) (select input.dst.llvm-mem ?x176))))
 (let ((?x186 (concat (select input.dst.llvm-mem (bvadd ?x176 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x176 (_ bv2 32))) ?x180))))
 (let ((?x8 (input.spec-%var-x-0.1.1 Lambda3)))
 (let (($x6 (input.spec-%var-x-0.0.1 Lambda3)))
 (let ((?x142 (ite $x6 (_ bv1 32) (_ bv0 32))))
 (let (($x154 (bvuge ?x142 (_ bv1 32))))
 (=> $x154 (= ?x8 ?x186))))))))))
 ))
 (let (($x156 (forall ((Lambda3 (_ BitVec 32)) )(let ((?x140 (ite (and (bvsle (_ bv0 32) Lambda3) (bvslt Lambda3 (_ bv10 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x6 (input.spec-%var-x-0.0.1 Lambda3)))
 (let ((?x142 (ite $x6 (_ bv1 32) (_ bv0 32))))
 (let (($x154 (bvuge ?x142 (_ bv1 32))))
 (= $x154 (bvuge ?x140 (_ bv1 32))))))))
 ))
 (let (($x148 (forall ((Lambda3 (_ BitVec 32)) )(let (($x5 (= false false)))
 (let (($x6 (input.spec-%var-x-0.0.1 Lambda3)))
 (let ((?x142 (ite $x6 (_ bv1 32) (_ bv0 32))))
 (let (($x143 (= ?x142 (_ bv0 32))))
 (=> $x143 $x5))))))
 ))
 (let (($x145 (forall ((Lambda3 (_ BitVec 32)) )(let (($x6 (input.spec-%var-x-0.0.1 Lambda3)))
 (let ((?x142 (ite $x6 (_ bv1 32) (_ bv0 32))))
 (let (($x143 (= ?x142 (_ bv0 32))))
 (= $x143 (= (ite (and (bvsle (_ bv0 32) Lambda3) (bvslt Lambda3 (_ bv10 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x149 (and $x145 $x148)))
 (let (($x157 (and $x149 $x156)))
 (let (($x190 (and $x157 $x189)))
 (let (($x191 (= $x190 true)))
 (let (($x192 (= $x191 true)))
 (let (($x118 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x117 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%x (_ bv3 32)))))
 (let (($x124 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x117 $x118)))))))
 (let (($x112 (= $x124 true)))
 (let (($x113 (= $x112 true)))
 (let ((?x104 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x105 (= (_ bv0 32) ?x104)))
 (let ((?x101 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x102 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x101)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x103 (and $x100 $x102)))
 (let (($x106 (and $x103 $x105)))
 (let (($x88 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (and $x88 $x106)))
 (let (($x93 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x92 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x99 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x92 $x93)))))))
 (let (($x108 (and $x99 $x107)))
 (let (($x109 (= $x108 true)))
 (let (($x110 (= $x109 true)))
 (let ((?x68 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let (($x79 (bvugt ?x68 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x68 (_ bv3 32)))))
 (let (($x85 (=> (bvule ?x68 (bvsub (bvadd ?x68 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x78 $x79)))))))
 (let (($x70 (= $x85 true)))
 (let (($x71 (= $x70 true)))
 (let (($x111 (and $x71 $x110)))
 (let (($x125 (and $x111 $x113)))
 (let (($x193 (and $x125 $x192)))
 (let (($x207 (and $x193 $x206)))
 (let ((?x48 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let (($x62 (= ?x48 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x49 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x50 (ite $x49 (_ bv1 32) (_ bv0 32))))
 (let (($x57 (bvuge ?x50 (_ bv1 32))))
 (let (($x63 (=> $x57 $x62)))
 (let (($x58 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x59 (= $x57 $x58)))
 (let (($x5 (= false false)))
 (let (($x51 (= ?x50 (_ bv0 32))))
 (let (($x55 (=> $x51 $x5)))
 (let (($x53 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x54 (= $x51 $x53)))
 (let (($x56 (and $x54 $x55)))
 (let (($x60 (and $x56 $x59)))
 (let (($x64 (and $x60 $x63)))
 (let (($x208 (and $x64 $x207)))
 (let ((?x26 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let (($x43 (= ?x26 input.spec-%tmpvar-4.L1%10%d.2)))
 (let (($x38 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x16 (ite $x38 (_ bv1 32) (_ bv0 32))))
 (let (($x9 (bvuge ?x16 (_ bv1 32))))
 (let (($x45 (=> $x9 $x43)))
 (let (($x33 (bvuge input.spec-%tmpvar-4.L1%10%d.0 (_ bv1 32))))
 (let (($x32 (= $x9 $x33)))
 (let (($x17 (= ?x16 (_ bv0 32))))
 (let (($x10 (=> $x17 $x5)))
 (let (($x15 (= input.spec-%tmpvar-4.L1%10%d.0 (_ bv0 32))))
 (let (($x36 (= $x17 $x15)))
 (let (($x37 (and $x36 $x10)))
 (let (($x12 (and $x37 $x32)))
 (let (($x31 (and $x12 $x45)))
 (let (($x209 (and $x31 $x208)))
 (let (($x42 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x210 (and $x42 $x209)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-3.L1%10%d)))
 (let (($x211 (and $x14 $x210)))
 (let (($x30 (= ?x48 input.spec-%var-x0-0.L1%10%d)))
 (let (($x212 (and $x30 $x211)))
 (let (($x47 (= (_ bv12 32) input.spec-%tmpvar-5.L1%17%bbentry)))
 (let (($x213 (and $x47 $x212)))
 (let (($x214 (and $x5 $x213)))
 (let ((?x25 (bvadd ?x48 ?x26)))
 (let (($x11 (= ?x25 input.spec-%tmpvar-6.L1%17%bbentry)))
 (let (($x215 (and $x11 $x214)))
 (let (($x39 (= ?x26 input.spec-%var-x1-0.L1%17%bbentry)))
 (let (($x216 (and $x39 $x215)))
 (let (($x21 (= (_ bv45 32) input.spec-%tmpvar-2.L1%18%bbentry)))
 (let (($x217 (and $x21 $x216)))
 (let (($x218 (and $x5 $x217)))
 (let (($x221 (=> $x218 $x220)))
 (not $x221)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L1%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L1%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%18%bbentry () (_ BitVec 32))
(assert
 (let (($x219 (= true false)))
 (let (($x220 (= $x219 true)))
 (let ((?x195 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x197 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x200 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x203 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x204 (concat ?x203 (concat ?x200 (concat ?x197 ?x195)))))
 (let (($x205 (= ?x204 input.dst.llvm-%x)))
 (let (($x206 (= $x205 true)))
 (let (($x189 (forall ((Lambda3 (_ BitVec 32)) )(let ((?x176 (bvadd (bvmul Lambda3 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x180 (concat (select input.dst.llvm-mem (bvadd ?x176 (_ bv1 32))) (select input.dst.llvm-mem ?x176))))
 (let ((?x186 (concat (select input.dst.llvm-mem (bvadd ?x176 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x176 (_ bv2 32))) ?x180))))
 (let ((?x8 (input.spec-%var-x-0.1.1 Lambda3)))
 (let (($x6 (input.spec-%var-x-0.0.1 Lambda3)))
 (let ((?x142 (ite $x6 (_ bv1 32) (_ bv0 32))))
 (let (($x154 (bvuge ?x142 (_ bv1 32))))
 (=> $x154 (= ?x8 ?x186))))))))))
 ))
 (let (($x156 (forall ((Lambda3 (_ BitVec 32)) )(let ((?x140 (ite (and (bvsle (_ bv0 32) Lambda3) (bvslt Lambda3 (_ bv10 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x6 (input.spec-%var-x-0.0.1 Lambda3)))
 (let ((?x142 (ite $x6 (_ bv1 32) (_ bv0 32))))
 (let (($x154 (bvuge ?x142 (_ bv1 32))))
 (= $x154 (bvuge ?x140 (_ bv1 32))))))))
 ))
 (let (($x148 (forall ((Lambda3 (_ BitVec 32)) )(let (($x5 (= false false)))
 (let (($x6 (input.spec-%var-x-0.0.1 Lambda3)))
 (let ((?x142 (ite $x6 (_ bv1 32) (_ bv0 32))))
 (let (($x143 (= ?x142 (_ bv0 32))))
 (=> $x143 $x5))))))
 ))
 (let (($x145 (forall ((Lambda3 (_ BitVec 32)) )(let (($x6 (input.spec-%var-x-0.0.1 Lambda3)))
 (let ((?x142 (ite $x6 (_ bv1 32) (_ bv0 32))))
 (let (($x143 (= ?x142 (_ bv0 32))))
 (= $x143 (= (ite (and (bvsle (_ bv0 32) Lambda3) (bvslt Lambda3 (_ bv10 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x149 (and $x145 $x148)))
 (let (($x157 (and $x149 $x156)))
 (let (($x190 (and $x157 $x189)))
 (let (($x191 (= $x190 true)))
 (let (($x192 (= $x191 true)))
 (let (($x118 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x117 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%x (_ bv3 32)))))
 (let (($x124 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x117 $x118)))))))
 (let (($x112 (= $x124 true)))
 (let (($x113 (= $x112 true)))
 (let ((?x104 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x105 (= (_ bv0 32) ?x104)))
 (let ((?x101 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x102 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x101)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x103 (and $x100 $x102)))
 (let (($x106 (and $x103 $x105)))
 (let (($x88 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (and $x88 $x106)))
 (let (($x93 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x92 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x99 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x92 $x93)))))))
 (let (($x108 (and $x99 $x107)))
 (let (($x109 (= $x108 true)))
 (let (($x110 (= $x109 true)))
 (let ((?x68 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let (($x79 (bvugt ?x68 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x68 (_ bv3 32)))))
 (let (($x85 (=> (bvule ?x68 (bvsub (bvadd ?x68 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x78 $x79)))))))
 (let (($x70 (= $x85 true)))
 (let (($x71 (= $x70 true)))
 (let (($x111 (and $x71 $x110)))
 (let (($x125 (and $x111 $x113)))
 (let (($x193 (and $x125 $x192)))
 (let (($x207 (and $x193 $x206)))
 (let ((?x48 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let (($x62 (= ?x48 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x49 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x50 (ite $x49 (_ bv1 32) (_ bv0 32))))
 (let (($x57 (bvuge ?x50 (_ bv1 32))))
 (let (($x63 (=> $x57 $x62)))
 (let (($x58 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x59 (= $x57 $x58)))
 (let (($x5 (= false false)))
 (let (($x51 (= ?x50 (_ bv0 32))))
 (let (($x55 (=> $x51 $x5)))
 (let (($x53 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x54 (= $x51 $x53)))
 (let (($x56 (and $x54 $x55)))
 (let (($x60 (and $x56 $x59)))
 (let (($x64 (and $x60 $x63)))
 (let (($x208 (and $x64 $x207)))
 (let ((?x26 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let (($x43 (= ?x26 input.spec-%tmpvar-4.L1%10%d.2)))
 (let (($x38 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x16 (ite $x38 (_ bv1 32) (_ bv0 32))))
 (let (($x9 (bvuge ?x16 (_ bv1 32))))
 (let (($x45 (=> $x9 $x43)))
 (let (($x33 (bvuge input.spec-%tmpvar-4.L1%10%d.0 (_ bv1 32))))
 (let (($x32 (= $x9 $x33)))
 (let (($x17 (= ?x16 (_ bv0 32))))
 (let (($x10 (=> $x17 $x5)))
 (let (($x15 (= input.spec-%tmpvar-4.L1%10%d.0 (_ bv0 32))))
 (let (($x36 (= $x17 $x15)))
 (let (($x37 (and $x36 $x10)))
 (let (($x12 (and $x37 $x32)))
 (let (($x31 (and $x12 $x45)))
 (let (($x209 (and $x31 $x208)))
 (let (($x42 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x210 (and $x42 $x209)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-3.L1%10%d)))
 (let (($x211 (and $x14 $x210)))
 (let (($x30 (= ?x48 input.spec-%var-x0-0.L1%10%d)))
 (let (($x212 (and $x30 $x211)))
 (let (($x47 (= (_ bv12 32) input.spec-%tmpvar-5.L1%17%bbentry)))
 (let (($x213 (and $x47 $x212)))
 (let (($x214 (and $x5 $x213)))
 (let ((?x25 (bvadd ?x48 ?x26)))
 (let (($x11 (= ?x25 input.spec-%tmpvar-6.L1%17%bbentry)))
 (let (($x215 (and $x11 $x214)))
 (let (($x39 (= ?x26 input.spec-%var-x1-0.L1%17%bbentry)))
 (let (($x216 (and $x39 $x215)))
 (let (($x21 (= (_ bv45 32) input.spec-%tmpvar-2.L1%18%bbentry)))
 (let (($x217 (and $x21 $x216)))
 (let (($x218 (and $x5 $x217)))
 (let (($x221 (=> $x218 $x220)))
 (not $x221)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.spec-%tmpvar-4.L1%10%d.0 () (_ BitVec 32)
    #x08000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xd0123004)
  (define-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32)
    #x04000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.L1%10%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x02112c80)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xd0123007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xd0123004)
  (define-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L1%10%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-x0-0.L1%10%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L1%17%bbentry () (_ BitVec 32)
    #x0000000c)
  (define-fun input.spec-%tmpvar-6.L1%17%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-x1-0.L1%17%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.L1%18%bbentry () (_ BitVec 32)
    #x0000002d)
  (define-fun input.spec-%var-x-0.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000001) true
    (ite (= x!0 #x00000000) true
      (not (or (not (bvsle #x00000000 x!0)) (bvsle #x0000000a x!0))))))
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xd0123007) #x02
    (ite (= x!0 #xd0123004) #x80
    (ite (= x!0 #xd0123006) #x11
    (ite (= x!0 #xd0123005) #x2c
      #x00)))))
  (define-fun input.spec-%var-x-0.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000001) #x00000000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #xd0123007)
                                     (k!2 #xd0123006)
                                     (k!2 #xd0123005)
                                     (k!2 #xd0123004)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #xd0123007)
                                     (k!2 #xd0123006)
                                     (k!2 #xd0123005)
                                     (k!2 #xd0123004)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #xd0123007)
                                     (k!2 #xd0123006)
                                     (k!2 #xd0123005)
                                     (k!2 #xd0123004)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #xd0123007)
                                     (k!2 #xd0123006)
                                     (k!2 #xd0123005)
                                     (k!2 #xd0123004))))))
        (concat a!1 a!2 a!3 a!4)))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%tmpvar-4.L1%10%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32)
    #x00020000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x47220118)
  (define-fun input.spec-%tmpvar-4.L1%10%d.0 () (_ BitVec 32)
    #x00002000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x4723fffe)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x4722011b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x47220118)
  (define-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L1%10%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-x0-0.L1%10%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L1%17%bbentry () (_ BitVec 32)
    #x0000000c)
  (define-fun input.spec-%tmpvar-6.L1%17%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-x1-0.L1%17%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.L1%18%bbentry () (_ BitVec 32)
    #x0000002d)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x4722011a) #x23
    (ite (= x!0 #x47220119) #xff
    (ite (= x!0 #x4722011b) #x47
    (ite (= x!0 #x47220118) #xfe
      #x00)))))
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000001 x!0)
         (ite (bvule #x0000000a x!0)
              (ite (bvule #x0000000b x!0) #x0000000b #x0000000a)
              #x00000001)
         #x00000000))
  (define-fun input.spec-%var-x-0.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000001) #x00000000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x4722011b)
                                     (k!2 #x4722011a)
                                     (k!2 #x47220119)
                                     (k!2 #x47220118)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x4722011b)
                                     (k!2 #x4722011a)
                                     (k!2 #x47220119)
                                     (k!2 #x47220118)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x4722011b)
                                     (k!2 #x4722011a)
                                     (k!2 #x47220119)
                                     (k!2 #x47220118)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #x4722011b)
                                     (k!2 #x4722011a)
                                     (k!2 #x47220119)
                                     (k!2 #x47220118))))))
        (concat a!1 a!2 a!3 a!4)))))
  (define-fun input.spec-%var-x-0.0.1!4 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000001) true
    (ite (= x!0 #x00000000) true
      false)))
  (define-fun input.spec-%var-x-0.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-0.0.1!4 (k!3 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460714/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L1%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L1%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%18%bbentry () (_ BitVec 32))
(assert
 (let (($x67 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x73 (ite $x67 (_ bv1 32) (_ bv0 32))))
 (let (($x79 (bvuge ?x73 (_ bv1 32))))
 (let (($x84 (= ?x73 (_ bv0 32))))
 (let (($x239 (or $x84 $x79)))
 (let (($x89 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x90 (ite $x89 (_ bv1 32) (_ bv0 32))))
 (let (($x96 (bvuge ?x90 (_ bv1 32))))
 (let (($x240 (and $x96 $x239)))
 (let (($x98 (= ?x90 (_ bv0 32))))
 (let (($x241 (or $x98 $x240)))
 (let (($x242 (or false $x241)))
 (let (($x243 (= $x242 true)))
 (let (($x244 (= $x243 true)))
 (let ((?x168 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x164 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x169 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x174 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x223 (concat ?x174 (concat ?x169 (concat ?x164 ?x168)))))
 (let (($x224 (= ?x223 input.dst.llvm-%x)))
 (let (($x225 (= $x224 true)))
 (let (($x158 (forall ((Lambda3 (_ BitVec 32)) )(let ((?x127 (bvadd (bvmul Lambda3 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x132 (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv1 32))) (select input.dst.llvm-mem ?x127))))
 (let ((?x150 (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv2 32))) ?x132))))
 (let ((?x31 (input.spec-%var-x-0.1.1 Lambda3)))
 (let (($x68 (input.spec-%var-x-0.0.1 Lambda3)))
 (let ((?x202 (ite $x68 (_ bv1 32) (_ bv0 32))))
 (let (($x207 (bvuge ?x202 (_ bv1 32))))
 (=> $x207 (= ?x31 ?x150))))))))))
 ))
 (let (($x209 (forall ((Lambda3 (_ BitVec 32)) )(let ((?x192 (ite (and (bvsle (_ bv0 32) Lambda3) (bvslt Lambda3 (_ bv10 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x68 (input.spec-%var-x-0.0.1 Lambda3)))
 (let ((?x202 (ite $x68 (_ bv1 32) (_ bv0 32))))
 (let (($x207 (bvuge ?x202 (_ bv1 32))))
 (= $x207 (bvuge ?x192 (_ bv1 32))))))))
 ))
 (let (($x195 (forall ((Lambda3 (_ BitVec 32)) )(let (($x42 (= false false)))
 (let (($x68 (input.spec-%var-x-0.0.1 Lambda3)))
 (let ((?x202 (ite $x68 (_ bv1 32) (_ bv0 32))))
 (let (($x203 (= ?x202 (_ bv0 32))))
 (=> $x203 $x42))))))
 ))
 (let (($x200 (forall ((Lambda3 (_ BitVec 32)) )(let (($x68 (input.spec-%var-x-0.0.1 Lambda3)))
 (let ((?x202 (ite $x68 (_ bv1 32) (_ bv0 32))))
 (let (($x203 (= ?x202 (_ bv0 32))))
 (= $x203 (= (ite (and (bvsle (_ bv0 32) Lambda3) (bvslt Lambda3 (_ bv10 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x198 (and $x200 $x195)))
 (let (($x210 (and $x198 $x209)))
 (let (($x160 (and $x210 $x158)))
 (let (($x161 (= $x160 true)))
 (let (($x170 (= $x161 true)))
 (let ((?x156 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x157 (= (_ bv0 32) ?x156)))
 (let ((?x154 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x153 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x154)))
 (let (($x149 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (and $x149 $x153)))
 (let (($x8 (and $x155 $x157)))
 (let (($x142 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x159 (and $x142 $x8)))
 (let (($x139 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x137 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x148 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x137 $x139)))))))
 (let (($x175 (and $x148 $x159)))
 (let (($x176 (= $x175 true)))
 (let (($x184 (= $x176 true)))
 (let (($x119 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x120 (and true $x119)))
 (let ((?x35 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let (($x115 (= (bvand ?x35 (_ bv4294967292 32)) ?x35)))
 (let (($x110 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x35 (bvsub ?x35 (_ bv4 32))) (bvult ?x35 (bvsub ?x35 (_ bv4 32))))))
 (let (($x111 (and true $x110)))
 (let (($x105 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x124 (and (and (and $x105 $x111) $x115) $x120)))
 (let (($x112 (and $x105 $x124)))
 (let (($x113 (= $x112 true)))
 (let (($x125 (= $x113 true)))
 (let (($x185 (and $x125 $x184)))
 (let (($x171 (and $x185 $x170)))
 (let (($x226 (and $x171 $x225)))
 (let ((?x53 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let (($x100 (= ?x53 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x101 (=> $x96 $x100)))
 (let (($x97 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x99 (= $x96 $x97)))
 (let (($x42 (= false false)))
 (let (($x94 (=> $x98 $x42)))
 (let (($x92 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x93 (= $x98 $x92)))
 (let (($x95 (and $x93 $x94)))
 (let (($x87 (and $x95 $x99)))
 (let (($x102 (and $x87 $x101)))
 (let (($x227 (and $x102 $x226)))
 (let ((?x43 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let (($x85 (= ?x43 input.spec-%tmpvar-4.L1%10%d.2)))
 (let (($x70 (=> $x79 $x85)))
 (let (($x80 (bvuge input.spec-%tmpvar-4.L1%10%d.0 (_ bv1 32))))
 (let (($x81 (= $x79 $x80)))
 (let (($x78 (=> $x84 $x42)))
 (let (($x76 (= input.spec-%tmpvar-4.L1%10%d.0 (_ bv0 32))))
 (let (($x77 (= $x84 $x76)))
 (let (($x75 (and $x77 $x78)))
 (let (($x82 (and $x75 $x81)))
 (let (($x71 (and $x82 $x70)))
 (let (($x228 (and $x71 $x227)))
 (let (($x66 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x229 (and $x66 $x228)))
 (let (($x63 (= (_ bv1 32) input.spec-%tmpvar-3.L1%10%d)))
 (let (($x230 (and $x63 $x229)))
 (let (($x61 (= ?x53 input.spec-%var-x0-0.L1%10%d)))
 (let (($x231 (and $x61 $x230)))
 (let (($x59 (= (_ bv12 32) input.spec-%tmpvar-5.L1%17%bbentry)))
 (let (($x232 (and $x59 $x231)))
 (let (($x233 (and $x42 $x232)))
 (let ((?x54 (bvadd ?x53 ?x43)))
 (let (($x56 (= ?x54 input.spec-%tmpvar-6.L1%17%bbentry)))
 (let (($x234 (and $x56 $x233)))
 (let (($x51 (= ?x43 input.spec-%var-x1-0.L1%17%bbentry)))
 (let (($x235 (and $x51 $x234)))
 (let (($x40 (= (_ bv45 32) input.spec-%tmpvar-2.L1%18%bbentry)))
 (let (($x236 (and $x40 $x235)))
 (let (($x237 (and $x42 $x236)))
 (let (($x15 (bvugt ?x35 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x35 (_ bv3 32)))))
 (let (($x33 (=> (bvule ?x35 (bvsub (bvadd ?x35 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x22 $x15)))))))
 (let (($x46 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%x (_ bv3 32)))))
 (let (($x19 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x7 $x46)))))))
 (let (($x39 (and $x19 $x33)))
 (let (($x238 (and $x39 $x237)))
 (let (($x245 (=> $x238 $x244)))
 (not $x245))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L1%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L1%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%18%bbentry () (_ BitVec 32))
(assert
 (let (($x67 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x73 (ite $x67 (_ bv1 32) (_ bv0 32))))
 (let (($x79 (bvuge ?x73 (_ bv1 32))))
 (let (($x84 (= ?x73 (_ bv0 32))))
 (let (($x239 (or $x84 $x79)))
 (let (($x89 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x90 (ite $x89 (_ bv1 32) (_ bv0 32))))
 (let (($x96 (bvuge ?x90 (_ bv1 32))))
 (let (($x240 (and $x96 $x239)))
 (let (($x98 (= ?x90 (_ bv0 32))))
 (let (($x241 (or $x98 $x240)))
 (let (($x242 (or false $x241)))
 (let (($x243 (= $x242 true)))
 (let (($x244 (= $x243 true)))
 (let ((?x168 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x164 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x169 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x174 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x223 (concat ?x174 (concat ?x169 (concat ?x164 ?x168)))))
 (let (($x224 (= ?x223 input.dst.llvm-%x)))
 (let (($x225 (= $x224 true)))
 (let (($x158 (forall ((Lambda3 (_ BitVec 32)) )(let ((?x127 (bvadd (bvmul Lambda3 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x132 (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv1 32))) (select input.dst.llvm-mem ?x127))))
 (let ((?x150 (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv2 32))) ?x132))))
 (let ((?x31 (input.spec-%var-x-0.1.1 Lambda3)))
 (let (($x68 (input.spec-%var-x-0.0.1 Lambda3)))
 (let ((?x202 (ite $x68 (_ bv1 32) (_ bv0 32))))
 (let (($x207 (bvuge ?x202 (_ bv1 32))))
 (=> $x207 (= ?x31 ?x150))))))))))
 ))
 (let (($x209 (forall ((Lambda3 (_ BitVec 32)) )(let ((?x192 (ite (and (bvsle (_ bv0 32) Lambda3) (bvslt Lambda3 (_ bv10 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x68 (input.spec-%var-x-0.0.1 Lambda3)))
 (let ((?x202 (ite $x68 (_ bv1 32) (_ bv0 32))))
 (let (($x207 (bvuge ?x202 (_ bv1 32))))
 (= $x207 (bvuge ?x192 (_ bv1 32))))))))
 ))
 (let (($x195 (forall ((Lambda3 (_ BitVec 32)) )(let (($x42 (= false false)))
 (let (($x68 (input.spec-%var-x-0.0.1 Lambda3)))
 (let ((?x202 (ite $x68 (_ bv1 32) (_ bv0 32))))
 (let (($x203 (= ?x202 (_ bv0 32))))
 (=> $x203 $x42))))))
 ))
 (let (($x200 (forall ((Lambda3 (_ BitVec 32)) )(let (($x68 (input.spec-%var-x-0.0.1 Lambda3)))
 (let ((?x202 (ite $x68 (_ bv1 32) (_ bv0 32))))
 (let (($x203 (= ?x202 (_ bv0 32))))
 (= $x203 (= (ite (and (bvsle (_ bv0 32) Lambda3) (bvslt Lambda3 (_ bv10 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x198 (and $x200 $x195)))
 (let (($x210 (and $x198 $x209)))
 (let (($x160 (and $x210 $x158)))
 (let (($x161 (= $x160 true)))
 (let (($x170 (= $x161 true)))
 (let ((?x156 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x157 (= (_ bv0 32) ?x156)))
 (let ((?x154 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x153 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x154)))
 (let (($x149 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (and $x149 $x153)))
 (let (($x8 (and $x155 $x157)))
 (let (($x142 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x159 (and $x142 $x8)))
 (let (($x139 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x137 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x148 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x137 $x139)))))))
 (let (($x175 (and $x148 $x159)))
 (let (($x176 (= $x175 true)))
 (let (($x184 (= $x176 true)))
 (let (($x119 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x120 (and true $x119)))
 (let ((?x35 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let (($x115 (= (bvand ?x35 (_ bv4294967292 32)) ?x35)))
 (let (($x110 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x35 (bvsub ?x35 (_ bv4 32))) (bvult ?x35 (bvsub ?x35 (_ bv4 32))))))
 (let (($x111 (and true $x110)))
 (let (($x105 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x124 (and (and (and $x105 $x111) $x115) $x120)))
 (let (($x112 (and $x105 $x124)))
 (let (($x113 (= $x112 true)))
 (let (($x125 (= $x113 true)))
 (let (($x185 (and $x125 $x184)))
 (let (($x171 (and $x185 $x170)))
 (let (($x226 (and $x171 $x225)))
 (let ((?x53 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let (($x100 (= ?x53 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x101 (=> $x96 $x100)))
 (let (($x97 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x99 (= $x96 $x97)))
 (let (($x42 (= false false)))
 (let (($x94 (=> $x98 $x42)))
 (let (($x92 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x93 (= $x98 $x92)))
 (let (($x95 (and $x93 $x94)))
 (let (($x87 (and $x95 $x99)))
 (let (($x102 (and $x87 $x101)))
 (let (($x227 (and $x102 $x226)))
 (let ((?x43 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let (($x85 (= ?x43 input.spec-%tmpvar-4.L1%10%d.2)))
 (let (($x70 (=> $x79 $x85)))
 (let (($x80 (bvuge input.spec-%tmpvar-4.L1%10%d.0 (_ bv1 32))))
 (let (($x81 (= $x79 $x80)))
 (let (($x78 (=> $x84 $x42)))
 (let (($x76 (= input.spec-%tmpvar-4.L1%10%d.0 (_ bv0 32))))
 (let (($x77 (= $x84 $x76)))
 (let (($x75 (and $x77 $x78)))
 (let (($x82 (and $x75 $x81)))
 (let (($x71 (and $x82 $x70)))
 (let (($x228 (and $x71 $x227)))
 (let (($x66 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x229 (and $x66 $x228)))
 (let (($x63 (= (_ bv1 32) input.spec-%tmpvar-3.L1%10%d)))
 (let (($x230 (and $x63 $x229)))
 (let (($x61 (= ?x53 input.spec-%var-x0-0.L1%10%d)))
 (let (($x231 (and $x61 $x230)))
 (let (($x59 (= (_ bv12 32) input.spec-%tmpvar-5.L1%17%bbentry)))
 (let (($x232 (and $x59 $x231)))
 (let (($x233 (and $x42 $x232)))
 (let ((?x54 (bvadd ?x53 ?x43)))
 (let (($x56 (= ?x54 input.spec-%tmpvar-6.L1%17%bbentry)))
 (let (($x234 (and $x56 $x233)))
 (let (($x51 (= ?x43 input.spec-%var-x1-0.L1%17%bbentry)))
 (let (($x235 (and $x51 $x234)))
 (let (($x40 (= (_ bv45 32) input.spec-%tmpvar-2.L1%18%bbentry)))
 (let (($x236 (and $x40 $x235)))
 (let (($x237 (and $x42 $x236)))
 (let (($x15 (bvugt ?x35 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x35 (_ bv3 32)))))
 (let (($x33 (=> (bvule ?x35 (bvsub (bvadd ?x35 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x22 $x15)))))))
 (let (($x46 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%x (_ bv3 32)))))
 (let (($x19 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x7 $x46)))))))
 (let (($x39 (and $x19 $x33)))
 (let (($x238 (and $x39 $x237)))
 (let (($x245 (=> $x238 $x244)))
 (not $x245))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 157 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460714/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L1%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L1%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x254 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x257 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x254)))
 (let ((?x259 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x257)))
 (let ((?x69 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv1 32)))))
 (let ((?x28 (concat ?x69 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%x)))))
 (let ((?x247 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv2 32)))))
 (let ((?x27 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let ((?x24 (bvadd ?x27 (_ bv3 32))))
 (let ((?x250 (concat (select input.dst.llvm-mem ?x24) (concat ?x247 ?x28))))
 (let ((?x260 (bvadd ?x250 ?x259)))
 (let ((?x12 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let ((?x17 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let ((?x22 (bvadd ?x17 ?x12)))
 (let (($x261 (= ?x22 ?x260)))
 (let (($x262 (= $x261 true)))
 (let (($x263 (= $x262 true)))
 (let ((?x242 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x244 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x20 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x126 (concat ?x72 (concat ?x20 (concat ?x244 ?x242)))))
 (let (($x187 (= ?x126 input.dst.llvm-%x)))
 (let (($x188 (= $x187 true)))
 (let (($x49 (= input.dst.llvm-%x ?x126)))
 (let ((?x237 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x238 (= (_ bv0 32) ?x237)))
 (let ((?x234 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x235 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x234)))
 (let (($x233 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x236 (and $x233 $x235)))
 (let (($x239 (and $x236 $x238)))
 (let (($x232 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x240 (and $x232 $x239)))
 (let (($x229 (forall ((Lambda3 (_ BitVec 32)) )(let ((?x165 (bvadd (bvmul Lambda3 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x168 (concat (select input.dst.llvm-mem (bvadd ?x165 (_ bv1 32))) (select input.dst.llvm-mem ?x165))))
 (let ((?x226 (concat (select input.dst.llvm-mem (bvadd ?x165 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x165 (_ bv2 32))) ?x168))))
 (let ((?x85 (input.spec-%var-x-0.1.1 Lambda3)))
 (let (($x56 (input.spec-%var-x-0.0.1 Lambda3)))
 (let ((?x199 (ite $x56 (_ bv1 32) (_ bv0 32))))
 (let (($x13 (bvuge ?x199 (_ bv1 32))))
 (=> $x13 (= ?x85 ?x226))))))))))
 ))
 (let (($x136 (forall ((Lambda3 (_ BitVec 32)) )(let ((?x192 (ite (and (bvsle (_ bv0 32) Lambda3) (bvslt Lambda3 (_ bv10 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x56 (input.spec-%var-x-0.0.1 Lambda3)))
 (let ((?x199 (ite $x56 (_ bv1 32) (_ bv0 32))))
 (let (($x13 (bvuge ?x199 (_ bv1 32))))
 (= $x13 (bvuge ?x192 (_ bv1 32))))))))
 ))
 (let (($x206 (forall ((Lambda3 (_ BitVec 32)) )(let (($x19 (= false false)))
 (let (($x56 (input.spec-%var-x-0.0.1 Lambda3)))
 (let ((?x199 (ite $x56 (_ bv1 32) (_ bv0 32))))
 (let (($x200 (= ?x199 (_ bv0 32))))
 (=> $x200 $x19))))))
 ))
 (let (($x195 (forall ((Lambda3 (_ BitVec 32)) )(let (($x56 (input.spec-%var-x-0.0.1 Lambda3)))
 (let ((?x199 (ite $x56 (_ bv1 32) (_ bv0 32))))
 (let (($x200 (= ?x199 (_ bv0 32))))
 (= $x200 (= (ite (and (bvsle (_ bv0 32) Lambda3) (bvslt Lambda3 (_ bv10 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x208 (and $x195 $x206)))
 (let (($x146 (and $x208 $x136)))
 (let (($x230 (and $x146 $x229)))
 (let (($x154 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x149 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x159 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x149 $x154)))))))
 (let (($x125 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x143 (and true $x125)))
 (let (($x119 (= (bvand ?x27 (_ bv4294967292 32)) ?x27)))
 (let (($x123 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x27 (bvsub ?x27 (_ bv4 32))) (bvult ?x27 (bvsub ?x27 (_ bv4 32))))))
 (let (($x117 (and true $x123)))
 (let (($x121 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x131 (and (and (and $x121 $x117) $x119) $x143)))
 (let (($x137 (and $x121 $x131)))
 (let (($x179 (and (and (and (and $x137 $x159) $x230) $x240) $x49)))
 (let (($x180 (= $x179 true)))
 (let (($x183 (= $x180 true)))
 (let (($x139 (= $x137 true)))
 (let (($x140 (= $x139 true)))
 (let (($x186 (and $x140 $x183)))
 (let (($x196 (and $x186 $x188)))
 (let (($x61 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x57 (ite $x61 (_ bv1 32) (_ bv0 32))))
 (let (($x74 (bvuge ?x57 (_ bv1 32))))
 (let (($x94 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x95 (ite $x94 (_ bv1 32) (_ bv0 32))))
 (let (($x101 (bvuge ?x95 (_ bv1 32))))
 (let (($x109 (and $x101 $x74)))
 (let (($x201 (and $x109 $x196)))
 (let (($x107 (= ?x17 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x106 (=> $x101 $x107)))
 (let (($x102 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x103 (= $x101 $x102)))
 (let (($x19 (= false false)))
 (let (($x96 (= ?x95 (_ bv0 32))))
 (let (($x88 (=> $x96 $x19)))
 (let (($x99 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x87 (= $x96 $x99)))
 (let (($x100 (and $x87 $x88)))
 (let (($x104 (and $x100 $x103)))
 (let (($x108 (and $x104 $x106)))
 (let (($x204 (and $x108 $x201)))
 (let (($x91 (= ?x12 input.spec-%tmpvar-4.L1%10%d.2)))
 (let (($x92 (=> $x74 $x91)))
 (let (($x71 (bvuge input.spec-%tmpvar-4.L1%10%d.0 (_ bv1 32))))
 (let (($x89 (= $x74 $x71)))
 (let (($x84 (= ?x57 (_ bv0 32))))
 (let (($x52 (=> $x84 $x19)))
 (let (($x62 (= input.spec-%tmpvar-4.L1%10%d.0 (_ bv0 32))))
 (let (($x64 (= $x84 $x62)))
 (let (($x53 (and $x64 $x52)))
 (let (($x90 (and $x53 $x89)))
 (let (($x93 (and $x90 $x92)))
 (let (($x205 (and $x93 $x204)))
 (let (($x66 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x211 (and $x66 $x205)))
 (let (($x81 (= (_ bv1 32) input.spec-%tmpvar-3.L1%10%d)))
 (let (($x213 (and $x81 $x211)))
 (let (($x77 (= ?x17 input.spec-%var-x0-0.L1%10%d)))
 (let (($x214 (and $x77 $x213)))
 (let (($x42 (= (_ bv12 32) input.spec-%tmpvar-5.L1%17%bbentry)))
 (let (($x86 (and $x42 $x214)))
 (let (($x194 (and $x19 $x86)))
 (let (($x79 (= ?x22 input.spec-%tmpvar-6.L1%17%bbentry)))
 (let (($x220 (and $x79 $x194)))
 (let (($x43 (= ?x12 input.spec-%var-x1-0.L1%17%bbentry)))
 (let (($x221 (and $x43 $x220)))
 (let (($x32 (= (_ bv45 32) input.spec-%tmpvar-2.L1%18%bbentry)))
 (let (($x216 (and $x32 $x221)))
 (let (($x217 (and $x19 $x216)))
 (let (($x46 (bvugt ?x27 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x24)))
 (let (($x36 (=> (bvule ?x27 (bvsub (bvadd ?x27 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x48 $x46)))))))
 (let (($x58 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x33 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x76 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x33)))
 (let (($x29 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x76 $x58)))))))
 (let (($x30 (and $x29 $x36)))
 (let (($x215 (and $x30 $x217)))
 (let (($x264 (=> $x215 $x263)))
 (not $x264)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L1%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L1%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x254 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x257 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x254)))
 (let ((?x259 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x257)))
 (let ((?x69 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv1 32)))))
 (let ((?x28 (concat ?x69 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%x)))))
 (let ((?x247 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv2 32)))))
 (let ((?x27 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let ((?x24 (bvadd ?x27 (_ bv3 32))))
 (let ((?x250 (concat (select input.dst.llvm-mem ?x24) (concat ?x247 ?x28))))
 (let ((?x260 (bvadd ?x250 ?x259)))
 (let ((?x12 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let ((?x17 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let ((?x22 (bvadd ?x17 ?x12)))
 (let (($x261 (= ?x22 ?x260)))
 (let (($x262 (= $x261 true)))
 (let (($x263 (= $x262 true)))
 (let ((?x242 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x244 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x20 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x126 (concat ?x72 (concat ?x20 (concat ?x244 ?x242)))))
 (let (($x187 (= ?x126 input.dst.llvm-%x)))
 (let (($x188 (= $x187 true)))
 (let (($x49 (= input.dst.llvm-%x ?x126)))
 (let ((?x237 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x238 (= (_ bv0 32) ?x237)))
 (let ((?x234 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x235 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x234)))
 (let (($x233 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x236 (and $x233 $x235)))
 (let (($x239 (and $x236 $x238)))
 (let (($x232 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x240 (and $x232 $x239)))
 (let (($x229 (forall ((Lambda3 (_ BitVec 32)) )(let ((?x165 (bvadd (bvmul Lambda3 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x168 (concat (select input.dst.llvm-mem (bvadd ?x165 (_ bv1 32))) (select input.dst.llvm-mem ?x165))))
 (let ((?x226 (concat (select input.dst.llvm-mem (bvadd ?x165 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x165 (_ bv2 32))) ?x168))))
 (let ((?x85 (input.spec-%var-x-0.1.1 Lambda3)))
 (let (($x56 (input.spec-%var-x-0.0.1 Lambda3)))
 (let ((?x199 (ite $x56 (_ bv1 32) (_ bv0 32))))
 (let (($x13 (bvuge ?x199 (_ bv1 32))))
 (=> $x13 (= ?x85 ?x226))))))))))
 ))
 (let (($x136 (forall ((Lambda3 (_ BitVec 32)) )(let ((?x192 (ite (and (bvsle (_ bv0 32) Lambda3) (bvslt Lambda3 (_ bv10 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x56 (input.spec-%var-x-0.0.1 Lambda3)))
 (let ((?x199 (ite $x56 (_ bv1 32) (_ bv0 32))))
 (let (($x13 (bvuge ?x199 (_ bv1 32))))
 (= $x13 (bvuge ?x192 (_ bv1 32))))))))
 ))
 (let (($x206 (forall ((Lambda3 (_ BitVec 32)) )(let (($x19 (= false false)))
 (let (($x56 (input.spec-%var-x-0.0.1 Lambda3)))
 (let ((?x199 (ite $x56 (_ bv1 32) (_ bv0 32))))
 (let (($x200 (= ?x199 (_ bv0 32))))
 (=> $x200 $x19))))))
 ))
 (let (($x195 (forall ((Lambda3 (_ BitVec 32)) )(let (($x56 (input.spec-%var-x-0.0.1 Lambda3)))
 (let ((?x199 (ite $x56 (_ bv1 32) (_ bv0 32))))
 (let (($x200 (= ?x199 (_ bv0 32))))
 (= $x200 (= (ite (and (bvsle (_ bv0 32) Lambda3) (bvslt Lambda3 (_ bv10 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x208 (and $x195 $x206)))
 (let (($x146 (and $x208 $x136)))
 (let (($x230 (and $x146 $x229)))
 (let (($x154 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x149 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x159 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x149 $x154)))))))
 (let (($x125 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x143 (and true $x125)))
 (let (($x119 (= (bvand ?x27 (_ bv4294967292 32)) ?x27)))
 (let (($x123 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x27 (bvsub ?x27 (_ bv4 32))) (bvult ?x27 (bvsub ?x27 (_ bv4 32))))))
 (let (($x117 (and true $x123)))
 (let (($x121 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x131 (and (and (and $x121 $x117) $x119) $x143)))
 (let (($x137 (and $x121 $x131)))
 (let (($x179 (and (and (and (and $x137 $x159) $x230) $x240) $x49)))
 (let (($x180 (= $x179 true)))
 (let (($x183 (= $x180 true)))
 (let (($x139 (= $x137 true)))
 (let (($x140 (= $x139 true)))
 (let (($x186 (and $x140 $x183)))
 (let (($x196 (and $x186 $x188)))
 (let (($x61 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x57 (ite $x61 (_ bv1 32) (_ bv0 32))))
 (let (($x74 (bvuge ?x57 (_ bv1 32))))
 (let (($x94 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x95 (ite $x94 (_ bv1 32) (_ bv0 32))))
 (let (($x101 (bvuge ?x95 (_ bv1 32))))
 (let (($x109 (and $x101 $x74)))
 (let (($x201 (and $x109 $x196)))
 (let (($x107 (= ?x17 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x106 (=> $x101 $x107)))
 (let (($x102 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x103 (= $x101 $x102)))
 (let (($x19 (= false false)))
 (let (($x96 (= ?x95 (_ bv0 32))))
 (let (($x88 (=> $x96 $x19)))
 (let (($x99 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x87 (= $x96 $x99)))
 (let (($x100 (and $x87 $x88)))
 (let (($x104 (and $x100 $x103)))
 (let (($x108 (and $x104 $x106)))
 (let (($x204 (and $x108 $x201)))
 (let (($x91 (= ?x12 input.spec-%tmpvar-4.L1%10%d.2)))
 (let (($x92 (=> $x74 $x91)))
 (let (($x71 (bvuge input.spec-%tmpvar-4.L1%10%d.0 (_ bv1 32))))
 (let (($x89 (= $x74 $x71)))
 (let (($x84 (= ?x57 (_ bv0 32))))
 (let (($x52 (=> $x84 $x19)))
 (let (($x62 (= input.spec-%tmpvar-4.L1%10%d.0 (_ bv0 32))))
 (let (($x64 (= $x84 $x62)))
 (let (($x53 (and $x64 $x52)))
 (let (($x90 (and $x53 $x89)))
 (let (($x93 (and $x90 $x92)))
 (let (($x205 (and $x93 $x204)))
 (let (($x66 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x211 (and $x66 $x205)))
 (let (($x81 (= (_ bv1 32) input.spec-%tmpvar-3.L1%10%d)))
 (let (($x213 (and $x81 $x211)))
 (let (($x77 (= ?x17 input.spec-%var-x0-0.L1%10%d)))
 (let (($x214 (and $x77 $x213)))
 (let (($x42 (= (_ bv12 32) input.spec-%tmpvar-5.L1%17%bbentry)))
 (let (($x86 (and $x42 $x214)))
 (let (($x194 (and $x19 $x86)))
 (let (($x79 (= ?x22 input.spec-%tmpvar-6.L1%17%bbentry)))
 (let (($x220 (and $x79 $x194)))
 (let (($x43 (= ?x12 input.spec-%var-x1-0.L1%17%bbentry)))
 (let (($x221 (and $x43 $x220)))
 (let (($x32 (= (_ bv45 32) input.spec-%tmpvar-2.L1%18%bbentry)))
 (let (($x216 (and $x32 $x221)))
 (let (($x217 (and $x19 $x216)))
 (let (($x46 (bvugt ?x27 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x24)))
 (let (($x36 (=> (bvule ?x27 (bvsub (bvadd ?x27 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x48 $x46)))))))
 (let (($x58 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x33 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x76 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x33)))
 (let (($x29 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x76 $x58)))))))
 (let (($x30 (and $x29 $x36)))
 (let (($x215 (and $x30 $x217)))
 (let (($x264 (=> $x215 $x263)))
 (not $x264)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460714/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L1%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L1%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x160 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x152 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x160)))
 (let ((?x132 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x152)))
 (let ((?x202 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv1 32)))))
 (let ((?x203 (concat ?x202 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%x)))))
 (let ((?x198 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv2 32)))))
 (let ((?x65 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let ((?x46 (bvadd ?x65 (_ bv3 32))))
 (let ((?x31 (concat (select input.dst.llvm-mem ?x46) (concat ?x198 ?x203))))
 (let ((?x130 (bvadd ?x31 ?x132)))
 (let (($x135 (= (_ bv12 32) ?x130)))
 (let (($x158 (= $x135 true)))
 (let (($x170 (= $x158 true)))
 (let ((?x34 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x222 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x258 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x255 (concat ?x258 (concat ?x28 (concat ?x222 ?x34)))))
 (let (($x261 (= ?x255 input.dst.llvm-%x)))
 (let (($x262 (= $x261 true)))
 (let (($x256 (= input.dst.llvm-%x ?x255)))
 (let ((?x221 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x216 (= (_ bv0 32) ?x221)))
 (let ((?x86 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x194 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x86)))
 (let (($x214 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x220 (and $x214 $x194)))
 (let (($x217 (and $x220 $x216)))
 (let (($x213 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x215 (and $x213 $x217)))
 (let (($x204 (forall ((Lambda3 (_ BitVec 32)) )(let ((?x242 (bvadd (bvmul Lambda3 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x49 (concat (select input.dst.llvm-mem (bvadd ?x242 (_ bv1 32))) (select input.dst.llvm-mem ?x242))))
 (let ((?x188 (concat (select input.dst.llvm-mem (bvadd ?x242 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x242 (_ bv2 32))) ?x49))))
 (let ((?x17 (input.spec-%var-x-0.1.1 Lambda3)))
 (let (($x52 (input.spec-%var-x-0.0.1 Lambda3)))
 (let ((?x165 (ite $x52 (_ bv1 32) (_ bv0 32))))
 (let (($x227 (bvuge ?x165 (_ bv1 32))))
 (=> $x227 (= ?x17 ?x188))))))))))
 ))
 (let (($x229 (forall ((Lambda3 (_ BitVec 32)) )(let ((?x133 (ite (and (bvsle (_ bv0 32) Lambda3) (bvslt Lambda3 (_ bv10 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x52 (input.spec-%var-x-0.0.1 Lambda3)))
 (let ((?x165 (ite $x52 (_ bv1 32) (_ bv0 32))))
 (let (($x227 (bvuge ?x165 (_ bv1 32))))
 (= $x227 (bvuge ?x133 (_ bv1 32))))))))
 ))
 (let (($x163 (forall ((Lambda3 (_ BitVec 32)) )(let (($x15 (= false false)))
 (let (($x52 (input.spec-%var-x-0.0.1 Lambda3)))
 (let ((?x165 (ite $x52 (_ bv1 32) (_ bv0 32))))
 (let (($x224 (= ?x165 (_ bv0 32))))
 (=> $x224 $x15))))))
 ))
 (let (($x150 (forall ((Lambda3 (_ BitVec 32)) )(let (($x52 (input.spec-%var-x-0.0.1 Lambda3)))
 (let ((?x165 (ite $x52 (_ bv1 32) (_ bv0 32))))
 (let (($x224 (= ?x165 (_ bv0 32))))
 (= $x224 (= (ite (and (bvsle (_ bv0 32) Lambda3) (bvslt Lambda3 (_ bv10 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x164 (and $x150 $x163)))
 (let (($x230 (and $x164 $x229)))
 (let (($x205 (and $x230 $x204)))
 (let (($x199 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x192 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x56 $x199)))))))
 (let (($x140 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x148 (and true $x140)))
 (let (($x125 (= (bvand ?x65 (_ bv4294967292 32)) ?x65)))
 (let (($x120 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x65 (bvsub ?x65 (_ bv4 32))) (bvult ?x65 (bvsub ?x65 (_ bv4 32))))))
 (let (($x112 (and true $x120)))
 (let (($x138 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x142 (and (and (and $x138 $x112) $x125) $x148)))
 (let (($x149 (and $x138 $x142)))
 (let (($x254 (and (and (and (and $x149 $x192) $x205) $x215) $x256)))
 (let (($x257 (= $x254 true)))
 (let (($x259 (= $x257 true)))
 (let (($x154 (= $x149 true)))
 (let (($x153 (= $x154 true)))
 (let (($x260 (and $x153 $x259)))
 (let (($x263 (and $x260 $x262)))
 (let (($x19 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x74 (ite $x19 (_ bv1 32) (_ bv0 32))))
 (let (($x71 (= ?x74 (_ bv0 32))))
 (let (($x100 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x101 (ite $x100 (_ bv1 32) (_ bv0 32))))
 (let (($x108 (bvuge ?x101 (_ bv1 32))))
 (let (($x116 (and $x108 $x71)))
 (let (($x264 (and $x116 $x263)))
 (let ((?x42 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let (($x115 (= ?x42 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x114 (=> $x108 $x115)))
 (let (($x109 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x110 (= $x108 $x109)))
 (let (($x15 (= false false)))
 (let (($x102 (= ?x101 (_ bv0 32))))
 (let (($x107 (=> $x102 $x15)))
 (let (($x104 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x105 (= $x102 $x104)))
 (let (($x106 (and $x105 $x107)))
 (let (($x111 (and $x106 $x110)))
 (let (($x122 (and $x111 $x114)))
 (let (($x265 (and $x122 $x264)))
 (let ((?x43 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let (($x99 (= ?x43 input.spec-%tmpvar-4.L1%10%d.2)))
 (let (($x93 (bvuge ?x74 (_ bv1 32))))
 (let (($x87 (=> $x93 $x99)))
 (let (($x94 (bvuge input.spec-%tmpvar-4.L1%10%d.0 (_ bv1 32))))
 (let (($x95 (= $x93 $x94)))
 (let (($x91 (=> $x71 $x15)))
 (let (($x90 (= input.spec-%tmpvar-4.L1%10%d.0 (_ bv0 32))))
 (let (($x98 (= $x71 $x90)))
 (let (($x92 (and $x98 $x91)))
 (let (($x96 (and $x92 $x95)))
 (let (($x88 (and $x96 $x87)))
 (let (($x26 (and $x88 $x265)))
 (let (($x64 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x141 (and $x64 $x26)))
 (let (($x39 (= (_ bv1 32) input.spec-%tmpvar-3.L1%10%d)))
 (let (($x241 (and $x39 $x141)))
 (let (($x57 (= ?x42 input.spec-%var-x0-0.L1%10%d)))
 (let (($x11 (and $x57 $x241)))
 (let (($x66 (= (_ bv12 32) input.spec-%tmpvar-5.L1%17%bbentry)))
 (let (($x63 (and $x66 $x11)))
 (let (($x166 (and $x15 $x63)))
 (let ((?x73 (bvadd ?x42 ?x43)))
 (let (($x78 (= ?x73 input.spec-%tmpvar-6.L1%17%bbentry)))
 (let (($x9 (and $x78 $x166)))
 (let (($x79 (= ?x43 input.spec-%var-x1-0.L1%17%bbentry)))
 (let (($x145 (and $x79 $x9)))
 (let (($x25 (= (_ bv45 32) input.spec-%tmpvar-2.L1%18%bbentry)))
 (let (($x175 (and $x25 $x145)))
 (let (($x176 (and $x15 $x175)))
 (let (($x47 (bvugt ?x65 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x46)))
 (let (($x10 (=> (bvule ?x65 (bvsub (bvadd ?x65 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x7 $x47)))))))
 (let (($x44 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x58 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x59 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x58)))
 (let (($x70 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x59 $x44)))))))
 (let (($x37 (and $x70 $x10)))
 (let (($x184 (and $x37 $x176)))
 (let (($x171 (=> $x184 $x170)))
 (not $x171)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L1%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L1%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x160 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x152 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x160)))
 (let ((?x132 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x152)))
 (let ((?x202 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv1 32)))))
 (let ((?x203 (concat ?x202 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%x)))))
 (let ((?x198 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv2 32)))))
 (let ((?x65 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let ((?x46 (bvadd ?x65 (_ bv3 32))))
 (let ((?x31 (concat (select input.dst.llvm-mem ?x46) (concat ?x198 ?x203))))
 (let ((?x130 (bvadd ?x31 ?x132)))
 (let (($x135 (= (_ bv12 32) ?x130)))
 (let (($x158 (= $x135 true)))
 (let (($x170 (= $x158 true)))
 (let ((?x34 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x222 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x258 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x255 (concat ?x258 (concat ?x28 (concat ?x222 ?x34)))))
 (let (($x261 (= ?x255 input.dst.llvm-%x)))
 (let (($x262 (= $x261 true)))
 (let (($x256 (= input.dst.llvm-%x ?x255)))
 (let ((?x221 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x216 (= (_ bv0 32) ?x221)))
 (let ((?x86 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x194 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x86)))
 (let (($x214 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x220 (and $x214 $x194)))
 (let (($x217 (and $x220 $x216)))
 (let (($x213 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x215 (and $x213 $x217)))
 (let (($x204 (forall ((Lambda3 (_ BitVec 32)) )(let ((?x242 (bvadd (bvmul Lambda3 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x49 (concat (select input.dst.llvm-mem (bvadd ?x242 (_ bv1 32))) (select input.dst.llvm-mem ?x242))))
 (let ((?x188 (concat (select input.dst.llvm-mem (bvadd ?x242 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x242 (_ bv2 32))) ?x49))))
 (let ((?x17 (input.spec-%var-x-0.1.1 Lambda3)))
 (let (($x52 (input.spec-%var-x-0.0.1 Lambda3)))
 (let ((?x165 (ite $x52 (_ bv1 32) (_ bv0 32))))
 (let (($x227 (bvuge ?x165 (_ bv1 32))))
 (=> $x227 (= ?x17 ?x188))))))))))
 ))
 (let (($x229 (forall ((Lambda3 (_ BitVec 32)) )(let ((?x133 (ite (and (bvsle (_ bv0 32) Lambda3) (bvslt Lambda3 (_ bv10 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x52 (input.spec-%var-x-0.0.1 Lambda3)))
 (let ((?x165 (ite $x52 (_ bv1 32) (_ bv0 32))))
 (let (($x227 (bvuge ?x165 (_ bv1 32))))
 (= $x227 (bvuge ?x133 (_ bv1 32))))))))
 ))
 (let (($x163 (forall ((Lambda3 (_ BitVec 32)) )(let (($x15 (= false false)))
 (let (($x52 (input.spec-%var-x-0.0.1 Lambda3)))
 (let ((?x165 (ite $x52 (_ bv1 32) (_ bv0 32))))
 (let (($x224 (= ?x165 (_ bv0 32))))
 (=> $x224 $x15))))))
 ))
 (let (($x150 (forall ((Lambda3 (_ BitVec 32)) )(let (($x52 (input.spec-%var-x-0.0.1 Lambda3)))
 (let ((?x165 (ite $x52 (_ bv1 32) (_ bv0 32))))
 (let (($x224 (= ?x165 (_ bv0 32))))
 (= $x224 (= (ite (and (bvsle (_ bv0 32) Lambda3) (bvslt Lambda3 (_ bv10 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x164 (and $x150 $x163)))
 (let (($x230 (and $x164 $x229)))
 (let (($x205 (and $x230 $x204)))
 (let (($x199 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x192 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x56 $x199)))))))
 (let (($x140 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x148 (and true $x140)))
 (let (($x125 (= (bvand ?x65 (_ bv4294967292 32)) ?x65)))
 (let (($x120 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x65 (bvsub ?x65 (_ bv4 32))) (bvult ?x65 (bvsub ?x65 (_ bv4 32))))))
 (let (($x112 (and true $x120)))
 (let (($x138 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x142 (and (and (and $x138 $x112) $x125) $x148)))
 (let (($x149 (and $x138 $x142)))
 (let (($x254 (and (and (and (and $x149 $x192) $x205) $x215) $x256)))
 (let (($x257 (= $x254 true)))
 (let (($x259 (= $x257 true)))
 (let (($x154 (= $x149 true)))
 (let (($x153 (= $x154 true)))
 (let (($x260 (and $x153 $x259)))
 (let (($x263 (and $x260 $x262)))
 (let (($x19 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x74 (ite $x19 (_ bv1 32) (_ bv0 32))))
 (let (($x71 (= ?x74 (_ bv0 32))))
 (let (($x100 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x101 (ite $x100 (_ bv1 32) (_ bv0 32))))
 (let (($x108 (bvuge ?x101 (_ bv1 32))))
 (let (($x116 (and $x108 $x71)))
 (let (($x264 (and $x116 $x263)))
 (let ((?x42 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let (($x115 (= ?x42 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x114 (=> $x108 $x115)))
 (let (($x109 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x110 (= $x108 $x109)))
 (let (($x15 (= false false)))
 (let (($x102 (= ?x101 (_ bv0 32))))
 (let (($x107 (=> $x102 $x15)))
 (let (($x104 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x105 (= $x102 $x104)))
 (let (($x106 (and $x105 $x107)))
 (let (($x111 (and $x106 $x110)))
 (let (($x122 (and $x111 $x114)))
 (let (($x265 (and $x122 $x264)))
 (let ((?x43 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let (($x99 (= ?x43 input.spec-%tmpvar-4.L1%10%d.2)))
 (let (($x93 (bvuge ?x74 (_ bv1 32))))
 (let (($x87 (=> $x93 $x99)))
 (let (($x94 (bvuge input.spec-%tmpvar-4.L1%10%d.0 (_ bv1 32))))
 (let (($x95 (= $x93 $x94)))
 (let (($x91 (=> $x71 $x15)))
 (let (($x90 (= input.spec-%tmpvar-4.L1%10%d.0 (_ bv0 32))))
 (let (($x98 (= $x71 $x90)))
 (let (($x92 (and $x98 $x91)))
 (let (($x96 (and $x92 $x95)))
 (let (($x88 (and $x96 $x87)))
 (let (($x26 (and $x88 $x265)))
 (let (($x64 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x141 (and $x64 $x26)))
 (let (($x39 (= (_ bv1 32) input.spec-%tmpvar-3.L1%10%d)))
 (let (($x241 (and $x39 $x141)))
 (let (($x57 (= ?x42 input.spec-%var-x0-0.L1%10%d)))
 (let (($x11 (and $x57 $x241)))
 (let (($x66 (= (_ bv12 32) input.spec-%tmpvar-5.L1%17%bbentry)))
 (let (($x63 (and $x66 $x11)))
 (let (($x166 (and $x15 $x63)))
 (let ((?x73 (bvadd ?x42 ?x43)))
 (let (($x78 (= ?x73 input.spec-%tmpvar-6.L1%17%bbentry)))
 (let (($x9 (and $x78 $x166)))
 (let (($x79 (= ?x43 input.spec-%var-x1-0.L1%17%bbentry)))
 (let (($x145 (and $x79 $x9)))
 (let (($x25 (= (_ bv45 32) input.spec-%tmpvar-2.L1%18%bbentry)))
 (let (($x175 (and $x25 $x145)))
 (let (($x176 (and $x15 $x175)))
 (let (($x47 (bvugt ?x65 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x46)))
 (let (($x10 (=> (bvule ?x65 (bvsub (bvadd ?x65 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x7 $x47)))))))
 (let (($x44 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x58 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x59 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x58)))
 (let (($x70 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x59 $x44)))))))
 (let (($x37 (and $x70 $x10)))
 (let (($x184 (and $x37 $x176)))
 (let (($x171 (=> $x184 $x170)))
 (not $x171)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 164 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460714/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L1%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L1%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x233 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x239 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x233)))
 (let ((?x235 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x239)))
 (let ((?x208 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv1 32)))))
 (let ((?x13 (concat ?x208 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%x)))))
 (let ((?x127 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv2 32)))))
 (let ((?x83 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let ((?x47 (bvadd ?x83 (_ bv3 32))))
 (let ((?x168 (concat (select input.dst.llvm-mem ?x47) (concat ?x127 ?x13))))
 (let ((?x236 (bvadd ?x168 ?x235)))
 (let (($x234 (= (_ bv45 32) ?x236)))
 (let (($x237 (= $x234 true)))
 (let (($x178 (= $x237 true)))
 (let ((?x210 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x198 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x45 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x128 (concat ?x31 (concat ?x45 (concat ?x198 ?x210)))))
 (let (($x130 (= ?x128 input.dst.llvm-%x)))
 (let (($x135 (= $x130 true)))
 (let (($x161 (= input.dst.llvm-%x ?x128)))
 (let ((?x9 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x145 (= (_ bv0 32) ?x9)))
 (let ((?x11 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x63 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x11)))
 (let (($x241 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x166 (and $x241 $x63)))
 (let (($x175 (and $x166 $x145)))
 (let (($x141 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x176 (and $x141 $x175)))
 (let (($x264 (forall ((Lambda3 (_ BitVec 32)) )(let ((?x222 (bvadd (bvmul Lambda3 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x255 (concat (select input.dst.llvm-mem (bvadd ?x222 (_ bv1 32))) (select input.dst.llvm-mem ?x222))))
 (let ((?x261 (concat (select input.dst.llvm-mem (bvadd ?x222 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x222 (_ bv2 32))) ?x255))))
 (let ((?x73 (input.spec-%var-x-0.1.1 Lambda3)))
 (let (($x91 (input.spec-%var-x-0.0.1 Lambda3)))
 (let ((?x244 (ite $x91 (_ bv1 32) (_ bv0 32))))
 (let (($x188 (bvuge ?x244 (_ bv1 32))))
 (=> $x188 (= ?x73 ?x261))))))))))
 ))
 (let (($x201 (forall ((Lambda3 (_ BitVec 32)) )(let ((?x17 (ite (and (bvsle (_ bv0 32) Lambda3) (bvslt Lambda3 (_ bv10 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x91 (input.spec-%var-x-0.0.1 Lambda3)))
 (let ((?x244 (ite $x91 (_ bv1 32) (_ bv0 32))))
 (let (($x188 (bvuge ?x244 (_ bv1 32))))
 (= $x188 (bvuge ?x17 (_ bv1 32))))))))
 ))
 (let (($x180 (forall ((Lambda3 (_ BitVec 32)) )(let (($x5 (= false false)))
 (let (($x91 (input.spec-%var-x-0.0.1 Lambda3)))
 (let ((?x244 (ite $x91 (_ bv1 32) (_ bv0 32))))
 (let (($x242 (= ?x244 (_ bv0 32))))
 (=> $x242 $x5))))))
 ))
 (let (($x187 (forall ((Lambda3 (_ BitVec 32)) )(let (($x91 (input.spec-%var-x-0.0.1 Lambda3)))
 (let ((?x244 (ite $x91 (_ bv1 32) (_ bv0 32))))
 (let (($x242 (= ?x244 (_ bv0 32))))
 (= $x242 (= (ite (and (bvsle (_ bv0 32) Lambda3) (bvslt Lambda3 (_ bv10 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x167 (and $x187 $x180)))
 (let (($x204 (and $x167 $x201)))
 (let (($x265 (and $x204 $x264)))
 (let (($x52 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x85 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x50 $x52)))))))
 (let (($x154 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x153 (and true $x154)))
 (let (($x139 (= (bvand ?x83 (_ bv4294967292 32)) ?x83)))
 (let (($x131 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x83 (bvsub ?x83 (_ bv4 32))) (bvult ?x83 (bvsub ?x83 (_ bv4 32))))))
 (let (($x143 (and true $x131)))
 (let (($x112 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x191 (and (and (and $x112 $x143) $x139) $x153)))
 (let (($x40 (and $x112 $x191)))
 (let (($x219 (and (and (and (and $x40 $x85) $x265) $x176) $x161)))
 (let (($x160 (= $x219 true)))
 (let (($x152 (= $x160 true)))
 (let (($x56 (= $x40 true)))
 (let (($x199 (= $x56 true)))
 (let (($x132 (and $x199 $x152)))
 (let (($x158 (and $x132 $x135)))
 (let (($x106 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x108 (ite $x106 (_ bv1 32) (_ bv0 32))))
 (let (($x109 (= ?x108 (_ bv0 32))))
 (let (($x170 (and $x109 $x158)))
 (let ((?x66 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let (($x119 (= ?x66 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x122 (bvuge ?x108 (_ bv1 32))))
 (let (($x118 (=> $x122 $x119)))
 (let (($x116 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x123 (= $x122 $x116)))
 (let (($x5 (= false false)))
 (let (($x115 (=> $x109 $x5)))
 (let (($x111 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x121 (= $x109 $x111)))
 (let (($x114 (and $x121 $x115)))
 (let (($x117 (and $x114 $x123)))
 (let (($x147 (and $x117 $x118)))
 (let (($x171 (and $x147 $x170)))
 (let ((?x67 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let (($x104 (= ?x67 input.spec-%tmpvar-4.L1%10%d.2)))
 (let (($x15 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x93 (ite $x15 (_ bv1 32) (_ bv0 32))))
 (let (($x88 (bvuge ?x93 (_ bv1 32))))
 (let (($x105 (=> $x88 $x104)))
 (let (($x100 (bvuge input.spec-%tmpvar-4.L1%10%d.0 (_ bv1 32))))
 (let (($x101 (= $x88 $x100)))
 (let (($x94 (= ?x93 (_ bv0 32))))
 (let (($x99 (=> $x94 $x5)))
 (let (($x96 (= input.spec-%tmpvar-4.L1%10%d.0 (_ bv0 32))))
 (let (($x97 (= $x94 $x96)))
 (let (($x87 (and $x97 $x99)))
 (let (($x102 (and $x87 $x101)))
 (let (($x107 (and $x102 $x105)))
 (let (($x173 (and $x107 $x171)))
 (let (($x98 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x82 (and $x98 $x173)))
 (let (($x89 (= (_ bv1 32) input.spec-%tmpvar-3.L1%10%d)))
 (let (($x155 (and $x89 $x82)))
 (let (($x74 (= ?x66 input.spec-%var-x0-0.L1%10%d)))
 (let (($x249 (and $x74 $x155)))
 (let (($x64 (= (_ bv12 32) input.spec-%tmpvar-5.L1%17%bbentry)))
 (let (($x75 (and $x64 $x249)))
 (let (($x53 (and $x5 $x75)))
 (let ((?x61 (bvadd ?x66 ?x67)))
 (let (($x84 (= ?x61 input.spec-%tmpvar-6.L1%17%bbentry)))
 (let (($x144 (and $x84 $x53)))
 (let (($x81 (= ?x67 input.spec-%var-x1-0.L1%17%bbentry)))
 (let (($x22 (and $x81 $x144)))
 (let (($x79 (= (_ bv45 32) input.spec-%tmpvar-2.L1%18%bbentry)))
 (let (($x157 (and $x79 $x22)))
 (let (($x193 (and $x5 $x157)))
 (let (($x16 (bvugt ?x83 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x47)))
 (let (($x25 (=> (bvule ?x83 (bvsub (bvadd ?x83 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x38 $x16)))))))
 (let (($x14 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x44 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x44)))
 (let (($x48 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x23 $x14)))))))
 (let (($x58 (and $x48 $x25)))
 (let (($x197 (and $x58 $x193)))
 (let (($x246 (=> $x197 $x178)))
 (not $x246))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L1%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L1%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x233 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x239 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x233)))
 (let ((?x235 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x239)))
 (let ((?x208 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv1 32)))))
 (let ((?x13 (concat ?x208 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%x)))))
 (let ((?x127 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv2 32)))))
 (let ((?x83 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let ((?x47 (bvadd ?x83 (_ bv3 32))))
 (let ((?x168 (concat (select input.dst.llvm-mem ?x47) (concat ?x127 ?x13))))
 (let ((?x236 (bvadd ?x168 ?x235)))
 (let (($x234 (= (_ bv45 32) ?x236)))
 (let (($x237 (= $x234 true)))
 (let (($x178 (= $x237 true)))
 (let ((?x210 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x198 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x45 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x128 (concat ?x31 (concat ?x45 (concat ?x198 ?x210)))))
 (let (($x130 (= ?x128 input.dst.llvm-%x)))
 (let (($x135 (= $x130 true)))
 (let (($x161 (= input.dst.llvm-%x ?x128)))
 (let ((?x9 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x145 (= (_ bv0 32) ?x9)))
 (let ((?x11 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x63 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x11)))
 (let (($x241 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x166 (and $x241 $x63)))
 (let (($x175 (and $x166 $x145)))
 (let (($x141 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x176 (and $x141 $x175)))
 (let (($x264 (forall ((Lambda3 (_ BitVec 32)) )(let ((?x222 (bvadd (bvmul Lambda3 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x255 (concat (select input.dst.llvm-mem (bvadd ?x222 (_ bv1 32))) (select input.dst.llvm-mem ?x222))))
 (let ((?x261 (concat (select input.dst.llvm-mem (bvadd ?x222 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x222 (_ bv2 32))) ?x255))))
 (let ((?x73 (input.spec-%var-x-0.1.1 Lambda3)))
 (let (($x91 (input.spec-%var-x-0.0.1 Lambda3)))
 (let ((?x244 (ite $x91 (_ bv1 32) (_ bv0 32))))
 (let (($x188 (bvuge ?x244 (_ bv1 32))))
 (=> $x188 (= ?x73 ?x261))))))))))
 ))
 (let (($x201 (forall ((Lambda3 (_ BitVec 32)) )(let ((?x17 (ite (and (bvsle (_ bv0 32) Lambda3) (bvslt Lambda3 (_ bv10 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x91 (input.spec-%var-x-0.0.1 Lambda3)))
 (let ((?x244 (ite $x91 (_ bv1 32) (_ bv0 32))))
 (let (($x188 (bvuge ?x244 (_ bv1 32))))
 (= $x188 (bvuge ?x17 (_ bv1 32))))))))
 ))
 (let (($x180 (forall ((Lambda3 (_ BitVec 32)) )(let (($x5 (= false false)))
 (let (($x91 (input.spec-%var-x-0.0.1 Lambda3)))
 (let ((?x244 (ite $x91 (_ bv1 32) (_ bv0 32))))
 (let (($x242 (= ?x244 (_ bv0 32))))
 (=> $x242 $x5))))))
 ))
 (let (($x187 (forall ((Lambda3 (_ BitVec 32)) )(let (($x91 (input.spec-%var-x-0.0.1 Lambda3)))
 (let ((?x244 (ite $x91 (_ bv1 32) (_ bv0 32))))
 (let (($x242 (= ?x244 (_ bv0 32))))
 (= $x242 (= (ite (and (bvsle (_ bv0 32) Lambda3) (bvslt Lambda3 (_ bv10 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x167 (and $x187 $x180)))
 (let (($x204 (and $x167 $x201)))
 (let (($x265 (and $x204 $x264)))
 (let (($x52 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x85 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x50 $x52)))))))
 (let (($x154 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x153 (and true $x154)))
 (let (($x139 (= (bvand ?x83 (_ bv4294967292 32)) ?x83)))
 (let (($x131 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x83 (bvsub ?x83 (_ bv4 32))) (bvult ?x83 (bvsub ?x83 (_ bv4 32))))))
 (let (($x143 (and true $x131)))
 (let (($x112 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x191 (and (and (and $x112 $x143) $x139) $x153)))
 (let (($x40 (and $x112 $x191)))
 (let (($x219 (and (and (and (and $x40 $x85) $x265) $x176) $x161)))
 (let (($x160 (= $x219 true)))
 (let (($x152 (= $x160 true)))
 (let (($x56 (= $x40 true)))
 (let (($x199 (= $x56 true)))
 (let (($x132 (and $x199 $x152)))
 (let (($x158 (and $x132 $x135)))
 (let (($x106 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x108 (ite $x106 (_ bv1 32) (_ bv0 32))))
 (let (($x109 (= ?x108 (_ bv0 32))))
 (let (($x170 (and $x109 $x158)))
 (let ((?x66 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let (($x119 (= ?x66 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x122 (bvuge ?x108 (_ bv1 32))))
 (let (($x118 (=> $x122 $x119)))
 (let (($x116 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x123 (= $x122 $x116)))
 (let (($x5 (= false false)))
 (let (($x115 (=> $x109 $x5)))
 (let (($x111 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x121 (= $x109 $x111)))
 (let (($x114 (and $x121 $x115)))
 (let (($x117 (and $x114 $x123)))
 (let (($x147 (and $x117 $x118)))
 (let (($x171 (and $x147 $x170)))
 (let ((?x67 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let (($x104 (= ?x67 input.spec-%tmpvar-4.L1%10%d.2)))
 (let (($x15 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x93 (ite $x15 (_ bv1 32) (_ bv0 32))))
 (let (($x88 (bvuge ?x93 (_ bv1 32))))
 (let (($x105 (=> $x88 $x104)))
 (let (($x100 (bvuge input.spec-%tmpvar-4.L1%10%d.0 (_ bv1 32))))
 (let (($x101 (= $x88 $x100)))
 (let (($x94 (= ?x93 (_ bv0 32))))
 (let (($x99 (=> $x94 $x5)))
 (let (($x96 (= input.spec-%tmpvar-4.L1%10%d.0 (_ bv0 32))))
 (let (($x97 (= $x94 $x96)))
 (let (($x87 (and $x97 $x99)))
 (let (($x102 (and $x87 $x101)))
 (let (($x107 (and $x102 $x105)))
 (let (($x173 (and $x107 $x171)))
 (let (($x98 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x82 (and $x98 $x173)))
 (let (($x89 (= (_ bv1 32) input.spec-%tmpvar-3.L1%10%d)))
 (let (($x155 (and $x89 $x82)))
 (let (($x74 (= ?x66 input.spec-%var-x0-0.L1%10%d)))
 (let (($x249 (and $x74 $x155)))
 (let (($x64 (= (_ bv12 32) input.spec-%tmpvar-5.L1%17%bbentry)))
 (let (($x75 (and $x64 $x249)))
 (let (($x53 (and $x5 $x75)))
 (let ((?x61 (bvadd ?x66 ?x67)))
 (let (($x84 (= ?x61 input.spec-%tmpvar-6.L1%17%bbentry)))
 (let (($x144 (and $x84 $x53)))
 (let (($x81 (= ?x67 input.spec-%var-x1-0.L1%17%bbentry)))
 (let (($x22 (and $x81 $x144)))
 (let (($x79 (= (_ bv45 32) input.spec-%tmpvar-2.L1%18%bbentry)))
 (let (($x157 (and $x79 $x22)))
 (let (($x193 (and $x5 $x157)))
 (let (($x16 (bvugt ?x83 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x47)))
 (let (($x25 (=> (bvule ?x83 (bvsub (bvadd ?x83 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x38 $x16)))))))
 (let (($x14 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x44 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x44)))
 (let (($x48 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x23 $x14)))))))
 (let (($x58 (and $x48 $x25)))
 (let (($x197 (and $x58 $x193)))
 (let (($x246 (=> $x197 $x178)))
 (not $x246))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 163 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460714/query
