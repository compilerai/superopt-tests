=FunctionName: foo
=result: 1
=cg_with_asm_annotation
=cg_with_backtracker
=cg_with_rank
=corr_graph foo.A2.B2.C1
=src_tfg
=TFG_SSA:
=TFG_SPEC src.spec.foo:
=TFG:
=Nodes: L0%0%d L3%6%bbentry L3%7%d L3%8%bbentry L3%10%bbentry E0%0%d
=Edges:
L0%0%d => L3%6%bbentry
L3%6%bbentry => L3%7%d
L3%7%d => L3%10%bbentry
L3%7%d => L3%8%bbentry
L3%8%bbentry => E0%0%d
L3%10%bbentry => L3%6%bbentry (backedge) 
=graph done
=is_ssa_graph:
1
=StartState:
=spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=state_end
=PC to var-version map at L0%0%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%6%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%7%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%8%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%10%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at E0%0%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=graph_with_var_versions done
=FunctionName: foo
=Input: tfg-method-arg.0
=arg addr
1 : (undefined) : UNDEFINED
=arg val
1 : input.spec-%var-x-1 : MAP[BV:32 -> BV:32]
=arg end
=Node outputs: E0%0%d
=Output: spec-%ret-reg
1 : input.spec-%tmpvar-10.E0%0%d : BV:32
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
=Touched symbols:
=Symbol-map done
=Locals-map:
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;foo}
=memlabel_map.0 for call-context {*;foo}
mlheap.src.spec.foo : memlabel-mem--heap
=Edge: L0%0%d => L3%6%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-8.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-ret-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-x-0.L3%6%bbentry
1 : input.spec-%var-x-1 : MAP[BV:32 -> BV:32]
=src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((((func_head*ctor_bv)*ctor_bv)*(inline_entry*func_head))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=Edge: L3%6%bbentry => L3%7%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-0.L3%7%d
1 : input.spec-%var-x-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : input.spec-%var-i-0.L3%6%bbentry : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*intrinsic_app_map_get)
tfg_edge_comment end

=Edge: L3%7%d => L3%10%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:6:match_sum_cond_1
tfg_edge_comment end

=Edge: L3%7%d => L3%8%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:4:match_sum_cond_0
tfg_edge_comment end

=Edge: L3%8%bbentry => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-5.E0%0%d
1 : input.spec-%var-ret-0.L3%6%bbentry : BV:32
=spec-%tmpvar-10.E0%0%d
1 : input.spec-%var-ret-0.L3%6%bbentry : BV:32
=spec-%tmpvar-9.E0%0%d
1 : input.spec-%var-ret-0.L3%6%bbentry : BV:32
=spec-%tmpvar-6.E0%0%d
1 : input.spec-%var-ret-0.L3%6%bbentry : BV:32
=spec-%var-u-0.E0%0%d
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((((bb_entry*match_sum_val_0)*match_sum_merge_0)*func_ret)*(inline_exit*func_ret))
tfg_edge_comment end

=Edge: L3%10%bbentry => L3%6%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%var-i-0.L3%6%bbentry
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%var-ret-0.L3%6%bbentry
1 : input.spec-%var-ret-0.L3%6%bbentry : BV:32
2 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : sum_get(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=spec-%var-x-0.L3%6%bbentry
1 : input.spec-%var-x-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
=src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : input.src.spec-ghostvar.itervar.1.L3%6%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%tmpvar-2.L3%6%bbentry
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-3.L3%6%bbentry
1 : input.spec-%var-ret-0.L3%6%bbentry : BV:32
2 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : sum_get(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=spec-%var-x_i-0.L3%6%bbentry
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(((((bb_entry*match_sum_val_1)*ctor_bv)*intrinsic_app_bvadd)*(intrinsic_app_bvadd*tailrec_backedge))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=graph_with_precondition_done

=Locs in src.spec.foo
=Loc 1 in src.spec.foo.
REGMEM
spec-%var-x-1
1 : input.spec-%var-x-1 : MAP[BV:32 -> BV:32]
=Loc 18 in src.spec.foo.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--heap
=Loc 19 in src.spec.foo.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 20 in src.spec.foo.
REGMEM
spec-%tmpvar-0.L3%7%d
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
=Loc 21 in src.spec.foo.
REGMEM
spec-%var-i-0.L3%6%bbentry
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
=Loc 22 in src.spec.foo.
REGMEM
spec-%var-x-0.L3%6%bbentry
1 : input.spec-%var-x-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
=Loc 23 in src.spec.foo.
REGMEM
spec-%tmpvar-10.E0%0%d
1 : input.spec-%tmpvar-10.E0%0%d : BV:32
=Loc 24 in src.spec.foo.
REGMEM
spec-%tmpvar-5.E0%0%d
1 : input.spec-%tmpvar-5.E0%0%d : BV:32
=Loc 25 in src.spec.foo.
REGMEM
spec-%tmpvar-6.E0%0%d
1 : input.spec-%tmpvar-6.E0%0%d : BV:32
=Loc 26 in src.spec.foo.
REGMEM
spec-%tmpvar-9.E0%0%d
1 : input.spec-%tmpvar-9.E0%0%d : BV:32
=Loc 27 in src.spec.foo.
REGMEM
spec-%var-ret-0.L3%6%bbentry
1 : input.spec-%var-ret-0.L3%6%bbentry : BV:32
=Loc 28 in src.spec.foo.
REGMEM
spec-%var-u-0.E0%0%d
1 : input.spec-%var-u-0.E0%0%d : UNIT
=Loc 29 in src.spec.foo.
REGMEM
spec-%tmpvar-7.L3%6%bbentry
1 : input.spec-%tmpvar-7.L3%6%bbentry : BV:32
=Loc 30 in src.spec.foo.
REGMEM
spec-%tmpvar-8.L3%6%bbentry
1 : input.spec-%tmpvar-8.L3%6%bbentry : BV:32
=Loc 31 in src.spec.foo.
REGMEM
src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : input.src.spec-ghostvar.itervar.1.L3%6%bbentry : BV:32
=Loc 32 in src.spec.foo.
REGMEM
spec-%tmpvar-1.L3%6%bbentry
1 : input.spec-%tmpvar-1.L3%6%bbentry : BV:32
=Loc 33 in src.spec.foo.
REGMEM
spec-%tmpvar-2.L3%6%bbentry
1 : input.spec-%tmpvar-2.L3%6%bbentry : BV:32
=Loc 34 in src.spec.foo.
REGMEM
spec-%tmpvar-3.L3%6%bbentry
1 : input.spec-%tmpvar-3.L3%6%bbentry : BV:32
=Loc 35 in src.spec.foo.
REGMEM
spec-%var-x_i-0.L3%6%bbentry
1 : input.spec-%var-x_i-0.L3%6%bbentry : BV:32
=Locs end
=Liveness in src.spec.foo
=live locs at L0%0%d
1, 
=live locs at L3%6%bbentry
21, 22, 27, 
=live locs at L3%7%d
20, 21, 22, 27, 
=live locs at L3%8%bbentry
27, 
=live locs at L3%10%bbentry
20, 21, 22, 27, 
=live locs at E0%0%d
23[f], 

=Definedness in src.spec.foo
=loc definedness at L0%0%d
1, 18, 19
=loc definedness at L3%6%bbentry
1, 18, 19, 21, 22, 27, 29, 30, 31
=loc definedness at L3%7%d
1, 18, 19, 20, 21, 22, 27, 29, 30, 31
=loc definedness at L3%8%bbentry
1, 18, 19, 20, 21, 22, 27, 29, 30, 31
=loc definedness at L3%10%bbentry
1, 18, 19, 20, 21, 22, 27, 29, 30, 31
=loc definedness at E0%0%d
1, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31

=Branch affecting variable locs in src.spec.foo
=branch affecting variable locs at L0%0%d
1
=branch affecting variable locs at L3%6%bbentry
21, 22
=branch affecting variable locs at L3%7%d
20, 21, 22
=branch affecting variable locs at L3%8%bbentry

=branch affecting variable locs at L3%10%bbentry
21, 22
=branch affecting variable locs at E0%0%d


=Relevant Memlabels in src.spec.foo
=relevant memlabels
=function: foo
memlabel-mem--heap
memlabel-mem--arg.0
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%6%bbentry
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%6%bbentry for loc_id 21 {input.spec-%var-i-0.L3%6%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%6%bbentry for loc_id 22 {input.spec-%var-x-0.L3%6%bbentry }
1 : input.spec-%var-x-1 : MAP[BV:32 -> BV:32]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%6%bbentry for loc_id 27 {input.spec-%var-ret-0.L3%6%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%6%bbentry for loc_id 29 {input.spec-%tmpvar-7.L3%6%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%6%bbentry for loc_id 30 {input.spec-%tmpvar-8.L3%6%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%6%bbentry for loc_id 31 {input.src.spec-ghostvar.itervar.1.L3%6%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%6%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%6%bbentry=>L3%7%d
=graph_with_edge_structures.loc_to_expr_map at L3%6%bbentry=>L3%7%d for loc_id 20 {input.spec-%tmpvar-0.L3%7%d }
1 : input.spec-%var-x-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : input.spec-%var-i-0.L3%6%bbentry : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=graph_with_edge_structures.loc_to_expr_map at L3%6%bbentry=>L3%7%d done
=graph_with_edge_structures.loc_to_expr_map at L3%7%d=>L3%8%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%7%d=>L3%8%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%7%d=>L3%10%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%7%d=>L3%10%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%8%bbentry=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at L3%8%bbentry=>E0%0%d for loc_id 23 {input.spec-%tmpvar-10.E0%0%d }
1 : input.spec-%var-ret-0.L3%6%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%8%bbentry=>E0%0%d for loc_id 24 {input.spec-%tmpvar-5.E0%0%d }
1 : input.spec-%var-ret-0.L3%6%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%8%bbentry=>E0%0%d for loc_id 25 {input.spec-%tmpvar-6.E0%0%d }
1 : input.spec-%var-ret-0.L3%6%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%8%bbentry=>E0%0%d for loc_id 26 {input.spec-%tmpvar-9.E0%0%d }
1 : input.spec-%var-ret-0.L3%6%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%8%bbentry=>E0%0%d for loc_id 28 {input.spec-%var-u-0.E0%0%d }
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=graph_with_edge_structures.loc_to_expr_map at L3%8%bbentry=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map at L3%10%bbentry=>L3%6%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%10%bbentry=>L3%6%bbentry for loc_id 21 {input.spec-%var-i-0.L3%6%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-i-0.L3%6%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%10%bbentry=>L3%6%bbentry for loc_id 27 {input.spec-%var-ret-0.L3%6%bbentry }
1 : input.spec-%var-ret-0.L3%6%bbentry : BV:32
2 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : sum_get(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%10%bbentry=>L3%6%bbentry for loc_id 31 {input.src.spec-ghostvar.itervar.1.L3%6%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.spec-ghostvar.itervar.1.L3%6%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%10%bbentry=>L3%6%bbentry for loc_id 32 {input.spec-%tmpvar-1.L3%6%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%10%bbentry=>L3%6%bbentry for loc_id 33 {input.spec-%tmpvar-2.L3%6%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-i-0.L3%6%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%10%bbentry=>L3%6%bbentry for loc_id 34 {input.spec-%tmpvar-3.L3%6%bbentry }
1 : input.spec-%var-ret-0.L3%6%bbentry : BV:32
2 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : sum_get(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%10%bbentry=>L3%6%bbentry for loc_id 35 {input.spec-%var-x_i-0.L3%6%bbentry }
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%10%bbentry=>L3%6%bbentry done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at L3%6%bbentry:
vacuous mls at L3%7%d:
vacuous mls at L3%8%bbentry:
vacuous mls at L3%10%bbentry:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at L3%6%bbentry:
non-vacuous mls at L3%7%d:
non-vacuous mls at L3%8%bbentry:
non-vacuous mls at L3%10%bbentry:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in src.spec.foo
=avail_exprs begin
=loc 1
=loc_expr
140273 : input.spec-%var-x-1 : MAP[BV:32 -> BV:32]
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 22
=loc_expr
140318 : input.spec-%var-x-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-x-1 : MAP[BV:32 -> BV:32]
=avail_exprs_val.end
=loc 29
=loc_expr
140441 : input.spec-%tmpvar-7.L3%6%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 30
=loc_expr
140442 : input.spec-%tmpvar-8.L3%6%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 32
=loc_expr
140443 : input.spec-%tmpvar-1.L3%6%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 1 { 0x1 +1.11e129 } : BV:32
=avail_exprs_val.end
=avail_exprs end
=sprel_map in src.spec.foo
=loc 29 expr
1 : input.spec-%tmpvar-7.L3%6%bbentry : BV:32
=loc 29 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 30 expr
1 : input.spec-%tmpvar-8.L3%6%bbentry : BV:32
=loc 30 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 32 expr
1 : input.spec-%tmpvar-1.L3%6%bbentry : BV:32
=loc 32 spreled-expr
140288 : 1 { 0x1 +1.11e129 } : BV:32
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;foo}
=loc_id 1 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 18 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 19 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 20 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 21 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 22 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 23 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 24 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 25 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 26 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 27 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 28 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 29 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 30 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 31 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 32 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 33 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 34 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 35 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 29 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 30 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 32 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>L3%6%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%6%bbentry=>L3%7%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%7%d=>L3%8%bbentry
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%7%d=>L3%10%bbentry
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%8%bbentry=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%10%bbentry=>L3%6%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>L3%6%bbentry
=spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-8.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-ret-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-x-0.L3%6%bbentry
1 : input.spec-%var-x-1 : MAP[BV:32 -> BV:32]
=src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%6%bbentry=>L3%7%d
=spec-%tmpvar-0.L3%7%d
1 : input.spec-%var-x-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : input.spec-%var-i-0.L3%6%bbentry : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%7%d=>L3%8%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%7%d=>L3%10%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%8%bbentry=>E0%0%d
=spec-%tmpvar-5.E0%0%d
1 : input.spec-%var-ret-0.L3%6%bbentry : BV:32
=spec-%tmpvar-10.E0%0%d
1 : input.spec-%var-ret-0.L3%6%bbentry : BV:32
=spec-%tmpvar-9.E0%0%d
1 : input.spec-%var-ret-0.L3%6%bbentry : BV:32
=spec-%tmpvar-6.E0%0%d
1 : input.spec-%var-ret-0.L3%6%bbentry : BV:32
=spec-%var-u-0.E0%0%d
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%10%bbentry=>L3%6%bbentry
=spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-i-0.L3%6%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%var-ret-0.L3%6%bbentry
1 : input.spec-%var-ret-0.L3%6%bbentry : BV:32
2 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : sum_get(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.spec-ghostvar.itervar.1.L3%6%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%tmpvar-2.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-i-0.L3%6%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-3.L3%6%bbentry
1 : input.spec-%var-ret-0.L3%6%bbentry : BV:32
2 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : sum_get(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=spec-%var-x_i-0.L3%6%bbentry
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>L3%6%bbentry
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>L3%6%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%6%bbentry=>L3%7%d
=graph_with_simplified_assets.simplified_assumes at L3%6%bbentry=>L3%7%d done
=graph_with_simplified_assets.simplified_assumes at L3%7%d=>L3%8%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%7%d=>L3%8%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%7%d=>L3%10%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%7%d=>L3%10%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%8%bbentry=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at L3%8%bbentry=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes at L3%10%bbentry=>L3%6%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%10%bbentry=>L3%6%bbentry done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
0
=String-contents:
=Nextpc-map:
=Nextpc-map done
=suffixpaths for src.spec.foo
=suffixpath_at_L0%0%d for src.spec.foo
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_L3%6%bbentry for src.spec.foo
=suffixpath_at_L3%6%bbentry.graph_edge_composition
(L0%0%d=>L3%6%bbentry)
=suffixpath_at_L3%7%d for src.spec.foo
=suffixpath_at_L3%7%d.graph_edge_composition
((L0%0%d=>L3%6%bbentry)*(L3%6%bbentry=>L3%7%d))
=suffixpath_at_L3%8%bbentry for src.spec.foo
=suffixpath_at_L3%8%bbentry.graph_edge_composition
((L0%0%d=>L3%6%bbentry)*((L3%6%bbentry=>L3%7%d)*(L3%7%d=>L3%8%bbentry)))
=suffixpath_at_L3%10%bbentry for src.spec.foo
=suffixpath_at_L3%10%bbentry.graph_edge_composition
((L0%0%d=>L3%6%bbentry)*((L3%6%bbentry=>L3%7%d)*(L3%7%d=>L3%10%bbentry)))
=suffixpath_at_E0%0%d for src.spec.foo
=suffixpath_at_E0%0%d.graph_edge_composition
((L0%0%d=>L3%6%bbentry)*((L3%6%bbentry=>L3%7%d)*((L3%7%d=>L3%8%bbentry)*(L3%8%bbentry=>E0%0%d))))
=suffixpaths for src.spec.foo done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>L3%6%bbentry
tfg.assumes_around_edge at L0%0%d=>L3%6%bbentry done
tfg.assumes_around_edge at L3%6%bbentry=>L3%7%d
tfg.assumes_around_edge at L3%6%bbentry=>L3%7%d done
tfg.assumes_around_edge at L3%7%d=>L3%8%bbentry
tfg.assumes_around_edge at L3%7%d=>L3%8%bbentry done
tfg.assumes_around_edge at L3%7%d=>L3%10%bbentry
tfg.assumes_around_edge at L3%7%d=>L3%10%bbentry done
tfg.assumes_around_edge at L3%8%bbentry=>E0%0%d
tfg.assumes_around_edge at L3%8%bbentry=>E0%0%d done
tfg.assumes_around_edge at L3%10%bbentry=>L3%6%bbentry
tfg.assumes_around_edge at L3%10%bbentry=>L3%6%bbentry done
tfg.assumes_around_edge done
=TFGdone
=TFG_SPEC_done
=TFG_SSA_done
=dst_tfg
=TFG_SSA:
=TFG_LLVM dst.llvm.foo:
=TFG:
=Nodes: L0%0%d Lfor.body%1%d Lfor.cond%1%bbentry Lfor.cond%2%d Lfor.end%1%d E0%0%d
=Edges:
L0%0%d => Lfor.cond%1%bbentry
Lfor.cond%1%bbentry => Lfor.cond%2%d
Lfor.cond%2%d => Lfor.body%1%d
Lfor.cond%2%d => Lfor.end%1%d
Lfor.end%1%d => E0%0%d
Lfor.body%1%d => Lfor.cond%1%bbentry (backedge) 
=graph done
=is_ssa_graph:
1
=StartState:
=dst.llvm-%x
1 : input.dst.llvm-%x : BV:32
=dst.llvm-%n
1 : input.dst.llvm-%n : BV:32
=dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=state_end
=PC to var-version map at L0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.body%1%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.cond%1%bbentry
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.cond%2%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.end%1%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at E0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=graph_with_var_versions done
=FunctionName: foo
=Input: tfg-method-arg.0
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%x : BV:32
=arg end
=Input: tfg-method-arg.1
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
=arg val
1 : input.dst.llvm-%n : BV:32
=arg end
=Node outputs: E0%0%d
=Output: heap
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=Output: llvm-indir_tgt
1 : retaddr_const : BV:32
=Output: llvm-%ret-reg
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : foo : 20 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%x : 4 : 4 : 0
C_LOCAL=L0%0%argnum1= : dst.llvm-%n : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;foo}
=memlabel_map.0 for call-context {*;foo}
mlheap.dst.llvm.foo : memlabel-mem-may-straddle-symbol.1-heap
=memlabel_map.1 for call-context {*;foo}
mlvar.dst.llvm.foo.0 : memlabel-mem-no-straddle-symbol.1-heap-arg.0
=Edge: L0%0%d => Lfor.cond%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.local_alloc_count.Lfor.cond%1%bbentry
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:-1:((((((start_pc_edge*  br label %for.cond, !dbg !21)*  %ret.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ], !dbg !15)*(  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ], !dbg !20*  br label %for.cond, !dbg !21))*  br label %for.cond, !dbg !21)*(  br label %for.cond, !dbg !21*  br label %for.cond, !dbg !21))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=Edge: Lfor.cond%1%bbentry => Lfor.cond%2%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%cmp.Lfor.cond%2%d
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*  %cmp = icmp ult i32 %i.0, %n, !dbg !22)
tfg_edge_comment end

=Edge: Lfor.cond%2%d => Lfor.body%1%d
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %cmp, label %for.body, label %for.end, !dbg !24*  br i1 %cmp, label %for.body, label %for.end, !dbg !24)*  br i1 %cmp, label %for.body, label %for.end, !dbg !24)
tfg_edge_comment end

=Edge: Lfor.cond%2%d => Lfor.end%1%d
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
2 : not(1) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %cmp, label %for.body, label %for.end, !dbg !24*  br i1 %cmp, label %for.body, label %for.end, !dbg !24)*  br i1 %cmp, label %for.body, label %for.end, !dbg !24)
tfg_edge_comment end

=Edge: Lfor.end%1%d => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:1:  ret i32 %ret.0, !dbg !33
tfg_edge_comment end

=Edge: Lfor.body%1%d => Lfor.cond%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : mlvar.dst.llvm.foo.0 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 0 { 0x0 +1.0e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : bvadd(5, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(2, 3, 4, 11, 12, 13) : BV:32
15 : bvadd(1, 14) : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%0.Lfor.cond%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
=dst.llvm-%add.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : mlvar.dst.llvm.foo.0 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 0 { 0x0 +1.0e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : bvadd(5, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(2, 3, 4, 11, 12, 13) : BV:32
15 : bvadd(1, 14) : BV:32
=dst.llvm-%arrayidx.Lfor.cond%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(3, 4) : BV:32
6 : bvadd(2, 5) : BV:32
7 : bvadd(1, 6) : BV:32
=dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(3, 4) : BV:32
6 : bvadd(2, 5) : BV:32
7 : bvadd(1, 6) : BV:32
=dst.llvm-%f9857086f688cad98a3e07acb716d2f.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : mlvar.dst.llvm.foo.0 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 0 { 0x0 +1.0e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : bvadd(5, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(2, 3, 4, 11, 12, 13) : BV:32
15 : bvadd(1, 14) : BV:32
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : input.dst.llvm-%x : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(3, 4) : BV:32
6 : bvadd(2, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : 4 { 0x4 +1.0e1025 } : INT
9 : islangaligned(7, 8) : BOOL
=EdgeAssume.1
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvslt(1, 2) : BOOL
4 : 32 { 0x20 +1.0e1025 } : INT
5 : bvsign_ext(1, 4) : BV:64
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvzero_ext(6, 4) : BV:64
8 : bvmul(5, 7) : BV:64
9 : 63 { 0x3f +1.0e1025 } : INT
10 : bvextract(8, 9, 4) : BV:32
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : eq(10, 11) : BOOL
13 : eq(10, 2) : BOOL
14 : ite(3, 12, 13) : BOOL
15 : 4 { 0x4 +1.0e1025 } : INT
16 : isindexforsize(14, 15) : BOOL
17 : input.dst.llvm-%x : BV:32
18 : bvmul(1, 6) : BV:32
19 : bvadd(2, 18) : BV:32
20 : bvadd(17, 19) : BV:32
21 : isgepoffset(20, 18) : BOOL
22 : and(16, 21) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:1:((  %arrayidx = getelementptr inbounds i32, i32* %x, i32 %i.0, !dbg !25*(  %arrayidx = getelementptr inbounds i32, i32* %x, i32 %i.0, !dbg !25*  %arrayidx = getelementptr inbounds i32, i32* %x, i32 %i.0, !dbg !25))*((((  %0 = load i32, i32* %arrayidx, align 4, !dbg !25*  %0 = load i32, i32* %arrayidx, align 4, !dbg !25)*(((  %add = add i32 %ret.0, %0, !dbg !27*  br label %for.inc, !dbg !28)*  br label %for.inc, !dbg !28)*  br label %for.inc, !dbg !28))*(((((  %inc = add i32 %i.0, 1, !dbg !29*  br label %for.cond, !dbg !30, !llvm.loop !31)*  %ret.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ], !dbg !15)*(  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ], !dbg !20*  br label %for.cond, !dbg !30, !llvm.loop !31))*  br label %for.cond, !dbg !30, !llvm.loop !31)*(  br label %for.cond, !dbg !30, !llvm.loop !31*  br label %for.cond, !dbg !30, !llvm.loop !31)))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge)))
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%x : BV:32
=predicate done
=start_pc_precondition.1
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%n : BV:32
=predicate done
=graph_with_precondition_done

=Locs in dst.llvm.foo
=Loc 100006 in dst.llvm.foo.
REGMEM
dst.llvm-%n
1 : input.dst.llvm-%n : BV:32
=Loc 100009 in dst.llvm.foo.
REGMEM
dst.llvm-%x
1 : input.dst.llvm-%x : BV:32
=Loc 100017 in dst.llvm.foo.
REGMEM
dst.llvm-%hidden-reg
1 : input.dst.llvm-%hidden-reg : BV:32
=Loc 100019 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.0
1 : input.dst.llvm-callee-save.0 : BV:32
=Loc 100020 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.1
1 : input.dst.llvm-callee-save.1 : BV:32
=Loc 100021 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.2
1 : input.dst.llvm-callee-save.2 : BV:32
=Loc 100022 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.3
1 : input.dst.llvm-callee-save.3 : BV:32
=Loc 100026 in dst.llvm.foo.
REGMEM
dst.local_alloc_count.=L0%0%d=
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=Loc 100027 in dst.llvm.foo.
REGMEM
dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=Loc 100028 in dst.llvm.foo.
REGMEM
dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
=Loc 100030 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 100031 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/
=Loc 100032 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
=Loc 100033 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem-may-straddle-symbol.1-heap
=Loc 100034 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.1
=Loc 100035 in dst.llvm.foo.
REGMEM
dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=Loc 100036 in dst.llvm.foo.
REGMEM
dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=Loc 100037 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=Loc 100038 in dst.llvm.foo.
REGMEM
dst.llvm-indir_tgt.E0%0%d
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=Loc 100039 in dst.llvm.foo.
REGMEM
dst.llvm-%cmp.Lfor.cond%2%d
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=Loc 100040 in dst.llvm.foo.
REGMEM
dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=Loc 100041 in dst.llvm.foo.
REGMEM
dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=Loc 100042 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=Loc 100043 in dst.llvm.foo.
REGMEM
dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=Loc 100044 in dst.llvm.foo.
REGMEM
dst.llvm-%0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%0.Lfor.cond%1%bbentry : BV:32
=Loc 100045 in dst.llvm.foo.
REGMEM
dst.llvm-%add.Lfor.cond%1%bbentry
1 : input.dst.llvm-%add.Lfor.cond%1%bbentry : BV:32
=Loc 100046 in dst.llvm.foo.
REGMEM
dst.llvm-%arrayidx.Lfor.cond%1%bbentry
1 : input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry : BV:32
=Loc 100047 in dst.llvm.foo.
REGMEM
dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=Loc 100048 in dst.llvm.foo.
REGMEM
dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=Loc 100049 in dst.llvm.foo.
REGMEM
dst.llvm-%f9857086f688cad98a3e07acb716d2f.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=Loc 100050 in dst.llvm.foo.
REGMEM
dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=Loc 100051 in dst.llvm.foo.
REGMEM
dst.llvm-%inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=Loc 100052 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=Loc 100053 in dst.llvm.foo.
REGMEM
dst.local_alloc_count.Lfor.cond%1%bbentry
1 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
=Loc 100054 in dst.llvm.foo.
REGMEM
dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : ROUNDING_MODE
=Locs end
=Liveness in dst.llvm.foo
=live locs at L0%0%d
100006, 100009, 100031, 100032, 100033, 
=live locs at Lfor.body%1%d
100006, 100009, 100031, 100032, 100033, 100037, 100040, 
=live locs at Lfor.cond%1%bbentry
100006, 100009, 100031, 100032, 100033, 100037[f], 100040, 
=live locs at Lfor.cond%2%d
100006, 100009, 100031, 100032, 100033, 100037[f], 100039, 100040, 
=live locs at Lfor.end%1%d
100033, 100037[f], 
=live locs at E0%0%d
100033, 100037[f], 

=Definedness in dst.llvm.foo
=loc definedness at L0%0%d
100006, 100009, 100027, 100028, 100030, 100031, 100032, 100033, 100034
=loc definedness at Lfor.body%1%d
100006, 100009, 100027, 100028, 100030, 100031, 100032, 100033, 100034, 100037, 100039, 100040, 100041, 100042, 100043, 100053, 100054
=loc definedness at Lfor.cond%1%bbentry
100006, 100009, 100027, 100028, 100030, 100031, 100032, 100033, 100034, 100037, 100040, 100041, 100042, 100043, 100053, 100054
=loc definedness at Lfor.cond%2%d
100006, 100009, 100027, 100028, 100030, 100031, 100032, 100033, 100034, 100037, 100039, 100040, 100041, 100042, 100043, 100053, 100054
=loc definedness at Lfor.end%1%d
100006, 100009, 100027, 100028, 100030, 100031, 100032, 100033, 100034, 100037, 100039, 100040, 100041, 100042, 100043, 100053, 100054
=loc definedness at E0%0%d
100006, 100009, 100027, 100028, 100030, 100031, 100032, 100033, 100034, 100035, 100036, 100037, 100038, 100039, 100040, 100041, 100042, 100043, 100053, 100054

=Branch affecting variable locs in dst.llvm.foo
=branch affecting variable locs at L0%0%d
100006
=branch affecting variable locs at Lfor.body%1%d
100006, 100040
=branch affecting variable locs at Lfor.cond%1%bbentry
100006, 100040
=branch affecting variable locs at Lfor.cond%2%d
100006, 100039, 100040
=branch affecting variable locs at Lfor.end%1%d

=branch affecting variable locs at E0%0%d


=Relevant Memlabels in dst.llvm.foo
=relevant memlabels
=function: foo
memlabel-mem--arg.0
memlabel-mem-may-straddle-symbol.1-heap
memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
memlabel-mem--arg.1
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100037 {input.dst.llvm-%ret.0.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100040 {input.dst.llvm-%i.0.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100041 {input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100042 {input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100043 {input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100053 {input.dst.local_alloc_count.Lfor.cond%1%bbentry }
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100054 {input.dst.cur_rounding_mode.Lfor.cond%1%bbentry }
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100037 {input.dst.llvm-%ret.0.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(2, 3, 4, 9, 10, 11) : BV:32
13 : bvadd(1, 12) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100040 {input.dst.llvm-%i.0.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100043 {input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100044 {input.dst.llvm-%0.Lfor.cond%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100045 {input.dst.llvm-%add.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(2, 3, 4, 9, 10, 11) : BV:32
13 : bvadd(1, 12) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100046 {input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100047 {input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.1.total_offset.Lfor.cond%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100048 {input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.2.total_offset.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100049 {input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100050 {input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100051 {input.dst.llvm-%inc.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100052 {input.dst.llvm-%ret.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(2, 3, 4, 9, 10, 11) : BV:32
13 : bvadd(1, 12) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%1%bbentry=>Lfor.cond%2%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%1%bbentry=>Lfor.cond%2%d for loc_id 100039 {input.dst.llvm-%cmp.Lfor.cond%2%d }
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%1%bbentry=>Lfor.cond%2%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.body%1%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.body%1%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.end%1%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.end%1%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.end%1%d=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.end%1%d=>E0%0%d for loc_id 100035 {input.dst.llvm-%hidden-reg.E0%0%d }
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.end%1%d=>E0%0%d for loc_id 100036 {input.dst.llvm-%ret-reg.E0%0%d }
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.end%1%d=>E0%0%d for loc_id 100038 {input.dst.llvm-indir_tgt.E0%0%d }
1 : retaddr_const : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.end%1%d=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at Lfor.body%1%d:
vacuous mls at Lfor.cond%1%bbentry:
vacuous mls at Lfor.cond%2%d:
vacuous mls at Lfor.end%1%d:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at Lfor.body%1%d:
non-vacuous mls at Lfor.cond%1%bbentry:
non-vacuous mls at Lfor.cond%2%d:
non-vacuous mls at Lfor.end%1%d:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in dst.llvm.foo
=avail_exprs begin
=loc 100006
=loc_expr
140354 : input.dst.llvm-%n : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100009
=loc_expr
140353 : input.dst.llvm-%x : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100017
=loc_expr
140400 : input.dst.llvm-%hidden-reg : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100019
=loc_expr
140401 : input.dst.llvm-callee-save.0 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100020
=loc_expr
140403 : input.dst.llvm-callee-save.1 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100021
=loc_expr
140405 : input.dst.llvm-callee-save.2 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100022
=loc_expr
140407 : input.dst.llvm-callee-save.3 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100026
=loc_expr
140363 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100027
=loc_expr
140357 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100028
=loc_expr
140358 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100035
=loc_expr
140526 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=avail_exprs_val.end
=loc 100036
=loc_expr
140527 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.end
=loc 100038
=loc_expr
140528 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : retaddr_const : BV:32
=avail_exprs_val.end
=loc 100041
=loc_expr
140529 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100042
=loc_expr
140530 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100053
=loc_expr
140540 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.end
=loc 100054
=loc_expr
140541 : input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : ROUNDING_MODE
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=avail_exprs_val.end
=avail_exprs end
=sprel_map in dst.llvm.foo
=loc 100038 expr
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=loc 100038 spreled-expr
140267 : retaddr_const : BV:32
=loc 100041 expr
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=loc 100041 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100042 expr
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=loc 100042 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100053 expr
1 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
=loc 100053 spreled-expr
140363 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=loc 100054 expr
1 : input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : ROUNDING_MODE
=loc 100054 spreled-expr
140362 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;foo}
=loc_id 100006 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.1, )
=loc_id 100009 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100017 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100019 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100020 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100021 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100022 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100026 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100027 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100028 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100030 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100031 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100032 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100033 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100034 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100035 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100036 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100037 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100038 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100039 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100040 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100041 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100042 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100043 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100044 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100045 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100046 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100047 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100048 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100049 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100050 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100051 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100052 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100053 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100054 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 100038 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100041 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100042 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100053 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100054 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>Lfor.cond%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.body%1%d=>Lfor.cond%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond%1%bbentry=>Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond%2%d=>Lfor.body%1%d
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond%2%d=>Lfor.end%1%d
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
2 : not(1) : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.end%1%d=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>Lfor.cond%1%bbentry
=dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.local_alloc_count.Lfor.cond%1%bbentry
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.body%1%d=>Lfor.cond%1%bbentry
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(2, 3, 4, 9, 10, 11) : BV:32
13 : bvadd(1, 12) : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%0.Lfor.cond%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
=dst.llvm-%add.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(2, 3, 4, 9, 10, 11) : BV:32
13 : bvadd(1, 12) : BV:32
=dst.llvm-%arrayidx.Lfor.cond%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%f9857086f688cad98a3e07acb716d2f.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%inc.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(2, 3, 4, 9, 10, 11) : BV:32
13 : bvadd(1, 12) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond%1%bbentry=>Lfor.cond%2%d
=dst.llvm-%cmp.Lfor.cond%2%d
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond%2%d=>Lfor.body%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond%2%d=>Lfor.end%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.end%1%d=>E0%0%d
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lfor.cond%1%bbentry
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lfor.cond%1%bbentry assume# 0
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lfor.cond%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%d=>Lfor.cond%1%bbentry
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%d=>Lfor.cond%1%bbentry assume# 0
1 : 4 { 0x4 +1.0e1025 } : BV:64
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : 32 { 0x20 +1.0e1025 } : INT
4 : bvsign_ext(2, 3) : BV:64
5 : bvmul(1, 4) : BV:64
6 : 63 { 0x3f +1.0e1025 } : INT
7 : bvextract(5, 6, 3) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvslt(2, 8) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : ite(9, 10, 8) : BV:32
12 : eq(7, 11) : BOOL
13 : 4 { 0x4 +1.0e1025 } : INT
14 : isindexforsize(12, 13) : BOOL
15 : input.dst.llvm-%x : BV:32
16 : 4 { 0x4 +1.47e129 } : BV:32
17 : bvmul(16, 2) : BV:32
18 : bvadd(15, 17) : BV:32
19 : isgepoffset(18, 17) : BOOL
20 : and(14, 19) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%d=>Lfor.cond%1%bbentry assume# 1
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
6 : 4 { 0x4 +1.0e1025 } : INT
7 : islangaligned(5, 6) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%d=>Lfor.cond%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%1%bbentry=>Lfor.cond%2%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%1%bbentry=>Lfor.cond%2%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.body%1%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.body%1%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.end%1%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.end%1%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.end%1%d=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at Lfor.end%1%d=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
1
=String-contents:
=Nextpc-map:
=Nextpc-map done
=suffixpaths for dst.llvm.foo
=suffixpath_at_L0%0%d for dst.llvm.foo
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_Lfor.body%1%d for dst.llvm.foo
=suffixpath_at_Lfor.body%1%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*(Lfor.cond%2%d=>Lfor.body%1%d)))
=suffixpath_at_Lfor.cond%1%bbentry for dst.llvm.foo
=suffixpath_at_Lfor.cond%1%bbentry.graph_edge_composition
(L0%0%d=>Lfor.cond%1%bbentry)
=suffixpath_at_Lfor.cond%2%d for dst.llvm.foo
=suffixpath_at_Lfor.cond%2%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.cond%2%d))
=suffixpath_at_Lfor.end%1%d for dst.llvm.foo
=suffixpath_at_Lfor.end%1%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*(Lfor.cond%2%d=>Lfor.end%1%d)))
=suffixpath_at_E0%0%d for dst.llvm.foo
=suffixpath_at_E0%0%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.end%1%d)*(Lfor.end%1%d=>E0%0%d))))
=suffixpaths for dst.llvm.foo done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry assume #0
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry assume #0.ec
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry assume #0.pred
=Comment
undef-behaviour-align-assume.edge.L0%0%d=>Lfor.cond%1%bbentry
=LhsExpr
140353 : input.dst.llvm-%x : BV:32
140344 : 4 { 0x4 +1.0e1025 } : INT
140364 : islangaligned(140353, 140344) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry done
tfg.assumes_around_edge at Lfor.body%1%d=>Lfor.cond%1%bbentry
tfg.assumes_around_edge at Lfor.body%1%d=>Lfor.cond%1%bbentry assume #0
tfg.assumes_around_edge at Lfor.body%1%d=>Lfor.cond%1%bbentry assume #0.ec
tfg.assumes_around_edge at Lfor.body%1%d=>Lfor.cond%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lfor.body%1%d=>Lfor.cond%1%bbentry assume #0.pred
=Comment
undef-behavioursome.edge.Lfor.body%1%d=>Lfor.cond%1%bbentry
=LhsExpr
140435 : 4 { 0x4 +1.0e1025 } : BV:64
140505 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
140376 : 32 { 0x20 +1.0e1025 } : INT
140516 : bvsign_ext(140505, 140376) : BV:64
140581 : bvmul(140435, 140516) : BV:64
140380 : 63 { 0x3f +1.0e1025 } : INT
140582 : bvextract(140581, 140380, 140376) : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
140515 : bvslt(140505, 140276) : BOOL
140382 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
140595 : ite(140515, 140382, 140276) : BV:32
140597 : eq(140582, 140595) : BOOL
140344 : 4 { 0x4 +1.0e1025 } : INT
140599 : isindexforsize(140597, 140344) : BOOL
140353 : input.dst.llvm-%x : BV:32
140341 : 4 { 0x4 +1.47e129 } : BV:32
140551 : bvmul(140341, 140505) : BV:32
140554 : bvadd(140353, 140551) : BV:32
140601 : isgepoffset(140554, 140551) : BOOL
140603 : and(140599, 140601) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lfor.body%1%d=>Lfor.cond%1%bbentry assume #1
tfg.assumes_around_edge at Lfor.body%1%d=>Lfor.cond%1%bbentry assume #1.ec
tfg.assumes_around_edge at Lfor.body%1%d=>Lfor.cond%1%bbentry assume #1.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lfor.body%1%d=>Lfor.cond%1%bbentry assume #1.pred
=Comment
undef-behaviour-align-assume.edge.Lfor.body%1%d=>Lfor.cond%1%bbentry
=LhsExpr
140353 : input.dst.llvm-%x : BV:32
140341 : 4 { 0x4 +1.47e129 } : BV:32
140505 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
140551 : bvmul(140341, 140505) : BV:32
140554 : bvadd(140353, 140551) : BV:32
140344 : 4 { 0x4 +1.0e1025 } : INT
140572 : islangaligned(140554, 140344) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lfor.body%1%d=>Lfor.cond%1%bbentry done
tfg.assumes_around_edge at Lfor.cond%1%bbentry=>Lfor.cond%2%d
tfg.assumes_around_edge at Lfor.cond%1%bbentry=>Lfor.cond%2%d done
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.body%1%d
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.body%1%d done
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.end%1%d
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.end%1%d done
tfg.assumes_around_edge at Lfor.end%1%d=>E0%0%d
tfg.assumes_around_edge at Lfor.end%1%d=>E0%0%d done
tfg.assumes_around_edge done
=TFGdone
=PC_to_linename:
=pc
Lentry%1%d
=linename
line 3
=pc
Lfor.body%1%d
=linename
line 4
=pc
Lfor.body%2%d
=linename
line 4
=pc
Lfor.body%3%d
=linename
line 4
=pc
Lfor.body%4%d
=linename
line 5
=pc
Lfor.cond%1%d
=linename
line 3
=pc
Lfor.cond%2%d
=linename
line 3
=pc
Lfor.end%1%d
=linename
line 6
=pc
Lfor.inc%1%d
=linename
line 3
=pc
Lfor.inc%2%d
=linename
line 3
=PC_to_linename done
=PC_to_column_name:
=pc
Lentry%1%d
=column_name
 at column 8
=pc
Lfor.body%1%d
=column_name
 at column 12
=pc
Lfor.body%2%d
=column_name
 at column 12
=pc
Lfor.body%3%d
=column_name
 at column 9
=pc
Lfor.body%4%d
=column_name
 at column 3
=pc
Lfor.cond%1%d
=column_name
 at column 26
=pc
Lfor.cond%2%d
=column_name
 at column 3
=pc
Lfor.end%1%d
=column_name
 at column 3
=pc
Lfor.inc%1%d
=column_name
 at column 31
=pc
Lfor.inc%2%d
=column_name
 at column 3
=PC_to_column_name done
=PC_to_line_and_column:
=pc
Lentry%1%d
=line_and_column
(line 3 at column 8)
=pc
Lfor.body%1%d
=line_and_column
(line 4 at column 12)
=pc
Lfor.body%2%d
=line_and_column
(line 4 at column 12)
=pc
Lfor.body%3%d
=line_and_column
(line 4 at column 9)
=pc
Lfor.body%4%d
=line_and_column
line 5
=pc
Lfor.cond%1%d
=line_and_column
(line 3 at column 26)
=pc
Lfor.cond%2%d
=line_and_column
(line 3 at column 3)
=pc
Lfor.end%1%d
=line_and_column
line 6
=pc
Lfor.inc%1%d
=line_and_column
(line 3 at column 31)
=pc
Lfor.inc%2%d
=line_and_column
(line 3 at column 3)
=PC_to_line_and_column done
=SourceToLLVMVarnames:
=SourceToLLVMVarnames done
=InputLLVMToSourceVarnames:
input.dst.llvm-%x : L0%0%d : x'
input.dst.llvm-%n : L0%0%d : n'
input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : L0%0%d : input.dst.local./*___y___foo__x__=L0%0%argnum0=/
input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : L0%0%d : input.dst.local./*___y___foo__x__=L0%0%argnum1=/
input.dst.llvm-%ret.0 : Lfor.cond%1%bbentry : ret'
input.dst.local_alloc_count.=L0%0%d= : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.llvm-%i.0.phi.tmpvar.entry : L0%0%d : 0
input.dst.llvm-%ret.0.phi.tmpvar.entry : L0%0%d : 0
input.dst.llvm-%i.0 : Lfor.cond%1%bbentry : i'
input.dst.llvm-%0 : L0%0%d : DSTMEM[input.dst.llvm-%arrayidx]_4
input.dst.llvm-%add : Lfor.body%4%bbentry : ret'
input.dst.llvm-%inc : Lfor.inc%2%bbentry : i'
input.dst.llvm-%hidden-reg : L0%0%d : input.dst.llvm-%hidden-reg
input.dst.llvm-callee-save.0 : L0%0%d : input.dst.llvm-callee-save.0
input.dst.llvm-callee-save.1 : L0%0%d : input.dst.llvm-callee-save.1
input.dst.llvm-callee-save.2 : L0%0%d : input.dst.llvm-callee-save.2
input.dst.llvm-callee-save.3 : L0%0%d : input.dst.llvm-callee-save.3
input.dst.llvm-%arrayidx : L0%0%d : input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.2.total_offset
input.dst.llvm-%ret.0.phi.tmpvar.for.inc : L0%0%d : input.dst.llvm-%add
input.dst.llvm-%ret-reg : L0%0%d : input.dst.llvm-%ret.0
input.dst.llvm-indir_tgt : L0%0%d : return-address
input.dst.local_alloc_count : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.cur_rounding_mode : L0%0%d : ROUND_to_nearest_ties_to_even
input.dst.llvm-indir_tgt.E0%0%d : L0%0%d : return-address
input.dst.llvm-%hidden-reg.E0%0%d : L0%0%d : bvxor(bvxor(bvxor(bvxor(input.dst.llvm-%hidden-reg, input.dst.llvm-callee-save.0), input.dst.llvm-callee-save.1), input.dst.llvm-callee-save.2), input.dst.llvm-callee-save.3)
input.dst.llvm-%ret-reg.E0%0%d : L0%0%d : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : L0%0%d : 0
input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : L0%0%d : 0
input.dst.local_alloc_count.Lfor.cond%1%bbentry : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : L0%0%d : ROUND_to_nearest_ties_to_even
=InputLLVMToSourceVarnames done
=PotentialSCEVRelations:
=dst.llvm-%i.0
=dst.llvm-%i.0 loop pc: Lfor.cond%1%d
=dst.llvm-%i.0 val_scevb
=dst.llvm-%i.0 val_scevb scev
=dst.llvm-%i.0 val_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%i.0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%i.0 val_scevb scev scev_expr
1 : 00000000000000000000000000000000b
2 : 00000000000000000000000000000001b
3 : scev_op_addrec(1, 2) : loop Lfor.cond%1%d : 
=dst.llvm-%i.0 val_scevb scev scev_expr done
=dst.llvm-%i.0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%i.0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%i.0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%i.0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%i.0 atuse_scevb
=dst.llvm-%i.0 atuse_scevb scev
=dst.llvm-%i.0 atuse_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%i.0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%i.0 atuse_scevb scev scev_expr
1 : 00000000000000000000000000000000b
2 : 00000000000000000000000000000001b
3 : scev_op_addrec(1, 2) : loop Lfor.cond%1%d : 
=dst.llvm-%i.0 atuse_scevb scev scev_expr done
=dst.llvm-%i.0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%i.0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%i.0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%i.0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%i.0 atexit_scev
=dst.llvm-%i.0 atexit_scev loop: L0%0%d
=dst.llvm-%i.0 atexit_scev scev_overflow_flag: 
=dst.llvm-%i.0 atexit_scev scev_expr
4 : input.dst.llvm-%n : BV32
=dst.llvm-%i.0 atexit_scev scev_expr done
=dst.llvm-%ret.0
=dst.llvm-%ret.0 loop pc: Lfor.cond%1%d
=dst.llvm-%ret.0 val_scevb
=dst.llvm-%ret.0 val_scevb scev
=dst.llvm-%ret.0 val_scevb scev loop: L0%0%d
=dst.llvm-%ret.0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%ret.0 val_scevb scev scev_expr
5 : input.dst.llvm-%ret.0 : BV32
=dst.llvm-%ret.0 val_scevb scev scev_expr done
=dst.llvm-%ret.0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%ret.0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%ret.0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%ret.0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%ret.0 atuse_scevb
=dst.llvm-%ret.0 atuse_scevb scev
=dst.llvm-%ret.0 atuse_scevb scev loop: L0%0%d
=dst.llvm-%ret.0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%ret.0 atuse_scevb scev scev_expr
5 : input.dst.llvm-%ret.0 : BV32
=dst.llvm-%ret.0 atuse_scevb scev scev_expr done
=dst.llvm-%ret.0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%ret.0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%ret.0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%ret.0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%ret.0 atexit_scev
=dst.llvm-%ret.0 atexit_scev loop: L0%0%d
=dst.llvm-%ret.0 atexit_scev scev_overflow_flag: 
=dst.llvm-%ret.0 atexit_scev scev_expr
5 : input.dst.llvm-%ret.0 : BV32
=dst.llvm-%ret.0 atexit_scev scev_expr done
=dst.llvm-%arrayidx
=dst.llvm-%arrayidx loop pc: Lfor.cond%1%d
=dst.llvm-%arrayidx val_scevb
=dst.llvm-%arrayidx val_scevb scev
=dst.llvm-%arrayidx val_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%arrayidx val_scevb scev scev_overflow_flag: 
=dst.llvm-%arrayidx val_scevb scev scev_expr
6 : input.dst.llvm-%x : BV32
7 : 00000000000000000000000000000100b
8 : scev_op_addrec(6, 7) : loop Lfor.cond%1%d : 
=dst.llvm-%arrayidx val_scevb scev scev_expr done
=dst.llvm-%arrayidx val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%arrayidx val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%arrayidx val_scevb signed lower bound: 32:4294967295
=dst.llvm-%arrayidx val_scevb signed upper bound: 32:4294967295
=dst.llvm-%arrayidx atuse_scevb
=dst.llvm-%arrayidx atuse_scevb scev
=dst.llvm-%arrayidx atuse_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%arrayidx atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%arrayidx atuse_scevb scev scev_expr
6 : input.dst.llvm-%x : BV32
7 : 00000000000000000000000000000100b
8 : scev_op_addrec(6, 7) : loop Lfor.cond%1%d : 
=dst.llvm-%arrayidx atuse_scevb scev scev_expr done
=dst.llvm-%arrayidx atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%arrayidx atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%arrayidx atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%arrayidx atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%arrayidx atexit_scev
=dst.llvm-%arrayidx atexit_scev loop: L0%0%d
=dst.llvm-%arrayidx atexit_scev scev_overflow_flag: 
=dst.llvm-%arrayidx atexit_scev scev_expr
7 : 00000000000000000000000000000100b
4 : input.dst.llvm-%n : BV32
9 : scev_op_mul(7, 4) : loop L0%0%d : 
6 : input.dst.llvm-%x : BV32
10 : scev_op_add(9, 6) : loop L0%0%d : 
=dst.llvm-%arrayidx atexit_scev scev_expr done
=dst.llvm-%0
=dst.llvm-%0 loop pc: Lfor.cond%1%d
=dst.llvm-%0 val_scevb
=dst.llvm-%0 val_scevb scev
=dst.llvm-%0 val_scevb scev loop: L0%0%d
=dst.llvm-%0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%0 val_scevb scev scev_expr
11 : input.dst.llvm-%0 : BV32
=dst.llvm-%0 val_scevb scev scev_expr done
=dst.llvm-%0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%0 atuse_scevb
=dst.llvm-%0 atuse_scevb scev
=dst.llvm-%0 atuse_scevb scev loop: L0%0%d
=dst.llvm-%0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%0 atuse_scevb scev scev_expr
11 : input.dst.llvm-%0 : BV32
=dst.llvm-%0 atuse_scevb scev scev_expr done
=dst.llvm-%0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%0 atexit_scev
=dst.llvm-%0 atexit_scev loop: L0%0%d
=dst.llvm-%0 atexit_scev scev_overflow_flag: 
=dst.llvm-%0 atexit_scev scev_expr
11 : input.dst.llvm-%0 : BV32
=dst.llvm-%0 atexit_scev scev_expr done
=dst.llvm-%add
=dst.llvm-%add loop pc: Lfor.cond%1%d
=dst.llvm-%add val_scevb
=dst.llvm-%add val_scevb scev
=dst.llvm-%add val_scevb scev loop: L0%0%d
=dst.llvm-%add val_scevb scev scev_overflow_flag: 
=dst.llvm-%add val_scevb scev scev_expr
11 : input.dst.llvm-%0 : BV32
5 : input.dst.llvm-%ret.0 : BV32
12 : scev_op_add(11, 5) : loop L0%0%d : 
=dst.llvm-%add val_scevb scev scev_expr done
=dst.llvm-%add val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%add val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%add val_scevb signed lower bound: 32:4294967295
=dst.llvm-%add val_scevb signed upper bound: 32:4294967295
=dst.llvm-%add atuse_scevb
=dst.llvm-%add atuse_scevb scev
=dst.llvm-%add atuse_scevb scev loop: L0%0%d
=dst.llvm-%add atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%add atuse_scevb scev scev_expr
11 : input.dst.llvm-%0 : BV32
5 : input.dst.llvm-%ret.0 : BV32
12 : scev_op_add(11, 5) : loop L0%0%d : 
=dst.llvm-%add atuse_scevb scev scev_expr done
=dst.llvm-%add atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%add atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%add atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%add atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%add atexit_scev
=dst.llvm-%add atexit_scev loop: L0%0%d
=dst.llvm-%add atexit_scev scev_overflow_flag: 
=dst.llvm-%add atexit_scev scev_expr
11 : input.dst.llvm-%0 : BV32
5 : input.dst.llvm-%ret.0 : BV32
12 : scev_op_add(11, 5) : loop L0%0%d : 
=dst.llvm-%add atexit_scev scev_expr done
=dst.llvm-%inc
=dst.llvm-%inc loop pc: Lfor.cond%1%d
=dst.llvm-%inc val_scevb
=dst.llvm-%inc val_scevb scev
=dst.llvm-%inc val_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%inc val_scevb scev scev_overflow_flag: 
=dst.llvm-%inc val_scevb scev scev_expr
2 : 00000000000000000000000000000001b
13 : scev_op_addrec(2, 2) : loop Lfor.cond%1%d : 
=dst.llvm-%inc val_scevb scev scev_expr done
=dst.llvm-%inc val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%inc val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%inc val_scevb signed lower bound: 32:4294967295
=dst.llvm-%inc val_scevb signed upper bound: 32:4294967295
=dst.llvm-%inc atuse_scevb
=dst.llvm-%inc atuse_scevb scev
=dst.llvm-%inc atuse_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%inc atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%inc atuse_scevb scev scev_expr
2 : 00000000000000000000000000000001b
13 : scev_op_addrec(2, 2) : loop Lfor.cond%1%d : 
=dst.llvm-%inc atuse_scevb scev scev_expr done
=dst.llvm-%inc atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%inc atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%inc atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%inc atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%inc atexit_scev
=dst.llvm-%inc atexit_scev loop: L0%0%d
=dst.llvm-%inc atexit_scev scev_overflow_flag: 
=dst.llvm-%inc atexit_scev scev_expr
2 : 00000000000000000000000000000001b
4 : input.dst.llvm-%n : BV32
14 : scev_op_add(2, 4) : loop L0%0%d : 
=dst.llvm-%inc atexit_scev scev_expr done
=PotentialSCEVRelations done
=ReachingDefinitionsForLocs:
=Reaching Definitions at L0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns done
=Reaching Definitions at Lfor.body%1%d
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 7 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 8 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 9 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%add.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns done
=Reaching Definitions at Lfor.cond%1%bbentry
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 7 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 8 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 9 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%add.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns done
=Reaching Definitions at Lfor.cond%2%d
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 7 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 8 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 9 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%add.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns done
=Reaching Definitions at Lfor.end%1%d
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 7 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 8 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 9 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%add.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns done
=Reaching Definitions at E0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 7 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 8 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 9 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=reaching defns for expr 11 edges
  Lfor.end%1%d=>E0%0%d
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=reaching defns for expr 12 edges
  Lfor.end%1%d=>E0%0%d
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=reaching defns for expr 13 edges
  Lfor.end%1%d=>E0%0%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 14 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 15 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%add.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns done
=ReachingDefinitionsForLocs done
=VarnameToLRStatus Begin:
=LR status for var input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.2.total_offset.Lfor.cond%1%bbentry
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%x
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%n
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.1, )
=LR status for var input.dst.local./*___y___foo__x__=L0%0%argnum0=/
lr_status_top
=LR status for var input.dst.local./*___y___foo__x__=L0%0%argnum1=/
lr_status_top
=LR status for var input.dst.local_alloc_count.=L0%0%d=
lr_status_top
=LR status for var input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%hidden-reg
lr_status_top
=LR status for var input.dst.llvm-callee-save.0
lr_status_top
=LR status for var input.dst.llvm-callee-save.1
lr_status_top
=LR status for var input.dst.llvm-callee-save.2
lr_status_top
=LR status for var input.dst.llvm-callee-save.3
lr_status_top
=LR status for var input.dst.llvm-%i.0.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%cmp.Lfor.cond%2%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%0.Lfor.cond%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-indir_tgt.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%hidden-reg.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%add.Lfor.cond%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%ret-reg.E0%0%d
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.1.total_offset.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%inc.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%ret.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.local_alloc_count.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=VarnameToLRStatus End
=TFG_LLVM_done
=TFG_SSA_done
=eqcheck_info
=eqcheck
=proof_filename couple8.proof
=function_name foo
=asm_filename NONE
=fixed_reg_mappings begin
0 : 0 : 0
0 : 4 : 4
=fixed_reg_mappings end
=rodata_map begin
=rodata_map end
=dst_iseq
=dst_iseq done
=dst_insn_pcs
=dst_insn_pcs done
=xml_output_format text-color
=use_only_relocatable_memlabels 0
=run_safety_check 0
=debug_header_pc_lsprels
=Local offsets from compile log
=Local offsets from compile log done
=done
=spec_iospecs
=SpecFuncIOSpecs
=FunctionName: foo
=EntryPreconds
=pred 0
=Comment
pointer-implements-variable-sized-map
=LhsExpr
1 : $spec-arg-0 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : $llvm-arg-1 : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : $llvm-md : ARRAY[BV:32 -> BV:8]
11 : $llvm-ma : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : $llvm-arg-0 : BV:32
14 : 4 { 0x4 +1.47e129 } : BV:32
15 : bvmul(9, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=EntryPreconds done
=ExitAsserts
=pred 0
=Comment
equal-regs
=LhsExpr
1 : $spec-ret : BV:32
2 : $llvm-ret : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=ExitAsserts done
=SpecFuncIOSpecs done
=eqcheck done
=graph_with_guessing
=Nodes: L0%0%d_L0%0%d L3%6%bbentry_Lfor.cond%1%bbentry E0%0%d_E0%0%d
=Edges:
L0%0%d_L0%0%d => L3%6%bbentry_Lfor.cond%1%bbentry
L3%6%bbentry_Lfor.cond%1%bbentry => L3%6%bbentry_Lfor.cond%1%bbentry
L3%6%bbentry_Lfor.cond%1%bbentry => E0%0%d_E0%0%d
=graph done
=is_ssa_graph:
0
=StartState:
=state_end
=graph_with_var_versions done
=FunctionName: foo
=Input: tfg-method-arg.0
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%x : BV:32
=arg end
=Input: tfg-method-arg.1
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
=arg val
1 : input.dst.llvm-%n : BV:32
=arg end
=Node outputs: E0%0%d_E0%0%d
=Node outputs done for E0%0%d_E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : foo : 20 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%x : 4 : 4 : 0
C_LOCAL=L0%0%argnum1= : dst.llvm-%n : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
=Edge: L0%0%d_L0%0%d => L3%6%bbentry_Lfor.cond%1%bbentry
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L0%0%d to L3%6%bbentry at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
(L0%0%d#{0,0}=>L3%6%bbentry#{0,0})
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from L0%0%d to Lfor.cond%1%bbentry at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
(L0%0%d#{0,0}=>Lfor.cond%1%bbentry#{0,0})
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L3%6%bbentry_Lfor.cond%1%bbentry => L3%6%bbentry_Lfor.cond%1%bbentry
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L3%6%bbentry to L3%6%bbentry at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
((L3%6%bbentry#{0,0}=>L3%7%d#{0,0})*((L3%7%d#{0,0}=>L3%10%bbentry#{0,0})*(L3%10%bbentry#{0,0}=>L3%6%bbentry#{1,0})))
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lfor.cond%1%bbentry to Lfor.cond%1%bbentry at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((Lfor.cond%1%bbentry#{0,0}=>Lfor.cond%2%d#{0,0})*((Lfor.cond%2%d#{0,0}=>Lfor.body%1%d#{0,0})*(Lfor.body%1%d#{0,0}=>Lfor.cond%1%bbentry#{1,0})))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L3%6%bbentry_Lfor.cond%1%bbentry => E0%0%d_E0%0%d
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L3%6%bbentry to E0%0%d at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
((L3%6%bbentry#{0,0}=>L3%7%d#{0,0})*((L3%7%d#{0,0}=>L3%8%bbentry#{0,0})*(L3%8%bbentry#{0,0}=>E0%0%d#{0,0})))
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lfor.cond%1%bbentry to E0%0%d at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((Lfor.cond%1%bbentry#{0,0}=>Lfor.cond%2%d#{0,0})*((Lfor.cond%2%d#{0,0}=>Lfor.end%1%d#{0,0})*(Lfor.end%1%d#{0,0}=>E0%0%d#{0,0})))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
pointer-implements-variable-sized-map
=LhsExpr
1 : input.spec-%var-x-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%x : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.1
=Comment
precond-mlasserts
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : bvuge(1, 10) : BOOL
18 : bvule(1, 11) : BOOL
19 : and(17, 18) : BOOL
20 : bvuge(2, 10) : BOOL
21 : bvule(2, 11) : BOOL
22 : and(20, 21) : BOOL
23 : not(22) : BOOL
24 : andnot1(19, 23) : BOOL
25 : bvuge(10, 1) : BOOL
26 : bvule(10, 2) : BOOL
27 : and(25, 26) : BOOL
28 : bvuge(11, 1) : BOOL
29 : bvule(11, 2) : BOOL
30 : and(28, 29) : BOOL
31 : not(30) : BOOL
32 : andnot1(27, 31) : BOOL
33 : and(24, 32) : BOOL
34 : and(16, 33) : BOOL
35 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
36 : 3 { 0x3 +1.35e129 } : BV:32
37 : bvand(35, 36) : BV:32
38 : 0 { 0x0 +1.0e129 } : BV:32
39 : eq(37, 38) : BOOL
40 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
41 : bvand(40, 36) : BV:32
42 : eq(41, 38) : BOOL
43 : and(39, 42) : BOOL
44 : and(34, 43) : BOOL
45 : eq(35, 1) : BOOL
46 : eq(40, 10) : BOOL
47 : and(45, 46) : BOOL
48 : and(44, 47) : BOOL
49 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
50 : 1 { 0x1 +1.11e129 } : BV:32
51 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
52 : region_agrees_with_memlabel(49, 38, 50, 51) : BOOL
53 : and(48, 52) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.2
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%n : BV:32
=predicate done
=start_pc_precondition.3
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%x : BV:32
=predicate done
=graph_with_precondition_done

=Locs in foo.A2.B2.C1
=Locs end
=Liveness in foo.A2.B2.C1
=live locs at L0%0%d_L0%0%d

=live locs at L3%6%bbentry_Lfor.cond%1%bbentry

=live locs at E0%0%d_E0%0%d


=Definedness in foo.A2.B2.C1

=Branch affecting variable locs in foo.A2.B2.C1

=Relevant Memlabels in foo.A2.B2.C1
=relevant memlabels
=function: foo
memlabel-mem--arg.0
memlabel-mem-may-straddle-symbol.1-heap
memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
memlabel-mem--arg.1
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
=graph_with_ml_contiguity_info non-vacuous mls
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in foo.A2.B2.C1
=avail_exprs begin
=avail_exprs end
=sprel_map in foo.A2.B2.C1
=sprel_map done
=lr-status-map
=lr-status-map done
=lr-status-for-sprel-locs-map
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=global counterexamples for reason inductive-invariants
=global nodece 0
=global nodece 0 nodece z3v487.ce3.num_edges_traversed1
=global nodece 0 nodece_path
=global nodece 0 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 0 nodece_cached_counterexample
=counter_example_begin z3v487.ce3 c94a89f438560fca287cb6d487eb
=input.spec-%var-x-1
1 : Lambda20 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda21 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L3%6%bbentry
1 : Lambda20 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda21 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1027 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1028; 1031 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1032; 65535 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 65536; 65539 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 65540; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1028 { 0x404 +1.12254e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 65536 { 0x10000 +1.781250e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 924236686 { 0x3716bb8e +1.17759871e239 } : COUNT
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-0.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 924236686 { 0x3716bb8e +1.17759871e239 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 65536 { 0x10000 +1.781250e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 65539 { 0x10003 +1.781285e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1028 { 0x404 +1.12254e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1031 { 0x407 +1.12290e129 } : BV:32
=counter_example.random_seed
2811112354
=counter_example_end
=global nodece 0 num_edges_traversed 1
=global nodece 0 nodece_visted_pcs: 
L0%0%d_L0%0%d -> L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 1
=global nodece 1 nodece z3.ce4.num_edges_traversed0
=global nodece 1 nodece_path
=global nodece 1 nodece_path.graph_edge_composition
(epsilon)
=global nodece 1 nodece_cached_counterexample
=counter_example_begin z3.ce4 3c13d59c0dc10cf3327f32d5e92929
=input.spec-%var-x-1
1 : Lambda32 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda33 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L3%6%bbentry
1 : Lambda36 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda37 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3975956855 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3975956856; 3975956859 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3975956860; 4274055107 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4274055108; 4274055111 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4274055112; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4274055108 { 0xfec0e7c4 -20912188 -1.50707292e126 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3975956856 { 0xecfc4978 -319010440 -1.97099208e90 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-0.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3975956856 { 0xecfc4978 -319010440 -1.97099208e90 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3975956859 { 0xecfc497b -319010437 -1.97099244e90 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4274055108 { 0xfec0e7c4 -20912188 -1.50707292e126 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 4274055111 { 0xfec0e7c7 -20912185 -1.50707328e126 } : BV:32
=counter_example.random_seed
3747455381
=counter_example_end
=global nodece 1 num_edges_traversed 0
=global nodece 1 nodece_visted_pcs: 
L0%0%d_L0%0%d
=global nodece 2
=global nodece 2 nodece z3.ce23.num_edges_traversed1
=global nodece 2 nodece_path
=global nodece 2 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 2 nodece_cached_counterexample
=counter_example_begin z3.ce23 383efd7d5761bbc4392c2cfa2efc77a
=input.spec-%var-x-1
1 : Lambda63 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3200171521 { 0xbebebe01 -1094795775 -1.49017345e254 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3200171522 { 0xbebebe02 -1094795774 -1.49017357e254 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda64 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3221208576 { 0xbfffbe00 -1073758720 -1.99798583e0 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 3221208577 { 0xbfffbe01 -1073758719 -1.99798595e0 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 214653654 { 0xccb5ad6 +1.58870959e154 } : BV:32
28 : eq(23, 27) : BOOL
29 : 255 { 0xff -1 } : BV:8
30 : 1973947344 { 0x75a80bd0 +1.31286048e108 } : BV:32
31 : eq(23, 30) : BOOL
32 : 2 { 0x2 } : BV:8
33 : 3221208579 { 0xbfffbe03 -1073758717 -1.99798619e0 } : BV:32
34 : eq(23, 33) : BOOL
35 : 3221208578 { 0xbfffbe02 -1073758718 -1.99798607e0 } : BV:32
36 : eq(23, 35) : BOOL
37 : eq(23, 22) : BOOL
38 : 214653655 { 0xccb5ad7 +1.58870971e154 } : BV:32
39 : eq(23, 38) : BOOL
40 : 191 { 0xbf -65 } : BV:8
41 : 214653652 { 0xccb5ad4 +1.58870935e154 } : BV:32
42 : eq(23, 41) : BOOL
43 : 190 { 0xbe -66 } : BV:8
44 : ite(42, 26, 43) : BV:8
45 : ite(39, 40, 44) : BV:8
46 : ite(37, 26, 45) : BV:8
47 : ite(36, 26, 46) : BV:8
48 : ite(34, 26, 47) : BV:8
49 : ite(31, 32, 48) : BV:8
50 : ite(28, 29, 49) : BV:8
51 : ite(25, 26, 50) : BV:8
52 : 2 { 0x2 +1.23e129 } : BV:32
53 : bvadd(52, 21, 22) : BV:32
54 : eq(53, 24) : BOOL
55 : eq(53, 27) : BOOL
56 : eq(53, 30) : BOOL
57 : eq(53, 33) : BOOL
58 : eq(53, 35) : BOOL
59 : eq(53, 22) : BOOL
60 : eq(53, 38) : BOOL
61 : eq(53, 41) : BOOL
62 : ite(61, 26, 43) : BV:8
63 : ite(60, 40, 62) : BV:8
64 : ite(59, 26, 63) : BV:8
65 : ite(58, 26, 64) : BV:8
66 : ite(57, 26, 65) : BV:8
67 : ite(56, 32, 66) : BV:8
68 : ite(55, 29, 67) : BV:8
69 : ite(54, 26, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 21, 22) : BV:32
72 : eq(71, 24) : BOOL
73 : eq(71, 27) : BOOL
74 : eq(71, 30) : BOOL
75 : eq(71, 33) : BOOL
76 : eq(71, 35) : BOOL
77 : eq(71, 22) : BOOL
78 : eq(71, 38) : BOOL
79 : eq(71, 41) : BOOL
80 : ite(79, 26, 43) : BV:8
81 : ite(78, 40, 80) : BV:8
82 : ite(77, 26, 81) : BV:8
83 : ite(76, 26, 82) : BV:8
84 : ite(75, 26, 83) : BV:8
85 : ite(74, 32, 84) : BV:8
86 : ite(73, 29, 85) : BV:8
87 : ite(72, 26, 86) : BV:8
88 : bvadd(21, 22) : BV:32
89 : eq(88, 24) : BOOL
90 : eq(88, 27) : BOOL
91 : eq(88, 30) : BOOL
92 : eq(88, 33) : BOOL
93 : eq(88, 35) : BOOL
94 : eq(88, 22) : BOOL
95 : eq(88, 38) : BOOL
96 : eq(88, 41) : BOOL
97 : ite(96, 26, 43) : BV:8
98 : ite(95, 40, 97) : BV:8
99 : ite(94, 26, 98) : BV:8
100 : ite(93, 26, 99) : BV:8
101 : ite(92, 26, 100) : BV:8
102 : ite(91, 32, 101) : BV:8
103 : ite(90, 29, 102) : BV:8
104 : ite(89, 26, 103) : BV:8
105 : bvconcat(51, 69, 87, 104) : BV:32
106 : ite(18, 2, 105) : BV:32
107 : lambda(17, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(16, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L3%6%bbentry
1 : Lambda63 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3200171521 { 0xbebebe01 -1094795775 -1.49017345e254 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3200171522 { 0xbebebe02 -1094795774 -1.49017357e254 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda64 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3221208576 { 0xbfffbe00 -1073758720 -1.99798583e0 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 3221208577 { 0xbfffbe01 -1073758719 -1.99798595e0 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 214653654 { 0xccb5ad6 +1.58870959e154 } : BV:32
28 : eq(23, 27) : BOOL
29 : 255 { 0xff -1 } : BV:8
30 : 1973947344 { 0x75a80bd0 +1.31286048e108 } : BV:32
31 : eq(23, 30) : BOOL
32 : 2 { 0x2 } : BV:8
33 : 3221208579 { 0xbfffbe03 -1073758717 -1.99798619e0 } : BV:32
34 : eq(23, 33) : BOOL
35 : 3221208578 { 0xbfffbe02 -1073758718 -1.99798607e0 } : BV:32
36 : eq(23, 35) : BOOL
37 : eq(23, 22) : BOOL
38 : 214653655 { 0xccb5ad7 +1.58870971e154 } : BV:32
39 : eq(23, 38) : BOOL
40 : 191 { 0xbf -65 } : BV:8
41 : 214653652 { 0xccb5ad4 +1.58870935e154 } : BV:32
42 : eq(23, 41) : BOOL
43 : 190 { 0xbe -66 } : BV:8
44 : ite(42, 26, 43) : BV:8
45 : ite(39, 40, 44) : BV:8
46 : ite(37, 26, 45) : BV:8
47 : ite(36, 26, 46) : BV:8
48 : ite(34, 26, 47) : BV:8
49 : ite(31, 32, 48) : BV:8
50 : ite(28, 29, 49) : BV:8
51 : ite(25, 26, 50) : BV:8
52 : 2 { 0x2 +1.23e129 } : BV:32
53 : bvadd(52, 21, 22) : BV:32
54 : eq(53, 24) : BOOL
55 : eq(53, 27) : BOOL
56 : eq(53, 30) : BOOL
57 : eq(53, 33) : BOOL
58 : eq(53, 35) : BOOL
59 : eq(53, 22) : BOOL
60 : eq(53, 38) : BOOL
61 : eq(53, 41) : BOOL
62 : ite(61, 26, 43) : BV:8
63 : ite(60, 40, 62) : BV:8
64 : ite(59, 26, 63) : BV:8
65 : ite(58, 26, 64) : BV:8
66 : ite(57, 26, 65) : BV:8
67 : ite(56, 32, 66) : BV:8
68 : ite(55, 29, 67) : BV:8
69 : ite(54, 26, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 21, 22) : BV:32
72 : eq(71, 24) : BOOL
73 : eq(71, 27) : BOOL
74 : eq(71, 30) : BOOL
75 : eq(71, 33) : BOOL
76 : eq(71, 35) : BOOL
77 : eq(71, 22) : BOOL
78 : eq(71, 38) : BOOL
79 : eq(71, 41) : BOOL
80 : ite(79, 26, 43) : BV:8
81 : ite(78, 40, 80) : BV:8
82 : ite(77, 26, 81) : BV:8
83 : ite(76, 26, 82) : BV:8
84 : ite(75, 26, 83) : BV:8
85 : ite(74, 32, 84) : BV:8
86 : ite(73, 29, 85) : BV:8
87 : ite(72, 26, 86) : BV:8
88 : bvadd(21, 22) : BV:32
89 : eq(88, 24) : BOOL
90 : eq(88, 27) : BOOL
91 : eq(88, 30) : BOOL
92 : eq(88, 33) : BOOL
93 : eq(88, 35) : BOOL
94 : eq(88, 22) : BOOL
95 : eq(88, 38) : BOOL
96 : eq(88, 41) : BOOL
97 : ite(96, 26, 43) : BV:8
98 : ite(95, 40, 97) : BV:8
99 : ite(94, 26, 98) : BV:8
100 : ite(93, 26, 99) : BV:8
101 : ite(92, 26, 100) : BV:8
102 : ite(91, 32, 101) : BV:8
103 : ite(90, 29, 102) : BV:8
104 : ite(89, 26, 103) : BV:8
105 : bvconcat(51, 69, 87, 104) : BV:32
106 : ite(18, 2, 105) : BV:32
107 : lambda(17, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(16, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 3221208576 { 0xbfffbe00 -1073758720 -1.99798583e0 } : BV:32
=input.dst.llvm-%n
1 : 3200171522 { 0xbebebe02 -1094795774 -1.49017357e254 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 214653651 ] -> 190, [ 214653652; 214653652 ] -> 0, [ 214653653; 214653653 ] -> 190, [ 214653654; 214653654 ] -> 255, [ 214653655; 214653655 ] -> 191, [ 214653656; 1973947343 ] -> 190, [ 1973947344; 1973947344 ] -> 2, [ 1973947345; 3221208575 ] -> 190, [ 3221208576; 3221208579 ] -> 0, [ 3221208580; 4294967295 ] -> 190, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 214653651 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 214653652; 214653655 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 214653656; 1973947343 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1973947344; 1973947347 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1973947348; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 214653652 { 0xccb5ad4 +1.58870935e154 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1973947344 { 0x75a80bd0 +1.31286048e108 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1079274789 { 0x40546d25 +1.65958082e1 } : COUNT
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-0.L3%6%bbentry.0.1
1 : ([ 0; 3200171521 ] -> true, [ 3200171522; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%6%bbentry.1.1
1 : Lambda51 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3221208576 { 0xbfffbe00 -1073758720 -1.99798583e0 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 3221208577 { 0xbfffbe01 -1073758719 -1.99798595e0 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 214653654 { 0xccb5ad6 +1.58870959e154 } : BV:32
13 : eq(8, 12) : BOOL
14 : 255 { 0xff -1 } : BV:8
15 : 1973947344 { 0x75a80bd0 +1.31286048e108 } : BV:32
16 : eq(8, 15) : BOOL
17 : 2 { 0x2 } : BV:8
18 : 3221208579 { 0xbfffbe03 -1073758717 -1.99798619e0 } : BV:32
19 : eq(8, 18) : BOOL
20 : 3221208578 { 0xbfffbe02 -1073758718 -1.99798607e0 } : BV:32
21 : eq(8, 20) : BOOL
22 : eq(8, 7) : BOOL
23 : 214653655 { 0xccb5ad7 +1.58870971e154 } : BV:32
24 : eq(8, 23) : BOOL
25 : 191 { 0xbf -65 } : BV:8
26 : 214653652 { 0xccb5ad4 +1.58870935e154 } : BV:32
27 : eq(8, 26) : BOOL
28 : 190 { 0xbe -66 } : BV:8
29 : ite(27, 11, 28) : BV:8
30 : ite(24, 25, 29) : BV:8
31 : ite(22, 11, 30) : BV:8
32 : ite(21, 11, 31) : BV:8
33 : ite(19, 11, 32) : BV:8
34 : ite(16, 17, 33) : BV:8
35 : ite(13, 14, 34) : BV:8
36 : ite(10, 11, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 6, 7) : BV:32
39 : eq(38, 9) : BOOL
40 : eq(38, 12) : BOOL
41 : eq(38, 15) : BOOL
42 : eq(38, 18) : BOOL
43 : eq(38, 20) : BOOL
44 : eq(38, 7) : BOOL
45 : eq(38, 23) : BOOL
46 : eq(38, 26) : BOOL
47 : ite(46, 11, 28) : BV:8
48 : ite(45, 25, 47) : BV:8
49 : ite(44, 11, 48) : BV:8
50 : ite(43, 11, 49) : BV:8
51 : ite(42, 11, 50) : BV:8
52 : ite(41, 17, 51) : BV:8
53 : ite(40, 14, 52) : BV:8
54 : ite(39, 11, 53) : BV:8
55 : 1 { 0x1 +1.11e129 } : BV:32
56 : bvadd(55, 6, 7) : BV:32
57 : eq(56, 9) : BOOL
58 : eq(56, 12) : BOOL
59 : eq(56, 15) : BOOL
60 : eq(56, 18) : BOOL
61 : eq(56, 20) : BOOL
62 : eq(56, 7) : BOOL
63 : eq(56, 23) : BOOL
64 : eq(56, 26) : BOOL
65 : ite(64, 11, 28) : BV:8
66 : ite(63, 25, 65) : BV:8
67 : ite(62, 11, 66) : BV:8
68 : ite(61, 11, 67) : BV:8
69 : ite(60, 11, 68) : BV:8
70 : ite(59, 17, 69) : BV:8
71 : ite(58, 14, 70) : BV:8
72 : ite(57, 11, 71) : BV:8
73 : bvadd(6, 7) : BV:32
74 : eq(73, 9) : BOOL
75 : eq(73, 12) : BOOL
76 : eq(73, 15) : BOOL
77 : eq(73, 18) : BOOL
78 : eq(73, 20) : BOOL
79 : eq(73, 7) : BOOL
80 : eq(73, 23) : BOOL
81 : eq(73, 26) : BOOL
82 : ite(81, 11, 28) : BV:8
83 : ite(80, 25, 82) : BV:8
84 : ite(79, 11, 83) : BV:8
85 : ite(78, 11, 84) : BV:8
86 : ite(77, 11, 85) : BV:8
87 : ite(76, 17, 86) : BV:8
88 : ite(75, 14, 87) : BV:8
89 : ite(74, 11, 88) : BV:8
90 : bvconcat(36, 54, 72, 89) : BV:32
91 : ite(3, 2, 90) : BV:32
92 : ite(3, 2, 91) : BV:32
93 : lambda(1, 92) : FUNCTION[BV:32 -> BV:32]
94 : sym_const(93) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 3200171521 ] -> true, [ 3200171522; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : Lambda52 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3221208576 { 0xbfffbe00 -1073758720 -1.99798583e0 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 3221208577 { 0xbfffbe01 -1073758719 -1.99798595e0 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 214653654 { 0xccb5ad6 +1.58870959e154 } : BV:32
13 : eq(8, 12) : BOOL
14 : 255 { 0xff -1 } : BV:8
15 : 1973947344 { 0x75a80bd0 +1.31286048e108 } : BV:32
16 : eq(8, 15) : BOOL
17 : 2 { 0x2 } : BV:8
18 : 3221208579 { 0xbfffbe03 -1073758717 -1.99798619e0 } : BV:32
19 : eq(8, 18) : BOOL
20 : 3221208578 { 0xbfffbe02 -1073758718 -1.99798607e0 } : BV:32
21 : eq(8, 20) : BOOL
22 : eq(8, 7) : BOOL
23 : 214653655 { 0xccb5ad7 +1.58870971e154 } : BV:32
24 : eq(8, 23) : BOOL
25 : 191 { 0xbf -65 } : BV:8
26 : 214653652 { 0xccb5ad4 +1.58870935e154 } : BV:32
27 : eq(8, 26) : BOOL
28 : 190 { 0xbe -66 } : BV:8
29 : ite(27, 11, 28) : BV:8
30 : ite(24, 25, 29) : BV:8
31 : ite(22, 11, 30) : BV:8
32 : ite(21, 11, 31) : BV:8
33 : ite(19, 11, 32) : BV:8
34 : ite(16, 17, 33) : BV:8
35 : ite(13, 14, 34) : BV:8
36 : ite(10, 11, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 6, 7) : BV:32
39 : eq(38, 9) : BOOL
40 : eq(38, 12) : BOOL
41 : eq(38, 15) : BOOL
42 : eq(38, 18) : BOOL
43 : eq(38, 20) : BOOL
44 : eq(38, 7) : BOOL
45 : eq(38, 23) : BOOL
46 : eq(38, 26) : BOOL
47 : ite(46, 11, 28) : BV:8
48 : ite(45, 25, 47) : BV:8
49 : ite(44, 11, 48) : BV:8
50 : ite(43, 11, 49) : BV:8
51 : ite(42, 11, 50) : BV:8
52 : ite(41, 17, 51) : BV:8
53 : ite(40, 14, 52) : BV:8
54 : ite(39, 11, 53) : BV:8
55 : 1 { 0x1 +1.11e129 } : BV:32
56 : bvadd(55, 6, 7) : BV:32
57 : eq(56, 9) : BOOL
58 : eq(56, 12) : BOOL
59 : eq(56, 15) : BOOL
60 : eq(56, 18) : BOOL
61 : eq(56, 20) : BOOL
62 : eq(56, 7) : BOOL
63 : eq(56, 23) : BOOL
64 : eq(56, 26) : BOOL
65 : ite(64, 11, 28) : BV:8
66 : ite(63, 25, 65) : BV:8
67 : ite(62, 11, 66) : BV:8
68 : ite(61, 11, 67) : BV:8
69 : ite(60, 11, 68) : BV:8
70 : ite(59, 17, 69) : BV:8
71 : ite(58, 14, 70) : BV:8
72 : ite(57, 11, 71) : BV:8
73 : bvadd(6, 7) : BV:32
74 : eq(73, 9) : BOOL
75 : eq(73, 12) : BOOL
76 : eq(73, 15) : BOOL
77 : eq(73, 18) : BOOL
78 : eq(73, 20) : BOOL
79 : eq(73, 7) : BOOL
80 : eq(73, 23) : BOOL
81 : eq(73, 26) : BOOL
82 : ite(81, 11, 28) : BV:8
83 : ite(80, 25, 82) : BV:8
84 : ite(79, 11, 83) : BV:8
85 : ite(78, 11, 84) : BV:8
86 : ite(77, 11, 85) : BV:8
87 : ite(76, 17, 86) : BV:8
88 : ite(75, 14, 87) : BV:8
89 : ite(74, 11, 88) : BV:8
90 : bvconcat(36, 54, 72, 89) : BV:32
91 : ite(3, 2, 90) : BV:32
92 : lambda(1, 91) : FUNCTION[BV:32 -> BV:32]
93 : sym_const(92) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1079274789 { 0x40546d25 +1.65958082e1 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1973947344 { 0x75a80bd0 +1.31286048e108 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1973947347 { 0x75a80bd3 +1.31286084e108 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 214653652 { 0xccb5ad4 +1.58870935e154 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 214653655 { 0xccb5ad7 +1.58870971e154 } : BV:32
=counter_example.random_seed
2233806052
=counter_example_end
=global nodece 2 num_edges_traversed 1
=global nodece 2 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 3
=global nodece 3 nodece z3v487.ce24.num_edges_traversed1
=global nodece 3 nodece_path
=global nodece 3 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 3 nodece_cached_counterexample
=counter_example_begin z3v487.ce24 736122bd66f958523a19c1b727c09a
=input.spec-%var-x-1
1 : Lambda73 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4095 { 0xfff +1.48816e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4096 { 0x1000 +1.48828e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda74 : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 17) : BV:32
21 : bvadd(18, 20, 2) : BV:32
22 : 5 { 0x5 +1.59e129 } : BV:32
23 : eq(21, 22) : BOOL
24 : 16 { 0x10 } : BV:8
25 : 0 { 0x0 } : BV:8
26 : ite(23, 24, 25) : BV:8
27 : 2 { 0x2 +1.23e129 } : BV:32
28 : bvadd(27, 20, 2) : BV:32
29 : eq(28, 22) : BOOL
30 : ite(29, 24, 25) : BV:8
31 : 1 { 0x1 +1.11e129 } : BV:32
32 : bvadd(31, 20, 2) : BV:32
33 : eq(32, 22) : BOOL
34 : ite(33, 24, 25) : BV:8
35 : bvadd(20, 2) : BV:32
36 : eq(35, 22) : BOOL
37 : ite(36, 24, 25) : BV:8
38 : bvconcat(26, 30, 34, 37) : BV:32
39 : lambda(17, 38) : FUNCTION[BV:32 -> BV:32]
40 : map(16, 39) : MAP[BV:32 -> BV:32]
41 : sym_const(40) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L3%6%bbentry
1 : Lambda73 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4095 { 0xfff +1.48816e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4096 { 0x1000 +1.48828e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda74 : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 17) : BV:32
21 : bvadd(18, 20, 2) : BV:32
22 : 5 { 0x5 +1.59e129 } : BV:32
23 : eq(21, 22) : BOOL
24 : 16 { 0x10 } : BV:8
25 : 0 { 0x0 } : BV:8
26 : ite(23, 24, 25) : BV:8
27 : 2 { 0x2 +1.23e129 } : BV:32
28 : bvadd(27, 20, 2) : BV:32
29 : eq(28, 22) : BOOL
30 : ite(29, 24, 25) : BV:8
31 : 1 { 0x1 +1.11e129 } : BV:32
32 : bvadd(31, 20, 2) : BV:32
33 : eq(32, 22) : BOOL
34 : ite(33, 24, 25) : BV:8
35 : bvadd(20, 2) : BV:32
36 : eq(35, 22) : BOOL
37 : ite(36, 24, 25) : BV:8
38 : bvconcat(26, 30, 34, 37) : BV:32
39 : lambda(17, 38) : FUNCTION[BV:32 -> BV:32]
40 : map(16, 39) : MAP[BV:32 -> BV:32]
41 : sym_const(40) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 4096 { 0x1000 +1.48828e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4 ] -> 0, [ 5; 5 ] -> 16, [ 6; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 8; 31 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 32; 35 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 36; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 32 { 0x20 +1.381e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 578391065 { 0x22798c19 +1.94958794e197 } : COUNT
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-0.L3%6%bbentry.0.1
1 : ([ 0; 4095 ] -> true, [ 4096; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%6%bbentry.1.1
1 : Lambda56 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(3, 1) : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : bvadd(2, 4, 5) : BV:32
7 : 5 { 0x5 +1.59e129 } : BV:32
8 : eq(6, 7) : BOOL
9 : 16 { 0x10 } : BV:8
10 : 0 { 0x0 } : BV:8
11 : ite(8, 9, 10) : BV:8
12 : 2 { 0x2 +1.23e129 } : BV:32
13 : bvadd(12, 4, 5) : BV:32
14 : eq(13, 7) : BOOL
15 : ite(14, 9, 10) : BV:8
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : bvadd(16, 4, 5) : BV:32
18 : eq(17, 7) : BOOL
19 : ite(18, 9, 10) : BV:8
20 : bvadd(4, 5) : BV:32
21 : eq(20, 7) : BOOL
22 : ite(21, 9, 10) : BV:8
23 : bvconcat(11, 15, 19, 22) : BV:32
24 : lambda(1, 23) : FUNCTION[BV:32 -> BV:32]
25 : sym_const(24) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4095 ] -> true, [ 4096; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : Lambda57 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(3, 1) : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : bvadd(2, 4, 5) : BV:32
7 : 5 { 0x5 +1.59e129 } : BV:32
8 : eq(6, 7) : BOOL
9 : 16 { 0x10 } : BV:8
10 : 0 { 0x0 } : BV:8
11 : ite(8, 9, 10) : BV:8
12 : 2 { 0x2 +1.23e129 } : BV:32
13 : bvadd(12, 4, 5) : BV:32
14 : eq(13, 7) : BOOL
15 : ite(14, 9, 10) : BV:8
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : bvadd(16, 4, 5) : BV:32
18 : eq(17, 7) : BOOL
19 : ite(18, 9, 10) : BV:8
20 : bvadd(4, 5) : BV:32
21 : eq(20, 7) : BOOL
22 : ite(21, 9, 10) : BV:8
23 : bvconcat(11, 15, 19, 22) : BV:32
24 : lambda(1, 23) : FUNCTION[BV:32 -> BV:32]
25 : sym_const(24) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 578391065 { 0x22798c19 +1.94958794e197 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 32 { 0x20 +1.381e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 35 { 0x23 +1.417e129 } : BV:32
=counter_example.random_seed
404338641
=counter_example_end
=global nodece 3 num_edges_traversed 1
=global nodece 3 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 4
=global nodece 4 nodece z3v487.ce43.num_edges_traversed1
=global nodece 4 nodece_path
=global nodece 4 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 4 nodece_cached_counterexample
=counter_example_begin z3v487.ce43 ecc4e6d7d60b02dde6ee2f536dc6927
=input.spec-%var-x-1
1 : Lambda97 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda98 : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 17) : BV:32
21 : 2155872640 { 0x80800180 -2139094656 -1.4577e130 } : BV:32
22 : bvadd(18, 20, 21) : BV:32
23 : 13901829 { 0xd42005 +1.65722715e130 } : BV:32
24 : eq(22, 23) : BOOL
25 : 1 { 0x1 } : BV:8
26 : 128 { 0x80 -128 } : BV:8
27 : ite(24, 25, 26) : BV:8
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvadd(28, 20, 21) : BV:32
30 : eq(29, 23) : BOOL
31 : ite(30, 25, 26) : BV:8
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : bvadd(32, 20, 21) : BV:32
34 : eq(33, 23) : BOOL
35 : ite(34, 25, 26) : BV:8
36 : bvadd(20, 21) : BV:32
37 : eq(36, 23) : BOOL
38 : ite(37, 25, 26) : BV:8
39 : bvconcat(27, 31, 35, 38) : BV:32
40 : lambda(17, 39) : FUNCTION[BV:32 -> BV:32]
41 : map(16, 40) : MAP[BV:32 -> BV:32]
42 : sym_const(41) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L3%6%bbentry
1 : Lambda97 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda98 : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 17) : BV:32
21 : 2155872640 { 0x80800180 -2139094656 -1.4577e130 } : BV:32
22 : bvadd(18, 20, 21) : BV:32
23 : 13901829 { 0xd42005 +1.65722715e130 } : BV:32
24 : eq(22, 23) : BOOL
25 : 1 { 0x1 } : BV:8
26 : 128 { 0x80 -128 } : BV:8
27 : ite(24, 25, 26) : BV:8
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvadd(28, 20, 21) : BV:32
30 : eq(29, 23) : BOOL
31 : ite(30, 25, 26) : BV:8
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : bvadd(32, 20, 21) : BV:32
34 : eq(33, 23) : BOOL
35 : ite(34, 25, 26) : BV:8
36 : bvadd(20, 21) : BV:32
37 : eq(36, 23) : BOOL
38 : ite(37, 25, 26) : BV:8
39 : bvconcat(27, 31, 35, 38) : BV:32
40 : lambda(17, 39) : FUNCTION[BV:32 -> BV:32]
41 : map(16, 40) : MAP[BV:32 -> BV:32]
42 : sym_const(41) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 2155872640 { 0x80800180 -2139094656 -1.4577e130 } : BV:32
=input.dst.llvm-%n
1 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 13901828 ] -> 128, [ 13901829; 13901829 ] -> 1, [ 13901830; 4294967295 ] -> 128, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 4491711 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4491712; 4491715 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 4491716; 13901827 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 13901828; 13901831 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 13901832; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 13901828 { 0xd42004 +1.65722703e130 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4491712 { 0x4489c0 +1.53545379e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 193259268 { 0xb84e704 +1.3830003e152 } : COUNT
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-0.L3%6%bbentry.0.1
1 : ([ 0; 2155905151 ] -> true, [ 2155905152; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%6%bbentry.1.1
1 : Lambda85 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(3, 1) : BV:32
5 : 2155872640 { 0x80800180 -2139094656 -1.4577e130 } : BV:32
6 : bvadd(2, 4, 5) : BV:32
7 : 13901829 { 0xd42005 +1.65722715e130 } : BV:32
8 : eq(6, 7) : BOOL
9 : 1 { 0x1 } : BV:8
10 : 128 { 0x80 -128 } : BV:8
11 : ite(8, 9, 10) : BV:8
12 : 2 { 0x2 +1.23e129 } : BV:32
13 : bvadd(12, 4, 5) : BV:32
14 : eq(13, 7) : BOOL
15 : ite(14, 9, 10) : BV:8
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : bvadd(16, 4, 5) : BV:32
18 : eq(17, 7) : BOOL
19 : ite(18, 9, 10) : BV:8
20 : bvadd(4, 5) : BV:32
21 : eq(20, 7) : BOOL
22 : ite(21, 9, 10) : BV:8
23 : bvconcat(11, 15, 19, 22) : BV:32
24 : lambda(1, 23) : FUNCTION[BV:32 -> BV:32]
25 : sym_const(24) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2155905151 ] -> true, [ 2155905152; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : Lambda86 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(3, 1) : BV:32
5 : 2155872640 { 0x80800180 -2139094656 -1.4577e130 } : BV:32
6 : bvadd(2, 4, 5) : BV:32
7 : 13901829 { 0xd42005 +1.65722715e130 } : BV:32
8 : eq(6, 7) : BOOL
9 : 1 { 0x1 } : BV:8
10 : 128 { 0x80 -128 } : BV:8
11 : ite(8, 9, 10) : BV:8
12 : 2 { 0x2 +1.23e129 } : BV:32
13 : bvadd(12, 4, 5) : BV:32
14 : eq(13, 7) : BOOL
15 : ite(14, 9, 10) : BV:8
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : bvadd(16, 4, 5) : BV:32
18 : eq(17, 7) : BOOL
19 : ite(18, 9, 10) : BV:8
20 : bvadd(4, 5) : BV:32
21 : eq(20, 7) : BOOL
22 : ite(21, 9, 10) : BV:8
23 : bvconcat(11, 15, 19, 22) : BV:32
24 : lambda(1, 23) : FUNCTION[BV:32 -> BV:32]
25 : sym_const(24) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 193259268 { 0xb84e704 +1.3830003e152 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4491712 { 0x4489c0 +1.53545379e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 4491715 { 0x4489c3 +1.53545415e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 13901828 { 0xd42004 +1.65722703e130 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 13901831 { 0xd42007 +1.65722739e130 } : BV:32
=counter_example.random_seed
1795444310
=counter_example_end
=global nodece 4 num_edges_traversed 1
=global nodece 4 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 5
=global nodece 5 nodece z3.ce63.num_edges_traversed1
=global nodece 5 nodece_path
=global nodece 5 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 5 nodece_cached_counterexample
=counter_example_begin z3.ce63 50f0a3397b401f8ae9be5cf2e228e4d
=input.spec-%var-x-1
1 : Lambda133 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4025478912 { 0xefefef00 -269488384 -1.87448120e96 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4025478913 { 0xefefef01 -269488383 -1.87448132e96 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda134 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 4138331904 { 0xf6a9ef00 -156635392 -1.32760620e110 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 4138331905 { 0xf6a9ef01 -156635391 -1.32760632e110 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 4170696130 { 0xf897c5c2 -124271166 -1.18572258e114 } : BV:32
28 : eq(23, 27) : BOOL
29 : 169 { 0xa9 -87 } : BV:8
30 : 3095354568 { 0xb87f5cc8 -1199612728 -1.99501895e241 } : BV:32
31 : eq(23, 30) : BOOL
32 : 1 { 0x1 } : BV:8
33 : 4138331907 { 0xf6a9ef03 -156635389 -1.32760655e110 } : BV:32
34 : eq(23, 33) : BOOL
35 : 4138331906 { 0xf6a9ef02 -156635390 -1.32760643e110 } : BV:32
36 : eq(23, 35) : BOOL
37 : eq(23, 22) : BOOL
38 : 4170696131 { 0xf897c5c3 -124271165 -1.18572270e114 } : BV:32
39 : eq(23, 38) : BOOL
40 : 246 { 0xf6 -10 } : BV:8
41 : 4170696128 { 0xf897c5c0 -124271168 -1.18572235e114 } : BV:32
42 : eq(23, 41) : BOOL
43 : 239 { 0xef -17 } : BV:8
44 : ite(42, 26, 43) : BV:8
45 : ite(39, 40, 44) : BV:8
46 : ite(37, 26, 45) : BV:8
47 : ite(36, 26, 46) : BV:8
48 : ite(34, 26, 47) : BV:8
49 : ite(31, 32, 48) : BV:8
50 : ite(28, 29, 49) : BV:8
51 : ite(25, 26, 50) : BV:8
52 : 2 { 0x2 +1.23e129 } : BV:32
53 : bvadd(52, 21, 22) : BV:32
54 : eq(53, 24) : BOOL
55 : eq(53, 27) : BOOL
56 : eq(53, 30) : BOOL
57 : eq(53, 33) : BOOL
58 : eq(53, 35) : BOOL
59 : eq(53, 22) : BOOL
60 : eq(53, 38) : BOOL
61 : eq(53, 41) : BOOL
62 : ite(61, 26, 43) : BV:8
63 : ite(60, 40, 62) : BV:8
64 : ite(59, 26, 63) : BV:8
65 : ite(58, 26, 64) : BV:8
66 : ite(57, 26, 65) : BV:8
67 : ite(56, 32, 66) : BV:8
68 : ite(55, 29, 67) : BV:8
69 : ite(54, 26, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 21, 22) : BV:32
72 : eq(71, 24) : BOOL
73 : eq(71, 27) : BOOL
74 : eq(71, 30) : BOOL
75 : eq(71, 33) : BOOL
76 : eq(71, 35) : BOOL
77 : eq(71, 22) : BOOL
78 : eq(71, 38) : BOOL
79 : eq(71, 41) : BOOL
80 : ite(79, 26, 43) : BV:8
81 : ite(78, 40, 80) : BV:8
82 : ite(77, 26, 81) : BV:8
83 : ite(76, 26, 82) : BV:8
84 : ite(75, 26, 83) : BV:8
85 : ite(74, 32, 84) : BV:8
86 : ite(73, 29, 85) : BV:8
87 : ite(72, 26, 86) : BV:8
88 : bvadd(21, 22) : BV:32
89 : eq(88, 24) : BOOL
90 : eq(88, 27) : BOOL
91 : eq(88, 30) : BOOL
92 : eq(88, 33) : BOOL
93 : eq(88, 35) : BOOL
94 : eq(88, 22) : BOOL
95 : eq(88, 38) : BOOL
96 : eq(88, 41) : BOOL
97 : ite(96, 26, 43) : BV:8
98 : ite(95, 40, 97) : BV:8
99 : ite(94, 26, 98) : BV:8
100 : ite(93, 26, 99) : BV:8
101 : ite(92, 26, 100) : BV:8
102 : ite(91, 32, 101) : BV:8
103 : ite(90, 29, 102) : BV:8
104 : ite(89, 26, 103) : BV:8
105 : bvconcat(51, 69, 87, 104) : BV:32
106 : ite(18, 2, 105) : BV:32
107 : lambda(17, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(16, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L3%6%bbentry
1 : Lambda133 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4025478912 { 0xefefef00 -269488384 -1.87448120e96 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4025478913 { 0xefefef01 -269488383 -1.87448132e96 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda134 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 4138331904 { 0xf6a9ef00 -156635392 -1.32760620e110 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 4138331905 { 0xf6a9ef01 -156635391 -1.32760632e110 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 4170696130 { 0xf897c5c2 -124271166 -1.18572258e114 } : BV:32
28 : eq(23, 27) : BOOL
29 : 169 { 0xa9 -87 } : BV:8
30 : 3095354568 { 0xb87f5cc8 -1199612728 -1.99501895e241 } : BV:32
31 : eq(23, 30) : BOOL
32 : 1 { 0x1 } : BV:8
33 : 4138331907 { 0xf6a9ef03 -156635389 -1.32760655e110 } : BV:32
34 : eq(23, 33) : BOOL
35 : 4138331906 { 0xf6a9ef02 -156635390 -1.32760643e110 } : BV:32
36 : eq(23, 35) : BOOL
37 : eq(23, 22) : BOOL
38 : 4170696131 { 0xf897c5c3 -124271165 -1.18572270e114 } : BV:32
39 : eq(23, 38) : BOOL
40 : 246 { 0xf6 -10 } : BV:8
41 : 4170696128 { 0xf897c5c0 -124271168 -1.18572235e114 } : BV:32
42 : eq(23, 41) : BOOL
43 : 239 { 0xef -17 } : BV:8
44 : ite(42, 26, 43) : BV:8
45 : ite(39, 40, 44) : BV:8
46 : ite(37, 26, 45) : BV:8
47 : ite(36, 26, 46) : BV:8
48 : ite(34, 26, 47) : BV:8
49 : ite(31, 32, 48) : BV:8
50 : ite(28, 29, 49) : BV:8
51 : ite(25, 26, 50) : BV:8
52 : 2 { 0x2 +1.23e129 } : BV:32
53 : bvadd(52, 21, 22) : BV:32
54 : eq(53, 24) : BOOL
55 : eq(53, 27) : BOOL
56 : eq(53, 30) : BOOL
57 : eq(53, 33) : BOOL
58 : eq(53, 35) : BOOL
59 : eq(53, 22) : BOOL
60 : eq(53, 38) : BOOL
61 : eq(53, 41) : BOOL
62 : ite(61, 26, 43) : BV:8
63 : ite(60, 40, 62) : BV:8
64 : ite(59, 26, 63) : BV:8
65 : ite(58, 26, 64) : BV:8
66 : ite(57, 26, 65) : BV:8
67 : ite(56, 32, 66) : BV:8
68 : ite(55, 29, 67) : BV:8
69 : ite(54, 26, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 21, 22) : BV:32
72 : eq(71, 24) : BOOL
73 : eq(71, 27) : BOOL
74 : eq(71, 30) : BOOL
75 : eq(71, 33) : BOOL
76 : eq(71, 35) : BOOL
77 : eq(71, 22) : BOOL
78 : eq(71, 38) : BOOL
79 : eq(71, 41) : BOOL
80 : ite(79, 26, 43) : BV:8
81 : ite(78, 40, 80) : BV:8
82 : ite(77, 26, 81) : BV:8
83 : ite(76, 26, 82) : BV:8
84 : ite(75, 26, 83) : BV:8
85 : ite(74, 32, 84) : BV:8
86 : ite(73, 29, 85) : BV:8
87 : ite(72, 26, 86) : BV:8
88 : bvadd(21, 22) : BV:32
89 : eq(88, 24) : BOOL
90 : eq(88, 27) : BOOL
91 : eq(88, 30) : BOOL
92 : eq(88, 33) : BOOL
93 : eq(88, 35) : BOOL
94 : eq(88, 22) : BOOL
95 : eq(88, 38) : BOOL
96 : eq(88, 41) : BOOL
97 : ite(96, 26, 43) : BV:8
98 : ite(95, 40, 97) : BV:8
99 : ite(94, 26, 98) : BV:8
100 : ite(93, 26, 99) : BV:8
101 : ite(92, 26, 100) : BV:8
102 : ite(91, 32, 101) : BV:8
103 : ite(90, 29, 102) : BV:8
104 : ite(89, 26, 103) : BV:8
105 : bvconcat(51, 69, 87, 104) : BV:32
106 : ite(18, 2, 105) : BV:32
107 : lambda(17, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(16, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 4138331904 { 0xf6a9ef00 -156635392 -1.32760620e110 } : BV:32
=input.dst.llvm-%n
1 : 4025478913 { 0xefefef01 -269488383 -1.87448132e96 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3095354567 ] -> 239, [ 3095354568; 3095354568 ] -> 1, [ 3095354569; 4138331903 ] -> 239, [ 4138331904; 4138331907 ] -> 0, [ 4138331908; 4170696127 ] -> 239, [ 4170696128; 4170696128 ] -> 0, [ 4170696129; 4170696129 ] -> 239, [ 4170696130; 4170696130 ] -> 169, [ 4170696131; 4170696131 ] -> 246, [ 4170696132; 4294967295 ] -> 239, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3095354567 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3095354568; 3095354571 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3095354572; 4170696127 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4170696128; 4170696131 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4170696132; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4170696128 { 0xf897c5c0 -124271168 -1.18572235e114 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3095354568 { 0xb87f5cc8 -1199612728 -1.99501895e241 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1407581506 { 0x53e5fd42 +1.79679131e40 } : COUNT
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-0.L3%6%bbentry.0.1
1 : ([ 0; 4025478912 ] -> true, [ 4025478913; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%6%bbentry.1.1
1 : Lambda121 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 4138331904 { 0xf6a9ef00 -156635392 -1.32760620e110 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 4138331905 { 0xf6a9ef01 -156635391 -1.32760632e110 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 4170696130 { 0xf897c5c2 -124271166 -1.18572258e114 } : BV:32
13 : eq(8, 12) : BOOL
14 : 169 { 0xa9 -87 } : BV:8
15 : 3095354568 { 0xb87f5cc8 -1199612728 -1.99501895e241 } : BV:32
16 : eq(8, 15) : BOOL
17 : 1 { 0x1 } : BV:8
18 : 4138331907 { 0xf6a9ef03 -156635389 -1.32760655e110 } : BV:32
19 : eq(8, 18) : BOOL
20 : 4138331906 { 0xf6a9ef02 -156635390 -1.32760643e110 } : BV:32
21 : eq(8, 20) : BOOL
22 : eq(8, 7) : BOOL
23 : 4170696131 { 0xf897c5c3 -124271165 -1.18572270e114 } : BV:32
24 : eq(8, 23) : BOOL
25 : 246 { 0xf6 -10 } : BV:8
26 : 4170696128 { 0xf897c5c0 -124271168 -1.18572235e114 } : BV:32
27 : eq(8, 26) : BOOL
28 : 239 { 0xef -17 } : BV:8
29 : ite(27, 11, 28) : BV:8
30 : ite(24, 25, 29) : BV:8
31 : ite(22, 11, 30) : BV:8
32 : ite(21, 11, 31) : BV:8
33 : ite(19, 11, 32) : BV:8
34 : ite(16, 17, 33) : BV:8
35 : ite(13, 14, 34) : BV:8
36 : ite(10, 11, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 6, 7) : BV:32
39 : eq(38, 9) : BOOL
40 : eq(38, 12) : BOOL
41 : eq(38, 15) : BOOL
42 : eq(38, 18) : BOOL
43 : eq(38, 20) : BOOL
44 : eq(38, 7) : BOOL
45 : eq(38, 23) : BOOL
46 : eq(38, 26) : BOOL
47 : ite(46, 11, 28) : BV:8
48 : ite(45, 25, 47) : BV:8
49 : ite(44, 11, 48) : BV:8
50 : ite(43, 11, 49) : BV:8
51 : ite(42, 11, 50) : BV:8
52 : ite(41, 17, 51) : BV:8
53 : ite(40, 14, 52) : BV:8
54 : ite(39, 11, 53) : BV:8
55 : 1 { 0x1 +1.11e129 } : BV:32
56 : bvadd(55, 6, 7) : BV:32
57 : eq(56, 9) : BOOL
58 : eq(56, 12) : BOOL
59 : eq(56, 15) : BOOL
60 : eq(56, 18) : BOOL
61 : eq(56, 20) : BOOL
62 : eq(56, 7) : BOOL
63 : eq(56, 23) : BOOL
64 : eq(56, 26) : BOOL
65 : ite(64, 11, 28) : BV:8
66 : ite(63, 25, 65) : BV:8
67 : ite(62, 11, 66) : BV:8
68 : ite(61, 11, 67) : BV:8
69 : ite(60, 11, 68) : BV:8
70 : ite(59, 17, 69) : BV:8
71 : ite(58, 14, 70) : BV:8
72 : ite(57, 11, 71) : BV:8
73 : bvadd(6, 7) : BV:32
74 : eq(73, 9) : BOOL
75 : eq(73, 12) : BOOL
76 : eq(73, 15) : BOOL
77 : eq(73, 18) : BOOL
78 : eq(73, 20) : BOOL
79 : eq(73, 7) : BOOL
80 : eq(73, 23) : BOOL
81 : eq(73, 26) : BOOL
82 : ite(81, 11, 28) : BV:8
83 : ite(80, 25, 82) : BV:8
84 : ite(79, 11, 83) : BV:8
85 : ite(78, 11, 84) : BV:8
86 : ite(77, 11, 85) : BV:8
87 : ite(76, 17, 86) : BV:8
88 : ite(75, 14, 87) : BV:8
89 : ite(74, 11, 88) : BV:8
90 : bvconcat(36, 54, 72, 89) : BV:32
91 : ite(3, 2, 90) : BV:32
92 : ite(3, 2, 91) : BV:32
93 : lambda(1, 92) : FUNCTION[BV:32 -> BV:32]
94 : sym_const(93) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4025478912 ] -> true, [ 4025478913; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : Lambda122 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 4138331904 { 0xf6a9ef00 -156635392 -1.32760620e110 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 4138331905 { 0xf6a9ef01 -156635391 -1.32760632e110 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 4170696130 { 0xf897c5c2 -124271166 -1.18572258e114 } : BV:32
13 : eq(8, 12) : BOOL
14 : 169 { 0xa9 -87 } : BV:8
15 : 3095354568 { 0xb87f5cc8 -1199612728 -1.99501895e241 } : BV:32
16 : eq(8, 15) : BOOL
17 : 1 { 0x1 } : BV:8
18 : 4138331907 { 0xf6a9ef03 -156635389 -1.32760655e110 } : BV:32
19 : eq(8, 18) : BOOL
20 : 4138331906 { 0xf6a9ef02 -156635390 -1.32760643e110 } : BV:32
21 : eq(8, 20) : BOOL
22 : eq(8, 7) : BOOL
23 : 4170696131 { 0xf897c5c3 -124271165 -1.18572270e114 } : BV:32
24 : eq(8, 23) : BOOL
25 : 246 { 0xf6 -10 } : BV:8
26 : 4170696128 { 0xf897c5c0 -124271168 -1.18572235e114 } : BV:32
27 : eq(8, 26) : BOOL
28 : 239 { 0xef -17 } : BV:8
29 : ite(27, 11, 28) : BV:8
30 : ite(24, 25, 29) : BV:8
31 : ite(22, 11, 30) : BV:8
32 : ite(21, 11, 31) : BV:8
33 : ite(19, 11, 32) : BV:8
34 : ite(16, 17, 33) : BV:8
35 : ite(13, 14, 34) : BV:8
36 : ite(10, 11, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 6, 7) : BV:32
39 : eq(38, 9) : BOOL
40 : eq(38, 12) : BOOL
41 : eq(38, 15) : BOOL
42 : eq(38, 18) : BOOL
43 : eq(38, 20) : BOOL
44 : eq(38, 7) : BOOL
45 : eq(38, 23) : BOOL
46 : eq(38, 26) : BOOL
47 : ite(46, 11, 28) : BV:8
48 : ite(45, 25, 47) : BV:8
49 : ite(44, 11, 48) : BV:8
50 : ite(43, 11, 49) : BV:8
51 : ite(42, 11, 50) : BV:8
52 : ite(41, 17, 51) : BV:8
53 : ite(40, 14, 52) : BV:8
54 : ite(39, 11, 53) : BV:8
55 : 1 { 0x1 +1.11e129 } : BV:32
56 : bvadd(55, 6, 7) : BV:32
57 : eq(56, 9) : BOOL
58 : eq(56, 12) : BOOL
59 : eq(56, 15) : BOOL
60 : eq(56, 18) : BOOL
61 : eq(56, 20) : BOOL
62 : eq(56, 7) : BOOL
63 : eq(56, 23) : BOOL
64 : eq(56, 26) : BOOL
65 : ite(64, 11, 28) : BV:8
66 : ite(63, 25, 65) : BV:8
67 : ite(62, 11, 66) : BV:8
68 : ite(61, 11, 67) : BV:8
69 : ite(60, 11, 68) : BV:8
70 : ite(59, 17, 69) : BV:8
71 : ite(58, 14, 70) : BV:8
72 : ite(57, 11, 71) : BV:8
73 : bvadd(6, 7) : BV:32
74 : eq(73, 9) : BOOL
75 : eq(73, 12) : BOOL
76 : eq(73, 15) : BOOL
77 : eq(73, 18) : BOOL
78 : eq(73, 20) : BOOL
79 : eq(73, 7) : BOOL
80 : eq(73, 23) : BOOL
81 : eq(73, 26) : BOOL
82 : ite(81, 11, 28) : BV:8
83 : ite(80, 25, 82) : BV:8
84 : ite(79, 11, 83) : BV:8
85 : ite(78, 11, 84) : BV:8
86 : ite(77, 11, 85) : BV:8
87 : ite(76, 17, 86) : BV:8
88 : ite(75, 14, 87) : BV:8
89 : ite(74, 11, 88) : BV:8
90 : bvconcat(36, 54, 72, 89) : BV:32
91 : ite(3, 2, 90) : BV:32
92 : lambda(1, 91) : FUNCTION[BV:32 -> BV:32]
93 : sym_const(92) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1407581506 { 0x53e5fd42 +1.79679131e40 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3095354568 { 0xb87f5cc8 -1199612728 -1.99501895e241 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3095354571 { 0xb87f5ccb -1199612725 -1.99501931e241 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4170696128 { 0xf897c5c0 -124271168 -1.18572235e114 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 4170696131 { 0xf897c5c3 -124271165 -1.18572270e114 } : BV:32
=counter_example.random_seed
1027758982
=counter_example_end
=global nodece 5 num_edges_traversed 1
=global nodece 5 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 6
=global nodece 6 nodece z3.ce83.num_edges_traversed1
=global nodece 6 nodece_path
=global nodece 6 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 6 nodece_cached_counterexample
=counter_example_begin z3.ce83 2c90b1eaff3b3bd82f2f4f06edff957
=input.spec-%var-x-1
1 : Lambda167 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda168 : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(12, 10) : BV:32
14 : 3892313664 { 0xe7fffe40 -402653632 -1.99994659e80 } : BV:32
15 : bvadd(11, 13, 14) : BV:32
16 : 1186986737 { 0x46bffaf1 +1.49984562e14 } : BV:32
17 : eq(15, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : 343389910 { 0x1477b6d6 +1.93526721e169 } : BV:32
20 : eq(15, 19) : BOOL
21 : 255 { 0xff -1 } : BV:8
22 : 1186986736 { 0x46bffaf0 +1.49984550e14 } : BV:32
23 : eq(15, 22) : BOOL
24 : 1186986739 { 0x46bffaf3 +1.49984586e14 } : BV:32
25 : eq(15, 24) : BOOL
26 : 1186986738 { 0x46bffaf2 +1.49984574e14 } : BV:32
27 : eq(15, 26) : BOOL
28 : 343389911 { 0x1477b6d7 +1.93526732e169 } : BV:32
29 : eq(15, 28) : BOOL
30 : 231 { 0xe7 -25 } : BV:8
31 : 343389908 { 0x1477b6d4 +1.93526697e169 } : BV:32
32 : eq(15, 31) : BOOL
33 : 64 { 0x40 } : BV:8
34 : 254 { 0xfe -2 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(29, 30, 35) : BV:8
37 : ite(27, 18, 36) : BV:8
38 : ite(25, 18, 37) : BV:8
39 : ite(23, 18, 38) : BV:8
40 : ite(20, 21, 39) : BV:8
41 : ite(17, 18, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 13, 14) : BV:32
44 : eq(43, 16) : BOOL
45 : eq(43, 19) : BOOL
46 : eq(43, 22) : BOOL
47 : eq(43, 24) : BOOL
48 : eq(43, 26) : BOOL
49 : eq(43, 28) : BOOL
50 : eq(43, 31) : BOOL
51 : ite(50, 33, 34) : BV:8
52 : ite(49, 30, 51) : BV:8
53 : ite(48, 18, 52) : BV:8
54 : ite(47, 18, 53) : BV:8
55 : ite(46, 18, 54) : BV:8
56 : ite(45, 21, 55) : BV:8
57 : ite(44, 18, 56) : BV:8
58 : 1 { 0x1 +1.11e129 } : BV:32
59 : bvadd(58, 13, 14) : BV:32
60 : eq(59, 16) : BOOL
61 : eq(59, 19) : BOOL
62 : eq(59, 22) : BOOL
63 : eq(59, 24) : BOOL
64 : eq(59, 26) : BOOL
65 : eq(59, 28) : BOOL
66 : eq(59, 31) : BOOL
67 : ite(66, 33, 34) : BV:8
68 : ite(65, 30, 67) : BV:8
69 : ite(64, 18, 68) : BV:8
70 : ite(63, 18, 69) : BV:8
71 : ite(62, 18, 70) : BV:8
72 : ite(61, 21, 71) : BV:8
73 : ite(60, 18, 72) : BV:8
74 : bvadd(13, 14) : BV:32
75 : eq(74, 16) : BOOL
76 : eq(74, 19) : BOOL
77 : eq(74, 22) : BOOL
78 : eq(74, 24) : BOOL
79 : eq(74, 26) : BOOL
80 : eq(74, 28) : BOOL
81 : eq(74, 31) : BOOL
82 : ite(81, 33, 34) : BV:8
83 : ite(80, 30, 82) : BV:8
84 : ite(79, 18, 83) : BV:8
85 : ite(78, 18, 84) : BV:8
86 : ite(77, 18, 85) : BV:8
87 : ite(76, 21, 86) : BV:8
88 : ite(75, 18, 87) : BV:8
89 : bvconcat(41, 57, 73, 88) : BV:32
90 : lambda(10, 89) : FUNCTION[BV:32 -> BV:32]
91 : map(9, 90) : MAP[BV:32 -> BV:32]
92 : sym_const(91) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L3%6%bbentry
1 : Lambda167 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda168 : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(12, 10) : BV:32
14 : 3892313664 { 0xe7fffe40 -402653632 -1.99994659e80 } : BV:32
15 : bvadd(11, 13, 14) : BV:32
16 : 1186986737 { 0x46bffaf1 +1.49984562e14 } : BV:32
17 : eq(15, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : 343389910 { 0x1477b6d6 +1.93526721e169 } : BV:32
20 : eq(15, 19) : BOOL
21 : 255 { 0xff -1 } : BV:8
22 : 1186986736 { 0x46bffaf0 +1.49984550e14 } : BV:32
23 : eq(15, 22) : BOOL
24 : 1186986739 { 0x46bffaf3 +1.49984586e14 } : BV:32
25 : eq(15, 24) : BOOL
26 : 1186986738 { 0x46bffaf2 +1.49984574e14 } : BV:32
27 : eq(15, 26) : BOOL
28 : 343389911 { 0x1477b6d7 +1.93526732e169 } : BV:32
29 : eq(15, 28) : BOOL
30 : 231 { 0xe7 -25 } : BV:8
31 : 343389908 { 0x1477b6d4 +1.93526697e169 } : BV:32
32 : eq(15, 31) : BOOL
33 : 64 { 0x40 } : BV:8
34 : 254 { 0xfe -2 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(29, 30, 35) : BV:8
37 : ite(27, 18, 36) : BV:8
38 : ite(25, 18, 37) : BV:8
39 : ite(23, 18, 38) : BV:8
40 : ite(20, 21, 39) : BV:8
41 : ite(17, 18, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 13, 14) : BV:32
44 : eq(43, 16) : BOOL
45 : eq(43, 19) : BOOL
46 : eq(43, 22) : BOOL
47 : eq(43, 24) : BOOL
48 : eq(43, 26) : BOOL
49 : eq(43, 28) : BOOL
50 : eq(43, 31) : BOOL
51 : ite(50, 33, 34) : BV:8
52 : ite(49, 30, 51) : BV:8
53 : ite(48, 18, 52) : BV:8
54 : ite(47, 18, 53) : BV:8
55 : ite(46, 18, 54) : BV:8
56 : ite(45, 21, 55) : BV:8
57 : ite(44, 18, 56) : BV:8
58 : 1 { 0x1 +1.11e129 } : BV:32
59 : bvadd(58, 13, 14) : BV:32
60 : eq(59, 16) : BOOL
61 : eq(59, 19) : BOOL
62 : eq(59, 22) : BOOL
63 : eq(59, 24) : BOOL
64 : eq(59, 26) : BOOL
65 : eq(59, 28) : BOOL
66 : eq(59, 31) : BOOL
67 : ite(66, 33, 34) : BV:8
68 : ite(65, 30, 67) : BV:8
69 : ite(64, 18, 68) : BV:8
70 : ite(63, 18, 69) : BV:8
71 : ite(62, 18, 70) : BV:8
72 : ite(61, 21, 71) : BV:8
73 : ite(60, 18, 72) : BV:8
74 : bvadd(13, 14) : BV:32
75 : eq(74, 16) : BOOL
76 : eq(74, 19) : BOOL
77 : eq(74, 22) : BOOL
78 : eq(74, 24) : BOOL
79 : eq(74, 26) : BOOL
80 : eq(74, 28) : BOOL
81 : eq(74, 31) : BOOL
82 : ite(81, 33, 34) : BV:8
83 : ite(80, 30, 82) : BV:8
84 : ite(79, 18, 83) : BV:8
85 : ite(78, 18, 84) : BV:8
86 : ite(77, 18, 85) : BV:8
87 : ite(76, 21, 86) : BV:8
88 : ite(75, 18, 87) : BV:8
89 : bvconcat(41, 57, 73, 88) : BV:32
90 : lambda(10, 89) : FUNCTION[BV:32 -> BV:32]
91 : map(9, 90) : MAP[BV:32 -> BV:32]
92 : sym_const(91) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 3892313664 { 0xe7fffe40 -402653632 -1.99994659e80 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 343389907 ] -> 254, [ 343389908; 343389908 ] -> 64, [ 343389909; 343389909 ] -> 254, [ 343389910; 343389910 ] -> 255, [ 343389911; 343389911 ] -> 231, [ 343389912; 1186986735 ] -> 254, [ 1186986736; 1186986739 ] -> 0, [ 1186986740; 4294967295 ] -> 254, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 343389907 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 343389908; 343389911 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 343389912; 1186986735 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1186986736; 1186986739 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1186986740; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 343389908 { 0x1477b6d4 +1.93526697e169 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1186986736 { 0x46bffaf0 +1.49984550e14 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 308041456 { 0x125c56f0 +1.72140312e165 } : COUNT
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-0.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%6%bbentry.1.1
1 : Lambda155 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(3, 1) : BV:32
5 : 3892313664 { 0xe7fffe40 -402653632 -1.99994659e80 } : BV:32
6 : bvadd(2, 4, 5) : BV:32
7 : 1186986737 { 0x46bffaf1 +1.49984562e14 } : BV:32
8 : eq(6, 7) : BOOL
9 : 0 { 0x0 } : BV:8
10 : 343389910 { 0x1477b6d6 +1.93526721e169 } : BV:32
11 : eq(6, 10) : BOOL
12 : 255 { 0xff -1 } : BV:8
13 : 1186986736 { 0x46bffaf0 +1.49984550e14 } : BV:32
14 : eq(6, 13) : BOOL
15 : 1186986739 { 0x46bffaf3 +1.49984586e14 } : BV:32
16 : eq(6, 15) : BOOL
17 : 1186986738 { 0x46bffaf2 +1.49984574e14 } : BV:32
18 : eq(6, 17) : BOOL
19 : 343389911 { 0x1477b6d7 +1.93526732e169 } : BV:32
20 : eq(6, 19) : BOOL
21 : 231 { 0xe7 -25 } : BV:8
22 : 343389908 { 0x1477b6d4 +1.93526697e169 } : BV:32
23 : eq(6, 22) : BOOL
24 : 64 { 0x40 } : BV:8
25 : 254 { 0xfe -2 } : BV:8
26 : ite(23, 24, 25) : BV:8
27 : ite(20, 21, 26) : BV:8
28 : ite(18, 9, 27) : BV:8
29 : ite(16, 9, 28) : BV:8
30 : ite(14, 9, 29) : BV:8
31 : ite(11, 12, 30) : BV:8
32 : ite(8, 9, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 4, 5) : BV:32
35 : eq(34, 7) : BOOL
36 : eq(34, 10) : BOOL
37 : eq(34, 13) : BOOL
38 : eq(34, 15) : BOOL
39 : eq(34, 17) : BOOL
40 : eq(34, 19) : BOOL
41 : eq(34, 22) : BOOL
42 : ite(41, 24, 25) : BV:8
43 : ite(40, 21, 42) : BV:8
44 : ite(39, 9, 43) : BV:8
45 : ite(38, 9, 44) : BV:8
46 : ite(37, 9, 45) : BV:8
47 : ite(36, 12, 46) : BV:8
48 : ite(35, 9, 47) : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : bvadd(49, 4, 5) : BV:32
51 : eq(50, 7) : BOOL
52 : eq(50, 10) : BOOL
53 : eq(50, 13) : BOOL
54 : eq(50, 15) : BOOL
55 : eq(50, 17) : BOOL
56 : eq(50, 19) : BOOL
57 : eq(50, 22) : BOOL
58 : ite(57, 24, 25) : BV:8
59 : ite(56, 21, 58) : BV:8
60 : ite(55, 9, 59) : BV:8
61 : ite(54, 9, 60) : BV:8
62 : ite(53, 9, 61) : BV:8
63 : ite(52, 12, 62) : BV:8
64 : ite(51, 9, 63) : BV:8
65 : bvadd(4, 5) : BV:32
66 : eq(65, 7) : BOOL
67 : eq(65, 10) : BOOL
68 : eq(65, 13) : BOOL
69 : eq(65, 15) : BOOL
70 : eq(65, 17) : BOOL
71 : eq(65, 19) : BOOL
72 : eq(65, 22) : BOOL
73 : ite(72, 24, 25) : BV:8
74 : ite(71, 21, 73) : BV:8
75 : ite(70, 9, 74) : BV:8
76 : ite(69, 9, 75) : BV:8
77 : ite(68, 9, 76) : BV:8
78 : ite(67, 12, 77) : BV:8
79 : ite(66, 9, 78) : BV:8
80 : bvconcat(32, 48, 64, 79) : BV:32
81 : lambda(1, 80) : FUNCTION[BV:32 -> BV:32]
82 : sym_const(81) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : Lambda156 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(3, 1) : BV:32
5 : 3892313664 { 0xe7fffe40 -402653632 -1.99994659e80 } : BV:32
6 : bvadd(2, 4, 5) : BV:32
7 : 1186986737 { 0x46bffaf1 +1.49984562e14 } : BV:32
8 : eq(6, 7) : BOOL
9 : 0 { 0x0 } : BV:8
10 : 343389910 { 0x1477b6d6 +1.93526721e169 } : BV:32
11 : eq(6, 10) : BOOL
12 : 255 { 0xff -1 } : BV:8
13 : 1186986736 { 0x46bffaf0 +1.49984550e14 } : BV:32
14 : eq(6, 13) : BOOL
15 : 1186986739 { 0x46bffaf3 +1.49984586e14 } : BV:32
16 : eq(6, 15) : BOOL
17 : 1186986738 { 0x46bffaf2 +1.49984574e14 } : BV:32
18 : eq(6, 17) : BOOL
19 : 343389911 { 0x1477b6d7 +1.93526732e169 } : BV:32
20 : eq(6, 19) : BOOL
21 : 231 { 0xe7 -25 } : BV:8
22 : 343389908 { 0x1477b6d4 +1.93526697e169 } : BV:32
23 : eq(6, 22) : BOOL
24 : 64 { 0x40 } : BV:8
25 : 254 { 0xfe -2 } : BV:8
26 : ite(23, 24, 25) : BV:8
27 : ite(20, 21, 26) : BV:8
28 : ite(18, 9, 27) : BV:8
29 : ite(16, 9, 28) : BV:8
30 : ite(14, 9, 29) : BV:8
31 : ite(11, 12, 30) : BV:8
32 : ite(8, 9, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 4, 5) : BV:32
35 : eq(34, 7) : BOOL
36 : eq(34, 10) : BOOL
37 : eq(34, 13) : BOOL
38 : eq(34, 15) : BOOL
39 : eq(34, 17) : BOOL
40 : eq(34, 19) : BOOL
41 : eq(34, 22) : BOOL
42 : ite(41, 24, 25) : BV:8
43 : ite(40, 21, 42) : BV:8
44 : ite(39, 9, 43) : BV:8
45 : ite(38, 9, 44) : BV:8
46 : ite(37, 9, 45) : BV:8
47 : ite(36, 12, 46) : BV:8
48 : ite(35, 9, 47) : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : bvadd(49, 4, 5) : BV:32
51 : eq(50, 7) : BOOL
52 : eq(50, 10) : BOOL
53 : eq(50, 13) : BOOL
54 : eq(50, 15) : BOOL
55 : eq(50, 17) : BOOL
56 : eq(50, 19) : BOOL
57 : eq(50, 22) : BOOL
58 : ite(57, 24, 25) : BV:8
59 : ite(56, 21, 58) : BV:8
60 : ite(55, 9, 59) : BV:8
61 : ite(54, 9, 60) : BV:8
62 : ite(53, 9, 61) : BV:8
63 : ite(52, 12, 62) : BV:8
64 : ite(51, 9, 63) : BV:8
65 : bvadd(4, 5) : BV:32
66 : eq(65, 7) : BOOL
67 : eq(65, 10) : BOOL
68 : eq(65, 13) : BOOL
69 : eq(65, 15) : BOOL
70 : eq(65, 17) : BOOL
71 : eq(65, 19) : BOOL
72 : eq(65, 22) : BOOL
73 : ite(72, 24, 25) : BV:8
74 : ite(71, 21, 73) : BV:8
75 : ite(70, 9, 74) : BV:8
76 : ite(69, 9, 75) : BV:8
77 : ite(68, 9, 76) : BV:8
78 : ite(67, 12, 77) : BV:8
79 : ite(66, 9, 78) : BV:8
80 : bvconcat(32, 48, 64, 79) : BV:32
81 : lambda(1, 80) : FUNCTION[BV:32 -> BV:32]
82 : sym_const(81) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 308041456 { 0x125c56f0 +1.72140312e165 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1186986736 { 0x46bffaf0 +1.49984550e14 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1186986739 { 0x46bffaf3 +1.49984586e14 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 343389908 { 0x1477b6d4 +1.93526697e169 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 343389911 { 0x1477b6d7 +1.93526732e169 } : BV:32
=counter_example.random_seed
3002094805
=counter_example_end
=global nodece 6 num_edges_traversed 1
=global nodece 6 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 7
=global nodece 7 nodece z3.ce103.num_edges_traversed1
=global nodece 7 nodece_path
=global nodece 7 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 7 nodece_cached_counterexample
=counter_example_begin z3.ce103 6b392cd8245233ef1b3e95ed7bb2c14
=input.spec-%var-x-1
1 : Lambda203 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda204 : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(12, 10) : BV:32
14 : 3892313604 { 0xe7fffe04 -402653692 -1.99993944e80 } : BV:32
15 : bvadd(11, 13, 14) : BV:32
16 : 1186986737 { 0x46bffaf1 +1.49984562e14 } : BV:32
17 : eq(15, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : 343389910 { 0x1477b6d6 +1.93526721e169 } : BV:32
20 : eq(15, 19) : BOOL
21 : 255 { 0xff -1 } : BV:8
22 : 1186986736 { 0x46bffaf0 +1.49984550e14 } : BV:32
23 : eq(15, 22) : BOOL
24 : 1186986739 { 0x46bffaf3 +1.49984586e14 } : BV:32
25 : eq(15, 24) : BOOL
26 : 1186986738 { 0x46bffaf2 +1.49984574e14 } : BV:32
27 : eq(15, 26) : BOOL
28 : 343389909 { 0x1477b6d5 +1.93526709e169 } : BV:32
29 : eq(15, 28) : BOOL
30 : 254 { 0xfe -2 } : BV:8
31 : 343389911 { 0x1477b6d7 +1.93526732e169 } : BV:32
32 : eq(15, 31) : BOOL
33 : 231 { 0xe7 -25 } : BV:8
34 : 4 { 0x4 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(29, 30, 35) : BV:8
37 : ite(27, 18, 36) : BV:8
38 : ite(25, 18, 37) : BV:8
39 : ite(23, 18, 38) : BV:8
40 : ite(20, 21, 39) : BV:8
41 : ite(17, 18, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 13, 14) : BV:32
44 : eq(43, 16) : BOOL
45 : eq(43, 19) : BOOL
46 : eq(43, 22) : BOOL
47 : eq(43, 24) : BOOL
48 : eq(43, 26) : BOOL
49 : eq(43, 28) : BOOL
50 : eq(43, 31) : BOOL
51 : ite(50, 33, 34) : BV:8
52 : ite(49, 30, 51) : BV:8
53 : ite(48, 18, 52) : BV:8
54 : ite(47, 18, 53) : BV:8
55 : ite(46, 18, 54) : BV:8
56 : ite(45, 21, 55) : BV:8
57 : ite(44, 18, 56) : BV:8
58 : 1 { 0x1 +1.11e129 } : BV:32
59 : bvadd(58, 13, 14) : BV:32
60 : eq(59, 16) : BOOL
61 : eq(59, 19) : BOOL
62 : eq(59, 22) : BOOL
63 : eq(59, 24) : BOOL
64 : eq(59, 26) : BOOL
65 : eq(59, 28) : BOOL
66 : eq(59, 31) : BOOL
67 : ite(66, 33, 34) : BV:8
68 : ite(65, 30, 67) : BV:8
69 : ite(64, 18, 68) : BV:8
70 : ite(63, 18, 69) : BV:8
71 : ite(62, 18, 70) : BV:8
72 : ite(61, 21, 71) : BV:8
73 : ite(60, 18, 72) : BV:8
74 : bvadd(13, 14) : BV:32
75 : eq(74, 16) : BOOL
76 : eq(74, 19) : BOOL
77 : eq(74, 22) : BOOL
78 : eq(74, 24) : BOOL
79 : eq(74, 26) : BOOL
80 : eq(74, 28) : BOOL
81 : eq(74, 31) : BOOL
82 : ite(81, 33, 34) : BV:8
83 : ite(80, 30, 82) : BV:8
84 : ite(79, 18, 83) : BV:8
85 : ite(78, 18, 84) : BV:8
86 : ite(77, 18, 85) : BV:8
87 : ite(76, 21, 86) : BV:8
88 : ite(75, 18, 87) : BV:8
89 : bvconcat(41, 57, 73, 88) : BV:32
90 : lambda(10, 89) : FUNCTION[BV:32 -> BV:32]
91 : map(9, 90) : MAP[BV:32 -> BV:32]
92 : sym_const(91) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L3%6%bbentry
1 : Lambda203 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda204 : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(12, 10) : BV:32
14 : 3892313604 { 0xe7fffe04 -402653692 -1.99993944e80 } : BV:32
15 : bvadd(11, 13, 14) : BV:32
16 : 1186986737 { 0x46bffaf1 +1.49984562e14 } : BV:32
17 : eq(15, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : 343389910 { 0x1477b6d6 +1.93526721e169 } : BV:32
20 : eq(15, 19) : BOOL
21 : 255 { 0xff -1 } : BV:8
22 : 1186986736 { 0x46bffaf0 +1.49984550e14 } : BV:32
23 : eq(15, 22) : BOOL
24 : 1186986739 { 0x46bffaf3 +1.49984586e14 } : BV:32
25 : eq(15, 24) : BOOL
26 : 1186986738 { 0x46bffaf2 +1.49984574e14 } : BV:32
27 : eq(15, 26) : BOOL
28 : 343389909 { 0x1477b6d5 +1.93526709e169 } : BV:32
29 : eq(15, 28) : BOOL
30 : 254 { 0xfe -2 } : BV:8
31 : 343389911 { 0x1477b6d7 +1.93526732e169 } : BV:32
32 : eq(15, 31) : BOOL
33 : 231 { 0xe7 -25 } : BV:8
34 : 4 { 0x4 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(29, 30, 35) : BV:8
37 : ite(27, 18, 36) : BV:8
38 : ite(25, 18, 37) : BV:8
39 : ite(23, 18, 38) : BV:8
40 : ite(20, 21, 39) : BV:8
41 : ite(17, 18, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 13, 14) : BV:32
44 : eq(43, 16) : BOOL
45 : eq(43, 19) : BOOL
46 : eq(43, 22) : BOOL
47 : eq(43, 24) : BOOL
48 : eq(43, 26) : BOOL
49 : eq(43, 28) : BOOL
50 : eq(43, 31) : BOOL
51 : ite(50, 33, 34) : BV:8
52 : ite(49, 30, 51) : BV:8
53 : ite(48, 18, 52) : BV:8
54 : ite(47, 18, 53) : BV:8
55 : ite(46, 18, 54) : BV:8
56 : ite(45, 21, 55) : BV:8
57 : ite(44, 18, 56) : BV:8
58 : 1 { 0x1 +1.11e129 } : BV:32
59 : bvadd(58, 13, 14) : BV:32
60 : eq(59, 16) : BOOL
61 : eq(59, 19) : BOOL
62 : eq(59, 22) : BOOL
63 : eq(59, 24) : BOOL
64 : eq(59, 26) : BOOL
65 : eq(59, 28) : BOOL
66 : eq(59, 31) : BOOL
67 : ite(66, 33, 34) : BV:8
68 : ite(65, 30, 67) : BV:8
69 : ite(64, 18, 68) : BV:8
70 : ite(63, 18, 69) : BV:8
71 : ite(62, 18, 70) : BV:8
72 : ite(61, 21, 71) : BV:8
73 : ite(60, 18, 72) : BV:8
74 : bvadd(13, 14) : BV:32
75 : eq(74, 16) : BOOL
76 : eq(74, 19) : BOOL
77 : eq(74, 22) : BOOL
78 : eq(74, 24) : BOOL
79 : eq(74, 26) : BOOL
80 : eq(74, 28) : BOOL
81 : eq(74, 31) : BOOL
82 : ite(81, 33, 34) : BV:8
83 : ite(80, 30, 82) : BV:8
84 : ite(79, 18, 83) : BV:8
85 : ite(78, 18, 84) : BV:8
86 : ite(77, 18, 85) : BV:8
87 : ite(76, 21, 86) : BV:8
88 : ite(75, 18, 87) : BV:8
89 : bvconcat(41, 57, 73, 88) : BV:32
90 : lambda(10, 89) : FUNCTION[BV:32 -> BV:32]
91 : map(9, 90) : MAP[BV:32 -> BV:32]
92 : sym_const(91) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 3892313604 { 0xe7fffe04 -402653692 -1.99993944e80 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 343389908 ] -> 4, [ 343389909; 343389909 ] -> 254, [ 343389910; 343389910 ] -> 255, [ 343389911; 343389911 ] -> 231, [ 343389912; 1186986735 ] -> 4, [ 1186986736; 1186986739 ] -> 0, [ 1186986740; 4294967295 ] -> 4, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 343389907 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 343389908; 343389911 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 343389912; 1186986735 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1186986736; 1186986739 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1186986740; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 343389908 { 0x1477b6d4 +1.93526697e169 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1186986736 { 0x46bffaf0 +1.49984550e14 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1935754076 { 0x7361435c +1.75986814e103 } : COUNT
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-0.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%6%bbentry.1.1
1 : Lambda191 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(3, 1) : BV:32
5 : 3892313604 { 0xe7fffe04 -402653692 -1.99993944e80 } : BV:32
6 : bvadd(2, 4, 5) : BV:32
7 : 1186986737 { 0x46bffaf1 +1.49984562e14 } : BV:32
8 : eq(6, 7) : BOOL
9 : 0 { 0x0 } : BV:8
10 : 343389910 { 0x1477b6d6 +1.93526721e169 } : BV:32
11 : eq(6, 10) : BOOL
12 : 255 { 0xff -1 } : BV:8
13 : 1186986736 { 0x46bffaf0 +1.49984550e14 } : BV:32
14 : eq(6, 13) : BOOL
15 : 1186986739 { 0x46bffaf3 +1.49984586e14 } : BV:32
16 : eq(6, 15) : BOOL
17 : 1186986738 { 0x46bffaf2 +1.49984574e14 } : BV:32
18 : eq(6, 17) : BOOL
19 : 343389909 { 0x1477b6d5 +1.93526709e169 } : BV:32
20 : eq(6, 19) : BOOL
21 : 254 { 0xfe -2 } : BV:8
22 : 343389911 { 0x1477b6d7 +1.93526732e169 } : BV:32
23 : eq(6, 22) : BOOL
24 : 231 { 0xe7 -25 } : BV:8
25 : 4 { 0x4 } : BV:8
26 : ite(23, 24, 25) : BV:8
27 : ite(20, 21, 26) : BV:8
28 : ite(18, 9, 27) : BV:8
29 : ite(16, 9, 28) : BV:8
30 : ite(14, 9, 29) : BV:8
31 : ite(11, 12, 30) : BV:8
32 : ite(8, 9, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 4, 5) : BV:32
35 : eq(34, 7) : BOOL
36 : eq(34, 10) : BOOL
37 : eq(34, 13) : BOOL
38 : eq(34, 15) : BOOL
39 : eq(34, 17) : BOOL
40 : eq(34, 19) : BOOL
41 : eq(34, 22) : BOOL
42 : ite(41, 24, 25) : BV:8
43 : ite(40, 21, 42) : BV:8
44 : ite(39, 9, 43) : BV:8
45 : ite(38, 9, 44) : BV:8
46 : ite(37, 9, 45) : BV:8
47 : ite(36, 12, 46) : BV:8
48 : ite(35, 9, 47) : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : bvadd(49, 4, 5) : BV:32
51 : eq(50, 7) : BOOL
52 : eq(50, 10) : BOOL
53 : eq(50, 13) : BOOL
54 : eq(50, 15) : BOOL
55 : eq(50, 17) : BOOL
56 : eq(50, 19) : BOOL
57 : eq(50, 22) : BOOL
58 : ite(57, 24, 25) : BV:8
59 : ite(56, 21, 58) : BV:8
60 : ite(55, 9, 59) : BV:8
61 : ite(54, 9, 60) : BV:8
62 : ite(53, 9, 61) : BV:8
63 : ite(52, 12, 62) : BV:8
64 : ite(51, 9, 63) : BV:8
65 : bvadd(4, 5) : BV:32
66 : eq(65, 7) : BOOL
67 : eq(65, 10) : BOOL
68 : eq(65, 13) : BOOL
69 : eq(65, 15) : BOOL
70 : eq(65, 17) : BOOL
71 : eq(65, 19) : BOOL
72 : eq(65, 22) : BOOL
73 : ite(72, 24, 25) : BV:8
74 : ite(71, 21, 73) : BV:8
75 : ite(70, 9, 74) : BV:8
76 : ite(69, 9, 75) : BV:8
77 : ite(68, 9, 76) : BV:8
78 : ite(67, 12, 77) : BV:8
79 : ite(66, 9, 78) : BV:8
80 : bvconcat(32, 48, 64, 79) : BV:32
81 : lambda(1, 80) : FUNCTION[BV:32 -> BV:32]
82 : sym_const(81) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : Lambda192 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(3, 1) : BV:32
5 : 3892313604 { 0xe7fffe04 -402653692 -1.99993944e80 } : BV:32
6 : bvadd(2, 4, 5) : BV:32
7 : 1186986737 { 0x46bffaf1 +1.49984562e14 } : BV:32
8 : eq(6, 7) : BOOL
9 : 0 { 0x0 } : BV:8
10 : 343389910 { 0x1477b6d6 +1.93526721e169 } : BV:32
11 : eq(6, 10) : BOOL
12 : 255 { 0xff -1 } : BV:8
13 : 1186986736 { 0x46bffaf0 +1.49984550e14 } : BV:32
14 : eq(6, 13) : BOOL
15 : 1186986739 { 0x46bffaf3 +1.49984586e14 } : BV:32
16 : eq(6, 15) : BOOL
17 : 1186986738 { 0x46bffaf2 +1.49984574e14 } : BV:32
18 : eq(6, 17) : BOOL
19 : 343389909 { 0x1477b6d5 +1.93526709e169 } : BV:32
20 : eq(6, 19) : BOOL
21 : 254 { 0xfe -2 } : BV:8
22 : 343389911 { 0x1477b6d7 +1.93526732e169 } : BV:32
23 : eq(6, 22) : BOOL
24 : 231 { 0xe7 -25 } : BV:8
25 : 4 { 0x4 } : BV:8
26 : ite(23, 24, 25) : BV:8
27 : ite(20, 21, 26) : BV:8
28 : ite(18, 9, 27) : BV:8
29 : ite(16, 9, 28) : BV:8
30 : ite(14, 9, 29) : BV:8
31 : ite(11, 12, 30) : BV:8
32 : ite(8, 9, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 4, 5) : BV:32
35 : eq(34, 7) : BOOL
36 : eq(34, 10) : BOOL
37 : eq(34, 13) : BOOL
38 : eq(34, 15) : BOOL
39 : eq(34, 17) : BOOL
40 : eq(34, 19) : BOOL
41 : eq(34, 22) : BOOL
42 : ite(41, 24, 25) : BV:8
43 : ite(40, 21, 42) : BV:8
44 : ite(39, 9, 43) : BV:8
45 : ite(38, 9, 44) : BV:8
46 : ite(37, 9, 45) : BV:8
47 : ite(36, 12, 46) : BV:8
48 : ite(35, 9, 47) : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : bvadd(49, 4, 5) : BV:32
51 : eq(50, 7) : BOOL
52 : eq(50, 10) : BOOL
53 : eq(50, 13) : BOOL
54 : eq(50, 15) : BOOL
55 : eq(50, 17) : BOOL
56 : eq(50, 19) : BOOL
57 : eq(50, 22) : BOOL
58 : ite(57, 24, 25) : BV:8
59 : ite(56, 21, 58) : BV:8
60 : ite(55, 9, 59) : BV:8
61 : ite(54, 9, 60) : BV:8
62 : ite(53, 9, 61) : BV:8
63 : ite(52, 12, 62) : BV:8
64 : ite(51, 9, 63) : BV:8
65 : bvadd(4, 5) : BV:32
66 : eq(65, 7) : BOOL
67 : eq(65, 10) : BOOL
68 : eq(65, 13) : BOOL
69 : eq(65, 15) : BOOL
70 : eq(65, 17) : BOOL
71 : eq(65, 19) : BOOL
72 : eq(65, 22) : BOOL
73 : ite(72, 24, 25) : BV:8
74 : ite(71, 21, 73) : BV:8
75 : ite(70, 9, 74) : BV:8
76 : ite(69, 9, 75) : BV:8
77 : ite(68, 9, 76) : BV:8
78 : ite(67, 12, 77) : BV:8
79 : ite(66, 9, 78) : BV:8
80 : bvconcat(32, 48, 64, 79) : BV:32
81 : lambda(1, 80) : FUNCTION[BV:32 -> BV:32]
82 : sym_const(81) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1935754076 { 0x7361435c +1.75986814e103 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1186986736 { 0x46bffaf0 +1.49984550e14 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1186986739 { 0x46bffaf3 +1.49984586e14 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 343389908 { 0x1477b6d4 +1.93526697e169 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 343389911 { 0x1477b6d7 +1.93526732e169 } : BV:32
=counter_example.random_seed
3277587493
=counter_example_end
=global nodece 7 num_edges_traversed 1
=global nodece 7 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 8
=global nodece 8 nodece z3.ce123.num_edges_traversed1
=global nodece 8 nodece_path
=global nodece 8 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 8 nodece_cached_counterexample
=counter_example_begin z3.ce123 d72ef6033e57a7d87567aa31535ebc
=input.spec-%var-x-1
1 : Lambda245 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda246 : BV:32
17 : eq(16, 2) : BOOL
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 16) : BV:32
21 : 1003224064 { 0x3bcbfc00 +1.59362792e248 } : BV:32
22 : bvadd(18, 20, 21) : BV:32
23 : 3916158113 { 0xe96bd4a1 -378809183 -1.84242641e83 } : BV:32
24 : eq(22, 23) : BOOL
25 : 255 { 0xff -1 } : BV:8
26 : 2589378262 { 0x9a56c6d6 -1705589034 -1.67794299e181 } : BV:32
27 : eq(22, 26) : BOOL
28 : 203 { 0xcb -53 } : BV:8
29 : 3916158112 { 0xe96bd4a0 -378809184 -1.84242630e83 } : BV:32
30 : eq(22, 29) : BOOL
31 : 1003224067 { 0x3bcbfc03 +1.59362828e248 } : BV:32
32 : eq(22, 31) : BOOL
33 : 0 { 0x0 } : BV:8
34 : 3916158115 { 0xe96bd4a3 -378809181 -1.84242665e83 } : BV:32
35 : eq(22, 34) : BOOL
36 : 1003224065 { 0x3bcbfc01 +1.59362804e248 } : BV:32
37 : eq(22, 36) : BOOL
38 : 3916158114 { 0xe96bd4a2 -378809182 -1.84242653e83 } : BV:32
39 : eq(22, 38) : BOOL
40 : 1003224066 { 0x3bcbfc02 +1.59362816e248 } : BV:32
41 : eq(22, 40) : BOOL
42 : eq(22, 21) : BOOL
43 : 2589378263 { 0x9a56c6d7 -1705589033 -1.67794311e181 } : BV:32
44 : eq(22, 43) : BOOL
45 : 59 { 0x3b } : BV:8
46 : 2589378260 { 0x9a56c6d4 -1705589036 -1.67794275e181 } : BV:32
47 : eq(22, 46) : BOOL
48 : 252 { 0xfc -4 } : BV:8
49 : ite(47, 33, 48) : BV:8
50 : ite(44, 45, 49) : BV:8
51 : ite(42, 33, 50) : BV:8
52 : ite(41, 33, 51) : BV:8
53 : ite(39, 25, 52) : BV:8
54 : ite(37, 33, 53) : BV:8
55 : ite(35, 25, 54) : BV:8
56 : ite(32, 33, 55) : BV:8
57 : ite(30, 25, 56) : BV:8
58 : ite(27, 28, 57) : BV:8
59 : ite(24, 25, 58) : BV:8
60 : 2 { 0x2 +1.23e129 } : BV:32
61 : bvadd(60, 20, 21) : BV:32
62 : eq(61, 23) : BOOL
63 : eq(61, 26) : BOOL
64 : eq(61, 29) : BOOL
65 : eq(61, 31) : BOOL
66 : eq(61, 34) : BOOL
67 : eq(61, 36) : BOOL
68 : eq(61, 38) : BOOL
69 : eq(61, 40) : BOOL
70 : eq(61, 21) : BOOL
71 : eq(61, 43) : BOOL
72 : eq(61, 46) : BOOL
73 : ite(72, 33, 48) : BV:8
74 : ite(71, 45, 73) : BV:8
75 : ite(70, 33, 74) : BV:8
76 : ite(69, 33, 75) : BV:8
77 : ite(68, 25, 76) : BV:8
78 : ite(67, 33, 77) : BV:8
79 : ite(66, 25, 78) : BV:8
80 : ite(65, 33, 79) : BV:8
81 : ite(64, 25, 80) : BV:8
82 : ite(63, 28, 81) : BV:8
83 : ite(62, 25, 82) : BV:8
84 : 1 { 0x1 +1.11e129 } : BV:32
85 : bvadd(84, 20, 21) : BV:32
86 : eq(85, 23) : BOOL
87 : eq(85, 26) : BOOL
88 : eq(85, 29) : BOOL
89 : eq(85, 31) : BOOL
90 : eq(85, 34) : BOOL
91 : eq(85, 36) : BOOL
92 : eq(85, 38) : BOOL
93 : eq(85, 40) : BOOL
94 : eq(85, 21) : BOOL
95 : eq(85, 43) : BOOL
96 : eq(85, 46) : BOOL
97 : ite(96, 33, 48) : BV:8
98 : ite(95, 45, 97) : BV:8
99 : ite(94, 33, 98) : BV:8
100 : ite(93, 33, 99) : BV:8
101 : ite(92, 25, 100) : BV:8
102 : ite(91, 33, 101) : BV:8
103 : ite(90, 25, 102) : BV:8
104 : ite(89, 33, 103) : BV:8
105 : ite(88, 25, 104) : BV:8
106 : ite(87, 28, 105) : BV:8
107 : ite(86, 25, 106) : BV:8
108 : bvadd(20, 21) : BV:32
109 : eq(108, 23) : BOOL
110 : eq(108, 26) : BOOL
111 : eq(108, 29) : BOOL
112 : eq(108, 31) : BOOL
113 : eq(108, 34) : BOOL
114 : eq(108, 36) : BOOL
115 : eq(108, 38) : BOOL
116 : eq(108, 40) : BOOL
117 : eq(108, 21) : BOOL
118 : eq(108, 43) : BOOL
119 : eq(108, 46) : BOOL
120 : ite(119, 33, 48) : BV:8
121 : ite(118, 45, 120) : BV:8
122 : ite(117, 33, 121) : BV:8
123 : ite(116, 33, 122) : BV:8
124 : ite(115, 25, 123) : BV:8
125 : ite(114, 33, 124) : BV:8
126 : ite(113, 25, 125) : BV:8
127 : ite(112, 33, 126) : BV:8
128 : ite(111, 25, 127) : BV:8
129 : ite(110, 28, 128) : BV:8
130 : ite(109, 25, 129) : BV:8
131 : bvconcat(59, 83, 107, 130) : BV:32
132 : ite(17, 2, 131) : BV:32
133 : lambda(16, 132) : FUNCTION[BV:32 -> BV:32]
134 : map(15, 133) : MAP[BV:32 -> BV:32]
135 : sym_const(134) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L3%6%bbentry
1 : Lambda245 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda246 : BV:32
17 : eq(16, 2) : BOOL
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 16) : BV:32
21 : 1003224064 { 0x3bcbfc00 +1.59362792e248 } : BV:32
22 : bvadd(18, 20, 21) : BV:32
23 : 3916158113 { 0xe96bd4a1 -378809183 -1.84242641e83 } : BV:32
24 : eq(22, 23) : BOOL
25 : 255 { 0xff -1 } : BV:8
26 : 2589378262 { 0x9a56c6d6 -1705589034 -1.67794299e181 } : BV:32
27 : eq(22, 26) : BOOL
28 : 203 { 0xcb -53 } : BV:8
29 : 3916158112 { 0xe96bd4a0 -378809184 -1.84242630e83 } : BV:32
30 : eq(22, 29) : BOOL
31 : 1003224067 { 0x3bcbfc03 +1.59362828e248 } : BV:32
32 : eq(22, 31) : BOOL
33 : 0 { 0x0 } : BV:8
34 : 3916158115 { 0xe96bd4a3 -378809181 -1.84242665e83 } : BV:32
35 : eq(22, 34) : BOOL
36 : 1003224065 { 0x3bcbfc01 +1.59362804e248 } : BV:32
37 : eq(22, 36) : BOOL
38 : 3916158114 { 0xe96bd4a2 -378809182 -1.84242653e83 } : BV:32
39 : eq(22, 38) : BOOL
40 : 1003224066 { 0x3bcbfc02 +1.59362816e248 } : BV:32
41 : eq(22, 40) : BOOL
42 : eq(22, 21) : BOOL
43 : 2589378263 { 0x9a56c6d7 -1705589033 -1.67794311e181 } : BV:32
44 : eq(22, 43) : BOOL
45 : 59 { 0x3b } : BV:8
46 : 2589378260 { 0x9a56c6d4 -1705589036 -1.67794275e181 } : BV:32
47 : eq(22, 46) : BOOL
48 : 252 { 0xfc -4 } : BV:8
49 : ite(47, 33, 48) : BV:8
50 : ite(44, 45, 49) : BV:8
51 : ite(42, 33, 50) : BV:8
52 : ite(41, 33, 51) : BV:8
53 : ite(39, 25, 52) : BV:8
54 : ite(37, 33, 53) : BV:8
55 : ite(35, 25, 54) : BV:8
56 : ite(32, 33, 55) : BV:8
57 : ite(30, 25, 56) : BV:8
58 : ite(27, 28, 57) : BV:8
59 : ite(24, 25, 58) : BV:8
60 : 2 { 0x2 +1.23e129 } : BV:32
61 : bvadd(60, 20, 21) : BV:32
62 : eq(61, 23) : BOOL
63 : eq(61, 26) : BOOL
64 : eq(61, 29) : BOOL
65 : eq(61, 31) : BOOL
66 : eq(61, 34) : BOOL
67 : eq(61, 36) : BOOL
68 : eq(61, 38) : BOOL
69 : eq(61, 40) : BOOL
70 : eq(61, 21) : BOOL
71 : eq(61, 43) : BOOL
72 : eq(61, 46) : BOOL
73 : ite(72, 33, 48) : BV:8
74 : ite(71, 45, 73) : BV:8
75 : ite(70, 33, 74) : BV:8
76 : ite(69, 33, 75) : BV:8
77 : ite(68, 25, 76) : BV:8
78 : ite(67, 33, 77) : BV:8
79 : ite(66, 25, 78) : BV:8
80 : ite(65, 33, 79) : BV:8
81 : ite(64, 25, 80) : BV:8
82 : ite(63, 28, 81) : BV:8
83 : ite(62, 25, 82) : BV:8
84 : 1 { 0x1 +1.11e129 } : BV:32
85 : bvadd(84, 20, 21) : BV:32
86 : eq(85, 23) : BOOL
87 : eq(85, 26) : BOOL
88 : eq(85, 29) : BOOL
89 : eq(85, 31) : BOOL
90 : eq(85, 34) : BOOL
91 : eq(85, 36) : BOOL
92 : eq(85, 38) : BOOL
93 : eq(85, 40) : BOOL
94 : eq(85, 21) : BOOL
95 : eq(85, 43) : BOOL
96 : eq(85, 46) : BOOL
97 : ite(96, 33, 48) : BV:8
98 : ite(95, 45, 97) : BV:8
99 : ite(94, 33, 98) : BV:8
100 : ite(93, 33, 99) : BV:8
101 : ite(92, 25, 100) : BV:8
102 : ite(91, 33, 101) : BV:8
103 : ite(90, 25, 102) : BV:8
104 : ite(89, 33, 103) : BV:8
105 : ite(88, 25, 104) : BV:8
106 : ite(87, 28, 105) : BV:8
107 : ite(86, 25, 106) : BV:8
108 : bvadd(20, 21) : BV:32
109 : eq(108, 23) : BOOL
110 : eq(108, 26) : BOOL
111 : eq(108, 29) : BOOL
112 : eq(108, 31) : BOOL
113 : eq(108, 34) : BOOL
114 : eq(108, 36) : BOOL
115 : eq(108, 38) : BOOL
116 : eq(108, 40) : BOOL
117 : eq(108, 21) : BOOL
118 : eq(108, 43) : BOOL
119 : eq(108, 46) : BOOL
120 : ite(119, 33, 48) : BV:8
121 : ite(118, 45, 120) : BV:8
122 : ite(117, 33, 121) : BV:8
123 : ite(116, 33, 122) : BV:8
124 : ite(115, 25, 123) : BV:8
125 : ite(114, 33, 124) : BV:8
126 : ite(113, 25, 125) : BV:8
127 : ite(112, 33, 126) : BV:8
128 : ite(111, 25, 127) : BV:8
129 : ite(110, 28, 128) : BV:8
130 : ite(109, 25, 129) : BV:8
131 : bvconcat(59, 83, 107, 130) : BV:32
132 : ite(17, 2, 131) : BV:32
133 : lambda(16, 132) : FUNCTION[BV:32 -> BV:32]
134 : map(15, 133) : MAP[BV:32 -> BV:32]
135 : sym_const(134) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 1003224064 { 0x3bcbfc00 +1.59362792e248 } : BV:32
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1003224063 ] -> 252, [ 1003224064; 1003224067 ] -> 0, [ 1003224068; 2589378259 ] -> 252, [ 2589378260; 2589378260 ] -> 0, [ 2589378261; 2589378261 ] -> 252, [ 2589378262; 2589378262 ] -> 203, [ 2589378263; 2589378263 ] -> 59, [ 2589378264; 3916158111 ] -> 252, [ 3916158112; 3916158115 ] -> 255, [ 3916158116; 4294967295 ] -> 252, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2589378259 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2589378260; 2589378263 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2589378264; 3916158111 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3916158112; 3916158115 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3916158116; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2589378260 { 0x9a56c6d4 -1705589036 -1.67794275e181 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3916158112 { 0xe96bd4a0 -378809184 -1.84242630e83 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1115311958 { 0x427a4f56 +1.95554614e5 } : COUNT
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-0.L3%6%bbentry.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%6%bbentry.1.1
1 : Lambda233 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 1003224064 { 0x3bcbfc00 +1.59362792e248 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 3916158113 { 0xe96bd4a1 -378809183 -1.84242641e83 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 2589378262 { 0x9a56c6d6 -1705589034 -1.67794299e181 } : BV:32
13 : eq(8, 12) : BOOL
14 : 203 { 0xcb -53 } : BV:8
15 : 3916158112 { 0xe96bd4a0 -378809184 -1.84242630e83 } : BV:32
16 : eq(8, 15) : BOOL
17 : 1003224067 { 0x3bcbfc03 +1.59362828e248 } : BV:32
18 : eq(8, 17) : BOOL
19 : 0 { 0x0 } : BV:8
20 : 3916158115 { 0xe96bd4a3 -378809181 -1.84242665e83 } : BV:32
21 : eq(8, 20) : BOOL
22 : 1003224065 { 0x3bcbfc01 +1.59362804e248 } : BV:32
23 : eq(8, 22) : BOOL
24 : 3916158114 { 0xe96bd4a2 -378809182 -1.84242653e83 } : BV:32
25 : eq(8, 24) : BOOL
26 : 1003224066 { 0x3bcbfc02 +1.59362816e248 } : BV:32
27 : eq(8, 26) : BOOL
28 : eq(8, 7) : BOOL
29 : 2589378263 { 0x9a56c6d7 -1705589033 -1.67794311e181 } : BV:32
30 : eq(8, 29) : BOOL
31 : 59 { 0x3b } : BV:8
32 : 2589378260 { 0x9a56c6d4 -1705589036 -1.67794275e181 } : BV:32
33 : eq(8, 32) : BOOL
34 : 252 { 0xfc -4 } : BV:8
35 : ite(33, 19, 34) : BV:8
36 : ite(30, 31, 35) : BV:8
37 : ite(28, 19, 36) : BV:8
38 : ite(27, 19, 37) : BV:8
39 : ite(25, 11, 38) : BV:8
40 : ite(23, 19, 39) : BV:8
41 : ite(21, 11, 40) : BV:8
42 : ite(18, 19, 41) : BV:8
43 : ite(16, 11, 42) : BV:8
44 : ite(13, 14, 43) : BV:8
45 : ite(10, 11, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 6, 7) : BV:32
48 : eq(47, 9) : BOOL
49 : eq(47, 12) : BOOL
50 : eq(47, 15) : BOOL
51 : eq(47, 17) : BOOL
52 : eq(47, 20) : BOOL
53 : eq(47, 22) : BOOL
54 : eq(47, 24) : BOOL
55 : eq(47, 26) : BOOL
56 : eq(47, 7) : BOOL
57 : eq(47, 29) : BOOL
58 : eq(47, 32) : BOOL
59 : ite(58, 19, 34) : BV:8
60 : ite(57, 31, 59) : BV:8
61 : ite(56, 19, 60) : BV:8
62 : ite(55, 19, 61) : BV:8
63 : ite(54, 11, 62) : BV:8
64 : ite(53, 19, 63) : BV:8
65 : ite(52, 11, 64) : BV:8
66 : ite(51, 19, 65) : BV:8
67 : ite(50, 11, 66) : BV:8
68 : ite(49, 14, 67) : BV:8
69 : ite(48, 11, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 6, 7) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 15) : BOOL
75 : eq(71, 17) : BOOL
76 : eq(71, 20) : BOOL
77 : eq(71, 22) : BOOL
78 : eq(71, 24) : BOOL
79 : eq(71, 26) : BOOL
80 : eq(71, 7) : BOOL
81 : eq(71, 29) : BOOL
82 : eq(71, 32) : BOOL
83 : ite(82, 19, 34) : BV:8
84 : ite(81, 31, 83) : BV:8
85 : ite(80, 19, 84) : BV:8
86 : ite(79, 19, 85) : BV:8
87 : ite(78, 11, 86) : BV:8
88 : ite(77, 19, 87) : BV:8
89 : ite(76, 11, 88) : BV:8
90 : ite(75, 19, 89) : BV:8
91 : ite(74, 11, 90) : BV:8
92 : ite(73, 14, 91) : BV:8
93 : ite(72, 11, 92) : BV:8
94 : bvadd(6, 7) : BV:32
95 : eq(94, 9) : BOOL
96 : eq(94, 12) : BOOL
97 : eq(94, 15) : BOOL
98 : eq(94, 17) : BOOL
99 : eq(94, 20) : BOOL
100 : eq(94, 22) : BOOL
101 : eq(94, 24) : BOOL
102 : eq(94, 26) : BOOL
103 : eq(94, 7) : BOOL
104 : eq(94, 29) : BOOL
105 : eq(94, 32) : BOOL
106 : ite(105, 19, 34) : BV:8
107 : ite(104, 31, 106) : BV:8
108 : ite(103, 19, 107) : BV:8
109 : ite(102, 19, 108) : BV:8
110 : ite(101, 11, 109) : BV:8
111 : ite(100, 19, 110) : BV:8
112 : ite(99, 11, 111) : BV:8
113 : ite(98, 19, 112) : BV:8
114 : ite(97, 11, 113) : BV:8
115 : ite(96, 14, 114) : BV:8
116 : ite(95, 11, 115) : BV:8
117 : bvconcat(45, 69, 93, 116) : BV:32
118 : ite(3, 2, 117) : BV:32
119 : ite(3, 2, 118) : BV:32
120 : lambda(1, 119) : FUNCTION[BV:32 -> BV:32]
121 : sym_const(120) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : Lambda234 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 1003224064 { 0x3bcbfc00 +1.59362792e248 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 3916158113 { 0xe96bd4a1 -378809183 -1.84242641e83 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 2589378262 { 0x9a56c6d6 -1705589034 -1.67794299e181 } : BV:32
13 : eq(8, 12) : BOOL
14 : 203 { 0xcb -53 } : BV:8
15 : 3916158112 { 0xe96bd4a0 -378809184 -1.84242630e83 } : BV:32
16 : eq(8, 15) : BOOL
17 : 1003224067 { 0x3bcbfc03 +1.59362828e248 } : BV:32
18 : eq(8, 17) : BOOL
19 : 0 { 0x0 } : BV:8
20 : 3916158115 { 0xe96bd4a3 -378809181 -1.84242665e83 } : BV:32
21 : eq(8, 20) : BOOL
22 : 1003224065 { 0x3bcbfc01 +1.59362804e248 } : BV:32
23 : eq(8, 22) : BOOL
24 : 3916158114 { 0xe96bd4a2 -378809182 -1.84242653e83 } : BV:32
25 : eq(8, 24) : BOOL
26 : 1003224066 { 0x3bcbfc02 +1.59362816e248 } : BV:32
27 : eq(8, 26) : BOOL
28 : eq(8, 7) : BOOL
29 : 2589378263 { 0x9a56c6d7 -1705589033 -1.67794311e181 } : BV:32
30 : eq(8, 29) : BOOL
31 : 59 { 0x3b } : BV:8
32 : 2589378260 { 0x9a56c6d4 -1705589036 -1.67794275e181 } : BV:32
33 : eq(8, 32) : BOOL
34 : 252 { 0xfc -4 } : BV:8
35 : ite(33, 19, 34) : BV:8
36 : ite(30, 31, 35) : BV:8
37 : ite(28, 19, 36) : BV:8
38 : ite(27, 19, 37) : BV:8
39 : ite(25, 11, 38) : BV:8
40 : ite(23, 19, 39) : BV:8
41 : ite(21, 11, 40) : BV:8
42 : ite(18, 19, 41) : BV:8
43 : ite(16, 11, 42) : BV:8
44 : ite(13, 14, 43) : BV:8
45 : ite(10, 11, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 6, 7) : BV:32
48 : eq(47, 9) : BOOL
49 : eq(47, 12) : BOOL
50 : eq(47, 15) : BOOL
51 : eq(47, 17) : BOOL
52 : eq(47, 20) : BOOL
53 : eq(47, 22) : BOOL
54 : eq(47, 24) : BOOL
55 : eq(47, 26) : BOOL
56 : eq(47, 7) : BOOL
57 : eq(47, 29) : BOOL
58 : eq(47, 32) : BOOL
59 : ite(58, 19, 34) : BV:8
60 : ite(57, 31, 59) : BV:8
61 : ite(56, 19, 60) : BV:8
62 : ite(55, 19, 61) : BV:8
63 : ite(54, 11, 62) : BV:8
64 : ite(53, 19, 63) : BV:8
65 : ite(52, 11, 64) : BV:8
66 : ite(51, 19, 65) : BV:8
67 : ite(50, 11, 66) : BV:8
68 : ite(49, 14, 67) : BV:8
69 : ite(48, 11, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 6, 7) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 15) : BOOL
75 : eq(71, 17) : BOOL
76 : eq(71, 20) : BOOL
77 : eq(71, 22) : BOOL
78 : eq(71, 24) : BOOL
79 : eq(71, 26) : BOOL
80 : eq(71, 7) : BOOL
81 : eq(71, 29) : BOOL
82 : eq(71, 32) : BOOL
83 : ite(82, 19, 34) : BV:8
84 : ite(81, 31, 83) : BV:8
85 : ite(80, 19, 84) : BV:8
86 : ite(79, 19, 85) : BV:8
87 : ite(78, 11, 86) : BV:8
88 : ite(77, 19, 87) : BV:8
89 : ite(76, 11, 88) : BV:8
90 : ite(75, 19, 89) : BV:8
91 : ite(74, 11, 90) : BV:8
92 : ite(73, 14, 91) : BV:8
93 : ite(72, 11, 92) : BV:8
94 : bvadd(6, 7) : BV:32
95 : eq(94, 9) : BOOL
96 : eq(94, 12) : BOOL
97 : eq(94, 15) : BOOL
98 : eq(94, 17) : BOOL
99 : eq(94, 20) : BOOL
100 : eq(94, 22) : BOOL
101 : eq(94, 24) : BOOL
102 : eq(94, 26) : BOOL
103 : eq(94, 7) : BOOL
104 : eq(94, 29) : BOOL
105 : eq(94, 32) : BOOL
106 : ite(105, 19, 34) : BV:8
107 : ite(104, 31, 106) : BV:8
108 : ite(103, 19, 107) : BV:8
109 : ite(102, 19, 108) : BV:8
110 : ite(101, 11, 109) : BV:8
111 : ite(100, 19, 110) : BV:8
112 : ite(99, 11, 111) : BV:8
113 : ite(98, 19, 112) : BV:8
114 : ite(97, 11, 113) : BV:8
115 : ite(96, 14, 114) : BV:8
116 : ite(95, 11, 115) : BV:8
117 : bvconcat(45, 69, 93, 116) : BV:32
118 : ite(3, 2, 117) : BV:32
119 : lambda(1, 118) : FUNCTION[BV:32 -> BV:32]
120 : sym_const(119) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1115311958 { 0x427a4f56 +1.95554614e5 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3916158112 { 0xe96bd4a0 -378809184 -1.84242630e83 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3916158115 { 0xe96bd4a3 -378809181 -1.84242665e83 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2589378260 { 0x9a56c6d4 -1705589036 -1.67794275e181 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2589378263 { 0x9a56c6d7 -1705589033 -1.67794311e181 } : BV:32
=counter_example.random_seed
794214668
=counter_example_end
=global nodece 8 num_edges_traversed 1
=global nodece 8 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 9
=global nodece 9 nodece z3v487.ce560.num_edges_traversed0
=global nodece 9 nodece_path
=global nodece 9 nodece_path.graph_edge_composition
(epsilon)
=global nodece 9 nodece_cached_counterexample
=counter_example_begin z3v487.ce560 a7bccdef9837bacd3853d6e7b37c52d
=input.spec-%var-x-1
1 : Lambda919 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda920 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L3%6%bbentry
1 : Lambda922 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda923 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 2, 28) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 2765095248 { 0xa4d00150 -1529872048 -1.62504005e202 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 280233135 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 280233136; 280233139 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 280233140; 1151894691 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1151894692; 1151894695 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1151894696; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 280233136 { 0x10b404b0 +1.40639305e162 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1151894692 { 0x44a884a4 +1.31654787e10 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-0.L3%6%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%6%bbentry.1.1
1 : Lambda901 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 2, 18) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1151894692 { 0x44a884a4 +1.31654787e10 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1151894695 { 0x44a884a7 +1.31654822e10 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 280233136 { 0x10b404b0 +1.40639305e162 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 280233139 { 0x10b404b3 +1.40639340e162 } : BV:32
=counter_example.random_seed
4049224999
=counter_example_end
=global nodece 9 num_edges_traversed 0
=global nodece 9 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 10
=global nodece 10 nodece z3.ce561.num_edges_traversed0
=global nodece 10 nodece_path
=global nodece 10 nodece_path.graph_edge_composition
(epsilon)
=global nodece 10 nodece_cached_counterexample
=counter_example_begin z3.ce561 80139d6bc621996a6116e4c582beeb2
=input.spec-%var-x-1
1 : Lambda929 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4095 { 0xfff +1.48816e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4096 { 0x1000 +1.48828e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda930 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 2, 28) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L3%6%bbentry
1 : Lambda933 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4095 { 0xfff +1.48816e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4096 { 0x1000 +1.48828e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda934 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 4050619148 { 0xf16f8b0c -244348148 -1.87143087e99 } : BV:32
=input.dst.llvm-%n
1 : 4096 { 0x1000 +1.48828e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3028224903 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3028224904; 3028224907 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3028224908; 4073297543 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4073297544; 4073297547 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 4073297548; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3028224904 { 0xb47f0b88 -1266742392 -1.99253940e233 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4073297544 { 0xf2c99688 -221669752 -1.57490634e102 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-0.L3%6%bbentry.0.1
1 : ([ 0; 4095 ] -> true, [ 4096; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4095 ] -> true, [ 4096; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : Lambda912 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 4095 { 0xfff +1.48816e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 4096 { 0x1000 +1.48828e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 2, 18) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4073297544 { 0xf2c99688 -221669752 -1.57490634e102 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 4073297547 { 0xf2c9968b -221669749 -1.57490670e102 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3028224904 { 0xb47f0b88 -1266742392 -1.99253940e233 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3028224907 { 0xb47f0b8b -1266742389 -1.99253976e233 } : BV:32
=counter_example.random_seed
1568682748
=counter_example_end
=global nodece 10 num_edges_traversed 0
=global nodece 10 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 11
=global nodece 11 nodece z3.ce639.num_edges_traversed2
=global nodece 11 nodece_path
=global nodece 11 nodece_path.graph_edge_composition
(epsilon)
=global nodece 11 nodece_cached_counterexample
=counter_example_begin z3.ce639 4a4e1e12a539f0c5eb47d8037771165
=input.spec-%var-x-1
1 : Lambda63 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3200171521 { 0xbebebe01 -1094795775 -1.49017345e254 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3200171522 { 0xbebebe02 -1094795774 -1.49017357e254 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda64 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3221208576 { 0xbfffbe00 -1073758720 -1.99798583e0 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 3221208577 { 0xbfffbe01 -1073758719 -1.99798595e0 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 214653654 { 0xccb5ad6 +1.58870959e154 } : BV:32
28 : eq(23, 27) : BOOL
29 : 255 { 0xff -1 } : BV:8
30 : 1973947344 { 0x75a80bd0 +1.31286048e108 } : BV:32
31 : eq(23, 30) : BOOL
32 : 2 { 0x2 } : BV:8
33 : 3221208579 { 0xbfffbe03 -1073758717 -1.99798619e0 } : BV:32
34 : eq(23, 33) : BOOL
35 : 3221208578 { 0xbfffbe02 -1073758718 -1.99798607e0 } : BV:32
36 : eq(23, 35) : BOOL
37 : eq(23, 22) : BOOL
38 : 214653655 { 0xccb5ad7 +1.58870971e154 } : BV:32
39 : eq(23, 38) : BOOL
40 : 191 { 0xbf -65 } : BV:8
41 : 214653652 { 0xccb5ad4 +1.58870935e154 } : BV:32
42 : eq(23, 41) : BOOL
43 : 190 { 0xbe -66 } : BV:8
44 : ite(42, 26, 43) : BV:8
45 : ite(39, 40, 44) : BV:8
46 : ite(37, 26, 45) : BV:8
47 : ite(36, 26, 46) : BV:8
48 : ite(34, 26, 47) : BV:8
49 : ite(31, 32, 48) : BV:8
50 : ite(28, 29, 49) : BV:8
51 : ite(25, 26, 50) : BV:8
52 : 2 { 0x2 +1.23e129 } : BV:32
53 : bvadd(52, 21, 22) : BV:32
54 : eq(53, 24) : BOOL
55 : eq(53, 27) : BOOL
56 : eq(53, 30) : BOOL
57 : eq(53, 33) : BOOL
58 : eq(53, 35) : BOOL
59 : eq(53, 22) : BOOL
60 : eq(53, 38) : BOOL
61 : eq(53, 41) : BOOL
62 : ite(61, 26, 43) : BV:8
63 : ite(60, 40, 62) : BV:8
64 : ite(59, 26, 63) : BV:8
65 : ite(58, 26, 64) : BV:8
66 : ite(57, 26, 65) : BV:8
67 : ite(56, 32, 66) : BV:8
68 : ite(55, 29, 67) : BV:8
69 : ite(54, 26, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 21, 22) : BV:32
72 : eq(71, 24) : BOOL
73 : eq(71, 27) : BOOL
74 : eq(71, 30) : BOOL
75 : eq(71, 33) : BOOL
76 : eq(71, 35) : BOOL
77 : eq(71, 22) : BOOL
78 : eq(71, 38) : BOOL
79 : eq(71, 41) : BOOL
80 : ite(79, 26, 43) : BV:8
81 : ite(78, 40, 80) : BV:8
82 : ite(77, 26, 81) : BV:8
83 : ite(76, 26, 82) : BV:8
84 : ite(75, 26, 83) : BV:8
85 : ite(74, 32, 84) : BV:8
86 : ite(73, 29, 85) : BV:8
87 : ite(72, 26, 86) : BV:8
88 : bvadd(21, 22) : BV:32
89 : eq(88, 24) : BOOL
90 : eq(88, 27) : BOOL
91 : eq(88, 30) : BOOL
92 : eq(88, 33) : BOOL
93 : eq(88, 35) : BOOL
94 : eq(88, 22) : BOOL
95 : eq(88, 38) : BOOL
96 : eq(88, 41) : BOOL
97 : ite(96, 26, 43) : BV:8
98 : ite(95, 40, 97) : BV:8
99 : ite(94, 26, 98) : BV:8
100 : ite(93, 26, 99) : BV:8
101 : ite(92, 26, 100) : BV:8
102 : ite(91, 32, 101) : BV:8
103 : ite(90, 29, 102) : BV:8
104 : ite(89, 26, 103) : BV:8
105 : bvconcat(51, 69, 87, 104) : BV:32
106 : ite(18, 2, 105) : BV:32
107 : lambda(17, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(16, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L3%6%bbentry
1 : Lambda63 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3200171521 { 0xbebebe01 -1094795775 -1.49017345e254 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3200171522 { 0xbebebe02 -1094795774 -1.49017357e254 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda64 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3221208576 { 0xbfffbe00 -1073758720 -1.99798583e0 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 3221208577 { 0xbfffbe01 -1073758719 -1.99798595e0 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 214653654 { 0xccb5ad6 +1.58870959e154 } : BV:32
28 : eq(23, 27) : BOOL
29 : 255 { 0xff -1 } : BV:8
30 : 1973947344 { 0x75a80bd0 +1.31286048e108 } : BV:32
31 : eq(23, 30) : BOOL
32 : 2 { 0x2 } : BV:8
33 : 3221208579 { 0xbfffbe03 -1073758717 -1.99798619e0 } : BV:32
34 : eq(23, 33) : BOOL
35 : 3221208578 { 0xbfffbe02 -1073758718 -1.99798607e0 } : BV:32
36 : eq(23, 35) : BOOL
37 : eq(23, 22) : BOOL
38 : 214653655 { 0xccb5ad7 +1.58870971e154 } : BV:32
39 : eq(23, 38) : BOOL
40 : 191 { 0xbf -65 } : BV:8
41 : 214653652 { 0xccb5ad4 +1.58870935e154 } : BV:32
42 : eq(23, 41) : BOOL
43 : 190 { 0xbe -66 } : BV:8
44 : ite(42, 26, 43) : BV:8
45 : ite(39, 40, 44) : BV:8
46 : ite(37, 26, 45) : BV:8
47 : ite(36, 26, 46) : BV:8
48 : ite(34, 26, 47) : BV:8
49 : ite(31, 32, 48) : BV:8
50 : ite(28, 29, 49) : BV:8
51 : ite(25, 26, 50) : BV:8
52 : 2 { 0x2 +1.23e129 } : BV:32
53 : bvadd(52, 21, 22) : BV:32
54 : eq(53, 24) : BOOL
55 : eq(53, 27) : BOOL
56 : eq(53, 30) : BOOL
57 : eq(53, 33) : BOOL
58 : eq(53, 35) : BOOL
59 : eq(53, 22) : BOOL
60 : eq(53, 38) : BOOL
61 : eq(53, 41) : BOOL
62 : ite(61, 26, 43) : BV:8
63 : ite(60, 40, 62) : BV:8
64 : ite(59, 26, 63) : BV:8
65 : ite(58, 26, 64) : BV:8
66 : ite(57, 26, 65) : BV:8
67 : ite(56, 32, 66) : BV:8
68 : ite(55, 29, 67) : BV:8
69 : ite(54, 26, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 21, 22) : BV:32
72 : eq(71, 24) : BOOL
73 : eq(71, 27) : BOOL
74 : eq(71, 30) : BOOL
75 : eq(71, 33) : BOOL
76 : eq(71, 35) : BOOL
77 : eq(71, 22) : BOOL
78 : eq(71, 38) : BOOL
79 : eq(71, 41) : BOOL
80 : ite(79, 26, 43) : BV:8
81 : ite(78, 40, 80) : BV:8
82 : ite(77, 26, 81) : BV:8
83 : ite(76, 26, 82) : BV:8
84 : ite(75, 26, 83) : BV:8
85 : ite(74, 32, 84) : BV:8
86 : ite(73, 29, 85) : BV:8
87 : ite(72, 26, 86) : BV:8
88 : bvadd(21, 22) : BV:32
89 : eq(88, 24) : BOOL
90 : eq(88, 27) : BOOL
91 : eq(88, 30) : BOOL
92 : eq(88, 33) : BOOL
93 : eq(88, 35) : BOOL
94 : eq(88, 22) : BOOL
95 : eq(88, 38) : BOOL
96 : eq(88, 41) : BOOL
97 : ite(96, 26, 43) : BV:8
98 : ite(95, 40, 97) : BV:8
99 : ite(94, 26, 98) : BV:8
100 : ite(93, 26, 99) : BV:8
101 : ite(92, 26, 100) : BV:8
102 : ite(91, 32, 101) : BV:8
103 : ite(90, 29, 102) : BV:8
104 : ite(89, 26, 103) : BV:8
105 : bvconcat(51, 69, 87, 104) : BV:32
106 : ite(18, 2, 105) : BV:32
107 : lambda(17, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(16, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%x
1 : 3221208576 { 0xbfffbe00 -1073758720 -1.99798583e0 } : BV:32
=input.dst.llvm-%n
1 : 3200171522 { 0xbebebe02 -1094795774 -1.49017357e254 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 214653651 ] -> 190, [ 214653652; 214653652 ] -> 0, [ 214653653; 214653653 ] -> 190, [ 214653654; 214653654 ] -> 255, [ 214653655; 214653655 ] -> 191, [ 214653656; 1973947343 ] -> 190, [ 1973947344; 1973947344 ] -> 2, [ 1973947345; 3221208575 ] -> 190, [ 3221208576; 3221208579 ] -> 0, [ 3221208580; 4294967295 ] -> 190, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 214653651 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 214653652; 214653655 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 214653656; 1973947343 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1973947344; 1973947347 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1973947348; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 214653652 { 0xccb5ad4 +1.58870935e154 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1973947344 { 0x75a80bd0 +1.31286048e108 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%6%bbentry.0.1
1 : ([ 0; 3200171521 ] -> true, [ 3200171522; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%6%bbentry.1.1
1 : Lambda51 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3221208576 { 0xbfffbe00 -1073758720 -1.99798583e0 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 3221208577 { 0xbfffbe01 -1073758719 -1.99798595e0 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 214653654 { 0xccb5ad6 +1.58870959e154 } : BV:32
13 : eq(8, 12) : BOOL
14 : 255 { 0xff -1 } : BV:8
15 : 1973947344 { 0x75a80bd0 +1.31286048e108 } : BV:32
16 : eq(8, 15) : BOOL
17 : 2 { 0x2 } : BV:8
18 : 3221208579 { 0xbfffbe03 -1073758717 -1.99798619e0 } : BV:32
19 : eq(8, 18) : BOOL
20 : 3221208578 { 0xbfffbe02 -1073758718 -1.99798607e0 } : BV:32
21 : eq(8, 20) : BOOL
22 : eq(8, 7) : BOOL
23 : 214653655 { 0xccb5ad7 +1.58870971e154 } : BV:32
24 : eq(8, 23) : BOOL
25 : 191 { 0xbf -65 } : BV:8
26 : 214653652 { 0xccb5ad4 +1.58870935e154 } : BV:32
27 : eq(8, 26) : BOOL
28 : 190 { 0xbe -66 } : BV:8
29 : ite(27, 11, 28) : BV:8
30 : ite(24, 25, 29) : BV:8
31 : ite(22, 11, 30) : BV:8
32 : ite(21, 11, 31) : BV:8
33 : ite(19, 11, 32) : BV:8
34 : ite(16, 17, 33) : BV:8
35 : ite(13, 14, 34) : BV:8
36 : ite(10, 11, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 6, 7) : BV:32
39 : eq(38, 9) : BOOL
40 : eq(38, 12) : BOOL
41 : eq(38, 15) : BOOL
42 : eq(38, 18) : BOOL
43 : eq(38, 20) : BOOL
44 : eq(38, 7) : BOOL
45 : eq(38, 23) : BOOL
46 : eq(38, 26) : BOOL
47 : ite(46, 11, 28) : BV:8
48 : ite(45, 25, 47) : BV:8
49 : ite(44, 11, 48) : BV:8
50 : ite(43, 11, 49) : BV:8
51 : ite(42, 11, 50) : BV:8
52 : ite(41, 17, 51) : BV:8
53 : ite(40, 14, 52) : BV:8
54 : ite(39, 11, 53) : BV:8
55 : 1 { 0x1 +1.11e129 } : BV:32
56 : bvadd(55, 6, 7) : BV:32
57 : eq(56, 9) : BOOL
58 : eq(56, 12) : BOOL
59 : eq(56, 15) : BOOL
60 : eq(56, 18) : BOOL
61 : eq(56, 20) : BOOL
62 : eq(56, 7) : BOOL
63 : eq(56, 23) : BOOL
64 : eq(56, 26) : BOOL
65 : ite(64, 11, 28) : BV:8
66 : ite(63, 25, 65) : BV:8
67 : ite(62, 11, 66) : BV:8
68 : ite(61, 11, 67) : BV:8
69 : ite(60, 11, 68) : BV:8
70 : ite(59, 17, 69) : BV:8
71 : ite(58, 14, 70) : BV:8
72 : ite(57, 11, 71) : BV:8
73 : bvadd(6, 7) : BV:32
74 : eq(73, 9) : BOOL
75 : eq(73, 12) : BOOL
76 : eq(73, 15) : BOOL
77 : eq(73, 18) : BOOL
78 : eq(73, 20) : BOOL
79 : eq(73, 7) : BOOL
80 : eq(73, 23) : BOOL
81 : eq(73, 26) : BOOL
82 : ite(81, 11, 28) : BV:8
83 : ite(80, 25, 82) : BV:8
84 : ite(79, 11, 83) : BV:8
85 : ite(78, 11, 84) : BV:8
86 : ite(77, 11, 85) : BV:8
87 : ite(76, 17, 86) : BV:8
88 : ite(75, 14, 87) : BV:8
89 : ite(74, 11, 88) : BV:8
90 : bvconcat(36, 54, 72, 89) : BV:32
91 : ite(3, 2, 90) : BV:32
92 : ite(3, 2, 91) : BV:32
93 : lambda(1, 92) : FUNCTION[BV:32 -> BV:32]
94 : sym_const(93) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 3200171521 ] -> true, [ 3200171522; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : Lambda52 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3221208576 { 0xbfffbe00 -1073758720 -1.99798583e0 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 3221208577 { 0xbfffbe01 -1073758719 -1.99798595e0 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 214653654 { 0xccb5ad6 +1.58870959e154 } : BV:32
13 : eq(8, 12) : BOOL
14 : 255 { 0xff -1 } : BV:8
15 : 1973947344 { 0x75a80bd0 +1.31286048e108 } : BV:32
16 : eq(8, 15) : BOOL
17 : 2 { 0x2 } : BV:8
18 : 3221208579 { 0xbfffbe03 -1073758717 -1.99798619e0 } : BV:32
19 : eq(8, 18) : BOOL
20 : 3221208578 { 0xbfffbe02 -1073758718 -1.99798607e0 } : BV:32
21 : eq(8, 20) : BOOL
22 : eq(8, 7) : BOOL
23 : 214653655 { 0xccb5ad7 +1.58870971e154 } : BV:32
24 : eq(8, 23) : BOOL
25 : 191 { 0xbf -65 } : BV:8
26 : 214653652 { 0xccb5ad4 +1.58870935e154 } : BV:32
27 : eq(8, 26) : BOOL
28 : 190 { 0xbe -66 } : BV:8
29 : ite(27, 11, 28) : BV:8
30 : ite(24, 25, 29) : BV:8
31 : ite(22, 11, 30) : BV:8
32 : ite(21, 11, 31) : BV:8
33 : ite(19, 11, 32) : BV:8
34 : ite(16, 17, 33) : BV:8
35 : ite(13, 14, 34) : BV:8
36 : ite(10, 11, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 6, 7) : BV:32
39 : eq(38, 9) : BOOL
40 : eq(38, 12) : BOOL
41 : eq(38, 15) : BOOL
42 : eq(38, 18) : BOOL
43 : eq(38, 20) : BOOL
44 : eq(38, 7) : BOOL
45 : eq(38, 23) : BOOL
46 : eq(38, 26) : BOOL
47 : ite(46, 11, 28) : BV:8
48 : ite(45, 25, 47) : BV:8
49 : ite(44, 11, 48) : BV:8
50 : ite(43, 11, 49) : BV:8
51 : ite(42, 11, 50) : BV:8
52 : ite(41, 17, 51) : BV:8
53 : ite(40, 14, 52) : BV:8
54 : ite(39, 11, 53) : BV:8
55 : 1 { 0x1 +1.11e129 } : BV:32
56 : bvadd(55, 6, 7) : BV:32
57 : eq(56, 9) : BOOL
58 : eq(56, 12) : BOOL
59 : eq(56, 15) : BOOL
60 : eq(56, 18) : BOOL
61 : eq(56, 20) : BOOL
62 : eq(56, 7) : BOOL
63 : eq(56, 23) : BOOL
64 : eq(56, 26) : BOOL
65 : ite(64, 11, 28) : BV:8
66 : ite(63, 25, 65) : BV:8
67 : ite(62, 11, 66) : BV:8
68 : ite(61, 11, 67) : BV:8
69 : ite(60, 11, 68) : BV:8
70 : ite(59, 17, 69) : BV:8
71 : ite(58, 14, 70) : BV:8
72 : ite(57, 11, 71) : BV:8
73 : bvadd(6, 7) : BV:32
74 : eq(73, 9) : BOOL
75 : eq(73, 12) : BOOL
76 : eq(73, 15) : BOOL
77 : eq(73, 18) : BOOL
78 : eq(73, 20) : BOOL
79 : eq(73, 7) : BOOL
80 : eq(73, 23) : BOOL
81 : eq(73, 26) : BOOL
82 : ite(81, 11, 28) : BV:8
83 : ite(80, 25, 82) : BV:8
84 : ite(79, 11, 83) : BV:8
85 : ite(78, 11, 84) : BV:8
86 : ite(77, 11, 85) : BV:8
87 : ite(76, 17, 86) : BV:8
88 : ite(75, 14, 87) : BV:8
89 : ite(74, 11, 88) : BV:8
90 : bvconcat(36, 54, 72, 89) : BV:32
91 : ite(3, 2, 90) : BV:32
92 : lambda(1, 91) : FUNCTION[BV:32 -> BV:32]
93 : sym_const(92) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1079274789 { 0x40546d25 +1.65958082e1 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1973947344 { 0x75a80bd0 +1.31286048e108 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1973947347 { 0x75a80bd3 +1.31286084e108 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 214653652 { 0xccb5ad4 +1.58870935e154 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 214653655 { 0xccb5ad7 +1.58870971e154 } : BV:32
=counter_example.random_seed
2233806052
=counter_example_end
=global nodece 11 num_edges_traversed 2
=global nodece 11 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 12
=global nodece 12 nodece z3.ce656.num_edges_traversed3
=global nodece 12 nodece_path
=global nodece 12 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 12 nodece_cached_counterexample
=counter_example_begin z3.ce656 a989963853bc707297a3a5c3313c65
=input.spec-%var-x-1
1 : Lambda63 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3200171521 { 0xbebebe01 -1094795775 -1.49017345e254 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3200171522 { 0xbebebe02 -1094795774 -1.49017357e254 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda64 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3221208576 { 0xbfffbe00 -1073758720 -1.99798583e0 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 3221208577 { 0xbfffbe01 -1073758719 -1.99798595e0 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 214653654 { 0xccb5ad6 +1.58870959e154 } : BV:32
28 : eq(23, 27) : BOOL
29 : 255 { 0xff -1 } : BV:8
30 : 1973947344 { 0x75a80bd0 +1.31286048e108 } : BV:32
31 : eq(23, 30) : BOOL
32 : 2 { 0x2 } : BV:8
33 : 3221208579 { 0xbfffbe03 -1073758717 -1.99798619e0 } : BV:32
34 : eq(23, 33) : BOOL
35 : 3221208578 { 0xbfffbe02 -1073758718 -1.99798607e0 } : BV:32
36 : eq(23, 35) : BOOL
37 : eq(23, 22) : BOOL
38 : 214653655 { 0xccb5ad7 +1.58870971e154 } : BV:32
39 : eq(23, 38) : BOOL
40 : 191 { 0xbf -65 } : BV:8
41 : 214653652 { 0xccb5ad4 +1.58870935e154 } : BV:32
42 : eq(23, 41) : BOOL
43 : 190 { 0xbe -66 } : BV:8
44 : ite(42, 26, 43) : BV:8
45 : ite(39, 40, 44) : BV:8
46 : ite(37, 26, 45) : BV:8
47 : ite(36, 26, 46) : BV:8
48 : ite(34, 26, 47) : BV:8
49 : ite(31, 32, 48) : BV:8
50 : ite(28, 29, 49) : BV:8
51 : ite(25, 26, 50) : BV:8
52 : 2 { 0x2 +1.23e129 } : BV:32
53 : bvadd(52, 21, 22) : BV:32
54 : eq(53, 24) : BOOL
55 : eq(53, 27) : BOOL
56 : eq(53, 30) : BOOL
57 : eq(53, 33) : BOOL
58 : eq(53, 35) : BOOL
59 : eq(53, 22) : BOOL
60 : eq(53, 38) : BOOL
61 : eq(53, 41) : BOOL
62 : ite(61, 26, 43) : BV:8
63 : ite(60, 40, 62) : BV:8
64 : ite(59, 26, 63) : BV:8
65 : ite(58, 26, 64) : BV:8
66 : ite(57, 26, 65) : BV:8
67 : ite(56, 32, 66) : BV:8
68 : ite(55, 29, 67) : BV:8
69 : ite(54, 26, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 21, 22) : BV:32
72 : eq(71, 24) : BOOL
73 : eq(71, 27) : BOOL
74 : eq(71, 30) : BOOL
75 : eq(71, 33) : BOOL
76 : eq(71, 35) : BOOL
77 : eq(71, 22) : BOOL
78 : eq(71, 38) : BOOL
79 : eq(71, 41) : BOOL
80 : ite(79, 26, 43) : BV:8
81 : ite(78, 40, 80) : BV:8
82 : ite(77, 26, 81) : BV:8
83 : ite(76, 26, 82) : BV:8
84 : ite(75, 26, 83) : BV:8
85 : ite(74, 32, 84) : BV:8
86 : ite(73, 29, 85) : BV:8
87 : ite(72, 26, 86) : BV:8
88 : bvadd(21, 22) : BV:32
89 : eq(88, 24) : BOOL
90 : eq(88, 27) : BOOL
91 : eq(88, 30) : BOOL
92 : eq(88, 33) : BOOL
93 : eq(88, 35) : BOOL
94 : eq(88, 22) : BOOL
95 : eq(88, 38) : BOOL
96 : eq(88, 41) : BOOL
97 : ite(96, 26, 43) : BV:8
98 : ite(95, 40, 97) : BV:8
99 : ite(94, 26, 98) : BV:8
100 : ite(93, 26, 99) : BV:8
101 : ite(92, 26, 100) : BV:8
102 : ite(91, 32, 101) : BV:8
103 : ite(90, 29, 102) : BV:8
104 : ite(89, 26, 103) : BV:8
105 : bvconcat(51, 69, 87, 104) : BV:32
106 : ite(18, 2, 105) : BV:32
107 : lambda(17, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(16, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L3%6%bbentry
1 : Lambda63 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3200171521 { 0xbebebe01 -1094795775 -1.49017345e254 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3200171522 { 0xbebebe02 -1094795774 -1.49017357e254 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda64 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3221208576 { 0xbfffbe00 -1073758720 -1.99798583e0 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 3221208577 { 0xbfffbe01 -1073758719 -1.99798595e0 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 214653654 { 0xccb5ad6 +1.58870959e154 } : BV:32
28 : eq(23, 27) : BOOL
29 : 255 { 0xff -1 } : BV:8
30 : 1973947344 { 0x75a80bd0 +1.31286048e108 } : BV:32
31 : eq(23, 30) : BOOL
32 : 2 { 0x2 } : BV:8
33 : 3221208579 { 0xbfffbe03 -1073758717 -1.99798619e0 } : BV:32
34 : eq(23, 33) : BOOL
35 : 3221208578 { 0xbfffbe02 -1073758718 -1.99798607e0 } : BV:32
36 : eq(23, 35) : BOOL
37 : eq(23, 22) : BOOL
38 : 214653655 { 0xccb5ad7 +1.58870971e154 } : BV:32
39 : eq(23, 38) : BOOL
40 : 191 { 0xbf -65 } : BV:8
41 : 214653652 { 0xccb5ad4 +1.58870935e154 } : BV:32
42 : eq(23, 41) : BOOL
43 : 190 { 0xbe -66 } : BV:8
44 : ite(42, 26, 43) : BV:8
45 : ite(39, 40, 44) : BV:8
46 : ite(37, 26, 45) : BV:8
47 : ite(36, 26, 46) : BV:8
48 : ite(34, 26, 47) : BV:8
49 : ite(31, 32, 48) : BV:8
50 : ite(28, 29, 49) : BV:8
51 : ite(25, 26, 50) : BV:8
52 : 2 { 0x2 +1.23e129 } : BV:32
53 : bvadd(52, 21, 22) : BV:32
54 : eq(53, 24) : BOOL
55 : eq(53, 27) : BOOL
56 : eq(53, 30) : BOOL
57 : eq(53, 33) : BOOL
58 : eq(53, 35) : BOOL
59 : eq(53, 22) : BOOL
60 : eq(53, 38) : BOOL
61 : eq(53, 41) : BOOL
62 : ite(61, 26, 43) : BV:8
63 : ite(60, 40, 62) : BV:8
64 : ite(59, 26, 63) : BV:8
65 : ite(58, 26, 64) : BV:8
66 : ite(57, 26, 65) : BV:8
67 : ite(56, 32, 66) : BV:8
68 : ite(55, 29, 67) : BV:8
69 : ite(54, 26, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 21, 22) : BV:32
72 : eq(71, 24) : BOOL
73 : eq(71, 27) : BOOL
74 : eq(71, 30) : BOOL
75 : eq(71, 33) : BOOL
76 : eq(71, 35) : BOOL
77 : eq(71, 22) : BOOL
78 : eq(71, 38) : BOOL
79 : eq(71, 41) : BOOL
80 : ite(79, 26, 43) : BV:8
81 : ite(78, 40, 80) : BV:8
82 : ite(77, 26, 81) : BV:8
83 : ite(76, 26, 82) : BV:8
84 : ite(75, 26, 83) : BV:8
85 : ite(74, 32, 84) : BV:8
86 : ite(73, 29, 85) : BV:8
87 : ite(72, 26, 86) : BV:8
88 : bvadd(21, 22) : BV:32
89 : eq(88, 24) : BOOL
90 : eq(88, 27) : BOOL
91 : eq(88, 30) : BOOL
92 : eq(88, 33) : BOOL
93 : eq(88, 35) : BOOL
94 : eq(88, 22) : BOOL
95 : eq(88, 38) : BOOL
96 : eq(88, 41) : BOOL
97 : ite(96, 26, 43) : BV:8
98 : ite(95, 40, 97) : BV:8
99 : ite(94, 26, 98) : BV:8
100 : ite(93, 26, 99) : BV:8
101 : ite(92, 26, 100) : BV:8
102 : ite(91, 32, 101) : BV:8
103 : ite(90, 29, 102) : BV:8
104 : ite(89, 26, 103) : BV:8
105 : bvconcat(51, 69, 87, 104) : BV:32
106 : ite(18, 2, 105) : BV:32
107 : lambda(17, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(16, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%6%bbentry
1 : 3200171710 { 0xbebebebe -1094795586 -1.49019598e254 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%x
1 : 3221208576 { 0xbfffbe00 -1073758720 -1.99798583e0 } : BV:32
=input.dst.llvm-%n
1 : 3200171522 { 0xbebebe02 -1094795774 -1.49017357e254 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 214653651 ] -> 190, [ 214653652; 214653652 ] -> 0, [ 214653653; 214653653 ] -> 190, [ 214653654; 214653654 ] -> 255, [ 214653655; 214653655 ] -> 191, [ 214653656; 1973947343 ] -> 190, [ 1973947344; 1973947344 ] -> 2, [ 1973947345; 3221208575 ] -> 190, [ 3221208576; 3221208579 ] -> 0, [ 3221208580; 4294967295 ] -> 190, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 214653651 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 214653652; 214653655 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 214653656; 1973947343 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1973947344; 1973947347 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1973947348; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 214653652 { 0xccb5ad4 +1.58870935e154 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1973947344 { 0x75a80bd0 +1.31286048e108 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%6%bbentry.0.1
1 : ([ 0; 3200171521 ] -> true, [ 3200171522; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%6%bbentry.1.1
1 : Lambda51 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3221208576 { 0xbfffbe00 -1073758720 -1.99798583e0 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 3221208577 { 0xbfffbe01 -1073758719 -1.99798595e0 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 214653654 { 0xccb5ad6 +1.58870959e154 } : BV:32
13 : eq(8, 12) : BOOL
14 : 255 { 0xff -1 } : BV:8
15 : 1973947344 { 0x75a80bd0 +1.31286048e108 } : BV:32
16 : eq(8, 15) : BOOL
17 : 2 { 0x2 } : BV:8
18 : 3221208579 { 0xbfffbe03 -1073758717 -1.99798619e0 } : BV:32
19 : eq(8, 18) : BOOL
20 : 3221208578 { 0xbfffbe02 -1073758718 -1.99798607e0 } : BV:32
21 : eq(8, 20) : BOOL
22 : eq(8, 7) : BOOL
23 : 214653655 { 0xccb5ad7 +1.58870971e154 } : BV:32
24 : eq(8, 23) : BOOL
25 : 191 { 0xbf -65 } : BV:8
26 : 214653652 { 0xccb5ad4 +1.58870935e154 } : BV:32
27 : eq(8, 26) : BOOL
28 : 190 { 0xbe -66 } : BV:8
29 : ite(27, 11, 28) : BV:8
30 : ite(24, 25, 29) : BV:8
31 : ite(22, 11, 30) : BV:8
32 : ite(21, 11, 31) : BV:8
33 : ite(19, 11, 32) : BV:8
34 : ite(16, 17, 33) : BV:8
35 : ite(13, 14, 34) : BV:8
36 : ite(10, 11, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 6, 7) : BV:32
39 : eq(38, 9) : BOOL
40 : eq(38, 12) : BOOL
41 : eq(38, 15) : BOOL
42 : eq(38, 18) : BOOL
43 : eq(38, 20) : BOOL
44 : eq(38, 7) : BOOL
45 : eq(38, 23) : BOOL
46 : eq(38, 26) : BOOL
47 : ite(46, 11, 28) : BV:8
48 : ite(45, 25, 47) : BV:8
49 : ite(44, 11, 48) : BV:8
50 : ite(43, 11, 49) : BV:8
51 : ite(42, 11, 50) : BV:8
52 : ite(41, 17, 51) : BV:8
53 : ite(40, 14, 52) : BV:8
54 : ite(39, 11, 53) : BV:8
55 : 1 { 0x1 +1.11e129 } : BV:32
56 : bvadd(55, 6, 7) : BV:32
57 : eq(56, 9) : BOOL
58 : eq(56, 12) : BOOL
59 : eq(56, 15) : BOOL
60 : eq(56, 18) : BOOL
61 : eq(56, 20) : BOOL
62 : eq(56, 7) : BOOL
63 : eq(56, 23) : BOOL
64 : eq(56, 26) : BOOL
65 : ite(64, 11, 28) : BV:8
66 : ite(63, 25, 65) : BV:8
67 : ite(62, 11, 66) : BV:8
68 : ite(61, 11, 67) : BV:8
69 : ite(60, 11, 68) : BV:8
70 : ite(59, 17, 69) : BV:8
71 : ite(58, 14, 70) : BV:8
72 : ite(57, 11, 71) : BV:8
73 : bvadd(6, 7) : BV:32
74 : eq(73, 9) : BOOL
75 : eq(73, 12) : BOOL
76 : eq(73, 15) : BOOL
77 : eq(73, 18) : BOOL
78 : eq(73, 20) : BOOL
79 : eq(73, 7) : BOOL
80 : eq(73, 23) : BOOL
81 : eq(73, 26) : BOOL
82 : ite(81, 11, 28) : BV:8
83 : ite(80, 25, 82) : BV:8
84 : ite(79, 11, 83) : BV:8
85 : ite(78, 11, 84) : BV:8
86 : ite(77, 11, 85) : BV:8
87 : ite(76, 17, 86) : BV:8
88 : ite(75, 14, 87) : BV:8
89 : ite(74, 11, 88) : BV:8
90 : bvconcat(36, 54, 72, 89) : BV:32
91 : ite(3, 2, 90) : BV:32
92 : ite(3, 2, 91) : BV:32
93 : lambda(1, 92) : FUNCTION[BV:32 -> BV:32]
94 : sym_const(93) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 3200171521 ] -> true, [ 3200171522; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : Lambda52 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3221208576 { 0xbfffbe00 -1073758720 -1.99798583e0 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 3221208577 { 0xbfffbe01 -1073758719 -1.99798595e0 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 214653654 { 0xccb5ad6 +1.58870959e154 } : BV:32
13 : eq(8, 12) : BOOL
14 : 255 { 0xff -1 } : BV:8
15 : 1973947344 { 0x75a80bd0 +1.31286048e108 } : BV:32
16 : eq(8, 15) : BOOL
17 : 2 { 0x2 } : BV:8
18 : 3221208579 { 0xbfffbe03 -1073758717 -1.99798619e0 } : BV:32
19 : eq(8, 18) : BOOL
20 : 3221208578 { 0xbfffbe02 -1073758718 -1.99798607e0 } : BV:32
21 : eq(8, 20) : BOOL
22 : eq(8, 7) : BOOL
23 : 214653655 { 0xccb5ad7 +1.58870971e154 } : BV:32
24 : eq(8, 23) : BOOL
25 : 191 { 0xbf -65 } : BV:8
26 : 214653652 { 0xccb5ad4 +1.58870935e154 } : BV:32
27 : eq(8, 26) : BOOL
28 : 190 { 0xbe -66 } : BV:8
29 : ite(27, 11, 28) : BV:8
30 : ite(24, 25, 29) : BV:8
31 : ite(22, 11, 30) : BV:8
32 : ite(21, 11, 31) : BV:8
33 : ite(19, 11, 32) : BV:8
34 : ite(16, 17, 33) : BV:8
35 : ite(13, 14, 34) : BV:8
36 : ite(10, 11, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 6, 7) : BV:32
39 : eq(38, 9) : BOOL
40 : eq(38, 12) : BOOL
41 : eq(38, 15) : BOOL
42 : eq(38, 18) : BOOL
43 : eq(38, 20) : BOOL
44 : eq(38, 7) : BOOL
45 : eq(38, 23) : BOOL
46 : eq(38, 26) : BOOL
47 : ite(46, 11, 28) : BV:8
48 : ite(45, 25, 47) : BV:8
49 : ite(44, 11, 48) : BV:8
50 : ite(43, 11, 49) : BV:8
51 : ite(42, 11, 50) : BV:8
52 : ite(41, 17, 51) : BV:8
53 : ite(40, 14, 52) : BV:8
54 : ite(39, 11, 53) : BV:8
55 : 1 { 0x1 +1.11e129 } : BV:32
56 : bvadd(55, 6, 7) : BV:32
57 : eq(56, 9) : BOOL
58 : eq(56, 12) : BOOL
59 : eq(56, 15) : BOOL
60 : eq(56, 18) : BOOL
61 : eq(56, 20) : BOOL
62 : eq(56, 7) : BOOL
63 : eq(56, 23) : BOOL
64 : eq(56, 26) : BOOL
65 : ite(64, 11, 28) : BV:8
66 : ite(63, 25, 65) : BV:8
67 : ite(62, 11, 66) : BV:8
68 : ite(61, 11, 67) : BV:8
69 : ite(60, 11, 68) : BV:8
70 : ite(59, 17, 69) : BV:8
71 : ite(58, 14, 70) : BV:8
72 : ite(57, 11, 71) : BV:8
73 : bvadd(6, 7) : BV:32
74 : eq(73, 9) : BOOL
75 : eq(73, 12) : BOOL
76 : eq(73, 15) : BOOL
77 : eq(73, 18) : BOOL
78 : eq(73, 20) : BOOL
79 : eq(73, 7) : BOOL
80 : eq(73, 23) : BOOL
81 : eq(73, 26) : BOOL
82 : ite(81, 11, 28) : BV:8
83 : ite(80, 25, 82) : BV:8
84 : ite(79, 11, 83) : BV:8
85 : ite(78, 11, 84) : BV:8
86 : ite(77, 11, 85) : BV:8
87 : ite(76, 17, 86) : BV:8
88 : ite(75, 14, 87) : BV:8
89 : ite(74, 11, 88) : BV:8
90 : bvconcat(36, 54, 72, 89) : BV:32
91 : ite(3, 2, 90) : BV:32
92 : lambda(1, 91) : FUNCTION[BV:32 -> BV:32]
93 : sym_const(92) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 3200171710 { 0xbebebebe -1094795586 -1.49019598e254 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1079274789 { 0x40546d25 +1.65958082e1 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1973947344 { 0x75a80bd0 +1.31286048e108 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1973947347 { 0x75a80bd3 +1.31286084e108 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 214653652 { 0xccb5ad4 +1.58870935e154 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 214653655 { 0xccb5ad7 +1.58870971e154 } : BV:32
=counter_example.random_seed
2233806052
=counter_example_end
=global nodece 12 num_edges_traversed 3
=global nodece 12 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 13
=global nodece 13 nodece z3.ce675.num_edges_traversed4
=global nodece 13 nodece_path
=global nodece 13 nodece_path.graph_edge_composition
(epsilon)
=global nodece 13 nodece_cached_counterexample
=counter_example_begin z3.ce675 af96d6e6b24add633d3d4e3664183530
=input.spec-%var-x-1
1 : Lambda63 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3200171521 { 0xbebebe01 -1094795775 -1.49017345e254 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3200171522 { 0xbebebe02 -1094795774 -1.49017357e254 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda64 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3221208576 { 0xbfffbe00 -1073758720 -1.99798583e0 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 3221208577 { 0xbfffbe01 -1073758719 -1.99798595e0 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 214653654 { 0xccb5ad6 +1.58870959e154 } : BV:32
28 : eq(23, 27) : BOOL
29 : 255 { 0xff -1 } : BV:8
30 : 1973947344 { 0x75a80bd0 +1.31286048e108 } : BV:32
31 : eq(23, 30) : BOOL
32 : 2 { 0x2 } : BV:8
33 : 3221208579 { 0xbfffbe03 -1073758717 -1.99798619e0 } : BV:32
34 : eq(23, 33) : BOOL
35 : 3221208578 { 0xbfffbe02 -1073758718 -1.99798607e0 } : BV:32
36 : eq(23, 35) : BOOL
37 : eq(23, 22) : BOOL
38 : 214653655 { 0xccb5ad7 +1.58870971e154 } : BV:32
39 : eq(23, 38) : BOOL
40 : 191 { 0xbf -65 } : BV:8
41 : 214653652 { 0xccb5ad4 +1.58870935e154 } : BV:32
42 : eq(23, 41) : BOOL
43 : 190 { 0xbe -66 } : BV:8
44 : ite(42, 26, 43) : BV:8
45 : ite(39, 40, 44) : BV:8
46 : ite(37, 26, 45) : BV:8
47 : ite(36, 26, 46) : BV:8
48 : ite(34, 26, 47) : BV:8
49 : ite(31, 32, 48) : BV:8
50 : ite(28, 29, 49) : BV:8
51 : ite(25, 26, 50) : BV:8
52 : 2 { 0x2 +1.23e129 } : BV:32
53 : bvadd(52, 21, 22) : BV:32
54 : eq(53, 24) : BOOL
55 : eq(53, 27) : BOOL
56 : eq(53, 30) : BOOL
57 : eq(53, 33) : BOOL
58 : eq(53, 35) : BOOL
59 : eq(53, 22) : BOOL
60 : eq(53, 38) : BOOL
61 : eq(53, 41) : BOOL
62 : ite(61, 26, 43) : BV:8
63 : ite(60, 40, 62) : BV:8
64 : ite(59, 26, 63) : BV:8
65 : ite(58, 26, 64) : BV:8
66 : ite(57, 26, 65) : BV:8
67 : ite(56, 32, 66) : BV:8
68 : ite(55, 29, 67) : BV:8
69 : ite(54, 26, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 21, 22) : BV:32
72 : eq(71, 24) : BOOL
73 : eq(71, 27) : BOOL
74 : eq(71, 30) : BOOL
75 : eq(71, 33) : BOOL
76 : eq(71, 35) : BOOL
77 : eq(71, 22) : BOOL
78 : eq(71, 38) : BOOL
79 : eq(71, 41) : BOOL
80 : ite(79, 26, 43) : BV:8
81 : ite(78, 40, 80) : BV:8
82 : ite(77, 26, 81) : BV:8
83 : ite(76, 26, 82) : BV:8
84 : ite(75, 26, 83) : BV:8
85 : ite(74, 32, 84) : BV:8
86 : ite(73, 29, 85) : BV:8
87 : ite(72, 26, 86) : BV:8
88 : bvadd(21, 22) : BV:32
89 : eq(88, 24) : BOOL
90 : eq(88, 27) : BOOL
91 : eq(88, 30) : BOOL
92 : eq(88, 33) : BOOL
93 : eq(88, 35) : BOOL
94 : eq(88, 22) : BOOL
95 : eq(88, 38) : BOOL
96 : eq(88, 41) : BOOL
97 : ite(96, 26, 43) : BV:8
98 : ite(95, 40, 97) : BV:8
99 : ite(94, 26, 98) : BV:8
100 : ite(93, 26, 99) : BV:8
101 : ite(92, 26, 100) : BV:8
102 : ite(91, 32, 101) : BV:8
103 : ite(90, 29, 102) : BV:8
104 : ite(89, 26, 103) : BV:8
105 : bvconcat(51, 69, 87, 104) : BV:32
106 : ite(18, 2, 105) : BV:32
107 : lambda(17, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(16, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L3%6%bbentry
1 : Lambda63 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3200171521 { 0xbebebe01 -1094795775 -1.49017345e254 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3200171522 { 0xbebebe02 -1094795774 -1.49017357e254 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda64 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3221208576 { 0xbfffbe00 -1073758720 -1.99798583e0 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 3221208577 { 0xbfffbe01 -1073758719 -1.99798595e0 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 214653654 { 0xccb5ad6 +1.58870959e154 } : BV:32
28 : eq(23, 27) : BOOL
29 : 255 { 0xff -1 } : BV:8
30 : 1973947344 { 0x75a80bd0 +1.31286048e108 } : BV:32
31 : eq(23, 30) : BOOL
32 : 2 { 0x2 } : BV:8
33 : 3221208579 { 0xbfffbe03 -1073758717 -1.99798619e0 } : BV:32
34 : eq(23, 33) : BOOL
35 : 3221208578 { 0xbfffbe02 -1073758718 -1.99798607e0 } : BV:32
36 : eq(23, 35) : BOOL
37 : eq(23, 22) : BOOL
38 : 214653655 { 0xccb5ad7 +1.58870971e154 } : BV:32
39 : eq(23, 38) : BOOL
40 : 191 { 0xbf -65 } : BV:8
41 : 214653652 { 0xccb5ad4 +1.58870935e154 } : BV:32
42 : eq(23, 41) : BOOL
43 : 190 { 0xbe -66 } : BV:8
44 : ite(42, 26, 43) : BV:8
45 : ite(39, 40, 44) : BV:8
46 : ite(37, 26, 45) : BV:8
47 : ite(36, 26, 46) : BV:8
48 : ite(34, 26, 47) : BV:8
49 : ite(31, 32, 48) : BV:8
50 : ite(28, 29, 49) : BV:8
51 : ite(25, 26, 50) : BV:8
52 : 2 { 0x2 +1.23e129 } : BV:32
53 : bvadd(52, 21, 22) : BV:32
54 : eq(53, 24) : BOOL
55 : eq(53, 27) : BOOL
56 : eq(53, 30) : BOOL
57 : eq(53, 33) : BOOL
58 : eq(53, 35) : BOOL
59 : eq(53, 22) : BOOL
60 : eq(53, 38) : BOOL
61 : eq(53, 41) : BOOL
62 : ite(61, 26, 43) : BV:8
63 : ite(60, 40, 62) : BV:8
64 : ite(59, 26, 63) : BV:8
65 : ite(58, 26, 64) : BV:8
66 : ite(57, 26, 65) : BV:8
67 : ite(56, 32, 66) : BV:8
68 : ite(55, 29, 67) : BV:8
69 : ite(54, 26, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 21, 22) : BV:32
72 : eq(71, 24) : BOOL
73 : eq(71, 27) : BOOL
74 : eq(71, 30) : BOOL
75 : eq(71, 33) : BOOL
76 : eq(71, 35) : BOOL
77 : eq(71, 22) : BOOL
78 : eq(71, 38) : BOOL
79 : eq(71, 41) : BOOL
80 : ite(79, 26, 43) : BV:8
81 : ite(78, 40, 80) : BV:8
82 : ite(77, 26, 81) : BV:8
83 : ite(76, 26, 82) : BV:8
84 : ite(75, 26, 83) : BV:8
85 : ite(74, 32, 84) : BV:8
86 : ite(73, 29, 85) : BV:8
87 : ite(72, 26, 86) : BV:8
88 : bvadd(21, 22) : BV:32
89 : eq(88, 24) : BOOL
90 : eq(88, 27) : BOOL
91 : eq(88, 30) : BOOL
92 : eq(88, 33) : BOOL
93 : eq(88, 35) : BOOL
94 : eq(88, 22) : BOOL
95 : eq(88, 38) : BOOL
96 : eq(88, 41) : BOOL
97 : ite(96, 26, 43) : BV:8
98 : ite(95, 40, 97) : BV:8
99 : ite(94, 26, 98) : BV:8
100 : ite(93, 26, 99) : BV:8
101 : ite(92, 26, 100) : BV:8
102 : ite(91, 32, 101) : BV:8
103 : ite(90, 29, 102) : BV:8
104 : ite(89, 26, 103) : BV:8
105 : bvconcat(51, 69, 87, 104) : BV:32
106 : ite(18, 2, 105) : BV:32
107 : lambda(17, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(16, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%6%bbentry
1 : 2105376124 { 0x7d7d7d7c +1.98039197e123 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%x
1 : 3221208576 { 0xbfffbe00 -1073758720 -1.99798583e0 } : BV:32
=input.dst.llvm-%n
1 : 3200171522 { 0xbebebe02 -1094795774 -1.49017357e254 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 214653651 ] -> 190, [ 214653652; 214653652 ] -> 0, [ 214653653; 214653653 ] -> 190, [ 214653654; 214653654 ] -> 255, [ 214653655; 214653655 ] -> 191, [ 214653656; 1973947343 ] -> 190, [ 1973947344; 1973947344 ] -> 2, [ 1973947345; 3221208575 ] -> 190, [ 3221208576; 3221208579 ] -> 0, [ 3221208580; 4294967295 ] -> 190, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 214653651 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 214653652; 214653655 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 214653656; 1973947343 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1973947344; 1973947347 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1973947348; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 214653652 { 0xccb5ad4 +1.58870935e154 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1973947344 { 0x75a80bd0 +1.31286048e108 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%6%bbentry.0.1
1 : ([ 0; 3200171521 ] -> true, [ 3200171522; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%6%bbentry.1.1
1 : Lambda51 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3221208576 { 0xbfffbe00 -1073758720 -1.99798583e0 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 3221208577 { 0xbfffbe01 -1073758719 -1.99798595e0 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 214653654 { 0xccb5ad6 +1.58870959e154 } : BV:32
13 : eq(8, 12) : BOOL
14 : 255 { 0xff -1 } : BV:8
15 : 1973947344 { 0x75a80bd0 +1.31286048e108 } : BV:32
16 : eq(8, 15) : BOOL
17 : 2 { 0x2 } : BV:8
18 : 3221208579 { 0xbfffbe03 -1073758717 -1.99798619e0 } : BV:32
19 : eq(8, 18) : BOOL
20 : 3221208578 { 0xbfffbe02 -1073758718 -1.99798607e0 } : BV:32
21 : eq(8, 20) : BOOL
22 : eq(8, 7) : BOOL
23 : 214653655 { 0xccb5ad7 +1.58870971e154 } : BV:32
24 : eq(8, 23) : BOOL
25 : 191 { 0xbf -65 } : BV:8
26 : 214653652 { 0xccb5ad4 +1.58870935e154 } : BV:32
27 : eq(8, 26) : BOOL
28 : 190 { 0xbe -66 } : BV:8
29 : ite(27, 11, 28) : BV:8
30 : ite(24, 25, 29) : BV:8
31 : ite(22, 11, 30) : BV:8
32 : ite(21, 11, 31) : BV:8
33 : ite(19, 11, 32) : BV:8
34 : ite(16, 17, 33) : BV:8
35 : ite(13, 14, 34) : BV:8
36 : ite(10, 11, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 6, 7) : BV:32
39 : eq(38, 9) : BOOL
40 : eq(38, 12) : BOOL
41 : eq(38, 15) : BOOL
42 : eq(38, 18) : BOOL
43 : eq(38, 20) : BOOL
44 : eq(38, 7) : BOOL
45 : eq(38, 23) : BOOL
46 : eq(38, 26) : BOOL
47 : ite(46, 11, 28) : BV:8
48 : ite(45, 25, 47) : BV:8
49 : ite(44, 11, 48) : BV:8
50 : ite(43, 11, 49) : BV:8
51 : ite(42, 11, 50) : BV:8
52 : ite(41, 17, 51) : BV:8
53 : ite(40, 14, 52) : BV:8
54 : ite(39, 11, 53) : BV:8
55 : 1 { 0x1 +1.11e129 } : BV:32
56 : bvadd(55, 6, 7) : BV:32
57 : eq(56, 9) : BOOL
58 : eq(56, 12) : BOOL
59 : eq(56, 15) : BOOL
60 : eq(56, 18) : BOOL
61 : eq(56, 20) : BOOL
62 : eq(56, 7) : BOOL
63 : eq(56, 23) : BOOL
64 : eq(56, 26) : BOOL
65 : ite(64, 11, 28) : BV:8
66 : ite(63, 25, 65) : BV:8
67 : ite(62, 11, 66) : BV:8
68 : ite(61, 11, 67) : BV:8
69 : ite(60, 11, 68) : BV:8
70 : ite(59, 17, 69) : BV:8
71 : ite(58, 14, 70) : BV:8
72 : ite(57, 11, 71) : BV:8
73 : bvadd(6, 7) : BV:32
74 : eq(73, 9) : BOOL
75 : eq(73, 12) : BOOL
76 : eq(73, 15) : BOOL
77 : eq(73, 18) : BOOL
78 : eq(73, 20) : BOOL
79 : eq(73, 7) : BOOL
80 : eq(73, 23) : BOOL
81 : eq(73, 26) : BOOL
82 : ite(81, 11, 28) : BV:8
83 : ite(80, 25, 82) : BV:8
84 : ite(79, 11, 83) : BV:8
85 : ite(78, 11, 84) : BV:8
86 : ite(77, 11, 85) : BV:8
87 : ite(76, 17, 86) : BV:8
88 : ite(75, 14, 87) : BV:8
89 : ite(74, 11, 88) : BV:8
90 : bvconcat(36, 54, 72, 89) : BV:32
91 : ite(3, 2, 90) : BV:32
92 : ite(3, 2, 91) : BV:32
93 : lambda(1, 92) : FUNCTION[BV:32 -> BV:32]
94 : sym_const(93) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 3200171521 ] -> true, [ 3200171522; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : Lambda52 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3221208576 { 0xbfffbe00 -1073758720 -1.99798583e0 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 3221208577 { 0xbfffbe01 -1073758719 -1.99798595e0 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 214653654 { 0xccb5ad6 +1.58870959e154 } : BV:32
13 : eq(8, 12) : BOOL
14 : 255 { 0xff -1 } : BV:8
15 : 1973947344 { 0x75a80bd0 +1.31286048e108 } : BV:32
16 : eq(8, 15) : BOOL
17 : 2 { 0x2 } : BV:8
18 : 3221208579 { 0xbfffbe03 -1073758717 -1.99798619e0 } : BV:32
19 : eq(8, 18) : BOOL
20 : 3221208578 { 0xbfffbe02 -1073758718 -1.99798607e0 } : BV:32
21 : eq(8, 20) : BOOL
22 : eq(8, 7) : BOOL
23 : 214653655 { 0xccb5ad7 +1.58870971e154 } : BV:32
24 : eq(8, 23) : BOOL
25 : 191 { 0xbf -65 } : BV:8
26 : 214653652 { 0xccb5ad4 +1.58870935e154 } : BV:32
27 : eq(8, 26) : BOOL
28 : 190 { 0xbe -66 } : BV:8
29 : ite(27, 11, 28) : BV:8
30 : ite(24, 25, 29) : BV:8
31 : ite(22, 11, 30) : BV:8
32 : ite(21, 11, 31) : BV:8
33 : ite(19, 11, 32) : BV:8
34 : ite(16, 17, 33) : BV:8
35 : ite(13, 14, 34) : BV:8
36 : ite(10, 11, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 6, 7) : BV:32
39 : eq(38, 9) : BOOL
40 : eq(38, 12) : BOOL
41 : eq(38, 15) : BOOL
42 : eq(38, 18) : BOOL
43 : eq(38, 20) : BOOL
44 : eq(38, 7) : BOOL
45 : eq(38, 23) : BOOL
46 : eq(38, 26) : BOOL
47 : ite(46, 11, 28) : BV:8
48 : ite(45, 25, 47) : BV:8
49 : ite(44, 11, 48) : BV:8
50 : ite(43, 11, 49) : BV:8
51 : ite(42, 11, 50) : BV:8
52 : ite(41, 17, 51) : BV:8
53 : ite(40, 14, 52) : BV:8
54 : ite(39, 11, 53) : BV:8
55 : 1 { 0x1 +1.11e129 } : BV:32
56 : bvadd(55, 6, 7) : BV:32
57 : eq(56, 9) : BOOL
58 : eq(56, 12) : BOOL
59 : eq(56, 15) : BOOL
60 : eq(56, 18) : BOOL
61 : eq(56, 20) : BOOL
62 : eq(56, 7) : BOOL
63 : eq(56, 23) : BOOL
64 : eq(56, 26) : BOOL
65 : ite(64, 11, 28) : BV:8
66 : ite(63, 25, 65) : BV:8
67 : ite(62, 11, 66) : BV:8
68 : ite(61, 11, 67) : BV:8
69 : ite(60, 11, 68) : BV:8
70 : ite(59, 17, 69) : BV:8
71 : ite(58, 14, 70) : BV:8
72 : ite(57, 11, 71) : BV:8
73 : bvadd(6, 7) : BV:32
74 : eq(73, 9) : BOOL
75 : eq(73, 12) : BOOL
76 : eq(73, 15) : BOOL
77 : eq(73, 18) : BOOL
78 : eq(73, 20) : BOOL
79 : eq(73, 7) : BOOL
80 : eq(73, 23) : BOOL
81 : eq(73, 26) : BOOL
82 : ite(81, 11, 28) : BV:8
83 : ite(80, 25, 82) : BV:8
84 : ite(79, 11, 83) : BV:8
85 : ite(78, 11, 84) : BV:8
86 : ite(77, 11, 85) : BV:8
87 : ite(76, 17, 86) : BV:8
88 : ite(75, 14, 87) : BV:8
89 : ite(74, 11, 88) : BV:8
90 : bvconcat(36, 54, 72, 89) : BV:32
91 : ite(3, 2, 90) : BV:32
92 : lambda(1, 91) : FUNCTION[BV:32 -> BV:32]
93 : sym_const(92) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 2105376124 { 0x7d7d7d7c +1.98039197e123 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1079274789 { 0x40546d25 +1.65958082e1 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1973947344 { 0x75a80bd0 +1.31286048e108 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1973947347 { 0x75a80bd3 +1.31286084e108 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 214653652 { 0xccb5ad4 +1.58870935e154 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 214653655 { 0xccb5ad7 +1.58870971e154 } : BV:32
=counter_example.random_seed
2233806052
=counter_example_end
=global nodece 13 num_edges_traversed 4
=global nodece 13 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 14
=global nodece 14 nodece z3v487.ce629.num_edges_traversed2
=global nodece 14 nodece_path
=global nodece 14 nodece_path.graph_edge_composition
(epsilon)
=global nodece 14 nodece_cached_counterexample
=counter_example_begin z3v487.ce629 3fa17e1e18761bb4105ee9c55d4eaa
=input.spec-%var-x-1
1 : Lambda73 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4095 { 0xfff +1.48816e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4096 { 0x1000 +1.48828e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda74 : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 17) : BV:32
21 : bvadd(18, 20, 2) : BV:32
22 : 5 { 0x5 +1.59e129 } : BV:32
23 : eq(21, 22) : BOOL
24 : 16 { 0x10 } : BV:8
25 : 0 { 0x0 } : BV:8
26 : ite(23, 24, 25) : BV:8
27 : 2 { 0x2 +1.23e129 } : BV:32
28 : bvadd(27, 20, 2) : BV:32
29 : eq(28, 22) : BOOL
30 : ite(29, 24, 25) : BV:8
31 : 1 { 0x1 +1.11e129 } : BV:32
32 : bvadd(31, 20, 2) : BV:32
33 : eq(32, 22) : BOOL
34 : ite(33, 24, 25) : BV:8
35 : bvadd(20, 2) : BV:32
36 : eq(35, 22) : BOOL
37 : ite(36, 24, 25) : BV:8
38 : bvconcat(26, 30, 34, 37) : BV:32
39 : lambda(17, 38) : FUNCTION[BV:32 -> BV:32]
40 : map(16, 39) : MAP[BV:32 -> BV:32]
41 : sym_const(40) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L3%6%bbentry
1 : Lambda73 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4095 { 0xfff +1.48816e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4096 { 0x1000 +1.48828e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda74 : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 17) : BV:32
21 : bvadd(18, 20, 2) : BV:32
22 : 5 { 0x5 +1.59e129 } : BV:32
23 : eq(21, 22) : BOOL
24 : 16 { 0x10 } : BV:8
25 : 0 { 0x0 } : BV:8
26 : ite(23, 24, 25) : BV:8
27 : 2 { 0x2 +1.23e129 } : BV:32
28 : bvadd(27, 20, 2) : BV:32
29 : eq(28, 22) : BOOL
30 : ite(29, 24, 25) : BV:8
31 : 1 { 0x1 +1.11e129 } : BV:32
32 : bvadd(31, 20, 2) : BV:32
33 : eq(32, 22) : BOOL
34 : ite(33, 24, 25) : BV:8
35 : bvadd(20, 2) : BV:32
36 : eq(35, 22) : BOOL
37 : ite(36, 24, 25) : BV:8
38 : bvconcat(26, 30, 34, 37) : BV:32
39 : lambda(17, 38) : FUNCTION[BV:32 -> BV:32]
40 : map(16, 39) : MAP[BV:32 -> BV:32]
41 : sym_const(40) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 4096 { 0x1000 +1.48828e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4 ] -> 0, [ 5; 5 ] -> 16, [ 6; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 8; 31 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 32; 35 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 36; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 32 { 0x20 +1.381e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%6%bbentry.0.1
1 : ([ 0; 4095 ] -> true, [ 4096; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%6%bbentry.1.1
1 : Lambda56 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(3, 1) : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : bvadd(2, 4, 5) : BV:32
7 : 5 { 0x5 +1.59e129 } : BV:32
8 : eq(6, 7) : BOOL
9 : 16 { 0x10 } : BV:8
10 : 0 { 0x0 } : BV:8
11 : ite(8, 9, 10) : BV:8
12 : 2 { 0x2 +1.23e129 } : BV:32
13 : bvadd(12, 4, 5) : BV:32
14 : eq(13, 7) : BOOL
15 : ite(14, 9, 10) : BV:8
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : bvadd(16, 4, 5) : BV:32
18 : eq(17, 7) : BOOL
19 : ite(18, 9, 10) : BV:8
20 : bvadd(4, 5) : BV:32
21 : eq(20, 7) : BOOL
22 : ite(21, 9, 10) : BV:8
23 : bvconcat(11, 15, 19, 22) : BV:32
24 : lambda(1, 23) : FUNCTION[BV:32 -> BV:32]
25 : sym_const(24) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4095 ] -> true, [ 4096; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : Lambda57 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(3, 1) : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : bvadd(2, 4, 5) : BV:32
7 : 5 { 0x5 +1.59e129 } : BV:32
8 : eq(6, 7) : BOOL
9 : 16 { 0x10 } : BV:8
10 : 0 { 0x0 } : BV:8
11 : ite(8, 9, 10) : BV:8
12 : 2 { 0x2 +1.23e129 } : BV:32
13 : bvadd(12, 4, 5) : BV:32
14 : eq(13, 7) : BOOL
15 : ite(14, 9, 10) : BV:8
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : bvadd(16, 4, 5) : BV:32
18 : eq(17, 7) : BOOL
19 : ite(18, 9, 10) : BV:8
20 : bvadd(4, 5) : BV:32
21 : eq(20, 7) : BOOL
22 : ite(21, 9, 10) : BV:8
23 : bvconcat(11, 15, 19, 22) : BV:32
24 : lambda(1, 23) : FUNCTION[BV:32 -> BV:32]
25 : sym_const(24) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 578391065 { 0x22798c19 +1.94958794e197 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 32 { 0x20 +1.381e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 35 { 0x23 +1.417e129 } : BV:32
=counter_example.random_seed
404338641
=counter_example_end
=global nodece 14 num_edges_traversed 2
=global nodece 14 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 15
=global nodece 15 nodece z3v487.ce619.num_edges_traversed2
=global nodece 15 nodece_path
=global nodece 15 nodece_path.graph_edge_composition
(epsilon)
=global nodece 15 nodece_cached_counterexample
=counter_example_begin z3v487.ce619 8bb6288bc247c992b8d37520e71ab0
=input.spec-%var-x-1
1 : Lambda97 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda98 : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 17) : BV:32
21 : 2155872640 { 0x80800180 -2139094656 -1.4577e130 } : BV:32
22 : bvadd(18, 20, 21) : BV:32
23 : 13901829 { 0xd42005 +1.65722715e130 } : BV:32
24 : eq(22, 23) : BOOL
25 : 1 { 0x1 } : BV:8
26 : 128 { 0x80 -128 } : BV:8
27 : ite(24, 25, 26) : BV:8
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvadd(28, 20, 21) : BV:32
30 : eq(29, 23) : BOOL
31 : ite(30, 25, 26) : BV:8
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : bvadd(32, 20, 21) : BV:32
34 : eq(33, 23) : BOOL
35 : ite(34, 25, 26) : BV:8
36 : bvadd(20, 21) : BV:32
37 : eq(36, 23) : BOOL
38 : ite(37, 25, 26) : BV:8
39 : bvconcat(27, 31, 35, 38) : BV:32
40 : lambda(17, 39) : FUNCTION[BV:32 -> BV:32]
41 : map(16, 40) : MAP[BV:32 -> BV:32]
42 : sym_const(41) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L3%6%bbentry
1 : Lambda97 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda98 : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 17) : BV:32
21 : 2155872640 { 0x80800180 -2139094656 -1.4577e130 } : BV:32
22 : bvadd(18, 20, 21) : BV:32
23 : 13901829 { 0xd42005 +1.65722715e130 } : BV:32
24 : eq(22, 23) : BOOL
25 : 1 { 0x1 } : BV:8
26 : 128 { 0x80 -128 } : BV:8
27 : ite(24, 25, 26) : BV:8
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvadd(28, 20, 21) : BV:32
30 : eq(29, 23) : BOOL
31 : ite(30, 25, 26) : BV:8
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : bvadd(32, 20, 21) : BV:32
34 : eq(33, 23) : BOOL
35 : ite(34, 25, 26) : BV:8
36 : bvadd(20, 21) : BV:32
37 : eq(36, 23) : BOOL
38 : ite(37, 25, 26) : BV:8
39 : bvconcat(27, 31, 35, 38) : BV:32
40 : lambda(17, 39) : FUNCTION[BV:32 -> BV:32]
41 : map(16, 40) : MAP[BV:32 -> BV:32]
42 : sym_const(41) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%6%bbentry
1 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%x
1 : 2155872640 { 0x80800180 -2139094656 -1.4577e130 } : BV:32
=input.dst.llvm-%n
1 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 13901828 ] -> 128, [ 13901829; 13901829 ] -> 1, [ 13901830; 4294967295 ] -> 128, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 4491711 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4491712; 4491715 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 4491716; 13901827 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 13901828; 13901831 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 13901832; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 13901828 { 0xd42004 +1.65722703e130 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4491712 { 0x4489c0 +1.53545379e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%6%bbentry.0.1
1 : ([ 0; 2155905151 ] -> true, [ 2155905152; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%6%bbentry.1.1
1 : Lambda85 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(3, 1) : BV:32
5 : 2155872640 { 0x80800180 -2139094656 -1.4577e130 } : BV:32
6 : bvadd(2, 4, 5) : BV:32
7 : 13901829 { 0xd42005 +1.65722715e130 } : BV:32
8 : eq(6, 7) : BOOL
9 : 1 { 0x1 } : BV:8
10 : 128 { 0x80 -128 } : BV:8
11 : ite(8, 9, 10) : BV:8
12 : 2 { 0x2 +1.23e129 } : BV:32
13 : bvadd(12, 4, 5) : BV:32
14 : eq(13, 7) : BOOL
15 : ite(14, 9, 10) : BV:8
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : bvadd(16, 4, 5) : BV:32
18 : eq(17, 7) : BOOL
19 : ite(18, 9, 10) : BV:8
20 : bvadd(4, 5) : BV:32
21 : eq(20, 7) : BOOL
22 : ite(21, 9, 10) : BV:8
23 : bvconcat(11, 15, 19, 22) : BV:32
24 : lambda(1, 23) : FUNCTION[BV:32 -> BV:32]
25 : sym_const(24) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2155905151 ] -> true, [ 2155905152; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : Lambda86 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(3, 1) : BV:32
5 : 2155872640 { 0x80800180 -2139094656 -1.4577e130 } : BV:32
6 : bvadd(2, 4, 5) : BV:32
7 : 13901829 { 0xd42005 +1.65722715e130 } : BV:32
8 : eq(6, 7) : BOOL
9 : 1 { 0x1 } : BV:8
10 : 128 { 0x80 -128 } : BV:8
11 : ite(8, 9, 10) : BV:8
12 : 2 { 0x2 +1.23e129 } : BV:32
13 : bvadd(12, 4, 5) : BV:32
14 : eq(13, 7) : BOOL
15 : ite(14, 9, 10) : BV:8
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : bvadd(16, 4, 5) : BV:32
18 : eq(17, 7) : BOOL
19 : ite(18, 9, 10) : BV:8
20 : bvadd(4, 5) : BV:32
21 : eq(20, 7) : BOOL
22 : ite(21, 9, 10) : BV:8
23 : bvconcat(11, 15, 19, 22) : BV:32
24 : lambda(1, 23) : FUNCTION[BV:32 -> BV:32]
25 : sym_const(24) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 193259268 { 0xb84e704 +1.3830003e152 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4491712 { 0x4489c0 +1.53545379e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 4491715 { 0x4489c3 +1.53545415e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 13901828 { 0xd42004 +1.65722703e130 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 13901831 { 0xd42007 +1.65722739e130 } : BV:32
=counter_example.random_seed
1795444310
=counter_example_end
=global nodece 15 num_edges_traversed 2
=global nodece 15 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 16
=global nodece 16 nodece z3v487.ce700.num_edges_traversed3
=global nodece 16 nodece_path
=global nodece 16 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 16 nodece_cached_counterexample
=counter_example_begin z3v487.ce700 ca258ab97fd4e57683be19881b408158
=input.spec-%var-x-1
1 : Lambda97 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda98 : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 17) : BV:32
21 : 2155872640 { 0x80800180 -2139094656 -1.4577e130 } : BV:32
22 : bvadd(18, 20, 21) : BV:32
23 : 13901829 { 0xd42005 +1.65722715e130 } : BV:32
24 : eq(22, 23) : BOOL
25 : 1 { 0x1 } : BV:8
26 : 128 { 0x80 -128 } : BV:8
27 : ite(24, 25, 26) : BV:8
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvadd(28, 20, 21) : BV:32
30 : eq(29, 23) : BOOL
31 : ite(30, 25, 26) : BV:8
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : bvadd(32, 20, 21) : BV:32
34 : eq(33, 23) : BOOL
35 : ite(34, 25, 26) : BV:8
36 : bvadd(20, 21) : BV:32
37 : eq(36, 23) : BOOL
38 : ite(37, 25, 26) : BV:8
39 : bvconcat(27, 31, 35, 38) : BV:32
40 : lambda(17, 39) : FUNCTION[BV:32 -> BV:32]
41 : map(16, 40) : MAP[BV:32 -> BV:32]
42 : sym_const(41) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L3%6%bbentry
1 : Lambda97 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda98 : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 17) : BV:32
21 : 2155872640 { 0x80800180 -2139094656 -1.4577e130 } : BV:32
22 : bvadd(18, 20, 21) : BV:32
23 : 13901829 { 0xd42005 +1.65722715e130 } : BV:32
24 : eq(22, 23) : BOOL
25 : 1 { 0x1 } : BV:8
26 : 128 { 0x80 -128 } : BV:8
27 : ite(24, 25, 26) : BV:8
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvadd(28, 20, 21) : BV:32
30 : eq(29, 23) : BOOL
31 : ite(30, 25, 26) : BV:8
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : bvadd(32, 20, 21) : BV:32
34 : eq(33, 23) : BOOL
35 : ite(34, 25, 26) : BV:8
36 : bvadd(20, 21) : BV:32
37 : eq(36, 23) : BOOL
38 : ite(37, 25, 26) : BV:8
39 : bvconcat(27, 31, 35, 38) : BV:32
40 : lambda(17, 39) : FUNCTION[BV:32 -> BV:32]
41 : map(16, 40) : MAP[BV:32 -> BV:32]
42 : sym_const(41) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%6%bbentry
1 : 16843008 { 0x1010100 +1.784301e131 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%x
1 : 2155872640 { 0x80800180 -2139094656 -1.4577e130 } : BV:32
=input.dst.llvm-%n
1 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 13901828 ] -> 128, [ 13901829; 13901829 ] -> 1, [ 13901830; 4294967295 ] -> 128, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 4491711 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4491712; 4491715 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 4491716; 13901827 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 13901828; 13901831 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 13901832; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 13901828 { 0xd42004 +1.65722703e130 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4491712 { 0x4489c0 +1.53545379e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%6%bbentry.0.1
1 : ([ 0; 2155905151 ] -> true, [ 2155905152; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%6%bbentry.1.1
1 : Lambda85 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(3, 1) : BV:32
5 : 2155872640 { 0x80800180 -2139094656 -1.4577e130 } : BV:32
6 : bvadd(2, 4, 5) : BV:32
7 : 13901829 { 0xd42005 +1.65722715e130 } : BV:32
8 : eq(6, 7) : BOOL
9 : 1 { 0x1 } : BV:8
10 : 128 { 0x80 -128 } : BV:8
11 : ite(8, 9, 10) : BV:8
12 : 2 { 0x2 +1.23e129 } : BV:32
13 : bvadd(12, 4, 5) : BV:32
14 : eq(13, 7) : BOOL
15 : ite(14, 9, 10) : BV:8
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : bvadd(16, 4, 5) : BV:32
18 : eq(17, 7) : BOOL
19 : ite(18, 9, 10) : BV:8
20 : bvadd(4, 5) : BV:32
21 : eq(20, 7) : BOOL
22 : ite(21, 9, 10) : BV:8
23 : bvconcat(11, 15, 19, 22) : BV:32
24 : lambda(1, 23) : FUNCTION[BV:32 -> BV:32]
25 : sym_const(24) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2155905151 ] -> true, [ 2155905152; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : Lambda86 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(3, 1) : BV:32
5 : 2155872640 { 0x80800180 -2139094656 -1.4577e130 } : BV:32
6 : bvadd(2, 4, 5) : BV:32
7 : 13901829 { 0xd42005 +1.65722715e130 } : BV:32
8 : eq(6, 7) : BOOL
9 : 1 { 0x1 } : BV:8
10 : 128 { 0x80 -128 } : BV:8
11 : ite(8, 9, 10) : BV:8
12 : 2 { 0x2 +1.23e129 } : BV:32
13 : bvadd(12, 4, 5) : BV:32
14 : eq(13, 7) : BOOL
15 : ite(14, 9, 10) : BV:8
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : bvadd(16, 4, 5) : BV:32
18 : eq(17, 7) : BOOL
19 : ite(18, 9, 10) : BV:8
20 : bvadd(4, 5) : BV:32
21 : eq(20, 7) : BOOL
22 : ite(21, 9, 10) : BV:8
23 : bvconcat(11, 15, 19, 22) : BV:32
24 : lambda(1, 23) : FUNCTION[BV:32 -> BV:32]
25 : sym_const(24) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 16843008 { 0x1010100 +1.784301e131 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 193259268 { 0xb84e704 +1.3830003e152 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4491712 { 0x4489c0 +1.53545379e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 4491715 { 0x4489c3 +1.53545415e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 13901828 { 0xd42004 +1.65722703e130 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 13901831 { 0xd42007 +1.65722739e130 } : BV:32
=counter_example.random_seed
1795444310
=counter_example_end
=global nodece 16 num_edges_traversed 3
=global nodece 16 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 17
=global nodece 17 nodece z3v487.ce719.num_edges_traversed4
=global nodece 17 nodece_path
=global nodece 17 nodece_path.graph_edge_composition
(epsilon)
=global nodece 17 nodece_cached_counterexample
=counter_example_begin z3v487.ce719 2eeac652dd3350576eb5b92b8a3e3a7
=input.spec-%var-x-1
1 : Lambda97 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda98 : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 17) : BV:32
21 : 2155872640 { 0x80800180 -2139094656 -1.4577e130 } : BV:32
22 : bvadd(18, 20, 21) : BV:32
23 : 13901829 { 0xd42005 +1.65722715e130 } : BV:32
24 : eq(22, 23) : BOOL
25 : 1 { 0x1 } : BV:8
26 : 128 { 0x80 -128 } : BV:8
27 : ite(24, 25, 26) : BV:8
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvadd(28, 20, 21) : BV:32
30 : eq(29, 23) : BOOL
31 : ite(30, 25, 26) : BV:8
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : bvadd(32, 20, 21) : BV:32
34 : eq(33, 23) : BOOL
35 : ite(34, 25, 26) : BV:8
36 : bvadd(20, 21) : BV:32
37 : eq(36, 23) : BOOL
38 : ite(37, 25, 26) : BV:8
39 : bvconcat(27, 31, 35, 38) : BV:32
40 : lambda(17, 39) : FUNCTION[BV:32 -> BV:32]
41 : map(16, 40) : MAP[BV:32 -> BV:32]
42 : sym_const(41) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L3%6%bbentry
1 : Lambda97 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda98 : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 17) : BV:32
21 : 2155872640 { 0x80800180 -2139094656 -1.4577e130 } : BV:32
22 : bvadd(18, 20, 21) : BV:32
23 : 13901829 { 0xd42005 +1.65722715e130 } : BV:32
24 : eq(22, 23) : BOOL
25 : 1 { 0x1 } : BV:8
26 : 128 { 0x80 -128 } : BV:8
27 : ite(24, 25, 26) : BV:8
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvadd(28, 20, 21) : BV:32
30 : eq(29, 23) : BOOL
31 : ite(30, 25, 26) : BV:8
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : bvadd(32, 20, 21) : BV:32
34 : eq(33, 23) : BOOL
35 : ite(34, 25, 26) : BV:8
36 : bvadd(20, 21) : BV:32
37 : eq(36, 23) : BOOL
38 : ite(37, 25, 26) : BV:8
39 : bvconcat(27, 31, 35, 38) : BV:32
40 : lambda(17, 39) : FUNCTION[BV:32 -> BV:32]
41 : map(16, 40) : MAP[BV:32 -> BV:32]
42 : sym_const(41) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%6%bbentry
1 : 2172748160 { 0x81818180 -2122219136 -1.1176452e132 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%x
1 : 2155872640 { 0x80800180 -2139094656 -1.4577e130 } : BV:32
=input.dst.llvm-%n
1 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 13901828 ] -> 128, [ 13901829; 13901829 ] -> 1, [ 13901830; 4294967295 ] -> 128, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 4491711 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4491712; 4491715 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 4491716; 13901827 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 13901828; 13901831 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 13901832; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 13901828 { 0xd42004 +1.65722703e130 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4491712 { 0x4489c0 +1.53545379e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%6%bbentry.0.1
1 : ([ 0; 2155905151 ] -> true, [ 2155905152; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%6%bbentry.1.1
1 : Lambda85 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(3, 1) : BV:32
5 : 2155872640 { 0x80800180 -2139094656 -1.4577e130 } : BV:32
6 : bvadd(2, 4, 5) : BV:32
7 : 13901829 { 0xd42005 +1.65722715e130 } : BV:32
8 : eq(6, 7) : BOOL
9 : 1 { 0x1 } : BV:8
10 : 128 { 0x80 -128 } : BV:8
11 : ite(8, 9, 10) : BV:8
12 : 2 { 0x2 +1.23e129 } : BV:32
13 : bvadd(12, 4, 5) : BV:32
14 : eq(13, 7) : BOOL
15 : ite(14, 9, 10) : BV:8
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : bvadd(16, 4, 5) : BV:32
18 : eq(17, 7) : BOOL
19 : ite(18, 9, 10) : BV:8
20 : bvadd(4, 5) : BV:32
21 : eq(20, 7) : BOOL
22 : ite(21, 9, 10) : BV:8
23 : bvconcat(11, 15, 19, 22) : BV:32
24 : lambda(1, 23) : FUNCTION[BV:32 -> BV:32]
25 : sym_const(24) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2155905151 ] -> true, [ 2155905152; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : Lambda86 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(3, 1) : BV:32
5 : 2155872640 { 0x80800180 -2139094656 -1.4577e130 } : BV:32
6 : bvadd(2, 4, 5) : BV:32
7 : 13901829 { 0xd42005 +1.65722715e130 } : BV:32
8 : eq(6, 7) : BOOL
9 : 1 { 0x1 } : BV:8
10 : 128 { 0x80 -128 } : BV:8
11 : ite(8, 9, 10) : BV:8
12 : 2 { 0x2 +1.23e129 } : BV:32
13 : bvadd(12, 4, 5) : BV:32
14 : eq(13, 7) : BOOL
15 : ite(14, 9, 10) : BV:8
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : bvadd(16, 4, 5) : BV:32
18 : eq(17, 7) : BOOL
19 : ite(18, 9, 10) : BV:8
20 : bvadd(4, 5) : BV:32
21 : eq(20, 7) : BOOL
22 : ite(21, 9, 10) : BV:8
23 : bvconcat(11, 15, 19, 22) : BV:32
24 : lambda(1, 23) : FUNCTION[BV:32 -> BV:32]
25 : sym_const(24) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 2172748160 { 0x81818180 -2122219136 -1.1176452e132 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 193259268 { 0xb84e704 +1.3830003e152 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4491712 { 0x4489c0 +1.53545379e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 4491715 { 0x4489c3 +1.53545415e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 13901828 { 0xd42004 +1.65722703e130 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 13901831 { 0xd42007 +1.65722739e130 } : BV:32
=counter_example.random_seed
1795444310
=counter_example_end
=global nodece 17 num_edges_traversed 4
=global nodece 17 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 18
=global nodece 18 nodece z3.ce609.num_edges_traversed2
=global nodece 18 nodece_path
=global nodece 18 nodece_path.graph_edge_composition
(epsilon)
=global nodece 18 nodece_cached_counterexample
=counter_example_begin z3.ce609 dbea6de688f7656534b9aff0bbbf1765
=input.spec-%var-x-1
1 : Lambda133 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4025478912 { 0xefefef00 -269488384 -1.87448120e96 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4025478913 { 0xefefef01 -269488383 -1.87448132e96 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda134 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 4138331904 { 0xf6a9ef00 -156635392 -1.32760620e110 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 4138331905 { 0xf6a9ef01 -156635391 -1.32760632e110 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 4170696130 { 0xf897c5c2 -124271166 -1.18572258e114 } : BV:32
28 : eq(23, 27) : BOOL
29 : 169 { 0xa9 -87 } : BV:8
30 : 3095354568 { 0xb87f5cc8 -1199612728 -1.99501895e241 } : BV:32
31 : eq(23, 30) : BOOL
32 : 1 { 0x1 } : BV:8
33 : 4138331907 { 0xf6a9ef03 -156635389 -1.32760655e110 } : BV:32
34 : eq(23, 33) : BOOL
35 : 4138331906 { 0xf6a9ef02 -156635390 -1.32760643e110 } : BV:32
36 : eq(23, 35) : BOOL
37 : eq(23, 22) : BOOL
38 : 4170696131 { 0xf897c5c3 -124271165 -1.18572270e114 } : BV:32
39 : eq(23, 38) : BOOL
40 : 246 { 0xf6 -10 } : BV:8
41 : 4170696128 { 0xf897c5c0 -124271168 -1.18572235e114 } : BV:32
42 : eq(23, 41) : BOOL
43 : 239 { 0xef -17 } : BV:8
44 : ite(42, 26, 43) : BV:8
45 : ite(39, 40, 44) : BV:8
46 : ite(37, 26, 45) : BV:8
47 : ite(36, 26, 46) : BV:8
48 : ite(34, 26, 47) : BV:8
49 : ite(31, 32, 48) : BV:8
50 : ite(28, 29, 49) : BV:8
51 : ite(25, 26, 50) : BV:8
52 : 2 { 0x2 +1.23e129 } : BV:32
53 : bvadd(52, 21, 22) : BV:32
54 : eq(53, 24) : BOOL
55 : eq(53, 27) : BOOL
56 : eq(53, 30) : BOOL
57 : eq(53, 33) : BOOL
58 : eq(53, 35) : BOOL
59 : eq(53, 22) : BOOL
60 : eq(53, 38) : BOOL
61 : eq(53, 41) : BOOL
62 : ite(61, 26, 43) : BV:8
63 : ite(60, 40, 62) : BV:8
64 : ite(59, 26, 63) : BV:8
65 : ite(58, 26, 64) : BV:8
66 : ite(57, 26, 65) : BV:8
67 : ite(56, 32, 66) : BV:8
68 : ite(55, 29, 67) : BV:8
69 : ite(54, 26, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 21, 22) : BV:32
72 : eq(71, 24) : BOOL
73 : eq(71, 27) : BOOL
74 : eq(71, 30) : BOOL
75 : eq(71, 33) : BOOL
76 : eq(71, 35) : BOOL
77 : eq(71, 22) : BOOL
78 : eq(71, 38) : BOOL
79 : eq(71, 41) : BOOL
80 : ite(79, 26, 43) : BV:8
81 : ite(78, 40, 80) : BV:8
82 : ite(77, 26, 81) : BV:8
83 : ite(76, 26, 82) : BV:8
84 : ite(75, 26, 83) : BV:8
85 : ite(74, 32, 84) : BV:8
86 : ite(73, 29, 85) : BV:8
87 : ite(72, 26, 86) : BV:8
88 : bvadd(21, 22) : BV:32
89 : eq(88, 24) : BOOL
90 : eq(88, 27) : BOOL
91 : eq(88, 30) : BOOL
92 : eq(88, 33) : BOOL
93 : eq(88, 35) : BOOL
94 : eq(88, 22) : BOOL
95 : eq(88, 38) : BOOL
96 : eq(88, 41) : BOOL
97 : ite(96, 26, 43) : BV:8
98 : ite(95, 40, 97) : BV:8
99 : ite(94, 26, 98) : BV:8
100 : ite(93, 26, 99) : BV:8
101 : ite(92, 26, 100) : BV:8
102 : ite(91, 32, 101) : BV:8
103 : ite(90, 29, 102) : BV:8
104 : ite(89, 26, 103) : BV:8
105 : bvconcat(51, 69, 87, 104) : BV:32
106 : ite(18, 2, 105) : BV:32
107 : lambda(17, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(16, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L3%6%bbentry
1 : Lambda133 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4025478912 { 0xefefef00 -269488384 -1.87448120e96 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4025478913 { 0xefefef01 -269488383 -1.87448132e96 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda134 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 4138331904 { 0xf6a9ef00 -156635392 -1.32760620e110 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 4138331905 { 0xf6a9ef01 -156635391 -1.32760632e110 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 4170696130 { 0xf897c5c2 -124271166 -1.18572258e114 } : BV:32
28 : eq(23, 27) : BOOL
29 : 169 { 0xa9 -87 } : BV:8
30 : 3095354568 { 0xb87f5cc8 -1199612728 -1.99501895e241 } : BV:32
31 : eq(23, 30) : BOOL
32 : 1 { 0x1 } : BV:8
33 : 4138331907 { 0xf6a9ef03 -156635389 -1.32760655e110 } : BV:32
34 : eq(23, 33) : BOOL
35 : 4138331906 { 0xf6a9ef02 -156635390 -1.32760643e110 } : BV:32
36 : eq(23, 35) : BOOL
37 : eq(23, 22) : BOOL
38 : 4170696131 { 0xf897c5c3 -124271165 -1.18572270e114 } : BV:32
39 : eq(23, 38) : BOOL
40 : 246 { 0xf6 -10 } : BV:8
41 : 4170696128 { 0xf897c5c0 -124271168 -1.18572235e114 } : BV:32
42 : eq(23, 41) : BOOL
43 : 239 { 0xef -17 } : BV:8
44 : ite(42, 26, 43) : BV:8
45 : ite(39, 40, 44) : BV:8
46 : ite(37, 26, 45) : BV:8
47 : ite(36, 26, 46) : BV:8
48 : ite(34, 26, 47) : BV:8
49 : ite(31, 32, 48) : BV:8
50 : ite(28, 29, 49) : BV:8
51 : ite(25, 26, 50) : BV:8
52 : 2 { 0x2 +1.23e129 } : BV:32
53 : bvadd(52, 21, 22) : BV:32
54 : eq(53, 24) : BOOL
55 : eq(53, 27) : BOOL
56 : eq(53, 30) : BOOL
57 : eq(53, 33) : BOOL
58 : eq(53, 35) : BOOL
59 : eq(53, 22) : BOOL
60 : eq(53, 38) : BOOL
61 : eq(53, 41) : BOOL
62 : ite(61, 26, 43) : BV:8
63 : ite(60, 40, 62) : BV:8
64 : ite(59, 26, 63) : BV:8
65 : ite(58, 26, 64) : BV:8
66 : ite(57, 26, 65) : BV:8
67 : ite(56, 32, 66) : BV:8
68 : ite(55, 29, 67) : BV:8
69 : ite(54, 26, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 21, 22) : BV:32
72 : eq(71, 24) : BOOL
73 : eq(71, 27) : BOOL
74 : eq(71, 30) : BOOL
75 : eq(71, 33) : BOOL
76 : eq(71, 35) : BOOL
77 : eq(71, 22) : BOOL
78 : eq(71, 38) : BOOL
79 : eq(71, 41) : BOOL
80 : ite(79, 26, 43) : BV:8
81 : ite(78, 40, 80) : BV:8
82 : ite(77, 26, 81) : BV:8
83 : ite(76, 26, 82) : BV:8
84 : ite(75, 26, 83) : BV:8
85 : ite(74, 32, 84) : BV:8
86 : ite(73, 29, 85) : BV:8
87 : ite(72, 26, 86) : BV:8
88 : bvadd(21, 22) : BV:32
89 : eq(88, 24) : BOOL
90 : eq(88, 27) : BOOL
91 : eq(88, 30) : BOOL
92 : eq(88, 33) : BOOL
93 : eq(88, 35) : BOOL
94 : eq(88, 22) : BOOL
95 : eq(88, 38) : BOOL
96 : eq(88, 41) : BOOL
97 : ite(96, 26, 43) : BV:8
98 : ite(95, 40, 97) : BV:8
99 : ite(94, 26, 98) : BV:8
100 : ite(93, 26, 99) : BV:8
101 : ite(92, 26, 100) : BV:8
102 : ite(91, 32, 101) : BV:8
103 : ite(90, 29, 102) : BV:8
104 : ite(89, 26, 103) : BV:8
105 : bvconcat(51, 69, 87, 104) : BV:32
106 : ite(18, 2, 105) : BV:32
107 : lambda(17, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(16, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%x
1 : 4138331904 { 0xf6a9ef00 -156635392 -1.32760620e110 } : BV:32
=input.dst.llvm-%n
1 : 4025478913 { 0xefefef01 -269488383 -1.87448132e96 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3095354567 ] -> 239, [ 3095354568; 3095354568 ] -> 1, [ 3095354569; 4138331903 ] -> 239, [ 4138331904; 4138331907 ] -> 0, [ 4138331908; 4170696127 ] -> 239, [ 4170696128; 4170696128 ] -> 0, [ 4170696129; 4170696129 ] -> 239, [ 4170696130; 4170696130 ] -> 169, [ 4170696131; 4170696131 ] -> 246, [ 4170696132; 4294967295 ] -> 239, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3095354567 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3095354568; 3095354571 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3095354572; 4170696127 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4170696128; 4170696131 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4170696132; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4170696128 { 0xf897c5c0 -124271168 -1.18572235e114 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3095354568 { 0xb87f5cc8 -1199612728 -1.99501895e241 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%6%bbentry.0.1
1 : ([ 0; 4025478912 ] -> true, [ 4025478913; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%6%bbentry.1.1
1 : Lambda121 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 4138331904 { 0xf6a9ef00 -156635392 -1.32760620e110 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 4138331905 { 0xf6a9ef01 -156635391 -1.32760632e110 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 4170696130 { 0xf897c5c2 -124271166 -1.18572258e114 } : BV:32
13 : eq(8, 12) : BOOL
14 : 169 { 0xa9 -87 } : BV:8
15 : 3095354568 { 0xb87f5cc8 -1199612728 -1.99501895e241 } : BV:32
16 : eq(8, 15) : BOOL
17 : 1 { 0x1 } : BV:8
18 : 4138331907 { 0xf6a9ef03 -156635389 -1.32760655e110 } : BV:32
19 : eq(8, 18) : BOOL
20 : 4138331906 { 0xf6a9ef02 -156635390 -1.32760643e110 } : BV:32
21 : eq(8, 20) : BOOL
22 : eq(8, 7) : BOOL
23 : 4170696131 { 0xf897c5c3 -124271165 -1.18572270e114 } : BV:32
24 : eq(8, 23) : BOOL
25 : 246 { 0xf6 -10 } : BV:8
26 : 4170696128 { 0xf897c5c0 -124271168 -1.18572235e114 } : BV:32
27 : eq(8, 26) : BOOL
28 : 239 { 0xef -17 } : BV:8
29 : ite(27, 11, 28) : BV:8
30 : ite(24, 25, 29) : BV:8
31 : ite(22, 11, 30) : BV:8
32 : ite(21, 11, 31) : BV:8
33 : ite(19, 11, 32) : BV:8
34 : ite(16, 17, 33) : BV:8
35 : ite(13, 14, 34) : BV:8
36 : ite(10, 11, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 6, 7) : BV:32
39 : eq(38, 9) : BOOL
40 : eq(38, 12) : BOOL
41 : eq(38, 15) : BOOL
42 : eq(38, 18) : BOOL
43 : eq(38, 20) : BOOL
44 : eq(38, 7) : BOOL
45 : eq(38, 23) : BOOL
46 : eq(38, 26) : BOOL
47 : ite(46, 11, 28) : BV:8
48 : ite(45, 25, 47) : BV:8
49 : ite(44, 11, 48) : BV:8
50 : ite(43, 11, 49) : BV:8
51 : ite(42, 11, 50) : BV:8
52 : ite(41, 17, 51) : BV:8
53 : ite(40, 14, 52) : BV:8
54 : ite(39, 11, 53) : BV:8
55 : 1 { 0x1 +1.11e129 } : BV:32
56 : bvadd(55, 6, 7) : BV:32
57 : eq(56, 9) : BOOL
58 : eq(56, 12) : BOOL
59 : eq(56, 15) : BOOL
60 : eq(56, 18) : BOOL
61 : eq(56, 20) : BOOL
62 : eq(56, 7) : BOOL
63 : eq(56, 23) : BOOL
64 : eq(56, 26) : BOOL
65 : ite(64, 11, 28) : BV:8
66 : ite(63, 25, 65) : BV:8
67 : ite(62, 11, 66) : BV:8
68 : ite(61, 11, 67) : BV:8
69 : ite(60, 11, 68) : BV:8
70 : ite(59, 17, 69) : BV:8
71 : ite(58, 14, 70) : BV:8
72 : ite(57, 11, 71) : BV:8
73 : bvadd(6, 7) : BV:32
74 : eq(73, 9) : BOOL
75 : eq(73, 12) : BOOL
76 : eq(73, 15) : BOOL
77 : eq(73, 18) : BOOL
78 : eq(73, 20) : BOOL
79 : eq(73, 7) : BOOL
80 : eq(73, 23) : BOOL
81 : eq(73, 26) : BOOL
82 : ite(81, 11, 28) : BV:8
83 : ite(80, 25, 82) : BV:8
84 : ite(79, 11, 83) : BV:8
85 : ite(78, 11, 84) : BV:8
86 : ite(77, 11, 85) : BV:8
87 : ite(76, 17, 86) : BV:8
88 : ite(75, 14, 87) : BV:8
89 : ite(74, 11, 88) : BV:8
90 : bvconcat(36, 54, 72, 89) : BV:32
91 : ite(3, 2, 90) : BV:32
92 : ite(3, 2, 91) : BV:32
93 : lambda(1, 92) : FUNCTION[BV:32 -> BV:32]
94 : sym_const(93) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4025478912 ] -> true, [ 4025478913; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : Lambda122 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 4138331904 { 0xf6a9ef00 -156635392 -1.32760620e110 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 4138331905 { 0xf6a9ef01 -156635391 -1.32760632e110 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 4170696130 { 0xf897c5c2 -124271166 -1.18572258e114 } : BV:32
13 : eq(8, 12) : BOOL
14 : 169 { 0xa9 -87 } : BV:8
15 : 3095354568 { 0xb87f5cc8 -1199612728 -1.99501895e241 } : BV:32
16 : eq(8, 15) : BOOL
17 : 1 { 0x1 } : BV:8
18 : 4138331907 { 0xf6a9ef03 -156635389 -1.32760655e110 } : BV:32
19 : eq(8, 18) : BOOL
20 : 4138331906 { 0xf6a9ef02 -156635390 -1.32760643e110 } : BV:32
21 : eq(8, 20) : BOOL
22 : eq(8, 7) : BOOL
23 : 4170696131 { 0xf897c5c3 -124271165 -1.18572270e114 } : BV:32
24 : eq(8, 23) : BOOL
25 : 246 { 0xf6 -10 } : BV:8
26 : 4170696128 { 0xf897c5c0 -124271168 -1.18572235e114 } : BV:32
27 : eq(8, 26) : BOOL
28 : 239 { 0xef -17 } : BV:8
29 : ite(27, 11, 28) : BV:8
30 : ite(24, 25, 29) : BV:8
31 : ite(22, 11, 30) : BV:8
32 : ite(21, 11, 31) : BV:8
33 : ite(19, 11, 32) : BV:8
34 : ite(16, 17, 33) : BV:8
35 : ite(13, 14, 34) : BV:8
36 : ite(10, 11, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 6, 7) : BV:32
39 : eq(38, 9) : BOOL
40 : eq(38, 12) : BOOL
41 : eq(38, 15) : BOOL
42 : eq(38, 18) : BOOL
43 : eq(38, 20) : BOOL
44 : eq(38, 7) : BOOL
45 : eq(38, 23) : BOOL
46 : eq(38, 26) : BOOL
47 : ite(46, 11, 28) : BV:8
48 : ite(45, 25, 47) : BV:8
49 : ite(44, 11, 48) : BV:8
50 : ite(43, 11, 49) : BV:8
51 : ite(42, 11, 50) : BV:8
52 : ite(41, 17, 51) : BV:8
53 : ite(40, 14, 52) : BV:8
54 : ite(39, 11, 53) : BV:8
55 : 1 { 0x1 +1.11e129 } : BV:32
56 : bvadd(55, 6, 7) : BV:32
57 : eq(56, 9) : BOOL
58 : eq(56, 12) : BOOL
59 : eq(56, 15) : BOOL
60 : eq(56, 18) : BOOL
61 : eq(56, 20) : BOOL
62 : eq(56, 7) : BOOL
63 : eq(56, 23) : BOOL
64 : eq(56, 26) : BOOL
65 : ite(64, 11, 28) : BV:8
66 : ite(63, 25, 65) : BV:8
67 : ite(62, 11, 66) : BV:8
68 : ite(61, 11, 67) : BV:8
69 : ite(60, 11, 68) : BV:8
70 : ite(59, 17, 69) : BV:8
71 : ite(58, 14, 70) : BV:8
72 : ite(57, 11, 71) : BV:8
73 : bvadd(6, 7) : BV:32
74 : eq(73, 9) : BOOL
75 : eq(73, 12) : BOOL
76 : eq(73, 15) : BOOL
77 : eq(73, 18) : BOOL
78 : eq(73, 20) : BOOL
79 : eq(73, 7) : BOOL
80 : eq(73, 23) : BOOL
81 : eq(73, 26) : BOOL
82 : ite(81, 11, 28) : BV:8
83 : ite(80, 25, 82) : BV:8
84 : ite(79, 11, 83) : BV:8
85 : ite(78, 11, 84) : BV:8
86 : ite(77, 11, 85) : BV:8
87 : ite(76, 17, 86) : BV:8
88 : ite(75, 14, 87) : BV:8
89 : ite(74, 11, 88) : BV:8
90 : bvconcat(36, 54, 72, 89) : BV:32
91 : ite(3, 2, 90) : BV:32
92 : lambda(1, 91) : FUNCTION[BV:32 -> BV:32]
93 : sym_const(92) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1407581506 { 0x53e5fd42 +1.79679131e40 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3095354568 { 0xb87f5cc8 -1199612728 -1.99501895e241 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3095354571 { 0xb87f5ccb -1199612725 -1.99501931e241 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4170696128 { 0xf897c5c0 -124271168 -1.18572235e114 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 4170696131 { 0xf897c5c3 -124271165 -1.18572270e114 } : BV:32
=counter_example.random_seed
1027758982
=counter_example_end
=global nodece 18 num_edges_traversed 2
=global nodece 18 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 19
=global nodece 19 nodece z3.ce735.num_edges_traversed3
=global nodece 19 nodece_path
=global nodece 19 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 19 nodece_cached_counterexample
=counter_example_begin z3.ce735 e5ed3f2128e5e2dd4fdc34197781c7
=input.spec-%var-x-1
1 : Lambda133 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4025478912 { 0xefefef00 -269488384 -1.87448120e96 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4025478913 { 0xefefef01 -269488383 -1.87448132e96 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda134 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 4138331904 { 0xf6a9ef00 -156635392 -1.32760620e110 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 4138331905 { 0xf6a9ef01 -156635391 -1.32760632e110 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 4170696130 { 0xf897c5c2 -124271166 -1.18572258e114 } : BV:32
28 : eq(23, 27) : BOOL
29 : 169 { 0xa9 -87 } : BV:8
30 : 3095354568 { 0xb87f5cc8 -1199612728 -1.99501895e241 } : BV:32
31 : eq(23, 30) : BOOL
32 : 1 { 0x1 } : BV:8
33 : 4138331907 { 0xf6a9ef03 -156635389 -1.32760655e110 } : BV:32
34 : eq(23, 33) : BOOL
35 : 4138331906 { 0xf6a9ef02 -156635390 -1.32760643e110 } : BV:32
36 : eq(23, 35) : BOOL
37 : eq(23, 22) : BOOL
38 : 4170696131 { 0xf897c5c3 -124271165 -1.18572270e114 } : BV:32
39 : eq(23, 38) : BOOL
40 : 246 { 0xf6 -10 } : BV:8
41 : 4170696128 { 0xf897c5c0 -124271168 -1.18572235e114 } : BV:32
42 : eq(23, 41) : BOOL
43 : 239 { 0xef -17 } : BV:8
44 : ite(42, 26, 43) : BV:8
45 : ite(39, 40, 44) : BV:8
46 : ite(37, 26, 45) : BV:8
47 : ite(36, 26, 46) : BV:8
48 : ite(34, 26, 47) : BV:8
49 : ite(31, 32, 48) : BV:8
50 : ite(28, 29, 49) : BV:8
51 : ite(25, 26, 50) : BV:8
52 : 2 { 0x2 +1.23e129 } : BV:32
53 : bvadd(52, 21, 22) : BV:32
54 : eq(53, 24) : BOOL
55 : eq(53, 27) : BOOL
56 : eq(53, 30) : BOOL
57 : eq(53, 33) : BOOL
58 : eq(53, 35) : BOOL
59 : eq(53, 22) : BOOL
60 : eq(53, 38) : BOOL
61 : eq(53, 41) : BOOL
62 : ite(61, 26, 43) : BV:8
63 : ite(60, 40, 62) : BV:8
64 : ite(59, 26, 63) : BV:8
65 : ite(58, 26, 64) : BV:8
66 : ite(57, 26, 65) : BV:8
67 : ite(56, 32, 66) : BV:8
68 : ite(55, 29, 67) : BV:8
69 : ite(54, 26, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 21, 22) : BV:32
72 : eq(71, 24) : BOOL
73 : eq(71, 27) : BOOL
74 : eq(71, 30) : BOOL
75 : eq(71, 33) : BOOL
76 : eq(71, 35) : BOOL
77 : eq(71, 22) : BOOL
78 : eq(71, 38) : BOOL
79 : eq(71, 41) : BOOL
80 : ite(79, 26, 43) : BV:8
81 : ite(78, 40, 80) : BV:8
82 : ite(77, 26, 81) : BV:8
83 : ite(76, 26, 82) : BV:8
84 : ite(75, 26, 83) : BV:8
85 : ite(74, 32, 84) : BV:8
86 : ite(73, 29, 85) : BV:8
87 : ite(72, 26, 86) : BV:8
88 : bvadd(21, 22) : BV:32
89 : eq(88, 24) : BOOL
90 : eq(88, 27) : BOOL
91 : eq(88, 30) : BOOL
92 : eq(88, 33) : BOOL
93 : eq(88, 35) : BOOL
94 : eq(88, 22) : BOOL
95 : eq(88, 38) : BOOL
96 : eq(88, 41) : BOOL
97 : ite(96, 26, 43) : BV:8
98 : ite(95, 40, 97) : BV:8
99 : ite(94, 26, 98) : BV:8
100 : ite(93, 26, 99) : BV:8
101 : ite(92, 26, 100) : BV:8
102 : ite(91, 32, 101) : BV:8
103 : ite(90, 29, 102) : BV:8
104 : ite(89, 26, 103) : BV:8
105 : bvconcat(51, 69, 87, 104) : BV:32
106 : ite(18, 2, 105) : BV:32
107 : lambda(17, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(16, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L3%6%bbentry
1 : Lambda133 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4025478912 { 0xefefef00 -269488384 -1.87448120e96 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4025478913 { 0xefefef01 -269488383 -1.87448132e96 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda134 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 4138331904 { 0xf6a9ef00 -156635392 -1.32760620e110 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 4138331905 { 0xf6a9ef01 -156635391 -1.32760632e110 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 4170696130 { 0xf897c5c2 -124271166 -1.18572258e114 } : BV:32
28 : eq(23, 27) : BOOL
29 : 169 { 0xa9 -87 } : BV:8
30 : 3095354568 { 0xb87f5cc8 -1199612728 -1.99501895e241 } : BV:32
31 : eq(23, 30) : BOOL
32 : 1 { 0x1 } : BV:8
33 : 4138331907 { 0xf6a9ef03 -156635389 -1.32760655e110 } : BV:32
34 : eq(23, 33) : BOOL
35 : 4138331906 { 0xf6a9ef02 -156635390 -1.32760643e110 } : BV:32
36 : eq(23, 35) : BOOL
37 : eq(23, 22) : BOOL
38 : 4170696131 { 0xf897c5c3 -124271165 -1.18572270e114 } : BV:32
39 : eq(23, 38) : BOOL
40 : 246 { 0xf6 -10 } : BV:8
41 : 4170696128 { 0xf897c5c0 -124271168 -1.18572235e114 } : BV:32
42 : eq(23, 41) : BOOL
43 : 239 { 0xef -17 } : BV:8
44 : ite(42, 26, 43) : BV:8
45 : ite(39, 40, 44) : BV:8
46 : ite(37, 26, 45) : BV:8
47 : ite(36, 26, 46) : BV:8
48 : ite(34, 26, 47) : BV:8
49 : ite(31, 32, 48) : BV:8
50 : ite(28, 29, 49) : BV:8
51 : ite(25, 26, 50) : BV:8
52 : 2 { 0x2 +1.23e129 } : BV:32
53 : bvadd(52, 21, 22) : BV:32
54 : eq(53, 24) : BOOL
55 : eq(53, 27) : BOOL
56 : eq(53, 30) : BOOL
57 : eq(53, 33) : BOOL
58 : eq(53, 35) : BOOL
59 : eq(53, 22) : BOOL
60 : eq(53, 38) : BOOL
61 : eq(53, 41) : BOOL
62 : ite(61, 26, 43) : BV:8
63 : ite(60, 40, 62) : BV:8
64 : ite(59, 26, 63) : BV:8
65 : ite(58, 26, 64) : BV:8
66 : ite(57, 26, 65) : BV:8
67 : ite(56, 32, 66) : BV:8
68 : ite(55, 29, 67) : BV:8
69 : ite(54, 26, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 21, 22) : BV:32
72 : eq(71, 24) : BOOL
73 : eq(71, 27) : BOOL
74 : eq(71, 30) : BOOL
75 : eq(71, 33) : BOOL
76 : eq(71, 35) : BOOL
77 : eq(71, 22) : BOOL
78 : eq(71, 38) : BOOL
79 : eq(71, 41) : BOOL
80 : ite(79, 26, 43) : BV:8
81 : ite(78, 40, 80) : BV:8
82 : ite(77, 26, 81) : BV:8
83 : ite(76, 26, 82) : BV:8
84 : ite(75, 26, 83) : BV:8
85 : ite(74, 32, 84) : BV:8
86 : ite(73, 29, 85) : BV:8
87 : ite(72, 26, 86) : BV:8
88 : bvadd(21, 22) : BV:32
89 : eq(88, 24) : BOOL
90 : eq(88, 27) : BOOL
91 : eq(88, 30) : BOOL
92 : eq(88, 33) : BOOL
93 : eq(88, 35) : BOOL
94 : eq(88, 22) : BOOL
95 : eq(88, 38) : BOOL
96 : eq(88, 41) : BOOL
97 : ite(96, 26, 43) : BV:8
98 : ite(95, 40, 97) : BV:8
99 : ite(94, 26, 98) : BV:8
100 : ite(93, 26, 99) : BV:8
101 : ite(92, 26, 100) : BV:8
102 : ite(91, 32, 101) : BV:8
103 : ite(90, 29, 102) : BV:8
104 : ite(89, 26, 103) : BV:8
105 : bvconcat(51, 69, 87, 104) : BV:32
106 : ite(18, 2, 105) : BV:32
107 : lambda(17, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(16, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%6%bbentry
1 : 4025479151 { 0xefefefef -269488145 -1.87450969e96 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%x
1 : 4138331904 { 0xf6a9ef00 -156635392 -1.32760620e110 } : BV:32
=input.dst.llvm-%n
1 : 4025478913 { 0xefefef01 -269488383 -1.87448132e96 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3095354567 ] -> 239, [ 3095354568; 3095354568 ] -> 1, [ 3095354569; 4138331903 ] -> 239, [ 4138331904; 4138331907 ] -> 0, [ 4138331908; 4170696127 ] -> 239, [ 4170696128; 4170696128 ] -> 0, [ 4170696129; 4170696129 ] -> 239, [ 4170696130; 4170696130 ] -> 169, [ 4170696131; 4170696131 ] -> 246, [ 4170696132; 4294967295 ] -> 239, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3095354567 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3095354568; 3095354571 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3095354572; 4170696127 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4170696128; 4170696131 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4170696132; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4170696128 { 0xf897c5c0 -124271168 -1.18572235e114 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3095354568 { 0xb87f5cc8 -1199612728 -1.99501895e241 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%6%bbentry.0.1
1 : ([ 0; 4025478912 ] -> true, [ 4025478913; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%6%bbentry.1.1
1 : Lambda121 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 4138331904 { 0xf6a9ef00 -156635392 -1.32760620e110 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 4138331905 { 0xf6a9ef01 -156635391 -1.32760632e110 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 4170696130 { 0xf897c5c2 -124271166 -1.18572258e114 } : BV:32
13 : eq(8, 12) : BOOL
14 : 169 { 0xa9 -87 } : BV:8
15 : 3095354568 { 0xb87f5cc8 -1199612728 -1.99501895e241 } : BV:32
16 : eq(8, 15) : BOOL
17 : 1 { 0x1 } : BV:8
18 : 4138331907 { 0xf6a9ef03 -156635389 -1.32760655e110 } : BV:32
19 : eq(8, 18) : BOOL
20 : 4138331906 { 0xf6a9ef02 -156635390 -1.32760643e110 } : BV:32
21 : eq(8, 20) : BOOL
22 : eq(8, 7) : BOOL
23 : 4170696131 { 0xf897c5c3 -124271165 -1.18572270e114 } : BV:32
24 : eq(8, 23) : BOOL
25 : 246 { 0xf6 -10 } : BV:8
26 : 4170696128 { 0xf897c5c0 -124271168 -1.18572235e114 } : BV:32
27 : eq(8, 26) : BOOL
28 : 239 { 0xef -17 } : BV:8
29 : ite(27, 11, 28) : BV:8
30 : ite(24, 25, 29) : BV:8
31 : ite(22, 11, 30) : BV:8
32 : ite(21, 11, 31) : BV:8
33 : ite(19, 11, 32) : BV:8
34 : ite(16, 17, 33) : BV:8
35 : ite(13, 14, 34) : BV:8
36 : ite(10, 11, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 6, 7) : BV:32
39 : eq(38, 9) : BOOL
40 : eq(38, 12) : BOOL
41 : eq(38, 15) : BOOL
42 : eq(38, 18) : BOOL
43 : eq(38, 20) : BOOL
44 : eq(38, 7) : BOOL
45 : eq(38, 23) : BOOL
46 : eq(38, 26) : BOOL
47 : ite(46, 11, 28) : BV:8
48 : ite(45, 25, 47) : BV:8
49 : ite(44, 11, 48) : BV:8
50 : ite(43, 11, 49) : BV:8
51 : ite(42, 11, 50) : BV:8
52 : ite(41, 17, 51) : BV:8
53 : ite(40, 14, 52) : BV:8
54 : ite(39, 11, 53) : BV:8
55 : 1 { 0x1 +1.11e129 } : BV:32
56 : bvadd(55, 6, 7) : BV:32
57 : eq(56, 9) : BOOL
58 : eq(56, 12) : BOOL
59 : eq(56, 15) : BOOL
60 : eq(56, 18) : BOOL
61 : eq(56, 20) : BOOL
62 : eq(56, 7) : BOOL
63 : eq(56, 23) : BOOL
64 : eq(56, 26) : BOOL
65 : ite(64, 11, 28) : BV:8
66 : ite(63, 25, 65) : BV:8
67 : ite(62, 11, 66) : BV:8
68 : ite(61, 11, 67) : BV:8
69 : ite(60, 11, 68) : BV:8
70 : ite(59, 17, 69) : BV:8
71 : ite(58, 14, 70) : BV:8
72 : ite(57, 11, 71) : BV:8
73 : bvadd(6, 7) : BV:32
74 : eq(73, 9) : BOOL
75 : eq(73, 12) : BOOL
76 : eq(73, 15) : BOOL
77 : eq(73, 18) : BOOL
78 : eq(73, 20) : BOOL
79 : eq(73, 7) : BOOL
80 : eq(73, 23) : BOOL
81 : eq(73, 26) : BOOL
82 : ite(81, 11, 28) : BV:8
83 : ite(80, 25, 82) : BV:8
84 : ite(79, 11, 83) : BV:8
85 : ite(78, 11, 84) : BV:8
86 : ite(77, 11, 85) : BV:8
87 : ite(76, 17, 86) : BV:8
88 : ite(75, 14, 87) : BV:8
89 : ite(74, 11, 88) : BV:8
90 : bvconcat(36, 54, 72, 89) : BV:32
91 : ite(3, 2, 90) : BV:32
92 : ite(3, 2, 91) : BV:32
93 : lambda(1, 92) : FUNCTION[BV:32 -> BV:32]
94 : sym_const(93) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4025478912 ] -> true, [ 4025478913; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : Lambda122 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 4138331904 { 0xf6a9ef00 -156635392 -1.32760620e110 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 4138331905 { 0xf6a9ef01 -156635391 -1.32760632e110 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 4170696130 { 0xf897c5c2 -124271166 -1.18572258e114 } : BV:32
13 : eq(8, 12) : BOOL
14 : 169 { 0xa9 -87 } : BV:8
15 : 3095354568 { 0xb87f5cc8 -1199612728 -1.99501895e241 } : BV:32
16 : eq(8, 15) : BOOL
17 : 1 { 0x1 } : BV:8
18 : 4138331907 { 0xf6a9ef03 -156635389 -1.32760655e110 } : BV:32
19 : eq(8, 18) : BOOL
20 : 4138331906 { 0xf6a9ef02 -156635390 -1.32760643e110 } : BV:32
21 : eq(8, 20) : BOOL
22 : eq(8, 7) : BOOL
23 : 4170696131 { 0xf897c5c3 -124271165 -1.18572270e114 } : BV:32
24 : eq(8, 23) : BOOL
25 : 246 { 0xf6 -10 } : BV:8
26 : 4170696128 { 0xf897c5c0 -124271168 -1.18572235e114 } : BV:32
27 : eq(8, 26) : BOOL
28 : 239 { 0xef -17 } : BV:8
29 : ite(27, 11, 28) : BV:8
30 : ite(24, 25, 29) : BV:8
31 : ite(22, 11, 30) : BV:8
32 : ite(21, 11, 31) : BV:8
33 : ite(19, 11, 32) : BV:8
34 : ite(16, 17, 33) : BV:8
35 : ite(13, 14, 34) : BV:8
36 : ite(10, 11, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 6, 7) : BV:32
39 : eq(38, 9) : BOOL
40 : eq(38, 12) : BOOL
41 : eq(38, 15) : BOOL
42 : eq(38, 18) : BOOL
43 : eq(38, 20) : BOOL
44 : eq(38, 7) : BOOL
45 : eq(38, 23) : BOOL
46 : eq(38, 26) : BOOL
47 : ite(46, 11, 28) : BV:8
48 : ite(45, 25, 47) : BV:8
49 : ite(44, 11, 48) : BV:8
50 : ite(43, 11, 49) : BV:8
51 : ite(42, 11, 50) : BV:8
52 : ite(41, 17, 51) : BV:8
53 : ite(40, 14, 52) : BV:8
54 : ite(39, 11, 53) : BV:8
55 : 1 { 0x1 +1.11e129 } : BV:32
56 : bvadd(55, 6, 7) : BV:32
57 : eq(56, 9) : BOOL
58 : eq(56, 12) : BOOL
59 : eq(56, 15) : BOOL
60 : eq(56, 18) : BOOL
61 : eq(56, 20) : BOOL
62 : eq(56, 7) : BOOL
63 : eq(56, 23) : BOOL
64 : eq(56, 26) : BOOL
65 : ite(64, 11, 28) : BV:8
66 : ite(63, 25, 65) : BV:8
67 : ite(62, 11, 66) : BV:8
68 : ite(61, 11, 67) : BV:8
69 : ite(60, 11, 68) : BV:8
70 : ite(59, 17, 69) : BV:8
71 : ite(58, 14, 70) : BV:8
72 : ite(57, 11, 71) : BV:8
73 : bvadd(6, 7) : BV:32
74 : eq(73, 9) : BOOL
75 : eq(73, 12) : BOOL
76 : eq(73, 15) : BOOL
77 : eq(73, 18) : BOOL
78 : eq(73, 20) : BOOL
79 : eq(73, 7) : BOOL
80 : eq(73, 23) : BOOL
81 : eq(73, 26) : BOOL
82 : ite(81, 11, 28) : BV:8
83 : ite(80, 25, 82) : BV:8
84 : ite(79, 11, 83) : BV:8
85 : ite(78, 11, 84) : BV:8
86 : ite(77, 11, 85) : BV:8
87 : ite(76, 17, 86) : BV:8
88 : ite(75, 14, 87) : BV:8
89 : ite(74, 11, 88) : BV:8
90 : bvconcat(36, 54, 72, 89) : BV:32
91 : ite(3, 2, 90) : BV:32
92 : lambda(1, 91) : FUNCTION[BV:32 -> BV:32]
93 : sym_const(92) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 4025479151 { 0xefefefef -269488145 -1.87450969e96 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1407581506 { 0x53e5fd42 +1.79679131e40 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3095354568 { 0xb87f5cc8 -1199612728 -1.99501895e241 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3095354571 { 0xb87f5ccb -1199612725 -1.99501931e241 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4170696128 { 0xf897c5c0 -124271168 -1.18572235e114 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 4170696131 { 0xf897c5c3 -124271165 -1.18572270e114 } : BV:32
=counter_example.random_seed
1027758982
=counter_example_end
=global nodece 19 num_edges_traversed 3
=global nodece 19 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 20
=global nodece 20 nodece z3.ce754.num_edges_traversed4
=global nodece 20 nodece_path
=global nodece 20 nodece_path.graph_edge_composition
(epsilon)
=global nodece 20 nodece_cached_counterexample
=counter_example_begin z3.ce754 91c959c67a7547c241e4e635fa73db
=input.spec-%var-x-1
1 : Lambda133 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4025478912 { 0xefefef00 -269488384 -1.87448120e96 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4025478913 { 0xefefef01 -269488383 -1.87448132e96 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda134 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 4138331904 { 0xf6a9ef00 -156635392 -1.32760620e110 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 4138331905 { 0xf6a9ef01 -156635391 -1.32760632e110 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 4170696130 { 0xf897c5c2 -124271166 -1.18572258e114 } : BV:32
28 : eq(23, 27) : BOOL
29 : 169 { 0xa9 -87 } : BV:8
30 : 3095354568 { 0xb87f5cc8 -1199612728 -1.99501895e241 } : BV:32
31 : eq(23, 30) : BOOL
32 : 1 { 0x1 } : BV:8
33 : 4138331907 { 0xf6a9ef03 -156635389 -1.32760655e110 } : BV:32
34 : eq(23, 33) : BOOL
35 : 4138331906 { 0xf6a9ef02 -156635390 -1.32760643e110 } : BV:32
36 : eq(23, 35) : BOOL
37 : eq(23, 22) : BOOL
38 : 4170696131 { 0xf897c5c3 -124271165 -1.18572270e114 } : BV:32
39 : eq(23, 38) : BOOL
40 : 246 { 0xf6 -10 } : BV:8
41 : 4170696128 { 0xf897c5c0 -124271168 -1.18572235e114 } : BV:32
42 : eq(23, 41) : BOOL
43 : 239 { 0xef -17 } : BV:8
44 : ite(42, 26, 43) : BV:8
45 : ite(39, 40, 44) : BV:8
46 : ite(37, 26, 45) : BV:8
47 : ite(36, 26, 46) : BV:8
48 : ite(34, 26, 47) : BV:8
49 : ite(31, 32, 48) : BV:8
50 : ite(28, 29, 49) : BV:8
51 : ite(25, 26, 50) : BV:8
52 : 2 { 0x2 +1.23e129 } : BV:32
53 : bvadd(52, 21, 22) : BV:32
54 : eq(53, 24) : BOOL
55 : eq(53, 27) : BOOL
56 : eq(53, 30) : BOOL
57 : eq(53, 33) : BOOL
58 : eq(53, 35) : BOOL
59 : eq(53, 22) : BOOL
60 : eq(53, 38) : BOOL
61 : eq(53, 41) : BOOL
62 : ite(61, 26, 43) : BV:8
63 : ite(60, 40, 62) : BV:8
64 : ite(59, 26, 63) : BV:8
65 : ite(58, 26, 64) : BV:8
66 : ite(57, 26, 65) : BV:8
67 : ite(56, 32, 66) : BV:8
68 : ite(55, 29, 67) : BV:8
69 : ite(54, 26, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 21, 22) : BV:32
72 : eq(71, 24) : BOOL
73 : eq(71, 27) : BOOL
74 : eq(71, 30) : BOOL
75 : eq(71, 33) : BOOL
76 : eq(71, 35) : BOOL
77 : eq(71, 22) : BOOL
78 : eq(71, 38) : BOOL
79 : eq(71, 41) : BOOL
80 : ite(79, 26, 43) : BV:8
81 : ite(78, 40, 80) : BV:8
82 : ite(77, 26, 81) : BV:8
83 : ite(76, 26, 82) : BV:8
84 : ite(75, 26, 83) : BV:8
85 : ite(74, 32, 84) : BV:8
86 : ite(73, 29, 85) : BV:8
87 : ite(72, 26, 86) : BV:8
88 : bvadd(21, 22) : BV:32
89 : eq(88, 24) : BOOL
90 : eq(88, 27) : BOOL
91 : eq(88, 30) : BOOL
92 : eq(88, 33) : BOOL
93 : eq(88, 35) : BOOL
94 : eq(88, 22) : BOOL
95 : eq(88, 38) : BOOL
96 : eq(88, 41) : BOOL
97 : ite(96, 26, 43) : BV:8
98 : ite(95, 40, 97) : BV:8
99 : ite(94, 26, 98) : BV:8
100 : ite(93, 26, 99) : BV:8
101 : ite(92, 26, 100) : BV:8
102 : ite(91, 32, 101) : BV:8
103 : ite(90, 29, 102) : BV:8
104 : ite(89, 26, 103) : BV:8
105 : bvconcat(51, 69, 87, 104) : BV:32
106 : ite(18, 2, 105) : BV:32
107 : lambda(17, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(16, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L3%6%bbentry
1 : Lambda133 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4025478912 { 0xefefef00 -269488384 -1.87448120e96 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4025478913 { 0xefefef01 -269488383 -1.87448132e96 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda134 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 4138331904 { 0xf6a9ef00 -156635392 -1.32760620e110 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 4138331905 { 0xf6a9ef01 -156635391 -1.32760632e110 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 4170696130 { 0xf897c5c2 -124271166 -1.18572258e114 } : BV:32
28 : eq(23, 27) : BOOL
29 : 169 { 0xa9 -87 } : BV:8
30 : 3095354568 { 0xb87f5cc8 -1199612728 -1.99501895e241 } : BV:32
31 : eq(23, 30) : BOOL
32 : 1 { 0x1 } : BV:8
33 : 4138331907 { 0xf6a9ef03 -156635389 -1.32760655e110 } : BV:32
34 : eq(23, 33) : BOOL
35 : 4138331906 { 0xf6a9ef02 -156635390 -1.32760643e110 } : BV:32
36 : eq(23, 35) : BOOL
37 : eq(23, 22) : BOOL
38 : 4170696131 { 0xf897c5c3 -124271165 -1.18572270e114 } : BV:32
39 : eq(23, 38) : BOOL
40 : 246 { 0xf6 -10 } : BV:8
41 : 4170696128 { 0xf897c5c0 -124271168 -1.18572235e114 } : BV:32
42 : eq(23, 41) : BOOL
43 : 239 { 0xef -17 } : BV:8
44 : ite(42, 26, 43) : BV:8
45 : ite(39, 40, 44) : BV:8
46 : ite(37, 26, 45) : BV:8
47 : ite(36, 26, 46) : BV:8
48 : ite(34, 26, 47) : BV:8
49 : ite(31, 32, 48) : BV:8
50 : ite(28, 29, 49) : BV:8
51 : ite(25, 26, 50) : BV:8
52 : 2 { 0x2 +1.23e129 } : BV:32
53 : bvadd(52, 21, 22) : BV:32
54 : eq(53, 24) : BOOL
55 : eq(53, 27) : BOOL
56 : eq(53, 30) : BOOL
57 : eq(53, 33) : BOOL
58 : eq(53, 35) : BOOL
59 : eq(53, 22) : BOOL
60 : eq(53, 38) : BOOL
61 : eq(53, 41) : BOOL
62 : ite(61, 26, 43) : BV:8
63 : ite(60, 40, 62) : BV:8
64 : ite(59, 26, 63) : BV:8
65 : ite(58, 26, 64) : BV:8
66 : ite(57, 26, 65) : BV:8
67 : ite(56, 32, 66) : BV:8
68 : ite(55, 29, 67) : BV:8
69 : ite(54, 26, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 21, 22) : BV:32
72 : eq(71, 24) : BOOL
73 : eq(71, 27) : BOOL
74 : eq(71, 30) : BOOL
75 : eq(71, 33) : BOOL
76 : eq(71, 35) : BOOL
77 : eq(71, 22) : BOOL
78 : eq(71, 38) : BOOL
79 : eq(71, 41) : BOOL
80 : ite(79, 26, 43) : BV:8
81 : ite(78, 40, 80) : BV:8
82 : ite(77, 26, 81) : BV:8
83 : ite(76, 26, 82) : BV:8
84 : ite(75, 26, 83) : BV:8
85 : ite(74, 32, 84) : BV:8
86 : ite(73, 29, 85) : BV:8
87 : ite(72, 26, 86) : BV:8
88 : bvadd(21, 22) : BV:32
89 : eq(88, 24) : BOOL
90 : eq(88, 27) : BOOL
91 : eq(88, 30) : BOOL
92 : eq(88, 33) : BOOL
93 : eq(88, 35) : BOOL
94 : eq(88, 22) : BOOL
95 : eq(88, 38) : BOOL
96 : eq(88, 41) : BOOL
97 : ite(96, 26, 43) : BV:8
98 : ite(95, 40, 97) : BV:8
99 : ite(94, 26, 98) : BV:8
100 : ite(93, 26, 99) : BV:8
101 : ite(92, 26, 100) : BV:8
102 : ite(91, 32, 101) : BV:8
103 : ite(90, 29, 102) : BV:8
104 : ite(89, 26, 103) : BV:8
105 : bvconcat(51, 69, 87, 104) : BV:32
106 : ite(18, 2, 105) : BV:32
107 : lambda(17, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(16, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%6%bbentry
1 : 3755991006 { 0xdfdfdfde -538976290 -1.74901938e64 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%x
1 : 4138331904 { 0xf6a9ef00 -156635392 -1.32760620e110 } : BV:32
=input.dst.llvm-%n
1 : 4025478913 { 0xefefef01 -269488383 -1.87448132e96 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3095354567 ] -> 239, [ 3095354568; 3095354568 ] -> 1, [ 3095354569; 4138331903 ] -> 239, [ 4138331904; 4138331907 ] -> 0, [ 4138331908; 4170696127 ] -> 239, [ 4170696128; 4170696128 ] -> 0, [ 4170696129; 4170696129 ] -> 239, [ 4170696130; 4170696130 ] -> 169, [ 4170696131; 4170696131 ] -> 246, [ 4170696132; 4294967295 ] -> 239, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3095354567 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3095354568; 3095354571 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3095354572; 4170696127 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4170696128; 4170696131 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4170696132; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4170696128 { 0xf897c5c0 -124271168 -1.18572235e114 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3095354568 { 0xb87f5cc8 -1199612728 -1.99501895e241 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%6%bbentry.0.1
1 : ([ 0; 4025478912 ] -> true, [ 4025478913; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%6%bbentry.1.1
1 : Lambda121 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 4138331904 { 0xf6a9ef00 -156635392 -1.32760620e110 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 4138331905 { 0xf6a9ef01 -156635391 -1.32760632e110 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 4170696130 { 0xf897c5c2 -124271166 -1.18572258e114 } : BV:32
13 : eq(8, 12) : BOOL
14 : 169 { 0xa9 -87 } : BV:8
15 : 3095354568 { 0xb87f5cc8 -1199612728 -1.99501895e241 } : BV:32
16 : eq(8, 15) : BOOL
17 : 1 { 0x1 } : BV:8
18 : 4138331907 { 0xf6a9ef03 -156635389 -1.32760655e110 } : BV:32
19 : eq(8, 18) : BOOL
20 : 4138331906 { 0xf6a9ef02 -156635390 -1.32760643e110 } : BV:32
21 : eq(8, 20) : BOOL
22 : eq(8, 7) : BOOL
23 : 4170696131 { 0xf897c5c3 -124271165 -1.18572270e114 } : BV:32
24 : eq(8, 23) : BOOL
25 : 246 { 0xf6 -10 } : BV:8
26 : 4170696128 { 0xf897c5c0 -124271168 -1.18572235e114 } : BV:32
27 : eq(8, 26) : BOOL
28 : 239 { 0xef -17 } : BV:8
29 : ite(27, 11, 28) : BV:8
30 : ite(24, 25, 29) : BV:8
31 : ite(22, 11, 30) : BV:8
32 : ite(21, 11, 31) : BV:8
33 : ite(19, 11, 32) : BV:8
34 : ite(16, 17, 33) : BV:8
35 : ite(13, 14, 34) : BV:8
36 : ite(10, 11, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 6, 7) : BV:32
39 : eq(38, 9) : BOOL
40 : eq(38, 12) : BOOL
41 : eq(38, 15) : BOOL
42 : eq(38, 18) : BOOL
43 : eq(38, 20) : BOOL
44 : eq(38, 7) : BOOL
45 : eq(38, 23) : BOOL
46 : eq(38, 26) : BOOL
47 : ite(46, 11, 28) : BV:8
48 : ite(45, 25, 47) : BV:8
49 : ite(44, 11, 48) : BV:8
50 : ite(43, 11, 49) : BV:8
51 : ite(42, 11, 50) : BV:8
52 : ite(41, 17, 51) : BV:8
53 : ite(40, 14, 52) : BV:8
54 : ite(39, 11, 53) : BV:8
55 : 1 { 0x1 +1.11e129 } : BV:32
56 : bvadd(55, 6, 7) : BV:32
57 : eq(56, 9) : BOOL
58 : eq(56, 12) : BOOL
59 : eq(56, 15) : BOOL
60 : eq(56, 18) : BOOL
61 : eq(56, 20) : BOOL
62 : eq(56, 7) : BOOL
63 : eq(56, 23) : BOOL
64 : eq(56, 26) : BOOL
65 : ite(64, 11, 28) : BV:8
66 : ite(63, 25, 65) : BV:8
67 : ite(62, 11, 66) : BV:8
68 : ite(61, 11, 67) : BV:8
69 : ite(60, 11, 68) : BV:8
70 : ite(59, 17, 69) : BV:8
71 : ite(58, 14, 70) : BV:8
72 : ite(57, 11, 71) : BV:8
73 : bvadd(6, 7) : BV:32
74 : eq(73, 9) : BOOL
75 : eq(73, 12) : BOOL
76 : eq(73, 15) : BOOL
77 : eq(73, 18) : BOOL
78 : eq(73, 20) : BOOL
79 : eq(73, 7) : BOOL
80 : eq(73, 23) : BOOL
81 : eq(73, 26) : BOOL
82 : ite(81, 11, 28) : BV:8
83 : ite(80, 25, 82) : BV:8
84 : ite(79, 11, 83) : BV:8
85 : ite(78, 11, 84) : BV:8
86 : ite(77, 11, 85) : BV:8
87 : ite(76, 17, 86) : BV:8
88 : ite(75, 14, 87) : BV:8
89 : ite(74, 11, 88) : BV:8
90 : bvconcat(36, 54, 72, 89) : BV:32
91 : ite(3, 2, 90) : BV:32
92 : ite(3, 2, 91) : BV:32
93 : lambda(1, 92) : FUNCTION[BV:32 -> BV:32]
94 : sym_const(93) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4025478912 ] -> true, [ 4025478913; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : Lambda122 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 4138331904 { 0xf6a9ef00 -156635392 -1.32760620e110 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 4138331905 { 0xf6a9ef01 -156635391 -1.32760632e110 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 4170696130 { 0xf897c5c2 -124271166 -1.18572258e114 } : BV:32
13 : eq(8, 12) : BOOL
14 : 169 { 0xa9 -87 } : BV:8
15 : 3095354568 { 0xb87f5cc8 -1199612728 -1.99501895e241 } : BV:32
16 : eq(8, 15) : BOOL
17 : 1 { 0x1 } : BV:8
18 : 4138331907 { 0xf6a9ef03 -156635389 -1.32760655e110 } : BV:32
19 : eq(8, 18) : BOOL
20 : 4138331906 { 0xf6a9ef02 -156635390 -1.32760643e110 } : BV:32
21 : eq(8, 20) : BOOL
22 : eq(8, 7) : BOOL
23 : 4170696131 { 0xf897c5c3 -124271165 -1.18572270e114 } : BV:32
24 : eq(8, 23) : BOOL
25 : 246 { 0xf6 -10 } : BV:8
26 : 4170696128 { 0xf897c5c0 -124271168 -1.18572235e114 } : BV:32
27 : eq(8, 26) : BOOL
28 : 239 { 0xef -17 } : BV:8
29 : ite(27, 11, 28) : BV:8
30 : ite(24, 25, 29) : BV:8
31 : ite(22, 11, 30) : BV:8
32 : ite(21, 11, 31) : BV:8
33 : ite(19, 11, 32) : BV:8
34 : ite(16, 17, 33) : BV:8
35 : ite(13, 14, 34) : BV:8
36 : ite(10, 11, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 6, 7) : BV:32
39 : eq(38, 9) : BOOL
40 : eq(38, 12) : BOOL
41 : eq(38, 15) : BOOL
42 : eq(38, 18) : BOOL
43 : eq(38, 20) : BOOL
44 : eq(38, 7) : BOOL
45 : eq(38, 23) : BOOL
46 : eq(38, 26) : BOOL
47 : ite(46, 11, 28) : BV:8
48 : ite(45, 25, 47) : BV:8
49 : ite(44, 11, 48) : BV:8
50 : ite(43, 11, 49) : BV:8
51 : ite(42, 11, 50) : BV:8
52 : ite(41, 17, 51) : BV:8
53 : ite(40, 14, 52) : BV:8
54 : ite(39, 11, 53) : BV:8
55 : 1 { 0x1 +1.11e129 } : BV:32
56 : bvadd(55, 6, 7) : BV:32
57 : eq(56, 9) : BOOL
58 : eq(56, 12) : BOOL
59 : eq(56, 15) : BOOL
60 : eq(56, 18) : BOOL
61 : eq(56, 20) : BOOL
62 : eq(56, 7) : BOOL
63 : eq(56, 23) : BOOL
64 : eq(56, 26) : BOOL
65 : ite(64, 11, 28) : BV:8
66 : ite(63, 25, 65) : BV:8
67 : ite(62, 11, 66) : BV:8
68 : ite(61, 11, 67) : BV:8
69 : ite(60, 11, 68) : BV:8
70 : ite(59, 17, 69) : BV:8
71 : ite(58, 14, 70) : BV:8
72 : ite(57, 11, 71) : BV:8
73 : bvadd(6, 7) : BV:32
74 : eq(73, 9) : BOOL
75 : eq(73, 12) : BOOL
76 : eq(73, 15) : BOOL
77 : eq(73, 18) : BOOL
78 : eq(73, 20) : BOOL
79 : eq(73, 7) : BOOL
80 : eq(73, 23) : BOOL
81 : eq(73, 26) : BOOL
82 : ite(81, 11, 28) : BV:8
83 : ite(80, 25, 82) : BV:8
84 : ite(79, 11, 83) : BV:8
85 : ite(78, 11, 84) : BV:8
86 : ite(77, 11, 85) : BV:8
87 : ite(76, 17, 86) : BV:8
88 : ite(75, 14, 87) : BV:8
89 : ite(74, 11, 88) : BV:8
90 : bvconcat(36, 54, 72, 89) : BV:32
91 : ite(3, 2, 90) : BV:32
92 : lambda(1, 91) : FUNCTION[BV:32 -> BV:32]
93 : sym_const(92) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 3755991006 { 0xdfdfdfde -538976290 -1.74901938e64 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1407581506 { 0x53e5fd42 +1.79679131e40 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3095354568 { 0xb87f5cc8 -1199612728 -1.99501895e241 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3095354571 { 0xb87f5ccb -1199612725 -1.99501931e241 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4170696128 { 0xf897c5c0 -124271168 -1.18572235e114 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 4170696131 { 0xf897c5c3 -124271165 -1.18572270e114 } : BV:32
=counter_example.random_seed
1027758982
=counter_example_end
=global nodece 20 num_edges_traversed 4
=global nodece 20 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 21
=global nodece 21 nodece z3.ce591.num_edges_traversed2
=global nodece 21 nodece_path
=global nodece 21 nodece_path.graph_edge_composition
(epsilon)
=global nodece 21 nodece_cached_counterexample
=counter_example_begin z3.ce591 90ab86854eb98557bf3f4c63eda9d1a
=input.spec-%var-x-1
1 : Lambda245 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda246 : BV:32
17 : eq(16, 2) : BOOL
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 16) : BV:32
21 : 1003224064 { 0x3bcbfc00 +1.59362792e248 } : BV:32
22 : bvadd(18, 20, 21) : BV:32
23 : 3916158113 { 0xe96bd4a1 -378809183 -1.84242641e83 } : BV:32
24 : eq(22, 23) : BOOL
25 : 255 { 0xff -1 } : BV:8
26 : 2589378262 { 0x9a56c6d6 -1705589034 -1.67794299e181 } : BV:32
27 : eq(22, 26) : BOOL
28 : 203 { 0xcb -53 } : BV:8
29 : 3916158112 { 0xe96bd4a0 -378809184 -1.84242630e83 } : BV:32
30 : eq(22, 29) : BOOL
31 : 1003224067 { 0x3bcbfc03 +1.59362828e248 } : BV:32
32 : eq(22, 31) : BOOL
33 : 0 { 0x0 } : BV:8
34 : 3916158115 { 0xe96bd4a3 -378809181 -1.84242665e83 } : BV:32
35 : eq(22, 34) : BOOL
36 : 1003224065 { 0x3bcbfc01 +1.59362804e248 } : BV:32
37 : eq(22, 36) : BOOL
38 : 3916158114 { 0xe96bd4a2 -378809182 -1.84242653e83 } : BV:32
39 : eq(22, 38) : BOOL
40 : 1003224066 { 0x3bcbfc02 +1.59362816e248 } : BV:32
41 : eq(22, 40) : BOOL
42 : eq(22, 21) : BOOL
43 : 2589378263 { 0x9a56c6d7 -1705589033 -1.67794311e181 } : BV:32
44 : eq(22, 43) : BOOL
45 : 59 { 0x3b } : BV:8
46 : 2589378260 { 0x9a56c6d4 -1705589036 -1.67794275e181 } : BV:32
47 : eq(22, 46) : BOOL
48 : 252 { 0xfc -4 } : BV:8
49 : ite(47, 33, 48) : BV:8
50 : ite(44, 45, 49) : BV:8
51 : ite(42, 33, 50) : BV:8
52 : ite(41, 33, 51) : BV:8
53 : ite(39, 25, 52) : BV:8
54 : ite(37, 33, 53) : BV:8
55 : ite(35, 25, 54) : BV:8
56 : ite(32, 33, 55) : BV:8
57 : ite(30, 25, 56) : BV:8
58 : ite(27, 28, 57) : BV:8
59 : ite(24, 25, 58) : BV:8
60 : 2 { 0x2 +1.23e129 } : BV:32
61 : bvadd(60, 20, 21) : BV:32
62 : eq(61, 23) : BOOL
63 : eq(61, 26) : BOOL
64 : eq(61, 29) : BOOL
65 : eq(61, 31) : BOOL
66 : eq(61, 34) : BOOL
67 : eq(61, 36) : BOOL
68 : eq(61, 38) : BOOL
69 : eq(61, 40) : BOOL
70 : eq(61, 21) : BOOL
71 : eq(61, 43) : BOOL
72 : eq(61, 46) : BOOL
73 : ite(72, 33, 48) : BV:8
74 : ite(71, 45, 73) : BV:8
75 : ite(70, 33, 74) : BV:8
76 : ite(69, 33, 75) : BV:8
77 : ite(68, 25, 76) : BV:8
78 : ite(67, 33, 77) : BV:8
79 : ite(66, 25, 78) : BV:8
80 : ite(65, 33, 79) : BV:8
81 : ite(64, 25, 80) : BV:8
82 : ite(63, 28, 81) : BV:8
83 : ite(62, 25, 82) : BV:8
84 : 1 { 0x1 +1.11e129 } : BV:32
85 : bvadd(84, 20, 21) : BV:32
86 : eq(85, 23) : BOOL
87 : eq(85, 26) : BOOL
88 : eq(85, 29) : BOOL
89 : eq(85, 31) : BOOL
90 : eq(85, 34) : BOOL
91 : eq(85, 36) : BOOL
92 : eq(85, 38) : BOOL
93 : eq(85, 40) : BOOL
94 : eq(85, 21) : BOOL
95 : eq(85, 43) : BOOL
96 : eq(85, 46) : BOOL
97 : ite(96, 33, 48) : BV:8
98 : ite(95, 45, 97) : BV:8
99 : ite(94, 33, 98) : BV:8
100 : ite(93, 33, 99) : BV:8
101 : ite(92, 25, 100) : BV:8
102 : ite(91, 33, 101) : BV:8
103 : ite(90, 25, 102) : BV:8
104 : ite(89, 33, 103) : BV:8
105 : ite(88, 25, 104) : BV:8
106 : ite(87, 28, 105) : BV:8
107 : ite(86, 25, 106) : BV:8
108 : bvadd(20, 21) : BV:32
109 : eq(108, 23) : BOOL
110 : eq(108, 26) : BOOL
111 : eq(108, 29) : BOOL
112 : eq(108, 31) : BOOL
113 : eq(108, 34) : BOOL
114 : eq(108, 36) : BOOL
115 : eq(108, 38) : BOOL
116 : eq(108, 40) : BOOL
117 : eq(108, 21) : BOOL
118 : eq(108, 43) : BOOL
119 : eq(108, 46) : BOOL
120 : ite(119, 33, 48) : BV:8
121 : ite(118, 45, 120) : BV:8
122 : ite(117, 33, 121) : BV:8
123 : ite(116, 33, 122) : BV:8
124 : ite(115, 25, 123) : BV:8
125 : ite(114, 33, 124) : BV:8
126 : ite(113, 25, 125) : BV:8
127 : ite(112, 33, 126) : BV:8
128 : ite(111, 25, 127) : BV:8
129 : ite(110, 28, 128) : BV:8
130 : ite(109, 25, 129) : BV:8
131 : bvconcat(59, 83, 107, 130) : BV:32
132 : ite(17, 2, 131) : BV:32
133 : lambda(16, 132) : FUNCTION[BV:32 -> BV:32]
134 : map(15, 133) : MAP[BV:32 -> BV:32]
135 : sym_const(134) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L3%6%bbentry
1 : Lambda245 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda246 : BV:32
17 : eq(16, 2) : BOOL
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 16) : BV:32
21 : 1003224064 { 0x3bcbfc00 +1.59362792e248 } : BV:32
22 : bvadd(18, 20, 21) : BV:32
23 : 3916158113 { 0xe96bd4a1 -378809183 -1.84242641e83 } : BV:32
24 : eq(22, 23) : BOOL
25 : 255 { 0xff -1 } : BV:8
26 : 2589378262 { 0x9a56c6d6 -1705589034 -1.67794299e181 } : BV:32
27 : eq(22, 26) : BOOL
28 : 203 { 0xcb -53 } : BV:8
29 : 3916158112 { 0xe96bd4a0 -378809184 -1.84242630e83 } : BV:32
30 : eq(22, 29) : BOOL
31 : 1003224067 { 0x3bcbfc03 +1.59362828e248 } : BV:32
32 : eq(22, 31) : BOOL
33 : 0 { 0x0 } : BV:8
34 : 3916158115 { 0xe96bd4a3 -378809181 -1.84242665e83 } : BV:32
35 : eq(22, 34) : BOOL
36 : 1003224065 { 0x3bcbfc01 +1.59362804e248 } : BV:32
37 : eq(22, 36) : BOOL
38 : 3916158114 { 0xe96bd4a2 -378809182 -1.84242653e83 } : BV:32
39 : eq(22, 38) : BOOL
40 : 1003224066 { 0x3bcbfc02 +1.59362816e248 } : BV:32
41 : eq(22, 40) : BOOL
42 : eq(22, 21) : BOOL
43 : 2589378263 { 0x9a56c6d7 -1705589033 -1.67794311e181 } : BV:32
44 : eq(22, 43) : BOOL
45 : 59 { 0x3b } : BV:8
46 : 2589378260 { 0x9a56c6d4 -1705589036 -1.67794275e181 } : BV:32
47 : eq(22, 46) : BOOL
48 : 252 { 0xfc -4 } : BV:8
49 : ite(47, 33, 48) : BV:8
50 : ite(44, 45, 49) : BV:8
51 : ite(42, 33, 50) : BV:8
52 : ite(41, 33, 51) : BV:8
53 : ite(39, 25, 52) : BV:8
54 : ite(37, 33, 53) : BV:8
55 : ite(35, 25, 54) : BV:8
56 : ite(32, 33, 55) : BV:8
57 : ite(30, 25, 56) : BV:8
58 : ite(27, 28, 57) : BV:8
59 : ite(24, 25, 58) : BV:8
60 : 2 { 0x2 +1.23e129 } : BV:32
61 : bvadd(60, 20, 21) : BV:32
62 : eq(61, 23) : BOOL
63 : eq(61, 26) : BOOL
64 : eq(61, 29) : BOOL
65 : eq(61, 31) : BOOL
66 : eq(61, 34) : BOOL
67 : eq(61, 36) : BOOL
68 : eq(61, 38) : BOOL
69 : eq(61, 40) : BOOL
70 : eq(61, 21) : BOOL
71 : eq(61, 43) : BOOL
72 : eq(61, 46) : BOOL
73 : ite(72, 33, 48) : BV:8
74 : ite(71, 45, 73) : BV:8
75 : ite(70, 33, 74) : BV:8
76 : ite(69, 33, 75) : BV:8
77 : ite(68, 25, 76) : BV:8
78 : ite(67, 33, 77) : BV:8
79 : ite(66, 25, 78) : BV:8
80 : ite(65, 33, 79) : BV:8
81 : ite(64, 25, 80) : BV:8
82 : ite(63, 28, 81) : BV:8
83 : ite(62, 25, 82) : BV:8
84 : 1 { 0x1 +1.11e129 } : BV:32
85 : bvadd(84, 20, 21) : BV:32
86 : eq(85, 23) : BOOL
87 : eq(85, 26) : BOOL
88 : eq(85, 29) : BOOL
89 : eq(85, 31) : BOOL
90 : eq(85, 34) : BOOL
91 : eq(85, 36) : BOOL
92 : eq(85, 38) : BOOL
93 : eq(85, 40) : BOOL
94 : eq(85, 21) : BOOL
95 : eq(85, 43) : BOOL
96 : eq(85, 46) : BOOL
97 : ite(96, 33, 48) : BV:8
98 : ite(95, 45, 97) : BV:8
99 : ite(94, 33, 98) : BV:8
100 : ite(93, 33, 99) : BV:8
101 : ite(92, 25, 100) : BV:8
102 : ite(91, 33, 101) : BV:8
103 : ite(90, 25, 102) : BV:8
104 : ite(89, 33, 103) : BV:8
105 : ite(88, 25, 104) : BV:8
106 : ite(87, 28, 105) : BV:8
107 : ite(86, 25, 106) : BV:8
108 : bvadd(20, 21) : BV:32
109 : eq(108, 23) : BOOL
110 : eq(108, 26) : BOOL
111 : eq(108, 29) : BOOL
112 : eq(108, 31) : BOOL
113 : eq(108, 34) : BOOL
114 : eq(108, 36) : BOOL
115 : eq(108, 38) : BOOL
116 : eq(108, 40) : BOOL
117 : eq(108, 21) : BOOL
118 : eq(108, 43) : BOOL
119 : eq(108, 46) : BOOL
120 : ite(119, 33, 48) : BV:8
121 : ite(118, 45, 120) : BV:8
122 : ite(117, 33, 121) : BV:8
123 : ite(116, 33, 122) : BV:8
124 : ite(115, 25, 123) : BV:8
125 : ite(114, 33, 124) : BV:8
126 : ite(113, 25, 125) : BV:8
127 : ite(112, 33, 126) : BV:8
128 : ite(111, 25, 127) : BV:8
129 : ite(110, 28, 128) : BV:8
130 : ite(109, 25, 129) : BV:8
131 : bvconcat(59, 83, 107, 130) : BV:32
132 : ite(17, 2, 131) : BV:32
133 : lambda(16, 132) : FUNCTION[BV:32 -> BV:32]
134 : map(15, 133) : MAP[BV:32 -> BV:32]
135 : sym_const(134) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%x
1 : 1003224064 { 0x3bcbfc00 +1.59362792e248 } : BV:32
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1003224063 ] -> 252, [ 1003224064; 1003224067 ] -> 0, [ 1003224068; 2589378259 ] -> 252, [ 2589378260; 2589378260 ] -> 0, [ 2589378261; 2589378261 ] -> 252, [ 2589378262; 2589378262 ] -> 203, [ 2589378263; 2589378263 ] -> 59, [ 2589378264; 3916158111 ] -> 252, [ 3916158112; 3916158115 ] -> 255, [ 3916158116; 4294967295 ] -> 252, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2589378259 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2589378260; 2589378263 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2589378264; 3916158111 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3916158112; 3916158115 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3916158116; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2589378260 { 0x9a56c6d4 -1705589036 -1.67794275e181 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3916158112 { 0xe96bd4a0 -378809184 -1.84242630e83 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%6%bbentry.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%6%bbentry.1.1
1 : Lambda233 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 1003224064 { 0x3bcbfc00 +1.59362792e248 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 3916158113 { 0xe96bd4a1 -378809183 -1.84242641e83 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 2589378262 { 0x9a56c6d6 -1705589034 -1.67794299e181 } : BV:32
13 : eq(8, 12) : BOOL
14 : 203 { 0xcb -53 } : BV:8
15 : 3916158112 { 0xe96bd4a0 -378809184 -1.84242630e83 } : BV:32
16 : eq(8, 15) : BOOL
17 : 1003224067 { 0x3bcbfc03 +1.59362828e248 } : BV:32
18 : eq(8, 17) : BOOL
19 : 0 { 0x0 } : BV:8
20 : 3916158115 { 0xe96bd4a3 -378809181 -1.84242665e83 } : BV:32
21 : eq(8, 20) : BOOL
22 : 1003224065 { 0x3bcbfc01 +1.59362804e248 } : BV:32
23 : eq(8, 22) : BOOL
24 : 3916158114 { 0xe96bd4a2 -378809182 -1.84242653e83 } : BV:32
25 : eq(8, 24) : BOOL
26 : 1003224066 { 0x3bcbfc02 +1.59362816e248 } : BV:32
27 : eq(8, 26) : BOOL
28 : eq(8, 7) : BOOL
29 : 2589378263 { 0x9a56c6d7 -1705589033 -1.67794311e181 } : BV:32
30 : eq(8, 29) : BOOL
31 : 59 { 0x3b } : BV:8
32 : 2589378260 { 0x9a56c6d4 -1705589036 -1.67794275e181 } : BV:32
33 : eq(8, 32) : BOOL
34 : 252 { 0xfc -4 } : BV:8
35 : ite(33, 19, 34) : BV:8
36 : ite(30, 31, 35) : BV:8
37 : ite(28, 19, 36) : BV:8
38 : ite(27, 19, 37) : BV:8
39 : ite(25, 11, 38) : BV:8
40 : ite(23, 19, 39) : BV:8
41 : ite(21, 11, 40) : BV:8
42 : ite(18, 19, 41) : BV:8
43 : ite(16, 11, 42) : BV:8
44 : ite(13, 14, 43) : BV:8
45 : ite(10, 11, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 6, 7) : BV:32
48 : eq(47, 9) : BOOL
49 : eq(47, 12) : BOOL
50 : eq(47, 15) : BOOL
51 : eq(47, 17) : BOOL
52 : eq(47, 20) : BOOL
53 : eq(47, 22) : BOOL
54 : eq(47, 24) : BOOL
55 : eq(47, 26) : BOOL
56 : eq(47, 7) : BOOL
57 : eq(47, 29) : BOOL
58 : eq(47, 32) : BOOL
59 : ite(58, 19, 34) : BV:8
60 : ite(57, 31, 59) : BV:8
61 : ite(56, 19, 60) : BV:8
62 : ite(55, 19, 61) : BV:8
63 : ite(54, 11, 62) : BV:8
64 : ite(53, 19, 63) : BV:8
65 : ite(52, 11, 64) : BV:8
66 : ite(51, 19, 65) : BV:8
67 : ite(50, 11, 66) : BV:8
68 : ite(49, 14, 67) : BV:8
69 : ite(48, 11, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 6, 7) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 15) : BOOL
75 : eq(71, 17) : BOOL
76 : eq(71, 20) : BOOL
77 : eq(71, 22) : BOOL
78 : eq(71, 24) : BOOL
79 : eq(71, 26) : BOOL
80 : eq(71, 7) : BOOL
81 : eq(71, 29) : BOOL
82 : eq(71, 32) : BOOL
83 : ite(82, 19, 34) : BV:8
84 : ite(81, 31, 83) : BV:8
85 : ite(80, 19, 84) : BV:8
86 : ite(79, 19, 85) : BV:8
87 : ite(78, 11, 86) : BV:8
88 : ite(77, 19, 87) : BV:8
89 : ite(76, 11, 88) : BV:8
90 : ite(75, 19, 89) : BV:8
91 : ite(74, 11, 90) : BV:8
92 : ite(73, 14, 91) : BV:8
93 : ite(72, 11, 92) : BV:8
94 : bvadd(6, 7) : BV:32
95 : eq(94, 9) : BOOL
96 : eq(94, 12) : BOOL
97 : eq(94, 15) : BOOL
98 : eq(94, 17) : BOOL
99 : eq(94, 20) : BOOL
100 : eq(94, 22) : BOOL
101 : eq(94, 24) : BOOL
102 : eq(94, 26) : BOOL
103 : eq(94, 7) : BOOL
104 : eq(94, 29) : BOOL
105 : eq(94, 32) : BOOL
106 : ite(105, 19, 34) : BV:8
107 : ite(104, 31, 106) : BV:8
108 : ite(103, 19, 107) : BV:8
109 : ite(102, 19, 108) : BV:8
110 : ite(101, 11, 109) : BV:8
111 : ite(100, 19, 110) : BV:8
112 : ite(99, 11, 111) : BV:8
113 : ite(98, 19, 112) : BV:8
114 : ite(97, 11, 113) : BV:8
115 : ite(96, 14, 114) : BV:8
116 : ite(95, 11, 115) : BV:8
117 : bvconcat(45, 69, 93, 116) : BV:32
118 : ite(3, 2, 117) : BV:32
119 : ite(3, 2, 118) : BV:32
120 : lambda(1, 119) : FUNCTION[BV:32 -> BV:32]
121 : sym_const(120) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : Lambda234 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 1003224064 { 0x3bcbfc00 +1.59362792e248 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 3916158113 { 0xe96bd4a1 -378809183 -1.84242641e83 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 2589378262 { 0x9a56c6d6 -1705589034 -1.67794299e181 } : BV:32
13 : eq(8, 12) : BOOL
14 : 203 { 0xcb -53 } : BV:8
15 : 3916158112 { 0xe96bd4a0 -378809184 -1.84242630e83 } : BV:32
16 : eq(8, 15) : BOOL
17 : 1003224067 { 0x3bcbfc03 +1.59362828e248 } : BV:32
18 : eq(8, 17) : BOOL
19 : 0 { 0x0 } : BV:8
20 : 3916158115 { 0xe96bd4a3 -378809181 -1.84242665e83 } : BV:32
21 : eq(8, 20) : BOOL
22 : 1003224065 { 0x3bcbfc01 +1.59362804e248 } : BV:32
23 : eq(8, 22) : BOOL
24 : 3916158114 { 0xe96bd4a2 -378809182 -1.84242653e83 } : BV:32
25 : eq(8, 24) : BOOL
26 : 1003224066 { 0x3bcbfc02 +1.59362816e248 } : BV:32
27 : eq(8, 26) : BOOL
28 : eq(8, 7) : BOOL
29 : 2589378263 { 0x9a56c6d7 -1705589033 -1.67794311e181 } : BV:32
30 : eq(8, 29) : BOOL
31 : 59 { 0x3b } : BV:8
32 : 2589378260 { 0x9a56c6d4 -1705589036 -1.67794275e181 } : BV:32
33 : eq(8, 32) : BOOL
34 : 252 { 0xfc -4 } : BV:8
35 : ite(33, 19, 34) : BV:8
36 : ite(30, 31, 35) : BV:8
37 : ite(28, 19, 36) : BV:8
38 : ite(27, 19, 37) : BV:8
39 : ite(25, 11, 38) : BV:8
40 : ite(23, 19, 39) : BV:8
41 : ite(21, 11, 40) : BV:8
42 : ite(18, 19, 41) : BV:8
43 : ite(16, 11, 42) : BV:8
44 : ite(13, 14, 43) : BV:8
45 : ite(10, 11, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 6, 7) : BV:32
48 : eq(47, 9) : BOOL
49 : eq(47, 12) : BOOL
50 : eq(47, 15) : BOOL
51 : eq(47, 17) : BOOL
52 : eq(47, 20) : BOOL
53 : eq(47, 22) : BOOL
54 : eq(47, 24) : BOOL
55 : eq(47, 26) : BOOL
56 : eq(47, 7) : BOOL
57 : eq(47, 29) : BOOL
58 : eq(47, 32) : BOOL
59 : ite(58, 19, 34) : BV:8
60 : ite(57, 31, 59) : BV:8
61 : ite(56, 19, 60) : BV:8
62 : ite(55, 19, 61) : BV:8
63 : ite(54, 11, 62) : BV:8
64 : ite(53, 19, 63) : BV:8
65 : ite(52, 11, 64) : BV:8
66 : ite(51, 19, 65) : BV:8
67 : ite(50, 11, 66) : BV:8
68 : ite(49, 14, 67) : BV:8
69 : ite(48, 11, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 6, 7) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 15) : BOOL
75 : eq(71, 17) : BOOL
76 : eq(71, 20) : BOOL
77 : eq(71, 22) : BOOL
78 : eq(71, 24) : BOOL
79 : eq(71, 26) : BOOL
80 : eq(71, 7) : BOOL
81 : eq(71, 29) : BOOL
82 : eq(71, 32) : BOOL
83 : ite(82, 19, 34) : BV:8
84 : ite(81, 31, 83) : BV:8
85 : ite(80, 19, 84) : BV:8
86 : ite(79, 19, 85) : BV:8
87 : ite(78, 11, 86) : BV:8
88 : ite(77, 19, 87) : BV:8
89 : ite(76, 11, 88) : BV:8
90 : ite(75, 19, 89) : BV:8
91 : ite(74, 11, 90) : BV:8
92 : ite(73, 14, 91) : BV:8
93 : ite(72, 11, 92) : BV:8
94 : bvadd(6, 7) : BV:32
95 : eq(94, 9) : BOOL
96 : eq(94, 12) : BOOL
97 : eq(94, 15) : BOOL
98 : eq(94, 17) : BOOL
99 : eq(94, 20) : BOOL
100 : eq(94, 22) : BOOL
101 : eq(94, 24) : BOOL
102 : eq(94, 26) : BOOL
103 : eq(94, 7) : BOOL
104 : eq(94, 29) : BOOL
105 : eq(94, 32) : BOOL
106 : ite(105, 19, 34) : BV:8
107 : ite(104, 31, 106) : BV:8
108 : ite(103, 19, 107) : BV:8
109 : ite(102, 19, 108) : BV:8
110 : ite(101, 11, 109) : BV:8
111 : ite(100, 19, 110) : BV:8
112 : ite(99, 11, 111) : BV:8
113 : ite(98, 19, 112) : BV:8
114 : ite(97, 11, 113) : BV:8
115 : ite(96, 14, 114) : BV:8
116 : ite(95, 11, 115) : BV:8
117 : bvconcat(45, 69, 93, 116) : BV:32
118 : ite(3, 2, 117) : BV:32
119 : lambda(1, 118) : FUNCTION[BV:32 -> BV:32]
120 : sym_const(119) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1115311958 { 0x427a4f56 +1.95554614e5 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3916158112 { 0xe96bd4a0 -378809184 -1.84242630e83 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3916158115 { 0xe96bd4a3 -378809181 -1.84242665e83 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2589378260 { 0x9a56c6d4 -1705589036 -1.67794275e181 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2589378263 { 0x9a56c6d7 -1705589033 -1.67794311e181 } : BV:32
=counter_example.random_seed
794214668
=counter_example_end
=global nodece 21 num_edges_traversed 2
=global nodece 21 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 22
=global nodece 22 nodece z3v487.ce581.num_edges_traversed1
=global nodece 22 nodece_path
=global nodece 22 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 22 nodece_cached_counterexample
=counter_example_begin z3v487.ce581 42dd9d2585c46a16f6d3b547933797
=input.spec-%var-x-1
1 : Lambda919 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda920 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L3%6%bbentry
1 : Lambda922 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda923 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 2, 28) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1464172580 { 0x57458024 +1.54297304e47 } : BV:32
=input.dst.llvm-%x
1 : 2765095248 { 0xa4d00150 -1529872048 -1.62504005e202 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 280233135 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 280233136; 280233139 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 280233140; 1151894691 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1151894692; 1151894695 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1151894696; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 280233136 { 0x10b404b0 +1.40639305e162 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1151894692 { 0x44a884a4 +1.31654787e10 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%6%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%6%bbentry.1.1
1 : Lambda901 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 2, 18) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 2058397355 { 0x7ab0a6ab +1.38008630e118 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1151894692 { 0x44a884a4 +1.31654787e10 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1151894695 { 0x44a884a7 +1.31654822e10 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 280233136 { 0x10b404b0 +1.40639305e162 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 280233139 { 0x10b404b3 +1.40639340e162 } : BV:32
=counter_example.random_seed
4167590159
=counter_example_end
=global nodece 22 num_edges_traversed 1
=global nodece 22 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 23
=global nodece 23 nodece z3v487.ce798.num_edges_traversed2
=global nodece 23 nodece_path
=global nodece 23 nodece_path.graph_edge_composition
(epsilon)
=global nodece 23 nodece_cached_counterexample
=counter_example_begin z3v487.ce798 6af97afe70b92cf94c28fb9684227f8
=input.spec-%var-x-1
1 : Lambda919 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda920 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L3%6%bbentry
1 : Lambda922 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda923 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 2, 28) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1464172581 { 0x57458025 +1.54297316e47 } : BV:32
=input.dst.llvm-%x
1 : 2765095248 { 0xa4d00150 -1529872048 -1.62504005e202 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 280233135 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 280233136; 280233139 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 280233140; 1151894691 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1151894692; 1151894695 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1151894696; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 280233136 { 0x10b404b0 +1.40639305e162 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1151894692 { 0x44a884a4 +1.31654787e10 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%6%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%6%bbentry.1.1
1 : Lambda901 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 2, 18) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 2058397356 { 0x7ab0a6ac +1.38008642e118 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1151894692 { 0x44a884a4 +1.31654787e10 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1151894695 { 0x44a884a7 +1.31654822e10 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 280233136 { 0x10b404b0 +1.40639305e162 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 280233139 { 0x10b404b3 +1.40639340e162 } : BV:32
=counter_example.random_seed
4167590159
=counter_example_end
=global nodece 23 num_edges_traversed 2
=global nodece 23 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 24
=global nodece 24 nodece z3.ce811.num_edges_traversed1
=global nodece 24 nodece_path
=global nodece 24 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 24 nodece_cached_counterexample
=counter_example_begin z3.ce811 a8b5e3fbc792e867204dfe60881f1a
=input.spec-%var-x-1
1 : Lambda972 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 5 { 0x5 +1.59e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 6 { 0x6 +1.71e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda973 : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : bvule(2, 17) : BOOL
21 : bvule(17, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(8, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : ite(25, 13, 13) : BOOL
27 : ite(22, 7, 26) : BOOL
28 : and(20, 24) : BOOL
29 : ite(28, 2, 2) : BV:32
30 : ite(27, 2, 29) : BV:32
31 : ite(19, 2, 30) : BV:32
32 : lambda(17, 31) : FUNCTION[BV:32 -> BV:32]
33 : map(16, 32) : MAP[BV:32 -> BV:32]
34 : sym_const(33) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 536870916 { 0x20000004 +1.47e193 } : BV:32
=input.spec-%var-x-0.L3%6%bbentry
1 : Lambda976 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 5 { 0x5 +1.59e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 6 { 0x6 +1.71e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda977 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-0.L3%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%var-ret-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1996661187 { 0x7702a1c3 +1.2056157e111 } : BV:32
=input.dst.llvm-%x
1 : 536870904 { 0x1ffffff8 +1.99999904e192 } : BV:32
=input.dst.llvm-%n
1 : 6 { 0x6 +1.71e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 929228871 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 929228872; 929228875 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 929228876; 1450616323 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1450616324; 1450616327 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1450616328; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 929228872 { 0x3762e848 +1.77271366e239 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1450616324 { 0x5676a604 +1.92694139e45 } : BV:32
=input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 12 { 0xc +1.143e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-2.L3%6%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%6%bbentry.0.1
1 : ([ 0; 5 ] -> true, [ 6; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 5 ] -> true, [ 6; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : Lambda958 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 1) : BOOL
6 : 5 { 0x5 +1.59e129 } : BV:32
7 : bvule(1, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 6 { 0x6 +1.71e129 } : BV:32
11 : bvule(10, 1) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(1, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : and(5, 13) : BOOL
19 : ite(18, 4, 4) : BV:32
20 : ite(17, 4, 19) : BV:32
21 : ite(3, 4, 20) : BV:32
22 : lambda(1, 21) : FUNCTION[BV:32 -> BV:32]
23 : sym_const(22) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1751848386 { 0x686b15c2 +1.83660149e81 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%add.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry
1 : 536870916 { 0x20000004 +1.47e193 } : BV:32
=input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 12 { 0xc +1.143e129 } : BV:32
=input.dst.llvm-%inc.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1450616324 { 0x5676a604 +1.92694139e45 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1450616327 { 0x5676a607 +1.92694175e45 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 929228872 { 0x3762e848 +1.77271366e239 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 929228875 { 0x3762e84b +1.77271401e239 } : BV:32
=counter_example.random_seed
58280776
=counter_example_end
=global nodece 24 num_edges_traversed 1
=global nodece 24 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 25
=global nodece 25 nodece z3.ce840.num_edges_traversed2
=global nodece 25 nodece_path
=global nodece 25 nodece_path.graph_edge_composition
(epsilon)
=global nodece 25 nodece_cached_counterexample
=counter_example_begin z3.ce840 e1f6b2139a457a7dce5efc8428c677e3
=input.spec-%var-x-1
1 : Lambda972 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 5 { 0x5 +1.59e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 6 { 0x6 +1.71e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda973 : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : bvule(2, 17) : BOOL
21 : bvule(17, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(8, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : ite(25, 13, 13) : BOOL
27 : ite(22, 7, 26) : BOOL
28 : and(20, 24) : BOOL
29 : ite(28, 2, 2) : BV:32
30 : ite(27, 2, 29) : BV:32
31 : ite(19, 2, 30) : BV:32
32 : lambda(17, 31) : FUNCTION[BV:32 -> BV:32]
33 : map(16, 32) : MAP[BV:32 -> BV:32]
34 : sym_const(33) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L3%6%bbentry
1 : Lambda976 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 5 { 0x5 +1.59e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 6 { 0x6 +1.71e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda977 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1996661188 { 0x7702a1c4 +1.2056169e111 } : BV:32
=input.dst.llvm-%x
1 : 536870904 { 0x1ffffff8 +1.99999904e192 } : BV:32
=input.dst.llvm-%n
1 : 6 { 0x6 +1.71e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 929228871 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 929228872; 929228875 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 929228876; 1450616323 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1450616324; 1450616327 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1450616328; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 929228872 { 0x3762e848 +1.77271366e239 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1450616324 { 0x5676a604 +1.92694139e45 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%6%bbentry.0.1
1 : ([ 0; 5 ] -> true, [ 6; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 5 ] -> true, [ 6; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : Lambda958 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 1) : BOOL
6 : 5 { 0x5 +1.59e129 } : BV:32
7 : bvule(1, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 6 { 0x6 +1.71e129 } : BV:32
11 : bvule(10, 1) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(1, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : and(5, 13) : BOOL
19 : ite(18, 4, 4) : BV:32
20 : ite(17, 4, 19) : BV:32
21 : ite(3, 4, 20) : BV:32
22 : lambda(1, 21) : FUNCTION[BV:32 -> BV:32]
23 : sym_const(22) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1751848387 { 0x686b15c3 +1.83660161e81 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1450616324 { 0x5676a604 +1.92694139e45 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1450616327 { 0x5676a607 +1.92694175e45 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 929228872 { 0x3762e848 +1.77271366e239 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 929228875 { 0x3762e84b +1.77271401e239 } : BV:32
=counter_example.random_seed
58280776
=counter_example_end
=global nodece 25 num_edges_traversed 2
=global nodece 25 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 26
=global nodece 26 nodece z3.ce862.num_edges_traversed1
=global nodece 26 nodece_path
=global nodece 26 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 26 nodece_cached_counterexample
=counter_example_begin z3.ce862 562aab91fadf1d95b086c15d668bc91
=input.spec-%var-x-1
1 : Lambda1014 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 5 { 0x5 +1.59e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1015 : BV:32
18 : eq(17, 4) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 2, 28) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-x-0.L3%6%bbentry
1 : Lambda1018 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 5 { 0x5 +1.59e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1019 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-0.L3%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%var-ret-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 341993214 { 0x146266fe +1.76876807e169 } : BV:32
=input.dst.llvm-%x
1 : 2147483632 { 0x7ffffff0 +1.99999809e128 } : BV:32
=input.dst.llvm-%n
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1483435583 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1483435584; 1483435587 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1483435588; 4109071695 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4109071696; 4109071699 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4109071700; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4109071696 { 0xf4eb7550 -185895600 -1.83951759e106 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1483435584 { 0x586b6e40 +1.83930206e49 } : BV:32
=input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%tmpvar-2.L3%6%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%6%bbentry.0.1
1 : ([ 0; 4 ] -> true, [ 5; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4 ] -> true, [ 5; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : Lambda1000 : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 1) : BOOL
6 : bvule(1, 2) : BOOL
7 : and(5, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 5 { 0x5 +1.59e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(5, 12) : BOOL
18 : ite(17, 4, 4) : BV:32
19 : ite(16, 4, 18) : BV:32
20 : ite(3, 4, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1268517714 { 0x4b9c0b52 +1.21909546e24 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%add.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%inc.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1483435584 { 0x586b6e40 +1.83930206e49 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1483435587 { 0x586b6e43 +1.83930242e49 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4109071696 { 0xf4eb7550 -185895600 -1.83951759e106 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 4109071699 { 0xf4eb7553 -185895597 -1.83951795e106 } : BV:32
=counter_example.random_seed
522368351
=counter_example_end
=global nodece 26 num_edges_traversed 1
=global nodece 26 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 27
=global nodece 27 nodece z3v487.ce904.num_edges_traversed0
=global nodece 27 nodece_path
=global nodece 27 nodece_path.graph_edge_composition
(epsilon)
=global nodece 27 nodece_cached_counterexample
=counter_example_begin z3v487.ce904 436c472a3c9cd3b5c9f6d5f4e94b03a
=input.spec-%var-x-1
1 : Lambda1137 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 645883025 { 0x267f6491 +1.99525654e205 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 645883026 { 0x267f6492 +1.99525666e205 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1138 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L3%6%bbentry
1 : Lambda1140 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 645883025 { 0x267f6491 +1.99525654e205 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 645883026 { 0x267f6492 +1.99525666e205 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1141 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 2, 28) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 645883026 { 0x267f6492 +1.99525666e205 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 8; 4194303 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4194304; 4194307 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4194308; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 645883026 { 0x267f6492 +1.99525666e205 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-0.L3%6%bbentry.0.1
1 : ([ 0; 645883025 ] -> true, [ 645883026; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%6%bbentry.1.1
1 : Lambda1119 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 645883025 { 0x267f6491 +1.99525654e205 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 645883026 { 0x267f6492 +1.99525666e205 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 2, 18) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 645883025 ] -> true, [ 645883026; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 645883026 { 0x267f6492 +1.99525666e205 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 4194307 { 0x400003 +1.50000035e129 } : BV:32
=counter_example.random_seed
3523212329
=counter_example_end
=global nodece 27 num_edges_traversed 0
=global nodece 27 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 28
=global nodece 28 nodece z3.ce905.num_edges_traversed0
=global nodece 28 nodece_path
=global nodece 28 nodece_path.graph_edge_composition
(epsilon)
=global nodece 28 nodece_cached_counterexample
=counter_example_begin z3.ce905 8458d6795a3ff0416c43c8e4fd9dd244
=input.spec-%var-x-1
1 : Lambda1147 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1058564485 { 0x3f186985 +1.19072020e255 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1058564486 { 0x3f186986 +1.19072031e255 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1148 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 2, 28) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L3%6%bbentry
1 : Lambda1151 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1058564485 { 0x3f186985 +1.19072020e255 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1058564486 { 0x3f186986 +1.19072031e255 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1152 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 1058564486 { 0x3f186986 +1.19072031e255 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2198590091 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2198590092; 2198590095 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2198590096; 2864619431 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2864619432; 2864619435 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2864619436; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2198590092 { 0x830bd28c -2096377204 -1.9236288e135 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2864619432 { 0xaabe9fa8 -1430347864 -1.48924732e214 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1058564486 { 0x3f186986 +1.19072031e255 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-0.L3%6%bbentry.0.1
1 : ([ 0; 1058564485 ] -> true, [ 1058564486; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 1058564485 ] -> true, [ 1058564486; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : Lambda1130 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 1058564485 { 0x3f186985 +1.19072020e255 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 1058564486 { 0x3f186986 +1.19072031e255 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 2, 18) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1058564486 { 0x3f186986 +1.19072031e255 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2864619432 { 0xaabe9fa8 -1430347864 -1.48924732e214 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2864619435 { 0xaabe9fab -1430347861 -1.48924767e214 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2198590092 { 0x830bd28c -2096377204 -1.9236288e135 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2198590095 { 0x830bd28f -2096377201 -1.9236323e135 } : BV:32
=counter_example.random_seed
2324252979
=counter_example_end
=global nodece 28 num_edges_traversed 0
=global nodece 28 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 29
=global nodece 29 nodece z3v487.ce1159.num_edges_traversed2
=global nodece 29 nodece_path
=global nodece 29 nodece_path.graph_edge_composition
(epsilon)
=global nodece 29 nodece_cached_counterexample
=counter_example_begin z3v487.ce1159 f23928546bf7dc441d6688fbbb5cc8
=retaddr_const
1 : 571456685 { 0x220fbcad +1.12294542e197 } : BV:32
=input.spec-%var-x-1
1 : Lambda20 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda21 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L3%6%bbentry
1 : Lambda20 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda21 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-5.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-0.L3%7%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : sum(1, 2, 1) : SUM[UNIT,BV:32]
4 : sym_const(3) : SUM[UNIT,BV:32]
=input.spec-%tmpvar-6.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1027 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1028; 1031 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1032; 65535 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 65536; 65539 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 65540; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1028 { 0x404 +1.12254e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 65536 { 0x10000 +1.781250e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-0.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-indir_tgt.E0%0%d
1 : 571456685 { 0x220fbcad +1.12294542e197 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 1015735436 { 0x3c8ae48c +1.8509969e250 } : BV:32
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 924236686 { 0x3716bb8e +1.17759871e239 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 65536 { 0x10000 +1.781250e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 65539 { 0x10003 +1.781285e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1028 { 0x404 +1.12254e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1031 { 0x407 +1.12290e129 } : BV:32
=counter_example.random_seed
190170042
=counter_example_end
=global nodece 29 num_edges_traversed 2
=global nodece 29 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 30
=global nodece 30 nodece z3.ce1117.num_edges_traversed2
=global nodece 30 nodece_path
=global nodece 30 nodece_path.graph_edge_composition
(epsilon)
=global nodece 30 nodece_cached_counterexample
=counter_example_begin z3.ce1117 83f4cf792554522f5c71629adbfed
=retaddr_const
1 : 1051788605 { 0x3eb1053d +1.38297235e254 } : BV:32
=input.spec-%var-x-1
1 : Lambda167 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda168 : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(12, 10) : BV:32
14 : 3892313664 { 0xe7fffe40 -402653632 -1.99994659e80 } : BV:32
15 : bvadd(11, 13, 14) : BV:32
16 : 1186986737 { 0x46bffaf1 +1.49984562e14 } : BV:32
17 : eq(15, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : 343389910 { 0x1477b6d6 +1.93526721e169 } : BV:32
20 : eq(15, 19) : BOOL
21 : 255 { 0xff -1 } : BV:8
22 : 1186986736 { 0x46bffaf0 +1.49984550e14 } : BV:32
23 : eq(15, 22) : BOOL
24 : 1186986739 { 0x46bffaf3 +1.49984586e14 } : BV:32
25 : eq(15, 24) : BOOL
26 : 1186986738 { 0x46bffaf2 +1.49984574e14 } : BV:32
27 : eq(15, 26) : BOOL
28 : 343389911 { 0x1477b6d7 +1.93526732e169 } : BV:32
29 : eq(15, 28) : BOOL
30 : 231 { 0xe7 -25 } : BV:8
31 : 343389908 { 0x1477b6d4 +1.93526697e169 } : BV:32
32 : eq(15, 31) : BOOL
33 : 64 { 0x40 } : BV:8
34 : 254 { 0xfe -2 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(29, 30, 35) : BV:8
37 : ite(27, 18, 36) : BV:8
38 : ite(25, 18, 37) : BV:8
39 : ite(23, 18, 38) : BV:8
40 : ite(20, 21, 39) : BV:8
41 : ite(17, 18, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 13, 14) : BV:32
44 : eq(43, 16) : BOOL
45 : eq(43, 19) : BOOL
46 : eq(43, 22) : BOOL
47 : eq(43, 24) : BOOL
48 : eq(43, 26) : BOOL
49 : eq(43, 28) : BOOL
50 : eq(43, 31) : BOOL
51 : ite(50, 33, 34) : BV:8
52 : ite(49, 30, 51) : BV:8
53 : ite(48, 18, 52) : BV:8
54 : ite(47, 18, 53) : BV:8
55 : ite(46, 18, 54) : BV:8
56 : ite(45, 21, 55) : BV:8
57 : ite(44, 18, 56) : BV:8
58 : 1 { 0x1 +1.11e129 } : BV:32
59 : bvadd(58, 13, 14) : BV:32
60 : eq(59, 16) : BOOL
61 : eq(59, 19) : BOOL
62 : eq(59, 22) : BOOL
63 : eq(59, 24) : BOOL
64 : eq(59, 26) : BOOL
65 : eq(59, 28) : BOOL
66 : eq(59, 31) : BOOL
67 : ite(66, 33, 34) : BV:8
68 : ite(65, 30, 67) : BV:8
69 : ite(64, 18, 68) : BV:8
70 : ite(63, 18, 69) : BV:8
71 : ite(62, 18, 70) : BV:8
72 : ite(61, 21, 71) : BV:8
73 : ite(60, 18, 72) : BV:8
74 : bvadd(13, 14) : BV:32
75 : eq(74, 16) : BOOL
76 : eq(74, 19) : BOOL
77 : eq(74, 22) : BOOL
78 : eq(74, 24) : BOOL
79 : eq(74, 26) : BOOL
80 : eq(74, 28) : BOOL
81 : eq(74, 31) : BOOL
82 : ite(81, 33, 34) : BV:8
83 : ite(80, 30, 82) : BV:8
84 : ite(79, 18, 83) : BV:8
85 : ite(78, 18, 84) : BV:8
86 : ite(77, 18, 85) : BV:8
87 : ite(76, 21, 86) : BV:8
88 : ite(75, 18, 87) : BV:8
89 : bvconcat(41, 57, 73, 88) : BV:32
90 : lambda(10, 89) : FUNCTION[BV:32 -> BV:32]
91 : map(9, 90) : MAP[BV:32 -> BV:32]
92 : sym_const(91) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L3%6%bbentry
1 : Lambda167 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda168 : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(12, 10) : BV:32
14 : 3892313664 { 0xe7fffe40 -402653632 -1.99994659e80 } : BV:32
15 : bvadd(11, 13, 14) : BV:32
16 : 1186986737 { 0x46bffaf1 +1.49984562e14 } : BV:32
17 : eq(15, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : 343389910 { 0x1477b6d6 +1.93526721e169 } : BV:32
20 : eq(15, 19) : BOOL
21 : 255 { 0xff -1 } : BV:8
22 : 1186986736 { 0x46bffaf0 +1.49984550e14 } : BV:32
23 : eq(15, 22) : BOOL
24 : 1186986739 { 0x46bffaf3 +1.49984586e14 } : BV:32
25 : eq(15, 24) : BOOL
26 : 1186986738 { 0x46bffaf2 +1.49984574e14 } : BV:32
27 : eq(15, 26) : BOOL
28 : 343389911 { 0x1477b6d7 +1.93526732e169 } : BV:32
29 : eq(15, 28) : BOOL
30 : 231 { 0xe7 -25 } : BV:8
31 : 343389908 { 0x1477b6d4 +1.93526697e169 } : BV:32
32 : eq(15, 31) : BOOL
33 : 64 { 0x40 } : BV:8
34 : 254 { 0xfe -2 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(29, 30, 35) : BV:8
37 : ite(27, 18, 36) : BV:8
38 : ite(25, 18, 37) : BV:8
39 : ite(23, 18, 38) : BV:8
40 : ite(20, 21, 39) : BV:8
41 : ite(17, 18, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 13, 14) : BV:32
44 : eq(43, 16) : BOOL
45 : eq(43, 19) : BOOL
46 : eq(43, 22) : BOOL
47 : eq(43, 24) : BOOL
48 : eq(43, 26) : BOOL
49 : eq(43, 28) : BOOL
50 : eq(43, 31) : BOOL
51 : ite(50, 33, 34) : BV:8
52 : ite(49, 30, 51) : BV:8
53 : ite(48, 18, 52) : BV:8
54 : ite(47, 18, 53) : BV:8
55 : ite(46, 18, 54) : BV:8
56 : ite(45, 21, 55) : BV:8
57 : ite(44, 18, 56) : BV:8
58 : 1 { 0x1 +1.11e129 } : BV:32
59 : bvadd(58, 13, 14) : BV:32
60 : eq(59, 16) : BOOL
61 : eq(59, 19) : BOOL
62 : eq(59, 22) : BOOL
63 : eq(59, 24) : BOOL
64 : eq(59, 26) : BOOL
65 : eq(59, 28) : BOOL
66 : eq(59, 31) : BOOL
67 : ite(66, 33, 34) : BV:8
68 : ite(65, 30, 67) : BV:8
69 : ite(64, 18, 68) : BV:8
70 : ite(63, 18, 69) : BV:8
71 : ite(62, 18, 70) : BV:8
72 : ite(61, 21, 71) : BV:8
73 : ite(60, 18, 72) : BV:8
74 : bvadd(13, 14) : BV:32
75 : eq(74, 16) : BOOL
76 : eq(74, 19) : BOOL
77 : eq(74, 22) : BOOL
78 : eq(74, 24) : BOOL
79 : eq(74, 26) : BOOL
80 : eq(74, 28) : BOOL
81 : eq(74, 31) : BOOL
82 : ite(81, 33, 34) : BV:8
83 : ite(80, 30, 82) : BV:8
84 : ite(79, 18, 83) : BV:8
85 : ite(78, 18, 84) : BV:8
86 : ite(77, 18, 85) : BV:8
87 : ite(76, 21, 86) : BV:8
88 : ite(75, 18, 87) : BV:8
89 : bvconcat(41, 57, 73, 88) : BV:32
90 : lambda(10, 89) : FUNCTION[BV:32 -> BV:32]
91 : map(9, 90) : MAP[BV:32 -> BV:32]
92 : sym_const(91) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-5.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-0.L3%7%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 4278124286 { 0xfefefefe -16843010 -1.99215674e126 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%tmpvar-6.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 3892313664 { 0xe7fffe40 -402653632 -1.99994659e80 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 343389907 ] -> 254, [ 343389908; 343389908 ] -> 64, [ 343389909; 343389909 ] -> 254, [ 343389910; 343389910 ] -> 255, [ 343389911; 343389911 ] -> 231, [ 343389912; 1186986735 ] -> 254, [ 1186986736; 1186986739 ] -> 0, [ 1186986740; 4294967295 ] -> 254, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 343389907 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 343389908; 343389911 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 343389912; 1186986735 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1186986736; 1186986739 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1186986740; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 343389908 { 0x1477b6d4 +1.93526697e169 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1186986736 { 0x46bffaf0 +1.49984550e14 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-0.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%6%bbentry.1.1
1 : Lambda155 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(3, 1) : BV:32
5 : 3892313664 { 0xe7fffe40 -402653632 -1.99994659e80 } : BV:32
6 : bvadd(2, 4, 5) : BV:32
7 : 1186986737 { 0x46bffaf1 +1.49984562e14 } : BV:32
8 : eq(6, 7) : BOOL
9 : 0 { 0x0 } : BV:8
10 : 343389910 { 0x1477b6d6 +1.93526721e169 } : BV:32
11 : eq(6, 10) : BOOL
12 : 255 { 0xff -1 } : BV:8
13 : 1186986736 { 0x46bffaf0 +1.49984550e14 } : BV:32
14 : eq(6, 13) : BOOL
15 : 1186986739 { 0x46bffaf3 +1.49984586e14 } : BV:32
16 : eq(6, 15) : BOOL
17 : 1186986738 { 0x46bffaf2 +1.49984574e14 } : BV:32
18 : eq(6, 17) : BOOL
19 : 343389911 { 0x1477b6d7 +1.93526732e169 } : BV:32
20 : eq(6, 19) : BOOL
21 : 231 { 0xe7 -25 } : BV:8
22 : 343389908 { 0x1477b6d4 +1.93526697e169 } : BV:32
23 : eq(6, 22) : BOOL
24 : 64 { 0x40 } : BV:8
25 : 254 { 0xfe -2 } : BV:8
26 : ite(23, 24, 25) : BV:8
27 : ite(20, 21, 26) : BV:8
28 : ite(18, 9, 27) : BV:8
29 : ite(16, 9, 28) : BV:8
30 : ite(14, 9, 29) : BV:8
31 : ite(11, 12, 30) : BV:8
32 : ite(8, 9, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 4, 5) : BV:32
35 : eq(34, 7) : BOOL
36 : eq(34, 10) : BOOL
37 : eq(34, 13) : BOOL
38 : eq(34, 15) : BOOL
39 : eq(34, 17) : BOOL
40 : eq(34, 19) : BOOL
41 : eq(34, 22) : BOOL
42 : ite(41, 24, 25) : BV:8
43 : ite(40, 21, 42) : BV:8
44 : ite(39, 9, 43) : BV:8
45 : ite(38, 9, 44) : BV:8
46 : ite(37, 9, 45) : BV:8
47 : ite(36, 12, 46) : BV:8
48 : ite(35, 9, 47) : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : bvadd(49, 4, 5) : BV:32
51 : eq(50, 7) : BOOL
52 : eq(50, 10) : BOOL
53 : eq(50, 13) : BOOL
54 : eq(50, 15) : BOOL
55 : eq(50, 17) : BOOL
56 : eq(50, 19) : BOOL
57 : eq(50, 22) : BOOL
58 : ite(57, 24, 25) : BV:8
59 : ite(56, 21, 58) : BV:8
60 : ite(55, 9, 59) : BV:8
61 : ite(54, 9, 60) : BV:8
62 : ite(53, 9, 61) : BV:8
63 : ite(52, 12, 62) : BV:8
64 : ite(51, 9, 63) : BV:8
65 : bvadd(4, 5) : BV:32
66 : eq(65, 7) : BOOL
67 : eq(65, 10) : BOOL
68 : eq(65, 13) : BOOL
69 : eq(65, 15) : BOOL
70 : eq(65, 17) : BOOL
71 : eq(65, 19) : BOOL
72 : eq(65, 22) : BOOL
73 : ite(72, 24, 25) : BV:8
74 : ite(71, 21, 73) : BV:8
75 : ite(70, 9, 74) : BV:8
76 : ite(69, 9, 75) : BV:8
77 : ite(68, 9, 76) : BV:8
78 : ite(67, 12, 77) : BV:8
79 : ite(66, 9, 78) : BV:8
80 : bvconcat(32, 48, 64, 79) : BV:32
81 : lambda(1, 80) : FUNCTION[BV:32 -> BV:32]
82 : sym_const(81) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : Lambda156 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(3, 1) : BV:32
5 : 3892313664 { 0xe7fffe40 -402653632 -1.99994659e80 } : BV:32
6 : bvadd(2, 4, 5) : BV:32
7 : 1186986737 { 0x46bffaf1 +1.49984562e14 } : BV:32
8 : eq(6, 7) : BOOL
9 : 0 { 0x0 } : BV:8
10 : 343389910 { 0x1477b6d6 +1.93526721e169 } : BV:32
11 : eq(6, 10) : BOOL
12 : 255 { 0xff -1 } : BV:8
13 : 1186986736 { 0x46bffaf0 +1.49984550e14 } : BV:32
14 : eq(6, 13) : BOOL
15 : 1186986739 { 0x46bffaf3 +1.49984586e14 } : BV:32
16 : eq(6, 15) : BOOL
17 : 1186986738 { 0x46bffaf2 +1.49984574e14 } : BV:32
18 : eq(6, 17) : BOOL
19 : 343389911 { 0x1477b6d7 +1.93526732e169 } : BV:32
20 : eq(6, 19) : BOOL
21 : 231 { 0xe7 -25 } : BV:8
22 : 343389908 { 0x1477b6d4 +1.93526697e169 } : BV:32
23 : eq(6, 22) : BOOL
24 : 64 { 0x40 } : BV:8
25 : 254 { 0xfe -2 } : BV:8
26 : ite(23, 24, 25) : BV:8
27 : ite(20, 21, 26) : BV:8
28 : ite(18, 9, 27) : BV:8
29 : ite(16, 9, 28) : BV:8
30 : ite(14, 9, 29) : BV:8
31 : ite(11, 12, 30) : BV:8
32 : ite(8, 9, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 4, 5) : BV:32
35 : eq(34, 7) : BOOL
36 : eq(34, 10) : BOOL
37 : eq(34, 13) : BOOL
38 : eq(34, 15) : BOOL
39 : eq(34, 17) : BOOL
40 : eq(34, 19) : BOOL
41 : eq(34, 22) : BOOL
42 : ite(41, 24, 25) : BV:8
43 : ite(40, 21, 42) : BV:8
44 : ite(39, 9, 43) : BV:8
45 : ite(38, 9, 44) : BV:8
46 : ite(37, 9, 45) : BV:8
47 : ite(36, 12, 46) : BV:8
48 : ite(35, 9, 47) : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : bvadd(49, 4, 5) : BV:32
51 : eq(50, 7) : BOOL
52 : eq(50, 10) : BOOL
53 : eq(50, 13) : BOOL
54 : eq(50, 15) : BOOL
55 : eq(50, 17) : BOOL
56 : eq(50, 19) : BOOL
57 : eq(50, 22) : BOOL
58 : ite(57, 24, 25) : BV:8
59 : ite(56, 21, 58) : BV:8
60 : ite(55, 9, 59) : BV:8
61 : ite(54, 9, 60) : BV:8
62 : ite(53, 9, 61) : BV:8
63 : ite(52, 12, 62) : BV:8
64 : ite(51, 9, 63) : BV:8
65 : bvadd(4, 5) : BV:32
66 : eq(65, 7) : BOOL
67 : eq(65, 10) : BOOL
68 : eq(65, 13) : BOOL
69 : eq(65, 15) : BOOL
70 : eq(65, 17) : BOOL
71 : eq(65, 19) : BOOL
72 : eq(65, 22) : BOOL
73 : ite(72, 24, 25) : BV:8
74 : ite(71, 21, 73) : BV:8
75 : ite(70, 9, 74) : BV:8
76 : ite(69, 9, 75) : BV:8
77 : ite(68, 9, 76) : BV:8
78 : ite(67, 12, 77) : BV:8
79 : ite(66, 9, 78) : BV:8
80 : bvconcat(32, 48, 64, 79) : BV:32
81 : lambda(1, 80) : FUNCTION[BV:32 -> BV:32]
82 : sym_const(81) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-indir_tgt.E0%0%d
1 : 1051788605 { 0x3eb1053d +1.38297235e254 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 2037545563 { 0x79727a5b +1.89435899e115 } : BV:32
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 308041456 { 0x125c56f0 +1.72140312e165 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1186986736 { 0x46bffaf0 +1.49984550e14 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1186986739 { 0x46bffaf3 +1.49984586e14 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 343389908 { 0x1477b6d4 +1.93526697e169 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 343389911 { 0x1477b6d7 +1.93526732e169 } : BV:32
=counter_example.random_seed
1530907469
=counter_example_end
=global nodece 30 num_edges_traversed 2
=global nodece 30 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 31
=global nodece 31 nodece z3.ce1099.num_edges_traversed2
=global nodece 31 nodece_path
=global nodece 31 nodece_path.graph_edge_composition
(epsilon)
=global nodece 31 nodece_cached_counterexample
=counter_example_begin z3.ce1099 f5b757b964f226818992633c2f48a22
=retaddr_const
1 : 284297263 { 0x10f2082f +1.89087474e162 } : BV:32
=input.spec-%var-x-1
1 : Lambda203 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda204 : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(12, 10) : BV:32
14 : 3892313604 { 0xe7fffe04 -402653692 -1.99993944e80 } : BV:32
15 : bvadd(11, 13, 14) : BV:32
16 : 1186986737 { 0x46bffaf1 +1.49984562e14 } : BV:32
17 : eq(15, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : 343389910 { 0x1477b6d6 +1.93526721e169 } : BV:32
20 : eq(15, 19) : BOOL
21 : 255 { 0xff -1 } : BV:8
22 : 1186986736 { 0x46bffaf0 +1.49984550e14 } : BV:32
23 : eq(15, 22) : BOOL
24 : 1186986739 { 0x46bffaf3 +1.49984586e14 } : BV:32
25 : eq(15, 24) : BOOL
26 : 1186986738 { 0x46bffaf2 +1.49984574e14 } : BV:32
27 : eq(15, 26) : BOOL
28 : 343389909 { 0x1477b6d5 +1.93526709e169 } : BV:32
29 : eq(15, 28) : BOOL
30 : 254 { 0xfe -2 } : BV:8
31 : 343389911 { 0x1477b6d7 +1.93526732e169 } : BV:32
32 : eq(15, 31) : BOOL
33 : 231 { 0xe7 -25 } : BV:8
34 : 4 { 0x4 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(29, 30, 35) : BV:8
37 : ite(27, 18, 36) : BV:8
38 : ite(25, 18, 37) : BV:8
39 : ite(23, 18, 38) : BV:8
40 : ite(20, 21, 39) : BV:8
41 : ite(17, 18, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 13, 14) : BV:32
44 : eq(43, 16) : BOOL
45 : eq(43, 19) : BOOL
46 : eq(43, 22) : BOOL
47 : eq(43, 24) : BOOL
48 : eq(43, 26) : BOOL
49 : eq(43, 28) : BOOL
50 : eq(43, 31) : BOOL
51 : ite(50, 33, 34) : BV:8
52 : ite(49, 30, 51) : BV:8
53 : ite(48, 18, 52) : BV:8
54 : ite(47, 18, 53) : BV:8
55 : ite(46, 18, 54) : BV:8
56 : ite(45, 21, 55) : BV:8
57 : ite(44, 18, 56) : BV:8
58 : 1 { 0x1 +1.11e129 } : BV:32
59 : bvadd(58, 13, 14) : BV:32
60 : eq(59, 16) : BOOL
61 : eq(59, 19) : BOOL
62 : eq(59, 22) : BOOL
63 : eq(59, 24) : BOOL
64 : eq(59, 26) : BOOL
65 : eq(59, 28) : BOOL
66 : eq(59, 31) : BOOL
67 : ite(66, 33, 34) : BV:8
68 : ite(65, 30, 67) : BV:8
69 : ite(64, 18, 68) : BV:8
70 : ite(63, 18, 69) : BV:8
71 : ite(62, 18, 70) : BV:8
72 : ite(61, 21, 71) : BV:8
73 : ite(60, 18, 72) : BV:8
74 : bvadd(13, 14) : BV:32
75 : eq(74, 16) : BOOL
76 : eq(74, 19) : BOOL
77 : eq(74, 22) : BOOL
78 : eq(74, 24) : BOOL
79 : eq(74, 26) : BOOL
80 : eq(74, 28) : BOOL
81 : eq(74, 31) : BOOL
82 : ite(81, 33, 34) : BV:8
83 : ite(80, 30, 82) : BV:8
84 : ite(79, 18, 83) : BV:8
85 : ite(78, 18, 84) : BV:8
86 : ite(77, 18, 85) : BV:8
87 : ite(76, 21, 86) : BV:8
88 : ite(75, 18, 87) : BV:8
89 : bvconcat(41, 57, 73, 88) : BV:32
90 : lambda(10, 89) : FUNCTION[BV:32 -> BV:32]
91 : map(9, 90) : MAP[BV:32 -> BV:32]
92 : sym_const(91) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L3%6%bbentry
1 : Lambda203 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda204 : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(12, 10) : BV:32
14 : 3892313604 { 0xe7fffe04 -402653692 -1.99993944e80 } : BV:32
15 : bvadd(11, 13, 14) : BV:32
16 : 1186986737 { 0x46bffaf1 +1.49984562e14 } : BV:32
17 : eq(15, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : 343389910 { 0x1477b6d6 +1.93526721e169 } : BV:32
20 : eq(15, 19) : BOOL
21 : 255 { 0xff -1 } : BV:8
22 : 1186986736 { 0x46bffaf0 +1.49984550e14 } : BV:32
23 : eq(15, 22) : BOOL
24 : 1186986739 { 0x46bffaf3 +1.49984586e14 } : BV:32
25 : eq(15, 24) : BOOL
26 : 1186986738 { 0x46bffaf2 +1.49984574e14 } : BV:32
27 : eq(15, 26) : BOOL
28 : 343389909 { 0x1477b6d5 +1.93526709e169 } : BV:32
29 : eq(15, 28) : BOOL
30 : 254 { 0xfe -2 } : BV:8
31 : 343389911 { 0x1477b6d7 +1.93526732e169 } : BV:32
32 : eq(15, 31) : BOOL
33 : 231 { 0xe7 -25 } : BV:8
34 : 4 { 0x4 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(29, 30, 35) : BV:8
37 : ite(27, 18, 36) : BV:8
38 : ite(25, 18, 37) : BV:8
39 : ite(23, 18, 38) : BV:8
40 : ite(20, 21, 39) : BV:8
41 : ite(17, 18, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 13, 14) : BV:32
44 : eq(43, 16) : BOOL
45 : eq(43, 19) : BOOL
46 : eq(43, 22) : BOOL
47 : eq(43, 24) : BOOL
48 : eq(43, 26) : BOOL
49 : eq(43, 28) : BOOL
50 : eq(43, 31) : BOOL
51 : ite(50, 33, 34) : BV:8
52 : ite(49, 30, 51) : BV:8
53 : ite(48, 18, 52) : BV:8
54 : ite(47, 18, 53) : BV:8
55 : ite(46, 18, 54) : BV:8
56 : ite(45, 21, 55) : BV:8
57 : ite(44, 18, 56) : BV:8
58 : 1 { 0x1 +1.11e129 } : BV:32
59 : bvadd(58, 13, 14) : BV:32
60 : eq(59, 16) : BOOL
61 : eq(59, 19) : BOOL
62 : eq(59, 22) : BOOL
63 : eq(59, 24) : BOOL
64 : eq(59, 26) : BOOL
65 : eq(59, 28) : BOOL
66 : eq(59, 31) : BOOL
67 : ite(66, 33, 34) : BV:8
68 : ite(65, 30, 67) : BV:8
69 : ite(64, 18, 68) : BV:8
70 : ite(63, 18, 69) : BV:8
71 : ite(62, 18, 70) : BV:8
72 : ite(61, 21, 71) : BV:8
73 : ite(60, 18, 72) : BV:8
74 : bvadd(13, 14) : BV:32
75 : eq(74, 16) : BOOL
76 : eq(74, 19) : BOOL
77 : eq(74, 22) : BOOL
78 : eq(74, 24) : BOOL
79 : eq(74, 26) : BOOL
80 : eq(74, 28) : BOOL
81 : eq(74, 31) : BOOL
82 : ite(81, 33, 34) : BV:8
83 : ite(80, 30, 82) : BV:8
84 : ite(79, 18, 83) : BV:8
85 : ite(78, 18, 84) : BV:8
86 : ite(77, 18, 85) : BV:8
87 : ite(76, 21, 86) : BV:8
88 : ite(75, 18, 87) : BV:8
89 : bvconcat(41, 57, 73, 88) : BV:32
90 : lambda(10, 89) : FUNCTION[BV:32 -> BV:32]
91 : map(9, 90) : MAP[BV:32 -> BV:32]
92 : sym_const(91) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-5.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-0.L3%7%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%tmpvar-6.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 3892313604 { 0xe7fffe04 -402653692 -1.99993944e80 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 343389908 ] -> 4, [ 343389909; 343389909 ] -> 254, [ 343389910; 343389910 ] -> 255, [ 343389911; 343389911 ] -> 231, [ 343389912; 1186986735 ] -> 4, [ 1186986736; 1186986739 ] -> 0, [ 1186986740; 4294967295 ] -> 4, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 343389907 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 343389908; 343389911 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 343389912; 1186986735 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1186986736; 1186986739 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1186986740; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 343389908 { 0x1477b6d4 +1.93526697e169 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1186986736 { 0x46bffaf0 +1.49984550e14 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-0.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%6%bbentry.1.1
1 : Lambda191 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(3, 1) : BV:32
5 : 3892313604 { 0xe7fffe04 -402653692 -1.99993944e80 } : BV:32
6 : bvadd(2, 4, 5) : BV:32
7 : 1186986737 { 0x46bffaf1 +1.49984562e14 } : BV:32
8 : eq(6, 7) : BOOL
9 : 0 { 0x0 } : BV:8
10 : 343389910 { 0x1477b6d6 +1.93526721e169 } : BV:32
11 : eq(6, 10) : BOOL
12 : 255 { 0xff -1 } : BV:8
13 : 1186986736 { 0x46bffaf0 +1.49984550e14 } : BV:32
14 : eq(6, 13) : BOOL
15 : 1186986739 { 0x46bffaf3 +1.49984586e14 } : BV:32
16 : eq(6, 15) : BOOL
17 : 1186986738 { 0x46bffaf2 +1.49984574e14 } : BV:32
18 : eq(6, 17) : BOOL
19 : 343389909 { 0x1477b6d5 +1.93526709e169 } : BV:32
20 : eq(6, 19) : BOOL
21 : 254 { 0xfe -2 } : BV:8
22 : 343389911 { 0x1477b6d7 +1.93526732e169 } : BV:32
23 : eq(6, 22) : BOOL
24 : 231 { 0xe7 -25 } : BV:8
25 : 4 { 0x4 } : BV:8
26 : ite(23, 24, 25) : BV:8
27 : ite(20, 21, 26) : BV:8
28 : ite(18, 9, 27) : BV:8
29 : ite(16, 9, 28) : BV:8
30 : ite(14, 9, 29) : BV:8
31 : ite(11, 12, 30) : BV:8
32 : ite(8, 9, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 4, 5) : BV:32
35 : eq(34, 7) : BOOL
36 : eq(34, 10) : BOOL
37 : eq(34, 13) : BOOL
38 : eq(34, 15) : BOOL
39 : eq(34, 17) : BOOL
40 : eq(34, 19) : BOOL
41 : eq(34, 22) : BOOL
42 : ite(41, 24, 25) : BV:8
43 : ite(40, 21, 42) : BV:8
44 : ite(39, 9, 43) : BV:8
45 : ite(38, 9, 44) : BV:8
46 : ite(37, 9, 45) : BV:8
47 : ite(36, 12, 46) : BV:8
48 : ite(35, 9, 47) : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : bvadd(49, 4, 5) : BV:32
51 : eq(50, 7) : BOOL
52 : eq(50, 10) : BOOL
53 : eq(50, 13) : BOOL
54 : eq(50, 15) : BOOL
55 : eq(50, 17) : BOOL
56 : eq(50, 19) : BOOL
57 : eq(50, 22) : BOOL
58 : ite(57, 24, 25) : BV:8
59 : ite(56, 21, 58) : BV:8
60 : ite(55, 9, 59) : BV:8
61 : ite(54, 9, 60) : BV:8
62 : ite(53, 9, 61) : BV:8
63 : ite(52, 12, 62) : BV:8
64 : ite(51, 9, 63) : BV:8
65 : bvadd(4, 5) : BV:32
66 : eq(65, 7) : BOOL
67 : eq(65, 10) : BOOL
68 : eq(65, 13) : BOOL
69 : eq(65, 15) : BOOL
70 : eq(65, 17) : BOOL
71 : eq(65, 19) : BOOL
72 : eq(65, 22) : BOOL
73 : ite(72, 24, 25) : BV:8
74 : ite(71, 21, 73) : BV:8
75 : ite(70, 9, 74) : BV:8
76 : ite(69, 9, 75) : BV:8
77 : ite(68, 9, 76) : BV:8
78 : ite(67, 12, 77) : BV:8
79 : ite(66, 9, 78) : BV:8
80 : bvconcat(32, 48, 64, 79) : BV:32
81 : lambda(1, 80) : FUNCTION[BV:32 -> BV:32]
82 : sym_const(81) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : Lambda192 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(3, 1) : BV:32
5 : 3892313604 { 0xe7fffe04 -402653692 -1.99993944e80 } : BV:32
6 : bvadd(2, 4, 5) : BV:32
7 : 1186986737 { 0x46bffaf1 +1.49984562e14 } : BV:32
8 : eq(6, 7) : BOOL
9 : 0 { 0x0 } : BV:8
10 : 343389910 { 0x1477b6d6 +1.93526721e169 } : BV:32
11 : eq(6, 10) : BOOL
12 : 255 { 0xff -1 } : BV:8
13 : 1186986736 { 0x46bffaf0 +1.49984550e14 } : BV:32
14 : eq(6, 13) : BOOL
15 : 1186986739 { 0x46bffaf3 +1.49984586e14 } : BV:32
16 : eq(6, 15) : BOOL
17 : 1186986738 { 0x46bffaf2 +1.49984574e14 } : BV:32
18 : eq(6, 17) : BOOL
19 : 343389909 { 0x1477b6d5 +1.93526709e169 } : BV:32
20 : eq(6, 19) : BOOL
21 : 254 { 0xfe -2 } : BV:8
22 : 343389911 { 0x1477b6d7 +1.93526732e169 } : BV:32
23 : eq(6, 22) : BOOL
24 : 231 { 0xe7 -25 } : BV:8
25 : 4 { 0x4 } : BV:8
26 : ite(23, 24, 25) : BV:8
27 : ite(20, 21, 26) : BV:8
28 : ite(18, 9, 27) : BV:8
29 : ite(16, 9, 28) : BV:8
30 : ite(14, 9, 29) : BV:8
31 : ite(11, 12, 30) : BV:8
32 : ite(8, 9, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 4, 5) : BV:32
35 : eq(34, 7) : BOOL
36 : eq(34, 10) : BOOL
37 : eq(34, 13) : BOOL
38 : eq(34, 15) : BOOL
39 : eq(34, 17) : BOOL
40 : eq(34, 19) : BOOL
41 : eq(34, 22) : BOOL
42 : ite(41, 24, 25) : BV:8
43 : ite(40, 21, 42) : BV:8
44 : ite(39, 9, 43) : BV:8
45 : ite(38, 9, 44) : BV:8
46 : ite(37, 9, 45) : BV:8
47 : ite(36, 12, 46) : BV:8
48 : ite(35, 9, 47) : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : bvadd(49, 4, 5) : BV:32
51 : eq(50, 7) : BOOL
52 : eq(50, 10) : BOOL
53 : eq(50, 13) : BOOL
54 : eq(50, 15) : BOOL
55 : eq(50, 17) : BOOL
56 : eq(50, 19) : BOOL
57 : eq(50, 22) : BOOL
58 : ite(57, 24, 25) : BV:8
59 : ite(56, 21, 58) : BV:8
60 : ite(55, 9, 59) : BV:8
61 : ite(54, 9, 60) : BV:8
62 : ite(53, 9, 61) : BV:8
63 : ite(52, 12, 62) : BV:8
64 : ite(51, 9, 63) : BV:8
65 : bvadd(4, 5) : BV:32
66 : eq(65, 7) : BOOL
67 : eq(65, 10) : BOOL
68 : eq(65, 13) : BOOL
69 : eq(65, 15) : BOOL
70 : eq(65, 17) : BOOL
71 : eq(65, 19) : BOOL
72 : eq(65, 22) : BOOL
73 : ite(72, 24, 25) : BV:8
74 : ite(71, 21, 73) : BV:8
75 : ite(70, 9, 74) : BV:8
76 : ite(69, 9, 75) : BV:8
77 : ite(68, 9, 76) : BV:8
78 : ite(67, 12, 77) : BV:8
79 : ite(66, 9, 78) : BV:8
80 : bvconcat(32, 48, 64, 79) : BV:32
81 : lambda(1, 80) : FUNCTION[BV:32 -> BV:32]
82 : sym_const(81) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-indir_tgt.E0%0%d
1 : 284297263 { 0x10f2082f +1.89087474e162 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 1494980014 { 0x591b95ae +1.21550536e51 } : BV:32
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1935754076 { 0x7361435c +1.75986814e103 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1186986736 { 0x46bffaf0 +1.49984550e14 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1186986739 { 0x46bffaf3 +1.49984586e14 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 343389908 { 0x1477b6d4 +1.93526697e169 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 343389911 { 0x1477b6d7 +1.93526732e169 } : BV:32
=counter_example.random_seed
888792221
=counter_example_end
=global nodece 31 num_edges_traversed 2
=global nodece 31 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 32
=global nodece 32 nodece z3.ce973.num_edges_traversed2
=global nodece 32 nodece_path
=global nodece 32 nodece_path.graph_edge_composition
(epsilon)
=global nodece 32 nodece_cached_counterexample
=counter_example_begin z3.ce973 4b6566f57c7557890695a4fd4988850
=retaddr_const
1 : 944326435 { 0x38494723 +1.57248342e241 } : BV:32
=input.spec-%var-x-1
1 : Lambda1014 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 5 { 0x5 +1.59e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1015 : BV:32
18 : eq(17, 4) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 2, 28) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L3%6%bbentry
1 : Lambda1018 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 5 { 0x5 +1.59e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1019 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-5.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-0.L3%7%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : sum(1, 2, 1) : SUM[UNIT,BV:32]
4 : sym_const(3) : SUM[UNIT,BV:32]
=input.spec-%tmpvar-6.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 341993214 { 0x146266fe +1.76876807e169 } : BV:32
=input.dst.llvm-%x
1 : 2147483632 { 0x7ffffff0 +1.99999809e128 } : BV:32
=input.dst.llvm-%n
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1483435583 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1483435584; 1483435587 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1483435588; 4109071695 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4109071696; 4109071699 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4109071700; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4109071696 { 0xf4eb7550 -185895600 -1.83951759e106 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1483435584 { 0x586b6e40 +1.83930206e49 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%tmpvar-9.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-0.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%6%bbentry.0.1
1 : ([ 0; 4 ] -> true, [ 5; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4 ] -> true, [ 5; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : Lambda1000 : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 1) : BOOL
6 : bvule(1, 2) : BOOL
7 : and(5, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 5 { 0x5 +1.59e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(5, 12) : BOOL
18 : ite(17, 4, 4) : BV:32
19 : ite(16, 4, 18) : BV:32
20 : ite(3, 4, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1268517714 { 0x4b9c0b52 +1.21909546e24 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-indir_tgt.E0%0%d
1 : 944326435 { 0x38494723 +1.57248342e241 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 1886278861 { 0x706e54cd +1.86196291e97 } : BV:32
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1483435584 { 0x586b6e40 +1.83930206e49 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1483435587 { 0x586b6e43 +1.83930242e49 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4109071696 { 0xf4eb7550 -185895600 -1.83951759e106 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 4109071699 { 0xf4eb7553 -185895597 -1.83951795e106 } : BV:32
=counter_example.random_seed
4123675927
=counter_example_end
=global nodece 32 num_edges_traversed 2
=global nodece 32 nodece_visted_pcs: 
E0%0%d_E0%0%d
=graph_with_ce done
=point_set for reason inductive-invariants
=inductive-invariants point_set global exprs map
=inductive-invariants point_set point_expr 1
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : bvuge(1, 10) : BOOL
18 : bvule(1, 11) : BOOL
19 : and(17, 18) : BOOL
20 : bvuge(2, 10) : BOOL
21 : bvule(2, 11) : BOOL
22 : and(20, 21) : BOOL
23 : not(22) : BOOL
24 : andnot1(19, 23) : BOOL
25 : bvuge(10, 1) : BOOL
26 : bvule(10, 2) : BOOL
27 : and(25, 26) : BOOL
28 : bvuge(11, 1) : BOOL
29 : bvule(11, 2) : BOOL
30 : and(28, 29) : BOOL
31 : not(30) : BOOL
32 : andnot1(27, 31) : BOOL
33 : and(24, 32) : BOOL
34 : and(16, 33) : BOOL
35 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
36 : 3 { 0x3 +1.35e129 } : BV:32
37 : bvand(35, 36) : BV:32
38 : 0 { 0x0 +1.0e129 } : BV:32
39 : eq(37, 38) : BOOL
40 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
41 : bvand(40, 36) : BV:32
42 : eq(41, 38) : BOOL
43 : and(39, 42) : BOOL
44 : and(34, 43) : BOOL
45 : eq(35, 1) : BOOL
46 : eq(40, 10) : BOOL
47 : and(45, 46) : BOOL
48 : and(44, 47) : BOOL
49 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
50 : 1 { 0x1 +1.11e129 } : BV:32
51 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
52 : region_agrees_with_memlabel(49, 38, 50, 51) : BOOL
53 : and(48, 52) : BOOL
=inductive-invariants point_set point_expr 2
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
=inductive-invariants point_set point_expr 3
1 : input.spec-%var-ret-0.L3%6%bbentry : BV:32
=inductive-invariants point_set point_expr 4
1 : input.dst.llvm-%x : BV:32
=inductive-invariants point_set point_expr 5
1 : input.dst.llvm-%n : BV:32
=inductive-invariants point_set point_expr 6
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=inductive-invariants point_set point_expr 7
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=inductive-invariants point_set point_expr 8
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 9
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 10
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 11
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 12
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 13
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 14
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 15
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 16
1 : input.spec-%var-x-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%x : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 17
1 : input.spec-%var-x-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%x : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 18
1 : input.spec-%var-x-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%x : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : bvadd(14, 5) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(10, 11, 12, 15, 16, 17) : BV:32
19 : lambda(9, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(8, 19) : MAP[BV:32 -> BV:32]
21 : eq(1, 20) : BOOL
=inductive-invariants point_set point_expr 19
1 : input.spec-%var-x-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%x : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 20
1 : input.spec-%var-x-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%x : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 21
1 : spec-%var-x-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%x : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set global exprs map done
=inductive-invariants point_set points
=inductive-invariants point_set point z3.ce4
=inductive-invariants point_set point z3.ce4 expr point z3.ce4
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 val 3 for input.spec-%var-ret-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 done
=inductive-invariants point_set point z3v487.ce3
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 val 3 for input.spec-%var-ret-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 done
=inductive-invariants point_set point z3.ce23
=inductive-invariants point_set point z3.ce23 expr point z3.ce23
=inductive-invariants point_set point z3.ce23 expr point z3.ce23 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce23 expr point z3.ce23 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce23 expr point z3.ce23 val 3 for input.spec-%var-ret-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce23 expr point z3.ce23 val 4 for input.dst.llvm-%x
3221208576
=inductive-invariants point_set point z3.ce23 expr point z3.ce23 val 5 for input.dst.llvm-%n
3200171522
=inductive-invariants point_set point z3.ce23 expr point z3.ce23 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce23 expr point z3.ce23 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce23 expr point z3.ce23 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce23 expr point z3.ce23 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce23 expr point z3.ce23 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce23 expr point z3.ce23 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce23 expr point z3.ce23 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce23 expr point z3.ce23 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce23 expr point z3.ce23 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce23 expr point z3.ce23 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce23 expr point z3.ce23 done
=inductive-invariants point_set point z3v487.ce24
=inductive-invariants point_set point z3v487.ce24 expr point z3v487.ce24
=inductive-invariants point_set point z3v487.ce24 expr point z3v487.ce24 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce24 expr point z3v487.ce24 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce24 expr point z3v487.ce24 val 3 for input.spec-%var-ret-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce24 expr point z3v487.ce24 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce24 expr point z3v487.ce24 val 5 for input.dst.llvm-%n
4096
=inductive-invariants point_set point z3v487.ce24 expr point z3v487.ce24 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce24 expr point z3v487.ce24 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce24 expr point z3v487.ce24 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce24 expr point z3v487.ce24 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce24 expr point z3v487.ce24 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce24 expr point z3v487.ce24 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce24 expr point z3v487.ce24 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce24 expr point z3v487.ce24 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce24 expr point z3v487.ce24 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce24 expr point z3v487.ce24 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce24 expr point z3v487.ce24 done
=inductive-invariants point_set point z3.ce203
=inductive-invariants point_set point z3.ce203 expr point z3.ce203
=inductive-invariants point_set point z3.ce203 expr point z3.ce203 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce203 expr point z3.ce203 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce203 expr point z3.ce203 val 3 for input.spec-%var-ret-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce203 expr point z3.ce203 val 4 for input.dst.llvm-%x
1160970752
=inductive-invariants point_set point z3.ce203 expr point z3.ce203 val 5 for input.dst.llvm-%n
219677732
=inductive-invariants point_set point z3.ce203 expr point z3.ce203 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce203 expr point z3.ce203 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce203 expr point z3.ce203 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce203 expr point z3.ce203 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce203 expr point z3.ce203 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce203 expr point z3.ce203 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce203 expr point z3.ce203 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce203 expr point z3.ce203 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce203 expr point z3.ce203 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce203 expr point z3.ce203 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce203 expr point z3.ce203 done
=inductive-invariants point_set point z3v487.ce204
=inductive-invariants point_set point z3v487.ce204 expr point z3v487.ce204
=inductive-invariants point_set point z3v487.ce204 expr point z3v487.ce204 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce204 expr point z3v487.ce204 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce204 expr point z3v487.ce204 val 3 for input.spec-%var-ret-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce204 expr point z3v487.ce204 val 4 for input.dst.llvm-%x
263232
=inductive-invariants point_set point z3v487.ce204 expr point z3v487.ce204 val 5 for input.dst.llvm-%n
35403
=inductive-invariants point_set point z3v487.ce204 expr point z3v487.ce204 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce204 expr point z3v487.ce204 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce204 expr point z3v487.ce204 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce204 expr point z3v487.ce204 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce204 expr point z3v487.ce204 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce204 expr point z3v487.ce204 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce204 expr point z3v487.ce204 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce204 expr point z3v487.ce204 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce204 expr point z3v487.ce204 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce204 expr point z3v487.ce204 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce204 expr point z3v487.ce204 done
=inductive-invariants point_set point z3.ce223
=inductive-invariants point_set point z3.ce223 expr point z3.ce223
=inductive-invariants point_set point z3.ce223 expr point z3.ce223 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce223 expr point z3.ce223 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce223 expr point z3.ce223 val 3 for input.spec-%var-ret-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce223 expr point z3.ce223 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce223 expr point z3.ce223 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce223 expr point z3.ce223 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce223 expr point z3.ce223 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce223 expr point z3.ce223 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce223 expr point z3.ce223 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce223 expr point z3.ce223 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce223 expr point z3.ce223 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce223 expr point z3.ce223 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce223 expr point z3.ce223 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce223 expr point z3.ce223 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce223 expr point z3.ce223 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce223 expr point z3.ce223 done
=inductive-invariants point_set point z3v487.ce224
=inductive-invariants point_set point z3v487.ce224 expr point z3v487.ce224
=inductive-invariants point_set point z3v487.ce224 expr point z3v487.ce224 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce224 expr point z3v487.ce224 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce224 expr point z3v487.ce224 val 3 for input.spec-%var-ret-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce224 expr point z3v487.ce224 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce224 expr point z3v487.ce224 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce224 expr point z3v487.ce224 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce224 expr point z3v487.ce224 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce224 expr point z3v487.ce224 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce224 expr point z3v487.ce224 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce224 expr point z3v487.ce224 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce224 expr point z3v487.ce224 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce224 expr point z3v487.ce224 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce224 expr point z3v487.ce224 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce224 expr point z3v487.ce224 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce224 expr point z3v487.ce224 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce224 expr point z3v487.ce224 done
=inductive-invariants point_set point z3v487.ce43
=inductive-invariants point_set point z3v487.ce43 expr point z3v487.ce43
=inductive-invariants point_set point z3v487.ce43 expr point z3v487.ce43 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce43 expr point z3v487.ce43 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce43 expr point z3v487.ce43 val 3 for input.spec-%var-ret-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce43 expr point z3v487.ce43 val 4 for input.dst.llvm-%x
2155872640
=inductive-invariants point_set point z3v487.ce43 expr point z3v487.ce43 val 5 for input.dst.llvm-%n
2155905152
=inductive-invariants point_set point z3v487.ce43 expr point z3v487.ce43 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce43 expr point z3v487.ce43 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce43 expr point z3v487.ce43 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce43 expr point z3v487.ce43 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce43 expr point z3v487.ce43 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce43 expr point z3v487.ce43 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce43 expr point z3v487.ce43 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce43 expr point z3v487.ce43 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce43 expr point z3v487.ce43 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce43 expr point z3v487.ce43 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce43 expr point z3v487.ce43 done
=inductive-invariants point_set point z3.ce44
=inductive-invariants point_set point z3.ce44 expr point z3.ce44
=inductive-invariants point_set point z3.ce44 expr point z3.ce44 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce44 expr point z3.ce44 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce44 expr point z3.ce44 val 3 for input.spec-%var-ret-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce44 expr point z3.ce44 val 4 for input.dst.llvm-%x
256
=inductive-invariants point_set point z3.ce44 expr point z3.ce44 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce44 expr point z3.ce44 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce44 expr point z3.ce44 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce44 expr point z3.ce44 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce44 expr point z3.ce44 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce44 expr point z3.ce44 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce44 expr point z3.ce44 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce44 expr point z3.ce44 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce44 expr point z3.ce44 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce44 expr point z3.ce44 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce44 expr point z3.ce44 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce44 expr point z3.ce44 done
=inductive-invariants point_set point z3.ce63
=inductive-invariants point_set point z3.ce63 expr point z3.ce63
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 3 for input.spec-%var-ret-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 4 for input.dst.llvm-%x
4138331904
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 5 for input.dst.llvm-%n
4025478913
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 done
=inductive-invariants point_set point z3v487.ce64
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 3 for input.spec-%var-ret-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 done
=inductive-invariants point_set point z3.ce143
=inductive-invariants point_set point z3.ce143 expr point z3.ce143
=inductive-invariants point_set point z3.ce143 expr point z3.ce143 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce143 expr point z3.ce143 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce143 expr point z3.ce143 val 3 for input.spec-%var-ret-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce143 expr point z3.ce143 val 4 for input.dst.llvm-%x
2726879776
=inductive-invariants point_set point z3.ce143 expr point z3.ce143 val 5 for input.dst.llvm-%n
174653447
=inductive-invariants point_set point z3.ce143 expr point z3.ce143 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce143 expr point z3.ce143 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce143 expr point z3.ce143 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce143 expr point z3.ce143 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce143 expr point z3.ce143 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce143 expr point z3.ce143 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce143 expr point z3.ce143 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce143 expr point z3.ce143 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce143 expr point z3.ce143 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce143 expr point z3.ce143 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce143 expr point z3.ce143 done
=inductive-invariants point_set point z3v487.ce144
=inductive-invariants point_set point z3v487.ce144 expr point z3v487.ce144
=inductive-invariants point_set point z3v487.ce144 expr point z3v487.ce144 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce144 expr point z3v487.ce144 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce144 expr point z3v487.ce144 val 3 for input.spec-%var-ret-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce144 expr point z3v487.ce144 val 4 for input.dst.llvm-%x
252
=inductive-invariants point_set point z3v487.ce144 expr point z3v487.ce144 val 5 for input.dst.llvm-%n
64837577
=inductive-invariants point_set point z3v487.ce144 expr point z3v487.ce144 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce144 expr point z3v487.ce144 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce144 expr point z3v487.ce144 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce144 expr point z3v487.ce144 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce144 expr point z3v487.ce144 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce144 expr point z3v487.ce144 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce144 expr point z3v487.ce144 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce144 expr point z3v487.ce144 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce144 expr point z3v487.ce144 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce144 expr point z3v487.ce144 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce144 expr point z3v487.ce144 done
=inductive-invariants point_set point z3.ce83
=inductive-invariants point_set point z3.ce83 expr point z3.ce83
=inductive-invariants point_set point z3.ce83 expr point z3.ce83 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce83 expr point z3.ce83 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce83 expr point z3.ce83 val 3 for input.spec-%var-ret-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce83 expr point z3.ce83 val 4 for input.dst.llvm-%x
3892313664
=inductive-invariants point_set point z3.ce83 expr point z3.ce83 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce83 expr point z3.ce83 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce83 expr point z3.ce83 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce83 expr point z3.ce83 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce83 expr point z3.ce83 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce83 expr point z3.ce83 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce83 expr point z3.ce83 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce83 expr point z3.ce83 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce83 expr point z3.ce83 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce83 expr point z3.ce83 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce83 expr point z3.ce83 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce83 expr point z3.ce83 done
=inductive-invariants point_set point z3v487.ce84
=inductive-invariants point_set point z3v487.ce84 expr point z3v487.ce84
=inductive-invariants point_set point z3v487.ce84 expr point z3v487.ce84 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce84 expr point z3v487.ce84 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce84 expr point z3v487.ce84 val 3 for input.spec-%var-ret-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce84 expr point z3v487.ce84 val 4 for input.dst.llvm-%x
1077952576
=inductive-invariants point_set point z3v487.ce84 expr point z3v487.ce84 val 5 for input.dst.llvm-%n
1077952576
=inductive-invariants point_set point z3v487.ce84 expr point z3v487.ce84 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce84 expr point z3v487.ce84 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce84 expr point z3v487.ce84 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce84 expr point z3v487.ce84 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce84 expr point z3v487.ce84 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce84 expr point z3v487.ce84 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce84 expr point z3v487.ce84 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce84 expr point z3v487.ce84 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce84 expr point z3v487.ce84 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce84 expr point z3v487.ce84 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce84 expr point z3v487.ce84 done
=inductive-invariants point_set point z3.ce103
=inductive-invariants point_set point z3.ce103 expr point z3.ce103
=inductive-invariants point_set point z3.ce103 expr point z3.ce103 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce103 expr point z3.ce103 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce103 expr point z3.ce103 val 3 for input.spec-%var-ret-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce103 expr point z3.ce103 val 4 for input.dst.llvm-%x
3892313604
=inductive-invariants point_set point z3.ce103 expr point z3.ce103 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce103 expr point z3.ce103 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce103 expr point z3.ce103 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce103 expr point z3.ce103 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce103 expr point z3.ce103 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce103 expr point z3.ce103 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce103 expr point z3.ce103 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce103 expr point z3.ce103 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce103 expr point z3.ce103 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce103 expr point z3.ce103 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce103 expr point z3.ce103 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce103 expr point z3.ce103 done
=inductive-invariants point_set point z3v487.ce104
=inductive-invariants point_set point z3v487.ce104 expr point z3v487.ce104
=inductive-invariants point_set point z3v487.ce104 expr point z3v487.ce104 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce104 expr point z3v487.ce104 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce104 expr point z3v487.ce104 val 3 for input.spec-%var-ret-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce104 expr point z3v487.ce104 val 4 for input.dst.llvm-%x
538976288
=inductive-invariants point_set point z3v487.ce104 expr point z3v487.ce104 val 5 for input.dst.llvm-%n
538976288
=inductive-invariants point_set point z3v487.ce104 expr point z3v487.ce104 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce104 expr point z3v487.ce104 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce104 expr point z3v487.ce104 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce104 expr point z3v487.ce104 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce104 expr point z3v487.ce104 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce104 expr point z3v487.ce104 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce104 expr point z3v487.ce104 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce104 expr point z3v487.ce104 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce104 expr point z3v487.ce104 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce104 expr point z3v487.ce104 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce104 expr point z3v487.ce104 done
=inductive-invariants point_set point z3.ce123
=inductive-invariants point_set point z3.ce123 expr point z3.ce123
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 3 for input.spec-%var-ret-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 4 for input.dst.llvm-%x
1003224064
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 done
=inductive-invariants point_set point z3v487.ce124
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 3 for input.spec-%var-ret-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 4 for input.dst.llvm-%x
4294967040
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 done
=inductive-invariants point_set point z3.ce163
=inductive-invariants point_set point z3.ce163 expr point z3.ce163
=inductive-invariants point_set point z3.ce163 expr point z3.ce163 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce163 expr point z3.ce163 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce163 expr point z3.ce163 val 3 for input.spec-%var-ret-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce163 expr point z3.ce163 val 4 for input.dst.llvm-%x
2726879776
=inductive-invariants point_set point z3.ce163 expr point z3.ce163 val 5 for input.dst.llvm-%n
174653447
=inductive-invariants point_set point z3.ce163 expr point z3.ce163 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce163 expr point z3.ce163 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce163 expr point z3.ce163 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce163 expr point z3.ce163 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce163 expr point z3.ce163 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce163 expr point z3.ce163 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce163 expr point z3.ce163 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce163 expr point z3.ce163 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce163 expr point z3.ce163 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce163 expr point z3.ce163 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce163 expr point z3.ce163 done
=inductive-invariants point_set point z3v487.ce164
=inductive-invariants point_set point z3v487.ce164 expr point z3v487.ce164
=inductive-invariants point_set point z3v487.ce164 expr point z3v487.ce164 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce164 expr point z3v487.ce164 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce164 expr point z3v487.ce164 val 3 for input.spec-%var-ret-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce164 expr point z3v487.ce164 val 4 for input.dst.llvm-%x
252
=inductive-invariants point_set point z3v487.ce164 expr point z3v487.ce164 val 5 for input.dst.llvm-%n
64837577
=inductive-invariants point_set point z3v487.ce164 expr point z3v487.ce164 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce164 expr point z3v487.ce164 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce164 expr point z3v487.ce164 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce164 expr point z3v487.ce164 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce164 expr point z3v487.ce164 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce164 expr point z3v487.ce164 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce164 expr point z3v487.ce164 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce164 expr point z3v487.ce164 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce164 expr point z3v487.ce164 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce164 expr point z3v487.ce164 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce164 expr point z3v487.ce164 done
=inductive-invariants point_set point z3.ce183
=inductive-invariants point_set point z3.ce183 expr point z3.ce183
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 3 for input.spec-%var-ret-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 4 for input.dst.llvm-%x
3713859064
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 done
=inductive-invariants point_set point z3v487.ce184
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 3 for input.spec-%var-ret-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 4 for input.dst.llvm-%x
17827072
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 done
=inductive-invariants point_set point z3.ce571
=inductive-invariants point_set point z3.ce571 expr point z3.ce571
=inductive-invariants point_set point z3.ce571 expr point z3.ce571 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce571 expr point z3.ce571 val 2 for input.spec-%var-i-0.L3%6%bbentry
1
=inductive-invariants point_set point z3.ce571 expr point z3.ce571 val 3 for input.spec-%var-ret-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce571 expr point z3.ce571 val 4 for input.dst.llvm-%x
4050619148
=inductive-invariants point_set point z3.ce571 expr point z3.ce571 val 5 for input.dst.llvm-%n
4096
=inductive-invariants point_set point z3.ce571 expr point z3.ce571 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce571 expr point z3.ce571 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce571 expr point z3.ce571 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce571 expr point z3.ce571 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce571 expr point z3.ce571 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce571 expr point z3.ce571 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce571 expr point z3.ce571 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce571 expr point z3.ce571 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce571 expr point z3.ce571 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce571 expr point z3.ce571 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce571 expr point z3.ce571 done
=inductive-invariants point_set point z3v487.ce581
=inductive-invariants point_set point z3v487.ce581 expr point z3v487.ce581
=inductive-invariants point_set point z3v487.ce581 expr point z3v487.ce581 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce581 expr point z3v487.ce581 val 2 for input.spec-%var-i-0.L3%6%bbentry
1
=inductive-invariants point_set point z3v487.ce581 expr point z3v487.ce581 val 3 for input.spec-%var-ret-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce581 expr point z3v487.ce581 val 4 for input.dst.llvm-%x
2765095248
=inductive-invariants point_set point z3v487.ce581 expr point z3v487.ce581 val 5 for input.dst.llvm-%n
2147483648
=inductive-invariants point_set point z3v487.ce581 expr point z3v487.ce581 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce581 expr point z3v487.ce581 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce581 expr point z3v487.ce581 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce581 expr point z3v487.ce581 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce581 expr point z3v487.ce581 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce581 expr point z3v487.ce581 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce581 expr point z3v487.ce581 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce581 expr point z3v487.ce581 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce581 expr point z3v487.ce581 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce581 expr point z3v487.ce581 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce581 expr point z3v487.ce581 done
=inductive-invariants point_set point z3.ce656
=inductive-invariants point_set point z3.ce656 expr point z3.ce656
=inductive-invariants point_set point z3.ce656 expr point z3.ce656 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce656 expr point z3.ce656 val 2 for input.spec-%var-i-0.L3%6%bbentry
2
=inductive-invariants point_set point z3.ce656 expr point z3.ce656 val 3 for input.spec-%var-ret-0.L3%6%bbentry
3200171710
=inductive-invariants point_set point z3.ce656 expr point z3.ce656 val 4 for input.dst.llvm-%x
3221208576
=inductive-invariants point_set point z3.ce656 expr point z3.ce656 val 5 for input.dst.llvm-%n
3200171522
=inductive-invariants point_set point z3.ce656 expr point z3.ce656 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
3200171710
=inductive-invariants point_set point z3.ce656 expr point z3.ce656 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3.ce656 expr point z3.ce656 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce656 expr point z3.ce656 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce656 expr point z3.ce656 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce656 expr point z3.ce656 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce656 expr point z3.ce656 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce656 expr point z3.ce656 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce656 expr point z3.ce656 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce656 expr point z3.ce656 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce656 expr point z3.ce656 done
=inductive-invariants point_set point z3v487.ce700
=inductive-invariants point_set point z3v487.ce700 expr point z3v487.ce700
=inductive-invariants point_set point z3v487.ce700 expr point z3v487.ce700 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce700 expr point z3v487.ce700 val 2 for input.spec-%var-i-0.L3%6%bbentry
2
=inductive-invariants point_set point z3v487.ce700 expr point z3v487.ce700 val 3 for input.spec-%var-ret-0.L3%6%bbentry
16843008
=inductive-invariants point_set point z3v487.ce700 expr point z3v487.ce700 val 4 for input.dst.llvm-%x
2155872640
=inductive-invariants point_set point z3v487.ce700 expr point z3v487.ce700 val 5 for input.dst.llvm-%n
2155905152
=inductive-invariants point_set point z3v487.ce700 expr point z3v487.ce700 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
16843008
=inductive-invariants point_set point z3v487.ce700 expr point z3v487.ce700 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3v487.ce700 expr point z3v487.ce700 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce700 expr point z3v487.ce700 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce700 expr point z3v487.ce700 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce700 expr point z3v487.ce700 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce700 expr point z3v487.ce700 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce700 expr point z3v487.ce700 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce700 expr point z3v487.ce700 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce700 expr point z3v487.ce700 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce700 expr point z3v487.ce700 done
=inductive-invariants point_set point z3.ce770
=inductive-invariants point_set point z3.ce770 expr point z3.ce770
=inductive-invariants point_set point z3.ce770 expr point z3.ce770 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce770 expr point z3.ce770 val 2 for input.spec-%var-i-0.L3%6%bbentry
2
=inductive-invariants point_set point z3.ce770 expr point z3.ce770 val 3 for input.spec-%var-ret-0.L3%6%bbentry
4244438268
=inductive-invariants point_set point z3.ce770 expr point z3.ce770 val 4 for input.dst.llvm-%x
1003224064
=inductive-invariants point_set point z3.ce770 expr point z3.ce770 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3.ce770 expr point z3.ce770 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
4244438268
=inductive-invariants point_set point z3.ce770 expr point z3.ce770 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3.ce770 expr point z3.ce770 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce770 expr point z3.ce770 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce770 expr point z3.ce770 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce770 expr point z3.ce770 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce770 expr point z3.ce770 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce770 expr point z3.ce770 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce770 expr point z3.ce770 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce770 expr point z3.ce770 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce770 expr point z3.ce770 done
=inductive-invariants point_set point z3.ce735
=inductive-invariants point_set point z3.ce735 expr point z3.ce735
=inductive-invariants point_set point z3.ce735 expr point z3.ce735 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce735 expr point z3.ce735 val 2 for input.spec-%var-i-0.L3%6%bbentry
2
=inductive-invariants point_set point z3.ce735 expr point z3.ce735 val 3 for input.spec-%var-ret-0.L3%6%bbentry
4025479151
=inductive-invariants point_set point z3.ce735 expr point z3.ce735 val 4 for input.dst.llvm-%x
4138331904
=inductive-invariants point_set point z3.ce735 expr point z3.ce735 val 5 for input.dst.llvm-%n
4025478913
=inductive-invariants point_set point z3.ce735 expr point z3.ce735 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
4025479151
=inductive-invariants point_set point z3.ce735 expr point z3.ce735 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3.ce735 expr point z3.ce735 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce735 expr point z3.ce735 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce735 expr point z3.ce735 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce735 expr point z3.ce735 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce735 expr point z3.ce735 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce735 expr point z3.ce735 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce735 expr point z3.ce735 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce735 expr point z3.ce735 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce735 expr point z3.ce735 done
=inductive-invariants point_set point z3.ce811
=inductive-invariants point_set point z3.ce811 expr point z3.ce811
=inductive-invariants point_set point z3.ce811 expr point z3.ce811 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce811 expr point z3.ce811 val 2 for input.spec-%var-i-0.L3%6%bbentry
4
=inductive-invariants point_set point z3.ce811 expr point z3.ce811 val 3 for input.spec-%var-ret-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce811 expr point z3.ce811 val 4 for input.dst.llvm-%x
536870904
=inductive-invariants point_set point z3.ce811 expr point z3.ce811 val 5 for input.dst.llvm-%n
6
=inductive-invariants point_set point z3.ce811 expr point z3.ce811 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce811 expr point z3.ce811 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3.ce811 expr point z3.ce811 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce811 expr point z3.ce811 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce811 expr point z3.ce811 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce811 expr point z3.ce811 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce811 expr point z3.ce811 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce811 expr point z3.ce811 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce811 expr point z3.ce811 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce811 expr point z3.ce811 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce811 expr point z3.ce811 done
=inductive-invariants point_set point z3v487.ce812
=inductive-invariants point_set point z3v487.ce812 expr point z3v487.ce812
=inductive-invariants point_set point z3v487.ce812 expr point z3v487.ce812 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce812 expr point z3v487.ce812 val 2 for input.spec-%var-i-0.L3%6%bbentry
4
=inductive-invariants point_set point z3v487.ce812 expr point z3v487.ce812 val 3 for input.spec-%var-ret-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce812 expr point z3v487.ce812 val 4 for input.dst.llvm-%x
2147483636
=inductive-invariants point_set point z3v487.ce812 expr point z3v487.ce812 val 5 for input.dst.llvm-%n
8388610
=inductive-invariants point_set point z3v487.ce812 expr point z3v487.ce812 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce812 expr point z3v487.ce812 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3v487.ce812 expr point z3v487.ce812 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce812 expr point z3v487.ce812 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce812 expr point z3v487.ce812 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce812 expr point z3v487.ce812 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce812 expr point z3v487.ce812 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce812 expr point z3v487.ce812 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce812 expr point z3v487.ce812 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce812 expr point z3v487.ce812 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce812 expr point z3v487.ce812 done
=inductive-invariants point_set point z3.ce862
=inductive-invariants point_set point z3.ce862 expr point z3.ce862
=inductive-invariants point_set point z3.ce862 expr point z3.ce862 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce862 expr point z3.ce862 val 2 for input.spec-%var-i-0.L3%6%bbentry
5
=inductive-invariants point_set point z3.ce862 expr point z3.ce862 val 3 for input.spec-%var-ret-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce862 expr point z3.ce862 val 4 for input.dst.llvm-%x
2147483632
=inductive-invariants point_set point z3.ce862 expr point z3.ce862 val 5 for input.dst.llvm-%n
5
=inductive-invariants point_set point z3.ce862 expr point z3.ce862 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce862 expr point z3.ce862 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
5
=inductive-invariants point_set point z3.ce862 expr point z3.ce862 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce862 expr point z3.ce862 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce862 expr point z3.ce862 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce862 expr point z3.ce862 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce862 expr point z3.ce862 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce862 expr point z3.ce862 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce862 expr point z3.ce862 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce862 expr point z3.ce862 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce862 expr point z3.ce862 done
=inductive-invariants point_set point z3v487.ce863
=inductive-invariants point_set point z3v487.ce863 expr point z3v487.ce863
=inductive-invariants point_set point z3v487.ce863 expr point z3v487.ce863 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce863 expr point z3v487.ce863 val 2 for input.spec-%var-i-0.L3%6%bbentry
5
=inductive-invariants point_set point z3v487.ce863 expr point z3v487.ce863 val 3 for input.spec-%var-ret-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce863 expr point z3v487.ce863 val 4 for input.dst.llvm-%x
2751642608
=inductive-invariants point_set point z3v487.ce863 expr point z3v487.ce863 val 5 for input.dst.llvm-%n
5
=inductive-invariants point_set point z3v487.ce863 expr point z3v487.ce863 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce863 expr point z3v487.ce863 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
5
=inductive-invariants point_set point z3v487.ce863 expr point z3v487.ce863 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce863 expr point z3v487.ce863 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce863 expr point z3v487.ce863 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce863 expr point z3v487.ce863 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce863 expr point z3v487.ce863 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce863 expr point z3v487.ce863 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce863 expr point z3v487.ce863 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce863 expr point z3v487.ce863 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce863 expr point z3v487.ce863 done
=inductive-invariants point_set points done
=out-of-bound-exprs for reason inductive-invariants
=out-of-bound-exprs for reason inductive-invariants at L0%0%d_L0%0%d

=out-of-bound-exprs for reason inductive-invariants at L3%6%bbentry_Lfor.cond%1%bbentry

=out-of-bound-exprs for reason inductive-invariants at E0%0%d_E0%0%d

=graph_with_points done
=Invariant state at node L0%0%d_L0%0%d for reason inductive-invariants
=pc L0%0%d_L0%0%d inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond.description

=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond.expr is null
=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond done
=pc L0%0%d_L0%0%d inductive-invariants invariant_state done
=Invariant state at node L3%6%bbentry_Lfor.cond%1%bbentry for reason inductive-invariants
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state failcond.description

=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state failcond.expr is null
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state failcond done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability name abstract-memlabel-asserts
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability expr_group_type HOUDINI_EXPECTS_STABILITY with 1 exprs
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability point_expr 1
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : bvuge(1, 10) : BOOL
18 : bvule(1, 11) : BOOL
19 : and(17, 18) : BOOL
20 : bvuge(2, 10) : BOOL
21 : bvule(2, 11) : BOOL
22 : and(20, 21) : BOOL
23 : not(22) : BOOL
24 : andnot1(19, 23) : BOOL
25 : bvuge(10, 1) : BOOL
26 : bvule(10, 2) : BOOL
27 : and(25, 26) : BOOL
28 : bvuge(11, 1) : BOOL
29 : bvule(11, 2) : BOOL
30 : and(28, 29) : BOOL
31 : not(30) : BOOL
32 : andnot1(27, 31) : BOOL
33 : and(24, 32) : BOOL
34 : and(16, 33) : BOOL
35 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
36 : 3 { 0x3 +1.35e129 } : BV:32
37 : bvand(35, 36) : BV:32
38 : 0 { 0x0 +1.0e129 } : BV:32
39 : eq(37, 38) : BOOL
40 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
41 : bvand(40, 36) : BV:32
42 : eq(41, 38) : BOOL
43 : and(39, 42) : BOOL
44 : and(34, 43) : BOOL
45 : eq(35, 1) : BOOL
46 : eq(40, 10) : BOOL
47 : and(45, 46) : BOOL
48 : and(44, 47) : BOOL
49 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
50 : 1 { 0x1 +1.11e129 } : BV:32
51 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
52 : region_agrees_with_memlabel(49, 38, 50, 51) : BOOL
53 : and(48, 52) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability pred 0
=Comment
abstract-memlabel-asserts-houdini-guess
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : bvuge(1, 10) : BOOL
18 : bvule(1, 11) : BOOL
19 : and(17, 18) : BOOL
20 : bvuge(2, 10) : BOOL
21 : bvule(2, 11) : BOOL
22 : and(20, 21) : BOOL
23 : not(22) : BOOL
24 : andnot1(19, 23) : BOOL
25 : bvuge(10, 1) : BOOL
26 : bvule(10, 2) : BOOL
27 : and(25, 26) : BOOL
28 : bvuge(11, 1) : BOOL
29 : bvule(11, 2) : BOOL
30 : and(28, 29) : BOOL
31 : not(30) : BOOL
32 : andnot1(27, 31) : BOOL
33 : and(24, 32) : BOOL
34 : and(16, 33) : BOOL
35 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
36 : 3 { 0x3 +1.35e129 } : BV:32
37 : bvand(35, 36) : BV:32
38 : 0 { 0x0 +1.0e129 } : BV:32
39 : eq(37, 38) : BOOL
40 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
41 : bvand(40, 36) : BV:32
42 : eq(41, 38) : BOOL
43 : and(39, 42) : BOOL
44 : and(34, 43) : BOOL
45 : eq(35, 1) : BOOL
46 : eq(40, 10) : BOOL
47 : and(45, 46) : BOOL
48 : and(44, 47) : BOOL
49 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
50 : 1 { 0x1 +1.11e129 } : BV:32
51 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
52 : region_agrees_with_memlabel(49, 38, 50, 51) : BOOL
53 : and(48, 52) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability predicate_set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ce 0: z3v487.ce3
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ces set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability summary: number of exprs=1; number of visited CEs=1; number of preds=1
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv name expr-group-bvs
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv expr_group_type BV_EQ with 6 exprs
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 2
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 3
1 : input.spec-%var-ret-0.L3%6%bbentry : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 4
1 : input.dst.llvm-%x : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 5
1 : input.dst.llvm-%n : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 6
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 7
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 0
=Comment
expr-group-bvs.linear2-32-free_var_idx.7
=LhsExpr
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 1
=Comment
expr-group-bvs.linear2-32-free_var_idx.6
=LhsExpr
1 : input.spec-%var-ret-0.L3%6%bbentry : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 2
=Comment
expr-group-bvs.linear1-2-free_var_idx.4
=LhsExpr
1 : 0 { 0x0 } : BV:2
=RhsExpr
1 : input.dst.llvm-%x : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 0 { 0x0 +1.0e1025 } : INT
4 : bvextract(1, 2, 3) : BV:2
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv predicate_set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 0: z3v487.ce3
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 1: z3.ce23
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 2: z3v487.ce24
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 3: z3v487.ce43
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 4: z3.ce63
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 5: z3.ce83
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 6: z3.ce103
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 7: z3v487.ce581
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 8: z3.ce656
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 9: z3v487.ce700
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 10: z3.ce735
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ces set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv summary: number of exprs=6; number of visited CEs=11; number of preds=3
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv output matrix
matrix:
4
-2147483648->0; 2->0; 3->0; 4->1073741824; 5->0; 6->0; 7->0; 
6
-2147483648->0; 2->0; 3->4294967295; 4->0; 5->0; 6->1; 7->0; 
7
-2147483648->0; 2->4294967295; 3->0; 4->0; 5->0; 6->0; 7->1; 
matrix done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv state elems done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const name src-branches-const-ineq
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const point_expr 2
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const pred 0
=Comment
src-branches-const-ineq.ub-unsigned
=LhsExpr
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
2 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const pred 1
=Comment
src-branches-const-ineq.lb-signed
=LhsExpr
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvsge(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const predicate_set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 0: z3v487.ce3
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 1: z3.ce656
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 2: z3.ce811
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 3: z3.ce862
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ces set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=2
=m_lower_bound_signed_cur 0
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967294
=m_lower_bound_signed_known 0
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967294
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 3
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_exprs done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%n
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const point_expr 5
1 : input.dst.llvm-%n : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const predicate_set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 0: z3v487.ce3
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 1: z3.ce23
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 2: z3v487.ce24
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 3: z3.ce123
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ces set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=0
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967295
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 3
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_exprs done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const point_expr 7
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const pred 0
=Comment
dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.ub-unsigned
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const pred 1
=Comment
dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.lb-signed
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvsge(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const predicate_set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 0: z3v487.ce3
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 1: z3.ce656
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 2: z3.ce811
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 3: z3.ce862
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ces set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=2
=m_lower_bound_signed_cur 0
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967294
=m_lower_bound_signed_known 0
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967294
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 3
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_exprs done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini name dst-ineq
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini expr_group_type HOUDINI with 8 exprs
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini point_expr 8
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini point_expr 9
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini point_expr 10
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini point_expr 11
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini point_expr 12
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini point_expr 13
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini point_expr 14
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini point_expr 15
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini pred 0
=Comment
dst-ineq-houdini-guess
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini predicate_set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini visited ce 0: z3v487.ce3
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini visited ce 1: z3.ce23
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini visited ce 2: z3v487.ce24
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini visited ces set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini summary: number of exprs=8; number of visited CEs=3; number of preds=1
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based name spec-coupling-invariants
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based expr_group_type HOUDINI_AXIOM_BASED with 6 exprs
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 16
1 : input.spec-%var-x-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%x : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 17
1 : input.spec-%var-x-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%x : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 18
1 : input.spec-%var-x-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%x : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : bvadd(14, 5) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(10, 11, 12, 15, 16, 17) : BV:32
19 : lambda(9, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(8, 19) : MAP[BV:32 -> BV:32]
21 : eq(1, 20) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 19
1 : input.spec-%var-x-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%x : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 20
1 : input.spec-%var-x-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%x : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 21
1 : spec-%var-x-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%x : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based pred 0
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-x-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%x : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based pred 1
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-x-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%x : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based predicate_set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based visited ce 0: z3v487.ce3
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based visited ces set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based summary: number of exprs=6; number of visited CEs=1; number of preds=2
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state done
=Invariant state at node E0%0%d_E0%0%d for reason inductive-invariants
=pc E0%0%d_E0%0%d inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond.description

=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond.expr is null
=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond done
=pc E0%0%d_E0%0%d inductive-invariants invariant_state done
=invariant_state_changed_at_pcs for reason inductive-invariants:
=graph_with_guessing done
=graph_with_correctness_covers begin
=graph_with_correctness_covers done
=m_dst_fcall_edges_already_updated_from_pcs:
=m_internal_pcs:
=m_super_edges:
=AllocaPCLocalSprelAssumptionsBegin:
=Local offsets from compile log
=Local offsets from compile log done
=done
=AllocaPCLocalSprelAssumptionsEnd
=DeallocaPCLocalSprelAssumptionsBegin:
=Local offsets from compile log
=Local offsets from compile log done
=done
=DeallocaPCLocalSprelAssumptionsEnd
=src_tfg pcs reaching pcpair L0%0%d_L0%0%d
=src_tfg pc: L0%0%d
=exit_pc_asserts at E0%0%d_E0%0%d
=exit_pc_assert.0 at E0%0%d_E0%0%d
=Comment
equal-regs
=LhsExpr
1 : input.spec-%tmpvar-10.E0%0%d : BV:32
2 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry
=well-formedness-conditions for L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry edge well-formedness condition
=well-formedness-conditions for L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry edge well-formedness condition done
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry edge well-formedness condition
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond cg_path
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond src_path
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond dst_path
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond pred.0
=Comment
wfcond.from_pcL3%6%bbentry_Lfor.cond%1%bbentry.to_pcL3%6%bbentry_Lfor.cond%1%bbentry-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
4 : not(3) : BOOL
5 : input.spec-%var-x-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
6 : input.spec-%var-i-0.L3%6%bbentry : BV:32
7 : map_get(5, 6) : SUM[UNIT,BV:32]
8 : 1 { 0x1 +1.0e1025 } : INT
9 : sum_is(7, 8) : BOOL
10 : or(4, 9) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry edge well-formedness condition done
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge well-formedness condition
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond pred.0
=Comment
wfcond.from_pcL3%6%bbentry_Lfor.cond%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
4 : input.spec-%var-x-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
5 : input.spec-%var-i-0.L3%6%bbentry : BV:32
6 : map_get(4, 5) : SUM[UNIT,BV:32]
7 : 0 { 0x0 +1.0e1025 } : INT
8 : sum_is(6, 7) : BOOL
9 : or(3, 8) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d)
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond pred.0
=Comment
equal-regs
=LhsExpr
1 : input.spec-%tmpvar-10.E0%0%d : BV:32
2 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge well-formedness condition done
=Ranking exprs at node L3%6%bbentry_Lfor.cond%1%bbentry
=SRC Ranking expr 0
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
=SRC Ranking expr 1
1 : input.spec-%var-ret-0.L3%6%bbentry : BV:32
=SRC Tie Breaking expr 0
1 : input.spec-%var-x-1 : MAP[BV:32 -> BV:32]
=SRC Tie Breaking expr 1
1 : input.spec-%var-x-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
=DST Ranking expr 0
1 : input.dst.llvm-%x : BV:32
=DST Ranking expr 1
1 : input.dst.llvm-%n : BV:32
=DST Ranking expr 2
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=DST Ranking expr 3
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=bv_rank_exprs done
=Ranking exprs done
=dst-to-src submaps done
=cg-edge-contains-repeated-src-tfg-edge at edge-id L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry
0
=cg-edge-contains-repeated-src-tfg-edge at edge-id L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry
1
=cg-edge-contains-repeated-src-tfg-edge at edge-id L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d
1
=cg-edge-contains-repeated-src-tfg-edge-map done
=cg.assumes_around_edge
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #0
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #0.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #0.pred
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
140355 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140356 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140409 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
140358 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
140344 : 4 { 0x4 +1.0e1025 } : INT
140345 : 0 { 0x0 } : BOOL
140410 : select(140355, 140356, 140409, 140358, 140344, 140345) : BV:32
=RhsExpr
140354 : input.dst.llvm-%n : BV:32
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #1
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #1.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #1.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #1.pred
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
140355 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140356 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140411 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
140357 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
140344 : 4 { 0x4 +1.0e1025 } : INT
140345 : 0 { 0x0 } : BOOL
140412 : select(140355, 140356, 140411, 140357, 140344, 140345) : BV:32
=RhsExpr
140353 : input.dst.llvm-%x : BV:32
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #2
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #2.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #2.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #2.pred
=Comment
undef-behaviour-align-assume.edge.L0%0%d=>Lfor.cond%1%bbentry
=LhsExpr
140353 : input.dst.llvm-%x : BV:32
140344 : 4 { 0x4 +1.0e1025 } : INT
140364 : islangaligned(140353, 140344) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #3
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #3.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #3.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #3.pred
=Comment
precond-mlasserts
=LhsExpr
140633 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
140634 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
140635 : bvule(140633, 140634) : BOOL
140341 : 4 { 0x4 +1.47e129 } : BV:32
140382 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
140636 : bvadd(140341, 140382) : BV:32
140637 : bvadd(140633, 140636) : BV:32
140638 : eq(140634, 140637) : BOOL
140639 : and(140635, 140638) : BOOL
140640 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
140641 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
140642 : bvule(140640, 140641) : BOOL
140643 : and(140639, 140642) : BOOL
140644 : bvadd(140640, 140636) : BV:32
140645 : eq(140641, 140644) : BOOL
140646 : and(140643, 140645) : BOOL
140647 : bvuge(140633, 140640) : BOOL
140648 : bvule(140633, 140641) : BOOL
140649 : and(140647, 140648) : BOOL
140651 : bvuge(140634, 140640) : BOOL
140652 : bvule(140634, 140641) : BOOL
140653 : and(140651, 140652) : BOOL
140654 : not(140653) : BOOL
140655 : andnot1(140649, 140654) : BOOL
140650 : bvuge(140640, 140633) : BOOL
140656 : bvule(140640, 140634) : BOOL
140657 : and(140650, 140656) : BOOL
140659 : bvuge(140641, 140633) : BOOL
140660 : bvule(140641, 140634) : BOOL
140661 : and(140659, 140660) : BOOL
140662 : not(140661) : BOOL
140663 : andnot1(140657, 140662) : BOOL
140658 : and(140655, 140663) : BOOL
140664 : and(140646, 140658) : BOOL
140358 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
140665 : 3 { 0x3 +1.35e129 } : BV:32
140666 : bvand(140358, 140665) : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
140667 : eq(140666, 140276) : BOOL
140357 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
140668 : bvand(140357, 140665) : BV:32
140669 : eq(140668, 140276) : BOOL
140670 : and(140667, 140669) : BOOL
140671 : and(140664, 140670) : BOOL
140672 : eq(140358, 140633) : BOOL
140673 : eq(140357, 140640) : BOOL
140674 : and(140672, 140673) : BOOL
140675 : and(140671, 140674) : BOOL
140356 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140288 : 1 { 0x1 +1.11e129 } : BV:32
140359 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
140676 : region_agrees_with_memlabel(140356, 140276, 140288, 140359) : BOOL
140677 : and(140675, 140676) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #4
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #4.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #4.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #4.pred
=Comment
pointer-implements-variable-sized-map
=LhsExpr
140273 : input.spec-%var-x-1 : MAP[BV:32 -> BV:32]
140333 : Lambda0 : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
140335 : bvule(140276, 140333) : BOOL
140354 : input.dst.llvm-%n : BV:32
140678 : bvult(140333, 140354) : BOOL
140679 : and(140335, 140678) : BOOL
140680 : lambda(140333, 140679) : FUNCTION[BV:32 -> BOOL]
140334 : Lambda1 : BV:32
140355 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140356 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140339 : memlabel-top : MEMLABEL
140341 : 4 { 0x4 +1.47e129 } : BV:32
140342 : bvmul(140334, 140341) : BV:32
140353 : input.dst.llvm-%x : BV:32
140704 : bvadd(140342, 140353) : BV:32
140344 : 4 { 0x4 +1.0e1025 } : INT
140345 : 0 { 0x0 } : BOOL
140705 : select(140355, 140356, 140339, 140704, 140344, 140345) : BV:32
140707 : lambda(140334, 140705) : FUNCTION[BV:32 -> BV:32]
140708 : map(140680, 140707) : MAP[BV:32 -> BV:32]
140712 : eq(140273, 140708) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry done
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry assume #0
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry assume #0.ec
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry assume #0.pred
=Comment
merged-predicate
=LhsExpr
140505 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
140354 : input.dst.llvm-%n : BV:32
140506 : bvult(140505, 140354) : BOOL
140435 : 4 { 0x4 +1.0e1025 } : BV:64
140376 : 32 { 0x20 +1.0e1025 } : INT
140516 : bvsign_ext(140505, 140376) : BV:64
140581 : bvmul(140435, 140516) : BV:64
140380 : 63 { 0x3f +1.0e1025 } : INT
140582 : bvextract(140581, 140380, 140376) : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
140515 : bvslt(140505, 140276) : BOOL
140382 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
140595 : ite(140515, 140382, 140276) : BV:32
140597 : eq(140582, 140595) : BOOL
140344 : 4 { 0x4 +1.0e1025 } : INT
140599 : isindexforsize(140597, 140344) : BOOL
140353 : input.dst.llvm-%x : BV:32
140341 : 4 { 0x4 +1.47e129 } : BV:32
140551 : bvmul(140341, 140505) : BV:32
140554 : bvadd(140353, 140551) : BV:32
140601 : isgepoffset(140554, 140551) : BOOL
140603 : and(140599, 140601) : BOOL
140572 : islangaligned(140554, 140344) : BOOL
160289 : and(140603, 140572) : BOOL
140275 : 1 { 0x1 } : BOOL
160290 : eq(160289, 140275) : BOOL
160354 : implies(140506, 160290) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry done
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d done
cg.assumes_around_edge done
=corr_graph_done
=bv_rank_map
=bv_rank at L0%0%d_L0%0%d
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=bv_rank at L3%6%bbentry_Lfor.cond%1%bbentry
m_dst_rank: 2, m_src_rank: 0, m_spec_rank: 5
=bv_rank at E0%0%d_E0%0%d
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=cg_with_rank done
=cg_with_backtracker done
=asm filename

=cg_with_asm_annotation done
