=FunctionName: foo
=result: 1
=cg_with_asm_annotation
=cg_with_backtracker
=cg_with_rank
=corr_graph foo.A1.B2.C1
=src_tfg
=TFG_SSA:
=TFG_SPEC src.spec.foo:
=TFG:
=Nodes: L0%0%d L2%7%bbentry L2%8%d L2%9%bbentry L2%11%bbentry E0%0%d
=Edges:
L0%0%d => L2%7%bbentry
L2%7%bbentry => L2%8%d
L2%8%d => L2%11%bbentry
L2%8%d => L2%9%bbentry
L2%9%bbentry => E0%0%d
L2%11%bbentry => L2%7%bbentry (backedge) 
=graph done
=is_ssa_graph:
1
=StartState:
=spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=state_end
=PC to var-version map at L0%0%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=PC to var-version map at L2%7%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=PC to var-version map at L2%8%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=PC to var-version map at L2%9%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=PC to var-version map at L2%11%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=PC to var-version map at E0%0%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=graph_with_var_versions done
=FunctionName: foo
=Input: spec-method-arg.0
=arg addr
1 : (undefined) : UNDEFINED
=arg val
1 : input.spec-%var-x-1 : MAP[BV:32 -> BV:32]
=arg end
=Node outputs: E0%0%d
=Output: spec-%ret-reg
1 : input.spec-%tmpvar-10.E0%0%d : BV:32
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
=Touched symbols:
=Symbol-map done
=Locals-map:
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;foo}
=Edge: L0%0%d => L2%7%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-7.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-8.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-i-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-ret-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-x-0.L2%7%bbentry
1 : input.spec-%var-x-1 : MAP[BV:32 -> BV:32]
=src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((((func_head*ctor_bv)*ctor_bv)*(inline_entry*func_head))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=Edge: L2%7%bbentry => L2%8%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-0.L2%8%d
1 : input.spec-%var-x-0.L2%7%bbentry : MAP[BV:32 -> BV:32]
2 : input.spec-%var-i-0.L2%7%bbentry : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*intrinsic_app_map_get)
tfg_edge_comment end

=Edge: L2%8%d => L2%11%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-0.L2%8%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:6:match_sum_cond_1
tfg_edge_comment end

=Edge: L2%8%d => L2%9%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-0.L2%8%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:4:match_sum_cond_0
tfg_edge_comment end

=Edge: L2%9%bbentry => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-10.E0%0%d
1 : input.spec-%var-ret-0.L2%7%bbentry : BV:32
=spec-%tmpvar-5.E0%0%d
1 : input.spec-%var-ret-0.L2%7%bbentry : BV:32
=spec-%tmpvar-6.E0%0%d
1 : input.spec-%var-ret-0.L2%7%bbentry : BV:32
=spec-%tmpvar-9.E0%0%d
1 : input.spec-%var-ret-0.L2%7%bbentry : BV:32
=spec-%var-u-0.E0%0%d
1 : input.spec-%tmpvar-0.L2%8%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((((bb_entry*match_sum_val_0)*match_sum_merge_0)*func_ret)*(inline_exit*func_ret))
tfg_edge_comment end

=Edge: L2%11%bbentry => L2%7%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%var-i-0.L2%7%bbentry
1 : input.spec-%var-i-0.L2%7%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%var-ret-0.L2%7%bbentry
1 : input.spec-%var-ret-0.L2%7%bbentry : BV:32
2 : input.spec-%tmpvar-0.L2%8%d : SUM[UNIT,BV:32]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : sum_get(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=spec-%var-x-0.L2%7%bbentry
1 : input.spec-%var-x-0.L2%7%bbentry : MAP[BV:32 -> BV:32]
=src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : input.src.spec-ghostvar.itervar.1.L2%7%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-1.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%tmpvar-2.L2%7%bbentry
1 : input.spec-%var-i-0.L2%7%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-3.L2%7%bbentry
1 : input.spec-%var-ret-0.L2%7%bbentry : BV:32
2 : input.spec-%tmpvar-0.L2%8%d : SUM[UNIT,BV:32]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : sum_get(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=spec-%var-x_i-0.L2%7%bbentry
1 : input.spec-%tmpvar-0.L2%8%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(((((bb_entry*match_sum_val_1)*ctor_bv)*intrinsic_app_bvadd)*(intrinsic_app_bvadd*tailrec_backedge))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=graph_with_precondition_done

=Locs in src.spec.foo
=Loc 1 in src.spec.foo.
REGMEM
spec-%var-x-1
1 : input.spec-%var-x-1 : MAP[BV:32 -> BV:32]
=Loc 18 in src.spec.foo.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=memlabel
memlabel-mem--heap
=Loc 19 in src.spec.foo.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 20 in src.spec.foo.
REGMEM
spec-%tmpvar-0.L2%8%d
1 : input.spec-%tmpvar-0.L2%8%d : SUM[UNIT,BV:32]
=Loc 21 in src.spec.foo.
REGMEM
spec-%var-i-0.L2%7%bbentry
1 : input.spec-%var-i-0.L2%7%bbentry : BV:32
=Loc 22 in src.spec.foo.
REGMEM
spec-%var-x-0.L2%7%bbentry
1 : input.spec-%var-x-0.L2%7%bbentry : MAP[BV:32 -> BV:32]
=Loc 23 in src.spec.foo.
REGMEM
spec-%tmpvar-10.E0%0%d
1 : input.spec-%tmpvar-10.E0%0%d : BV:32
=Loc 24 in src.spec.foo.
REGMEM
spec-%tmpvar-5.E0%0%d
1 : input.spec-%tmpvar-5.E0%0%d : BV:32
=Loc 25 in src.spec.foo.
REGMEM
spec-%tmpvar-6.E0%0%d
1 : input.spec-%tmpvar-6.E0%0%d : BV:32
=Loc 26 in src.spec.foo.
REGMEM
spec-%tmpvar-9.E0%0%d
1 : input.spec-%tmpvar-9.E0%0%d : BV:32
=Loc 27 in src.spec.foo.
REGMEM
spec-%var-ret-0.L2%7%bbentry
1 : input.spec-%var-ret-0.L2%7%bbentry : BV:32
=Loc 28 in src.spec.foo.
REGMEM
spec-%var-u-0.E0%0%d
1 : input.spec-%var-u-0.E0%0%d : UNIT
=Loc 29 in src.spec.foo.
REGMEM
spec-%tmpvar-7.L2%7%bbentry
1 : input.spec-%tmpvar-7.L2%7%bbentry : BV:32
=Loc 30 in src.spec.foo.
REGMEM
spec-%tmpvar-8.L2%7%bbentry
1 : input.spec-%tmpvar-8.L2%7%bbentry : BV:32
=Loc 31 in src.spec.foo.
REGMEM
src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : input.src.spec-ghostvar.itervar.1.L2%7%bbentry : BV:32
=Loc 32 in src.spec.foo.
REGMEM
spec-%tmpvar-1.L2%7%bbentry
1 : input.spec-%tmpvar-1.L2%7%bbentry : BV:32
=Loc 33 in src.spec.foo.
REGMEM
spec-%tmpvar-2.L2%7%bbentry
1 : input.spec-%tmpvar-2.L2%7%bbentry : BV:32
=Loc 34 in src.spec.foo.
REGMEM
spec-%tmpvar-3.L2%7%bbentry
1 : input.spec-%tmpvar-3.L2%7%bbentry : BV:32
=Loc 35 in src.spec.foo.
REGMEM
spec-%var-x_i-0.L2%7%bbentry
1 : input.spec-%var-x_i-0.L2%7%bbentry : BV:32
=Locs end
=Liveness in src.spec.foo
=live locs at L0%0%d
1, 
=live locs at L2%7%bbentry
21, 22, 27, 
=live locs at L2%8%d
20, 21, 22, 27, 
=live locs at L2%9%bbentry
27, 
=live locs at L2%11%bbentry
20, 21, 22, 27, 
=live locs at E0%0%d
23[f], 

=Definedness in src.spec.foo
=loc definedness at L0%0%d
1, 18, 19
=loc definedness at L2%7%bbentry
1, 18, 19, 21, 22, 27, 29, 30, 31
=loc definedness at L2%8%d
1, 18, 19, 20, 21, 22, 27, 29, 30, 31
=loc definedness at L2%9%bbentry
1, 18, 19, 20, 21, 22, 27, 29, 30, 31
=loc definedness at L2%11%bbentry
1, 18, 19, 20, 21, 22, 27, 29, 30, 31
=loc definedness at E0%0%d
1, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31

=Branch affecting variable locs in src.spec.foo
=branch affecting variable locs at L0%0%d
1
=branch affecting variable locs at L2%7%bbentry
21, 22
=branch affecting variable locs at L2%8%d
20, 21, 22
=branch affecting variable locs at L2%9%bbentry

=branch affecting variable locs at L2%11%bbentry
21, 22
=branch affecting variable locs at E0%0%d


=Relevant Memlabels in src.spec.foo
=relevant memlabels
=function: foo
memlabel-mem--heap
memlabel-mem--arg.0
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%7%bbentry
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%7%bbentry for loc_id 21 {input.spec-%var-i-0.L2%7%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%7%bbentry for loc_id 22 {input.spec-%var-x-0.L2%7%bbentry }
1 : input.spec-%var-x-1 : MAP[BV:32 -> BV:32]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%7%bbentry for loc_id 27 {input.spec-%var-ret-0.L2%7%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%7%bbentry for loc_id 29 {input.spec-%tmpvar-7.L2%7%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%7%bbentry for loc_id 30 {input.spec-%tmpvar-8.L2%7%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%7%bbentry for loc_id 31 {input.src.spec-ghostvar.itervar.1.L2%7%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%7%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%7%bbentry=>L2%8%d
=graph_with_edge_structures.loc_to_expr_map at L2%7%bbentry=>L2%8%d for loc_id 20 {input.spec-%tmpvar-0.L2%8%d }
1 : input.spec-%var-x-0.L2%7%bbentry : MAP[BV:32 -> BV:32]
2 : input.spec-%var-i-0.L2%7%bbentry : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=graph_with_edge_structures.loc_to_expr_map at L2%7%bbentry=>L2%8%d done
=graph_with_edge_structures.loc_to_expr_map at L2%8%d=>L2%9%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%8%d=>L2%9%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%8%d=>L2%11%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%8%d=>L2%11%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%9%bbentry=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at L2%9%bbentry=>E0%0%d for loc_id 23 {input.spec-%tmpvar-10.E0%0%d }
1 : input.spec-%var-ret-0.L2%7%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%9%bbentry=>E0%0%d for loc_id 24 {input.spec-%tmpvar-5.E0%0%d }
1 : input.spec-%var-ret-0.L2%7%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%9%bbentry=>E0%0%d for loc_id 25 {input.spec-%tmpvar-6.E0%0%d }
1 : input.spec-%var-ret-0.L2%7%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%9%bbentry=>E0%0%d for loc_id 26 {input.spec-%tmpvar-9.E0%0%d }
1 : input.spec-%var-ret-0.L2%7%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%9%bbentry=>E0%0%d for loc_id 28 {input.spec-%var-u-0.E0%0%d }
1 : input.spec-%tmpvar-0.L2%8%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=graph_with_edge_structures.loc_to_expr_map at L2%9%bbentry=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map at L2%11%bbentry=>L2%7%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%11%bbentry=>L2%7%bbentry for loc_id 21 {input.spec-%var-i-0.L2%7%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-i-0.L2%7%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%11%bbentry=>L2%7%bbentry for loc_id 27 {input.spec-%var-ret-0.L2%7%bbentry }
1 : input.spec-%var-ret-0.L2%7%bbentry : BV:32
2 : input.spec-%tmpvar-0.L2%8%d : SUM[UNIT,BV:32]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : sum_get(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%11%bbentry=>L2%7%bbentry for loc_id 31 {input.src.spec-ghostvar.itervar.1.L2%7%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.spec-ghostvar.itervar.1.L2%7%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%11%bbentry=>L2%7%bbentry for loc_id 32 {input.spec-%tmpvar-1.L2%7%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%11%bbentry=>L2%7%bbentry for loc_id 33 {input.spec-%tmpvar-2.L2%7%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-i-0.L2%7%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%11%bbentry=>L2%7%bbentry for loc_id 34 {input.spec-%tmpvar-3.L2%7%bbentry }
1 : input.spec-%var-ret-0.L2%7%bbentry : BV:32
2 : input.spec-%tmpvar-0.L2%8%d : SUM[UNIT,BV:32]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : sum_get(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%11%bbentry=>L2%7%bbentry for loc_id 35 {input.spec-%var-x_i-0.L2%7%bbentry }
1 : input.spec-%tmpvar-0.L2%8%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%11%bbentry=>L2%7%bbentry done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at L2%7%bbentry:
vacuous mls at L2%8%d:
vacuous mls at L2%9%bbentry:
vacuous mls at L2%11%bbentry:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at L2%7%bbentry:
non-vacuous mls at L2%8%d:
non-vacuous mls at L2%9%bbentry:
non-vacuous mls at L2%11%bbentry:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in src.spec.foo
=avail_exprs begin
=loc 1
=loc_expr
140273 : input.spec-%var-x-1 : MAP[BV:32 -> BV:32]
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 22
=loc_expr
140417 : input.spec-%var-x-0.L2%7%bbentry : MAP[BV:32 -> BV:32]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-x-1 : MAP[BV:32 -> BV:32]
=avail_exprs_val.end
=loc 29
=loc_expr
140442 : input.spec-%tmpvar-7.L2%7%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 30
=loc_expr
140443 : input.spec-%tmpvar-8.L2%7%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 32
=loc_expr
140444 : input.spec-%tmpvar-1.L2%7%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 1 { 0x1 +1.11e129 } : BV:32
=avail_exprs_val.end
=avail_exprs end
=sprel_map in src.spec.foo
=loc 29 expr
1 : input.spec-%tmpvar-7.L2%7%bbentry : BV:32
=loc 29 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 30 expr
1 : input.spec-%tmpvar-8.L2%7%bbentry : BV:32
=loc 30 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 32 expr
1 : input.spec-%tmpvar-1.L2%7%bbentry : BV:32
=loc 32 spreled-expr
140288 : 1 { 0x1 +1.11e129 } : BV:32
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;foo}
=loc_id 1 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 18 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 19 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 20 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 21 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 22 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 23 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 24 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 25 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 26 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 27 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 28 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 29 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 30 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 31 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 32 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 33 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 34 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 35 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 29 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 30 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 32 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>L2%7%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%7%bbentry=>L2%8%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%8%d=>L2%9%bbentry
1 : input.spec-%tmpvar-0.L2%8%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%8%d=>L2%11%bbentry
1 : input.spec-%tmpvar-0.L2%8%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%9%bbentry=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%11%bbentry=>L2%7%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>L2%7%bbentry
=spec-%tmpvar-7.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-8.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-i-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-ret-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-x-0.L2%7%bbentry
1 : input.spec-%var-x-1 : MAP[BV:32 -> BV:32]
=src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%7%bbentry=>L2%8%d
=spec-%tmpvar-0.L2%8%d
1 : input.spec-%var-x-0.L2%7%bbentry : MAP[BV:32 -> BV:32]
2 : input.spec-%var-i-0.L2%7%bbentry : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%8%d=>L2%9%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%8%d=>L2%11%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%9%bbentry=>E0%0%d
=spec-%tmpvar-10.E0%0%d
1 : input.spec-%var-ret-0.L2%7%bbentry : BV:32
=spec-%tmpvar-5.E0%0%d
1 : input.spec-%var-ret-0.L2%7%bbentry : BV:32
=spec-%tmpvar-6.E0%0%d
1 : input.spec-%var-ret-0.L2%7%bbentry : BV:32
=spec-%tmpvar-9.E0%0%d
1 : input.spec-%var-ret-0.L2%7%bbentry : BV:32
=spec-%var-u-0.E0%0%d
1 : input.spec-%tmpvar-0.L2%8%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%11%bbentry=>L2%7%bbentry
=spec-%var-i-0.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-i-0.L2%7%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%var-ret-0.L2%7%bbentry
1 : input.spec-%var-ret-0.L2%7%bbentry : BV:32
2 : input.spec-%tmpvar-0.L2%8%d : SUM[UNIT,BV:32]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : sum_get(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.spec-ghostvar.itervar.1.L2%7%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-1.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%tmpvar-2.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-i-0.L2%7%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-3.L2%7%bbentry
1 : input.spec-%var-ret-0.L2%7%bbentry : BV:32
2 : input.spec-%tmpvar-0.L2%8%d : SUM[UNIT,BV:32]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : sum_get(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=spec-%var-x_i-0.L2%7%bbentry
1 : input.spec-%tmpvar-0.L2%8%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>L2%7%bbentry
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>L2%7%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%7%bbentry=>L2%8%d
=graph_with_simplified_assets.simplified_assumes at L2%7%bbentry=>L2%8%d done
=graph_with_simplified_assets.simplified_assumes at L2%8%d=>L2%9%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%8%d=>L2%9%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%8%d=>L2%11%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%8%d=>L2%11%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%9%bbentry=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at L2%9%bbentry=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes at L2%11%bbentry=>L2%7%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%11%bbentry=>L2%7%bbentry done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
0
=String-contents:
=Nextpc-map:
=Nextpc-map done
=suffixpaths for src.spec.foo
=suffixpath_at_L0%0%d for src.spec.foo
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_L2%7%bbentry for src.spec.foo
=suffixpath_at_L2%7%bbentry.graph_edge_composition
(L0%0%d=>L2%7%bbentry)
=suffixpath_at_L2%8%d for src.spec.foo
=suffixpath_at_L2%8%d.graph_edge_composition
((L0%0%d=>L2%7%bbentry)*(L2%7%bbentry=>L2%8%d))
=suffixpath_at_L2%9%bbentry for src.spec.foo
=suffixpath_at_L2%9%bbentry.graph_edge_composition
((L0%0%d=>L2%7%bbentry)*((L2%7%bbentry=>L2%8%d)*(L2%8%d=>L2%9%bbentry)))
=suffixpath_at_L2%11%bbentry for src.spec.foo
=suffixpath_at_L2%11%bbentry.graph_edge_composition
((L0%0%d=>L2%7%bbentry)*((L2%7%bbentry=>L2%8%d)*(L2%8%d=>L2%11%bbentry)))
=suffixpath_at_E0%0%d for src.spec.foo
=suffixpath_at_E0%0%d.graph_edge_composition
((L0%0%d=>L2%7%bbentry)*((L2%7%bbentry=>L2%8%d)*((L2%8%d=>L2%9%bbentry)*(L2%9%bbentry=>E0%0%d))))
=suffixpaths for src.spec.foo done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>L2%7%bbentry
tfg.assumes_around_edge at L0%0%d=>L2%7%bbentry done
tfg.assumes_around_edge at L2%7%bbentry=>L2%8%d
tfg.assumes_around_edge at L2%7%bbentry=>L2%8%d done
tfg.assumes_around_edge at L2%8%d=>L2%9%bbentry
tfg.assumes_around_edge at L2%8%d=>L2%9%bbentry done
tfg.assumes_around_edge at L2%8%d=>L2%11%bbentry
tfg.assumes_around_edge at L2%8%d=>L2%11%bbentry done
tfg.assumes_around_edge at L2%9%bbentry=>E0%0%d
tfg.assumes_around_edge at L2%9%bbentry=>E0%0%d done
tfg.assumes_around_edge at L2%11%bbentry=>L2%7%bbentry
tfg.assumes_around_edge at L2%11%bbentry=>L2%7%bbentry done
tfg.assumes_around_edge done
=TFGdone
=TFG_SPEC_done
=TFG_SSA_done
=dst_tfg
=TFG_SSA:
=TFG_LLVM dst.llvm.foo:
=TFG:
=Nodes: L0%0%d Lfor.body%1%d Lfor.cond%1%bbentry Lfor.cond%2%d Lfor.end%1%d E0%0%d
=Edges:
L0%0%d => Lfor.cond%1%bbentry
Lfor.cond%1%bbentry => Lfor.cond%2%d
Lfor.cond%2%d => Lfor.body%1%d
Lfor.cond%2%d => Lfor.end%1%d
Lfor.end%1%d => E0%0%d
Lfor.body%1%d => Lfor.cond%1%bbentry (backedge) 
=graph done
=is_ssa_graph:
1
=StartState:
=dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=state_end
=PC to var-version map at L0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.body%1%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.cond%1%bbentry
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.cond%2%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.end%1%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at E0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=graph_with_var_versions done
=FunctionName: foo
=Input: llvm-method-arg.1
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
=arg val
1 : input.dst.llvm-%n : BV:32
=arg end
=Input: llvm-method-arg.0
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%x : BV:32
=arg end
=Node outputs: E0%0%d
=Output: heap
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=Output: llvm-indir_tgt
1 : retaddr_const : BV:32
=Output: llvm-%ret-reg
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : foo : 20 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%x : 4 : 4 : 0
C_LOCAL=L0%0%argnum1= : dst.llvm-%n : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;foo}
=memlabel_map.0 for call-context {*;foo}
mlvar.dst.llvm.foo.0 : memlabel-mem-no-straddle-symbol.1-heap-arg.0
=Edge: L0%0%d => Lfor.cond%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.local_alloc_count.Lfor.cond%1%bbentry
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:-1:((((((start_pc_edge*  br label %for.cond, !dbg !21)*  %ret.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ], !dbg !15)*(  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ], !dbg !20*  br label %for.cond, !dbg !21))*  br label %for.cond, !dbg !21)*(  br label %for.cond, !dbg !21*  br label %for.cond, !dbg !21))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=Edge: Lfor.cond%1%bbentry => Lfor.cond%2%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%cmp.Lfor.cond%2%d
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*  %cmp = icmp ult i32 %i.0, %n, !dbg !22)
tfg_edge_comment end

=Edge: Lfor.cond%2%d => Lfor.body%1%d
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %cmp, label %for.body, label %for.end, !dbg !24*  br i1 %cmp, label %for.body, label %for.end, !dbg !24)*  br i1 %cmp, label %for.body, label %for.end, !dbg !24)
tfg_edge_comment end

=Edge: Lfor.cond%2%d => Lfor.end%1%d
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
2 : not(1) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %cmp, label %for.body, label %for.end, !dbg !24*  br i1 %cmp, label %for.body, label %for.end, !dbg !24)*  br i1 %cmp, label %for.body, label %for.end, !dbg !24)
tfg_edge_comment end

=Edge: Lfor.end%1%d => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:1:  ret i32 %ret.0, !dbg !33
tfg_edge_comment end

=Edge: Lfor.body%1%d => Lfor.cond%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : mlvar.dst.llvm.foo.0 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 0 { 0x0 +1.0e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : bvadd(5, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(2, 3, 4, 11, 12, 13) : BV:32
15 : bvadd(1, 14) : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%0.Lfor.cond%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
=dst.llvm-%add.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : mlvar.dst.llvm.foo.0 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 0 { 0x0 +1.0e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : bvadd(5, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(2, 3, 4, 11, 12, 13) : BV:32
15 : bvadd(1, 14) : BV:32
=dst.llvm-%arrayidx.Lfor.cond%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(3, 4) : BV:32
6 : bvadd(2, 5) : BV:32
7 : bvadd(1, 6) : BV:32
=dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(3, 4) : BV:32
6 : bvadd(2, 5) : BV:32
7 : bvadd(1, 6) : BV:32
=dst.llvm-%f9857086f688cad98a3e07acb716d2f.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : mlvar.dst.llvm.foo.0 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 0 { 0x0 +1.0e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : bvadd(5, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(2, 3, 4, 11, 12, 13) : BV:32
15 : bvadd(1, 14) : BV:32
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : input.dst.llvm-%x : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(3, 4) : BV:32
6 : bvadd(2, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : 4 { 0x4 +1.0e1025 } : INT
9 : islangaligned(7, 8) : BOOL
=EdgeAssume.1
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvslt(1, 2) : BOOL
4 : 32 { 0x20 +1.0e1025 } : INT
5 : bvsign_ext(1, 4) : BV:64
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvzero_ext(6, 4) : BV:64
8 : bvmul(5, 7) : BV:64
9 : 63 { 0x3f +1.0e1025 } : INT
10 : bvextract(8, 9, 4) : BV:32
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : eq(10, 11) : BOOL
13 : eq(10, 2) : BOOL
14 : ite(3, 12, 13) : BOOL
15 : 4 { 0x4 +1.0e1025 } : INT
16 : isindexforsize(14, 15) : BOOL
17 : input.dst.llvm-%x : BV:32
18 : bvmul(1, 6) : BV:32
19 : bvadd(2, 18) : BV:32
20 : bvadd(17, 19) : BV:32
21 : isgepoffset(20, 18) : BOOL
22 : and(16, 21) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:1:((  %arrayidx = getelementptr inbounds i32, i32* %x, i32 %i.0, !dbg !25*(  %arrayidx = getelementptr inbounds i32, i32* %x, i32 %i.0, !dbg !25*  %arrayidx = getelementptr inbounds i32, i32* %x, i32 %i.0, !dbg !25))*((((  %0 = load i32, i32* %arrayidx, align 4, !dbg !25*  %0 = load i32, i32* %arrayidx, align 4, !dbg !25)*(((  %add = add i32 %ret.0, %0, !dbg !27*  br label %for.inc, !dbg !28)*  br label %for.inc, !dbg !28)*  br label %for.inc, !dbg !28))*(((((  %inc = add i32 %i.0, 1, !dbg !29*  br label %for.cond, !dbg !30, !llvm.loop !31)*  %ret.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ], !dbg !15)*(  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ], !dbg !20*  br label %for.cond, !dbg !30, !llvm.loop !31))*  br label %for.cond, !dbg !30, !llvm.loop !31)*(  br label %for.cond, !dbg !30, !llvm.loop !31*  br label %for.cond, !dbg !30, !llvm.loop !31)))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge)))
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%x : BV:32
=predicate done
=start_pc_precondition.1
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%n : BV:32
=predicate done
=graph_with_precondition_done

=Locs in dst.llvm.foo
=Loc 100006 in dst.llvm.foo.
REGMEM
dst.llvm-%n
1 : input.dst.llvm-%n : BV:32
=Loc 100009 in dst.llvm.foo.
REGMEM
dst.llvm-%x
1 : input.dst.llvm-%x : BV:32
=Loc 100017 in dst.llvm.foo.
REGMEM
dst.llvm-%hidden-reg
1 : input.dst.llvm-%hidden-reg : BV:32
=Loc 100019 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.0
1 : input.dst.llvm-callee-save.0 : BV:32
=Loc 100020 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.1
1 : input.dst.llvm-callee-save.1 : BV:32
=Loc 100021 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.2
1 : input.dst.llvm-callee-save.2 : BV:32
=Loc 100022 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.3
1 : input.dst.llvm-callee-save.3 : BV:32
=Loc 100026 in dst.llvm.foo.
REGMEM
dst.local_alloc_count.=L0%0%d=
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=Loc 100027 in dst.llvm.foo.
REGMEM
dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
=Loc 100028 in dst.llvm.foo.
REGMEM
dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=Loc 100030 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 100031 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/
=Loc 100032 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
=Loc 100033 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem-may-straddle-symbol.1-heap
=Loc 100034 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.1
=Loc 100035 in dst.llvm.foo.
REGMEM
dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=Loc 100036 in dst.llvm.foo.
REGMEM
dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=Loc 100037 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=Loc 100038 in dst.llvm.foo.
REGMEM
dst.llvm-indir_tgt.E0%0%d
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=Loc 100039 in dst.llvm.foo.
REGMEM
dst.llvm-%cmp.Lfor.cond%2%d
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=Loc 100040 in dst.llvm.foo.
REGMEM
dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=Loc 100041 in dst.llvm.foo.
REGMEM
dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=Loc 100042 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=Loc 100043 in dst.llvm.foo.
REGMEM
dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=Loc 100044 in dst.llvm.foo.
REGMEM
dst.llvm-%0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%0.Lfor.cond%1%bbentry : BV:32
=Loc 100045 in dst.llvm.foo.
REGMEM
dst.llvm-%add.Lfor.cond%1%bbentry
1 : input.dst.llvm-%add.Lfor.cond%1%bbentry : BV:32
=Loc 100046 in dst.llvm.foo.
REGMEM
dst.llvm-%arrayidx.Lfor.cond%1%bbentry
1 : input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry : BV:32
=Loc 100047 in dst.llvm.foo.
REGMEM
dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=Loc 100048 in dst.llvm.foo.
REGMEM
dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=Loc 100049 in dst.llvm.foo.
REGMEM
dst.llvm-%f9857086f688cad98a3e07acb716d2f.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=Loc 100050 in dst.llvm.foo.
REGMEM
dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=Loc 100051 in dst.llvm.foo.
REGMEM
dst.llvm-%inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=Loc 100052 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=Loc 100053 in dst.llvm.foo.
REGMEM
dst.local_alloc_count.Lfor.cond%1%bbentry
1 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
=Loc 100054 in dst.llvm.foo.
REGMEM
dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : ROUNDING_MODE
=Locs end
=Liveness in dst.llvm.foo
=live locs at L0%0%d
100006, 100009, 100031, 100032, 100033, 
=live locs at Lfor.body%1%d
100006, 100009, 100031, 100032, 100033, 100037, 100040, 
=live locs at Lfor.cond%1%bbentry
100006, 100009, 100031, 100032, 100033, 100037[f], 100040, 
=live locs at Lfor.cond%2%d
100006, 100009, 100031, 100032, 100033, 100037[f], 100039, 100040, 
=live locs at Lfor.end%1%d
100033, 100037[f], 
=live locs at E0%0%d
100033, 100037[f], 

=Definedness in dst.llvm.foo
=loc definedness at L0%0%d
100006, 100009, 100027, 100028, 100030, 100031, 100032, 100033, 100034
=loc definedness at Lfor.body%1%d
100006, 100009, 100027, 100028, 100030, 100031, 100032, 100033, 100034, 100037, 100039, 100040, 100041, 100042, 100043, 100053, 100054
=loc definedness at Lfor.cond%1%bbentry
100006, 100009, 100027, 100028, 100030, 100031, 100032, 100033, 100034, 100037, 100040, 100041, 100042, 100043, 100053, 100054
=loc definedness at Lfor.cond%2%d
100006, 100009, 100027, 100028, 100030, 100031, 100032, 100033, 100034, 100037, 100039, 100040, 100041, 100042, 100043, 100053, 100054
=loc definedness at Lfor.end%1%d
100006, 100009, 100027, 100028, 100030, 100031, 100032, 100033, 100034, 100037, 100039, 100040, 100041, 100042, 100043, 100053, 100054
=loc definedness at E0%0%d
100006, 100009, 100027, 100028, 100030, 100031, 100032, 100033, 100034, 100035, 100036, 100037, 100038, 100039, 100040, 100041, 100042, 100043, 100053, 100054

=Branch affecting variable locs in dst.llvm.foo
=branch affecting variable locs at L0%0%d
100006
=branch affecting variable locs at Lfor.body%1%d
100006, 100040
=branch affecting variable locs at Lfor.cond%1%bbentry
100006, 100040
=branch affecting variable locs at Lfor.cond%2%d
100006, 100039, 100040
=branch affecting variable locs at Lfor.end%1%d

=branch affecting variable locs at E0%0%d


=Relevant Memlabels in dst.llvm.foo
=relevant memlabels
=function: foo
memlabel-mem--arg.0
memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
memlabel-mem-may-straddle-symbol.1-heap
memlabel-mem--arg.1
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100037 {input.dst.llvm-%ret.0.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100040 {input.dst.llvm-%i.0.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100041 {input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100042 {input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100043 {input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100053 {input.dst.local_alloc_count.Lfor.cond%1%bbentry }
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100054 {input.dst.cur_rounding_mode.Lfor.cond%1%bbentry }
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100037 {input.dst.llvm-%ret.0.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(2, 3, 4, 9, 10, 11) : BV:32
13 : bvadd(1, 12) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100040 {input.dst.llvm-%i.0.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100043 {input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100044 {input.dst.llvm-%0.Lfor.cond%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100045 {input.dst.llvm-%add.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(2, 3, 4, 9, 10, 11) : BV:32
13 : bvadd(1, 12) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100046 {input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100047 {input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.1.total_offset.Lfor.cond%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100048 {input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.2.total_offset.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100049 {input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100050 {input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100051 {input.dst.llvm-%inc.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100052 {input.dst.llvm-%ret.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(2, 3, 4, 9, 10, 11) : BV:32
13 : bvadd(1, 12) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%1%bbentry=>Lfor.cond%2%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%1%bbentry=>Lfor.cond%2%d for loc_id 100039 {input.dst.llvm-%cmp.Lfor.cond%2%d }
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%1%bbentry=>Lfor.cond%2%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.body%1%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.body%1%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.end%1%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.end%1%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.end%1%d=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.end%1%d=>E0%0%d for loc_id 100035 {input.dst.llvm-%hidden-reg.E0%0%d }
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.end%1%d=>E0%0%d for loc_id 100036 {input.dst.llvm-%ret-reg.E0%0%d }
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.end%1%d=>E0%0%d for loc_id 100038 {input.dst.llvm-indir_tgt.E0%0%d }
1 : retaddr_const : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.end%1%d=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at Lfor.body%1%d:
vacuous mls at Lfor.cond%1%bbentry:
vacuous mls at Lfor.cond%2%d:
vacuous mls at Lfor.end%1%d:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at Lfor.body%1%d:
non-vacuous mls at Lfor.cond%1%bbentry:
non-vacuous mls at Lfor.cond%2%d:
non-vacuous mls at Lfor.end%1%d:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in dst.llvm.foo
=avail_exprs begin
=loc 100006
=loc_expr
140343 : input.dst.llvm-%n : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100009
=loc_expr
140345 : input.dst.llvm-%x : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100017
=loc_expr
140387 : input.dst.llvm-%hidden-reg : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100019
=loc_expr
140388 : input.dst.llvm-callee-save.0 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100020
=loc_expr
140390 : input.dst.llvm-callee-save.1 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100021
=loc_expr
140392 : input.dst.llvm-callee-save.2 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100022
=loc_expr
140394 : input.dst.llvm-callee-save.3 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100026
=loc_expr
140350 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100027
=loc_expr
140342 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100028
=loc_expr
140344 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100035
=loc_expr
140494 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=avail_exprs_val.end
=loc 100036
=loc_expr
140495 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.end
=loc 100038
=loc_expr
140496 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : retaddr_const : BV:32
=avail_exprs_val.end
=loc 100041
=loc_expr
140497 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100042
=loc_expr
140498 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100053
=loc_expr
140508 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.end
=loc 100054
=loc_expr
140509 : input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : ROUNDING_MODE
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=avail_exprs_val.end
=avail_exprs end
=sprel_map in dst.llvm.foo
=loc 100038 expr
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=loc 100038 spreled-expr
140267 : retaddr_const : BV:32
=loc 100041 expr
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=loc 100041 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100042 expr
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=loc 100042 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100053 expr
1 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
=loc 100053 spreled-expr
140350 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=loc 100054 expr
1 : input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : ROUNDING_MODE
=loc 100054 spreled-expr
140349 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;foo}
=loc_id 100006 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.1, )
=loc_id 100009 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100017 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100019 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100020 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100021 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100022 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100026 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100027 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100028 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100030 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100031 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100032 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100033 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100034 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100035 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100036 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100037 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100038 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100039 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.1, )
=loc_id 100040 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100041 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100042 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100043 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100044 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100045 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100046 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100047 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100048 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100049 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100050 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100051 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100052 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100053 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100054 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 100038 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100041 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100042 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100053 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100054 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>Lfor.cond%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.body%1%d=>Lfor.cond%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond%1%bbentry=>Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond%2%d=>Lfor.body%1%d
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond%2%d=>Lfor.end%1%d
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
2 : not(1) : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.end%1%d=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>Lfor.cond%1%bbentry
=dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.local_alloc_count.Lfor.cond%1%bbentry
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.body%1%d=>Lfor.cond%1%bbentry
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(2, 3, 4, 9, 10, 11) : BV:32
13 : bvadd(1, 12) : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%0.Lfor.cond%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
=dst.llvm-%add.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(2, 3, 4, 9, 10, 11) : BV:32
13 : bvadd(1, 12) : BV:32
=dst.llvm-%arrayidx.Lfor.cond%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%f9857086f688cad98a3e07acb716d2f.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%inc.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(2, 3, 4, 9, 10, 11) : BV:32
13 : bvadd(1, 12) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond%1%bbentry=>Lfor.cond%2%d
=dst.llvm-%cmp.Lfor.cond%2%d
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond%2%d=>Lfor.body%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond%2%d=>Lfor.end%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.end%1%d=>E0%0%d
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lfor.cond%1%bbentry
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lfor.cond%1%bbentry assume# 0
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lfor.cond%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%d=>Lfor.cond%1%bbentry
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%d=>Lfor.cond%1%bbentry assume# 0
1 : 4 { 0x4 +1.0e1025 } : BV:64
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : 32 { 0x20 +1.0e1025 } : INT
4 : bvsign_ext(2, 3) : BV:64
5 : bvmul(1, 4) : BV:64
6 : 63 { 0x3f +1.0e1025 } : INT
7 : bvextract(5, 6, 3) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvslt(2, 8) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : ite(9, 10, 8) : BV:32
12 : eq(7, 11) : BOOL
13 : 4 { 0x4 +1.0e1025 } : INT
14 : isindexforsize(12, 13) : BOOL
15 : input.dst.llvm-%x : BV:32
16 : 4 { 0x4 +1.47e129 } : BV:32
17 : bvmul(16, 2) : BV:32
18 : bvadd(15, 17) : BV:32
19 : isgepoffset(18, 17) : BOOL
20 : and(14, 19) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%d=>Lfor.cond%1%bbentry assume# 1
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
6 : 4 { 0x4 +1.0e1025 } : INT
7 : islangaligned(5, 6) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%d=>Lfor.cond%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%1%bbentry=>Lfor.cond%2%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%1%bbentry=>Lfor.cond%2%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.body%1%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.body%1%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.end%1%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.end%1%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.end%1%d=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at Lfor.end%1%d=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
1
=String-contents:
=Nextpc-map:
=Nextpc-map done
=suffixpaths for dst.llvm.foo
=suffixpath_at_L0%0%d for dst.llvm.foo
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_Lfor.body%1%d for dst.llvm.foo
=suffixpath_at_Lfor.body%1%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*(Lfor.cond%2%d=>Lfor.body%1%d)))
=suffixpath_at_Lfor.cond%1%bbentry for dst.llvm.foo
=suffixpath_at_Lfor.cond%1%bbentry.graph_edge_composition
(L0%0%d=>Lfor.cond%1%bbentry)
=suffixpath_at_Lfor.cond%2%d for dst.llvm.foo
=suffixpath_at_Lfor.cond%2%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.cond%2%d))
=suffixpath_at_Lfor.end%1%d for dst.llvm.foo
=suffixpath_at_Lfor.end%1%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*(Lfor.cond%2%d=>Lfor.end%1%d)))
=suffixpath_at_E0%0%d for dst.llvm.foo
=suffixpath_at_E0%0%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.end%1%d)*(Lfor.end%1%d=>E0%0%d))))
=suffixpaths for dst.llvm.foo done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry assume #0
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry assume #0.ec
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry assume #0.pred
=Comment
undef-behaviour-align-assume.edge.L0%0%d=>Lfor.cond%1%bbentry
=LhsExpr
140345 : input.dst.llvm-%x : BV:32
140331 : 4 { 0x4 +1.0e1025 } : INT
140351 : islangaligned(140345, 140331) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry done
tfg.assumes_around_edge at Lfor.body%1%d=>Lfor.cond%1%bbentry
tfg.assumes_around_edge at Lfor.body%1%d=>Lfor.cond%1%bbentry assume #0
tfg.assumes_around_edge at Lfor.body%1%d=>Lfor.cond%1%bbentry assume #0.ec
tfg.assumes_around_edge at Lfor.body%1%d=>Lfor.cond%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lfor.body%1%d=>Lfor.cond%1%bbentry assume #0.pred
=Comment
undef-behavioursome.edge.Lfor.body%1%d=>Lfor.cond%1%bbentry
=LhsExpr
140422 : 4 { 0x4 +1.0e1025 } : BV:64
140473 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
140363 : 32 { 0x20 +1.0e1025 } : INT
140484 : bvsign_ext(140473, 140363) : BV:64
140549 : bvmul(140422, 140484) : BV:64
140367 : 63 { 0x3f +1.0e1025 } : INT
140550 : bvextract(140549, 140367, 140363) : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
140483 : bvslt(140473, 140276) : BOOL
140369 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
140563 : ite(140483, 140369, 140276) : BV:32
140565 : eq(140550, 140563) : BOOL
140331 : 4 { 0x4 +1.0e1025 } : INT
140567 : isindexforsize(140565, 140331) : BOOL
140345 : input.dst.llvm-%x : BV:32
140328 : 4 { 0x4 +1.47e129 } : BV:32
140519 : bvmul(140328, 140473) : BV:32
140522 : bvadd(140345, 140519) : BV:32
140569 : isgepoffset(140522, 140519) : BOOL
140571 : and(140567, 140569) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lfor.body%1%d=>Lfor.cond%1%bbentry assume #1
tfg.assumes_around_edge at Lfor.body%1%d=>Lfor.cond%1%bbentry assume #1.ec
tfg.assumes_around_edge at Lfor.body%1%d=>Lfor.cond%1%bbentry assume #1.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lfor.body%1%d=>Lfor.cond%1%bbentry assume #1.pred
=Comment
undef-behaviour-align-assume.edge.Lfor.body%1%d=>Lfor.cond%1%bbentry
=LhsExpr
140345 : input.dst.llvm-%x : BV:32
140328 : 4 { 0x4 +1.47e129 } : BV:32
140473 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
140519 : bvmul(140328, 140473) : BV:32
140522 : bvadd(140345, 140519) : BV:32
140331 : 4 { 0x4 +1.0e1025 } : INT
140540 : islangaligned(140522, 140331) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lfor.body%1%d=>Lfor.cond%1%bbentry done
tfg.assumes_around_edge at Lfor.cond%1%bbentry=>Lfor.cond%2%d
tfg.assumes_around_edge at Lfor.cond%1%bbentry=>Lfor.cond%2%d done
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.body%1%d
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.body%1%d done
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.end%1%d
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.end%1%d done
tfg.assumes_around_edge at Lfor.end%1%d=>E0%0%d
tfg.assumes_around_edge at Lfor.end%1%d=>E0%0%d done
tfg.assumes_around_edge done
=TFGdone
=PC_to_linename:
=pc
Lentry%1%d
=linename
line 3
=pc
Lfor.body%1%d
=linename
line 4
=pc
Lfor.body%2%d
=linename
line 4
=pc
Lfor.body%3%d
=linename
line 4
=pc
Lfor.body%4%d
=linename
line 5
=pc
Lfor.cond%1%d
=linename
line 3
=pc
Lfor.cond%2%d
=linename
line 3
=pc
Lfor.end%1%d
=linename
line 6
=pc
Lfor.inc%1%d
=linename
line 3
=pc
Lfor.inc%2%d
=linename
line 3
=PC_to_linename done
=PC_to_column_name:
=pc
Lentry%1%d
=column_name
 at column 8
=pc
Lfor.body%1%d
=column_name
 at column 12
=pc
Lfor.body%2%d
=column_name
 at column 12
=pc
Lfor.body%3%d
=column_name
 at column 9
=pc
Lfor.body%4%d
=column_name
 at column 3
=pc
Lfor.cond%1%d
=column_name
 at column 26
=pc
Lfor.cond%2%d
=column_name
 at column 3
=pc
Lfor.end%1%d
=column_name
 at column 3
=pc
Lfor.inc%1%d
=column_name
 at column 31
=pc
Lfor.inc%2%d
=column_name
 at column 3
=PC_to_column_name done
=PC_to_line_and_column:
=pc
Lentry%1%d
=line_and_column
(line 3 at column 8)
=pc
Lfor.body%1%d
=line_and_column
(line 4 at column 12)
=pc
Lfor.body%2%d
=line_and_column
(line 4 at column 12)
=pc
Lfor.body%3%d
=line_and_column
(line 4 at column 9)
=pc
Lfor.body%4%d
=line_and_column
line 5
=pc
Lfor.cond%1%d
=line_and_column
(line 3 at column 26)
=pc
Lfor.cond%2%d
=line_and_column
(line 3 at column 3)
=pc
Lfor.end%1%d
=line_and_column
line 6
=pc
Lfor.inc%1%d
=line_and_column
(line 3 at column 31)
=pc
Lfor.inc%2%d
=line_and_column
(line 3 at column 3)
=PC_to_line_and_column done
=SourceToLLVMVarnames:
=SourceToLLVMVarnames done
=InputLLVMToSourceVarnames:
input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : L0%0%d : input.dst.local./*___y___foo__x__=L0%0%argnum1=/
input.dst.llvm-%n : L0%0%d : n'
input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : L0%0%d : input.dst.local./*___y___foo__x__=L0%0%argnum0=/
input.dst.llvm-%x : L0%0%d : x'
input.dst.llvm-%ret.0 : Lfor.cond%1%bbentry : ret'
input.dst.local_alloc_count.=L0%0%d= : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.llvm-%i.0.phi.tmpvar.entry : L0%0%d : 0
input.dst.llvm-%ret.0.phi.tmpvar.entry : L0%0%d : 0
input.dst.llvm-%i.0 : Lfor.cond%1%bbentry : i'
input.dst.llvm-%0 : L0%0%d : DSTMEM[input.dst.llvm-%arrayidx]_4
input.dst.llvm-%add : Lfor.body%4%bbentry : ret'
input.dst.llvm-%inc : Lfor.inc%2%bbentry : i'
input.dst.llvm-%hidden-reg : L0%0%d : input.dst.llvm-%hidden-reg
input.dst.llvm-callee-save.0 : L0%0%d : input.dst.llvm-callee-save.0
input.dst.llvm-callee-save.1 : L0%0%d : input.dst.llvm-callee-save.1
input.dst.llvm-callee-save.2 : L0%0%d : input.dst.llvm-callee-save.2
input.dst.llvm-callee-save.3 : L0%0%d : input.dst.llvm-callee-save.3
input.dst.llvm-%arrayidx : L0%0%d : input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.2.total_offset
input.dst.llvm-%ret.0.phi.tmpvar.for.inc : L0%0%d : input.dst.llvm-%add
input.dst.llvm-%ret-reg : L0%0%d : input.dst.llvm-%ret.0
input.dst.llvm-indir_tgt : L0%0%d : return-address
input.dst.local_alloc_count : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.cur_rounding_mode : L0%0%d : ROUND_to_nearest_ties_to_even
input.dst.llvm-indir_tgt.E0%0%d : L0%0%d : return-address
input.dst.llvm-%hidden-reg.E0%0%d : L0%0%d : bvxor(bvxor(bvxor(bvxor(input.dst.llvm-%hidden-reg, input.dst.llvm-callee-save.0), input.dst.llvm-callee-save.1), input.dst.llvm-callee-save.2), input.dst.llvm-callee-save.3)
input.dst.llvm-%ret-reg.E0%0%d : L0%0%d : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : L0%0%d : 0
input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : L0%0%d : 0
input.dst.local_alloc_count.Lfor.cond%1%bbentry : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : L0%0%d : ROUND_to_nearest_ties_to_even
=InputLLVMToSourceVarnames done
=PotentialSCEVRelations:
=dst.llvm-%i.0
=dst.llvm-%i.0 loop pc: Lfor.cond%1%d
=dst.llvm-%i.0 val_scevb
=dst.llvm-%i.0 val_scevb scev
=dst.llvm-%i.0 val_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%i.0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%i.0 val_scevb scev scev_expr
1 : 00000000000000000000000000000000b
2 : 00000000000000000000000000000001b
3 : scev_op_addrec(1, 2) : loop Lfor.cond%1%d : 
=dst.llvm-%i.0 val_scevb scev scev_expr done
=dst.llvm-%i.0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%i.0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%i.0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%i.0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%i.0 atuse_scevb
=dst.llvm-%i.0 atuse_scevb scev
=dst.llvm-%i.0 atuse_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%i.0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%i.0 atuse_scevb scev scev_expr
1 : 00000000000000000000000000000000b
2 : 00000000000000000000000000000001b
3 : scev_op_addrec(1, 2) : loop Lfor.cond%1%d : 
=dst.llvm-%i.0 atuse_scevb scev scev_expr done
=dst.llvm-%i.0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%i.0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%i.0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%i.0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%i.0 atexit_scev
=dst.llvm-%i.0 atexit_scev loop: L0%0%d
=dst.llvm-%i.0 atexit_scev scev_overflow_flag: 
=dst.llvm-%i.0 atexit_scev scev_expr
4 : input.dst.llvm-%n : BV32
=dst.llvm-%i.0 atexit_scev scev_expr done
=dst.llvm-%ret.0
=dst.llvm-%ret.0 loop pc: Lfor.cond%1%d
=dst.llvm-%ret.0 val_scevb
=dst.llvm-%ret.0 val_scevb scev
=dst.llvm-%ret.0 val_scevb scev loop: L0%0%d
=dst.llvm-%ret.0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%ret.0 val_scevb scev scev_expr
5 : input.dst.llvm-%ret.0 : BV32
=dst.llvm-%ret.0 val_scevb scev scev_expr done
=dst.llvm-%ret.0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%ret.0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%ret.0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%ret.0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%ret.0 atuse_scevb
=dst.llvm-%ret.0 atuse_scevb scev
=dst.llvm-%ret.0 atuse_scevb scev loop: L0%0%d
=dst.llvm-%ret.0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%ret.0 atuse_scevb scev scev_expr
5 : input.dst.llvm-%ret.0 : BV32
=dst.llvm-%ret.0 atuse_scevb scev scev_expr done
=dst.llvm-%ret.0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%ret.0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%ret.0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%ret.0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%ret.0 atexit_scev
=dst.llvm-%ret.0 atexit_scev loop: L0%0%d
=dst.llvm-%ret.0 atexit_scev scev_overflow_flag: 
=dst.llvm-%ret.0 atexit_scev scev_expr
5 : input.dst.llvm-%ret.0 : BV32
=dst.llvm-%ret.0 atexit_scev scev_expr done
=dst.llvm-%arrayidx
=dst.llvm-%arrayidx loop pc: Lfor.cond%1%d
=dst.llvm-%arrayidx val_scevb
=dst.llvm-%arrayidx val_scevb scev
=dst.llvm-%arrayidx val_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%arrayidx val_scevb scev scev_overflow_flag: 
=dst.llvm-%arrayidx val_scevb scev scev_expr
6 : input.dst.llvm-%x : BV32
7 : 00000000000000000000000000000100b
8 : scev_op_addrec(6, 7) : loop Lfor.cond%1%d : 
=dst.llvm-%arrayidx val_scevb scev scev_expr done
=dst.llvm-%arrayidx val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%arrayidx val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%arrayidx val_scevb signed lower bound: 32:4294967295
=dst.llvm-%arrayidx val_scevb signed upper bound: 32:4294967295
=dst.llvm-%arrayidx atuse_scevb
=dst.llvm-%arrayidx atuse_scevb scev
=dst.llvm-%arrayidx atuse_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%arrayidx atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%arrayidx atuse_scevb scev scev_expr
6 : input.dst.llvm-%x : BV32
7 : 00000000000000000000000000000100b
8 : scev_op_addrec(6, 7) : loop Lfor.cond%1%d : 
=dst.llvm-%arrayidx atuse_scevb scev scev_expr done
=dst.llvm-%arrayidx atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%arrayidx atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%arrayidx atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%arrayidx atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%arrayidx atexit_scev
=dst.llvm-%arrayidx atexit_scev loop: L0%0%d
=dst.llvm-%arrayidx atexit_scev scev_overflow_flag: 
=dst.llvm-%arrayidx atexit_scev scev_expr
7 : 00000000000000000000000000000100b
4 : input.dst.llvm-%n : BV32
9 : scev_op_mul(7, 4) : loop L0%0%d : 
6 : input.dst.llvm-%x : BV32
10 : scev_op_add(9, 6) : loop L0%0%d : 
=dst.llvm-%arrayidx atexit_scev scev_expr done
=dst.llvm-%0
=dst.llvm-%0 loop pc: Lfor.cond%1%d
=dst.llvm-%0 val_scevb
=dst.llvm-%0 val_scevb scev
=dst.llvm-%0 val_scevb scev loop: L0%0%d
=dst.llvm-%0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%0 val_scevb scev scev_expr
11 : input.dst.llvm-%0 : BV32
=dst.llvm-%0 val_scevb scev scev_expr done
=dst.llvm-%0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%0 atuse_scevb
=dst.llvm-%0 atuse_scevb scev
=dst.llvm-%0 atuse_scevb scev loop: L0%0%d
=dst.llvm-%0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%0 atuse_scevb scev scev_expr
11 : input.dst.llvm-%0 : BV32
=dst.llvm-%0 atuse_scevb scev scev_expr done
=dst.llvm-%0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%0 atexit_scev
=dst.llvm-%0 atexit_scev loop: L0%0%d
=dst.llvm-%0 atexit_scev scev_overflow_flag: 
=dst.llvm-%0 atexit_scev scev_expr
11 : input.dst.llvm-%0 : BV32
=dst.llvm-%0 atexit_scev scev_expr done
=dst.llvm-%add
=dst.llvm-%add loop pc: Lfor.cond%1%d
=dst.llvm-%add val_scevb
=dst.llvm-%add val_scevb scev
=dst.llvm-%add val_scevb scev loop: L0%0%d
=dst.llvm-%add val_scevb scev scev_overflow_flag: 
=dst.llvm-%add val_scevb scev scev_expr
11 : input.dst.llvm-%0 : BV32
5 : input.dst.llvm-%ret.0 : BV32
12 : scev_op_add(11, 5) : loop L0%0%d : 
=dst.llvm-%add val_scevb scev scev_expr done
=dst.llvm-%add val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%add val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%add val_scevb signed lower bound: 32:4294967295
=dst.llvm-%add val_scevb signed upper bound: 32:4294967295
=dst.llvm-%add atuse_scevb
=dst.llvm-%add atuse_scevb scev
=dst.llvm-%add atuse_scevb scev loop: L0%0%d
=dst.llvm-%add atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%add atuse_scevb scev scev_expr
11 : input.dst.llvm-%0 : BV32
5 : input.dst.llvm-%ret.0 : BV32
12 : scev_op_add(11, 5) : loop L0%0%d : 
=dst.llvm-%add atuse_scevb scev scev_expr done
=dst.llvm-%add atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%add atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%add atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%add atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%add atexit_scev
=dst.llvm-%add atexit_scev loop: L0%0%d
=dst.llvm-%add atexit_scev scev_overflow_flag: 
=dst.llvm-%add atexit_scev scev_expr
11 : input.dst.llvm-%0 : BV32
5 : input.dst.llvm-%ret.0 : BV32
12 : scev_op_add(11, 5) : loop L0%0%d : 
=dst.llvm-%add atexit_scev scev_expr done
=dst.llvm-%inc
=dst.llvm-%inc loop pc: Lfor.cond%1%d
=dst.llvm-%inc val_scevb
=dst.llvm-%inc val_scevb scev
=dst.llvm-%inc val_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%inc val_scevb scev scev_overflow_flag: 
=dst.llvm-%inc val_scevb scev scev_expr
2 : 00000000000000000000000000000001b
13 : scev_op_addrec(2, 2) : loop Lfor.cond%1%d : 
=dst.llvm-%inc val_scevb scev scev_expr done
=dst.llvm-%inc val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%inc val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%inc val_scevb signed lower bound: 32:4294967295
=dst.llvm-%inc val_scevb signed upper bound: 32:4294967295
=dst.llvm-%inc atuse_scevb
=dst.llvm-%inc atuse_scevb scev
=dst.llvm-%inc atuse_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%inc atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%inc atuse_scevb scev scev_expr
2 : 00000000000000000000000000000001b
13 : scev_op_addrec(2, 2) : loop Lfor.cond%1%d : 
=dst.llvm-%inc atuse_scevb scev scev_expr done
=dst.llvm-%inc atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%inc atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%inc atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%inc atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%inc atexit_scev
=dst.llvm-%inc atexit_scev loop: L0%0%d
=dst.llvm-%inc atexit_scev scev_overflow_flag: 
=dst.llvm-%inc atexit_scev scev_expr
2 : 00000000000000000000000000000001b
4 : input.dst.llvm-%n : BV32
14 : scev_op_add(2, 4) : loop L0%0%d : 
=dst.llvm-%inc atexit_scev scev_expr done
=PotentialSCEVRelations done
=ReachingDefinitionsForLocs:
=Reaching Definitions at L0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns done
=Reaching Definitions at Lfor.body%1%d
=reaching defns for expr 0
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 7 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 8 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 9 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%add.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns done
=Reaching Definitions at Lfor.cond%1%bbentry
=reaching defns for expr 0
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 7 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 8 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 9 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%add.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns done
=Reaching Definitions at Lfor.cond%2%d
=reaching defns for expr 0
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 7 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 8 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 9 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%add.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns done
=Reaching Definitions at Lfor.end%1%d
=reaching defns for expr 0
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 7 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 8 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 9 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%add.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns done
=Reaching Definitions at E0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 7 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 8 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 9 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=reaching defns for expr 11 edges
  Lfor.end%1%d=>E0%0%d
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=reaching defns for expr 12 edges
  Lfor.end%1%d=>E0%0%d
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=reaching defns for expr 13 edges
  Lfor.end%1%d=>E0%0%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 14 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 15 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%add.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns done
=ReachingDefinitionsForLocs done
=VarnameToLRStatus Begin:
=LR status for var input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.2.total_offset.Lfor.cond%1%bbentry
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.local./*___y___foo__x__=L0%0%argnum1=/
lr_status_top
=LR status for var input.dst.llvm-%n
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.1, )
=LR status for var input.dst.local./*___y___foo__x__=L0%0%argnum0=/
lr_status_top
=LR status for var input.dst.llvm-%x
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.local_alloc_count.=L0%0%d=
lr_status_top
=LR status for var input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%hidden-reg
lr_status_top
=LR status for var input.dst.llvm-callee-save.0
lr_status_top
=LR status for var input.dst.llvm-callee-save.1
lr_status_top
=LR status for var input.dst.llvm-callee-save.2
lr_status_top
=LR status for var input.dst.llvm-callee-save.3
lr_status_top
=LR status for var input.dst.llvm-%i.0.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%cmp.Lfor.cond%2%d
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.1, )
=LR status for var input.dst.llvm-%0.Lfor.cond%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-indir_tgt.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%hidden-reg.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%add.Lfor.cond%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%ret-reg.E0%0%d
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.1.total_offset.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%inc.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%ret.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.local_alloc_count.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=VarnameToLRStatus End
=TFG_LLVM_done
=TFG_SSA_done
=eqcheck_info
=eqcheck
=proof_filename couple8.proof
=function_name foo
=asm_filename NONE
=fixed_reg_mappings begin
0 : 0 : 0
0 : 4 : 4
=fixed_reg_mappings end
=rodata_map begin
=rodata_map end
=dst_iseq
=dst_iseq done
=dst_insn_pcs
=dst_insn_pcs done
=xml_output_format text-color
=use_only_relocatable_memlabels 0
=run_safety_check 0
=debug_header_pc_lsprels
=Local offsets from compile log
=Local offsets from compile log done
=done
=spec_iospecs
=SpecFuncIOSpecs
=FunctionName: foo
=EntryPreconds
=pred 0
=Comment
pointer-implements-variable-sized-map
=LhsExpr
1 : $spec-arg-0 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : $llvm-arg-1 : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : $llvm-md : ARRAY[BV:32 -> BV:8]
11 : $llvm-ma : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : $llvm-arg-0 : BV:32
14 : 4 { 0x4 +1.47e129 } : BV:32
15 : bvmul(9, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=EntryPreconds done
=ExitAsserts
=pred 0
=Comment
equal-regs
=LhsExpr
1 : $spec-ret : BV:32
2 : $llvm-ret : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=ExitAsserts done
=SpecFuncIOSpecs done
=eqcheck done
=graph_with_guessing
=Nodes: L0%0%d_L0%0%d L2%7%bbentry_Lfor.cond%1%bbentry E0%0%d_E0%0%d
=Edges:
L0%0%d_L0%0%d => L2%7%bbentry_Lfor.cond%1%bbentry
L2%7%bbentry_Lfor.cond%1%bbentry => L2%7%bbentry_Lfor.cond%1%bbentry
L2%7%bbentry_Lfor.cond%1%bbentry => E0%0%d_E0%0%d
=graph done
=is_ssa_graph:
0
=StartState:
=state_end
=graph_with_var_versions done
=FunctionName: foo
=Input: llvm-method-arg.1
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
=arg val
1 : input.dst.llvm-%n : BV:32
=arg end
=Input: llvm-method-arg.0
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%x : BV:32
=arg end
=Node outputs: E0%0%d_E0%0%d
=Node outputs done for E0%0%d_E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : foo : 20 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%x : 4 : 4 : 0
C_LOCAL=L0%0%argnum1= : dst.llvm-%n : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
=Edge: L0%0%d_L0%0%d => L2%7%bbentry_Lfor.cond%1%bbentry
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L0%0%d to L2%7%bbentry at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
(L0%0%d#{0,0}=>L2%7%bbentry#{0,0})
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from L0%0%d to Lfor.cond%1%bbentry at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
(L0%0%d#{0,0}=>Lfor.cond%1%bbentry#{0,0})
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L2%7%bbentry_Lfor.cond%1%bbentry => L2%7%bbentry_Lfor.cond%1%bbentry
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L2%7%bbentry to L2%7%bbentry at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
((L2%7%bbentry#{0,0}=>L2%8%d#{0,0})*((L2%8%d#{0,0}=>L2%11%bbentry#{0,0})*(L2%11%bbentry#{0,0}=>L2%7%bbentry#{1,0})))
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lfor.cond%1%bbentry to Lfor.cond%1%bbentry at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((Lfor.cond%1%bbentry#{0,0}=>Lfor.cond%2%d#{0,0})*((Lfor.cond%2%d#{0,0}=>Lfor.body%1%d#{0,0})*(Lfor.body%1%d#{0,0}=>Lfor.cond%1%bbentry#{1,0})))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L2%7%bbentry_Lfor.cond%1%bbentry => E0%0%d_E0%0%d
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L2%7%bbentry to E0%0%d at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
((L2%7%bbentry#{0,0}=>L2%8%d#{0,0})*((L2%8%d#{0,0}=>L2%9%bbentry#{0,0})*(L2%9%bbentry#{0,0}=>E0%0%d#{0,0})))
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lfor.cond%1%bbentry to E0%0%d at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((Lfor.cond%1%bbentry#{0,0}=>Lfor.cond%2%d#{0,0})*((Lfor.cond%2%d#{0,0}=>Lfor.end%1%d#{0,0})*(Lfor.end%1%d#{0,0}=>E0%0%d#{0,0})))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
pointer-implements-variable-sized-map
=LhsExpr
1 : input.spec-%var-x-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%x : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.1
=Comment
precond-mlasserts
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : bvuge(1, 10) : BOOL
18 : bvule(1, 11) : BOOL
19 : and(17, 18) : BOOL
20 : bvuge(2, 10) : BOOL
21 : bvule(2, 11) : BOOL
22 : and(20, 21) : BOOL
23 : not(22) : BOOL
24 : andnot1(19, 23) : BOOL
25 : bvuge(10, 1) : BOOL
26 : bvule(10, 2) : BOOL
27 : and(25, 26) : BOOL
28 : bvuge(11, 1) : BOOL
29 : bvule(11, 2) : BOOL
30 : and(28, 29) : BOOL
31 : not(30) : BOOL
32 : andnot1(27, 31) : BOOL
33 : and(24, 32) : BOOL
34 : and(16, 33) : BOOL
35 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
36 : 3 { 0x3 +1.35e129 } : BV:32
37 : bvand(35, 36) : BV:32
38 : 0 { 0x0 +1.0e129 } : BV:32
39 : eq(37, 38) : BOOL
40 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
41 : bvand(40, 36) : BV:32
42 : eq(41, 38) : BOOL
43 : and(39, 42) : BOOL
44 : and(34, 43) : BOOL
45 : eq(35, 1) : BOOL
46 : eq(40, 10) : BOOL
47 : and(45, 46) : BOOL
48 : and(44, 47) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.2
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%n : BV:32
=predicate done
=start_pc_precondition.3
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%x : BV:32
=predicate done
=graph_with_precondition_done

=Locs in foo.A1.B2.C1
=Locs end
=Liveness in foo.A1.B2.C1
=live locs at L0%0%d_L0%0%d

=live locs at L2%7%bbentry_Lfor.cond%1%bbentry

=live locs at E0%0%d_E0%0%d


=Definedness in foo.A1.B2.C1

=Branch affecting variable locs in foo.A1.B2.C1

=Relevant Memlabels in foo.A1.B2.C1
=relevant memlabels
=function: foo
memlabel-mem--arg.0
memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
memlabel-mem-may-straddle-symbol.1-heap
memlabel-mem--arg.1
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
=graph_with_ml_contiguity_info non-vacuous mls
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in foo.A1.B2.C1
=avail_exprs begin
=avail_exprs end
=sprel_map in foo.A1.B2.C1
=sprel_map done
=lr-status-map
=lr-status-map done
=lr-status-for-sprel-locs-map
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=global counterexamples for reason inductive-invariants
=global nodece 0
=global nodece 0 nodece z3.ce3.num_edges_traversed1
=global nodece 0 nodece_path
=global nodece 0 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 0 nodece_cached_counterexample
=counter_example_begin z3.ce3 654e75d248812eeedbbd37d69f2874a
=input.spec-%var-x-1
1 : Lambda46Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda47Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry
1 : Lambda46Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda47Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1422791455 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1422791456; 1422791459 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1422791460; 2261127551 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2261127552; 2261127555 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2261127556; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2261127552 { 0x86c61180 -2033839744 -1.54740905e142 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1422791456 { 0x54ce1320 +1.60995864e42 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 924236686 { 0x3716bb8e +1.17759871e239 } : COUNT
=input.spec-%var-i-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 924236686 { 0x3716bb8e +1.17759871e239 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2261127552 { 0x86c61180 -2033839744 -1.54740905e142 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2261127555 { 0x86c61183 -2033839741 -1.54740941e142 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1422791456 { 0x54ce1320 +1.60995864e42 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1422791459 { 0x54ce1323 +1.60995900e42 } : BV:32
=input.spec-%var-x-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L2%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
2811112354
=counter_example_end
=global nodece 0 num_edges_traversed 1
=global nodece 0 nodece_visted_pcs: 
L0%0%d_L0%0%d -> L2%7%bbentry_Lfor.cond%1%bbentry
=global nodece 1
=global nodece 1 nodece z3v487.ce4.num_edges_traversed0
=global nodece 1 nodece_path
=global nodece 1 nodece_path.graph_edge_composition
(epsilon)
=global nodece 1 nodece_cached_counterexample
=counter_example_begin z3v487.ce4 88653f10e341754ab9244f3ee6eb1c37
=input.spec-%var-x-1
1 : Lambda66Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda67Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry
1 : Lambda72Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda73Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 63 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 64; 67 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 68; 131 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 132; 135 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 136; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 64 { 0x40 +1.762e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 132 { 0x84 +1.1573e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 64 { 0x40 +1.762e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 67 { 0x43 +1.798e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 132 { 0x84 +1.1573e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 135 { 0x87 +1.1609e129 } : BV:32
=input.spec-%var-x-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L2%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
3747455381
=counter_example_end
=global nodece 1 num_edges_traversed 0
=global nodece 1 nodece_visted_pcs: 
L0%0%d_L0%0%d
=global nodece 2
=global nodece 2 nodece z3v487.ce25.num_edges_traversed1
=global nodece 2 nodece_path
=global nodece 2 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 2 nodece_cached_counterexample
=counter_example_begin z3v487.ce25 98c04badf97a30ac9214a676624c1d2
=input.spec-%var-x-1
1 : Lambda141Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda142Var : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(12, 10) : BV:32
14 : 16 { 0x10 +1.190e129 } : BV:32
15 : bvadd(11, 13, 14) : BV:32
16 : 3588 { 0xe04 +1.42772e129 } : BV:32
17 : eq(15, 16) : BOOL
18 : 16 { 0x10 } : BV:8
19 : 0 { 0x0 } : BV:8
20 : ite(17, 18, 19) : BV:8
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : bvadd(21, 13, 14) : BV:32
23 : eq(22, 16) : BOOL
24 : ite(23, 18, 19) : BV:8
25 : 1 { 0x1 +1.11e129 } : BV:32
26 : bvadd(25, 13, 14) : BV:32
27 : eq(26, 16) : BOOL
28 : ite(27, 18, 19) : BV:8
29 : bvadd(13, 14) : BV:32
30 : eq(29, 16) : BOOL
31 : ite(30, 18, 19) : BV:8
32 : bvconcat(20, 24, 28, 31) : BV:32
33 : lambda(10, 32) : FUNCTION[BV:32 -> BV:32]
34 : map(9, 33) : MAP[BV:32 -> BV:32]
35 : sym_const(34) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry
1 : Lambda141Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda142Var : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(12, 10) : BV:32
14 : 16 { 0x10 +1.190e129 } : BV:32
15 : bvadd(11, 13, 14) : BV:32
16 : 3588 { 0xe04 +1.42772e129 } : BV:32
17 : eq(15, 16) : BOOL
18 : 16 { 0x10 } : BV:8
19 : 0 { 0x0 } : BV:8
20 : ite(17, 18, 19) : BV:8
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : bvadd(21, 13, 14) : BV:32
23 : eq(22, 16) : BOOL
24 : ite(23, 18, 19) : BV:8
25 : 1 { 0x1 +1.11e129 } : BV:32
26 : bvadd(25, 13, 14) : BV:32
27 : eq(26, 16) : BOOL
28 : ite(27, 18, 19) : BV:8
29 : bvadd(13, 14) : BV:32
30 : eq(29, 16) : BOOL
31 : ite(30, 18, 19) : BV:8
32 : bvconcat(20, 24, 28, 31) : BV:32
33 : lambda(10, 32) : FUNCTION[BV:32 -> BV:32]
34 : map(9, 33) : MAP[BV:32 -> BV:32]
35 : sym_const(34) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 3587 ] -> 0, [ 3588; 3588 ] -> 16, [ 3589; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3587 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3588; 3591 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3592; 11007 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 11008; 11011 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 11012; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 11008 { 0x2b00 +1.131225e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3588 { 0xe04 +1.42772e129 } : BV:32
=input.dst.llvm-%x
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 357357012 { 0x154cd5d4 +1.60027551e171 } : COUNT
=input.spec-%var-i-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 357357012 { 0x154cd5d4 +1.60027551e171 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 11008 { 0x2b00 +1.131225e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 11011 { 0x2b03 +1.131261e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3588 { 0xe04 +1.42772e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3591 { 0xe07 +1.42808e129 } : BV:32
=input.spec-%var-x-1.1.1
1 : Lambda121Var : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(3, 1) : BV:32
5 : 16 { 0x10 +1.190e129 } : BV:32
6 : bvadd(2, 4, 5) : BV:32
7 : 3588 { 0xe04 +1.42772e129 } : BV:32
8 : eq(6, 7) : BOOL
9 : 16 { 0x10 } : BV:8
10 : 0 { 0x0 } : BV:8
11 : ite(8, 9, 10) : BV:8
12 : 2 { 0x2 +1.23e129 } : BV:32
13 : bvadd(12, 4, 5) : BV:32
14 : eq(13, 7) : BOOL
15 : ite(14, 9, 10) : BV:8
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : bvadd(16, 4, 5) : BV:32
18 : eq(17, 7) : BOOL
19 : ite(18, 9, 10) : BV:8
20 : bvadd(4, 5) : BV:32
21 : eq(20, 7) : BOOL
22 : ite(21, 9, 10) : BV:8
23 : bvconcat(11, 15, 19, 22) : BV:32
24 : lambda(1, 23) : FUNCTION[BV:32 -> BV:32]
25 : sym_const(24) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry.1.1
1 : Lambda122Var : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(3, 1) : BV:32
5 : 16 { 0x10 +1.190e129 } : BV:32
6 : bvadd(2, 4, 5) : BV:32
7 : 3588 { 0xe04 +1.42772e129 } : BV:32
8 : eq(6, 7) : BOOL
9 : 16 { 0x10 } : BV:8
10 : 0 { 0x0 } : BV:8
11 : ite(8, 9, 10) : BV:8
12 : 2 { 0x2 +1.23e129 } : BV:32
13 : bvadd(12, 4, 5) : BV:32
14 : eq(13, 7) : BOOL
15 : ite(14, 9, 10) : BV:8
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : bvadd(16, 4, 5) : BV:32
18 : eq(17, 7) : BOOL
19 : ite(18, 9, 10) : BV:8
20 : bvadd(4, 5) : BV:32
21 : eq(20, 7) : BOOL
22 : ite(21, 9, 10) : BV:8
23 : bvconcat(11, 15, 19, 22) : BV:32
24 : lambda(1, 23) : FUNCTION[BV:32 -> BV:32]
25 : sym_const(24) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L2%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
164936389
=counter_example_end
=global nodece 2 num_edges_traversed 1
=global nodece 2 nodece_visted_pcs: 
L2%7%bbentry_Lfor.cond%1%bbentry
=global nodece 3
=global nodece 3 nodece z3.ce47.num_edges_traversed1
=global nodece 3 nodece_path
=global nodece 3 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 3 nodece_cached_counterexample
=counter_example_begin z3.ce47 8ce53649bbfaebb9e9204e1d35dd7e27
=input.spec-%var-x-1
1 : Lambda210Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda211Var : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(12, 10) : BV:32
14 : 3738566404 { 0xded5ff04 -556400892 -1.67184495e62 } : BV:32
15 : bvadd(11, 13, 14) : BV:32
16 : 104456193 { 0x639e001 +1.45214855e141 } : BV:32
17 : eq(15, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : 104456192 { 0x639e000 +1.45214843e141 } : BV:32
20 : eq(15, 19) : BOOL
21 : 104456195 { 0x639e003 +1.45214879e141 } : BV:32
22 : eq(15, 21) : BOOL
23 : 104456194 { 0x639e002 +1.45214867e141 } : BV:32
24 : eq(15, 23) : BOOL
25 : 3860121093 { 0xe614c605 -434846203 -1.16229307e77 } : BV:32
26 : eq(15, 25) : BOOL
27 : 255 { 0xff -1 } : BV:8
28 : 3860121095 { 0xe614c607 -434846201 -1.16229331e77 } : BV:32
29 : eq(15, 28) : BOOL
30 : 222 { 0xde -34 } : BV:8
31 : 3860121092 { 0xe614c604 -434846204 -1.16229295e77 } : BV:32
32 : eq(15, 31) : BOOL
33 : 4 { 0x4 } : BV:8
34 : 213 { 0xd5 -43 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(29, 30, 35) : BV:8
37 : ite(26, 27, 36) : BV:8
38 : ite(24, 18, 37) : BV:8
39 : ite(22, 18, 38) : BV:8
40 : ite(20, 18, 39) : BV:8
41 : ite(17, 18, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 13, 14) : BV:32
44 : eq(43, 16) : BOOL
45 : eq(43, 19) : BOOL
46 : eq(43, 21) : BOOL
47 : eq(43, 23) : BOOL
48 : eq(43, 25) : BOOL
49 : eq(43, 28) : BOOL
50 : eq(43, 31) : BOOL
51 : ite(50, 33, 34) : BV:8
52 : ite(49, 30, 51) : BV:8
53 : ite(48, 27, 52) : BV:8
54 : ite(47, 18, 53) : BV:8
55 : ite(46, 18, 54) : BV:8
56 : ite(45, 18, 55) : BV:8
57 : ite(44, 18, 56) : BV:8
58 : 1 { 0x1 +1.11e129 } : BV:32
59 : bvadd(58, 13, 14) : BV:32
60 : eq(59, 16) : BOOL
61 : eq(59, 19) : BOOL
62 : eq(59, 21) : BOOL
63 : eq(59, 23) : BOOL
64 : eq(59, 25) : BOOL
65 : eq(59, 28) : BOOL
66 : eq(59, 31) : BOOL
67 : ite(66, 33, 34) : BV:8
68 : ite(65, 30, 67) : BV:8
69 : ite(64, 27, 68) : BV:8
70 : ite(63, 18, 69) : BV:8
71 : ite(62, 18, 70) : BV:8
72 : ite(61, 18, 71) : BV:8
73 : ite(60, 18, 72) : BV:8
74 : bvadd(13, 14) : BV:32
75 : eq(74, 16) : BOOL
76 : eq(74, 19) : BOOL
77 : eq(74, 21) : BOOL
78 : eq(74, 23) : BOOL
79 : eq(74, 25) : BOOL
80 : eq(74, 28) : BOOL
81 : eq(74, 31) : BOOL
82 : ite(81, 33, 34) : BV:8
83 : ite(80, 30, 82) : BV:8
84 : ite(79, 27, 83) : BV:8
85 : ite(78, 18, 84) : BV:8
86 : ite(77, 18, 85) : BV:8
87 : ite(76, 18, 86) : BV:8
88 : ite(75, 18, 87) : BV:8
89 : bvconcat(41, 57, 73, 88) : BV:32
90 : lambda(10, 89) : FUNCTION[BV:32 -> BV:32]
91 : map(9, 90) : MAP[BV:32 -> BV:32]
92 : sym_const(91) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry
1 : Lambda210Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda211Var : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(12, 10) : BV:32
14 : 3738566404 { 0xded5ff04 -556400892 -1.67184495e62 } : BV:32
15 : bvadd(11, 13, 14) : BV:32
16 : 104456193 { 0x639e001 +1.45214855e141 } : BV:32
17 : eq(15, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : 104456192 { 0x639e000 +1.45214843e141 } : BV:32
20 : eq(15, 19) : BOOL
21 : 104456195 { 0x639e003 +1.45214879e141 } : BV:32
22 : eq(15, 21) : BOOL
23 : 104456194 { 0x639e002 +1.45214867e141 } : BV:32
24 : eq(15, 23) : BOOL
25 : 3860121093 { 0xe614c605 -434846203 -1.16229307e77 } : BV:32
26 : eq(15, 25) : BOOL
27 : 255 { 0xff -1 } : BV:8
28 : 3860121095 { 0xe614c607 -434846201 -1.16229331e77 } : BV:32
29 : eq(15, 28) : BOOL
30 : 222 { 0xde -34 } : BV:8
31 : 3860121092 { 0xe614c604 -434846204 -1.16229295e77 } : BV:32
32 : eq(15, 31) : BOOL
33 : 4 { 0x4 } : BV:8
34 : 213 { 0xd5 -43 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(29, 30, 35) : BV:8
37 : ite(26, 27, 36) : BV:8
38 : ite(24, 18, 37) : BV:8
39 : ite(22, 18, 38) : BV:8
40 : ite(20, 18, 39) : BV:8
41 : ite(17, 18, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 13, 14) : BV:32
44 : eq(43, 16) : BOOL
45 : eq(43, 19) : BOOL
46 : eq(43, 21) : BOOL
47 : eq(43, 23) : BOOL
48 : eq(43, 25) : BOOL
49 : eq(43, 28) : BOOL
50 : eq(43, 31) : BOOL
51 : ite(50, 33, 34) : BV:8
52 : ite(49, 30, 51) : BV:8
53 : ite(48, 27, 52) : BV:8
54 : ite(47, 18, 53) : BV:8
55 : ite(46, 18, 54) : BV:8
56 : ite(45, 18, 55) : BV:8
57 : ite(44, 18, 56) : BV:8
58 : 1 { 0x1 +1.11e129 } : BV:32
59 : bvadd(58, 13, 14) : BV:32
60 : eq(59, 16) : BOOL
61 : eq(59, 19) : BOOL
62 : eq(59, 21) : BOOL
63 : eq(59, 23) : BOOL
64 : eq(59, 25) : BOOL
65 : eq(59, 28) : BOOL
66 : eq(59, 31) : BOOL
67 : ite(66, 33, 34) : BV:8
68 : ite(65, 30, 67) : BV:8
69 : ite(64, 27, 68) : BV:8
70 : ite(63, 18, 69) : BV:8
71 : ite(62, 18, 70) : BV:8
72 : ite(61, 18, 71) : BV:8
73 : ite(60, 18, 72) : BV:8
74 : bvadd(13, 14) : BV:32
75 : eq(74, 16) : BOOL
76 : eq(74, 19) : BOOL
77 : eq(74, 21) : BOOL
78 : eq(74, 23) : BOOL
79 : eq(74, 25) : BOOL
80 : eq(74, 28) : BOOL
81 : eq(74, 31) : BOOL
82 : ite(81, 33, 34) : BV:8
83 : ite(80, 30, 82) : BV:8
84 : ite(79, 27, 83) : BV:8
85 : ite(78, 18, 84) : BV:8
86 : ite(77, 18, 85) : BV:8
87 : ite(76, 18, 86) : BV:8
88 : ite(75, 18, 87) : BV:8
89 : bvconcat(41, 57, 73, 88) : BV:32
90 : lambda(10, 89) : FUNCTION[BV:32 -> BV:32]
91 : map(9, 90) : MAP[BV:32 -> BV:32]
92 : sym_const(91) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 104456191 ] -> 213, [ 104456192; 104456195 ] -> 0, [ 104456196; 3860121091 ] -> 213, [ 3860121092; 3860121092 ] -> 4, [ 3860121093; 3860121093 ] -> 255, [ 3860121094; 3860121094 ] -> 213, [ 3860121095; 3860121095 ] -> 222, [ 3860121096; 4294967295 ] -> 213, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 104456191 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 104456192; 104456195 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 104456196; 3860121091 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3860121092; 3860121095 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3860121096; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 104456192 { 0x639e000 +1.45214843e141 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3860121092 { 0xe614c604 -434846204 -1.16229295e77 } : BV:32
=input.dst.llvm-%x
1 : 3738566404 { 0xded5ff04 -556400892 -1.67184495e62 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1228458022 { 0x4938c826 +1.44360804e19 } : COUNT
=input.spec-%var-i-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1228458022 { 0x4938c826 +1.44360804e19 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 104456192 { 0x639e000 +1.45214843e141 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 104456195 { 0x639e003 +1.45214879e141 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3860121092 { 0xe614c604 -434846204 -1.16229295e77 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3860121095 { 0xe614c607 -434846201 -1.16229331e77 } : BV:32
=input.spec-%var-x-1.1.1
1 : Lambda190Var : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(3, 1) : BV:32
5 : 3738566404 { 0xded5ff04 -556400892 -1.67184495e62 } : BV:32
6 : bvadd(2, 4, 5) : BV:32
7 : 104456193 { 0x639e001 +1.45214855e141 } : BV:32
8 : eq(6, 7) : BOOL
9 : 0 { 0x0 } : BV:8
10 : 104456192 { 0x639e000 +1.45214843e141 } : BV:32
11 : eq(6, 10) : BOOL
12 : 104456195 { 0x639e003 +1.45214879e141 } : BV:32
13 : eq(6, 12) : BOOL
14 : 104456194 { 0x639e002 +1.45214867e141 } : BV:32
15 : eq(6, 14) : BOOL
16 : 3860121093 { 0xe614c605 -434846203 -1.16229307e77 } : BV:32
17 : eq(6, 16) : BOOL
18 : 255 { 0xff -1 } : BV:8
19 : 3860121095 { 0xe614c607 -434846201 -1.16229331e77 } : BV:32
20 : eq(6, 19) : BOOL
21 : 222 { 0xde -34 } : BV:8
22 : 3860121092 { 0xe614c604 -434846204 -1.16229295e77 } : BV:32
23 : eq(6, 22) : BOOL
24 : 4 { 0x4 } : BV:8
25 : 213 { 0xd5 -43 } : BV:8
26 : ite(23, 24, 25) : BV:8
27 : ite(20, 21, 26) : BV:8
28 : ite(17, 18, 27) : BV:8
29 : ite(15, 9, 28) : BV:8
30 : ite(13, 9, 29) : BV:8
31 : ite(11, 9, 30) : BV:8
32 : ite(8, 9, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 4, 5) : BV:32
35 : eq(34, 7) : BOOL
36 : eq(34, 10) : BOOL
37 : eq(34, 12) : BOOL
38 : eq(34, 14) : BOOL
39 : eq(34, 16) : BOOL
40 : eq(34, 19) : BOOL
41 : eq(34, 22) : BOOL
42 : ite(41, 24, 25) : BV:8
43 : ite(40, 21, 42) : BV:8
44 : ite(39, 18, 43) : BV:8
45 : ite(38, 9, 44) : BV:8
46 : ite(37, 9, 45) : BV:8
47 : ite(36, 9, 46) : BV:8
48 : ite(35, 9, 47) : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : bvadd(49, 4, 5) : BV:32
51 : eq(50, 7) : BOOL
52 : eq(50, 10) : BOOL
53 : eq(50, 12) : BOOL
54 : eq(50, 14) : BOOL
55 : eq(50, 16) : BOOL
56 : eq(50, 19) : BOOL
57 : eq(50, 22) : BOOL
58 : ite(57, 24, 25) : BV:8
59 : ite(56, 21, 58) : BV:8
60 : ite(55, 18, 59) : BV:8
61 : ite(54, 9, 60) : BV:8
62 : ite(53, 9, 61) : BV:8
63 : ite(52, 9, 62) : BV:8
64 : ite(51, 9, 63) : BV:8
65 : bvadd(4, 5) : BV:32
66 : eq(65, 7) : BOOL
67 : eq(65, 10) : BOOL
68 : eq(65, 12) : BOOL
69 : eq(65, 14) : BOOL
70 : eq(65, 16) : BOOL
71 : eq(65, 19) : BOOL
72 : eq(65, 22) : BOOL
73 : ite(72, 24, 25) : BV:8
74 : ite(71, 21, 73) : BV:8
75 : ite(70, 18, 74) : BV:8
76 : ite(69, 9, 75) : BV:8
77 : ite(68, 9, 76) : BV:8
78 : ite(67, 9, 77) : BV:8
79 : ite(66, 9, 78) : BV:8
80 : bvconcat(32, 48, 64, 79) : BV:32
81 : lambda(1, 80) : FUNCTION[BV:32 -> BV:32]
82 : sym_const(81) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry.1.1
1 : Lambda191Var : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(3, 1) : BV:32
5 : 3738566404 { 0xded5ff04 -556400892 -1.67184495e62 } : BV:32
6 : bvadd(2, 4, 5) : BV:32
7 : 104456193 { 0x639e001 +1.45214855e141 } : BV:32
8 : eq(6, 7) : BOOL
9 : 0 { 0x0 } : BV:8
10 : 104456192 { 0x639e000 +1.45214843e141 } : BV:32
11 : eq(6, 10) : BOOL
12 : 104456195 { 0x639e003 +1.45214879e141 } : BV:32
13 : eq(6, 12) : BOOL
14 : 104456194 { 0x639e002 +1.45214867e141 } : BV:32
15 : eq(6, 14) : BOOL
16 : 3860121093 { 0xe614c605 -434846203 -1.16229307e77 } : BV:32
17 : eq(6, 16) : BOOL
18 : 255 { 0xff -1 } : BV:8
19 : 3860121095 { 0xe614c607 -434846201 -1.16229331e77 } : BV:32
20 : eq(6, 19) : BOOL
21 : 222 { 0xde -34 } : BV:8
22 : 3860121092 { 0xe614c604 -434846204 -1.16229295e77 } : BV:32
23 : eq(6, 22) : BOOL
24 : 4 { 0x4 } : BV:8
25 : 213 { 0xd5 -43 } : BV:8
26 : ite(23, 24, 25) : BV:8
27 : ite(20, 21, 26) : BV:8
28 : ite(17, 18, 27) : BV:8
29 : ite(15, 9, 28) : BV:8
30 : ite(13, 9, 29) : BV:8
31 : ite(11, 9, 30) : BV:8
32 : ite(8, 9, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 4, 5) : BV:32
35 : eq(34, 7) : BOOL
36 : eq(34, 10) : BOOL
37 : eq(34, 12) : BOOL
38 : eq(34, 14) : BOOL
39 : eq(34, 16) : BOOL
40 : eq(34, 19) : BOOL
41 : eq(34, 22) : BOOL
42 : ite(41, 24, 25) : BV:8
43 : ite(40, 21, 42) : BV:8
44 : ite(39, 18, 43) : BV:8
45 : ite(38, 9, 44) : BV:8
46 : ite(37, 9, 45) : BV:8
47 : ite(36, 9, 46) : BV:8
48 : ite(35, 9, 47) : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : bvadd(49, 4, 5) : BV:32
51 : eq(50, 7) : BOOL
52 : eq(50, 10) : BOOL
53 : eq(50, 12) : BOOL
54 : eq(50, 14) : BOOL
55 : eq(50, 16) : BOOL
56 : eq(50, 19) : BOOL
57 : eq(50, 22) : BOOL
58 : ite(57, 24, 25) : BV:8
59 : ite(56, 21, 58) : BV:8
60 : ite(55, 18, 59) : BV:8
61 : ite(54, 9, 60) : BV:8
62 : ite(53, 9, 61) : BV:8
63 : ite(52, 9, 62) : BV:8
64 : ite(51, 9, 63) : BV:8
65 : bvadd(4, 5) : BV:32
66 : eq(65, 7) : BOOL
67 : eq(65, 10) : BOOL
68 : eq(65, 12) : BOOL
69 : eq(65, 14) : BOOL
70 : eq(65, 16) : BOOL
71 : eq(65, 19) : BOOL
72 : eq(65, 22) : BOOL
73 : ite(72, 24, 25) : BV:8
74 : ite(71, 21, 73) : BV:8
75 : ite(70, 18, 74) : BV:8
76 : ite(69, 9, 75) : BV:8
77 : ite(68, 9, 76) : BV:8
78 : ite(67, 9, 77) : BV:8
79 : ite(66, 9, 78) : BV:8
80 : bvconcat(32, 48, 64, 79) : BV:32
81 : lambda(1, 80) : FUNCTION[BV:32 -> BV:32]
82 : sym_const(81) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L2%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
1613138407
=counter_example_end
=global nodece 3 num_edges_traversed 1
=global nodece 3 nodece_visted_pcs: 
L2%7%bbentry_Lfor.cond%1%bbentry
=global nodece 4
=global nodece 4 nodece z3.ce69.num_edges_traversed1
=global nodece 4 nodece_path
=global nodece 4 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 4 nodece_cached_counterexample
=counter_example_begin z3.ce69 f3baa3b364847a4afab224b7dbd3d323
=input.spec-%var-x-1
1 : Lambda306Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 65535 { 0xffff +1.781238e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 65536 { 0x10000 +1.781250e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda307Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 2144336128 { 0x7fcff900 +1.62478637e128 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 3743546246 { 0xdf21fb86 -551421050 -1.26548838e63 } : BV:32
25 : eq(23, 24) : BOOL
26 : 207 { 0xcf -49 } : BV:8
27 : 1602813322 { 0x5f88fd8a +1.7023739e64 } : BV:32
28 : eq(23, 27) : BOOL
29 : 1 { 0x1 } : BV:8
30 : 3743546245 { 0xdf21fb85 -551421051 -1.26548826e63 } : BV:32
31 : eq(23, 30) : BOOL
32 : 249 { 0xf9 -7 } : BV:8
33 : 3743546247 { 0xdf21fb87 -551421049 -1.26548850e63 } : BV:32
34 : eq(23, 33) : BOOL
35 : 127 { 0x7f } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvadd(41, 21, 22) : BV:32
43 : eq(42, 24) : BOOL
44 : eq(42, 27) : BOOL
45 : eq(42, 30) : BOOL
46 : eq(42, 33) : BOOL
47 : ite(46, 35, 36) : BV:8
48 : ite(45, 32, 47) : BV:8
49 : ite(44, 29, 48) : BV:8
50 : ite(43, 26, 49) : BV:8
51 : 1 { 0x1 +1.11e129 } : BV:32
52 : bvadd(51, 21, 22) : BV:32
53 : eq(52, 24) : BOOL
54 : eq(52, 27) : BOOL
55 : eq(52, 30) : BOOL
56 : eq(52, 33) : BOOL
57 : ite(56, 35, 36) : BV:8
58 : ite(55, 32, 57) : BV:8
59 : ite(54, 29, 58) : BV:8
60 : ite(53, 26, 59) : BV:8
61 : bvadd(21, 22) : BV:32
62 : eq(61, 24) : BOOL
63 : eq(61, 27) : BOOL
64 : eq(61, 30) : BOOL
65 : eq(61, 33) : BOOL
66 : ite(65, 35, 36) : BV:8
67 : ite(64, 32, 66) : BV:8
68 : ite(63, 29, 67) : BV:8
69 : ite(62, 26, 68) : BV:8
70 : bvconcat(40, 50, 60, 69) : BV:32
71 : ite(18, 2, 70) : BV:32
72 : lambda(17, 71) : FUNCTION[BV:32 -> BV:32]
73 : map(16, 72) : MAP[BV:32 -> BV:32]
74 : sym_const(73) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry
1 : Lambda306Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 65535 { 0xffff +1.781238e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 65536 { 0x10000 +1.781250e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda307Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 2144336128 { 0x7fcff900 +1.62478637e128 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 3743546246 { 0xdf21fb86 -551421050 -1.26548838e63 } : BV:32
25 : eq(23, 24) : BOOL
26 : 207 { 0xcf -49 } : BV:8
27 : 1602813322 { 0x5f88fd8a +1.7023739e64 } : BV:32
28 : eq(23, 27) : BOOL
29 : 1 { 0x1 } : BV:8
30 : 3743546245 { 0xdf21fb85 -551421051 -1.26548826e63 } : BV:32
31 : eq(23, 30) : BOOL
32 : 249 { 0xf9 -7 } : BV:8
33 : 3743546247 { 0xdf21fb87 -551421049 -1.26548850e63 } : BV:32
34 : eq(23, 33) : BOOL
35 : 127 { 0x7f } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvadd(41, 21, 22) : BV:32
43 : eq(42, 24) : BOOL
44 : eq(42, 27) : BOOL
45 : eq(42, 30) : BOOL
46 : eq(42, 33) : BOOL
47 : ite(46, 35, 36) : BV:8
48 : ite(45, 32, 47) : BV:8
49 : ite(44, 29, 48) : BV:8
50 : ite(43, 26, 49) : BV:8
51 : 1 { 0x1 +1.11e129 } : BV:32
52 : bvadd(51, 21, 22) : BV:32
53 : eq(52, 24) : BOOL
54 : eq(52, 27) : BOOL
55 : eq(52, 30) : BOOL
56 : eq(52, 33) : BOOL
57 : ite(56, 35, 36) : BV:8
58 : ite(55, 32, 57) : BV:8
59 : ite(54, 29, 58) : BV:8
60 : ite(53, 26, 59) : BV:8
61 : bvadd(21, 22) : BV:32
62 : eq(61, 24) : BOOL
63 : eq(61, 27) : BOOL
64 : eq(61, 30) : BOOL
65 : eq(61, 33) : BOOL
66 : ite(65, 35, 36) : BV:8
67 : ite(64, 32, 66) : BV:8
68 : ite(63, 29, 67) : BV:8
69 : ite(62, 26, 68) : BV:8
70 : bvconcat(40, 50, 60, 69) : BV:32
71 : ite(18, 2, 70) : BV:32
72 : lambda(17, 71) : FUNCTION[BV:32 -> BV:32]
73 : map(16, 72) : MAP[BV:32 -> BV:32]
74 : sym_const(73) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 1602813321 ] -> 0, [ 1602813322; 1602813322 ] -> 1, [ 1602813323; 3743546244 ] -> 0, [ 3743546245; 3743546245 ] -> 249, [ 3743546246; 3743546246 ] -> 207, [ 3743546247; 3743546247 ] -> 127, [ 3743546248; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1602813319 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1602813320; 1602813323 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1602813324; 3743546243 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3743546244; 3743546247 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3743546248; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1602813320 { 0x5f88fd88 +1.7023715e64 } : BV:32
=input.dst.llvm-%n
1 : 65536 { 0x10000 +1.781250e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3743546244 { 0xdf21fb84 -551421052 -1.26548814e63 } : BV:32
=input.dst.llvm-%x
1 : 2144336128 { 0x7fcff900 +1.62478637e128 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1931841633 { 0x73259061 +1.29346859e103 } : COUNT
=input.spec-%var-i-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1931841633 { 0x73259061 +1.29346859e103 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1602813320 { 0x5f88fd88 +1.7023715e64 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1602813323 { 0x5f88fd8b +1.7023751e64 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3743546244 { 0xdf21fb84 -551421052 -1.26548814e63 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3743546247 { 0xdf21fb87 -551421049 -1.26548850e63 } : BV:32
=input.spec-%var-x-1.1.1
1 : Lambda282Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 2144336128 { 0x7fcff900 +1.62478637e128 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 3743546246 { 0xdf21fb86 -551421050 -1.26548838e63 } : BV:32
10 : eq(8, 9) : BOOL
11 : 207 { 0xcf -49 } : BV:8
12 : 1602813322 { 0x5f88fd8a +1.7023739e64 } : BV:32
13 : eq(8, 12) : BOOL
14 : 1 { 0x1 } : BV:8
15 : 3743546245 { 0xdf21fb85 -551421051 -1.26548826e63 } : BV:32
16 : eq(8, 15) : BOOL
17 : 249 { 0xf9 -7 } : BV:8
18 : 3743546247 { 0xdf21fb87 -551421049 -1.26548850e63 } : BV:32
19 : eq(8, 18) : BOOL
20 : 127 { 0x7f } : BV:8
21 : 0 { 0x0 } : BV:8
22 : ite(19, 20, 21) : BV:8
23 : ite(16, 17, 22) : BV:8
24 : ite(13, 14, 23) : BV:8
25 : ite(10, 11, 24) : BV:8
26 : 2 { 0x2 +1.23e129 } : BV:32
27 : bvadd(26, 6, 7) : BV:32
28 : eq(27, 9) : BOOL
29 : eq(27, 12) : BOOL
30 : eq(27, 15) : BOOL
31 : eq(27, 18) : BOOL
32 : ite(31, 20, 21) : BV:8
33 : ite(30, 17, 32) : BV:8
34 : ite(29, 14, 33) : BV:8
35 : ite(28, 11, 34) : BV:8
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvadd(36, 6, 7) : BV:32
38 : eq(37, 9) : BOOL
39 : eq(37, 12) : BOOL
40 : eq(37, 15) : BOOL
41 : eq(37, 18) : BOOL
42 : ite(41, 20, 21) : BV:8
43 : ite(40, 17, 42) : BV:8
44 : ite(39, 14, 43) : BV:8
45 : ite(38, 11, 44) : BV:8
46 : bvadd(6, 7) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : eq(46, 15) : BOOL
50 : eq(46, 18) : BOOL
51 : ite(50, 20, 21) : BV:8
52 : ite(49, 17, 51) : BV:8
53 : ite(48, 14, 52) : BV:8
54 : ite(47, 11, 53) : BV:8
55 : bvconcat(25, 35, 45, 54) : BV:32
56 : ite(3, 2, 55) : BV:32
57 : lambda(1, 56) : FUNCTION[BV:32 -> BV:32]
58 : sym_const(57) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry.1.1
1 : Lambda283Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 2144336128 { 0x7fcff900 +1.62478637e128 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 3743546246 { 0xdf21fb86 -551421050 -1.26548838e63 } : BV:32
10 : eq(8, 9) : BOOL
11 : 207 { 0xcf -49 } : BV:8
12 : 1602813322 { 0x5f88fd8a +1.7023739e64 } : BV:32
13 : eq(8, 12) : BOOL
14 : 1 { 0x1 } : BV:8
15 : 3743546245 { 0xdf21fb85 -551421051 -1.26548826e63 } : BV:32
16 : eq(8, 15) : BOOL
17 : 249 { 0xf9 -7 } : BV:8
18 : 3743546247 { 0xdf21fb87 -551421049 -1.26548850e63 } : BV:32
19 : eq(8, 18) : BOOL
20 : 127 { 0x7f } : BV:8
21 : 0 { 0x0 } : BV:8
22 : ite(19, 20, 21) : BV:8
23 : ite(16, 17, 22) : BV:8
24 : ite(13, 14, 23) : BV:8
25 : ite(10, 11, 24) : BV:8
26 : 2 { 0x2 +1.23e129 } : BV:32
27 : bvadd(26, 6, 7) : BV:32
28 : eq(27, 9) : BOOL
29 : eq(27, 12) : BOOL
30 : eq(27, 15) : BOOL
31 : eq(27, 18) : BOOL
32 : ite(31, 20, 21) : BV:8
33 : ite(30, 17, 32) : BV:8
34 : ite(29, 14, 33) : BV:8
35 : ite(28, 11, 34) : BV:8
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvadd(36, 6, 7) : BV:32
38 : eq(37, 9) : BOOL
39 : eq(37, 12) : BOOL
40 : eq(37, 15) : BOOL
41 : eq(37, 18) : BOOL
42 : ite(41, 20, 21) : BV:8
43 : ite(40, 17, 42) : BV:8
44 : ite(39, 14, 43) : BV:8
45 : ite(38, 11, 44) : BV:8
46 : bvadd(6, 7) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : eq(46, 15) : BOOL
50 : eq(46, 18) : BOOL
51 : ite(50, 20, 21) : BV:8
52 : ite(49, 17, 51) : BV:8
53 : ite(48, 14, 52) : BV:8
54 : ite(47, 11, 53) : BV:8
55 : bvconcat(25, 35, 45, 54) : BV:32
56 : ite(3, 2, 55) : BV:32
57 : ite(3, 2, 56) : BV:32
58 : lambda(1, 57) : FUNCTION[BV:32 -> BV:32]
59 : sym_const(58) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 65535 ] -> true, [ 65536; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L2%7%bbentry.0.1
1 : ([ 0; 65535 ] -> true, [ 65536; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
2355205896
=counter_example_end
=global nodece 4 num_edges_traversed 1
=global nodece 4 nodece_visted_pcs: 
L2%7%bbentry_Lfor.cond%1%bbentry
=global nodece 5
=global nodece 5 nodece z3v487.ce70.num_edges_traversed1
=global nodece 5 nodece_path
=global nodece 5 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 5 nodece_cached_counterexample
=counter_example_begin z3v487.ce70 5513d0b7628a4b04ef01799eee3be8
=input.spec-%var-x-1
1 : Lambda324Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda325Var : BV:32
17 : eq(16, 2) : BOOL
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 16) : BV:32
21 : bvadd(18, 20, 2) : BV:32
22 : 2052 { 0x804 +1.24461e129 } : BV:32
23 : eq(21, 22) : BOOL
24 : 1 { 0x1 } : BV:8
25 : 0 { 0x0 } : BV:8
26 : ite(23, 24, 25) : BV:8
27 : 2 { 0x2 +1.23e129 } : BV:32
28 : bvadd(27, 20, 2) : BV:32
29 : eq(28, 22) : BOOL
30 : ite(29, 24, 25) : BV:8
31 : bvadd(7, 20, 2) : BV:32
32 : eq(31, 22) : BOOL
33 : ite(32, 24, 25) : BV:8
34 : bvadd(20, 2) : BV:32
35 : eq(34, 22) : BOOL
36 : ite(35, 24, 25) : BV:8
37 : bvconcat(26, 30, 33, 36) : BV:32
38 : ite(17, 2, 37) : BV:32
39 : lambda(16, 38) : FUNCTION[BV:32 -> BV:32]
40 : map(15, 39) : MAP[BV:32 -> BV:32]
41 : sym_const(40) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry
1 : Lambda324Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda325Var : BV:32
17 : eq(16, 2) : BOOL
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 16) : BV:32
21 : bvadd(18, 20, 2) : BV:32
22 : 2052 { 0x804 +1.24461e129 } : BV:32
23 : eq(21, 22) : BOOL
24 : 1 { 0x1 } : BV:8
25 : 0 { 0x0 } : BV:8
26 : ite(23, 24, 25) : BV:8
27 : 2 { 0x2 +1.23e129 } : BV:32
28 : bvadd(27, 20, 2) : BV:32
29 : eq(28, 22) : BOOL
30 : ite(29, 24, 25) : BV:8
31 : bvadd(7, 20, 2) : BV:32
32 : eq(31, 22) : BOOL
33 : ite(32, 24, 25) : BV:8
34 : bvadd(20, 2) : BV:32
35 : eq(34, 22) : BOOL
36 : ite(35, 24, 25) : BV:8
37 : bvconcat(26, 30, 33, 36) : BV:32
38 : ite(17, 2, 37) : BV:32
39 : lambda(16, 38) : FUNCTION[BV:32 -> BV:32]
40 : map(15, 39) : MAP[BV:32 -> BV:32]
41 : sym_const(40) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 2051 ] -> 0, [ 2052; 2052 ] -> 1, [ 2053; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2051 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2052; 2055 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2056; 8255 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 8256; 8259 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 8260; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2052 { 0x804 +1.24461e129 } : BV:32
=input.dst.llvm-%n
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 8256 { 0x2040 +1.98419e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 804139595 { 0x2fee324b +1.86090981e224 } : COUNT
=input.spec-%var-i-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 804139595 { 0x2fee324b +1.86090981e224 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2052 { 0x804 +1.24461e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2055 { 0x807 +1.24497e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 8256 { 0x2040 +1.98419e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 8259 { 0x2043 +1.98454e129 } : BV:32
=input.spec-%var-x-1.1.1
1 : Lambda289Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : bvadd(4, 6, 2) : BV:32
8 : 2052 { 0x804 +1.24461e129 } : BV:32
9 : eq(7, 8) : BOOL
10 : 1 { 0x1 } : BV:8
11 : 0 { 0x0 } : BV:8
12 : ite(9, 10, 11) : BV:8
13 : 2 { 0x2 +1.23e129 } : BV:32
14 : bvadd(13, 6, 2) : BV:32
15 : eq(14, 8) : BOOL
16 : ite(15, 10, 11) : BV:8
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : bvadd(17, 6, 2) : BV:32
19 : eq(18, 8) : BOOL
20 : ite(19, 10, 11) : BV:8
21 : bvadd(6, 2) : BV:32
22 : eq(21, 8) : BOOL
23 : ite(22, 10, 11) : BV:8
24 : bvconcat(12, 16, 20, 23) : BV:32
25 : ite(3, 2, 24) : BV:32
26 : lambda(1, 25) : FUNCTION[BV:32 -> BV:32]
27 : sym_const(26) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry.1.1
1 : Lambda290Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : bvadd(4, 6, 2) : BV:32
8 : 2052 { 0x804 +1.24461e129 } : BV:32
9 : eq(7, 8) : BOOL
10 : 1 { 0x1 } : BV:8
11 : 0 { 0x0 } : BV:8
12 : ite(9, 10, 11) : BV:8
13 : 2 { 0x2 +1.23e129 } : BV:32
14 : bvadd(13, 6, 2) : BV:32
15 : eq(14, 8) : BOOL
16 : ite(15, 10, 11) : BV:8
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : bvadd(17, 6, 2) : BV:32
19 : eq(18, 8) : BOOL
20 : ite(19, 10, 11) : BV:8
21 : bvadd(6, 2) : BV:32
22 : eq(21, 8) : BOOL
23 : ite(22, 10, 11) : BV:8
24 : bvconcat(12, 16, 20, 23) : BV:32
25 : ite(3, 2, 24) : BV:32
26 : ite(3, 2, 25) : BV:32
27 : lambda(1, 26) : FUNCTION[BV:32 -> BV:32]
28 : sym_const(27) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L2%7%bbentry.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
38490799
=counter_example_end
=global nodece 5 num_edges_traversed 1
=global nodece 5 nodece_visted_pcs: 
L2%7%bbentry_Lfor.cond%1%bbentry
=global nodece 6
=global nodece 6 nodece z3.ce91.num_edges_traversed1
=global nodece 6 nodece_path
=global nodece 6 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 6 nodece_cached_counterexample
=counter_example_begin z3.ce91 61f4ccaba7125119ac5bbd610d3d8f
=input.spec-%var-x-1
1 : Lambda379Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda380Var : BV:32
17 : eq(16, 2) : BOOL
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 16) : BV:32
21 : 2815561984 { 0xa7d21100 -1479405312 -1.64114379e208 } : BV:32
22 : bvadd(18, 20, 21) : BV:32
23 : 1386226077 { 0x52a0219d +1.25102579e38 } : BV:32
24 : eq(22, 23) : BOOL
25 : 255 { 0xff -1 } : BV:8
26 : 1243678938 { 0x4a2108da +1.25808262e21 } : BV:32
27 : eq(22, 26) : BOOL
28 : 210 { 0xd2 -46 } : BV:8
29 : 1386226076 { 0x52a0219c +1.25102567e38 } : BV:32
30 : eq(22, 29) : BOOL
31 : 1386226079 { 0x52a0219f +1.25102603e38 } : BV:32
32 : eq(22, 31) : BOOL
33 : 1386226078 { 0x52a0219e +1.25102591e38 } : BV:32
34 : eq(22, 33) : BOOL
35 : 1243678937 { 0x4a2108d9 +1.25808250e21 } : BV:32
36 : eq(22, 35) : BOOL
37 : 17 { 0x11 } : BV:8
38 : 1243678939 { 0x4a2108db +1.25808274e21 } : BV:32
39 : eq(22, 38) : BOOL
40 : 167 { 0xa7 -89 } : BV:8
41 : 0 { 0x0 } : BV:8
42 : ite(39, 40, 41) : BV:8
43 : ite(36, 37, 42) : BV:8
44 : ite(34, 25, 43) : BV:8
45 : ite(32, 25, 44) : BV:8
46 : ite(30, 25, 45) : BV:8
47 : ite(27, 28, 46) : BV:8
48 : ite(24, 25, 47) : BV:8
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : bvadd(49, 20, 21) : BV:32
51 : eq(50, 23) : BOOL
52 : eq(50, 26) : BOOL
53 : eq(50, 29) : BOOL
54 : eq(50, 31) : BOOL
55 : eq(50, 33) : BOOL
56 : eq(50, 35) : BOOL
57 : eq(50, 38) : BOOL
58 : ite(57, 40, 41) : BV:8
59 : ite(56, 37, 58) : BV:8
60 : ite(55, 25, 59) : BV:8
61 : ite(54, 25, 60) : BV:8
62 : ite(53, 25, 61) : BV:8
63 : ite(52, 28, 62) : BV:8
64 : ite(51, 25, 63) : BV:8
65 : 1 { 0x1 +1.11e129 } : BV:32
66 : bvadd(65, 20, 21) : BV:32
67 : eq(66, 23) : BOOL
68 : eq(66, 26) : BOOL
69 : eq(66, 29) : BOOL
70 : eq(66, 31) : BOOL
71 : eq(66, 33) : BOOL
72 : eq(66, 35) : BOOL
73 : eq(66, 38) : BOOL
74 : ite(73, 40, 41) : BV:8
75 : ite(72, 37, 74) : BV:8
76 : ite(71, 25, 75) : BV:8
77 : ite(70, 25, 76) : BV:8
78 : ite(69, 25, 77) : BV:8
79 : ite(68, 28, 78) : BV:8
80 : ite(67, 25, 79) : BV:8
81 : bvadd(20, 21) : BV:32
82 : eq(81, 23) : BOOL
83 : eq(81, 26) : BOOL
84 : eq(81, 29) : BOOL
85 : eq(81, 31) : BOOL
86 : eq(81, 33) : BOOL
87 : eq(81, 35) : BOOL
88 : eq(81, 38) : BOOL
89 : ite(88, 40, 41) : BV:8
90 : ite(87, 37, 89) : BV:8
91 : ite(86, 25, 90) : BV:8
92 : ite(85, 25, 91) : BV:8
93 : ite(84, 25, 92) : BV:8
94 : ite(83, 28, 93) : BV:8
95 : ite(82, 25, 94) : BV:8
96 : bvconcat(48, 64, 80, 95) : BV:32
97 : ite(17, 2, 96) : BV:32
98 : lambda(16, 97) : FUNCTION[BV:32 -> BV:32]
99 : map(15, 98) : MAP[BV:32 -> BV:32]
100 : sym_const(99) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry
1 : Lambda379Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda380Var : BV:32
17 : eq(16, 2) : BOOL
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 16) : BV:32
21 : 2815561984 { 0xa7d21100 -1479405312 -1.64114379e208 } : BV:32
22 : bvadd(18, 20, 21) : BV:32
23 : 1386226077 { 0x52a0219d +1.25102579e38 } : BV:32
24 : eq(22, 23) : BOOL
25 : 255 { 0xff -1 } : BV:8
26 : 1243678938 { 0x4a2108da +1.25808262e21 } : BV:32
27 : eq(22, 26) : BOOL
28 : 210 { 0xd2 -46 } : BV:8
29 : 1386226076 { 0x52a0219c +1.25102567e38 } : BV:32
30 : eq(22, 29) : BOOL
31 : 1386226079 { 0x52a0219f +1.25102603e38 } : BV:32
32 : eq(22, 31) : BOOL
33 : 1386226078 { 0x52a0219e +1.25102591e38 } : BV:32
34 : eq(22, 33) : BOOL
35 : 1243678937 { 0x4a2108d9 +1.25808250e21 } : BV:32
36 : eq(22, 35) : BOOL
37 : 17 { 0x11 } : BV:8
38 : 1243678939 { 0x4a2108db +1.25808274e21 } : BV:32
39 : eq(22, 38) : BOOL
40 : 167 { 0xa7 -89 } : BV:8
41 : 0 { 0x0 } : BV:8
42 : ite(39, 40, 41) : BV:8
43 : ite(36, 37, 42) : BV:8
44 : ite(34, 25, 43) : BV:8
45 : ite(32, 25, 44) : BV:8
46 : ite(30, 25, 45) : BV:8
47 : ite(27, 28, 46) : BV:8
48 : ite(24, 25, 47) : BV:8
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : bvadd(49, 20, 21) : BV:32
51 : eq(50, 23) : BOOL
52 : eq(50, 26) : BOOL
53 : eq(50, 29) : BOOL
54 : eq(50, 31) : BOOL
55 : eq(50, 33) : BOOL
56 : eq(50, 35) : BOOL
57 : eq(50, 38) : BOOL
58 : ite(57, 40, 41) : BV:8
59 : ite(56, 37, 58) : BV:8
60 : ite(55, 25, 59) : BV:8
61 : ite(54, 25, 60) : BV:8
62 : ite(53, 25, 61) : BV:8
63 : ite(52, 28, 62) : BV:8
64 : ite(51, 25, 63) : BV:8
65 : 1 { 0x1 +1.11e129 } : BV:32
66 : bvadd(65, 20, 21) : BV:32
67 : eq(66, 23) : BOOL
68 : eq(66, 26) : BOOL
69 : eq(66, 29) : BOOL
70 : eq(66, 31) : BOOL
71 : eq(66, 33) : BOOL
72 : eq(66, 35) : BOOL
73 : eq(66, 38) : BOOL
74 : ite(73, 40, 41) : BV:8
75 : ite(72, 37, 74) : BV:8
76 : ite(71, 25, 75) : BV:8
77 : ite(70, 25, 76) : BV:8
78 : ite(69, 25, 77) : BV:8
79 : ite(68, 28, 78) : BV:8
80 : ite(67, 25, 79) : BV:8
81 : bvadd(20, 21) : BV:32
82 : eq(81, 23) : BOOL
83 : eq(81, 26) : BOOL
84 : eq(81, 29) : BOOL
85 : eq(81, 31) : BOOL
86 : eq(81, 33) : BOOL
87 : eq(81, 35) : BOOL
88 : eq(81, 38) : BOOL
89 : ite(88, 40, 41) : BV:8
90 : ite(87, 37, 89) : BV:8
91 : ite(86, 25, 90) : BV:8
92 : ite(85, 25, 91) : BV:8
93 : ite(84, 25, 92) : BV:8
94 : ite(83, 28, 93) : BV:8
95 : ite(82, 25, 94) : BV:8
96 : bvconcat(48, 64, 80, 95) : BV:32
97 : ite(17, 2, 96) : BV:32
98 : lambda(16, 97) : FUNCTION[BV:32 -> BV:32]
99 : map(15, 98) : MAP[BV:32 -> BV:32]
100 : sym_const(99) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 1243678936 ] -> 0, [ 1243678937; 1243678937 ] -> 17, [ 1243678938; 1243678938 ] -> 210, [ 1243678939; 1243678939 ] -> 167, [ 1243678940; 1386226075 ] -> 0, [ 1386226076; 1386226079 ] -> 255, [ 1386226080; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1243678935 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1243678936; 1243678939 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1243678940; 1386226075 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1386226076; 1386226079 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1386226080; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1386226076 { 0x52a0219c +1.25102567e38 } : BV:32
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1243678936 { 0x4a2108d8 +1.25808238e21 } : BV:32
=input.dst.llvm-%x
1 : 2815561984 { 0xa7d21100 -1479405312 -1.64114379e208 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 136169254 { 0x81dc726 +1.23264002e145 } : COUNT
=input.spec-%var-i-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 136169254 { 0x81dc726 +1.23264002e145 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1386226076 { 0x52a0219c +1.25102567e38 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1386226079 { 0x52a0219f +1.25102603e38 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1243678936 { 0x4a2108d8 +1.25808238e21 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1243678939 { 0x4a2108db +1.25808274e21 } : BV:32
=input.spec-%var-x-1.1.1
1 : Lambda355Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 2815561984 { 0xa7d21100 -1479405312 -1.64114379e208 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 1386226077 { 0x52a0219d +1.25102579e38 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 1243678938 { 0x4a2108da +1.25808262e21 } : BV:32
13 : eq(8, 12) : BOOL
14 : 210 { 0xd2 -46 } : BV:8
15 : 1386226076 { 0x52a0219c +1.25102567e38 } : BV:32
16 : eq(8, 15) : BOOL
17 : 1386226079 { 0x52a0219f +1.25102603e38 } : BV:32
18 : eq(8, 17) : BOOL
19 : 1386226078 { 0x52a0219e +1.25102591e38 } : BV:32
20 : eq(8, 19) : BOOL
21 : 1243678937 { 0x4a2108d9 +1.25808250e21 } : BV:32
22 : eq(8, 21) : BOOL
23 : 17 { 0x11 } : BV:8
24 : 1243678939 { 0x4a2108db +1.25808274e21 } : BV:32
25 : eq(8, 24) : BOOL
26 : 167 { 0xa7 -89 } : BV:8
27 : 0 { 0x0 } : BV:8
28 : ite(25, 26, 27) : BV:8
29 : ite(22, 23, 28) : BV:8
30 : ite(20, 11, 29) : BV:8
31 : ite(18, 11, 30) : BV:8
32 : ite(16, 11, 31) : BV:8
33 : ite(13, 14, 32) : BV:8
34 : ite(10, 11, 33) : BV:8
35 : 2 { 0x2 +1.23e129 } : BV:32
36 : bvadd(35, 6, 7) : BV:32
37 : eq(36, 9) : BOOL
38 : eq(36, 12) : BOOL
39 : eq(36, 15) : BOOL
40 : eq(36, 17) : BOOL
41 : eq(36, 19) : BOOL
42 : eq(36, 21) : BOOL
43 : eq(36, 24) : BOOL
44 : ite(43, 26, 27) : BV:8
45 : ite(42, 23, 44) : BV:8
46 : ite(41, 11, 45) : BV:8
47 : ite(40, 11, 46) : BV:8
48 : ite(39, 11, 47) : BV:8
49 : ite(38, 14, 48) : BV:8
50 : ite(37, 11, 49) : BV:8
51 : 1 { 0x1 +1.11e129 } : BV:32
52 : bvadd(51, 6, 7) : BV:32
53 : eq(52, 9) : BOOL
54 : eq(52, 12) : BOOL
55 : eq(52, 15) : BOOL
56 : eq(52, 17) : BOOL
57 : eq(52, 19) : BOOL
58 : eq(52, 21) : BOOL
59 : eq(52, 24) : BOOL
60 : ite(59, 26, 27) : BV:8
61 : ite(58, 23, 60) : BV:8
62 : ite(57, 11, 61) : BV:8
63 : ite(56, 11, 62) : BV:8
64 : ite(55, 11, 63) : BV:8
65 : ite(54, 14, 64) : BV:8
66 : ite(53, 11, 65) : BV:8
67 : bvadd(6, 7) : BV:32
68 : eq(67, 9) : BOOL
69 : eq(67, 12) : BOOL
70 : eq(67, 15) : BOOL
71 : eq(67, 17) : BOOL
72 : eq(67, 19) : BOOL
73 : eq(67, 21) : BOOL
74 : eq(67, 24) : BOOL
75 : ite(74, 26, 27) : BV:8
76 : ite(73, 23, 75) : BV:8
77 : ite(72, 11, 76) : BV:8
78 : ite(71, 11, 77) : BV:8
79 : ite(70, 11, 78) : BV:8
80 : ite(69, 14, 79) : BV:8
81 : ite(68, 11, 80) : BV:8
82 : bvconcat(34, 50, 66, 81) : BV:32
83 : ite(3, 2, 82) : BV:32
84 : lambda(1, 83) : FUNCTION[BV:32 -> BV:32]
85 : sym_const(84) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry.1.1
1 : Lambda356Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 2815561984 { 0xa7d21100 -1479405312 -1.64114379e208 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 1386226077 { 0x52a0219d +1.25102579e38 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 1243678938 { 0x4a2108da +1.25808262e21 } : BV:32
13 : eq(8, 12) : BOOL
14 : 210 { 0xd2 -46 } : BV:8
15 : 1386226076 { 0x52a0219c +1.25102567e38 } : BV:32
16 : eq(8, 15) : BOOL
17 : 1386226079 { 0x52a0219f +1.25102603e38 } : BV:32
18 : eq(8, 17) : BOOL
19 : 1386226078 { 0x52a0219e +1.25102591e38 } : BV:32
20 : eq(8, 19) : BOOL
21 : 1243678937 { 0x4a2108d9 +1.25808250e21 } : BV:32
22 : eq(8, 21) : BOOL
23 : 17 { 0x11 } : BV:8
24 : 1243678939 { 0x4a2108db +1.25808274e21 } : BV:32
25 : eq(8, 24) : BOOL
26 : 167 { 0xa7 -89 } : BV:8
27 : 0 { 0x0 } : BV:8
28 : ite(25, 26, 27) : BV:8
29 : ite(22, 23, 28) : BV:8
30 : ite(20, 11, 29) : BV:8
31 : ite(18, 11, 30) : BV:8
32 : ite(16, 11, 31) : BV:8
33 : ite(13, 14, 32) : BV:8
34 : ite(10, 11, 33) : BV:8
35 : 2 { 0x2 +1.23e129 } : BV:32
36 : bvadd(35, 6, 7) : BV:32
37 : eq(36, 9) : BOOL
38 : eq(36, 12) : BOOL
39 : eq(36, 15) : BOOL
40 : eq(36, 17) : BOOL
41 : eq(36, 19) : BOOL
42 : eq(36, 21) : BOOL
43 : eq(36, 24) : BOOL
44 : ite(43, 26, 27) : BV:8
45 : ite(42, 23, 44) : BV:8
46 : ite(41, 11, 45) : BV:8
47 : ite(40, 11, 46) : BV:8
48 : ite(39, 11, 47) : BV:8
49 : ite(38, 14, 48) : BV:8
50 : ite(37, 11, 49) : BV:8
51 : 1 { 0x1 +1.11e129 } : BV:32
52 : bvadd(51, 6, 7) : BV:32
53 : eq(52, 9) : BOOL
54 : eq(52, 12) : BOOL
55 : eq(52, 15) : BOOL
56 : eq(52, 17) : BOOL
57 : eq(52, 19) : BOOL
58 : eq(52, 21) : BOOL
59 : eq(52, 24) : BOOL
60 : ite(59, 26, 27) : BV:8
61 : ite(58, 23, 60) : BV:8
62 : ite(57, 11, 61) : BV:8
63 : ite(56, 11, 62) : BV:8
64 : ite(55, 11, 63) : BV:8
65 : ite(54, 14, 64) : BV:8
66 : ite(53, 11, 65) : BV:8
67 : bvadd(6, 7) : BV:32
68 : eq(67, 9) : BOOL
69 : eq(67, 12) : BOOL
70 : eq(67, 15) : BOOL
71 : eq(67, 17) : BOOL
72 : eq(67, 19) : BOOL
73 : eq(67, 21) : BOOL
74 : eq(67, 24) : BOOL
75 : ite(74, 26, 27) : BV:8
76 : ite(73, 23, 75) : BV:8
77 : ite(72, 11, 76) : BV:8
78 : ite(71, 11, 77) : BV:8
79 : ite(70, 11, 78) : BV:8
80 : ite(69, 14, 79) : BV:8
81 : ite(68, 11, 80) : BV:8
82 : bvconcat(34, 50, 66, 81) : BV:32
83 : ite(3, 2, 82) : BV:32
84 : ite(3, 2, 83) : BV:32
85 : lambda(1, 84) : FUNCTION[BV:32 -> BV:32]
86 : sym_const(85) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L2%7%bbentry.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
1059486311
=counter_example_end
=global nodece 6 num_edges_traversed 1
=global nodece 6 nodece_visted_pcs: 
L2%7%bbentry_Lfor.cond%1%bbentry
=global nodece 7
=global nodece 7 nodece z3.ce113.num_edges_traversed1
=global nodece 7 nodece_path
=global nodece 7 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 7 nodece_cached_counterexample
=counter_example_begin z3.ce113 4662e02be0fba83bf687cec7bd2a12
=input.spec-%var-x-1
1 : Lambda452Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda453Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 4292853248 { 0xffdfbe00 -2114048 -1.74798583e128 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 3125809193 { 0xba501029 -1169158103 -1.62549316e245 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 3125809192 { 0xba501028 -1169158104 -1.62549304e245 } : BV:32
28 : eq(23, 27) : BOOL
29 : 4292853251 { 0xffdfbe03 -2114045 -1.74798619e128 } : BV:32
30 : eq(23, 29) : BOOL
31 : 3125809195 { 0xba50102b -1169158101 -1.62549340e245 } : BV:32
32 : eq(23, 31) : BOOL
33 : 128 { 0x80 -128 } : BV:8
34 : 4292853249 { 0xffdfbe01 -2114047 -1.74798595e128 } : BV:32
35 : eq(23, 34) : BOOL
36 : 3125809194 { 0xba50102a -1169158102 -1.62549328e245 } : BV:32
37 : eq(23, 36) : BOOL
38 : 2992738457 { 0xb2619099 -1302228839 -1.76222527e229 } : BV:32
39 : eq(23, 38) : BOOL
40 : 190 { 0xbe -66 } : BV:8
41 : 4292853250 { 0xffdfbe02 -2114046 -1.74798607e128 } : BV:32
42 : eq(23, 41) : BOOL
43 : eq(23, 22) : BOOL
44 : 2992738459 { 0xb261909b -1302228837 -1.76222550e229 } : BV:32
45 : eq(23, 44) : BOOL
46 : 255 { 0xff -1 } : BV:8
47 : 2992738456 { 0xb2619098 -1302228840 -1.76222515e229 } : BV:32
48 : eq(23, 47) : BOOL
49 : 223 { 0xdf -33 } : BV:8
50 : ite(48, 26, 49) : BV:8
51 : ite(45, 46, 50) : BV:8
52 : ite(43, 26, 51) : BV:8
53 : ite(42, 26, 52) : BV:8
54 : ite(39, 40, 53) : BV:8
55 : ite(37, 26, 54) : BV:8
56 : ite(35, 26, 55) : BV:8
57 : ite(32, 33, 56) : BV:8
58 : ite(30, 26, 57) : BV:8
59 : ite(28, 26, 58) : BV:8
60 : ite(25, 26, 59) : BV:8
61 : 2 { 0x2 +1.23e129 } : BV:32
62 : bvadd(61, 21, 22) : BV:32
63 : eq(62, 24) : BOOL
64 : eq(62, 27) : BOOL
65 : eq(62, 29) : BOOL
66 : eq(62, 31) : BOOL
67 : eq(62, 34) : BOOL
68 : eq(62, 36) : BOOL
69 : eq(62, 38) : BOOL
70 : eq(62, 41) : BOOL
71 : eq(62, 22) : BOOL
72 : eq(62, 44) : BOOL
73 : eq(62, 47) : BOOL
74 : ite(73, 26, 49) : BV:8
75 : ite(72, 46, 74) : BV:8
76 : ite(71, 26, 75) : BV:8
77 : ite(70, 26, 76) : BV:8
78 : ite(69, 40, 77) : BV:8
79 : ite(68, 26, 78) : BV:8
80 : ite(67, 26, 79) : BV:8
81 : ite(66, 33, 80) : BV:8
82 : ite(65, 26, 81) : BV:8
83 : ite(64, 26, 82) : BV:8
84 : ite(63, 26, 83) : BV:8
85 : 1 { 0x1 +1.11e129 } : BV:32
86 : bvadd(85, 21, 22) : BV:32
87 : eq(86, 24) : BOOL
88 : eq(86, 27) : BOOL
89 : eq(86, 29) : BOOL
90 : eq(86, 31) : BOOL
91 : eq(86, 34) : BOOL
92 : eq(86, 36) : BOOL
93 : eq(86, 38) : BOOL
94 : eq(86, 41) : BOOL
95 : eq(86, 22) : BOOL
96 : eq(86, 44) : BOOL
97 : eq(86, 47) : BOOL
98 : ite(97, 26, 49) : BV:8
99 : ite(96, 46, 98) : BV:8
100 : ite(95, 26, 99) : BV:8
101 : ite(94, 26, 100) : BV:8
102 : ite(93, 40, 101) : BV:8
103 : ite(92, 26, 102) : BV:8
104 : ite(91, 26, 103) : BV:8
105 : ite(90, 33, 104) : BV:8
106 : ite(89, 26, 105) : BV:8
107 : ite(88, 26, 106) : BV:8
108 : ite(87, 26, 107) : BV:8
109 : bvadd(21, 22) : BV:32
110 : eq(109, 24) : BOOL
111 : eq(109, 27) : BOOL
112 : eq(109, 29) : BOOL
113 : eq(109, 31) : BOOL
114 : eq(109, 34) : BOOL
115 : eq(109, 36) : BOOL
116 : eq(109, 38) : BOOL
117 : eq(109, 41) : BOOL
118 : eq(109, 22) : BOOL
119 : eq(109, 44) : BOOL
120 : eq(109, 47) : BOOL
121 : ite(120, 26, 49) : BV:8
122 : ite(119, 46, 121) : BV:8
123 : ite(118, 26, 122) : BV:8
124 : ite(117, 26, 123) : BV:8
125 : ite(116, 40, 124) : BV:8
126 : ite(115, 26, 125) : BV:8
127 : ite(114, 26, 126) : BV:8
128 : ite(113, 33, 127) : BV:8
129 : ite(112, 26, 128) : BV:8
130 : ite(111, 26, 129) : BV:8
131 : ite(110, 26, 130) : BV:8
132 : bvconcat(60, 84, 108, 131) : BV:32
133 : ite(18, 2, 132) : BV:32
134 : lambda(17, 133) : FUNCTION[BV:32 -> BV:32]
135 : map(16, 134) : MAP[BV:32 -> BV:32]
136 : sym_const(135) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry
1 : Lambda452Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda453Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 4292853248 { 0xffdfbe00 -2114048 -1.74798583e128 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 3125809193 { 0xba501029 -1169158103 -1.62549316e245 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 3125809192 { 0xba501028 -1169158104 -1.62549304e245 } : BV:32
28 : eq(23, 27) : BOOL
29 : 4292853251 { 0xffdfbe03 -2114045 -1.74798619e128 } : BV:32
30 : eq(23, 29) : BOOL
31 : 3125809195 { 0xba50102b -1169158101 -1.62549340e245 } : BV:32
32 : eq(23, 31) : BOOL
33 : 128 { 0x80 -128 } : BV:8
34 : 4292853249 { 0xffdfbe01 -2114047 -1.74798595e128 } : BV:32
35 : eq(23, 34) : BOOL
36 : 3125809194 { 0xba50102a -1169158102 -1.62549328e245 } : BV:32
37 : eq(23, 36) : BOOL
38 : 2992738457 { 0xb2619099 -1302228839 -1.76222527e229 } : BV:32
39 : eq(23, 38) : BOOL
40 : 190 { 0xbe -66 } : BV:8
41 : 4292853250 { 0xffdfbe02 -2114046 -1.74798607e128 } : BV:32
42 : eq(23, 41) : BOOL
43 : eq(23, 22) : BOOL
44 : 2992738459 { 0xb261909b -1302228837 -1.76222550e229 } : BV:32
45 : eq(23, 44) : BOOL
46 : 255 { 0xff -1 } : BV:8
47 : 2992738456 { 0xb2619098 -1302228840 -1.76222515e229 } : BV:32
48 : eq(23, 47) : BOOL
49 : 223 { 0xdf -33 } : BV:8
50 : ite(48, 26, 49) : BV:8
51 : ite(45, 46, 50) : BV:8
52 : ite(43, 26, 51) : BV:8
53 : ite(42, 26, 52) : BV:8
54 : ite(39, 40, 53) : BV:8
55 : ite(37, 26, 54) : BV:8
56 : ite(35, 26, 55) : BV:8
57 : ite(32, 33, 56) : BV:8
58 : ite(30, 26, 57) : BV:8
59 : ite(28, 26, 58) : BV:8
60 : ite(25, 26, 59) : BV:8
61 : 2 { 0x2 +1.23e129 } : BV:32
62 : bvadd(61, 21, 22) : BV:32
63 : eq(62, 24) : BOOL
64 : eq(62, 27) : BOOL
65 : eq(62, 29) : BOOL
66 : eq(62, 31) : BOOL
67 : eq(62, 34) : BOOL
68 : eq(62, 36) : BOOL
69 : eq(62, 38) : BOOL
70 : eq(62, 41) : BOOL
71 : eq(62, 22) : BOOL
72 : eq(62, 44) : BOOL
73 : eq(62, 47) : BOOL
74 : ite(73, 26, 49) : BV:8
75 : ite(72, 46, 74) : BV:8
76 : ite(71, 26, 75) : BV:8
77 : ite(70, 26, 76) : BV:8
78 : ite(69, 40, 77) : BV:8
79 : ite(68, 26, 78) : BV:8
80 : ite(67, 26, 79) : BV:8
81 : ite(66, 33, 80) : BV:8
82 : ite(65, 26, 81) : BV:8
83 : ite(64, 26, 82) : BV:8
84 : ite(63, 26, 83) : BV:8
85 : 1 { 0x1 +1.11e129 } : BV:32
86 : bvadd(85, 21, 22) : BV:32
87 : eq(86, 24) : BOOL
88 : eq(86, 27) : BOOL
89 : eq(86, 29) : BOOL
90 : eq(86, 31) : BOOL
91 : eq(86, 34) : BOOL
92 : eq(86, 36) : BOOL
93 : eq(86, 38) : BOOL
94 : eq(86, 41) : BOOL
95 : eq(86, 22) : BOOL
96 : eq(86, 44) : BOOL
97 : eq(86, 47) : BOOL
98 : ite(97, 26, 49) : BV:8
99 : ite(96, 46, 98) : BV:8
100 : ite(95, 26, 99) : BV:8
101 : ite(94, 26, 100) : BV:8
102 : ite(93, 40, 101) : BV:8
103 : ite(92, 26, 102) : BV:8
104 : ite(91, 26, 103) : BV:8
105 : ite(90, 33, 104) : BV:8
106 : ite(89, 26, 105) : BV:8
107 : ite(88, 26, 106) : BV:8
108 : ite(87, 26, 107) : BV:8
109 : bvadd(21, 22) : BV:32
110 : eq(109, 24) : BOOL
111 : eq(109, 27) : BOOL
112 : eq(109, 29) : BOOL
113 : eq(109, 31) : BOOL
114 : eq(109, 34) : BOOL
115 : eq(109, 36) : BOOL
116 : eq(109, 38) : BOOL
117 : eq(109, 41) : BOOL
118 : eq(109, 22) : BOOL
119 : eq(109, 44) : BOOL
120 : eq(109, 47) : BOOL
121 : ite(120, 26, 49) : BV:8
122 : ite(119, 46, 121) : BV:8
123 : ite(118, 26, 122) : BV:8
124 : ite(117, 26, 123) : BV:8
125 : ite(116, 40, 124) : BV:8
126 : ite(115, 26, 125) : BV:8
127 : ite(114, 26, 126) : BV:8
128 : ite(113, 33, 127) : BV:8
129 : ite(112, 26, 128) : BV:8
130 : ite(111, 26, 129) : BV:8
131 : ite(110, 26, 130) : BV:8
132 : bvconcat(60, 84, 108, 131) : BV:32
133 : ite(18, 2, 132) : BV:32
134 : lambda(17, 133) : FUNCTION[BV:32 -> BV:32]
135 : map(16, 134) : MAP[BV:32 -> BV:32]
136 : sym_const(135) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 2992738455 ] -> 223, [ 2992738456; 2992738456 ] -> 0, [ 2992738457; 2992738457 ] -> 190, [ 2992738458; 2992738458 ] -> 223, [ 2992738459; 2992738459 ] -> 255, [ 2992738460; 3125809191 ] -> 223, [ 3125809192; 3125809194 ] -> 0, [ 3125809195; 3125809195 ] -> 128, [ 3125809196; 4292853247 ] -> 223, [ 4292853248; 4292853251 ] -> 0, [ 4292853252; 4294967295 ] -> 223, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2992738455 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2992738456; 2992738459 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2992738460; 3125809191 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3125809192; 3125809195 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3125809196; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3125809192 { 0xba501028 -1169158104 -1.62549304e245 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2992738456 { 0xb2619098 -1302228840 -1.76222515e229 } : BV:32
=input.dst.llvm-%x
1 : 4292853248 { 0xffdfbe00 -2114048 -1.74798583e128 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1242967190 { 0x4a162c96 +1.17323565e21 } : COUNT
=input.spec-%var-i-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1242967190 { 0x4a162c96 +1.17323565e21 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3125809192 { 0xba501028 -1169158104 -1.62549304e245 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3125809195 { 0xba50102b -1169158101 -1.62549340e245 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2992738456 { 0xb2619098 -1302228840 -1.76222515e229 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2992738459 { 0xb261909b -1302228837 -1.76222550e229 } : BV:32
=input.spec-%var-x-1.1.1
1 : Lambda428Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 4292853248 { 0xffdfbe00 -2114048 -1.74798583e128 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 3125809193 { 0xba501029 -1169158103 -1.62549316e245 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 3125809192 { 0xba501028 -1169158104 -1.62549304e245 } : BV:32
13 : eq(8, 12) : BOOL
14 : 4292853251 { 0xffdfbe03 -2114045 -1.74798619e128 } : BV:32
15 : eq(8, 14) : BOOL
16 : 3125809195 { 0xba50102b -1169158101 -1.62549340e245 } : BV:32
17 : eq(8, 16) : BOOL
18 : 128 { 0x80 -128 } : BV:8
19 : 4292853249 { 0xffdfbe01 -2114047 -1.74798595e128 } : BV:32
20 : eq(8, 19) : BOOL
21 : 3125809194 { 0xba50102a -1169158102 -1.62549328e245 } : BV:32
22 : eq(8, 21) : BOOL
23 : 2992738457 { 0xb2619099 -1302228839 -1.76222527e229 } : BV:32
24 : eq(8, 23) : BOOL
25 : 190 { 0xbe -66 } : BV:8
26 : 4292853250 { 0xffdfbe02 -2114046 -1.74798607e128 } : BV:32
27 : eq(8, 26) : BOOL
28 : eq(8, 7) : BOOL
29 : 2992738459 { 0xb261909b -1302228837 -1.76222550e229 } : BV:32
30 : eq(8, 29) : BOOL
31 : 255 { 0xff -1 } : BV:8
32 : 2992738456 { 0xb2619098 -1302228840 -1.76222515e229 } : BV:32
33 : eq(8, 32) : BOOL
34 : 223 { 0xdf -33 } : BV:8
35 : ite(33, 11, 34) : BV:8
36 : ite(30, 31, 35) : BV:8
37 : ite(28, 11, 36) : BV:8
38 : ite(27, 11, 37) : BV:8
39 : ite(24, 25, 38) : BV:8
40 : ite(22, 11, 39) : BV:8
41 : ite(20, 11, 40) : BV:8
42 : ite(17, 18, 41) : BV:8
43 : ite(15, 11, 42) : BV:8
44 : ite(13, 11, 43) : BV:8
45 : ite(10, 11, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 6, 7) : BV:32
48 : eq(47, 9) : BOOL
49 : eq(47, 12) : BOOL
50 : eq(47, 14) : BOOL
51 : eq(47, 16) : BOOL
52 : eq(47, 19) : BOOL
53 : eq(47, 21) : BOOL
54 : eq(47, 23) : BOOL
55 : eq(47, 26) : BOOL
56 : eq(47, 7) : BOOL
57 : eq(47, 29) : BOOL
58 : eq(47, 32) : BOOL
59 : ite(58, 11, 34) : BV:8
60 : ite(57, 31, 59) : BV:8
61 : ite(56, 11, 60) : BV:8
62 : ite(55, 11, 61) : BV:8
63 : ite(54, 25, 62) : BV:8
64 : ite(53, 11, 63) : BV:8
65 : ite(52, 11, 64) : BV:8
66 : ite(51, 18, 65) : BV:8
67 : ite(50, 11, 66) : BV:8
68 : ite(49, 11, 67) : BV:8
69 : ite(48, 11, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 6, 7) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : eq(71, 19) : BOOL
77 : eq(71, 21) : BOOL
78 : eq(71, 23) : BOOL
79 : eq(71, 26) : BOOL
80 : eq(71, 7) : BOOL
81 : eq(71, 29) : BOOL
82 : eq(71, 32) : BOOL
83 : ite(82, 11, 34) : BV:8
84 : ite(81, 31, 83) : BV:8
85 : ite(80, 11, 84) : BV:8
86 : ite(79, 11, 85) : BV:8
87 : ite(78, 25, 86) : BV:8
88 : ite(77, 11, 87) : BV:8
89 : ite(76, 11, 88) : BV:8
90 : ite(75, 18, 89) : BV:8
91 : ite(74, 11, 90) : BV:8
92 : ite(73, 11, 91) : BV:8
93 : ite(72, 11, 92) : BV:8
94 : bvadd(6, 7) : BV:32
95 : eq(94, 9) : BOOL
96 : eq(94, 12) : BOOL
97 : eq(94, 14) : BOOL
98 : eq(94, 16) : BOOL
99 : eq(94, 19) : BOOL
100 : eq(94, 21) : BOOL
101 : eq(94, 23) : BOOL
102 : eq(94, 26) : BOOL
103 : eq(94, 7) : BOOL
104 : eq(94, 29) : BOOL
105 : eq(94, 32) : BOOL
106 : ite(105, 11, 34) : BV:8
107 : ite(104, 31, 106) : BV:8
108 : ite(103, 11, 107) : BV:8
109 : ite(102, 11, 108) : BV:8
110 : ite(101, 25, 109) : BV:8
111 : ite(100, 11, 110) : BV:8
112 : ite(99, 11, 111) : BV:8
113 : ite(98, 18, 112) : BV:8
114 : ite(97, 11, 113) : BV:8
115 : ite(96, 11, 114) : BV:8
116 : ite(95, 11, 115) : BV:8
117 : bvconcat(45, 69, 93, 116) : BV:32
118 : ite(3, 2, 117) : BV:32
119 : lambda(1, 118) : FUNCTION[BV:32 -> BV:32]
120 : sym_const(119) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry.1.1
1 : Lambda429Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 4292853248 { 0xffdfbe00 -2114048 -1.74798583e128 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 3125809193 { 0xba501029 -1169158103 -1.62549316e245 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 3125809192 { 0xba501028 -1169158104 -1.62549304e245 } : BV:32
13 : eq(8, 12) : BOOL
14 : 4292853251 { 0xffdfbe03 -2114045 -1.74798619e128 } : BV:32
15 : eq(8, 14) : BOOL
16 : 3125809195 { 0xba50102b -1169158101 -1.62549340e245 } : BV:32
17 : eq(8, 16) : BOOL
18 : 128 { 0x80 -128 } : BV:8
19 : 4292853249 { 0xffdfbe01 -2114047 -1.74798595e128 } : BV:32
20 : eq(8, 19) : BOOL
21 : 3125809194 { 0xba50102a -1169158102 -1.62549328e245 } : BV:32
22 : eq(8, 21) : BOOL
23 : 2992738457 { 0xb2619099 -1302228839 -1.76222527e229 } : BV:32
24 : eq(8, 23) : BOOL
25 : 190 { 0xbe -66 } : BV:8
26 : 4292853250 { 0xffdfbe02 -2114046 -1.74798607e128 } : BV:32
27 : eq(8, 26) : BOOL
28 : eq(8, 7) : BOOL
29 : 2992738459 { 0xb261909b -1302228837 -1.76222550e229 } : BV:32
30 : eq(8, 29) : BOOL
31 : 255 { 0xff -1 } : BV:8
32 : 2992738456 { 0xb2619098 -1302228840 -1.76222515e229 } : BV:32
33 : eq(8, 32) : BOOL
34 : 223 { 0xdf -33 } : BV:8
35 : ite(33, 11, 34) : BV:8
36 : ite(30, 31, 35) : BV:8
37 : ite(28, 11, 36) : BV:8
38 : ite(27, 11, 37) : BV:8
39 : ite(24, 25, 38) : BV:8
40 : ite(22, 11, 39) : BV:8
41 : ite(20, 11, 40) : BV:8
42 : ite(17, 18, 41) : BV:8
43 : ite(15, 11, 42) : BV:8
44 : ite(13, 11, 43) : BV:8
45 : ite(10, 11, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 6, 7) : BV:32
48 : eq(47, 9) : BOOL
49 : eq(47, 12) : BOOL
50 : eq(47, 14) : BOOL
51 : eq(47, 16) : BOOL
52 : eq(47, 19) : BOOL
53 : eq(47, 21) : BOOL
54 : eq(47, 23) : BOOL
55 : eq(47, 26) : BOOL
56 : eq(47, 7) : BOOL
57 : eq(47, 29) : BOOL
58 : eq(47, 32) : BOOL
59 : ite(58, 11, 34) : BV:8
60 : ite(57, 31, 59) : BV:8
61 : ite(56, 11, 60) : BV:8
62 : ite(55, 11, 61) : BV:8
63 : ite(54, 25, 62) : BV:8
64 : ite(53, 11, 63) : BV:8
65 : ite(52, 11, 64) : BV:8
66 : ite(51, 18, 65) : BV:8
67 : ite(50, 11, 66) : BV:8
68 : ite(49, 11, 67) : BV:8
69 : ite(48, 11, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 6, 7) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : eq(71, 19) : BOOL
77 : eq(71, 21) : BOOL
78 : eq(71, 23) : BOOL
79 : eq(71, 26) : BOOL
80 : eq(71, 7) : BOOL
81 : eq(71, 29) : BOOL
82 : eq(71, 32) : BOOL
83 : ite(82, 11, 34) : BV:8
84 : ite(81, 31, 83) : BV:8
85 : ite(80, 11, 84) : BV:8
86 : ite(79, 11, 85) : BV:8
87 : ite(78, 25, 86) : BV:8
88 : ite(77, 11, 87) : BV:8
89 : ite(76, 11, 88) : BV:8
90 : ite(75, 18, 89) : BV:8
91 : ite(74, 11, 90) : BV:8
92 : ite(73, 11, 91) : BV:8
93 : ite(72, 11, 92) : BV:8
94 : bvadd(6, 7) : BV:32
95 : eq(94, 9) : BOOL
96 : eq(94, 12) : BOOL
97 : eq(94, 14) : BOOL
98 : eq(94, 16) : BOOL
99 : eq(94, 19) : BOOL
100 : eq(94, 21) : BOOL
101 : eq(94, 23) : BOOL
102 : eq(94, 26) : BOOL
103 : eq(94, 7) : BOOL
104 : eq(94, 29) : BOOL
105 : eq(94, 32) : BOOL
106 : ite(105, 11, 34) : BV:8
107 : ite(104, 31, 106) : BV:8
108 : ite(103, 11, 107) : BV:8
109 : ite(102, 11, 108) : BV:8
110 : ite(101, 25, 109) : BV:8
111 : ite(100, 11, 110) : BV:8
112 : ite(99, 11, 111) : BV:8
113 : ite(98, 18, 112) : BV:8
114 : ite(97, 11, 113) : BV:8
115 : ite(96, 11, 114) : BV:8
116 : ite(95, 11, 115) : BV:8
117 : bvconcat(45, 69, 93, 116) : BV:32
118 : ite(3, 2, 117) : BV:32
119 : ite(3, 2, 118) : BV:32
120 : lambda(1, 119) : FUNCTION[BV:32 -> BV:32]
121 : sym_const(120) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L2%7%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
2023132795
=counter_example_end
=global nodece 7 num_edges_traversed 1
=global nodece 7 nodece_visted_pcs: 
L2%7%bbentry_Lfor.cond%1%bbentry
=global nodece 8
=global nodece 8 nodece z3.ce256.num_edges_traversed0
=global nodece 8 nodece_path
=global nodece 8 nodece_path.graph_edge_composition
(epsilon)
=global nodece 8 nodece_cached_counterexample
=counter_example_begin z3.ce256 6762f7374364ad640070abbf141399
=input.spec-%var-x-1
1 : Lambda922Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda923Var : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry
1 : Lambda927Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda928Var : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 2, 28) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 674980895 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 674980896; 674980899 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 674980900; 3692064099 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3692064100; 3692064103 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3692064104; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 674980896 { 0x283b6420 +1.46399307e209 } : BV:32
=input.dst.llvm-%n
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3692064100 { 0xdc106d64 -602903196 -1.12833833e57 } : BV:32
=input.dst.llvm-%x
1 : 2316741256 { 0x8a16aa88 -1978226040 -1.17707920e149 } : BV:32
=input.spec-%var-i-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 674980896 { 0x283b6420 +1.46399307e209 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 674980899 { 0x283b6423 +1.46399343e209 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3692064100 { 0xdc106d64 -602903196 -1.12833833e57 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3692064103 { 0xdc106d67 -602903193 -1.12833869e57 } : BV:32
=input.spec-%var-x-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry.1.1
1 : Lambda896Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 2, 18) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L2%7%bbentry.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
2328253122
=counter_example_end
=global nodece 8 num_edges_traversed 0
=global nodece 8 nodece_visted_pcs: 
L2%7%bbentry_Lfor.cond%1%bbentry
=global nodece 9
=global nodece 9 nodece z3v487.ce257.num_edges_traversed0
=global nodece 9 nodece_path
=global nodece 9 nodece_path.graph_edge_composition
(epsilon)
=global nodece 9 nodece_cached_counterexample
=counter_example_begin z3v487.ce257 d596182b8f7b9d4cccb69284d32510
=input.spec-%var-x-1
1 : Lambda940Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 524287 { 0x7ffff +1.6249988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 524288 { 0x80000 +1.6250000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda941Var : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 2, 28) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry
1 : Lambda946Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 524287 { 0x7ffff +1.6249988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 524288 { 0x80000 +1.6250000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda947Var : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 134144511 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 134144512; 134144515 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 134144516; 1073751043 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1073751044; 1073751047 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1073751048; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1073751044 { 0x40002404 +1.109910e1 } : BV:32
=input.dst.llvm-%n
1 : 524288 { 0x80000 +1.6250000e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 134144512 { 0x7fee200 +1.99127197e144 } : BV:32
=input.dst.llvm-%x
1 : 1711277312 { 0x66000500 +1.15258e77 } : BV:32
=input.spec-%var-i-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1073751044 { 0x40002404 +1.109910e1 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1073751047 { 0x40002407 +1.109946e1 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 134144512 { 0x7fee200 +1.99127197e144 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 134144515 { 0x7fee203 +1.99127233e144 } : BV:32
=input.spec-%var-x-1.1.1
1 : Lambda903Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 524287 { 0x7ffff +1.6249988e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 524288 { 0x80000 +1.6250000e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 2, 18) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 524287 ] -> true, [ 524288; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L2%7%bbentry.0.1
1 : ([ 0; 524287 ] -> true, [ 524288; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
193441133
=counter_example_end
=global nodece 9 num_edges_traversed 0
=global nodece 9 nodece_visted_pcs: 
L2%7%bbentry_Lfor.cond%1%bbentry
=global nodece 10
=global nodece 10 nodece z3.ce317.num_edges_traversed2
=global nodece 10 nodece_path
=global nodece 10 nodece_path.graph_edge_composition
(epsilon)
=global nodece 10 nodece_cached_counterexample
=counter_example_begin z3.ce317 c9475c992d39c14d9736fda5939826d
=input.spec-%var-x-1
1 : Lambda306Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 65535 { 0xffff +1.781238e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 65536 { 0x10000 +1.781250e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda307Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 2144336128 { 0x7fcff900 +1.62478637e128 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 3743546246 { 0xdf21fb86 -551421050 -1.26548838e63 } : BV:32
25 : eq(23, 24) : BOOL
26 : 207 { 0xcf -49 } : BV:8
27 : 1602813322 { 0x5f88fd8a +1.7023739e64 } : BV:32
28 : eq(23, 27) : BOOL
29 : 1 { 0x1 } : BV:8
30 : 3743546245 { 0xdf21fb85 -551421051 -1.26548826e63 } : BV:32
31 : eq(23, 30) : BOOL
32 : 249 { 0xf9 -7 } : BV:8
33 : 3743546247 { 0xdf21fb87 -551421049 -1.26548850e63 } : BV:32
34 : eq(23, 33) : BOOL
35 : 127 { 0x7f } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvadd(41, 21, 22) : BV:32
43 : eq(42, 24) : BOOL
44 : eq(42, 27) : BOOL
45 : eq(42, 30) : BOOL
46 : eq(42, 33) : BOOL
47 : ite(46, 35, 36) : BV:8
48 : ite(45, 32, 47) : BV:8
49 : ite(44, 29, 48) : BV:8
50 : ite(43, 26, 49) : BV:8
51 : 1 { 0x1 +1.11e129 } : BV:32
52 : bvadd(51, 21, 22) : BV:32
53 : eq(52, 24) : BOOL
54 : eq(52, 27) : BOOL
55 : eq(52, 30) : BOOL
56 : eq(52, 33) : BOOL
57 : ite(56, 35, 36) : BV:8
58 : ite(55, 32, 57) : BV:8
59 : ite(54, 29, 58) : BV:8
60 : ite(53, 26, 59) : BV:8
61 : bvadd(21, 22) : BV:32
62 : eq(61, 24) : BOOL
63 : eq(61, 27) : BOOL
64 : eq(61, 30) : BOOL
65 : eq(61, 33) : BOOL
66 : ite(65, 35, 36) : BV:8
67 : ite(64, 32, 66) : BV:8
68 : ite(63, 29, 67) : BV:8
69 : ite(62, 26, 68) : BV:8
70 : bvconcat(40, 50, 60, 69) : BV:32
71 : ite(18, 2, 70) : BV:32
72 : lambda(17, 71) : FUNCTION[BV:32 -> BV:32]
73 : map(16, 72) : MAP[BV:32 -> BV:32]
74 : sym_const(73) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry
1 : Lambda306Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 65535 { 0xffff +1.781238e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 65536 { 0x10000 +1.781250e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda307Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 2144336128 { 0x7fcff900 +1.62478637e128 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 3743546246 { 0xdf21fb86 -551421050 -1.26548838e63 } : BV:32
25 : eq(23, 24) : BOOL
26 : 207 { 0xcf -49 } : BV:8
27 : 1602813322 { 0x5f88fd8a +1.7023739e64 } : BV:32
28 : eq(23, 27) : BOOL
29 : 1 { 0x1 } : BV:8
30 : 3743546245 { 0xdf21fb85 -551421051 -1.26548826e63 } : BV:32
31 : eq(23, 30) : BOOL
32 : 249 { 0xf9 -7 } : BV:8
33 : 3743546247 { 0xdf21fb87 -551421049 -1.26548850e63 } : BV:32
34 : eq(23, 33) : BOOL
35 : 127 { 0x7f } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvadd(41, 21, 22) : BV:32
43 : eq(42, 24) : BOOL
44 : eq(42, 27) : BOOL
45 : eq(42, 30) : BOOL
46 : eq(42, 33) : BOOL
47 : ite(46, 35, 36) : BV:8
48 : ite(45, 32, 47) : BV:8
49 : ite(44, 29, 48) : BV:8
50 : ite(43, 26, 49) : BV:8
51 : 1 { 0x1 +1.11e129 } : BV:32
52 : bvadd(51, 21, 22) : BV:32
53 : eq(52, 24) : BOOL
54 : eq(52, 27) : BOOL
55 : eq(52, 30) : BOOL
56 : eq(52, 33) : BOOL
57 : ite(56, 35, 36) : BV:8
58 : ite(55, 32, 57) : BV:8
59 : ite(54, 29, 58) : BV:8
60 : ite(53, 26, 59) : BV:8
61 : bvadd(21, 22) : BV:32
62 : eq(61, 24) : BOOL
63 : eq(61, 27) : BOOL
64 : eq(61, 30) : BOOL
65 : eq(61, 33) : BOOL
66 : ite(65, 35, 36) : BV:8
67 : ite(64, 32, 66) : BV:8
68 : ite(63, 29, 67) : BV:8
69 : ite(62, 26, 68) : BV:8
70 : bvconcat(40, 50, 60, 69) : BV:32
71 : ite(18, 2, 70) : BV:32
72 : lambda(17, 71) : FUNCTION[BV:32 -> BV:32]
73 : map(16, 72) : MAP[BV:32 -> BV:32]
74 : sym_const(73) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 1602813321 ] -> 0, [ 1602813322; 1602813322 ] -> 1, [ 1602813323; 3743546244 ] -> 0, [ 3743546245; 3743546245 ] -> 249, [ 3743546246; 3743546246 ] -> 207, [ 3743546247; 3743546247 ] -> 127, [ 3743546248; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1602813319 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1602813320; 1602813323 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1602813324; 3743546243 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3743546244; 3743546247 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3743546248; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1602813320 { 0x5f88fd88 +1.7023715e64 } : BV:32
=input.dst.llvm-%n
1 : 65536 { 0x10000 +1.781250e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3743546244 { 0xdf21fb84 -551421052 -1.26548814e63 } : BV:32
=input.dst.llvm-%x
1 : 2144336128 { 0x7fcff900 +1.62478637e128 } : BV:32
=input.spec-%var-i-0.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-ret-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-8.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1931841633 { 0x73259061 +1.29346859e103 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1602813320 { 0x5f88fd88 +1.7023715e64 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1602813323 { 0x5f88fd8b +1.7023751e64 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3743546244 { 0xdf21fb84 -551421052 -1.26548814e63 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3743546247 { 0xdf21fb87 -551421049 -1.26548850e63 } : BV:32
=input.spec-%var-x-1.1.1
1 : Lambda282Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 2144336128 { 0x7fcff900 +1.62478637e128 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 3743546246 { 0xdf21fb86 -551421050 -1.26548838e63 } : BV:32
10 : eq(8, 9) : BOOL
11 : 207 { 0xcf -49 } : BV:8
12 : 1602813322 { 0x5f88fd8a +1.7023739e64 } : BV:32
13 : eq(8, 12) : BOOL
14 : 1 { 0x1 } : BV:8
15 : 3743546245 { 0xdf21fb85 -551421051 -1.26548826e63 } : BV:32
16 : eq(8, 15) : BOOL
17 : 249 { 0xf9 -7 } : BV:8
18 : 3743546247 { 0xdf21fb87 -551421049 -1.26548850e63 } : BV:32
19 : eq(8, 18) : BOOL
20 : 127 { 0x7f } : BV:8
21 : 0 { 0x0 } : BV:8
22 : ite(19, 20, 21) : BV:8
23 : ite(16, 17, 22) : BV:8
24 : ite(13, 14, 23) : BV:8
25 : ite(10, 11, 24) : BV:8
26 : 2 { 0x2 +1.23e129 } : BV:32
27 : bvadd(26, 6, 7) : BV:32
28 : eq(27, 9) : BOOL
29 : eq(27, 12) : BOOL
30 : eq(27, 15) : BOOL
31 : eq(27, 18) : BOOL
32 : ite(31, 20, 21) : BV:8
33 : ite(30, 17, 32) : BV:8
34 : ite(29, 14, 33) : BV:8
35 : ite(28, 11, 34) : BV:8
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvadd(36, 6, 7) : BV:32
38 : eq(37, 9) : BOOL
39 : eq(37, 12) : BOOL
40 : eq(37, 15) : BOOL
41 : eq(37, 18) : BOOL
42 : ite(41, 20, 21) : BV:8
43 : ite(40, 17, 42) : BV:8
44 : ite(39, 14, 43) : BV:8
45 : ite(38, 11, 44) : BV:8
46 : bvadd(6, 7) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : eq(46, 15) : BOOL
50 : eq(46, 18) : BOOL
51 : ite(50, 20, 21) : BV:8
52 : ite(49, 17, 51) : BV:8
53 : ite(48, 14, 52) : BV:8
54 : ite(47, 11, 53) : BV:8
55 : bvconcat(25, 35, 45, 54) : BV:32
56 : ite(3, 2, 55) : BV:32
57 : lambda(1, 56) : FUNCTION[BV:32 -> BV:32]
58 : sym_const(57) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry.1.1
1 : Lambda283Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 2144336128 { 0x7fcff900 +1.62478637e128 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 3743546246 { 0xdf21fb86 -551421050 -1.26548838e63 } : BV:32
10 : eq(8, 9) : BOOL
11 : 207 { 0xcf -49 } : BV:8
12 : 1602813322 { 0x5f88fd8a +1.7023739e64 } : BV:32
13 : eq(8, 12) : BOOL
14 : 1 { 0x1 } : BV:8
15 : 3743546245 { 0xdf21fb85 -551421051 -1.26548826e63 } : BV:32
16 : eq(8, 15) : BOOL
17 : 249 { 0xf9 -7 } : BV:8
18 : 3743546247 { 0xdf21fb87 -551421049 -1.26548850e63 } : BV:32
19 : eq(8, 18) : BOOL
20 : 127 { 0x7f } : BV:8
21 : 0 { 0x0 } : BV:8
22 : ite(19, 20, 21) : BV:8
23 : ite(16, 17, 22) : BV:8
24 : ite(13, 14, 23) : BV:8
25 : ite(10, 11, 24) : BV:8
26 : 2 { 0x2 +1.23e129 } : BV:32
27 : bvadd(26, 6, 7) : BV:32
28 : eq(27, 9) : BOOL
29 : eq(27, 12) : BOOL
30 : eq(27, 15) : BOOL
31 : eq(27, 18) : BOOL
32 : ite(31, 20, 21) : BV:8
33 : ite(30, 17, 32) : BV:8
34 : ite(29, 14, 33) : BV:8
35 : ite(28, 11, 34) : BV:8
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvadd(36, 6, 7) : BV:32
38 : eq(37, 9) : BOOL
39 : eq(37, 12) : BOOL
40 : eq(37, 15) : BOOL
41 : eq(37, 18) : BOOL
42 : ite(41, 20, 21) : BV:8
43 : ite(40, 17, 42) : BV:8
44 : ite(39, 14, 43) : BV:8
45 : ite(38, 11, 44) : BV:8
46 : bvadd(6, 7) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : eq(46, 15) : BOOL
50 : eq(46, 18) : BOOL
51 : ite(50, 20, 21) : BV:8
52 : ite(49, 17, 51) : BV:8
53 : ite(48, 14, 52) : BV:8
54 : ite(47, 11, 53) : BV:8
55 : bvconcat(25, 35, 45, 54) : BV:32
56 : ite(3, 2, 55) : BV:32
57 : ite(3, 2, 56) : BV:32
58 : lambda(1, 57) : FUNCTION[BV:32 -> BV:32]
59 : sym_const(58) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 65535 ] -> true, [ 65536; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L2%7%bbentry.0.1
1 : ([ 0; 65535 ] -> true, [ 65536; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
2355205896
=counter_example_end
=global nodece 10 num_edges_traversed 2
=global nodece 10 nodece_visted_pcs: 
L2%7%bbentry_Lfor.cond%1%bbentry
=global nodece 11
=global nodece 11 nodece z3.ce342.num_edges_traversed3
=global nodece 11 nodece_path
=global nodece 11 nodece_path.graph_edge_composition
(L2%7%bbentry_Lfor.cond%1%bbentry=>L2%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 11 nodece_cached_counterexample
=counter_example_begin z3.ce342 1e73808070a161b72e67f4a8b1e9bdd
=input.spec-%var-x-1
1 : Lambda306Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 65535 { 0xffff +1.781238e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 65536 { 0x10000 +1.781250e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda307Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 2144336128 { 0x7fcff900 +1.62478637e128 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 3743546246 { 0xdf21fb86 -551421050 -1.26548838e63 } : BV:32
25 : eq(23, 24) : BOOL
26 : 207 { 0xcf -49 } : BV:8
27 : 1602813322 { 0x5f88fd8a +1.7023739e64 } : BV:32
28 : eq(23, 27) : BOOL
29 : 1 { 0x1 } : BV:8
30 : 3743546245 { 0xdf21fb85 -551421051 -1.26548826e63 } : BV:32
31 : eq(23, 30) : BOOL
32 : 249 { 0xf9 -7 } : BV:8
33 : 3743546247 { 0xdf21fb87 -551421049 -1.26548850e63 } : BV:32
34 : eq(23, 33) : BOOL
35 : 127 { 0x7f } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvadd(41, 21, 22) : BV:32
43 : eq(42, 24) : BOOL
44 : eq(42, 27) : BOOL
45 : eq(42, 30) : BOOL
46 : eq(42, 33) : BOOL
47 : ite(46, 35, 36) : BV:8
48 : ite(45, 32, 47) : BV:8
49 : ite(44, 29, 48) : BV:8
50 : ite(43, 26, 49) : BV:8
51 : 1 { 0x1 +1.11e129 } : BV:32
52 : bvadd(51, 21, 22) : BV:32
53 : eq(52, 24) : BOOL
54 : eq(52, 27) : BOOL
55 : eq(52, 30) : BOOL
56 : eq(52, 33) : BOOL
57 : ite(56, 35, 36) : BV:8
58 : ite(55, 32, 57) : BV:8
59 : ite(54, 29, 58) : BV:8
60 : ite(53, 26, 59) : BV:8
61 : bvadd(21, 22) : BV:32
62 : eq(61, 24) : BOOL
63 : eq(61, 27) : BOOL
64 : eq(61, 30) : BOOL
65 : eq(61, 33) : BOOL
66 : ite(65, 35, 36) : BV:8
67 : ite(64, 32, 66) : BV:8
68 : ite(63, 29, 67) : BV:8
69 : ite(62, 26, 68) : BV:8
70 : bvconcat(40, 50, 60, 69) : BV:32
71 : ite(18, 2, 70) : BV:32
72 : lambda(17, 71) : FUNCTION[BV:32 -> BV:32]
73 : map(16, 72) : MAP[BV:32 -> BV:32]
74 : sym_const(73) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry
1 : Lambda306Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 65535 { 0xffff +1.781238e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 65536 { 0x10000 +1.781250e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda307Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 2144336128 { 0x7fcff900 +1.62478637e128 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 3743546246 { 0xdf21fb86 -551421050 -1.26548838e63 } : BV:32
25 : eq(23, 24) : BOOL
26 : 207 { 0xcf -49 } : BV:8
27 : 1602813322 { 0x5f88fd8a +1.7023739e64 } : BV:32
28 : eq(23, 27) : BOOL
29 : 1 { 0x1 } : BV:8
30 : 3743546245 { 0xdf21fb85 -551421051 -1.26548826e63 } : BV:32
31 : eq(23, 30) : BOOL
32 : 249 { 0xf9 -7 } : BV:8
33 : 3743546247 { 0xdf21fb87 -551421049 -1.26548850e63 } : BV:32
34 : eq(23, 33) : BOOL
35 : 127 { 0x7f } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvadd(41, 21, 22) : BV:32
43 : eq(42, 24) : BOOL
44 : eq(42, 27) : BOOL
45 : eq(42, 30) : BOOL
46 : eq(42, 33) : BOOL
47 : ite(46, 35, 36) : BV:8
48 : ite(45, 32, 47) : BV:8
49 : ite(44, 29, 48) : BV:8
50 : ite(43, 26, 49) : BV:8
51 : 1 { 0x1 +1.11e129 } : BV:32
52 : bvadd(51, 21, 22) : BV:32
53 : eq(52, 24) : BOOL
54 : eq(52, 27) : BOOL
55 : eq(52, 30) : BOOL
56 : eq(52, 33) : BOOL
57 : ite(56, 35, 36) : BV:8
58 : ite(55, 32, 57) : BV:8
59 : ite(54, 29, 58) : BV:8
60 : ite(53, 26, 59) : BV:8
61 : bvadd(21, 22) : BV:32
62 : eq(61, 24) : BOOL
63 : eq(61, 27) : BOOL
64 : eq(61, 30) : BOOL
65 : eq(61, 33) : BOOL
66 : ite(65, 35, 36) : BV:8
67 : ite(64, 32, 66) : BV:8
68 : ite(63, 29, 67) : BV:8
69 : ite(62, 26, 68) : BV:8
70 : bvconcat(40, 50, 60, 69) : BV:32
71 : ite(18, 2, 70) : BV:32
72 : lambda(17, 71) : FUNCTION[BV:32 -> BV:32]
73 : map(16, 72) : MAP[BV:32 -> BV:32]
74 : sym_const(73) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 1602813321 ] -> 0, [ 1602813322; 1602813322 ] -> 1, [ 1602813323; 3743546244 ] -> 0, [ 3743546245; 3743546245 ] -> 249, [ 3743546246; 3743546246 ] -> 207, [ 3743546247; 3743546247 ] -> 127, [ 3743546248; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1602813319 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1602813320; 1602813323 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1602813324; 3743546243 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3743546244; 3743546247 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3743546248; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1602813320 { 0x5f88fd88 +1.7023715e64 } : BV:32
=input.dst.llvm-%n
1 : 65536 { 0x10000 +1.781250e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3743546244 { 0xdf21fb84 -551421052 -1.26548814e63 } : BV:32
=input.dst.llvm-%x
1 : 2144336128 { 0x7fcff900 +1.62478637e128 } : BV:32
=input.spec-%var-i-0.L2%7%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%var-ret-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-8.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1931841633 { 0x73259061 +1.29346859e103 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1602813320 { 0x5f88fd88 +1.7023715e64 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1602813323 { 0x5f88fd8b +1.7023751e64 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3743546244 { 0xdf21fb84 -551421052 -1.26548814e63 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3743546247 { 0xdf21fb87 -551421049 -1.26548850e63 } : BV:32
=input.spec-%var-x-1.1.1
1 : Lambda282Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 2144336128 { 0x7fcff900 +1.62478637e128 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 3743546246 { 0xdf21fb86 -551421050 -1.26548838e63 } : BV:32
10 : eq(8, 9) : BOOL
11 : 207 { 0xcf -49 } : BV:8
12 : 1602813322 { 0x5f88fd8a +1.7023739e64 } : BV:32
13 : eq(8, 12) : BOOL
14 : 1 { 0x1 } : BV:8
15 : 3743546245 { 0xdf21fb85 -551421051 -1.26548826e63 } : BV:32
16 : eq(8, 15) : BOOL
17 : 249 { 0xf9 -7 } : BV:8
18 : 3743546247 { 0xdf21fb87 -551421049 -1.26548850e63 } : BV:32
19 : eq(8, 18) : BOOL
20 : 127 { 0x7f } : BV:8
21 : 0 { 0x0 } : BV:8
22 : ite(19, 20, 21) : BV:8
23 : ite(16, 17, 22) : BV:8
24 : ite(13, 14, 23) : BV:8
25 : ite(10, 11, 24) : BV:8
26 : 2 { 0x2 +1.23e129 } : BV:32
27 : bvadd(26, 6, 7) : BV:32
28 : eq(27, 9) : BOOL
29 : eq(27, 12) : BOOL
30 : eq(27, 15) : BOOL
31 : eq(27, 18) : BOOL
32 : ite(31, 20, 21) : BV:8
33 : ite(30, 17, 32) : BV:8
34 : ite(29, 14, 33) : BV:8
35 : ite(28, 11, 34) : BV:8
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvadd(36, 6, 7) : BV:32
38 : eq(37, 9) : BOOL
39 : eq(37, 12) : BOOL
40 : eq(37, 15) : BOOL
41 : eq(37, 18) : BOOL
42 : ite(41, 20, 21) : BV:8
43 : ite(40, 17, 42) : BV:8
44 : ite(39, 14, 43) : BV:8
45 : ite(38, 11, 44) : BV:8
46 : bvadd(6, 7) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : eq(46, 15) : BOOL
50 : eq(46, 18) : BOOL
51 : ite(50, 20, 21) : BV:8
52 : ite(49, 17, 51) : BV:8
53 : ite(48, 14, 52) : BV:8
54 : ite(47, 11, 53) : BV:8
55 : bvconcat(25, 35, 45, 54) : BV:32
56 : ite(3, 2, 55) : BV:32
57 : lambda(1, 56) : FUNCTION[BV:32 -> BV:32]
58 : sym_const(57) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry.1.1
1 : Lambda283Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 2144336128 { 0x7fcff900 +1.62478637e128 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 3743546246 { 0xdf21fb86 -551421050 -1.26548838e63 } : BV:32
10 : eq(8, 9) : BOOL
11 : 207 { 0xcf -49 } : BV:8
12 : 1602813322 { 0x5f88fd8a +1.7023739e64 } : BV:32
13 : eq(8, 12) : BOOL
14 : 1 { 0x1 } : BV:8
15 : 3743546245 { 0xdf21fb85 -551421051 -1.26548826e63 } : BV:32
16 : eq(8, 15) : BOOL
17 : 249 { 0xf9 -7 } : BV:8
18 : 3743546247 { 0xdf21fb87 -551421049 -1.26548850e63 } : BV:32
19 : eq(8, 18) : BOOL
20 : 127 { 0x7f } : BV:8
21 : 0 { 0x0 } : BV:8
22 : ite(19, 20, 21) : BV:8
23 : ite(16, 17, 22) : BV:8
24 : ite(13, 14, 23) : BV:8
25 : ite(10, 11, 24) : BV:8
26 : 2 { 0x2 +1.23e129 } : BV:32
27 : bvadd(26, 6, 7) : BV:32
28 : eq(27, 9) : BOOL
29 : eq(27, 12) : BOOL
30 : eq(27, 15) : BOOL
31 : eq(27, 18) : BOOL
32 : ite(31, 20, 21) : BV:8
33 : ite(30, 17, 32) : BV:8
34 : ite(29, 14, 33) : BV:8
35 : ite(28, 11, 34) : BV:8
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvadd(36, 6, 7) : BV:32
38 : eq(37, 9) : BOOL
39 : eq(37, 12) : BOOL
40 : eq(37, 15) : BOOL
41 : eq(37, 18) : BOOL
42 : ite(41, 20, 21) : BV:8
43 : ite(40, 17, 42) : BV:8
44 : ite(39, 14, 43) : BV:8
45 : ite(38, 11, 44) : BV:8
46 : bvadd(6, 7) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : eq(46, 15) : BOOL
50 : eq(46, 18) : BOOL
51 : ite(50, 20, 21) : BV:8
52 : ite(49, 17, 51) : BV:8
53 : ite(48, 14, 52) : BV:8
54 : ite(47, 11, 53) : BV:8
55 : bvconcat(25, 35, 45, 54) : BV:32
56 : ite(3, 2, 55) : BV:32
57 : ite(3, 2, 56) : BV:32
58 : lambda(1, 57) : FUNCTION[BV:32 -> BV:32]
59 : sym_const(58) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 65535 ] -> true, [ 65536; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L2%7%bbentry.0.1
1 : ([ 0; 65535 ] -> true, [ 65536; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
2355205896
=counter_example_end
=global nodece 11 num_edges_traversed 3
=global nodece 11 nodece_visted_pcs: 
L2%7%bbentry_Lfor.cond%1%bbentry
=global nodece 12
=global nodece 12 nodece z3.ce362.num_edges_traversed4
=global nodece 12 nodece_path
=global nodece 12 nodece_path.graph_edge_composition
(epsilon)
=global nodece 12 nodece_cached_counterexample
=counter_example_begin z3.ce362 e58eced48cbcfbaed5bf9eeec7f32344
=input.spec-%var-x-1
1 : Lambda306Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 65535 { 0xffff +1.781238e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 65536 { 0x10000 +1.781250e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda307Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 2144336128 { 0x7fcff900 +1.62478637e128 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 3743546246 { 0xdf21fb86 -551421050 -1.26548838e63 } : BV:32
25 : eq(23, 24) : BOOL
26 : 207 { 0xcf -49 } : BV:8
27 : 1602813322 { 0x5f88fd8a +1.7023739e64 } : BV:32
28 : eq(23, 27) : BOOL
29 : 1 { 0x1 } : BV:8
30 : 3743546245 { 0xdf21fb85 -551421051 -1.26548826e63 } : BV:32
31 : eq(23, 30) : BOOL
32 : 249 { 0xf9 -7 } : BV:8
33 : 3743546247 { 0xdf21fb87 -551421049 -1.26548850e63 } : BV:32
34 : eq(23, 33) : BOOL
35 : 127 { 0x7f } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvadd(41, 21, 22) : BV:32
43 : eq(42, 24) : BOOL
44 : eq(42, 27) : BOOL
45 : eq(42, 30) : BOOL
46 : eq(42, 33) : BOOL
47 : ite(46, 35, 36) : BV:8
48 : ite(45, 32, 47) : BV:8
49 : ite(44, 29, 48) : BV:8
50 : ite(43, 26, 49) : BV:8
51 : 1 { 0x1 +1.11e129 } : BV:32
52 : bvadd(51, 21, 22) : BV:32
53 : eq(52, 24) : BOOL
54 : eq(52, 27) : BOOL
55 : eq(52, 30) : BOOL
56 : eq(52, 33) : BOOL
57 : ite(56, 35, 36) : BV:8
58 : ite(55, 32, 57) : BV:8
59 : ite(54, 29, 58) : BV:8
60 : ite(53, 26, 59) : BV:8
61 : bvadd(21, 22) : BV:32
62 : eq(61, 24) : BOOL
63 : eq(61, 27) : BOOL
64 : eq(61, 30) : BOOL
65 : eq(61, 33) : BOOL
66 : ite(65, 35, 36) : BV:8
67 : ite(64, 32, 66) : BV:8
68 : ite(63, 29, 67) : BV:8
69 : ite(62, 26, 68) : BV:8
70 : bvconcat(40, 50, 60, 69) : BV:32
71 : ite(18, 2, 70) : BV:32
72 : lambda(17, 71) : FUNCTION[BV:32 -> BV:32]
73 : map(16, 72) : MAP[BV:32 -> BV:32]
74 : sym_const(73) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry
1 : Lambda306Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 65535 { 0xffff +1.781238e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 65536 { 0x10000 +1.781250e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda307Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 2144336128 { 0x7fcff900 +1.62478637e128 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 3743546246 { 0xdf21fb86 -551421050 -1.26548838e63 } : BV:32
25 : eq(23, 24) : BOOL
26 : 207 { 0xcf -49 } : BV:8
27 : 1602813322 { 0x5f88fd8a +1.7023739e64 } : BV:32
28 : eq(23, 27) : BOOL
29 : 1 { 0x1 } : BV:8
30 : 3743546245 { 0xdf21fb85 -551421051 -1.26548826e63 } : BV:32
31 : eq(23, 30) : BOOL
32 : 249 { 0xf9 -7 } : BV:8
33 : 3743546247 { 0xdf21fb87 -551421049 -1.26548850e63 } : BV:32
34 : eq(23, 33) : BOOL
35 : 127 { 0x7f } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvadd(41, 21, 22) : BV:32
43 : eq(42, 24) : BOOL
44 : eq(42, 27) : BOOL
45 : eq(42, 30) : BOOL
46 : eq(42, 33) : BOOL
47 : ite(46, 35, 36) : BV:8
48 : ite(45, 32, 47) : BV:8
49 : ite(44, 29, 48) : BV:8
50 : ite(43, 26, 49) : BV:8
51 : 1 { 0x1 +1.11e129 } : BV:32
52 : bvadd(51, 21, 22) : BV:32
53 : eq(52, 24) : BOOL
54 : eq(52, 27) : BOOL
55 : eq(52, 30) : BOOL
56 : eq(52, 33) : BOOL
57 : ite(56, 35, 36) : BV:8
58 : ite(55, 32, 57) : BV:8
59 : ite(54, 29, 58) : BV:8
60 : ite(53, 26, 59) : BV:8
61 : bvadd(21, 22) : BV:32
62 : eq(61, 24) : BOOL
63 : eq(61, 27) : BOOL
64 : eq(61, 30) : BOOL
65 : eq(61, 33) : BOOL
66 : ite(65, 35, 36) : BV:8
67 : ite(64, 32, 66) : BV:8
68 : ite(63, 29, 67) : BV:8
69 : ite(62, 26, 68) : BV:8
70 : bvconcat(40, 50, 60, 69) : BV:32
71 : ite(18, 2, 70) : BV:32
72 : lambda(17, 71) : FUNCTION[BV:32 -> BV:32]
73 : map(16, 72) : MAP[BV:32 -> BV:32]
74 : sym_const(73) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 1602813321 ] -> 0, [ 1602813322; 1602813322 ] -> 1, [ 1602813323; 3743546244 ] -> 0, [ 3743546245; 3743546245 ] -> 249, [ 3743546246; 3743546246 ] -> 207, [ 3743546247; 3743546247 ] -> 127, [ 3743546248; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1602813319 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1602813320; 1602813323 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1602813324; 3743546243 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3743546244; 3743546247 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3743546248; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1602813320 { 0x5f88fd88 +1.7023715e64 } : BV:32
=input.dst.llvm-%n
1 : 65536 { 0x10000 +1.781250e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3743546244 { 0xdf21fb84 -551421052 -1.26548814e63 } : BV:32
=input.dst.llvm-%x
1 : 2144336128 { 0x7fcff900 +1.62478637e128 } : BV:32
=input.spec-%var-i-0.L2%7%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-ret-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-8.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1931841633 { 0x73259061 +1.29346859e103 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1602813320 { 0x5f88fd88 +1.7023715e64 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1602813323 { 0x5f88fd8b +1.7023751e64 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3743546244 { 0xdf21fb84 -551421052 -1.26548814e63 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3743546247 { 0xdf21fb87 -551421049 -1.26548850e63 } : BV:32
=input.spec-%var-x-1.1.1
1 : Lambda282Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 2144336128 { 0x7fcff900 +1.62478637e128 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 3743546246 { 0xdf21fb86 -551421050 -1.26548838e63 } : BV:32
10 : eq(8, 9) : BOOL
11 : 207 { 0xcf -49 } : BV:8
12 : 1602813322 { 0x5f88fd8a +1.7023739e64 } : BV:32
13 : eq(8, 12) : BOOL
14 : 1 { 0x1 } : BV:8
15 : 3743546245 { 0xdf21fb85 -551421051 -1.26548826e63 } : BV:32
16 : eq(8, 15) : BOOL
17 : 249 { 0xf9 -7 } : BV:8
18 : 3743546247 { 0xdf21fb87 -551421049 -1.26548850e63 } : BV:32
19 : eq(8, 18) : BOOL
20 : 127 { 0x7f } : BV:8
21 : 0 { 0x0 } : BV:8
22 : ite(19, 20, 21) : BV:8
23 : ite(16, 17, 22) : BV:8
24 : ite(13, 14, 23) : BV:8
25 : ite(10, 11, 24) : BV:8
26 : 2 { 0x2 +1.23e129 } : BV:32
27 : bvadd(26, 6, 7) : BV:32
28 : eq(27, 9) : BOOL
29 : eq(27, 12) : BOOL
30 : eq(27, 15) : BOOL
31 : eq(27, 18) : BOOL
32 : ite(31, 20, 21) : BV:8
33 : ite(30, 17, 32) : BV:8
34 : ite(29, 14, 33) : BV:8
35 : ite(28, 11, 34) : BV:8
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvadd(36, 6, 7) : BV:32
38 : eq(37, 9) : BOOL
39 : eq(37, 12) : BOOL
40 : eq(37, 15) : BOOL
41 : eq(37, 18) : BOOL
42 : ite(41, 20, 21) : BV:8
43 : ite(40, 17, 42) : BV:8
44 : ite(39, 14, 43) : BV:8
45 : ite(38, 11, 44) : BV:8
46 : bvadd(6, 7) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : eq(46, 15) : BOOL
50 : eq(46, 18) : BOOL
51 : ite(50, 20, 21) : BV:8
52 : ite(49, 17, 51) : BV:8
53 : ite(48, 14, 52) : BV:8
54 : ite(47, 11, 53) : BV:8
55 : bvconcat(25, 35, 45, 54) : BV:32
56 : ite(3, 2, 55) : BV:32
57 : lambda(1, 56) : FUNCTION[BV:32 -> BV:32]
58 : sym_const(57) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry.1.1
1 : Lambda283Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 2144336128 { 0x7fcff900 +1.62478637e128 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 3743546246 { 0xdf21fb86 -551421050 -1.26548838e63 } : BV:32
10 : eq(8, 9) : BOOL
11 : 207 { 0xcf -49 } : BV:8
12 : 1602813322 { 0x5f88fd8a +1.7023739e64 } : BV:32
13 : eq(8, 12) : BOOL
14 : 1 { 0x1 } : BV:8
15 : 3743546245 { 0xdf21fb85 -551421051 -1.26548826e63 } : BV:32
16 : eq(8, 15) : BOOL
17 : 249 { 0xf9 -7 } : BV:8
18 : 3743546247 { 0xdf21fb87 -551421049 -1.26548850e63 } : BV:32
19 : eq(8, 18) : BOOL
20 : 127 { 0x7f } : BV:8
21 : 0 { 0x0 } : BV:8
22 : ite(19, 20, 21) : BV:8
23 : ite(16, 17, 22) : BV:8
24 : ite(13, 14, 23) : BV:8
25 : ite(10, 11, 24) : BV:8
26 : 2 { 0x2 +1.23e129 } : BV:32
27 : bvadd(26, 6, 7) : BV:32
28 : eq(27, 9) : BOOL
29 : eq(27, 12) : BOOL
30 : eq(27, 15) : BOOL
31 : eq(27, 18) : BOOL
32 : ite(31, 20, 21) : BV:8
33 : ite(30, 17, 32) : BV:8
34 : ite(29, 14, 33) : BV:8
35 : ite(28, 11, 34) : BV:8
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvadd(36, 6, 7) : BV:32
38 : eq(37, 9) : BOOL
39 : eq(37, 12) : BOOL
40 : eq(37, 15) : BOOL
41 : eq(37, 18) : BOOL
42 : ite(41, 20, 21) : BV:8
43 : ite(40, 17, 42) : BV:8
44 : ite(39, 14, 43) : BV:8
45 : ite(38, 11, 44) : BV:8
46 : bvadd(6, 7) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : eq(46, 15) : BOOL
50 : eq(46, 18) : BOOL
51 : ite(50, 20, 21) : BV:8
52 : ite(49, 17, 51) : BV:8
53 : ite(48, 14, 52) : BV:8
54 : ite(47, 11, 53) : BV:8
55 : bvconcat(25, 35, 45, 54) : BV:32
56 : ite(3, 2, 55) : BV:32
57 : ite(3, 2, 56) : BV:32
58 : lambda(1, 57) : FUNCTION[BV:32 -> BV:32]
59 : sym_const(58) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 65535 ] -> true, [ 65536; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L2%7%bbentry.0.1
1 : ([ 0; 65535 ] -> true, [ 65536; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
2355205896
=counter_example_end
=global nodece 12 num_edges_traversed 4
=global nodece 12 nodece_visted_pcs: 
L2%7%bbentry_Lfor.cond%1%bbentry
=global nodece 13
=global nodece 13 nodece z3v487.ce307.num_edges_traversed2
=global nodece 13 nodece_path
=global nodece 13 nodece_path.graph_edge_composition
(epsilon)
=global nodece 13 nodece_cached_counterexample
=counter_example_begin z3v487.ce307 1886d870d01fb9853b8a67997c828da8
=input.spec-%var-x-1
1 : Lambda324Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda325Var : BV:32
17 : eq(16, 2) : BOOL
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 16) : BV:32
21 : bvadd(18, 20, 2) : BV:32
22 : 2052 { 0x804 +1.24461e129 } : BV:32
23 : eq(21, 22) : BOOL
24 : 1 { 0x1 } : BV:8
25 : 0 { 0x0 } : BV:8
26 : ite(23, 24, 25) : BV:8
27 : 2 { 0x2 +1.23e129 } : BV:32
28 : bvadd(27, 20, 2) : BV:32
29 : eq(28, 22) : BOOL
30 : ite(29, 24, 25) : BV:8
31 : bvadd(7, 20, 2) : BV:32
32 : eq(31, 22) : BOOL
33 : ite(32, 24, 25) : BV:8
34 : bvadd(20, 2) : BV:32
35 : eq(34, 22) : BOOL
36 : ite(35, 24, 25) : BV:8
37 : bvconcat(26, 30, 33, 36) : BV:32
38 : ite(17, 2, 37) : BV:32
39 : lambda(16, 38) : FUNCTION[BV:32 -> BV:32]
40 : map(15, 39) : MAP[BV:32 -> BV:32]
41 : sym_const(40) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry
1 : Lambda324Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda325Var : BV:32
17 : eq(16, 2) : BOOL
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 16) : BV:32
21 : bvadd(18, 20, 2) : BV:32
22 : 2052 { 0x804 +1.24461e129 } : BV:32
23 : eq(21, 22) : BOOL
24 : 1 { 0x1 } : BV:8
25 : 0 { 0x0 } : BV:8
26 : ite(23, 24, 25) : BV:8
27 : 2 { 0x2 +1.23e129 } : BV:32
28 : bvadd(27, 20, 2) : BV:32
29 : eq(28, 22) : BOOL
30 : ite(29, 24, 25) : BV:8
31 : bvadd(7, 20, 2) : BV:32
32 : eq(31, 22) : BOOL
33 : ite(32, 24, 25) : BV:8
34 : bvadd(20, 2) : BV:32
35 : eq(34, 22) : BOOL
36 : ite(35, 24, 25) : BV:8
37 : bvconcat(26, 30, 33, 36) : BV:32
38 : ite(17, 2, 37) : BV:32
39 : lambda(16, 38) : FUNCTION[BV:32 -> BV:32]
40 : map(15, 39) : MAP[BV:32 -> BV:32]
41 : sym_const(40) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 2051 ] -> 0, [ 2052; 2052 ] -> 1, [ 2053; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2051 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2052; 2055 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2056; 8255 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 8256; 8259 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 8260; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2052 { 0x804 +1.24461e129 } : BV:32
=input.dst.llvm-%n
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 8256 { 0x2040 +1.98419e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-ret-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-8.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 804139595 { 0x2fee324b +1.86090981e224 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2052 { 0x804 +1.24461e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2055 { 0x807 +1.24497e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 8256 { 0x2040 +1.98419e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 8259 { 0x2043 +1.98454e129 } : BV:32
=input.spec-%var-x-1.1.1
1 : Lambda289Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : bvadd(4, 6, 2) : BV:32
8 : 2052 { 0x804 +1.24461e129 } : BV:32
9 : eq(7, 8) : BOOL
10 : 1 { 0x1 } : BV:8
11 : 0 { 0x0 } : BV:8
12 : ite(9, 10, 11) : BV:8
13 : 2 { 0x2 +1.23e129 } : BV:32
14 : bvadd(13, 6, 2) : BV:32
15 : eq(14, 8) : BOOL
16 : ite(15, 10, 11) : BV:8
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : bvadd(17, 6, 2) : BV:32
19 : eq(18, 8) : BOOL
20 : ite(19, 10, 11) : BV:8
21 : bvadd(6, 2) : BV:32
22 : eq(21, 8) : BOOL
23 : ite(22, 10, 11) : BV:8
24 : bvconcat(12, 16, 20, 23) : BV:32
25 : ite(3, 2, 24) : BV:32
26 : lambda(1, 25) : FUNCTION[BV:32 -> BV:32]
27 : sym_const(26) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry.1.1
1 : Lambda290Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : bvadd(4, 6, 2) : BV:32
8 : 2052 { 0x804 +1.24461e129 } : BV:32
9 : eq(7, 8) : BOOL
10 : 1 { 0x1 } : BV:8
11 : 0 { 0x0 } : BV:8
12 : ite(9, 10, 11) : BV:8
13 : 2 { 0x2 +1.23e129 } : BV:32
14 : bvadd(13, 6, 2) : BV:32
15 : eq(14, 8) : BOOL
16 : ite(15, 10, 11) : BV:8
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : bvadd(17, 6, 2) : BV:32
19 : eq(18, 8) : BOOL
20 : ite(19, 10, 11) : BV:8
21 : bvadd(6, 2) : BV:32
22 : eq(21, 8) : BOOL
23 : ite(22, 10, 11) : BV:8
24 : bvconcat(12, 16, 20, 23) : BV:32
25 : ite(3, 2, 24) : BV:32
26 : ite(3, 2, 25) : BV:32
27 : lambda(1, 26) : FUNCTION[BV:32 -> BV:32]
28 : sym_const(27) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L2%7%bbentry.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
38490799
=counter_example_end
=global nodece 13 num_edges_traversed 2
=global nodece 13 nodece_visted_pcs: 
L2%7%bbentry_Lfor.cond%1%bbentry
=global nodece 14
=global nodece 14 nodece z3.ce297.num_edges_traversed2
=global nodece 14 nodece_path
=global nodece 14 nodece_path.graph_edge_composition
(epsilon)
=global nodece 14 nodece_cached_counterexample
=counter_example_begin z3.ce297 3c7a956fa6e3e506a1985cb93baaeb1
=input.spec-%var-x-1
1 : Lambda379Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda380Var : BV:32
17 : eq(16, 2) : BOOL
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 16) : BV:32
21 : 2815561984 { 0xa7d21100 -1479405312 -1.64114379e208 } : BV:32
22 : bvadd(18, 20, 21) : BV:32
23 : 1386226077 { 0x52a0219d +1.25102579e38 } : BV:32
24 : eq(22, 23) : BOOL
25 : 255 { 0xff -1 } : BV:8
26 : 1243678938 { 0x4a2108da +1.25808262e21 } : BV:32
27 : eq(22, 26) : BOOL
28 : 210 { 0xd2 -46 } : BV:8
29 : 1386226076 { 0x52a0219c +1.25102567e38 } : BV:32
30 : eq(22, 29) : BOOL
31 : 1386226079 { 0x52a0219f +1.25102603e38 } : BV:32
32 : eq(22, 31) : BOOL
33 : 1386226078 { 0x52a0219e +1.25102591e38 } : BV:32
34 : eq(22, 33) : BOOL
35 : 1243678937 { 0x4a2108d9 +1.25808250e21 } : BV:32
36 : eq(22, 35) : BOOL
37 : 17 { 0x11 } : BV:8
38 : 1243678939 { 0x4a2108db +1.25808274e21 } : BV:32
39 : eq(22, 38) : BOOL
40 : 167 { 0xa7 -89 } : BV:8
41 : 0 { 0x0 } : BV:8
42 : ite(39, 40, 41) : BV:8
43 : ite(36, 37, 42) : BV:8
44 : ite(34, 25, 43) : BV:8
45 : ite(32, 25, 44) : BV:8
46 : ite(30, 25, 45) : BV:8
47 : ite(27, 28, 46) : BV:8
48 : ite(24, 25, 47) : BV:8
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : bvadd(49, 20, 21) : BV:32
51 : eq(50, 23) : BOOL
52 : eq(50, 26) : BOOL
53 : eq(50, 29) : BOOL
54 : eq(50, 31) : BOOL
55 : eq(50, 33) : BOOL
56 : eq(50, 35) : BOOL
57 : eq(50, 38) : BOOL
58 : ite(57, 40, 41) : BV:8
59 : ite(56, 37, 58) : BV:8
60 : ite(55, 25, 59) : BV:8
61 : ite(54, 25, 60) : BV:8
62 : ite(53, 25, 61) : BV:8
63 : ite(52, 28, 62) : BV:8
64 : ite(51, 25, 63) : BV:8
65 : 1 { 0x1 +1.11e129 } : BV:32
66 : bvadd(65, 20, 21) : BV:32
67 : eq(66, 23) : BOOL
68 : eq(66, 26) : BOOL
69 : eq(66, 29) : BOOL
70 : eq(66, 31) : BOOL
71 : eq(66, 33) : BOOL
72 : eq(66, 35) : BOOL
73 : eq(66, 38) : BOOL
74 : ite(73, 40, 41) : BV:8
75 : ite(72, 37, 74) : BV:8
76 : ite(71, 25, 75) : BV:8
77 : ite(70, 25, 76) : BV:8
78 : ite(69, 25, 77) : BV:8
79 : ite(68, 28, 78) : BV:8
80 : ite(67, 25, 79) : BV:8
81 : bvadd(20, 21) : BV:32
82 : eq(81, 23) : BOOL
83 : eq(81, 26) : BOOL
84 : eq(81, 29) : BOOL
85 : eq(81, 31) : BOOL
86 : eq(81, 33) : BOOL
87 : eq(81, 35) : BOOL
88 : eq(81, 38) : BOOL
89 : ite(88, 40, 41) : BV:8
90 : ite(87, 37, 89) : BV:8
91 : ite(86, 25, 90) : BV:8
92 : ite(85, 25, 91) : BV:8
93 : ite(84, 25, 92) : BV:8
94 : ite(83, 28, 93) : BV:8
95 : ite(82, 25, 94) : BV:8
96 : bvconcat(48, 64, 80, 95) : BV:32
97 : ite(17, 2, 96) : BV:32
98 : lambda(16, 97) : FUNCTION[BV:32 -> BV:32]
99 : map(15, 98) : MAP[BV:32 -> BV:32]
100 : sym_const(99) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry
1 : Lambda379Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda380Var : BV:32
17 : eq(16, 2) : BOOL
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 16) : BV:32
21 : 2815561984 { 0xa7d21100 -1479405312 -1.64114379e208 } : BV:32
22 : bvadd(18, 20, 21) : BV:32
23 : 1386226077 { 0x52a0219d +1.25102579e38 } : BV:32
24 : eq(22, 23) : BOOL
25 : 255 { 0xff -1 } : BV:8
26 : 1243678938 { 0x4a2108da +1.25808262e21 } : BV:32
27 : eq(22, 26) : BOOL
28 : 210 { 0xd2 -46 } : BV:8
29 : 1386226076 { 0x52a0219c +1.25102567e38 } : BV:32
30 : eq(22, 29) : BOOL
31 : 1386226079 { 0x52a0219f +1.25102603e38 } : BV:32
32 : eq(22, 31) : BOOL
33 : 1386226078 { 0x52a0219e +1.25102591e38 } : BV:32
34 : eq(22, 33) : BOOL
35 : 1243678937 { 0x4a2108d9 +1.25808250e21 } : BV:32
36 : eq(22, 35) : BOOL
37 : 17 { 0x11 } : BV:8
38 : 1243678939 { 0x4a2108db +1.25808274e21 } : BV:32
39 : eq(22, 38) : BOOL
40 : 167 { 0xa7 -89 } : BV:8
41 : 0 { 0x0 } : BV:8
42 : ite(39, 40, 41) : BV:8
43 : ite(36, 37, 42) : BV:8
44 : ite(34, 25, 43) : BV:8
45 : ite(32, 25, 44) : BV:8
46 : ite(30, 25, 45) : BV:8
47 : ite(27, 28, 46) : BV:8
48 : ite(24, 25, 47) : BV:8
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : bvadd(49, 20, 21) : BV:32
51 : eq(50, 23) : BOOL
52 : eq(50, 26) : BOOL
53 : eq(50, 29) : BOOL
54 : eq(50, 31) : BOOL
55 : eq(50, 33) : BOOL
56 : eq(50, 35) : BOOL
57 : eq(50, 38) : BOOL
58 : ite(57, 40, 41) : BV:8
59 : ite(56, 37, 58) : BV:8
60 : ite(55, 25, 59) : BV:8
61 : ite(54, 25, 60) : BV:8
62 : ite(53, 25, 61) : BV:8
63 : ite(52, 28, 62) : BV:8
64 : ite(51, 25, 63) : BV:8
65 : 1 { 0x1 +1.11e129 } : BV:32
66 : bvadd(65, 20, 21) : BV:32
67 : eq(66, 23) : BOOL
68 : eq(66, 26) : BOOL
69 : eq(66, 29) : BOOL
70 : eq(66, 31) : BOOL
71 : eq(66, 33) : BOOL
72 : eq(66, 35) : BOOL
73 : eq(66, 38) : BOOL
74 : ite(73, 40, 41) : BV:8
75 : ite(72, 37, 74) : BV:8
76 : ite(71, 25, 75) : BV:8
77 : ite(70, 25, 76) : BV:8
78 : ite(69, 25, 77) : BV:8
79 : ite(68, 28, 78) : BV:8
80 : ite(67, 25, 79) : BV:8
81 : bvadd(20, 21) : BV:32
82 : eq(81, 23) : BOOL
83 : eq(81, 26) : BOOL
84 : eq(81, 29) : BOOL
85 : eq(81, 31) : BOOL
86 : eq(81, 33) : BOOL
87 : eq(81, 35) : BOOL
88 : eq(81, 38) : BOOL
89 : ite(88, 40, 41) : BV:8
90 : ite(87, 37, 89) : BV:8
91 : ite(86, 25, 90) : BV:8
92 : ite(85, 25, 91) : BV:8
93 : ite(84, 25, 92) : BV:8
94 : ite(83, 28, 93) : BV:8
95 : ite(82, 25, 94) : BV:8
96 : bvconcat(48, 64, 80, 95) : BV:32
97 : ite(17, 2, 96) : BV:32
98 : lambda(16, 97) : FUNCTION[BV:32 -> BV:32]
99 : map(15, 98) : MAP[BV:32 -> BV:32]
100 : sym_const(99) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 1243678936 ] -> 0, [ 1243678937; 1243678937 ] -> 17, [ 1243678938; 1243678938 ] -> 210, [ 1243678939; 1243678939 ] -> 167, [ 1243678940; 1386226075 ] -> 0, [ 1386226076; 1386226079 ] -> 255, [ 1386226080; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1243678935 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1243678936; 1243678939 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1243678940; 1386226075 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1386226076; 1386226079 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1386226080; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1386226076 { 0x52a0219c +1.25102567e38 } : BV:32
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1243678936 { 0x4a2108d8 +1.25808238e21 } : BV:32
=input.dst.llvm-%x
1 : 2815561984 { 0xa7d21100 -1479405312 -1.64114379e208 } : BV:32
=input.spec-%var-i-0.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-ret-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-8.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 136169254 { 0x81dc726 +1.23264002e145 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1386226076 { 0x52a0219c +1.25102567e38 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1386226079 { 0x52a0219f +1.25102603e38 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1243678936 { 0x4a2108d8 +1.25808238e21 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1243678939 { 0x4a2108db +1.25808274e21 } : BV:32
=input.spec-%var-x-1.1.1
1 : Lambda355Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 2815561984 { 0xa7d21100 -1479405312 -1.64114379e208 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 1386226077 { 0x52a0219d +1.25102579e38 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 1243678938 { 0x4a2108da +1.25808262e21 } : BV:32
13 : eq(8, 12) : BOOL
14 : 210 { 0xd2 -46 } : BV:8
15 : 1386226076 { 0x52a0219c +1.25102567e38 } : BV:32
16 : eq(8, 15) : BOOL
17 : 1386226079 { 0x52a0219f +1.25102603e38 } : BV:32
18 : eq(8, 17) : BOOL
19 : 1386226078 { 0x52a0219e +1.25102591e38 } : BV:32
20 : eq(8, 19) : BOOL
21 : 1243678937 { 0x4a2108d9 +1.25808250e21 } : BV:32
22 : eq(8, 21) : BOOL
23 : 17 { 0x11 } : BV:8
24 : 1243678939 { 0x4a2108db +1.25808274e21 } : BV:32
25 : eq(8, 24) : BOOL
26 : 167 { 0xa7 -89 } : BV:8
27 : 0 { 0x0 } : BV:8
28 : ite(25, 26, 27) : BV:8
29 : ite(22, 23, 28) : BV:8
30 : ite(20, 11, 29) : BV:8
31 : ite(18, 11, 30) : BV:8
32 : ite(16, 11, 31) : BV:8
33 : ite(13, 14, 32) : BV:8
34 : ite(10, 11, 33) : BV:8
35 : 2 { 0x2 +1.23e129 } : BV:32
36 : bvadd(35, 6, 7) : BV:32
37 : eq(36, 9) : BOOL
38 : eq(36, 12) : BOOL
39 : eq(36, 15) : BOOL
40 : eq(36, 17) : BOOL
41 : eq(36, 19) : BOOL
42 : eq(36, 21) : BOOL
43 : eq(36, 24) : BOOL
44 : ite(43, 26, 27) : BV:8
45 : ite(42, 23, 44) : BV:8
46 : ite(41, 11, 45) : BV:8
47 : ite(40, 11, 46) : BV:8
48 : ite(39, 11, 47) : BV:8
49 : ite(38, 14, 48) : BV:8
50 : ite(37, 11, 49) : BV:8
51 : 1 { 0x1 +1.11e129 } : BV:32
52 : bvadd(51, 6, 7) : BV:32
53 : eq(52, 9) : BOOL
54 : eq(52, 12) : BOOL
55 : eq(52, 15) : BOOL
56 : eq(52, 17) : BOOL
57 : eq(52, 19) : BOOL
58 : eq(52, 21) : BOOL
59 : eq(52, 24) : BOOL
60 : ite(59, 26, 27) : BV:8
61 : ite(58, 23, 60) : BV:8
62 : ite(57, 11, 61) : BV:8
63 : ite(56, 11, 62) : BV:8
64 : ite(55, 11, 63) : BV:8
65 : ite(54, 14, 64) : BV:8
66 : ite(53, 11, 65) : BV:8
67 : bvadd(6, 7) : BV:32
68 : eq(67, 9) : BOOL
69 : eq(67, 12) : BOOL
70 : eq(67, 15) : BOOL
71 : eq(67, 17) : BOOL
72 : eq(67, 19) : BOOL
73 : eq(67, 21) : BOOL
74 : eq(67, 24) : BOOL
75 : ite(74, 26, 27) : BV:8
76 : ite(73, 23, 75) : BV:8
77 : ite(72, 11, 76) : BV:8
78 : ite(71, 11, 77) : BV:8
79 : ite(70, 11, 78) : BV:8
80 : ite(69, 14, 79) : BV:8
81 : ite(68, 11, 80) : BV:8
82 : bvconcat(34, 50, 66, 81) : BV:32
83 : ite(3, 2, 82) : BV:32
84 : lambda(1, 83) : FUNCTION[BV:32 -> BV:32]
85 : sym_const(84) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry.1.1
1 : Lambda356Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 2815561984 { 0xa7d21100 -1479405312 -1.64114379e208 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 1386226077 { 0x52a0219d +1.25102579e38 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 1243678938 { 0x4a2108da +1.25808262e21 } : BV:32
13 : eq(8, 12) : BOOL
14 : 210 { 0xd2 -46 } : BV:8
15 : 1386226076 { 0x52a0219c +1.25102567e38 } : BV:32
16 : eq(8, 15) : BOOL
17 : 1386226079 { 0x52a0219f +1.25102603e38 } : BV:32
18 : eq(8, 17) : BOOL
19 : 1386226078 { 0x52a0219e +1.25102591e38 } : BV:32
20 : eq(8, 19) : BOOL
21 : 1243678937 { 0x4a2108d9 +1.25808250e21 } : BV:32
22 : eq(8, 21) : BOOL
23 : 17 { 0x11 } : BV:8
24 : 1243678939 { 0x4a2108db +1.25808274e21 } : BV:32
25 : eq(8, 24) : BOOL
26 : 167 { 0xa7 -89 } : BV:8
27 : 0 { 0x0 } : BV:8
28 : ite(25, 26, 27) : BV:8
29 : ite(22, 23, 28) : BV:8
30 : ite(20, 11, 29) : BV:8
31 : ite(18, 11, 30) : BV:8
32 : ite(16, 11, 31) : BV:8
33 : ite(13, 14, 32) : BV:8
34 : ite(10, 11, 33) : BV:8
35 : 2 { 0x2 +1.23e129 } : BV:32
36 : bvadd(35, 6, 7) : BV:32
37 : eq(36, 9) : BOOL
38 : eq(36, 12) : BOOL
39 : eq(36, 15) : BOOL
40 : eq(36, 17) : BOOL
41 : eq(36, 19) : BOOL
42 : eq(36, 21) : BOOL
43 : eq(36, 24) : BOOL
44 : ite(43, 26, 27) : BV:8
45 : ite(42, 23, 44) : BV:8
46 : ite(41, 11, 45) : BV:8
47 : ite(40, 11, 46) : BV:8
48 : ite(39, 11, 47) : BV:8
49 : ite(38, 14, 48) : BV:8
50 : ite(37, 11, 49) : BV:8
51 : 1 { 0x1 +1.11e129 } : BV:32
52 : bvadd(51, 6, 7) : BV:32
53 : eq(52, 9) : BOOL
54 : eq(52, 12) : BOOL
55 : eq(52, 15) : BOOL
56 : eq(52, 17) : BOOL
57 : eq(52, 19) : BOOL
58 : eq(52, 21) : BOOL
59 : eq(52, 24) : BOOL
60 : ite(59, 26, 27) : BV:8
61 : ite(58, 23, 60) : BV:8
62 : ite(57, 11, 61) : BV:8
63 : ite(56, 11, 62) : BV:8
64 : ite(55, 11, 63) : BV:8
65 : ite(54, 14, 64) : BV:8
66 : ite(53, 11, 65) : BV:8
67 : bvadd(6, 7) : BV:32
68 : eq(67, 9) : BOOL
69 : eq(67, 12) : BOOL
70 : eq(67, 15) : BOOL
71 : eq(67, 17) : BOOL
72 : eq(67, 19) : BOOL
73 : eq(67, 21) : BOOL
74 : eq(67, 24) : BOOL
75 : ite(74, 26, 27) : BV:8
76 : ite(73, 23, 75) : BV:8
77 : ite(72, 11, 76) : BV:8
78 : ite(71, 11, 77) : BV:8
79 : ite(70, 11, 78) : BV:8
80 : ite(69, 14, 79) : BV:8
81 : ite(68, 11, 80) : BV:8
82 : bvconcat(34, 50, 66, 81) : BV:32
83 : ite(3, 2, 82) : BV:32
84 : ite(3, 2, 83) : BV:32
85 : lambda(1, 84) : FUNCTION[BV:32 -> BV:32]
86 : sym_const(85) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L2%7%bbentry.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
1059486311
=counter_example_end
=global nodece 14 num_edges_traversed 2
=global nodece 14 nodece_visted_pcs: 
L2%7%bbentry_Lfor.cond%1%bbentry
=global nodece 15
=global nodece 15 nodece z3.ce287.num_edges_traversed2
=global nodece 15 nodece_path
=global nodece 15 nodece_path.graph_edge_composition
(epsilon)
=global nodece 15 nodece_cached_counterexample
=counter_example_begin z3.ce287 4d26e38bf533858ca4b2f154104873
=input.spec-%var-x-1
1 : Lambda452Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda453Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 4292853248 { 0xffdfbe00 -2114048 -1.74798583e128 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 3125809193 { 0xba501029 -1169158103 -1.62549316e245 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 3125809192 { 0xba501028 -1169158104 -1.62549304e245 } : BV:32
28 : eq(23, 27) : BOOL
29 : 4292853251 { 0xffdfbe03 -2114045 -1.74798619e128 } : BV:32
30 : eq(23, 29) : BOOL
31 : 3125809195 { 0xba50102b -1169158101 -1.62549340e245 } : BV:32
32 : eq(23, 31) : BOOL
33 : 128 { 0x80 -128 } : BV:8
34 : 4292853249 { 0xffdfbe01 -2114047 -1.74798595e128 } : BV:32
35 : eq(23, 34) : BOOL
36 : 3125809194 { 0xba50102a -1169158102 -1.62549328e245 } : BV:32
37 : eq(23, 36) : BOOL
38 : 2992738457 { 0xb2619099 -1302228839 -1.76222527e229 } : BV:32
39 : eq(23, 38) : BOOL
40 : 190 { 0xbe -66 } : BV:8
41 : 4292853250 { 0xffdfbe02 -2114046 -1.74798607e128 } : BV:32
42 : eq(23, 41) : BOOL
43 : eq(23, 22) : BOOL
44 : 2992738459 { 0xb261909b -1302228837 -1.76222550e229 } : BV:32
45 : eq(23, 44) : BOOL
46 : 255 { 0xff -1 } : BV:8
47 : 2992738456 { 0xb2619098 -1302228840 -1.76222515e229 } : BV:32
48 : eq(23, 47) : BOOL
49 : 223 { 0xdf -33 } : BV:8
50 : ite(48, 26, 49) : BV:8
51 : ite(45, 46, 50) : BV:8
52 : ite(43, 26, 51) : BV:8
53 : ite(42, 26, 52) : BV:8
54 : ite(39, 40, 53) : BV:8
55 : ite(37, 26, 54) : BV:8
56 : ite(35, 26, 55) : BV:8
57 : ite(32, 33, 56) : BV:8
58 : ite(30, 26, 57) : BV:8
59 : ite(28, 26, 58) : BV:8
60 : ite(25, 26, 59) : BV:8
61 : 2 { 0x2 +1.23e129 } : BV:32
62 : bvadd(61, 21, 22) : BV:32
63 : eq(62, 24) : BOOL
64 : eq(62, 27) : BOOL
65 : eq(62, 29) : BOOL
66 : eq(62, 31) : BOOL
67 : eq(62, 34) : BOOL
68 : eq(62, 36) : BOOL
69 : eq(62, 38) : BOOL
70 : eq(62, 41) : BOOL
71 : eq(62, 22) : BOOL
72 : eq(62, 44) : BOOL
73 : eq(62, 47) : BOOL
74 : ite(73, 26, 49) : BV:8
75 : ite(72, 46, 74) : BV:8
76 : ite(71, 26, 75) : BV:8
77 : ite(70, 26, 76) : BV:8
78 : ite(69, 40, 77) : BV:8
79 : ite(68, 26, 78) : BV:8
80 : ite(67, 26, 79) : BV:8
81 : ite(66, 33, 80) : BV:8
82 : ite(65, 26, 81) : BV:8
83 : ite(64, 26, 82) : BV:8
84 : ite(63, 26, 83) : BV:8
85 : 1 { 0x1 +1.11e129 } : BV:32
86 : bvadd(85, 21, 22) : BV:32
87 : eq(86, 24) : BOOL
88 : eq(86, 27) : BOOL
89 : eq(86, 29) : BOOL
90 : eq(86, 31) : BOOL
91 : eq(86, 34) : BOOL
92 : eq(86, 36) : BOOL
93 : eq(86, 38) : BOOL
94 : eq(86, 41) : BOOL
95 : eq(86, 22) : BOOL
96 : eq(86, 44) : BOOL
97 : eq(86, 47) : BOOL
98 : ite(97, 26, 49) : BV:8
99 : ite(96, 46, 98) : BV:8
100 : ite(95, 26, 99) : BV:8
101 : ite(94, 26, 100) : BV:8
102 : ite(93, 40, 101) : BV:8
103 : ite(92, 26, 102) : BV:8
104 : ite(91, 26, 103) : BV:8
105 : ite(90, 33, 104) : BV:8
106 : ite(89, 26, 105) : BV:8
107 : ite(88, 26, 106) : BV:8
108 : ite(87, 26, 107) : BV:8
109 : bvadd(21, 22) : BV:32
110 : eq(109, 24) : BOOL
111 : eq(109, 27) : BOOL
112 : eq(109, 29) : BOOL
113 : eq(109, 31) : BOOL
114 : eq(109, 34) : BOOL
115 : eq(109, 36) : BOOL
116 : eq(109, 38) : BOOL
117 : eq(109, 41) : BOOL
118 : eq(109, 22) : BOOL
119 : eq(109, 44) : BOOL
120 : eq(109, 47) : BOOL
121 : ite(120, 26, 49) : BV:8
122 : ite(119, 46, 121) : BV:8
123 : ite(118, 26, 122) : BV:8
124 : ite(117, 26, 123) : BV:8
125 : ite(116, 40, 124) : BV:8
126 : ite(115, 26, 125) : BV:8
127 : ite(114, 26, 126) : BV:8
128 : ite(113, 33, 127) : BV:8
129 : ite(112, 26, 128) : BV:8
130 : ite(111, 26, 129) : BV:8
131 : ite(110, 26, 130) : BV:8
132 : bvconcat(60, 84, 108, 131) : BV:32
133 : ite(18, 2, 132) : BV:32
134 : lambda(17, 133) : FUNCTION[BV:32 -> BV:32]
135 : map(16, 134) : MAP[BV:32 -> BV:32]
136 : sym_const(135) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry
1 : Lambda452Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda453Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 4292853248 { 0xffdfbe00 -2114048 -1.74798583e128 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 3125809193 { 0xba501029 -1169158103 -1.62549316e245 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 3125809192 { 0xba501028 -1169158104 -1.62549304e245 } : BV:32
28 : eq(23, 27) : BOOL
29 : 4292853251 { 0xffdfbe03 -2114045 -1.74798619e128 } : BV:32
30 : eq(23, 29) : BOOL
31 : 3125809195 { 0xba50102b -1169158101 -1.62549340e245 } : BV:32
32 : eq(23, 31) : BOOL
33 : 128 { 0x80 -128 } : BV:8
34 : 4292853249 { 0xffdfbe01 -2114047 -1.74798595e128 } : BV:32
35 : eq(23, 34) : BOOL
36 : 3125809194 { 0xba50102a -1169158102 -1.62549328e245 } : BV:32
37 : eq(23, 36) : BOOL
38 : 2992738457 { 0xb2619099 -1302228839 -1.76222527e229 } : BV:32
39 : eq(23, 38) : BOOL
40 : 190 { 0xbe -66 } : BV:8
41 : 4292853250 { 0xffdfbe02 -2114046 -1.74798607e128 } : BV:32
42 : eq(23, 41) : BOOL
43 : eq(23, 22) : BOOL
44 : 2992738459 { 0xb261909b -1302228837 -1.76222550e229 } : BV:32
45 : eq(23, 44) : BOOL
46 : 255 { 0xff -1 } : BV:8
47 : 2992738456 { 0xb2619098 -1302228840 -1.76222515e229 } : BV:32
48 : eq(23, 47) : BOOL
49 : 223 { 0xdf -33 } : BV:8
50 : ite(48, 26, 49) : BV:8
51 : ite(45, 46, 50) : BV:8
52 : ite(43, 26, 51) : BV:8
53 : ite(42, 26, 52) : BV:8
54 : ite(39, 40, 53) : BV:8
55 : ite(37, 26, 54) : BV:8
56 : ite(35, 26, 55) : BV:8
57 : ite(32, 33, 56) : BV:8
58 : ite(30, 26, 57) : BV:8
59 : ite(28, 26, 58) : BV:8
60 : ite(25, 26, 59) : BV:8
61 : 2 { 0x2 +1.23e129 } : BV:32
62 : bvadd(61, 21, 22) : BV:32
63 : eq(62, 24) : BOOL
64 : eq(62, 27) : BOOL
65 : eq(62, 29) : BOOL
66 : eq(62, 31) : BOOL
67 : eq(62, 34) : BOOL
68 : eq(62, 36) : BOOL
69 : eq(62, 38) : BOOL
70 : eq(62, 41) : BOOL
71 : eq(62, 22) : BOOL
72 : eq(62, 44) : BOOL
73 : eq(62, 47) : BOOL
74 : ite(73, 26, 49) : BV:8
75 : ite(72, 46, 74) : BV:8
76 : ite(71, 26, 75) : BV:8
77 : ite(70, 26, 76) : BV:8
78 : ite(69, 40, 77) : BV:8
79 : ite(68, 26, 78) : BV:8
80 : ite(67, 26, 79) : BV:8
81 : ite(66, 33, 80) : BV:8
82 : ite(65, 26, 81) : BV:8
83 : ite(64, 26, 82) : BV:8
84 : ite(63, 26, 83) : BV:8
85 : 1 { 0x1 +1.11e129 } : BV:32
86 : bvadd(85, 21, 22) : BV:32
87 : eq(86, 24) : BOOL
88 : eq(86, 27) : BOOL
89 : eq(86, 29) : BOOL
90 : eq(86, 31) : BOOL
91 : eq(86, 34) : BOOL
92 : eq(86, 36) : BOOL
93 : eq(86, 38) : BOOL
94 : eq(86, 41) : BOOL
95 : eq(86, 22) : BOOL
96 : eq(86, 44) : BOOL
97 : eq(86, 47) : BOOL
98 : ite(97, 26, 49) : BV:8
99 : ite(96, 46, 98) : BV:8
100 : ite(95, 26, 99) : BV:8
101 : ite(94, 26, 100) : BV:8
102 : ite(93, 40, 101) : BV:8
103 : ite(92, 26, 102) : BV:8
104 : ite(91, 26, 103) : BV:8
105 : ite(90, 33, 104) : BV:8
106 : ite(89, 26, 105) : BV:8
107 : ite(88, 26, 106) : BV:8
108 : ite(87, 26, 107) : BV:8
109 : bvadd(21, 22) : BV:32
110 : eq(109, 24) : BOOL
111 : eq(109, 27) : BOOL
112 : eq(109, 29) : BOOL
113 : eq(109, 31) : BOOL
114 : eq(109, 34) : BOOL
115 : eq(109, 36) : BOOL
116 : eq(109, 38) : BOOL
117 : eq(109, 41) : BOOL
118 : eq(109, 22) : BOOL
119 : eq(109, 44) : BOOL
120 : eq(109, 47) : BOOL
121 : ite(120, 26, 49) : BV:8
122 : ite(119, 46, 121) : BV:8
123 : ite(118, 26, 122) : BV:8
124 : ite(117, 26, 123) : BV:8
125 : ite(116, 40, 124) : BV:8
126 : ite(115, 26, 125) : BV:8
127 : ite(114, 26, 126) : BV:8
128 : ite(113, 33, 127) : BV:8
129 : ite(112, 26, 128) : BV:8
130 : ite(111, 26, 129) : BV:8
131 : ite(110, 26, 130) : BV:8
132 : bvconcat(60, 84, 108, 131) : BV:32
133 : ite(18, 2, 132) : BV:32
134 : lambda(17, 133) : FUNCTION[BV:32 -> BV:32]
135 : map(16, 134) : MAP[BV:32 -> BV:32]
136 : sym_const(135) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 2992738455 ] -> 223, [ 2992738456; 2992738456 ] -> 0, [ 2992738457; 2992738457 ] -> 190, [ 2992738458; 2992738458 ] -> 223, [ 2992738459; 2992738459 ] -> 255, [ 2992738460; 3125809191 ] -> 223, [ 3125809192; 3125809194 ] -> 0, [ 3125809195; 3125809195 ] -> 128, [ 3125809196; 4292853247 ] -> 223, [ 4292853248; 4292853251 ] -> 0, [ 4292853252; 4294967295 ] -> 223, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2992738455 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2992738456; 2992738459 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2992738460; 3125809191 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3125809192; 3125809195 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3125809196; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3125809192 { 0xba501028 -1169158104 -1.62549304e245 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2992738456 { 0xb2619098 -1302228840 -1.76222515e229 } : BV:32
=input.dst.llvm-%x
1 : 4292853248 { 0xffdfbe00 -2114048 -1.74798583e128 } : BV:32
=input.spec-%var-i-0.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-ret-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-8.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1242967190 { 0x4a162c96 +1.17323565e21 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3125809192 { 0xba501028 -1169158104 -1.62549304e245 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3125809195 { 0xba50102b -1169158101 -1.62549340e245 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2992738456 { 0xb2619098 -1302228840 -1.76222515e229 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2992738459 { 0xb261909b -1302228837 -1.76222550e229 } : BV:32
=input.spec-%var-x-1.1.1
1 : Lambda428Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 4292853248 { 0xffdfbe00 -2114048 -1.74798583e128 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 3125809193 { 0xba501029 -1169158103 -1.62549316e245 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 3125809192 { 0xba501028 -1169158104 -1.62549304e245 } : BV:32
13 : eq(8, 12) : BOOL
14 : 4292853251 { 0xffdfbe03 -2114045 -1.74798619e128 } : BV:32
15 : eq(8, 14) : BOOL
16 : 3125809195 { 0xba50102b -1169158101 -1.62549340e245 } : BV:32
17 : eq(8, 16) : BOOL
18 : 128 { 0x80 -128 } : BV:8
19 : 4292853249 { 0xffdfbe01 -2114047 -1.74798595e128 } : BV:32
20 : eq(8, 19) : BOOL
21 : 3125809194 { 0xba50102a -1169158102 -1.62549328e245 } : BV:32
22 : eq(8, 21) : BOOL
23 : 2992738457 { 0xb2619099 -1302228839 -1.76222527e229 } : BV:32
24 : eq(8, 23) : BOOL
25 : 190 { 0xbe -66 } : BV:8
26 : 4292853250 { 0xffdfbe02 -2114046 -1.74798607e128 } : BV:32
27 : eq(8, 26) : BOOL
28 : eq(8, 7) : BOOL
29 : 2992738459 { 0xb261909b -1302228837 -1.76222550e229 } : BV:32
30 : eq(8, 29) : BOOL
31 : 255 { 0xff -1 } : BV:8
32 : 2992738456 { 0xb2619098 -1302228840 -1.76222515e229 } : BV:32
33 : eq(8, 32) : BOOL
34 : 223 { 0xdf -33 } : BV:8
35 : ite(33, 11, 34) : BV:8
36 : ite(30, 31, 35) : BV:8
37 : ite(28, 11, 36) : BV:8
38 : ite(27, 11, 37) : BV:8
39 : ite(24, 25, 38) : BV:8
40 : ite(22, 11, 39) : BV:8
41 : ite(20, 11, 40) : BV:8
42 : ite(17, 18, 41) : BV:8
43 : ite(15, 11, 42) : BV:8
44 : ite(13, 11, 43) : BV:8
45 : ite(10, 11, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 6, 7) : BV:32
48 : eq(47, 9) : BOOL
49 : eq(47, 12) : BOOL
50 : eq(47, 14) : BOOL
51 : eq(47, 16) : BOOL
52 : eq(47, 19) : BOOL
53 : eq(47, 21) : BOOL
54 : eq(47, 23) : BOOL
55 : eq(47, 26) : BOOL
56 : eq(47, 7) : BOOL
57 : eq(47, 29) : BOOL
58 : eq(47, 32) : BOOL
59 : ite(58, 11, 34) : BV:8
60 : ite(57, 31, 59) : BV:8
61 : ite(56, 11, 60) : BV:8
62 : ite(55, 11, 61) : BV:8
63 : ite(54, 25, 62) : BV:8
64 : ite(53, 11, 63) : BV:8
65 : ite(52, 11, 64) : BV:8
66 : ite(51, 18, 65) : BV:8
67 : ite(50, 11, 66) : BV:8
68 : ite(49, 11, 67) : BV:8
69 : ite(48, 11, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 6, 7) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : eq(71, 19) : BOOL
77 : eq(71, 21) : BOOL
78 : eq(71, 23) : BOOL
79 : eq(71, 26) : BOOL
80 : eq(71, 7) : BOOL
81 : eq(71, 29) : BOOL
82 : eq(71, 32) : BOOL
83 : ite(82, 11, 34) : BV:8
84 : ite(81, 31, 83) : BV:8
85 : ite(80, 11, 84) : BV:8
86 : ite(79, 11, 85) : BV:8
87 : ite(78, 25, 86) : BV:8
88 : ite(77, 11, 87) : BV:8
89 : ite(76, 11, 88) : BV:8
90 : ite(75, 18, 89) : BV:8
91 : ite(74, 11, 90) : BV:8
92 : ite(73, 11, 91) : BV:8
93 : ite(72, 11, 92) : BV:8
94 : bvadd(6, 7) : BV:32
95 : eq(94, 9) : BOOL
96 : eq(94, 12) : BOOL
97 : eq(94, 14) : BOOL
98 : eq(94, 16) : BOOL
99 : eq(94, 19) : BOOL
100 : eq(94, 21) : BOOL
101 : eq(94, 23) : BOOL
102 : eq(94, 26) : BOOL
103 : eq(94, 7) : BOOL
104 : eq(94, 29) : BOOL
105 : eq(94, 32) : BOOL
106 : ite(105, 11, 34) : BV:8
107 : ite(104, 31, 106) : BV:8
108 : ite(103, 11, 107) : BV:8
109 : ite(102, 11, 108) : BV:8
110 : ite(101, 25, 109) : BV:8
111 : ite(100, 11, 110) : BV:8
112 : ite(99, 11, 111) : BV:8
113 : ite(98, 18, 112) : BV:8
114 : ite(97, 11, 113) : BV:8
115 : ite(96, 11, 114) : BV:8
116 : ite(95, 11, 115) : BV:8
117 : bvconcat(45, 69, 93, 116) : BV:32
118 : ite(3, 2, 117) : BV:32
119 : lambda(1, 118) : FUNCTION[BV:32 -> BV:32]
120 : sym_const(119) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry.1.1
1 : Lambda429Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 4292853248 { 0xffdfbe00 -2114048 -1.74798583e128 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 3125809193 { 0xba501029 -1169158103 -1.62549316e245 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 3125809192 { 0xba501028 -1169158104 -1.62549304e245 } : BV:32
13 : eq(8, 12) : BOOL
14 : 4292853251 { 0xffdfbe03 -2114045 -1.74798619e128 } : BV:32
15 : eq(8, 14) : BOOL
16 : 3125809195 { 0xba50102b -1169158101 -1.62549340e245 } : BV:32
17 : eq(8, 16) : BOOL
18 : 128 { 0x80 -128 } : BV:8
19 : 4292853249 { 0xffdfbe01 -2114047 -1.74798595e128 } : BV:32
20 : eq(8, 19) : BOOL
21 : 3125809194 { 0xba50102a -1169158102 -1.62549328e245 } : BV:32
22 : eq(8, 21) : BOOL
23 : 2992738457 { 0xb2619099 -1302228839 -1.76222527e229 } : BV:32
24 : eq(8, 23) : BOOL
25 : 190 { 0xbe -66 } : BV:8
26 : 4292853250 { 0xffdfbe02 -2114046 -1.74798607e128 } : BV:32
27 : eq(8, 26) : BOOL
28 : eq(8, 7) : BOOL
29 : 2992738459 { 0xb261909b -1302228837 -1.76222550e229 } : BV:32
30 : eq(8, 29) : BOOL
31 : 255 { 0xff -1 } : BV:8
32 : 2992738456 { 0xb2619098 -1302228840 -1.76222515e229 } : BV:32
33 : eq(8, 32) : BOOL
34 : 223 { 0xdf -33 } : BV:8
35 : ite(33, 11, 34) : BV:8
36 : ite(30, 31, 35) : BV:8
37 : ite(28, 11, 36) : BV:8
38 : ite(27, 11, 37) : BV:8
39 : ite(24, 25, 38) : BV:8
40 : ite(22, 11, 39) : BV:8
41 : ite(20, 11, 40) : BV:8
42 : ite(17, 18, 41) : BV:8
43 : ite(15, 11, 42) : BV:8
44 : ite(13, 11, 43) : BV:8
45 : ite(10, 11, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 6, 7) : BV:32
48 : eq(47, 9) : BOOL
49 : eq(47, 12) : BOOL
50 : eq(47, 14) : BOOL
51 : eq(47, 16) : BOOL
52 : eq(47, 19) : BOOL
53 : eq(47, 21) : BOOL
54 : eq(47, 23) : BOOL
55 : eq(47, 26) : BOOL
56 : eq(47, 7) : BOOL
57 : eq(47, 29) : BOOL
58 : eq(47, 32) : BOOL
59 : ite(58, 11, 34) : BV:8
60 : ite(57, 31, 59) : BV:8
61 : ite(56, 11, 60) : BV:8
62 : ite(55, 11, 61) : BV:8
63 : ite(54, 25, 62) : BV:8
64 : ite(53, 11, 63) : BV:8
65 : ite(52, 11, 64) : BV:8
66 : ite(51, 18, 65) : BV:8
67 : ite(50, 11, 66) : BV:8
68 : ite(49, 11, 67) : BV:8
69 : ite(48, 11, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 6, 7) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : eq(71, 19) : BOOL
77 : eq(71, 21) : BOOL
78 : eq(71, 23) : BOOL
79 : eq(71, 26) : BOOL
80 : eq(71, 7) : BOOL
81 : eq(71, 29) : BOOL
82 : eq(71, 32) : BOOL
83 : ite(82, 11, 34) : BV:8
84 : ite(81, 31, 83) : BV:8
85 : ite(80, 11, 84) : BV:8
86 : ite(79, 11, 85) : BV:8
87 : ite(78, 25, 86) : BV:8
88 : ite(77, 11, 87) : BV:8
89 : ite(76, 11, 88) : BV:8
90 : ite(75, 18, 89) : BV:8
91 : ite(74, 11, 90) : BV:8
92 : ite(73, 11, 91) : BV:8
93 : ite(72, 11, 92) : BV:8
94 : bvadd(6, 7) : BV:32
95 : eq(94, 9) : BOOL
96 : eq(94, 12) : BOOL
97 : eq(94, 14) : BOOL
98 : eq(94, 16) : BOOL
99 : eq(94, 19) : BOOL
100 : eq(94, 21) : BOOL
101 : eq(94, 23) : BOOL
102 : eq(94, 26) : BOOL
103 : eq(94, 7) : BOOL
104 : eq(94, 29) : BOOL
105 : eq(94, 32) : BOOL
106 : ite(105, 11, 34) : BV:8
107 : ite(104, 31, 106) : BV:8
108 : ite(103, 11, 107) : BV:8
109 : ite(102, 11, 108) : BV:8
110 : ite(101, 25, 109) : BV:8
111 : ite(100, 11, 110) : BV:8
112 : ite(99, 11, 111) : BV:8
113 : ite(98, 18, 112) : BV:8
114 : ite(97, 11, 113) : BV:8
115 : ite(96, 11, 114) : BV:8
116 : ite(95, 11, 115) : BV:8
117 : bvconcat(45, 69, 93, 116) : BV:32
118 : ite(3, 2, 117) : BV:32
119 : ite(3, 2, 118) : BV:32
120 : lambda(1, 119) : FUNCTION[BV:32 -> BV:32]
121 : sym_const(120) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L2%7%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
2023132795
=counter_example_end
=global nodece 15 num_edges_traversed 2
=global nodece 15 nodece_visted_pcs: 
L2%7%bbentry_Lfor.cond%1%bbentry
=global nodece 16
=global nodece 16 nodece z3.ce408.num_edges_traversed3
=global nodece 16 nodece_path
=global nodece 16 nodece_path.graph_edge_composition
(L2%7%bbentry_Lfor.cond%1%bbentry=>L2%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 16 nodece_cached_counterexample
=counter_example_begin z3.ce408 945493ee6525ab6457ccb0143ae985a6
=input.spec-%var-x-1
1 : Lambda452Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda453Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 4292853248 { 0xffdfbe00 -2114048 -1.74798583e128 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 3125809193 { 0xba501029 -1169158103 -1.62549316e245 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 3125809192 { 0xba501028 -1169158104 -1.62549304e245 } : BV:32
28 : eq(23, 27) : BOOL
29 : 4292853251 { 0xffdfbe03 -2114045 -1.74798619e128 } : BV:32
30 : eq(23, 29) : BOOL
31 : 3125809195 { 0xba50102b -1169158101 -1.62549340e245 } : BV:32
32 : eq(23, 31) : BOOL
33 : 128 { 0x80 -128 } : BV:8
34 : 4292853249 { 0xffdfbe01 -2114047 -1.74798595e128 } : BV:32
35 : eq(23, 34) : BOOL
36 : 3125809194 { 0xba50102a -1169158102 -1.62549328e245 } : BV:32
37 : eq(23, 36) : BOOL
38 : 2992738457 { 0xb2619099 -1302228839 -1.76222527e229 } : BV:32
39 : eq(23, 38) : BOOL
40 : 190 { 0xbe -66 } : BV:8
41 : 4292853250 { 0xffdfbe02 -2114046 -1.74798607e128 } : BV:32
42 : eq(23, 41) : BOOL
43 : eq(23, 22) : BOOL
44 : 2992738459 { 0xb261909b -1302228837 -1.76222550e229 } : BV:32
45 : eq(23, 44) : BOOL
46 : 255 { 0xff -1 } : BV:8
47 : 2992738456 { 0xb2619098 -1302228840 -1.76222515e229 } : BV:32
48 : eq(23, 47) : BOOL
49 : 223 { 0xdf -33 } : BV:8
50 : ite(48, 26, 49) : BV:8
51 : ite(45, 46, 50) : BV:8
52 : ite(43, 26, 51) : BV:8
53 : ite(42, 26, 52) : BV:8
54 : ite(39, 40, 53) : BV:8
55 : ite(37, 26, 54) : BV:8
56 : ite(35, 26, 55) : BV:8
57 : ite(32, 33, 56) : BV:8
58 : ite(30, 26, 57) : BV:8
59 : ite(28, 26, 58) : BV:8
60 : ite(25, 26, 59) : BV:8
61 : 2 { 0x2 +1.23e129 } : BV:32
62 : bvadd(61, 21, 22) : BV:32
63 : eq(62, 24) : BOOL
64 : eq(62, 27) : BOOL
65 : eq(62, 29) : BOOL
66 : eq(62, 31) : BOOL
67 : eq(62, 34) : BOOL
68 : eq(62, 36) : BOOL
69 : eq(62, 38) : BOOL
70 : eq(62, 41) : BOOL
71 : eq(62, 22) : BOOL
72 : eq(62, 44) : BOOL
73 : eq(62, 47) : BOOL
74 : ite(73, 26, 49) : BV:8
75 : ite(72, 46, 74) : BV:8
76 : ite(71, 26, 75) : BV:8
77 : ite(70, 26, 76) : BV:8
78 : ite(69, 40, 77) : BV:8
79 : ite(68, 26, 78) : BV:8
80 : ite(67, 26, 79) : BV:8
81 : ite(66, 33, 80) : BV:8
82 : ite(65, 26, 81) : BV:8
83 : ite(64, 26, 82) : BV:8
84 : ite(63, 26, 83) : BV:8
85 : 1 { 0x1 +1.11e129 } : BV:32
86 : bvadd(85, 21, 22) : BV:32
87 : eq(86, 24) : BOOL
88 : eq(86, 27) : BOOL
89 : eq(86, 29) : BOOL
90 : eq(86, 31) : BOOL
91 : eq(86, 34) : BOOL
92 : eq(86, 36) : BOOL
93 : eq(86, 38) : BOOL
94 : eq(86, 41) : BOOL
95 : eq(86, 22) : BOOL
96 : eq(86, 44) : BOOL
97 : eq(86, 47) : BOOL
98 : ite(97, 26, 49) : BV:8
99 : ite(96, 46, 98) : BV:8
100 : ite(95, 26, 99) : BV:8
101 : ite(94, 26, 100) : BV:8
102 : ite(93, 40, 101) : BV:8
103 : ite(92, 26, 102) : BV:8
104 : ite(91, 26, 103) : BV:8
105 : ite(90, 33, 104) : BV:8
106 : ite(89, 26, 105) : BV:8
107 : ite(88, 26, 106) : BV:8
108 : ite(87, 26, 107) : BV:8
109 : bvadd(21, 22) : BV:32
110 : eq(109, 24) : BOOL
111 : eq(109, 27) : BOOL
112 : eq(109, 29) : BOOL
113 : eq(109, 31) : BOOL
114 : eq(109, 34) : BOOL
115 : eq(109, 36) : BOOL
116 : eq(109, 38) : BOOL
117 : eq(109, 41) : BOOL
118 : eq(109, 22) : BOOL
119 : eq(109, 44) : BOOL
120 : eq(109, 47) : BOOL
121 : ite(120, 26, 49) : BV:8
122 : ite(119, 46, 121) : BV:8
123 : ite(118, 26, 122) : BV:8
124 : ite(117, 26, 123) : BV:8
125 : ite(116, 40, 124) : BV:8
126 : ite(115, 26, 125) : BV:8
127 : ite(114, 26, 126) : BV:8
128 : ite(113, 33, 127) : BV:8
129 : ite(112, 26, 128) : BV:8
130 : ite(111, 26, 129) : BV:8
131 : ite(110, 26, 130) : BV:8
132 : bvconcat(60, 84, 108, 131) : BV:32
133 : ite(18, 2, 132) : BV:32
134 : lambda(17, 133) : FUNCTION[BV:32 -> BV:32]
135 : map(16, 134) : MAP[BV:32 -> BV:32]
136 : sym_const(135) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry
1 : Lambda452Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda453Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 4292853248 { 0xffdfbe00 -2114048 -1.74798583e128 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 3125809193 { 0xba501029 -1169158103 -1.62549316e245 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 3125809192 { 0xba501028 -1169158104 -1.62549304e245 } : BV:32
28 : eq(23, 27) : BOOL
29 : 4292853251 { 0xffdfbe03 -2114045 -1.74798619e128 } : BV:32
30 : eq(23, 29) : BOOL
31 : 3125809195 { 0xba50102b -1169158101 -1.62549340e245 } : BV:32
32 : eq(23, 31) : BOOL
33 : 128 { 0x80 -128 } : BV:8
34 : 4292853249 { 0xffdfbe01 -2114047 -1.74798595e128 } : BV:32
35 : eq(23, 34) : BOOL
36 : 3125809194 { 0xba50102a -1169158102 -1.62549328e245 } : BV:32
37 : eq(23, 36) : BOOL
38 : 2992738457 { 0xb2619099 -1302228839 -1.76222527e229 } : BV:32
39 : eq(23, 38) : BOOL
40 : 190 { 0xbe -66 } : BV:8
41 : 4292853250 { 0xffdfbe02 -2114046 -1.74798607e128 } : BV:32
42 : eq(23, 41) : BOOL
43 : eq(23, 22) : BOOL
44 : 2992738459 { 0xb261909b -1302228837 -1.76222550e229 } : BV:32
45 : eq(23, 44) : BOOL
46 : 255 { 0xff -1 } : BV:8
47 : 2992738456 { 0xb2619098 -1302228840 -1.76222515e229 } : BV:32
48 : eq(23, 47) : BOOL
49 : 223 { 0xdf -33 } : BV:8
50 : ite(48, 26, 49) : BV:8
51 : ite(45, 46, 50) : BV:8
52 : ite(43, 26, 51) : BV:8
53 : ite(42, 26, 52) : BV:8
54 : ite(39, 40, 53) : BV:8
55 : ite(37, 26, 54) : BV:8
56 : ite(35, 26, 55) : BV:8
57 : ite(32, 33, 56) : BV:8
58 : ite(30, 26, 57) : BV:8
59 : ite(28, 26, 58) : BV:8
60 : ite(25, 26, 59) : BV:8
61 : 2 { 0x2 +1.23e129 } : BV:32
62 : bvadd(61, 21, 22) : BV:32
63 : eq(62, 24) : BOOL
64 : eq(62, 27) : BOOL
65 : eq(62, 29) : BOOL
66 : eq(62, 31) : BOOL
67 : eq(62, 34) : BOOL
68 : eq(62, 36) : BOOL
69 : eq(62, 38) : BOOL
70 : eq(62, 41) : BOOL
71 : eq(62, 22) : BOOL
72 : eq(62, 44) : BOOL
73 : eq(62, 47) : BOOL
74 : ite(73, 26, 49) : BV:8
75 : ite(72, 46, 74) : BV:8
76 : ite(71, 26, 75) : BV:8
77 : ite(70, 26, 76) : BV:8
78 : ite(69, 40, 77) : BV:8
79 : ite(68, 26, 78) : BV:8
80 : ite(67, 26, 79) : BV:8
81 : ite(66, 33, 80) : BV:8
82 : ite(65, 26, 81) : BV:8
83 : ite(64, 26, 82) : BV:8
84 : ite(63, 26, 83) : BV:8
85 : 1 { 0x1 +1.11e129 } : BV:32
86 : bvadd(85, 21, 22) : BV:32
87 : eq(86, 24) : BOOL
88 : eq(86, 27) : BOOL
89 : eq(86, 29) : BOOL
90 : eq(86, 31) : BOOL
91 : eq(86, 34) : BOOL
92 : eq(86, 36) : BOOL
93 : eq(86, 38) : BOOL
94 : eq(86, 41) : BOOL
95 : eq(86, 22) : BOOL
96 : eq(86, 44) : BOOL
97 : eq(86, 47) : BOOL
98 : ite(97, 26, 49) : BV:8
99 : ite(96, 46, 98) : BV:8
100 : ite(95, 26, 99) : BV:8
101 : ite(94, 26, 100) : BV:8
102 : ite(93, 40, 101) : BV:8
103 : ite(92, 26, 102) : BV:8
104 : ite(91, 26, 103) : BV:8
105 : ite(90, 33, 104) : BV:8
106 : ite(89, 26, 105) : BV:8
107 : ite(88, 26, 106) : BV:8
108 : ite(87, 26, 107) : BV:8
109 : bvadd(21, 22) : BV:32
110 : eq(109, 24) : BOOL
111 : eq(109, 27) : BOOL
112 : eq(109, 29) : BOOL
113 : eq(109, 31) : BOOL
114 : eq(109, 34) : BOOL
115 : eq(109, 36) : BOOL
116 : eq(109, 38) : BOOL
117 : eq(109, 41) : BOOL
118 : eq(109, 22) : BOOL
119 : eq(109, 44) : BOOL
120 : eq(109, 47) : BOOL
121 : ite(120, 26, 49) : BV:8
122 : ite(119, 46, 121) : BV:8
123 : ite(118, 26, 122) : BV:8
124 : ite(117, 26, 123) : BV:8
125 : ite(116, 40, 124) : BV:8
126 : ite(115, 26, 125) : BV:8
127 : ite(114, 26, 126) : BV:8
128 : ite(113, 33, 127) : BV:8
129 : ite(112, 26, 128) : BV:8
130 : ite(111, 26, 129) : BV:8
131 : ite(110, 26, 130) : BV:8
132 : bvconcat(60, 84, 108, 131) : BV:32
133 : ite(18, 2, 132) : BV:32
134 : lambda(17, 133) : FUNCTION[BV:32 -> BV:32]
135 : map(16, 134) : MAP[BV:32 -> BV:32]
136 : sym_const(135) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 2992738455 ] -> 223, [ 2992738456; 2992738456 ] -> 0, [ 2992738457; 2992738457 ] -> 190, [ 2992738458; 2992738458 ] -> 223, [ 2992738459; 2992738459 ] -> 255, [ 2992738460; 3125809191 ] -> 223, [ 3125809192; 3125809194 ] -> 0, [ 3125809195; 3125809195 ] -> 128, [ 3125809196; 4292853247 ] -> 223, [ 4292853248; 4292853251 ] -> 0, [ 4292853252; 4294967295 ] -> 223, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2992738455 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2992738456; 2992738459 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2992738460; 3125809191 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3125809192; 3125809195 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3125809196; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3125809192 { 0xba501028 -1169158104 -1.62549304e245 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2992738456 { 0xb2619098 -1302228840 -1.76222515e229 } : BV:32
=input.dst.llvm-%x
1 : 4292853248 { 0xffdfbe00 -2114048 -1.74798583e128 } : BV:32
=input.spec-%var-i-0.L2%7%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%var-ret-0.L2%7%bbentry
1 : 3755991007 { 0xdfdfdfdf -538976289 -1.74901950e64 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-8.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 3755991007 { 0xdfdfdfdf -538976289 -1.74901950e64 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1242967190 { 0x4a162c96 +1.17323565e21 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3125809192 { 0xba501028 -1169158104 -1.62549304e245 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3125809195 { 0xba50102b -1169158101 -1.62549340e245 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2992738456 { 0xb2619098 -1302228840 -1.76222515e229 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2992738459 { 0xb261909b -1302228837 -1.76222550e229 } : BV:32
=input.spec-%var-x-1.1.1
1 : Lambda428Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 4292853248 { 0xffdfbe00 -2114048 -1.74798583e128 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 3125809193 { 0xba501029 -1169158103 -1.62549316e245 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 3125809192 { 0xba501028 -1169158104 -1.62549304e245 } : BV:32
13 : eq(8, 12) : BOOL
14 : 4292853251 { 0xffdfbe03 -2114045 -1.74798619e128 } : BV:32
15 : eq(8, 14) : BOOL
16 : 3125809195 { 0xba50102b -1169158101 -1.62549340e245 } : BV:32
17 : eq(8, 16) : BOOL
18 : 128 { 0x80 -128 } : BV:8
19 : 4292853249 { 0xffdfbe01 -2114047 -1.74798595e128 } : BV:32
20 : eq(8, 19) : BOOL
21 : 3125809194 { 0xba50102a -1169158102 -1.62549328e245 } : BV:32
22 : eq(8, 21) : BOOL
23 : 2992738457 { 0xb2619099 -1302228839 -1.76222527e229 } : BV:32
24 : eq(8, 23) : BOOL
25 : 190 { 0xbe -66 } : BV:8
26 : 4292853250 { 0xffdfbe02 -2114046 -1.74798607e128 } : BV:32
27 : eq(8, 26) : BOOL
28 : eq(8, 7) : BOOL
29 : 2992738459 { 0xb261909b -1302228837 -1.76222550e229 } : BV:32
30 : eq(8, 29) : BOOL
31 : 255 { 0xff -1 } : BV:8
32 : 2992738456 { 0xb2619098 -1302228840 -1.76222515e229 } : BV:32
33 : eq(8, 32) : BOOL
34 : 223 { 0xdf -33 } : BV:8
35 : ite(33, 11, 34) : BV:8
36 : ite(30, 31, 35) : BV:8
37 : ite(28, 11, 36) : BV:8
38 : ite(27, 11, 37) : BV:8
39 : ite(24, 25, 38) : BV:8
40 : ite(22, 11, 39) : BV:8
41 : ite(20, 11, 40) : BV:8
42 : ite(17, 18, 41) : BV:8
43 : ite(15, 11, 42) : BV:8
44 : ite(13, 11, 43) : BV:8
45 : ite(10, 11, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 6, 7) : BV:32
48 : eq(47, 9) : BOOL
49 : eq(47, 12) : BOOL
50 : eq(47, 14) : BOOL
51 : eq(47, 16) : BOOL
52 : eq(47, 19) : BOOL
53 : eq(47, 21) : BOOL
54 : eq(47, 23) : BOOL
55 : eq(47, 26) : BOOL
56 : eq(47, 7) : BOOL
57 : eq(47, 29) : BOOL
58 : eq(47, 32) : BOOL
59 : ite(58, 11, 34) : BV:8
60 : ite(57, 31, 59) : BV:8
61 : ite(56, 11, 60) : BV:8
62 : ite(55, 11, 61) : BV:8
63 : ite(54, 25, 62) : BV:8
64 : ite(53, 11, 63) : BV:8
65 : ite(52, 11, 64) : BV:8
66 : ite(51, 18, 65) : BV:8
67 : ite(50, 11, 66) : BV:8
68 : ite(49, 11, 67) : BV:8
69 : ite(48, 11, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 6, 7) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : eq(71, 19) : BOOL
77 : eq(71, 21) : BOOL
78 : eq(71, 23) : BOOL
79 : eq(71, 26) : BOOL
80 : eq(71, 7) : BOOL
81 : eq(71, 29) : BOOL
82 : eq(71, 32) : BOOL
83 : ite(82, 11, 34) : BV:8
84 : ite(81, 31, 83) : BV:8
85 : ite(80, 11, 84) : BV:8
86 : ite(79, 11, 85) : BV:8
87 : ite(78, 25, 86) : BV:8
88 : ite(77, 11, 87) : BV:8
89 : ite(76, 11, 88) : BV:8
90 : ite(75, 18, 89) : BV:8
91 : ite(74, 11, 90) : BV:8
92 : ite(73, 11, 91) : BV:8
93 : ite(72, 11, 92) : BV:8
94 : bvadd(6, 7) : BV:32
95 : eq(94, 9) : BOOL
96 : eq(94, 12) : BOOL
97 : eq(94, 14) : BOOL
98 : eq(94, 16) : BOOL
99 : eq(94, 19) : BOOL
100 : eq(94, 21) : BOOL
101 : eq(94, 23) : BOOL
102 : eq(94, 26) : BOOL
103 : eq(94, 7) : BOOL
104 : eq(94, 29) : BOOL
105 : eq(94, 32) : BOOL
106 : ite(105, 11, 34) : BV:8
107 : ite(104, 31, 106) : BV:8
108 : ite(103, 11, 107) : BV:8
109 : ite(102, 11, 108) : BV:8
110 : ite(101, 25, 109) : BV:8
111 : ite(100, 11, 110) : BV:8
112 : ite(99, 11, 111) : BV:8
113 : ite(98, 18, 112) : BV:8
114 : ite(97, 11, 113) : BV:8
115 : ite(96, 11, 114) : BV:8
116 : ite(95, 11, 115) : BV:8
117 : bvconcat(45, 69, 93, 116) : BV:32
118 : ite(3, 2, 117) : BV:32
119 : lambda(1, 118) : FUNCTION[BV:32 -> BV:32]
120 : sym_const(119) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry.1.1
1 : Lambda429Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 4292853248 { 0xffdfbe00 -2114048 -1.74798583e128 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 3125809193 { 0xba501029 -1169158103 -1.62549316e245 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 3125809192 { 0xba501028 -1169158104 -1.62549304e245 } : BV:32
13 : eq(8, 12) : BOOL
14 : 4292853251 { 0xffdfbe03 -2114045 -1.74798619e128 } : BV:32
15 : eq(8, 14) : BOOL
16 : 3125809195 { 0xba50102b -1169158101 -1.62549340e245 } : BV:32
17 : eq(8, 16) : BOOL
18 : 128 { 0x80 -128 } : BV:8
19 : 4292853249 { 0xffdfbe01 -2114047 -1.74798595e128 } : BV:32
20 : eq(8, 19) : BOOL
21 : 3125809194 { 0xba50102a -1169158102 -1.62549328e245 } : BV:32
22 : eq(8, 21) : BOOL
23 : 2992738457 { 0xb2619099 -1302228839 -1.76222527e229 } : BV:32
24 : eq(8, 23) : BOOL
25 : 190 { 0xbe -66 } : BV:8
26 : 4292853250 { 0xffdfbe02 -2114046 -1.74798607e128 } : BV:32
27 : eq(8, 26) : BOOL
28 : eq(8, 7) : BOOL
29 : 2992738459 { 0xb261909b -1302228837 -1.76222550e229 } : BV:32
30 : eq(8, 29) : BOOL
31 : 255 { 0xff -1 } : BV:8
32 : 2992738456 { 0xb2619098 -1302228840 -1.76222515e229 } : BV:32
33 : eq(8, 32) : BOOL
34 : 223 { 0xdf -33 } : BV:8
35 : ite(33, 11, 34) : BV:8
36 : ite(30, 31, 35) : BV:8
37 : ite(28, 11, 36) : BV:8
38 : ite(27, 11, 37) : BV:8
39 : ite(24, 25, 38) : BV:8
40 : ite(22, 11, 39) : BV:8
41 : ite(20, 11, 40) : BV:8
42 : ite(17, 18, 41) : BV:8
43 : ite(15, 11, 42) : BV:8
44 : ite(13, 11, 43) : BV:8
45 : ite(10, 11, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 6, 7) : BV:32
48 : eq(47, 9) : BOOL
49 : eq(47, 12) : BOOL
50 : eq(47, 14) : BOOL
51 : eq(47, 16) : BOOL
52 : eq(47, 19) : BOOL
53 : eq(47, 21) : BOOL
54 : eq(47, 23) : BOOL
55 : eq(47, 26) : BOOL
56 : eq(47, 7) : BOOL
57 : eq(47, 29) : BOOL
58 : eq(47, 32) : BOOL
59 : ite(58, 11, 34) : BV:8
60 : ite(57, 31, 59) : BV:8
61 : ite(56, 11, 60) : BV:8
62 : ite(55, 11, 61) : BV:8
63 : ite(54, 25, 62) : BV:8
64 : ite(53, 11, 63) : BV:8
65 : ite(52, 11, 64) : BV:8
66 : ite(51, 18, 65) : BV:8
67 : ite(50, 11, 66) : BV:8
68 : ite(49, 11, 67) : BV:8
69 : ite(48, 11, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 6, 7) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : eq(71, 19) : BOOL
77 : eq(71, 21) : BOOL
78 : eq(71, 23) : BOOL
79 : eq(71, 26) : BOOL
80 : eq(71, 7) : BOOL
81 : eq(71, 29) : BOOL
82 : eq(71, 32) : BOOL
83 : ite(82, 11, 34) : BV:8
84 : ite(81, 31, 83) : BV:8
85 : ite(80, 11, 84) : BV:8
86 : ite(79, 11, 85) : BV:8
87 : ite(78, 25, 86) : BV:8
88 : ite(77, 11, 87) : BV:8
89 : ite(76, 11, 88) : BV:8
90 : ite(75, 18, 89) : BV:8
91 : ite(74, 11, 90) : BV:8
92 : ite(73, 11, 91) : BV:8
93 : ite(72, 11, 92) : BV:8
94 : bvadd(6, 7) : BV:32
95 : eq(94, 9) : BOOL
96 : eq(94, 12) : BOOL
97 : eq(94, 14) : BOOL
98 : eq(94, 16) : BOOL
99 : eq(94, 19) : BOOL
100 : eq(94, 21) : BOOL
101 : eq(94, 23) : BOOL
102 : eq(94, 26) : BOOL
103 : eq(94, 7) : BOOL
104 : eq(94, 29) : BOOL
105 : eq(94, 32) : BOOL
106 : ite(105, 11, 34) : BV:8
107 : ite(104, 31, 106) : BV:8
108 : ite(103, 11, 107) : BV:8
109 : ite(102, 11, 108) : BV:8
110 : ite(101, 25, 109) : BV:8
111 : ite(100, 11, 110) : BV:8
112 : ite(99, 11, 111) : BV:8
113 : ite(98, 18, 112) : BV:8
114 : ite(97, 11, 113) : BV:8
115 : ite(96, 11, 114) : BV:8
116 : ite(95, 11, 115) : BV:8
117 : bvconcat(45, 69, 93, 116) : BV:32
118 : ite(3, 2, 117) : BV:32
119 : ite(3, 2, 118) : BV:32
120 : lambda(1, 119) : FUNCTION[BV:32 -> BV:32]
121 : sym_const(120) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L2%7%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
2023132795
=counter_example_end
=global nodece 16 num_edges_traversed 3
=global nodece 16 nodece_visted_pcs: 
L2%7%bbentry_Lfor.cond%1%bbentry
=global nodece 17
=global nodece 17 nodece z3.ce428.num_edges_traversed4
=global nodece 17 nodece_path
=global nodece 17 nodece_path.graph_edge_composition
(epsilon)
=global nodece 17 nodece_cached_counterexample
=counter_example_begin z3.ce428 a541929ebc191718a85f2e83959d63
=input.spec-%var-x-1
1 : Lambda452Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda453Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 4292853248 { 0xffdfbe00 -2114048 -1.74798583e128 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 3125809193 { 0xba501029 -1169158103 -1.62549316e245 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 3125809192 { 0xba501028 -1169158104 -1.62549304e245 } : BV:32
28 : eq(23, 27) : BOOL
29 : 4292853251 { 0xffdfbe03 -2114045 -1.74798619e128 } : BV:32
30 : eq(23, 29) : BOOL
31 : 3125809195 { 0xba50102b -1169158101 -1.62549340e245 } : BV:32
32 : eq(23, 31) : BOOL
33 : 128 { 0x80 -128 } : BV:8
34 : 4292853249 { 0xffdfbe01 -2114047 -1.74798595e128 } : BV:32
35 : eq(23, 34) : BOOL
36 : 3125809194 { 0xba50102a -1169158102 -1.62549328e245 } : BV:32
37 : eq(23, 36) : BOOL
38 : 2992738457 { 0xb2619099 -1302228839 -1.76222527e229 } : BV:32
39 : eq(23, 38) : BOOL
40 : 190 { 0xbe -66 } : BV:8
41 : 4292853250 { 0xffdfbe02 -2114046 -1.74798607e128 } : BV:32
42 : eq(23, 41) : BOOL
43 : eq(23, 22) : BOOL
44 : 2992738459 { 0xb261909b -1302228837 -1.76222550e229 } : BV:32
45 : eq(23, 44) : BOOL
46 : 255 { 0xff -1 } : BV:8
47 : 2992738456 { 0xb2619098 -1302228840 -1.76222515e229 } : BV:32
48 : eq(23, 47) : BOOL
49 : 223 { 0xdf -33 } : BV:8
50 : ite(48, 26, 49) : BV:8
51 : ite(45, 46, 50) : BV:8
52 : ite(43, 26, 51) : BV:8
53 : ite(42, 26, 52) : BV:8
54 : ite(39, 40, 53) : BV:8
55 : ite(37, 26, 54) : BV:8
56 : ite(35, 26, 55) : BV:8
57 : ite(32, 33, 56) : BV:8
58 : ite(30, 26, 57) : BV:8
59 : ite(28, 26, 58) : BV:8
60 : ite(25, 26, 59) : BV:8
61 : 2 { 0x2 +1.23e129 } : BV:32
62 : bvadd(61, 21, 22) : BV:32
63 : eq(62, 24) : BOOL
64 : eq(62, 27) : BOOL
65 : eq(62, 29) : BOOL
66 : eq(62, 31) : BOOL
67 : eq(62, 34) : BOOL
68 : eq(62, 36) : BOOL
69 : eq(62, 38) : BOOL
70 : eq(62, 41) : BOOL
71 : eq(62, 22) : BOOL
72 : eq(62, 44) : BOOL
73 : eq(62, 47) : BOOL
74 : ite(73, 26, 49) : BV:8
75 : ite(72, 46, 74) : BV:8
76 : ite(71, 26, 75) : BV:8
77 : ite(70, 26, 76) : BV:8
78 : ite(69, 40, 77) : BV:8
79 : ite(68, 26, 78) : BV:8
80 : ite(67, 26, 79) : BV:8
81 : ite(66, 33, 80) : BV:8
82 : ite(65, 26, 81) : BV:8
83 : ite(64, 26, 82) : BV:8
84 : ite(63, 26, 83) : BV:8
85 : 1 { 0x1 +1.11e129 } : BV:32
86 : bvadd(85, 21, 22) : BV:32
87 : eq(86, 24) : BOOL
88 : eq(86, 27) : BOOL
89 : eq(86, 29) : BOOL
90 : eq(86, 31) : BOOL
91 : eq(86, 34) : BOOL
92 : eq(86, 36) : BOOL
93 : eq(86, 38) : BOOL
94 : eq(86, 41) : BOOL
95 : eq(86, 22) : BOOL
96 : eq(86, 44) : BOOL
97 : eq(86, 47) : BOOL
98 : ite(97, 26, 49) : BV:8
99 : ite(96, 46, 98) : BV:8
100 : ite(95, 26, 99) : BV:8
101 : ite(94, 26, 100) : BV:8
102 : ite(93, 40, 101) : BV:8
103 : ite(92, 26, 102) : BV:8
104 : ite(91, 26, 103) : BV:8
105 : ite(90, 33, 104) : BV:8
106 : ite(89, 26, 105) : BV:8
107 : ite(88, 26, 106) : BV:8
108 : ite(87, 26, 107) : BV:8
109 : bvadd(21, 22) : BV:32
110 : eq(109, 24) : BOOL
111 : eq(109, 27) : BOOL
112 : eq(109, 29) : BOOL
113 : eq(109, 31) : BOOL
114 : eq(109, 34) : BOOL
115 : eq(109, 36) : BOOL
116 : eq(109, 38) : BOOL
117 : eq(109, 41) : BOOL
118 : eq(109, 22) : BOOL
119 : eq(109, 44) : BOOL
120 : eq(109, 47) : BOOL
121 : ite(120, 26, 49) : BV:8
122 : ite(119, 46, 121) : BV:8
123 : ite(118, 26, 122) : BV:8
124 : ite(117, 26, 123) : BV:8
125 : ite(116, 40, 124) : BV:8
126 : ite(115, 26, 125) : BV:8
127 : ite(114, 26, 126) : BV:8
128 : ite(113, 33, 127) : BV:8
129 : ite(112, 26, 128) : BV:8
130 : ite(111, 26, 129) : BV:8
131 : ite(110, 26, 130) : BV:8
132 : bvconcat(60, 84, 108, 131) : BV:32
133 : ite(18, 2, 132) : BV:32
134 : lambda(17, 133) : FUNCTION[BV:32 -> BV:32]
135 : map(16, 134) : MAP[BV:32 -> BV:32]
136 : sym_const(135) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry
1 : Lambda452Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda453Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 4292853248 { 0xffdfbe00 -2114048 -1.74798583e128 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 3125809193 { 0xba501029 -1169158103 -1.62549316e245 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 3125809192 { 0xba501028 -1169158104 -1.62549304e245 } : BV:32
28 : eq(23, 27) : BOOL
29 : 4292853251 { 0xffdfbe03 -2114045 -1.74798619e128 } : BV:32
30 : eq(23, 29) : BOOL
31 : 3125809195 { 0xba50102b -1169158101 -1.62549340e245 } : BV:32
32 : eq(23, 31) : BOOL
33 : 128 { 0x80 -128 } : BV:8
34 : 4292853249 { 0xffdfbe01 -2114047 -1.74798595e128 } : BV:32
35 : eq(23, 34) : BOOL
36 : 3125809194 { 0xba50102a -1169158102 -1.62549328e245 } : BV:32
37 : eq(23, 36) : BOOL
38 : 2992738457 { 0xb2619099 -1302228839 -1.76222527e229 } : BV:32
39 : eq(23, 38) : BOOL
40 : 190 { 0xbe -66 } : BV:8
41 : 4292853250 { 0xffdfbe02 -2114046 -1.74798607e128 } : BV:32
42 : eq(23, 41) : BOOL
43 : eq(23, 22) : BOOL
44 : 2992738459 { 0xb261909b -1302228837 -1.76222550e229 } : BV:32
45 : eq(23, 44) : BOOL
46 : 255 { 0xff -1 } : BV:8
47 : 2992738456 { 0xb2619098 -1302228840 -1.76222515e229 } : BV:32
48 : eq(23, 47) : BOOL
49 : 223 { 0xdf -33 } : BV:8
50 : ite(48, 26, 49) : BV:8
51 : ite(45, 46, 50) : BV:8
52 : ite(43, 26, 51) : BV:8
53 : ite(42, 26, 52) : BV:8
54 : ite(39, 40, 53) : BV:8
55 : ite(37, 26, 54) : BV:8
56 : ite(35, 26, 55) : BV:8
57 : ite(32, 33, 56) : BV:8
58 : ite(30, 26, 57) : BV:8
59 : ite(28, 26, 58) : BV:8
60 : ite(25, 26, 59) : BV:8
61 : 2 { 0x2 +1.23e129 } : BV:32
62 : bvadd(61, 21, 22) : BV:32
63 : eq(62, 24) : BOOL
64 : eq(62, 27) : BOOL
65 : eq(62, 29) : BOOL
66 : eq(62, 31) : BOOL
67 : eq(62, 34) : BOOL
68 : eq(62, 36) : BOOL
69 : eq(62, 38) : BOOL
70 : eq(62, 41) : BOOL
71 : eq(62, 22) : BOOL
72 : eq(62, 44) : BOOL
73 : eq(62, 47) : BOOL
74 : ite(73, 26, 49) : BV:8
75 : ite(72, 46, 74) : BV:8
76 : ite(71, 26, 75) : BV:8
77 : ite(70, 26, 76) : BV:8
78 : ite(69, 40, 77) : BV:8
79 : ite(68, 26, 78) : BV:8
80 : ite(67, 26, 79) : BV:8
81 : ite(66, 33, 80) : BV:8
82 : ite(65, 26, 81) : BV:8
83 : ite(64, 26, 82) : BV:8
84 : ite(63, 26, 83) : BV:8
85 : 1 { 0x1 +1.11e129 } : BV:32
86 : bvadd(85, 21, 22) : BV:32
87 : eq(86, 24) : BOOL
88 : eq(86, 27) : BOOL
89 : eq(86, 29) : BOOL
90 : eq(86, 31) : BOOL
91 : eq(86, 34) : BOOL
92 : eq(86, 36) : BOOL
93 : eq(86, 38) : BOOL
94 : eq(86, 41) : BOOL
95 : eq(86, 22) : BOOL
96 : eq(86, 44) : BOOL
97 : eq(86, 47) : BOOL
98 : ite(97, 26, 49) : BV:8
99 : ite(96, 46, 98) : BV:8
100 : ite(95, 26, 99) : BV:8
101 : ite(94, 26, 100) : BV:8
102 : ite(93, 40, 101) : BV:8
103 : ite(92, 26, 102) : BV:8
104 : ite(91, 26, 103) : BV:8
105 : ite(90, 33, 104) : BV:8
106 : ite(89, 26, 105) : BV:8
107 : ite(88, 26, 106) : BV:8
108 : ite(87, 26, 107) : BV:8
109 : bvadd(21, 22) : BV:32
110 : eq(109, 24) : BOOL
111 : eq(109, 27) : BOOL
112 : eq(109, 29) : BOOL
113 : eq(109, 31) : BOOL
114 : eq(109, 34) : BOOL
115 : eq(109, 36) : BOOL
116 : eq(109, 38) : BOOL
117 : eq(109, 41) : BOOL
118 : eq(109, 22) : BOOL
119 : eq(109, 44) : BOOL
120 : eq(109, 47) : BOOL
121 : ite(120, 26, 49) : BV:8
122 : ite(119, 46, 121) : BV:8
123 : ite(118, 26, 122) : BV:8
124 : ite(117, 26, 123) : BV:8
125 : ite(116, 40, 124) : BV:8
126 : ite(115, 26, 125) : BV:8
127 : ite(114, 26, 126) : BV:8
128 : ite(113, 33, 127) : BV:8
129 : ite(112, 26, 128) : BV:8
130 : ite(111, 26, 129) : BV:8
131 : ite(110, 26, 130) : BV:8
132 : bvconcat(60, 84, 108, 131) : BV:32
133 : ite(18, 2, 132) : BV:32
134 : lambda(17, 133) : FUNCTION[BV:32 -> BV:32]
135 : map(16, 134) : MAP[BV:32 -> BV:32]
136 : sym_const(135) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 2992738455 ] -> 223, [ 2992738456; 2992738456 ] -> 0, [ 2992738457; 2992738457 ] -> 190, [ 2992738458; 2992738458 ] -> 223, [ 2992738459; 2992738459 ] -> 255, [ 2992738460; 3125809191 ] -> 223, [ 3125809192; 3125809194 ] -> 0, [ 3125809195; 3125809195 ] -> 128, [ 3125809196; 4292853247 ] -> 223, [ 4292853248; 4292853251 ] -> 0, [ 4292853252; 4294967295 ] -> 223, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2992738455 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2992738456; 2992738459 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2992738460; 3125809191 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3125809192; 3125809195 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3125809196; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3125809192 { 0xba501028 -1169158104 -1.62549304e245 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2992738456 { 0xb2619098 -1302228840 -1.76222515e229 } : BV:32
=input.dst.llvm-%x
1 : 4292853248 { 0xffdfbe00 -2114048 -1.74798583e128 } : BV:32
=input.spec-%var-i-0.L2%7%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-ret-0.L2%7%bbentry
1 : 3217014718 { 0xbfbfbfbe -1077952578 -1.49803900e0 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-8.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 3217014718 { 0xbfbfbfbe -1077952578 -1.49803900e0 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1242967190 { 0x4a162c96 +1.17323565e21 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3125809192 { 0xba501028 -1169158104 -1.62549304e245 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3125809195 { 0xba50102b -1169158101 -1.62549340e245 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2992738456 { 0xb2619098 -1302228840 -1.76222515e229 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2992738459 { 0xb261909b -1302228837 -1.76222550e229 } : BV:32
=input.spec-%var-x-1.1.1
1 : Lambda428Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 4292853248 { 0xffdfbe00 -2114048 -1.74798583e128 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 3125809193 { 0xba501029 -1169158103 -1.62549316e245 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 3125809192 { 0xba501028 -1169158104 -1.62549304e245 } : BV:32
13 : eq(8, 12) : BOOL
14 : 4292853251 { 0xffdfbe03 -2114045 -1.74798619e128 } : BV:32
15 : eq(8, 14) : BOOL
16 : 3125809195 { 0xba50102b -1169158101 -1.62549340e245 } : BV:32
17 : eq(8, 16) : BOOL
18 : 128 { 0x80 -128 } : BV:8
19 : 4292853249 { 0xffdfbe01 -2114047 -1.74798595e128 } : BV:32
20 : eq(8, 19) : BOOL
21 : 3125809194 { 0xba50102a -1169158102 -1.62549328e245 } : BV:32
22 : eq(8, 21) : BOOL
23 : 2992738457 { 0xb2619099 -1302228839 -1.76222527e229 } : BV:32
24 : eq(8, 23) : BOOL
25 : 190 { 0xbe -66 } : BV:8
26 : 4292853250 { 0xffdfbe02 -2114046 -1.74798607e128 } : BV:32
27 : eq(8, 26) : BOOL
28 : eq(8, 7) : BOOL
29 : 2992738459 { 0xb261909b -1302228837 -1.76222550e229 } : BV:32
30 : eq(8, 29) : BOOL
31 : 255 { 0xff -1 } : BV:8
32 : 2992738456 { 0xb2619098 -1302228840 -1.76222515e229 } : BV:32
33 : eq(8, 32) : BOOL
34 : 223 { 0xdf -33 } : BV:8
35 : ite(33, 11, 34) : BV:8
36 : ite(30, 31, 35) : BV:8
37 : ite(28, 11, 36) : BV:8
38 : ite(27, 11, 37) : BV:8
39 : ite(24, 25, 38) : BV:8
40 : ite(22, 11, 39) : BV:8
41 : ite(20, 11, 40) : BV:8
42 : ite(17, 18, 41) : BV:8
43 : ite(15, 11, 42) : BV:8
44 : ite(13, 11, 43) : BV:8
45 : ite(10, 11, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 6, 7) : BV:32
48 : eq(47, 9) : BOOL
49 : eq(47, 12) : BOOL
50 : eq(47, 14) : BOOL
51 : eq(47, 16) : BOOL
52 : eq(47, 19) : BOOL
53 : eq(47, 21) : BOOL
54 : eq(47, 23) : BOOL
55 : eq(47, 26) : BOOL
56 : eq(47, 7) : BOOL
57 : eq(47, 29) : BOOL
58 : eq(47, 32) : BOOL
59 : ite(58, 11, 34) : BV:8
60 : ite(57, 31, 59) : BV:8
61 : ite(56, 11, 60) : BV:8
62 : ite(55, 11, 61) : BV:8
63 : ite(54, 25, 62) : BV:8
64 : ite(53, 11, 63) : BV:8
65 : ite(52, 11, 64) : BV:8
66 : ite(51, 18, 65) : BV:8
67 : ite(50, 11, 66) : BV:8
68 : ite(49, 11, 67) : BV:8
69 : ite(48, 11, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 6, 7) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : eq(71, 19) : BOOL
77 : eq(71, 21) : BOOL
78 : eq(71, 23) : BOOL
79 : eq(71, 26) : BOOL
80 : eq(71, 7) : BOOL
81 : eq(71, 29) : BOOL
82 : eq(71, 32) : BOOL
83 : ite(82, 11, 34) : BV:8
84 : ite(81, 31, 83) : BV:8
85 : ite(80, 11, 84) : BV:8
86 : ite(79, 11, 85) : BV:8
87 : ite(78, 25, 86) : BV:8
88 : ite(77, 11, 87) : BV:8
89 : ite(76, 11, 88) : BV:8
90 : ite(75, 18, 89) : BV:8
91 : ite(74, 11, 90) : BV:8
92 : ite(73, 11, 91) : BV:8
93 : ite(72, 11, 92) : BV:8
94 : bvadd(6, 7) : BV:32
95 : eq(94, 9) : BOOL
96 : eq(94, 12) : BOOL
97 : eq(94, 14) : BOOL
98 : eq(94, 16) : BOOL
99 : eq(94, 19) : BOOL
100 : eq(94, 21) : BOOL
101 : eq(94, 23) : BOOL
102 : eq(94, 26) : BOOL
103 : eq(94, 7) : BOOL
104 : eq(94, 29) : BOOL
105 : eq(94, 32) : BOOL
106 : ite(105, 11, 34) : BV:8
107 : ite(104, 31, 106) : BV:8
108 : ite(103, 11, 107) : BV:8
109 : ite(102, 11, 108) : BV:8
110 : ite(101, 25, 109) : BV:8
111 : ite(100, 11, 110) : BV:8
112 : ite(99, 11, 111) : BV:8
113 : ite(98, 18, 112) : BV:8
114 : ite(97, 11, 113) : BV:8
115 : ite(96, 11, 114) : BV:8
116 : ite(95, 11, 115) : BV:8
117 : bvconcat(45, 69, 93, 116) : BV:32
118 : ite(3, 2, 117) : BV:32
119 : lambda(1, 118) : FUNCTION[BV:32 -> BV:32]
120 : sym_const(119) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry.1.1
1 : Lambda429Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 4292853248 { 0xffdfbe00 -2114048 -1.74798583e128 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 3125809193 { 0xba501029 -1169158103 -1.62549316e245 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 3125809192 { 0xba501028 -1169158104 -1.62549304e245 } : BV:32
13 : eq(8, 12) : BOOL
14 : 4292853251 { 0xffdfbe03 -2114045 -1.74798619e128 } : BV:32
15 : eq(8, 14) : BOOL
16 : 3125809195 { 0xba50102b -1169158101 -1.62549340e245 } : BV:32
17 : eq(8, 16) : BOOL
18 : 128 { 0x80 -128 } : BV:8
19 : 4292853249 { 0xffdfbe01 -2114047 -1.74798595e128 } : BV:32
20 : eq(8, 19) : BOOL
21 : 3125809194 { 0xba50102a -1169158102 -1.62549328e245 } : BV:32
22 : eq(8, 21) : BOOL
23 : 2992738457 { 0xb2619099 -1302228839 -1.76222527e229 } : BV:32
24 : eq(8, 23) : BOOL
25 : 190 { 0xbe -66 } : BV:8
26 : 4292853250 { 0xffdfbe02 -2114046 -1.74798607e128 } : BV:32
27 : eq(8, 26) : BOOL
28 : eq(8, 7) : BOOL
29 : 2992738459 { 0xb261909b -1302228837 -1.76222550e229 } : BV:32
30 : eq(8, 29) : BOOL
31 : 255 { 0xff -1 } : BV:8
32 : 2992738456 { 0xb2619098 -1302228840 -1.76222515e229 } : BV:32
33 : eq(8, 32) : BOOL
34 : 223 { 0xdf -33 } : BV:8
35 : ite(33, 11, 34) : BV:8
36 : ite(30, 31, 35) : BV:8
37 : ite(28, 11, 36) : BV:8
38 : ite(27, 11, 37) : BV:8
39 : ite(24, 25, 38) : BV:8
40 : ite(22, 11, 39) : BV:8
41 : ite(20, 11, 40) : BV:8
42 : ite(17, 18, 41) : BV:8
43 : ite(15, 11, 42) : BV:8
44 : ite(13, 11, 43) : BV:8
45 : ite(10, 11, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 6, 7) : BV:32
48 : eq(47, 9) : BOOL
49 : eq(47, 12) : BOOL
50 : eq(47, 14) : BOOL
51 : eq(47, 16) : BOOL
52 : eq(47, 19) : BOOL
53 : eq(47, 21) : BOOL
54 : eq(47, 23) : BOOL
55 : eq(47, 26) : BOOL
56 : eq(47, 7) : BOOL
57 : eq(47, 29) : BOOL
58 : eq(47, 32) : BOOL
59 : ite(58, 11, 34) : BV:8
60 : ite(57, 31, 59) : BV:8
61 : ite(56, 11, 60) : BV:8
62 : ite(55, 11, 61) : BV:8
63 : ite(54, 25, 62) : BV:8
64 : ite(53, 11, 63) : BV:8
65 : ite(52, 11, 64) : BV:8
66 : ite(51, 18, 65) : BV:8
67 : ite(50, 11, 66) : BV:8
68 : ite(49, 11, 67) : BV:8
69 : ite(48, 11, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 6, 7) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : eq(71, 19) : BOOL
77 : eq(71, 21) : BOOL
78 : eq(71, 23) : BOOL
79 : eq(71, 26) : BOOL
80 : eq(71, 7) : BOOL
81 : eq(71, 29) : BOOL
82 : eq(71, 32) : BOOL
83 : ite(82, 11, 34) : BV:8
84 : ite(81, 31, 83) : BV:8
85 : ite(80, 11, 84) : BV:8
86 : ite(79, 11, 85) : BV:8
87 : ite(78, 25, 86) : BV:8
88 : ite(77, 11, 87) : BV:8
89 : ite(76, 11, 88) : BV:8
90 : ite(75, 18, 89) : BV:8
91 : ite(74, 11, 90) : BV:8
92 : ite(73, 11, 91) : BV:8
93 : ite(72, 11, 92) : BV:8
94 : bvadd(6, 7) : BV:32
95 : eq(94, 9) : BOOL
96 : eq(94, 12) : BOOL
97 : eq(94, 14) : BOOL
98 : eq(94, 16) : BOOL
99 : eq(94, 19) : BOOL
100 : eq(94, 21) : BOOL
101 : eq(94, 23) : BOOL
102 : eq(94, 26) : BOOL
103 : eq(94, 7) : BOOL
104 : eq(94, 29) : BOOL
105 : eq(94, 32) : BOOL
106 : ite(105, 11, 34) : BV:8
107 : ite(104, 31, 106) : BV:8
108 : ite(103, 11, 107) : BV:8
109 : ite(102, 11, 108) : BV:8
110 : ite(101, 25, 109) : BV:8
111 : ite(100, 11, 110) : BV:8
112 : ite(99, 11, 111) : BV:8
113 : ite(98, 18, 112) : BV:8
114 : ite(97, 11, 113) : BV:8
115 : ite(96, 11, 114) : BV:8
116 : ite(95, 11, 115) : BV:8
117 : bvconcat(45, 69, 93, 116) : BV:32
118 : ite(3, 2, 117) : BV:32
119 : ite(3, 2, 118) : BV:32
120 : lambda(1, 119) : FUNCTION[BV:32 -> BV:32]
121 : sym_const(120) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L2%7%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
2023132795
=counter_example_end
=global nodece 17 num_edges_traversed 4
=global nodece 17 nodece_visted_pcs: 
L2%7%bbentry_Lfor.cond%1%bbentry
=global nodece 18
=global nodece 18 nodece z3.ce277.num_edges_traversed1
=global nodece 18 nodece_path
=global nodece 18 nodece_path.graph_edge_composition
(L2%7%bbentry_Lfor.cond%1%bbentry=>L2%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 18 nodece_cached_counterexample
=counter_example_begin z3.ce277 62b029a7b3c60eb6bc76d7f324ae473
=input.spec-%var-x-1
1 : Lambda922Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda923Var : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry
1 : Lambda927Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda928Var : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 2, 28) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 674980895 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 674980896; 674980899 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 674980900; 3692064099 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3692064100; 3692064103 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3692064104; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 674980896 { 0x283b6420 +1.46399307e209 } : BV:32
=input.dst.llvm-%n
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3692064100 { 0xdc106d64 -602903196 -1.12833833e57 } : BV:32
=input.dst.llvm-%x
1 : 2316741256 { 0x8a16aa88 -1978226040 -1.17707920e149 } : BV:32
=input.spec-%var-i-0.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-ret-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 1857031486 { 0x6eb00d3e +1.37540411e94 } : BV:32
=input.spec-%tmpvar-8.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 2068775614 { 0x7b4f02be +1.61727118e119 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 674980896 { 0x283b6420 +1.46399307e209 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 674980899 { 0x283b6423 +1.46399343e209 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3692064100 { 0xdc106d64 -602903196 -1.12833833e57 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3692064103 { 0xdc106d67 -602903193 -1.12833869e57 } : BV:32
=input.spec-%var-x-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry.1.1
1 : Lambda896Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 2, 18) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L2%7%bbentry.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
66460618
=counter_example_end
=global nodece 18 num_edges_traversed 1
=global nodece 18 nodece_visted_pcs: 
L2%7%bbentry_Lfor.cond%1%bbentry
=global nodece 19
=global nodece 19 nodece z3.ce451.num_edges_traversed2
=global nodece 19 nodece_path
=global nodece 19 nodece_path.graph_edge_composition
(epsilon)
=global nodece 19 nodece_cached_counterexample
=counter_example_begin z3.ce451 972238be4f2eb44322d1432c96afd6d
=input.spec-%var-x-1
1 : Lambda922Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda923Var : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry
1 : Lambda927Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda928Var : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 2, 28) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 674980895 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 674980896; 674980899 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 674980900; 3692064099 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3692064100; 3692064103 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3692064104; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 674980896 { 0x283b6420 +1.46399307e209 } : BV:32
=input.dst.llvm-%n
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3692064100 { 0xdc106d64 -602903196 -1.12833833e57 } : BV:32
=input.dst.llvm-%x
1 : 2316741256 { 0x8a16aa88 -1978226040 -1.17707920e149 } : BV:32
=input.spec-%var-i-0.L2%7%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%var-ret-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 1857031487 { 0x6eb00d3f +1.37540423e94 } : BV:32
=input.spec-%tmpvar-8.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 2068775615 { 0x7b4f02bf +1.61727130e119 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 674980896 { 0x283b6420 +1.46399307e209 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 674980899 { 0x283b6423 +1.46399343e209 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3692064100 { 0xdc106d64 -602903196 -1.12833833e57 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3692064103 { 0xdc106d67 -602903193 -1.12833869e57 } : BV:32
=input.spec-%var-x-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry.1.1
1 : Lambda896Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 2, 18) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L2%7%bbentry.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
66460618
=counter_example_end
=global nodece 19 num_edges_traversed 2
=global nodece 19 nodece_visted_pcs: 
L2%7%bbentry_Lfor.cond%1%bbentry
=global nodece 20
=global nodece 20 nodece z3.ce465.num_edges_traversed1
=global nodece 20 nodece_path
=global nodece 20 nodece_path.graph_edge_composition
(L2%7%bbentry_Lfor.cond%1%bbentry=>L2%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 20 nodece_cached_counterexample
=counter_example_begin z3.ce465 ee52c0ebf89b25a9902925756d3d11
=input.spec-%var-x-1
1 : Lambda1245Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 5 { 0x5 +1.59e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 6 { 0x6 +1.71e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1246Var : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
=input.spec-%var-x-0.L2%7%bbentry
1 : Lambda1250Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 5 { 0x5 +1.59e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 6 { 0x6 +1.71e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1251Var : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : bvule(2, 17) : BOOL
21 : bvule(17, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(8, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : ite(25, 13, 13) : BOOL
27 : ite(22, 7, 26) : BOOL
28 : and(20, 24) : BOOL
29 : ite(28, 2, 2) : BV:32
30 : ite(27, 2, 29) : BV:32
31 : ite(19, 2, 30) : BV:32
32 : lambda(17, 31) : FUNCTION[BV:32 -> BV:32]
33 : map(16, 32) : MAP[BV:32 -> BV:32]
34 : sym_const(33) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 137364547 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 137364548; 137364551 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 137364552; 3623104583 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3623104584; 3623104587 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3623104588; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 137364548 { 0x8300444 +1.37513017e145 } : BV:32
=input.dst.llvm-%n
1 : 6 { 0x6 +1.71e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3623104584 { 0xd7f43048 -671862712 -1.90772342e48 } : BV:32
=input.dst.llvm-%x
1 : 2147483640 { 0x7ffffff8 +1.99999904e128 } : BV:32
=input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 12 { 0xc +1.143e129 } : BV:32
=input.spec-%var-i-0.L2%7%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-2.L2%7%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-0.L2%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 5 { 0x5 +1.59e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 6 { 0x6 +1.71e129 } : BV:32
9 : bvule(8, 2) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(2, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : ite(15, 16, 1) : BV:32
18 : unit : UNIT
19 : eq(2, 2) : BOOL
20 : and(3, 11) : BOOL
21 : ite(20, 1, 1) : BV:32
22 : ite(15, 1, 21) : BV:32
23 : ite(19, 1, 22) : BV:32
24 : sum(17, 18, 23) : SUM[UNIT,BV:32]
25 : sym_const(24) : SUM[UNIT,BV:32]
=input.spec-%var-ret-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 186897433 { 0xb23d419 +1.27991020e151 } : BV:32
=input.spec-%tmpvar-8.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-3.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 2020246556 { 0x786a841c +1.83215665e113 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%add.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry
1 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
=input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 12 { 0xc +1.143e129 } : BV:32
=input.dst.llvm-%inc.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 137364548 { 0x8300444 +1.37513017e145 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 137364551 { 0x8300447 +1.37513053e145 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3623104584 { 0xd7f43048 -671862712 -1.90772342e48 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3623104587 { 0xd7f4304b -671862709 -1.90772378e48 } : BV:32
=input.spec-%var-x-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry.1.1
1 : Lambda1219Var : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 1) : BOOL
6 : 5 { 0x5 +1.59e129 } : BV:32
7 : bvule(1, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 6 { 0x6 +1.71e129 } : BV:32
11 : bvule(10, 1) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(1, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : and(5, 13) : BOOL
19 : ite(18, 4, 4) : BV:32
20 : ite(17, 4, 19) : BV:32
21 : ite(3, 4, 20) : BV:32
22 : lambda(1, 21) : FUNCTION[BV:32 -> BV:32]
23 : sym_const(22) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 5 ] -> true, [ 6; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L2%7%bbentry.0.1
1 : ([ 0; 5 ] -> true, [ 6; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
1291313506
=counter_example_end
=global nodece 20 num_edges_traversed 1
=global nodece 20 nodece_visted_pcs: 
L2%7%bbentry_Lfor.cond%1%bbentry
=global nodece 21
=global nodece 21 nodece z3.ce495.num_edges_traversed2
=global nodece 21 nodece_path
=global nodece 21 nodece_path.graph_edge_composition
(epsilon)
=global nodece 21 nodece_cached_counterexample
=counter_example_begin z3.ce495 7f8c28b27b5bc4b525bde755144e91a1
=input.spec-%var-x-1
1 : Lambda1245Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 5 { 0x5 +1.59e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 6 { 0x6 +1.71e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1246Var : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry
1 : Lambda1250Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 5 { 0x5 +1.59e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 6 { 0x6 +1.71e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1251Var : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : bvule(2, 17) : BOOL
21 : bvule(17, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(8, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : ite(25, 13, 13) : BOOL
27 : ite(22, 7, 26) : BOOL
28 : and(20, 24) : BOOL
29 : ite(28, 2, 2) : BV:32
30 : ite(27, 2, 29) : BV:32
31 : ite(19, 2, 30) : BV:32
32 : lambda(17, 31) : FUNCTION[BV:32 -> BV:32]
33 : map(16, 32) : MAP[BV:32 -> BV:32]
34 : sym_const(33) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 137364547 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 137364548; 137364551 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 137364552; 3623104583 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3623104584; 3623104587 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3623104588; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 137364548 { 0x8300444 +1.37513017e145 } : BV:32
=input.dst.llvm-%n
1 : 6 { 0x6 +1.71e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3623104584 { 0xd7f43048 -671862712 -1.90772342e48 } : BV:32
=input.dst.llvm-%x
1 : 2147483640 { 0x7ffffff8 +1.99999904e128 } : BV:32
=input.spec-%var-i-0.L2%7%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%var-ret-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 186897434 { 0xb23d41a +1.27991032e151 } : BV:32
=input.spec-%tmpvar-8.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 2020246557 { 0x786a841d +1.83215677e113 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 137364548 { 0x8300444 +1.37513017e145 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 137364551 { 0x8300447 +1.37513053e145 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3623104584 { 0xd7f43048 -671862712 -1.90772342e48 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3623104587 { 0xd7f4304b -671862709 -1.90772378e48 } : BV:32
=input.spec-%var-x-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry.1.1
1 : Lambda1219Var : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 1) : BOOL
6 : 5 { 0x5 +1.59e129 } : BV:32
7 : bvule(1, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 6 { 0x6 +1.71e129 } : BV:32
11 : bvule(10, 1) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(1, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : and(5, 13) : BOOL
19 : ite(18, 4, 4) : BV:32
20 : ite(17, 4, 19) : BV:32
21 : ite(3, 4, 20) : BV:32
22 : lambda(1, 21) : FUNCTION[BV:32 -> BV:32]
23 : sym_const(22) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 5 ] -> true, [ 6; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L2%7%bbentry.0.1
1 : ([ 0; 5 ] -> true, [ 6; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
1291313506
=counter_example_end
=global nodece 21 num_edges_traversed 2
=global nodece 21 nodece_visted_pcs: 
L2%7%bbentry_Lfor.cond%1%bbentry
=global nodece 22
=global nodece 22 nodece z3v487.ce518.num_edges_traversed1
=global nodece 22 nodece_path
=global nodece 22 nodece_path.graph_edge_composition
(L2%7%bbentry_Lfor.cond%1%bbentry=>L2%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 22 nodece_cached_counterexample
=counter_example_begin z3v487.ce518 84d0b62cefd9ecb5d2c750ce298cac6c
=input.spec-%var-x-1
1 : Lambda1361Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 5 { 0x5 +1.59e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1362Var : BV:32
18 : eq(17, 4) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 2, 28) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 2885714744 { 0xac008338 -1409252552 -1.400447e217 } : BV:32
=input.spec-%var-x-0.L2%7%bbentry
1 : Lambda1367Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 5 { 0x5 +1.59e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1368Var : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 8; 255 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 256; 259 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 260; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 256 { 0x100 +1.3051e129 } : BV:32
=input.dst.llvm-%n
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%x
1 : 2885714728 { 0xac008328 -1409252568 -1.400257e217 } : BV:32
=input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.spec-%var-i-0.L2%7%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%tmpvar-2.L2%7%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%tmpvar-0.L2%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : bvule(1, 2) : BOOL
4 : bvule(2, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 5 { 0x5 +1.59e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : and(3, 10) : BOOL
19 : ite(18, 1, 1) : BV:32
20 : sum(16, 17, 19) : SUM[UNIT,BV:32]
21 : sym_const(20) : SUM[UNIT,BV:32]
=input.spec-%var-ret-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 1511376640 { 0x5a15c700 +1.17013549e53 } : BV:32
=input.spec-%tmpvar-8.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-3.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 745295118 { 0x2c6c4d0e +1.84610152e217 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%add.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry
1 : 2885714744 { 0xac008338 -1409252552 -1.400447e217 } : BV:32
=input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%inc.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 256 { 0x100 +1.3051e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 259 { 0x103 +1.3087e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.spec-%var-x-1.1.1
1 : Lambda1335Var : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 1) : BOOL
6 : bvule(1, 2) : BOOL
7 : and(5, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 5 { 0x5 +1.59e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(5, 12) : BOOL
18 : ite(17, 4, 4) : BV:32
19 : ite(16, 4, 18) : BV:32
20 : ite(3, 4, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4 ] -> true, [ 5; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L2%7%bbentry.0.1
1 : ([ 0; 4 ] -> true, [ 5; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
3941122249
=counter_example_end
=global nodece 22 num_edges_traversed 1
=global nodece 22 nodece_visted_pcs: 
L2%7%bbentry_Lfor.cond%1%bbentry
=global nodece 23
=global nodece 23 nodece z3v487.ce562.num_edges_traversed0
=global nodece 23 nodece_path
=global nodece 23 nodece_path.graph_edge_composition
(epsilon)
=global nodece 23 nodece_cached_counterexample
=counter_example_begin z3v487.ce562 d2c0e1992cc61776a74f8a0af9ec857
=input.spec-%var-x-1
1 : Lambda1720Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1300617418 { 0x4d85d8ca +1.4567837e28 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1300617419 { 0x4d85d8cb +1.4567849e28 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1721Var : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 2, 28) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry
1 : Lambda1726Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1300617418 { 0x4d85d8ca +1.4567837e28 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1300617419 { 0x4d85d8cb +1.4567849e28 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1727Var : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 8; 1807 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1808; 1811 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1812; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n
1 : 1300617419 { 0x4d85d8cb +1.4567849e28 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1808 { 0x710 +1.21553e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L2%7%bbentry
1 : 1300617419 { 0x4d85d8cb +1.4567849e28 } : BV:32
=input.spec-%var-ret-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1300617419 { 0x4d85d8cb +1.4567849e28 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1808 { 0x710 +1.21553e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1811 { 0x713 +1.21588e129 } : BV:32
=input.spec-%var-x-1.1.1
1 : Lambda1694Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 1300617418 { 0x4d85d8ca +1.4567837e28 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 1300617419 { 0x4d85d8cb +1.4567849e28 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 2, 18) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 1300617418 ] -> true, [ 1300617419; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L2%7%bbentry.0.1
1 : ([ 0; 1300617418 ] -> true, [ 1300617419; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
2371101326
=counter_example_end
=global nodece 23 num_edges_traversed 0
=global nodece 23 nodece_visted_pcs: 
L2%7%bbentry_Lfor.cond%1%bbentry
=global nodece 24
=global nodece 24 nodece z3.ce563.num_edges_traversed0
=global nodece 24 nodece_path
=global nodece 24 nodece_path.graph_edge_composition
(epsilon)
=global nodece 24 nodece_cached_counterexample
=counter_example_begin z3.ce563 603d18868a8e929e733d247c472ce
=input.spec-%var-x-1
1 : Lambda1740Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1072438393 { 0x3fec1c79 +1.84461891e0 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1072438394 { 0x3fec1c7a +1.84461903e0 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1741Var : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry
1 : Lambda1745Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1072438393 { 0x3fec1c79 +1.84461891e0 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1072438394 { 0x3fec1c7a +1.84461903e0 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1746Var : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 2, 28) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 280322055 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 280322056; 280322059 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 280322060; 3564143095 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3564143096; 3564143099 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3564143100; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3564143096 { 0xd47081f8 -730824200 -1.87896633e41 } : BV:32
=input.dst.llvm-%n
1 : 1072438394 { 0x3fec1c7a +1.84461903e0 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 280322056 { 0x10b56008 +1.41699314e162 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L2%7%bbentry
1 : 1072438394 { 0x3fec1c7a +1.84461903e0 } : BV:32
=input.spec-%var-ret-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1072438394 { 0x3fec1c7a +1.84461903e0 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3564143096 { 0xd47081f8 -730824200 -1.87896633e41 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3564143099 { 0xd47081fb -730824197 -1.87896668e41 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 280322056 { 0x10b56008 +1.41699314e162 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 280322059 { 0x10b5600b +1.41699349e162 } : BV:32
=input.spec-%var-x-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry.1.1
1 : Lambda1703Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 1072438393 { 0x3fec1c79 +1.84461891e0 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 1072438394 { 0x3fec1c7a +1.84461903e0 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 2, 18) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 1072438393 ] -> true, [ 1072438394; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L2%7%bbentry.0.1
1 : ([ 0; 1072438393 ] -> true, [ 1072438394; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
138194400
=counter_example_end
=global nodece 24 num_edges_traversed 0
=global nodece 24 nodece_visted_pcs: 
L2%7%bbentry_Lfor.cond%1%bbentry
=global nodece 25
=global nodece 25 nodece z3.ce805.num_edges_traversed2
=global nodece 25 nodece_path
=global nodece 25 nodece_path.graph_edge_composition
(epsilon)
=global nodece 25 nodece_cached_counterexample
=counter_example_begin z3.ce805 f5868c2eac71e88a9d4dd6f263e75849
=retaddr_const
1 : 571456685 { 0x220fbcad +1.12294542e197 } : BV:32
=input.spec-%var-x-1
1 : Lambda46Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda47Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry
1 : Lambda46Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda47Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-6.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1422791455 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1422791456; 1422791459 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1422791460; 2261127551 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2261127552; 2261127555 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2261127556; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2261127552 { 0x86c61180 -2033839744 -1.54740905e142 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1422791456 { 0x54ce1320 +1.60995864e42 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-5.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-0.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-0.L2%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 0 { 0x0 } : BOOL
7 : ite(5, 6, 6) : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : ite(7, 8, 1) : BV:32
10 : unit : UNIT
11 : ite(5, 1, 1) : BV:32
12 : sum(9, 10, 11) : SUM[UNIT,BV:32]
13 : sym_const(12) : SUM[UNIT,BV:32]
=input.spec-%var-ret-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-indir_tgt.E0%0%d
1 : 571456685 { 0x220fbcad +1.12294542e197 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 1015735436 { 0x3c8ae48c +1.8509969e250 } : BV:32
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 924236686 { 0x3716bb8e +1.17759871e239 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2261127552 { 0x86c61180 -2033839744 -1.54740905e142 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2261127555 { 0x86c61183 -2033839741 -1.54740941e142 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1422791456 { 0x54ce1320 +1.60995864e42 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1422791459 { 0x54ce1323 +1.60995900e42 } : BV:32
=input.spec-%var-x-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L2%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
190170042
=counter_example_end
=global nodece 25 num_edges_traversed 2
=global nodece 25 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 26
=global nodece 26 nodece z3v487.ce787.num_edges_traversed2
=global nodece 26 nodece_path
=global nodece 26 nodece_path.graph_edge_composition
(epsilon)
=global nodece 26 nodece_cached_counterexample
=counter_example_begin z3v487.ce787 2caf3e947a883a9451727fbdde2d3668
=retaddr_const
1 : 496797125 { 0x1d9c85c5 +1.22283232e188 } : BV:32
=input.spec-%var-x-1
1 : Lambda141Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda142Var : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(12, 10) : BV:32
14 : 16 { 0x10 +1.190e129 } : BV:32
15 : bvadd(11, 13, 14) : BV:32
16 : 3588 { 0xe04 +1.42772e129 } : BV:32
17 : eq(15, 16) : BOOL
18 : 16 { 0x10 } : BV:8
19 : 0 { 0x0 } : BV:8
20 : ite(17, 18, 19) : BV:8
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : bvadd(21, 13, 14) : BV:32
23 : eq(22, 16) : BOOL
24 : ite(23, 18, 19) : BV:8
25 : 1 { 0x1 +1.11e129 } : BV:32
26 : bvadd(25, 13, 14) : BV:32
27 : eq(26, 16) : BOOL
28 : ite(27, 18, 19) : BV:8
29 : bvadd(13, 14) : BV:32
30 : eq(29, 16) : BOOL
31 : ite(30, 18, 19) : BV:8
32 : bvconcat(20, 24, 28, 31) : BV:32
33 : lambda(10, 32) : FUNCTION[BV:32 -> BV:32]
34 : map(9, 33) : MAP[BV:32 -> BV:32]
35 : sym_const(34) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry
1 : Lambda141Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda142Var : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(12, 10) : BV:32
14 : 16 { 0x10 +1.190e129 } : BV:32
15 : bvadd(11, 13, 14) : BV:32
16 : 3588 { 0xe04 +1.42772e129 } : BV:32
17 : eq(15, 16) : BOOL
18 : 16 { 0x10 } : BV:8
19 : 0 { 0x0 } : BV:8
20 : ite(17, 18, 19) : BV:8
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : bvadd(21, 13, 14) : BV:32
23 : eq(22, 16) : BOOL
24 : ite(23, 18, 19) : BV:8
25 : 1 { 0x1 +1.11e129 } : BV:32
26 : bvadd(25, 13, 14) : BV:32
27 : eq(26, 16) : BOOL
28 : ite(27, 18, 19) : BV:8
29 : bvadd(13, 14) : BV:32
30 : eq(29, 16) : BOOL
31 : ite(30, 18, 19) : BV:8
32 : bvconcat(20, 24, 28, 31) : BV:32
33 : lambda(10, 32) : FUNCTION[BV:32 -> BV:32]
34 : map(9, 33) : MAP[BV:32 -> BV:32]
35 : sym_const(34) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-6.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3587 ] -> 0, [ 3588; 3588 ] -> 16, [ 3589; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3587 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3588; 3591 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3592; 11007 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 11008; 11011 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 11012; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 11008 { 0x2b00 +1.131225e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3588 { 0xe04 +1.42772e129 } : BV:32
=input.dst.llvm-%x
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.spec-%var-i-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-5.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-0.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-0.L2%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 0 { 0x0 } : BOOL
7 : ite(5, 6, 6) : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : ite(7, 8, 1) : BV:32
10 : unit : UNIT
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(12, 1) : BV:32
14 : 16 { 0x10 +1.190e129 } : BV:32
15 : bvadd(11, 13, 14) : BV:32
16 : 3588 { 0xe04 +1.42772e129 } : BV:32
17 : eq(15, 16) : BOOL
18 : 16 { 0x10 } : BV:8
19 : 0 { 0x0 } : BV:8
20 : ite(17, 18, 19) : BV:8
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : bvadd(21, 13, 14) : BV:32
23 : eq(22, 16) : BOOL
24 : ite(23, 18, 19) : BV:8
25 : bvadd(8, 13, 14) : BV:32
26 : eq(25, 16) : BOOL
27 : ite(26, 18, 19) : BV:8
28 : bvadd(13, 14) : BV:32
29 : eq(28, 16) : BOOL
30 : ite(29, 18, 19) : BV:8
31 : bvconcat(20, 24, 27, 30) : BV:32
32 : sum(9, 10, 31) : SUM[UNIT,BV:32]
33 : sym_const(32) : SUM[UNIT,BV:32]
=input.spec-%var-ret-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-indir_tgt.E0%0%d
1 : 496797125 { 0x1d9c85c5 +1.22283232e188 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 951221365 { 0x38b27c75 +1.39442312e242 } : BV:32
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 357357012 { 0x154cd5d4 +1.60027551e171 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 11008 { 0x2b00 +1.131225e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 11011 { 0x2b03 +1.131261e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3588 { 0xe04 +1.42772e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3591 { 0xe07 +1.42808e129 } : BV:32
=input.spec-%var-x-1.1.1
1 : Lambda121Var : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(3, 1) : BV:32
5 : 16 { 0x10 +1.190e129 } : BV:32
6 : bvadd(2, 4, 5) : BV:32
7 : 3588 { 0xe04 +1.42772e129 } : BV:32
8 : eq(6, 7) : BOOL
9 : 16 { 0x10 } : BV:8
10 : 0 { 0x0 } : BV:8
11 : ite(8, 9, 10) : BV:8
12 : 2 { 0x2 +1.23e129 } : BV:32
13 : bvadd(12, 4, 5) : BV:32
14 : eq(13, 7) : BOOL
15 : ite(14, 9, 10) : BV:8
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : bvadd(16, 4, 5) : BV:32
18 : eq(17, 7) : BOOL
19 : ite(18, 9, 10) : BV:8
20 : bvadd(4, 5) : BV:32
21 : eq(20, 7) : BOOL
22 : ite(21, 9, 10) : BV:8
23 : bvconcat(11, 15, 19, 22) : BV:32
24 : lambda(1, 23) : FUNCTION[BV:32 -> BV:32]
25 : sym_const(24) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry.1.1
1 : Lambda122Var : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(3, 1) : BV:32
5 : 16 { 0x10 +1.190e129 } : BV:32
6 : bvadd(2, 4, 5) : BV:32
7 : 3588 { 0xe04 +1.42772e129 } : BV:32
8 : eq(6, 7) : BOOL
9 : 16 { 0x10 } : BV:8
10 : 0 { 0x0 } : BV:8
11 : ite(8, 9, 10) : BV:8
12 : 2 { 0x2 +1.23e129 } : BV:32
13 : bvadd(12, 4, 5) : BV:32
14 : eq(13, 7) : BOOL
15 : ite(14, 9, 10) : BV:8
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : bvadd(16, 4, 5) : BV:32
18 : eq(17, 7) : BOOL
19 : ite(18, 9, 10) : BV:8
20 : bvadd(4, 5) : BV:32
21 : eq(20, 7) : BOOL
22 : ite(21, 9, 10) : BV:8
23 : bvconcat(11, 15, 19, 22) : BV:32
24 : lambda(1, 23) : FUNCTION[BV:32 -> BV:32]
25 : sym_const(24) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L2%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
4261048125
=counter_example_end
=global nodece 26 num_edges_traversed 2
=global nodece 26 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 27
=global nodece 27 nodece z3.ce769.num_edges_traversed2
=global nodece 27 nodece_path
=global nodece 27 nodece_path.graph_edge_composition
(epsilon)
=global nodece 27 nodece_cached_counterexample
=counter_example_begin z3.ce769 7661df5f8ece61c995cb6ea87999894
=retaddr_const
1 : 1634940244 { 0x61733554 +1.90006494e67 } : BV:32
=input.spec-%var-x-1
1 : Lambda210Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda211Var : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(12, 10) : BV:32
14 : 3738566404 { 0xded5ff04 -556400892 -1.67184495e62 } : BV:32
15 : bvadd(11, 13, 14) : BV:32
16 : 104456193 { 0x639e001 +1.45214855e141 } : BV:32
17 : eq(15, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : 104456192 { 0x639e000 +1.45214843e141 } : BV:32
20 : eq(15, 19) : BOOL
21 : 104456195 { 0x639e003 +1.45214879e141 } : BV:32
22 : eq(15, 21) : BOOL
23 : 104456194 { 0x639e002 +1.45214867e141 } : BV:32
24 : eq(15, 23) : BOOL
25 : 3860121093 { 0xe614c605 -434846203 -1.16229307e77 } : BV:32
26 : eq(15, 25) : BOOL
27 : 255 { 0xff -1 } : BV:8
28 : 3860121095 { 0xe614c607 -434846201 -1.16229331e77 } : BV:32
29 : eq(15, 28) : BOOL
30 : 222 { 0xde -34 } : BV:8
31 : 3860121092 { 0xe614c604 -434846204 -1.16229295e77 } : BV:32
32 : eq(15, 31) : BOOL
33 : 4 { 0x4 } : BV:8
34 : 213 { 0xd5 -43 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(29, 30, 35) : BV:8
37 : ite(26, 27, 36) : BV:8
38 : ite(24, 18, 37) : BV:8
39 : ite(22, 18, 38) : BV:8
40 : ite(20, 18, 39) : BV:8
41 : ite(17, 18, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 13, 14) : BV:32
44 : eq(43, 16) : BOOL
45 : eq(43, 19) : BOOL
46 : eq(43, 21) : BOOL
47 : eq(43, 23) : BOOL
48 : eq(43, 25) : BOOL
49 : eq(43, 28) : BOOL
50 : eq(43, 31) : BOOL
51 : ite(50, 33, 34) : BV:8
52 : ite(49, 30, 51) : BV:8
53 : ite(48, 27, 52) : BV:8
54 : ite(47, 18, 53) : BV:8
55 : ite(46, 18, 54) : BV:8
56 : ite(45, 18, 55) : BV:8
57 : ite(44, 18, 56) : BV:8
58 : 1 { 0x1 +1.11e129 } : BV:32
59 : bvadd(58, 13, 14) : BV:32
60 : eq(59, 16) : BOOL
61 : eq(59, 19) : BOOL
62 : eq(59, 21) : BOOL
63 : eq(59, 23) : BOOL
64 : eq(59, 25) : BOOL
65 : eq(59, 28) : BOOL
66 : eq(59, 31) : BOOL
67 : ite(66, 33, 34) : BV:8
68 : ite(65, 30, 67) : BV:8
69 : ite(64, 27, 68) : BV:8
70 : ite(63, 18, 69) : BV:8
71 : ite(62, 18, 70) : BV:8
72 : ite(61, 18, 71) : BV:8
73 : ite(60, 18, 72) : BV:8
74 : bvadd(13, 14) : BV:32
75 : eq(74, 16) : BOOL
76 : eq(74, 19) : BOOL
77 : eq(74, 21) : BOOL
78 : eq(74, 23) : BOOL
79 : eq(74, 25) : BOOL
80 : eq(74, 28) : BOOL
81 : eq(74, 31) : BOOL
82 : ite(81, 33, 34) : BV:8
83 : ite(80, 30, 82) : BV:8
84 : ite(79, 27, 83) : BV:8
85 : ite(78, 18, 84) : BV:8
86 : ite(77, 18, 85) : BV:8
87 : ite(76, 18, 86) : BV:8
88 : ite(75, 18, 87) : BV:8
89 : bvconcat(41, 57, 73, 88) : BV:32
90 : lambda(10, 89) : FUNCTION[BV:32 -> BV:32]
91 : map(9, 90) : MAP[BV:32 -> BV:32]
92 : sym_const(91) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry
1 : Lambda210Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda211Var : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(12, 10) : BV:32
14 : 3738566404 { 0xded5ff04 -556400892 -1.67184495e62 } : BV:32
15 : bvadd(11, 13, 14) : BV:32
16 : 104456193 { 0x639e001 +1.45214855e141 } : BV:32
17 : eq(15, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : 104456192 { 0x639e000 +1.45214843e141 } : BV:32
20 : eq(15, 19) : BOOL
21 : 104456195 { 0x639e003 +1.45214879e141 } : BV:32
22 : eq(15, 21) : BOOL
23 : 104456194 { 0x639e002 +1.45214867e141 } : BV:32
24 : eq(15, 23) : BOOL
25 : 3860121093 { 0xe614c605 -434846203 -1.16229307e77 } : BV:32
26 : eq(15, 25) : BOOL
27 : 255 { 0xff -1 } : BV:8
28 : 3860121095 { 0xe614c607 -434846201 -1.16229331e77 } : BV:32
29 : eq(15, 28) : BOOL
30 : 222 { 0xde -34 } : BV:8
31 : 3860121092 { 0xe614c604 -434846204 -1.16229295e77 } : BV:32
32 : eq(15, 31) : BOOL
33 : 4 { 0x4 } : BV:8
34 : 213 { 0xd5 -43 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(29, 30, 35) : BV:8
37 : ite(26, 27, 36) : BV:8
38 : ite(24, 18, 37) : BV:8
39 : ite(22, 18, 38) : BV:8
40 : ite(20, 18, 39) : BV:8
41 : ite(17, 18, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 13, 14) : BV:32
44 : eq(43, 16) : BOOL
45 : eq(43, 19) : BOOL
46 : eq(43, 21) : BOOL
47 : eq(43, 23) : BOOL
48 : eq(43, 25) : BOOL
49 : eq(43, 28) : BOOL
50 : eq(43, 31) : BOOL
51 : ite(50, 33, 34) : BV:8
52 : ite(49, 30, 51) : BV:8
53 : ite(48, 27, 52) : BV:8
54 : ite(47, 18, 53) : BV:8
55 : ite(46, 18, 54) : BV:8
56 : ite(45, 18, 55) : BV:8
57 : ite(44, 18, 56) : BV:8
58 : 1 { 0x1 +1.11e129 } : BV:32
59 : bvadd(58, 13, 14) : BV:32
60 : eq(59, 16) : BOOL
61 : eq(59, 19) : BOOL
62 : eq(59, 21) : BOOL
63 : eq(59, 23) : BOOL
64 : eq(59, 25) : BOOL
65 : eq(59, 28) : BOOL
66 : eq(59, 31) : BOOL
67 : ite(66, 33, 34) : BV:8
68 : ite(65, 30, 67) : BV:8
69 : ite(64, 27, 68) : BV:8
70 : ite(63, 18, 69) : BV:8
71 : ite(62, 18, 70) : BV:8
72 : ite(61, 18, 71) : BV:8
73 : ite(60, 18, 72) : BV:8
74 : bvadd(13, 14) : BV:32
75 : eq(74, 16) : BOOL
76 : eq(74, 19) : BOOL
77 : eq(74, 21) : BOOL
78 : eq(74, 23) : BOOL
79 : eq(74, 25) : BOOL
80 : eq(74, 28) : BOOL
81 : eq(74, 31) : BOOL
82 : ite(81, 33, 34) : BV:8
83 : ite(80, 30, 82) : BV:8
84 : ite(79, 27, 83) : BV:8
85 : ite(78, 18, 84) : BV:8
86 : ite(77, 18, 85) : BV:8
87 : ite(76, 18, 86) : BV:8
88 : ite(75, 18, 87) : BV:8
89 : bvconcat(41, 57, 73, 88) : BV:32
90 : lambda(10, 89) : FUNCTION[BV:32 -> BV:32]
91 : map(9, 90) : MAP[BV:32 -> BV:32]
92 : sym_const(91) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-6.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 104456191 ] -> 213, [ 104456192; 104456195 ] -> 0, [ 104456196; 3860121091 ] -> 213, [ 3860121092; 3860121092 ] -> 4, [ 3860121093; 3860121093 ] -> 255, [ 3860121094; 3860121094 ] -> 213, [ 3860121095; 3860121095 ] -> 222, [ 3860121096; 4294967295 ] -> 213, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 104456191 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 104456192; 104456195 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 104456196; 3860121091 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3860121092; 3860121095 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3860121096; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 104456192 { 0x639e000 +1.45214843e141 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3860121092 { 0xe614c604 -434846204 -1.16229295e77 } : BV:32
=input.dst.llvm-%x
1 : 3738566404 { 0xded5ff04 -556400892 -1.67184495e62 } : BV:32
=input.spec-%var-i-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-5.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-0.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-0.L2%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 0 { 0x0 } : BOOL
7 : ite(5, 6, 6) : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : ite(7, 8, 1) : BV:32
10 : unit : UNIT
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(12, 1) : BV:32
14 : 3738566404 { 0xded5ff04 -556400892 -1.67184495e62 } : BV:32
15 : bvadd(11, 13, 14) : BV:32
16 : 104456193 { 0x639e001 +1.45214855e141 } : BV:32
17 : eq(15, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : 104456192 { 0x639e000 +1.45214843e141 } : BV:32
20 : eq(15, 19) : BOOL
21 : 104456195 { 0x639e003 +1.45214879e141 } : BV:32
22 : eq(15, 21) : BOOL
23 : 104456194 { 0x639e002 +1.45214867e141 } : BV:32
24 : eq(15, 23) : BOOL
25 : 3860121093 { 0xe614c605 -434846203 -1.16229307e77 } : BV:32
26 : eq(15, 25) : BOOL
27 : 255 { 0xff -1 } : BV:8
28 : 3860121095 { 0xe614c607 -434846201 -1.16229331e77 } : BV:32
29 : eq(15, 28) : BOOL
30 : 222 { 0xde -34 } : BV:8
31 : 3860121092 { 0xe614c604 -434846204 -1.16229295e77 } : BV:32
32 : eq(15, 31) : BOOL
33 : 4 { 0x4 } : BV:8
34 : 213 { 0xd5 -43 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(29, 30, 35) : BV:8
37 : ite(26, 27, 36) : BV:8
38 : ite(24, 18, 37) : BV:8
39 : ite(22, 18, 38) : BV:8
40 : ite(20, 18, 39) : BV:8
41 : ite(17, 18, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 13, 14) : BV:32
44 : eq(43, 16) : BOOL
45 : eq(43, 19) : BOOL
46 : eq(43, 21) : BOOL
47 : eq(43, 23) : BOOL
48 : eq(43, 25) : BOOL
49 : eq(43, 28) : BOOL
50 : eq(43, 31) : BOOL
51 : ite(50, 33, 34) : BV:8
52 : ite(49, 30, 51) : BV:8
53 : ite(48, 27, 52) : BV:8
54 : ite(47, 18, 53) : BV:8
55 : ite(46, 18, 54) : BV:8
56 : ite(45, 18, 55) : BV:8
57 : ite(44, 18, 56) : BV:8
58 : bvadd(8, 13, 14) : BV:32
59 : eq(58, 16) : BOOL
60 : eq(58, 19) : BOOL
61 : eq(58, 21) : BOOL
62 : eq(58, 23) : BOOL
63 : eq(58, 25) : BOOL
64 : eq(58, 28) : BOOL
65 : eq(58, 31) : BOOL
66 : ite(65, 33, 34) : BV:8
67 : ite(64, 30, 66) : BV:8
68 : ite(63, 27, 67) : BV:8
69 : ite(62, 18, 68) : BV:8
70 : ite(61, 18, 69) : BV:8
71 : ite(60, 18, 70) : BV:8
72 : ite(59, 18, 71) : BV:8
73 : bvadd(13, 14) : BV:32
74 : eq(73, 16) : BOOL
75 : eq(73, 19) : BOOL
76 : eq(73, 21) : BOOL
77 : eq(73, 23) : BOOL
78 : eq(73, 25) : BOOL
79 : eq(73, 28) : BOOL
80 : eq(73, 31) : BOOL
81 : ite(80, 33, 34) : BV:8
82 : ite(79, 30, 81) : BV:8
83 : ite(78, 27, 82) : BV:8
84 : ite(77, 18, 83) : BV:8
85 : ite(76, 18, 84) : BV:8
86 : ite(75, 18, 85) : BV:8
87 : ite(74, 18, 86) : BV:8
88 : bvconcat(41, 57, 72, 87) : BV:32
89 : sum(9, 10, 88) : SUM[UNIT,BV:32]
90 : sym_const(89) : SUM[UNIT,BV:32]
=input.spec-%var-ret-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-indir_tgt.E0%0%d
1 : 1634940244 { 0x61733554 +1.90006494e67 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 1977543493 { 0x75deeb45 +1.74155485e108 } : BV:32
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1228458022 { 0x4938c826 +1.44360804e19 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 104456192 { 0x639e000 +1.45214843e141 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 104456195 { 0x639e003 +1.45214879e141 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3860121092 { 0xe614c604 -434846204 -1.16229295e77 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3860121095 { 0xe614c607 -434846201 -1.16229331e77 } : BV:32
=input.spec-%var-x-1.1.1
1 : Lambda190Var : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(3, 1) : BV:32
5 : 3738566404 { 0xded5ff04 -556400892 -1.67184495e62 } : BV:32
6 : bvadd(2, 4, 5) : BV:32
7 : 104456193 { 0x639e001 +1.45214855e141 } : BV:32
8 : eq(6, 7) : BOOL
9 : 0 { 0x0 } : BV:8
10 : 104456192 { 0x639e000 +1.45214843e141 } : BV:32
11 : eq(6, 10) : BOOL
12 : 104456195 { 0x639e003 +1.45214879e141 } : BV:32
13 : eq(6, 12) : BOOL
14 : 104456194 { 0x639e002 +1.45214867e141 } : BV:32
15 : eq(6, 14) : BOOL
16 : 3860121093 { 0xe614c605 -434846203 -1.16229307e77 } : BV:32
17 : eq(6, 16) : BOOL
18 : 255 { 0xff -1 } : BV:8
19 : 3860121095 { 0xe614c607 -434846201 -1.16229331e77 } : BV:32
20 : eq(6, 19) : BOOL
21 : 222 { 0xde -34 } : BV:8
22 : 3860121092 { 0xe614c604 -434846204 -1.16229295e77 } : BV:32
23 : eq(6, 22) : BOOL
24 : 4 { 0x4 } : BV:8
25 : 213 { 0xd5 -43 } : BV:8
26 : ite(23, 24, 25) : BV:8
27 : ite(20, 21, 26) : BV:8
28 : ite(17, 18, 27) : BV:8
29 : ite(15, 9, 28) : BV:8
30 : ite(13, 9, 29) : BV:8
31 : ite(11, 9, 30) : BV:8
32 : ite(8, 9, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 4, 5) : BV:32
35 : eq(34, 7) : BOOL
36 : eq(34, 10) : BOOL
37 : eq(34, 12) : BOOL
38 : eq(34, 14) : BOOL
39 : eq(34, 16) : BOOL
40 : eq(34, 19) : BOOL
41 : eq(34, 22) : BOOL
42 : ite(41, 24, 25) : BV:8
43 : ite(40, 21, 42) : BV:8
44 : ite(39, 18, 43) : BV:8
45 : ite(38, 9, 44) : BV:8
46 : ite(37, 9, 45) : BV:8
47 : ite(36, 9, 46) : BV:8
48 : ite(35, 9, 47) : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : bvadd(49, 4, 5) : BV:32
51 : eq(50, 7) : BOOL
52 : eq(50, 10) : BOOL
53 : eq(50, 12) : BOOL
54 : eq(50, 14) : BOOL
55 : eq(50, 16) : BOOL
56 : eq(50, 19) : BOOL
57 : eq(50, 22) : BOOL
58 : ite(57, 24, 25) : BV:8
59 : ite(56, 21, 58) : BV:8
60 : ite(55, 18, 59) : BV:8
61 : ite(54, 9, 60) : BV:8
62 : ite(53, 9, 61) : BV:8
63 : ite(52, 9, 62) : BV:8
64 : ite(51, 9, 63) : BV:8
65 : bvadd(4, 5) : BV:32
66 : eq(65, 7) : BOOL
67 : eq(65, 10) : BOOL
68 : eq(65, 12) : BOOL
69 : eq(65, 14) : BOOL
70 : eq(65, 16) : BOOL
71 : eq(65, 19) : BOOL
72 : eq(65, 22) : BOOL
73 : ite(72, 24, 25) : BV:8
74 : ite(71, 21, 73) : BV:8
75 : ite(70, 18, 74) : BV:8
76 : ite(69, 9, 75) : BV:8
77 : ite(68, 9, 76) : BV:8
78 : ite(67, 9, 77) : BV:8
79 : ite(66, 9, 78) : BV:8
80 : bvconcat(32, 48, 64, 79) : BV:32
81 : lambda(1, 80) : FUNCTION[BV:32 -> BV:32]
82 : sym_const(81) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry.1.1
1 : Lambda191Var : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(3, 1) : BV:32
5 : 3738566404 { 0xded5ff04 -556400892 -1.67184495e62 } : BV:32
6 : bvadd(2, 4, 5) : BV:32
7 : 104456193 { 0x639e001 +1.45214855e141 } : BV:32
8 : eq(6, 7) : BOOL
9 : 0 { 0x0 } : BV:8
10 : 104456192 { 0x639e000 +1.45214843e141 } : BV:32
11 : eq(6, 10) : BOOL
12 : 104456195 { 0x639e003 +1.45214879e141 } : BV:32
13 : eq(6, 12) : BOOL
14 : 104456194 { 0x639e002 +1.45214867e141 } : BV:32
15 : eq(6, 14) : BOOL
16 : 3860121093 { 0xe614c605 -434846203 -1.16229307e77 } : BV:32
17 : eq(6, 16) : BOOL
18 : 255 { 0xff -1 } : BV:8
19 : 3860121095 { 0xe614c607 -434846201 -1.16229331e77 } : BV:32
20 : eq(6, 19) : BOOL
21 : 222 { 0xde -34 } : BV:8
22 : 3860121092 { 0xe614c604 -434846204 -1.16229295e77 } : BV:32
23 : eq(6, 22) : BOOL
24 : 4 { 0x4 } : BV:8
25 : 213 { 0xd5 -43 } : BV:8
26 : ite(23, 24, 25) : BV:8
27 : ite(20, 21, 26) : BV:8
28 : ite(17, 18, 27) : BV:8
29 : ite(15, 9, 28) : BV:8
30 : ite(13, 9, 29) : BV:8
31 : ite(11, 9, 30) : BV:8
32 : ite(8, 9, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 4, 5) : BV:32
35 : eq(34, 7) : BOOL
36 : eq(34, 10) : BOOL
37 : eq(34, 12) : BOOL
38 : eq(34, 14) : BOOL
39 : eq(34, 16) : BOOL
40 : eq(34, 19) : BOOL
41 : eq(34, 22) : BOOL
42 : ite(41, 24, 25) : BV:8
43 : ite(40, 21, 42) : BV:8
44 : ite(39, 18, 43) : BV:8
45 : ite(38, 9, 44) : BV:8
46 : ite(37, 9, 45) : BV:8
47 : ite(36, 9, 46) : BV:8
48 : ite(35, 9, 47) : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : bvadd(49, 4, 5) : BV:32
51 : eq(50, 7) : BOOL
52 : eq(50, 10) : BOOL
53 : eq(50, 12) : BOOL
54 : eq(50, 14) : BOOL
55 : eq(50, 16) : BOOL
56 : eq(50, 19) : BOOL
57 : eq(50, 22) : BOOL
58 : ite(57, 24, 25) : BV:8
59 : ite(56, 21, 58) : BV:8
60 : ite(55, 18, 59) : BV:8
61 : ite(54, 9, 60) : BV:8
62 : ite(53, 9, 61) : BV:8
63 : ite(52, 9, 62) : BV:8
64 : ite(51, 9, 63) : BV:8
65 : bvadd(4, 5) : BV:32
66 : eq(65, 7) : BOOL
67 : eq(65, 10) : BOOL
68 : eq(65, 12) : BOOL
69 : eq(65, 14) : BOOL
70 : eq(65, 16) : BOOL
71 : eq(65, 19) : BOOL
72 : eq(65, 22) : BOOL
73 : ite(72, 24, 25) : BV:8
74 : ite(71, 21, 73) : BV:8
75 : ite(70, 18, 74) : BV:8
76 : ite(69, 9, 75) : BV:8
77 : ite(68, 9, 76) : BV:8
78 : ite(67, 9, 77) : BV:8
79 : ite(66, 9, 78) : BV:8
80 : bvconcat(32, 48, 64, 79) : BV:32
81 : lambda(1, 80) : FUNCTION[BV:32 -> BV:32]
82 : sym_const(81) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L2%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
1907356319
=counter_example_end
=global nodece 27 num_edges_traversed 2
=global nodece 27 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 28
=global nodece 28 nodece z3v487.ce631.num_edges_traversed2
=global nodece 28 nodece_path
=global nodece 28 nodece_path.graph_edge_composition
(epsilon)
=global nodece 28 nodece_cached_counterexample
=counter_example_begin z3v487.ce631 b196237bc88ba4e8bfe9552731748afb
=retaddr_const
1 : 1155135821 { 0x44d9f94d +1.70292055e10 } : BV:32
=input.spec-%var-x-1
1 : Lambda1361Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 5 { 0x5 +1.59e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1362Var : BV:32
18 : eq(17, 4) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 2, 28) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry
1 : Lambda1367Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 5 { 0x5 +1.59e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1368Var : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-6.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 8; 255 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 256; 259 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 260; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 256 { 0x100 +1.3051e129 } : BV:32
=input.dst.llvm-%n
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%x
1 : 2885714728 { 0xac008328 -1409252568 -1.400257e217 } : BV:32
=input.spec-%var-i-0.L2%7%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%tmpvar-5.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-0.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-0.L2%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 5 { 0x5 +1.59e129 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : bvule(2, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : and(3, 10) : BOOL
19 : ite(18, 1, 1) : BV:32
20 : sum(16, 17, 19) : SUM[UNIT,BV:32]
21 : sym_const(20) : SUM[UNIT,BV:32]
=input.spec-%var-ret-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 1511376640 { 0x5a15c700 +1.17013549e53 } : BV:32
=input.spec-%tmpvar-9.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 745295118 { 0x2c6c4d0e +1.84610152e217 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-indir_tgt.E0%0%d
1 : 1155135821 { 0x44d9f94d +1.70292055e10 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 2054560452 { 0x7a761ac4 +1.92269182e117 } : BV:32
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 256 { 0x100 +1.3051e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 259 { 0x103 +1.3087e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.spec-%var-x-1.1.1
1 : Lambda1335Var : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 1) : BOOL
6 : bvule(1, 2) : BOOL
7 : and(5, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 5 { 0x5 +1.59e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(5, 12) : BOOL
18 : ite(17, 4, 4) : BV:32
19 : ite(16, 4, 18) : BV:32
20 : ite(3, 4, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4 ] -> true, [ 5; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L2%7%bbentry.0.1
1 : ([ 0; 4 ] -> true, [ 5; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
2307446209
=counter_example_end
=global nodece 28 num_edges_traversed 2
=global nodece 28 nodece_visted_pcs: 
E0%0%d_E0%0%d
=graph_with_ce done
=point_set for reason inductive-invariants
=inductive-invariants point_set global exprs map
=inductive-invariants point_set point_expr 1
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : bvuge(1, 10) : BOOL
18 : bvule(1, 11) : BOOL
19 : and(17, 18) : BOOL
20 : bvuge(2, 10) : BOOL
21 : bvule(2, 11) : BOOL
22 : and(20, 21) : BOOL
23 : not(22) : BOOL
24 : andnot1(19, 23) : BOOL
25 : bvuge(10, 1) : BOOL
26 : bvule(10, 2) : BOOL
27 : and(25, 26) : BOOL
28 : bvuge(11, 1) : BOOL
29 : bvule(11, 2) : BOOL
30 : and(28, 29) : BOOL
31 : not(30) : BOOL
32 : andnot1(27, 31) : BOOL
33 : and(24, 32) : BOOL
34 : and(16, 33) : BOOL
35 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
36 : 3 { 0x3 +1.35e129 } : BV:32
37 : bvand(35, 36) : BV:32
38 : 0 { 0x0 +1.0e129 } : BV:32
39 : eq(37, 38) : BOOL
40 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
41 : bvand(40, 36) : BV:32
42 : eq(41, 38) : BOOL
43 : and(39, 42) : BOOL
44 : and(34, 43) : BOOL
45 : eq(35, 1) : BOOL
46 : eq(40, 10) : BOOL
47 : and(45, 46) : BOOL
48 : and(44, 47) : BOOL
=inductive-invariants point_set point_expr 2
1 : input.spec-%var-i-0.L2%7%bbentry : BV:32
=inductive-invariants point_set point_expr 3
1 : input.spec-%var-ret-0.L2%7%bbentry : BV:32
=inductive-invariants point_set point_expr 4
1 : input.dst.llvm-%n : BV:32
=inductive-invariants point_set point_expr 5
1 : input.dst.llvm-%x : BV:32
=inductive-invariants point_set point_expr 6
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=inductive-invariants point_set point_expr 7
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=inductive-invariants point_set point_expr 8
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 9
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 10
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 11
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 12
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 13
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 14
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 15
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 16
1 : input.spec-%var-x-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%x : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 17
1 : input.spec-%var-x-0.L2%7%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%x : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 18
1 : input.spec-%var-x-0.L2%7%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%x : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : bvadd(14, 5) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(10, 11, 12, 15, 16, 17) : BV:32
19 : lambda(9, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(8, 19) : MAP[BV:32 -> BV:32]
21 : eq(1, 20) : BOOL
=inductive-invariants point_set point_expr 19
1 : input.spec-%var-x-0.L2%7%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%x : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 20
1 : input.spec-%var-x-0.L2%7%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%x : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 21
1 : input.spec-%var-x-0.L2%7%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : bvadd(14, 5) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(10, 11, 12, 15, 16, 17) : BV:32
19 : lambda(9, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(8, 19) : MAP[BV:32 -> BV:32]
21 : eq(1, 20) : BOOL
=inductive-invariants point_set global exprs map done
=inductive-invariants point_set points
=inductive-invariants point_set point z3.ce3
=inductive-invariants point_set point z3.ce3 expr point z3.ce3
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 2 for input.spec-%var-i-0.L2%7%bbentry
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 3 for input.spec-%var-ret-0.L2%7%bbentry
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 4 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 5 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 done
=inductive-invariants point_set point z3v487.ce4
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 2 for input.spec-%var-i-0.L2%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 3 for input.spec-%var-ret-0.L2%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 4 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 5 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 done
=inductive-invariants point_set point z3.ce91
=inductive-invariants point_set point z3.ce91 expr point z3.ce91
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 2 for input.spec-%var-i-0.L2%7%bbentry
0
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 3 for input.spec-%var-ret-0.L2%7%bbentry
0
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 4 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 5 for input.dst.llvm-%x
2815561984
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 done
=inductive-invariants point_set point z3.ce69
=inductive-invariants point_set point z3.ce69 expr point z3.ce69
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 2 for input.spec-%var-i-0.L2%7%bbentry
0
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 3 for input.spec-%var-ret-0.L2%7%bbentry
0
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 4 for input.dst.llvm-%n
65536
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 5 for input.dst.llvm-%x
2144336128
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 done
=inductive-invariants point_set point z3.ce26
=inductive-invariants point_set point z3.ce26 expr point z3.ce26
=inductive-invariants point_set point z3.ce26 expr point z3.ce26 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3.ce26 expr point z3.ce26 val 2 for input.spec-%var-i-0.L2%7%bbentry
0
=inductive-invariants point_set point z3.ce26 expr point z3.ce26 val 3 for input.spec-%var-ret-0.L2%7%bbentry
0
=inductive-invariants point_set point z3.ce26 expr point z3.ce26 val 4 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce26 expr point z3.ce26 val 5 for input.dst.llvm-%x
16
=inductive-invariants point_set point z3.ce26 expr point z3.ce26 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce26 expr point z3.ce26 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce26 expr point z3.ce26 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce26 expr point z3.ce26 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce26 expr point z3.ce26 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce26 expr point z3.ce26 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce26 expr point z3.ce26 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce26 expr point z3.ce26 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce26 expr point z3.ce26 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce26 expr point z3.ce26 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce26 expr point z3.ce26 done
=inductive-invariants point_set point z3v487.ce25
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 2 for input.spec-%var-i-0.L2%7%bbentry
0
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 3 for input.spec-%var-ret-0.L2%7%bbentry
0
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 4 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 5 for input.dst.llvm-%x
16
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 done
=inductive-invariants point_set point z3v487.ce48
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 2 for input.spec-%var-i-0.L2%7%bbentry
0
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 3 for input.spec-%var-ret-0.L2%7%bbentry
0
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 4 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 5 for input.dst.llvm-%x
8
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 done
=inductive-invariants point_set point z3.ce47
=inductive-invariants point_set point z3.ce47 expr point z3.ce47
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 2 for input.spec-%var-i-0.L2%7%bbentry
0
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 3 for input.spec-%var-ret-0.L2%7%bbentry
0
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 4 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 5 for input.dst.llvm-%x
3738566404
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 done
=inductive-invariants point_set point z3v487.ce92
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 2 for input.spec-%var-i-0.L2%7%bbentry
0
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 3 for input.spec-%var-ret-0.L2%7%bbentry
0
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 4 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 5 for input.dst.llvm-%x
1078001664
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 done
=inductive-invariants point_set point z3v487.ce70
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 2 for input.spec-%var-i-0.L2%7%bbentry
0
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 3 for input.spec-%var-ret-0.L2%7%bbentry
0
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 4 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 5 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 done
=inductive-invariants point_set point z3v487.ce114
=inductive-invariants point_set point z3v487.ce114 expr point z3v487.ce114
=inductive-invariants point_set point z3v487.ce114 expr point z3v487.ce114 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3v487.ce114 expr point z3v487.ce114 val 2 for input.spec-%var-i-0.L2%7%bbentry
0
=inductive-invariants point_set point z3v487.ce114 expr point z3v487.ce114 val 3 for input.spec-%var-ret-0.L2%7%bbentry
0
=inductive-invariants point_set point z3v487.ce114 expr point z3v487.ce114 val 4 for input.dst.llvm-%n
2147483648
=inductive-invariants point_set point z3v487.ce114 expr point z3v487.ce114 val 5 for input.dst.llvm-%x
2147746304
=inductive-invariants point_set point z3v487.ce114 expr point z3v487.ce114 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce114 expr point z3v487.ce114 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce114 expr point z3v487.ce114 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce114 expr point z3v487.ce114 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce114 expr point z3v487.ce114 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce114 expr point z3v487.ce114 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce114 expr point z3v487.ce114 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce114 expr point z3v487.ce114 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce114 expr point z3v487.ce114 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce114 expr point z3v487.ce114 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce114 expr point z3v487.ce114 done
=inductive-invariants point_set point z3.ce113
=inductive-invariants point_set point z3.ce113 expr point z3.ce113
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 2 for input.spec-%var-i-0.L2%7%bbentry
0
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 3 for input.spec-%var-ret-0.L2%7%bbentry
0
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 4 for input.dst.llvm-%n
2147483648
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 5 for input.dst.llvm-%x
4292853248
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 done
=inductive-invariants point_set point z3.ce179
=inductive-invariants point_set point z3.ce179 expr point z3.ce179
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 2 for input.spec-%var-i-0.L2%7%bbentry
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 3 for input.spec-%var-ret-0.L2%7%bbentry
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 4 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 5 for input.dst.llvm-%x
1797193472
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 done
=inductive-invariants point_set point z3.ce135
=inductive-invariants point_set point z3.ce135 expr point z3.ce135
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 2 for input.spec-%var-i-0.L2%7%bbentry
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 3 for input.spec-%var-ret-0.L2%7%bbentry
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 4 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 5 for input.dst.llvm-%x
1797193472
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 done
=inductive-invariants point_set point z3v487.ce136
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 2 for input.spec-%var-i-0.L2%7%bbentry
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 3 for input.spec-%var-ret-0.L2%7%bbentry
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 4 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 5 for input.dst.llvm-%x
337774336
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 done
=inductive-invariants point_set point z3v487.ce267
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 2 for input.spec-%var-i-0.L2%7%bbentry
1
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 3 for input.spec-%var-ret-0.L2%7%bbentry
0
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 4 for input.dst.llvm-%n
524288
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 5 for input.dst.llvm-%x
1711277312
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 done
=inductive-invariants point_set point z3.ce342
=inductive-invariants point_set point z3.ce342 expr point z3.ce342
=inductive-invariants point_set point z3.ce342 expr point z3.ce342 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3.ce342 expr point z3.ce342 val 2 for input.spec-%var-i-0.L2%7%bbentry
2
=inductive-invariants point_set point z3.ce342 expr point z3.ce342 val 3 for input.spec-%var-ret-0.L2%7%bbentry
0
=inductive-invariants point_set point z3.ce342 expr point z3.ce342 val 4 for input.dst.llvm-%n
65536
=inductive-invariants point_set point z3.ce342 expr point z3.ce342 val 5 for input.dst.llvm-%x
2144336128
=inductive-invariants point_set point z3.ce342 expr point z3.ce342 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce342 expr point z3.ce342 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3.ce342 expr point z3.ce342 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce342 expr point z3.ce342 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce342 expr point z3.ce342 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce342 expr point z3.ce342 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce342 expr point z3.ce342 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce342 expr point z3.ce342 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce342 expr point z3.ce342 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce342 expr point z3.ce342 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce342 expr point z3.ce342 done
=inductive-invariants point_set point z3.ce277
=inductive-invariants point_set point z3.ce277 expr point z3.ce277
=inductive-invariants point_set point z3.ce277 expr point z3.ce277 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3.ce277 expr point z3.ce277 val 2 for input.spec-%var-i-0.L2%7%bbentry
1
=inductive-invariants point_set point z3.ce277 expr point z3.ce277 val 3 for input.spec-%var-ret-0.L2%7%bbentry
0
=inductive-invariants point_set point z3.ce277 expr point z3.ce277 val 4 for input.dst.llvm-%n
4
=inductive-invariants point_set point z3.ce277 expr point z3.ce277 val 5 for input.dst.llvm-%x
2316741256
=inductive-invariants point_set point z3.ce277 expr point z3.ce277 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce277 expr point z3.ce277 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce277 expr point z3.ce277 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce277 expr point z3.ce277 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce277 expr point z3.ce277 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce277 expr point z3.ce277 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce277 expr point z3.ce277 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce277 expr point z3.ce277 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce277 expr point z3.ce277 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce277 expr point z3.ce277 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce277 expr point z3.ce277 done
=inductive-invariants point_set point z3.ce385
=inductive-invariants point_set point z3.ce385 expr point z3.ce385
=inductive-invariants point_set point z3.ce385 expr point z3.ce385 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3.ce385 expr point z3.ce385 val 2 for input.spec-%var-i-0.L2%7%bbentry
2
=inductive-invariants point_set point z3.ce385 expr point z3.ce385 val 3 for input.spec-%var-ret-0.L2%7%bbentry
0
=inductive-invariants point_set point z3.ce385 expr point z3.ce385 val 4 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3.ce385 expr point z3.ce385 val 5 for input.dst.llvm-%x
2815561984
=inductive-invariants point_set point z3.ce385 expr point z3.ce385 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce385 expr point z3.ce385 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3.ce385 expr point z3.ce385 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce385 expr point z3.ce385 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce385 expr point z3.ce385 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce385 expr point z3.ce385 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce385 expr point z3.ce385 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce385 expr point z3.ce385 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce385 expr point z3.ce385 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce385 expr point z3.ce385 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce385 expr point z3.ce385 done
=inductive-invariants point_set point z3.ce408
=inductive-invariants point_set point z3.ce408 expr point z3.ce408
=inductive-invariants point_set point z3.ce408 expr point z3.ce408 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3.ce408 expr point z3.ce408 val 2 for input.spec-%var-i-0.L2%7%bbentry
2
=inductive-invariants point_set point z3.ce408 expr point z3.ce408 val 3 for input.spec-%var-ret-0.L2%7%bbentry
3755991007
=inductive-invariants point_set point z3.ce408 expr point z3.ce408 val 4 for input.dst.llvm-%n
2147483648
=inductive-invariants point_set point z3.ce408 expr point z3.ce408 val 5 for input.dst.llvm-%x
4292853248
=inductive-invariants point_set point z3.ce408 expr point z3.ce408 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
3755991007
=inductive-invariants point_set point z3.ce408 expr point z3.ce408 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3.ce408 expr point z3.ce408 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce408 expr point z3.ce408 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce408 expr point z3.ce408 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce408 expr point z3.ce408 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce408 expr point z3.ce408 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce408 expr point z3.ce408 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce408 expr point z3.ce408 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce408 expr point z3.ce408 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce408 expr point z3.ce408 done
=inductive-invariants point_set point z3.ce465
=inductive-invariants point_set point z3.ce465 expr point z3.ce465
=inductive-invariants point_set point z3.ce465 expr point z3.ce465 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3.ce465 expr point z3.ce465 val 2 for input.spec-%var-i-0.L2%7%bbentry
4
=inductive-invariants point_set point z3.ce465 expr point z3.ce465 val 3 for input.spec-%var-ret-0.L2%7%bbentry
0
=inductive-invariants point_set point z3.ce465 expr point z3.ce465 val 4 for input.dst.llvm-%n
6
=inductive-invariants point_set point z3.ce465 expr point z3.ce465 val 5 for input.dst.llvm-%x
2147483640
=inductive-invariants point_set point z3.ce465 expr point z3.ce465 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce465 expr point z3.ce465 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3.ce465 expr point z3.ce465 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce465 expr point z3.ce465 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce465 expr point z3.ce465 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce465 expr point z3.ce465 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce465 expr point z3.ce465 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce465 expr point z3.ce465 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce465 expr point z3.ce465 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce465 expr point z3.ce465 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce465 expr point z3.ce465 done
=inductive-invariants point_set point z3v487.ce466
=inductive-invariants point_set point z3v487.ce466 expr point z3v487.ce466
=inductive-invariants point_set point z3v487.ce466 expr point z3v487.ce466 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3v487.ce466 expr point z3v487.ce466 val 2 for input.spec-%var-i-0.L2%7%bbentry
4
=inductive-invariants point_set point z3v487.ce466 expr point z3v487.ce466 val 3 for input.spec-%var-ret-0.L2%7%bbentry
0
=inductive-invariants point_set point z3v487.ce466 expr point z3v487.ce466 val 4 for input.dst.llvm-%n
134217730
=inductive-invariants point_set point z3v487.ce466 expr point z3v487.ce466 val 5 for input.dst.llvm-%x
2147483636
=inductive-invariants point_set point z3v487.ce466 expr point z3v487.ce466 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce466 expr point z3v487.ce466 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3v487.ce466 expr point z3v487.ce466 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce466 expr point z3v487.ce466 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce466 expr point z3v487.ce466 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce466 expr point z3v487.ce466 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce466 expr point z3v487.ce466 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce466 expr point z3v487.ce466 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce466 expr point z3v487.ce466 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce466 expr point z3v487.ce466 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce466 expr point z3v487.ce466 done
=inductive-invariants point_set point z3v487.ce180
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 2 for input.spec-%var-i-0.L2%7%bbentry
0
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 3 for input.spec-%var-ret-0.L2%7%bbentry
0
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 4 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 5 for input.dst.llvm-%x
337774336
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 done
=inductive-invariants point_set point z3.ce157
=inductive-invariants point_set point z3.ce157 expr point z3.ce157
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 2 for input.spec-%var-i-0.L2%7%bbentry
0
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 3 for input.spec-%var-ret-0.L2%7%bbentry
0
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 4 for input.dst.llvm-%n
230686726
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 5 for input.dst.llvm-%x
192937984
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 done
=inductive-invariants point_set point z3v487.ce158
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 2 for input.spec-%var-i-0.L2%7%bbentry
0
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 3 for input.spec-%var-ret-0.L2%7%bbentry
0
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 4 for input.dst.llvm-%n
1075986432
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 5 for input.dst.llvm-%x
9728
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 done
=inductive-invariants point_set point z3v487.ce224
=inductive-invariants point_set point z3v487.ce224 expr point z3v487.ce224
=inductive-invariants point_set point z3v487.ce224 expr point z3v487.ce224 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3v487.ce224 expr point z3v487.ce224 val 2 for input.spec-%var-i-0.L2%7%bbentry
0
=inductive-invariants point_set point z3v487.ce224 expr point z3v487.ce224 val 3 for input.spec-%var-ret-0.L2%7%bbentry
0
=inductive-invariants point_set point z3v487.ce224 expr point z3v487.ce224 val 4 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce224 expr point z3v487.ce224 val 5 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce224 expr point z3v487.ce224 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce224 expr point z3v487.ce224 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce224 expr point z3v487.ce224 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce224 expr point z3v487.ce224 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce224 expr point z3v487.ce224 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce224 expr point z3v487.ce224 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce224 expr point z3v487.ce224 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce224 expr point z3v487.ce224 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce224 expr point z3v487.ce224 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce224 expr point z3v487.ce224 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce224 expr point z3v487.ce224 done
=inductive-invariants point_set point z3.ce201
=inductive-invariants point_set point z3.ce201 expr point z3.ce201
=inductive-invariants point_set point z3.ce201 expr point z3.ce201 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3.ce201 expr point z3.ce201 val 2 for input.spec-%var-i-0.L2%7%bbentry
0
=inductive-invariants point_set point z3.ce201 expr point z3.ce201 val 3 for input.spec-%var-ret-0.L2%7%bbentry
0
=inductive-invariants point_set point z3.ce201 expr point z3.ce201 val 4 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce201 expr point z3.ce201 val 5 for input.dst.llvm-%x
4
=inductive-invariants point_set point z3.ce201 expr point z3.ce201 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce201 expr point z3.ce201 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce201 expr point z3.ce201 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce201 expr point z3.ce201 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce201 expr point z3.ce201 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce201 expr point z3.ce201 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce201 expr point z3.ce201 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce201 expr point z3.ce201 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce201 expr point z3.ce201 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce201 expr point z3.ce201 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce201 expr point z3.ce201 done
=inductive-invariants point_set point z3v487.ce202
=inductive-invariants point_set point z3v487.ce202 expr point z3v487.ce202
=inductive-invariants point_set point z3v487.ce202 expr point z3v487.ce202 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3v487.ce202 expr point z3v487.ce202 val 2 for input.spec-%var-i-0.L2%7%bbentry
0
=inductive-invariants point_set point z3v487.ce202 expr point z3v487.ce202 val 3 for input.spec-%var-ret-0.L2%7%bbentry
0
=inductive-invariants point_set point z3v487.ce202 expr point z3v487.ce202 val 4 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce202 expr point z3v487.ce202 val 5 for input.dst.llvm-%x
4
=inductive-invariants point_set point z3v487.ce202 expr point z3v487.ce202 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce202 expr point z3v487.ce202 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce202 expr point z3v487.ce202 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce202 expr point z3v487.ce202 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce202 expr point z3v487.ce202 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce202 expr point z3v487.ce202 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce202 expr point z3v487.ce202 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce202 expr point z3v487.ce202 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce202 expr point z3v487.ce202 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce202 expr point z3v487.ce202 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce202 expr point z3v487.ce202 done
=inductive-invariants point_set point z3.ce223
=inductive-invariants point_set point z3.ce223 expr point z3.ce223
=inductive-invariants point_set point z3.ce223 expr point z3.ce223 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3.ce223 expr point z3.ce223 val 2 for input.spec-%var-i-0.L2%7%bbentry
0
=inductive-invariants point_set point z3.ce223 expr point z3.ce223 val 3 for input.spec-%var-ret-0.L2%7%bbentry
0
=inductive-invariants point_set point z3.ce223 expr point z3.ce223 val 4 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce223 expr point z3.ce223 val 5 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce223 expr point z3.ce223 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce223 expr point z3.ce223 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce223 expr point z3.ce223 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce223 expr point z3.ce223 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce223 expr point z3.ce223 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce223 expr point z3.ce223 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce223 expr point z3.ce223 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce223 expr point z3.ce223 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce223 expr point z3.ce223 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce223 expr point z3.ce223 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce223 expr point z3.ce223 done
=inductive-invariants point_set point z3v487.ce518
=inductive-invariants point_set point z3v487.ce518 expr point z3v487.ce518
=inductive-invariants point_set point z3v487.ce518 expr point z3v487.ce518 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3v487.ce518 expr point z3v487.ce518 val 2 for input.spec-%var-i-0.L2%7%bbentry
5
=inductive-invariants point_set point z3v487.ce518 expr point z3v487.ce518 val 3 for input.spec-%var-ret-0.L2%7%bbentry
0
=inductive-invariants point_set point z3v487.ce518 expr point z3v487.ce518 val 4 for input.dst.llvm-%n
5
=inductive-invariants point_set point z3v487.ce518 expr point z3v487.ce518 val 5 for input.dst.llvm-%x
2885714728
=inductive-invariants point_set point z3v487.ce518 expr point z3v487.ce518 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce518 expr point z3v487.ce518 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
5
=inductive-invariants point_set point z3v487.ce518 expr point z3v487.ce518 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce518 expr point z3v487.ce518 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce518 expr point z3v487.ce518 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce518 expr point z3v487.ce518 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce518 expr point z3v487.ce518 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce518 expr point z3v487.ce518 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce518 expr point z3v487.ce518 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce518 expr point z3v487.ce518 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce518 expr point z3v487.ce518 done
=inductive-invariants point_set point z3.ce519
=inductive-invariants point_set point z3.ce519 expr point z3.ce519
=inductive-invariants point_set point z3.ce519 expr point z3.ce519 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3.ce519 expr point z3.ce519 val 2 for input.spec-%var-i-0.L2%7%bbentry
5
=inductive-invariants point_set point z3.ce519 expr point z3.ce519 val 3 for input.spec-%var-ret-0.L2%7%bbentry
0
=inductive-invariants point_set point z3.ce519 expr point z3.ce519 val 4 for input.dst.llvm-%n
5
=inductive-invariants point_set point z3.ce519 expr point z3.ce519 val 5 for input.dst.llvm-%x
950958340
=inductive-invariants point_set point z3.ce519 expr point z3.ce519 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce519 expr point z3.ce519 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
5
=inductive-invariants point_set point z3.ce519 expr point z3.ce519 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce519 expr point z3.ce519 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce519 expr point z3.ce519 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce519 expr point z3.ce519 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce519 expr point z3.ce519 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce519 expr point z3.ce519 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce519 expr point z3.ce519 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce519 expr point z3.ce519 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce519 expr point z3.ce519 done
=inductive-invariants point_set points done
=out-of-bound-exprs for reason inductive-invariants
=out-of-bound-exprs for reason inductive-invariants at L0%0%d_L0%0%d

=out-of-bound-exprs for reason inductive-invariants at L2%7%bbentry_Lfor.cond%1%bbentry

=out-of-bound-exprs for reason inductive-invariants at E0%0%d_E0%0%d

=graph_with_points done
=Invariant state at node L0%0%d_L0%0%d for reason inductive-invariants
=pc L0%0%d_L0%0%d inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond.description

=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond.expr is null
=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond done
=pc L0%0%d_L0%0%d inductive-invariants invariant_state done
=Invariant state at node L2%7%bbentry_Lfor.cond%1%bbentry for reason inductive-invariants
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state failcond.description

=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state failcond.expr is null
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state failcond done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability name abstract-memlabel-asserts
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability expr_group_type HOUDINI_EXPECTS_STABILITY with 1 exprs
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability point_expr 1
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : bvuge(1, 10) : BOOL
18 : bvule(1, 11) : BOOL
19 : and(17, 18) : BOOL
20 : bvuge(2, 10) : BOOL
21 : bvule(2, 11) : BOOL
22 : and(20, 21) : BOOL
23 : not(22) : BOOL
24 : andnot1(19, 23) : BOOL
25 : bvuge(10, 1) : BOOL
26 : bvule(10, 2) : BOOL
27 : and(25, 26) : BOOL
28 : bvuge(11, 1) : BOOL
29 : bvule(11, 2) : BOOL
30 : and(28, 29) : BOOL
31 : not(30) : BOOL
32 : andnot1(27, 31) : BOOL
33 : and(24, 32) : BOOL
34 : and(16, 33) : BOOL
35 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
36 : 3 { 0x3 +1.35e129 } : BV:32
37 : bvand(35, 36) : BV:32
38 : 0 { 0x0 +1.0e129 } : BV:32
39 : eq(37, 38) : BOOL
40 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
41 : bvand(40, 36) : BV:32
42 : eq(41, 38) : BOOL
43 : and(39, 42) : BOOL
44 : and(34, 43) : BOOL
45 : eq(35, 1) : BOOL
46 : eq(40, 10) : BOOL
47 : and(45, 46) : BOOL
48 : and(44, 47) : BOOL
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability pred 0
=Comment
abstract-memlabel-asserts-houdini-guess
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : bvuge(1, 10) : BOOL
18 : bvule(1, 11) : BOOL
19 : and(17, 18) : BOOL
20 : bvuge(2, 10) : BOOL
21 : bvule(2, 11) : BOOL
22 : and(20, 21) : BOOL
23 : not(22) : BOOL
24 : andnot1(19, 23) : BOOL
25 : bvuge(10, 1) : BOOL
26 : bvule(10, 2) : BOOL
27 : and(25, 26) : BOOL
28 : bvuge(11, 1) : BOOL
29 : bvule(11, 2) : BOOL
30 : and(28, 29) : BOOL
31 : not(30) : BOOL
32 : andnot1(27, 31) : BOOL
33 : and(24, 32) : BOOL
34 : and(16, 33) : BOOL
35 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
36 : 3 { 0x3 +1.35e129 } : BV:32
37 : bvand(35, 36) : BV:32
38 : 0 { 0x0 +1.0e129 } : BV:32
39 : eq(37, 38) : BOOL
40 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
41 : bvand(40, 36) : BV:32
42 : eq(41, 38) : BOOL
43 : and(39, 42) : BOOL
44 : and(34, 43) : BOOL
45 : eq(35, 1) : BOOL
46 : eq(40, 10) : BOOL
47 : and(45, 46) : BOOL
48 : and(44, 47) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability predicate_set done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability is assumed eqclass : 0
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ce 0: z3.ce3
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ces set done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability summary: number of exprs=1; number of visited CEs=1; number of preds=1
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv name expr-group-bvs
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv expr_group_type BV_EQ with 6 exprs
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 2
1 : input.spec-%var-i-0.L2%7%bbentry : BV:32
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 3
1 : input.spec-%var-ret-0.L2%7%bbentry : BV:32
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 4
1 : input.dst.llvm-%n : BV:32
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 5
1 : input.dst.llvm-%x : BV:32
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 6
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 7
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 0
=Comment
expr-group-bvs.linear2-32-free_var_idx.7
=LhsExpr
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
2 : input.spec-%var-i-0.L2%7%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=predicate done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 1
=Comment
expr-group-bvs.linear2-32-free_var_idx.6
=LhsExpr
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
2 : input.spec-%var-ret-0.L2%7%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=predicate done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 2
=Comment
expr-group-bvs.linear1-2-free_var_idx.5
=LhsExpr
1 : 0 { 0x0 } : BV:2
=RhsExpr
1 : input.dst.llvm-%x : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 0 { 0x0 +1.0e1025 } : INT
4 : bvextract(1, 2, 3) : BV:2
=predicate done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv predicate_set done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv is assumed eqclass : 0
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 0: z3.ce3
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 1: z3.ce69
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 2: z3v487.ce25
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 3: z3.ce47
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 4: z3v487.ce70
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 5: z3.ce342
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 6: z3.ce277
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 7: z3.ce408
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ces set done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv summary: number of exprs=6; number of visited CEs=8; number of preds=3
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv output matrix
matrix:
5
-2147483648->0; 2->0; 3->0; 4->0; 5->1073741824; 6->0; 7->0; 
6
-2147483648->0; 2->0; 3->4294967295; 4->0; 5->0; 6->1; 7->0; 
7
-2147483648->0; 2->4294967295; 3->0; 4->0; 5->0; 6->0; 7->1; 
matrix done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv state elems done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const name src-branches-const-ineq
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const point_expr 2
1 : input.spec-%var-i-0.L2%7%bbentry : BV:32
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const pred 0
=Comment
src-branches-const-ineq.ub-unsigned
=LhsExpr
1 : input.spec-%var-i-0.L2%7%bbentry : BV:32
2 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const pred 1
=Comment
src-branches-const-ineq.lb-signed
=LhsExpr
1 : input.spec-%var-i-0.L2%7%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvsge(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const predicate_set done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const is assumed eqclass : 0
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 0: z3.ce3
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 1: z3.ce342
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 2: z3.ce465
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 3: z3v487.ce518
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ces set done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=2
=m_lower_bound_signed_cur 0
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967294
=m_lower_bound_signed_known 0
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967294
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 3
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_exprs done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%n
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const point_expr 4
1 : input.dst.llvm-%n : BV:32
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const predicate_set done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const is assumed eqclass : 0
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 0: z3.ce3
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 1: z3.ce91
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 2: z3.ce69
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 3: z3.ce113
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ces set done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=0
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967295
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 3
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_exprs done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const point_expr 7
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const pred 0
=Comment
dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.ub-unsigned
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const pred 1
=Comment
dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.lb-signed
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvsge(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const predicate_set done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const is assumed eqclass : 0
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 0: z3.ce3
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 1: z3.ce342
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 2: z3.ce465
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 3: z3v487.ce518
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ces set done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=2
=m_lower_bound_signed_cur 0
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967294
=m_lower_bound_signed_known 0
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967294
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 3
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_exprs done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini name dst-ineq
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini expr_group_type HOUDINI with 8 exprs
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini point_expr 8
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini point_expr 9
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini point_expr 10
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini point_expr 11
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini point_expr 12
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini point_expr 13
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini point_expr 14
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini point_expr 15
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini pred 0
=Comment
dst-ineq-houdini-guess
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini predicate_set done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini is assumed eqclass : 0
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini visited ce 0: z3.ce3
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini visited ce 1: z3.ce91
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini visited ce 2: z3.ce69
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini visited ces set done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini summary: number of exprs=8; number of visited CEs=3; number of preds=1
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based name spec-coupling-invariants
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based expr_group_type HOUDINI_AXIOM_BASED with 6 exprs
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 16
1 : input.spec-%var-x-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%x : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 17
1 : input.spec-%var-x-0.L2%7%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%x : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 18
1 : input.spec-%var-x-0.L2%7%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%x : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : bvadd(14, 5) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(10, 11, 12, 15, 16, 17) : BV:32
19 : lambda(9, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(8, 19) : MAP[BV:32 -> BV:32]
21 : eq(1, 20) : BOOL
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 19
1 : input.spec-%var-x-0.L2%7%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%x : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 20
1 : input.spec-%var-x-0.L2%7%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%x : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 21
1 : input.spec-%var-x-0.L2%7%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : bvadd(14, 5) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(10, 11, 12, 15, 16, 17) : BV:32
19 : lambda(9, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(8, 19) : MAP[BV:32 -> BV:32]
21 : eq(1, 20) : BOOL
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based pred 0
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-x-0.L2%7%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%x : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based pred 1
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-x-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%x : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based predicate_set done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based is assumed eqclass : 0
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based visited ce 0: z3.ce3
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based visited ces set done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based summary: number of exprs=6; number of visited CEs=1; number of preds=2
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini name local-sizes-are-equal
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini expr_group_type HOUDINI with 0 exprs
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini predicate_set done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini is assumed eqclass : 0
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini visited ce 0: z3.ce3
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini visited ces set done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini summary: number of exprs=0; number of visited CEs=1; number of preds=0
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state done
=Invariant state at node E0%0%d_E0%0%d for reason inductive-invariants
=pc E0%0%d_E0%0%d inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond.description

=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond.expr is null
=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond done
=pc E0%0%d_E0%0%d inductive-invariants invariant_state done
=invariant_state_changed_at_pcs for reason inductive-invariants:
=graph_with_guessing done
=graph_with_correctness_covers begin
=graph_with_correctness_covers done
=m_dst_fcall_edges_already_updated_from_pcs:
=m_internal_pcs:
=m_super_edges:
=AllocaPCLocalSprelAssumptionsBegin:
=Local offsets from compile log
=Local offsets from compile log done
=done
=AllocaPCLocalSprelAssumptionsEnd
=DeallocaPCLocalSprelAssumptionsBegin:
=Local offsets from compile log
=Local offsets from compile log done
=done
=DeallocaPCLocalSprelAssumptionsEnd
=src_tfg pcs reaching pcpair L0%0%d_L0%0%d
=src_tfg pc: L0%0%d
=exit_pc_asserts at E0%0%d_E0%0%d
=exit_pc_assert.0 at E0%0%d_E0%0%d
=Comment
equal-regs
=LhsExpr
1 : input.spec-%tmpvar-10.E0%0%d : BV:32
2 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry
=well-formedness-conditions for L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry edge well-formedness condition
=well-formedness-conditions for L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry edge well-formedness condition done
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>L2%7%bbentry_Lfor.cond%1%bbentry
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>L2%7%bbentry_Lfor.cond%1%bbentry edge well-formedness condition
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>L2%7%bbentry_Lfor.cond%1%bbentry edge-wf-cond cg_path
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>L2%7%bbentry_Lfor.cond%1%bbentry edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>L2%7%bbentry_Lfor.cond%1%bbentry edge-wf-cond src_path
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>L2%7%bbentry_Lfor.cond%1%bbentry edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>L2%7%bbentry_Lfor.cond%1%bbentry edge-wf-cond dst_path
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>L2%7%bbentry_Lfor.cond%1%bbentry edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>L2%7%bbentry_Lfor.cond%1%bbentry edge-wf-cond pred.0
=Comment
wfcond.from_pcL2%7%bbentry_Lfor.cond%1%bbentry.to_pcL2%7%bbentry_Lfor.cond%1%bbentry-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
4 : not(3) : BOOL
5 : input.spec-%var-x-0.L2%7%bbentry : MAP[BV:32 -> BV:32]
6 : input.spec-%var-i-0.L2%7%bbentry : BV:32
7 : map_get(5, 6) : SUM[UNIT,BV:32]
8 : 1 { 0x1 +1.0e1025 } : INT
9 : sum_is(7, 8) : BOOL
10 : or(4, 9) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>L2%7%bbentry_Lfor.cond%1%bbentry edge well-formedness condition done
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge well-formedness condition
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond pred.0
=Comment
wfcond.from_pcL2%7%bbentry_Lfor.cond%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
4 : input.spec-%var-x-0.L2%7%bbentry : MAP[BV:32 -> BV:32]
5 : input.spec-%var-i-0.L2%7%bbentry : BV:32
6 : map_get(4, 5) : SUM[UNIT,BV:32]
7 : 0 { 0x0 +1.0e1025 } : INT
8 : sum_is(6, 7) : BOOL
9 : or(3, 8) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path.graph_edge_composition
(L2%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d)
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond pred.0
=Comment
equal-regs
=LhsExpr
1 : input.spec-%tmpvar-10.E0%0%d : BV:32
2 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge well-formedness condition done
=Ranking exprs at node L2%7%bbentry_Lfor.cond%1%bbentry
=SRC Ranking expr 0
1 : input.spec-%var-i-0.L2%7%bbentry : BV:32
=SRC Ranking expr 1
1 : input.spec-%var-ret-0.L2%7%bbentry : BV:32
=SRC Tie Breaking expr 0
1 : input.spec-%var-x-1 : MAP[BV:32 -> BV:32]
=SRC Tie Breaking expr 1
1 : input.spec-%var-x-0.L2%7%bbentry : MAP[BV:32 -> BV:32]
=DST Ranking expr 0
1 : input.dst.llvm-%n : BV:32
=DST Ranking expr 1
1 : input.dst.llvm-%x : BV:32
=DST Ranking expr 2
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=DST Ranking expr 3
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=bv_rank_exprs done
=Ranking exprs done
=dst-to-src submaps done
=cg-edge-contains-repeated-src-tfg-edge at edge-id L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry
0
=cg-edge-contains-repeated-src-tfg-edge at edge-id L2%7%bbentry_Lfor.cond%1%bbentry=>L2%7%bbentry_Lfor.cond%1%bbentry
1
=cg-edge-contains-repeated-src-tfg-edge at edge-id L2%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d
1
=cg-edge-contains-repeated-src-tfg-edge-map done
=cg.assumes_around_edge
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry assume #0
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry assume #0.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry assume #0.pred
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
140340 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140341 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140396 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
140342 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
140331 : 4 { 0x4 +1.0e1025 } : INT
140332 : 0 { 0x0 } : BOOL
140397 : select(140340, 140341, 140396, 140342, 140331, 140332) : BV:32
=RhsExpr
140343 : input.dst.llvm-%n : BV:32
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry assume #1
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry assume #1.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry assume #1.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry assume #1.pred
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
140340 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140341 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140398 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
140344 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
140331 : 4 { 0x4 +1.0e1025 } : INT
140332 : 0 { 0x0 } : BOOL
140399 : select(140340, 140341, 140398, 140344, 140331, 140332) : BV:32
=RhsExpr
140345 : input.dst.llvm-%x : BV:32
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry assume #2
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry assume #2.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry assume #2.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry assume #2.pred
=Comment
undef-behaviour-align-assume.edge.L0%0%d=>Lfor.cond%1%bbentry
=LhsExpr
140345 : input.dst.llvm-%x : BV:32
140331 : 4 { 0x4 +1.0e1025 } : INT
140351 : islangaligned(140345, 140331) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry assume #3
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry assume #3.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry assume #3.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry assume #3.pred
=Comment
pointer-implements-variable-sized-map
=LhsExpr
140273 : input.spec-%var-x-1 : MAP[BV:32 -> BV:32]
140320 : Lambda0Var : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
140322 : bvule(140276, 140320) : BOOL
140343 : input.dst.llvm-%n : BV:32
140645 : bvult(140320, 140343) : BOOL
140646 : and(140322, 140645) : BOOL
140647 : lambda(140320, 140646) : FUNCTION[BV:32 -> BOOL]
140321 : Lambda1Var : BV:32
140340 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140341 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140644 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-heap : MEMLABEL
140328 : 4 { 0x4 +1.47e129 } : BV:32
140329 : bvmul(140321, 140328) : BV:32
140345 : input.dst.llvm-%x : BV:32
140670 : bvadd(140329, 140345) : BV:32
140331 : 4 { 0x4 +1.0e1025 } : INT
140332 : 0 { 0x0 } : BOOL
140680 : select(140340, 140341, 140644, 140670, 140331, 140332) : BV:32
140681 : lambda(140321, 140680) : FUNCTION[BV:32 -> BV:32]
140682 : map(140647, 140681) : MAP[BV:32 -> BV:32]
140683 : eq(140273, 140682) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry assume #4
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry assume #4.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry assume #4.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry assume #4.pred
=Comment
precond-mlasserts
=LhsExpr
140601 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
140602 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
140603 : bvule(140601, 140602) : BOOL
140328 : 4 { 0x4 +1.47e129 } : BV:32
140369 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
140604 : bvadd(140328, 140369) : BV:32
140605 : bvadd(140601, 140604) : BV:32
140606 : eq(140602, 140605) : BOOL
140607 : and(140603, 140606) : BOOL
140608 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
140609 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
140610 : bvule(140608, 140609) : BOOL
140611 : and(140607, 140610) : BOOL
140612 : bvadd(140608, 140604) : BV:32
140613 : eq(140609, 140612) : BOOL
140614 : and(140611, 140613) : BOOL
140615 : bvuge(140601, 140608) : BOOL
140616 : bvule(140601, 140609) : BOOL
140617 : and(140615, 140616) : BOOL
140619 : bvuge(140602, 140608) : BOOL
140620 : bvule(140602, 140609) : BOOL
140621 : and(140619, 140620) : BOOL
140622 : not(140621) : BOOL
140623 : andnot1(140617, 140622) : BOOL
140618 : bvuge(140608, 140601) : BOOL
140624 : bvule(140608, 140602) : BOOL
140625 : and(140618, 140624) : BOOL
140627 : bvuge(140609, 140601) : BOOL
140628 : bvule(140609, 140602) : BOOL
140629 : and(140627, 140628) : BOOL
140630 : not(140629) : BOOL
140631 : andnot1(140625, 140630) : BOOL
140626 : and(140623, 140631) : BOOL
140632 : and(140614, 140626) : BOOL
140342 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
140633 : 3 { 0x3 +1.35e129 } : BV:32
140634 : bvand(140342, 140633) : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
140635 : eq(140634, 140276) : BOOL
140344 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
140636 : bvand(140344, 140633) : BV:32
140637 : eq(140636, 140276) : BOOL
140638 : and(140635, 140637) : BOOL
140639 : and(140632, 140638) : BOOL
140640 : eq(140342, 140601) : BOOL
140641 : eq(140344, 140608) : BOOL
140642 : and(140640, 140641) : BOOL
140643 : and(140639, 140642) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry done
cg.assumes_around_edge at L2%7%bbentry_Lfor.cond%1%bbentry=>L2%7%bbentry_Lfor.cond%1%bbentry
cg.assumes_around_edge at L2%7%bbentry_Lfor.cond%1%bbentry=>L2%7%bbentry_Lfor.cond%1%bbentry assume #0
cg.assumes_around_edge at L2%7%bbentry_Lfor.cond%1%bbentry=>L2%7%bbentry_Lfor.cond%1%bbentry assume #0.ec
cg.assumes_around_edge at L2%7%bbentry_Lfor.cond%1%bbentry=>L2%7%bbentry_Lfor.cond%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L2%7%bbentry_Lfor.cond%1%bbentry=>L2%7%bbentry_Lfor.cond%1%bbentry assume #0.pred
=Comment
merged-predicate
=LhsExpr
140473 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
140343 : input.dst.llvm-%n : BV:32
140474 : bvult(140473, 140343) : BOOL
140422 : 4 { 0x4 +1.0e1025 } : BV:64
140363 : 32 { 0x20 +1.0e1025 } : INT
140484 : bvsign_ext(140473, 140363) : BV:64
140549 : bvmul(140422, 140484) : BV:64
140367 : 63 { 0x3f +1.0e1025 } : INT
140550 : bvextract(140549, 140367, 140363) : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
140483 : bvslt(140473, 140276) : BOOL
140369 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
140563 : ite(140483, 140369, 140276) : BV:32
140565 : eq(140550, 140563) : BOOL
140331 : 4 { 0x4 +1.0e1025 } : INT
140567 : isindexforsize(140565, 140331) : BOOL
140345 : input.dst.llvm-%x : BV:32
140328 : 4 { 0x4 +1.47e129 } : BV:32
140519 : bvmul(140328, 140473) : BV:32
140522 : bvadd(140345, 140519) : BV:32
140569 : isgepoffset(140522, 140519) : BOOL
140571 : and(140567, 140569) : BOOL
140540 : islangaligned(140522, 140331) : BOOL
148915 : and(140571, 140540) : BOOL
140275 : 1 { 0x1 } : BOOL
148992 : eq(148915, 140275) : BOOL
149010 : implies(140474, 148992) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L2%7%bbentry_Lfor.cond%1%bbentry=>L2%7%bbentry_Lfor.cond%1%bbentry done
cg.assumes_around_edge at L2%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d
cg.assumes_around_edge at L2%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d done
cg.assumes_around_edge done
=corr_graph_done
=bv_rank_map
=bv_rank at L0%0%d_L0%0%d
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=bv_rank at L2%7%bbentry_Lfor.cond%1%bbentry
m_dst_rank: 2, m_src_rank: 0, m_spec_rank: 5
=bv_rank at E0%0%d_E0%0%d
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=cg_with_rank done
=cg_with_backtracker done
=asm filename

=cg_with_asm_annotation done
