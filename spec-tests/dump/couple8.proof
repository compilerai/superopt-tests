=FunctionName: foo
=result: 1
=cg_with_asm_annotation
=cg_with_backtracker
=cg_with_rank
=corr_graph foo.A2.B2.C1
=src_tfg
=TFG_SSA:
=TFG_SPEC src.spec.foo:
=TFG:
=Nodes: L0%0%d L2%7%bbentry L2%8%d L2%9%bbentry L2%11%bbentry E0%0%d
=Edges:
L0%0%d => L2%7%bbentry
L2%7%bbentry => L2%8%d
L2%8%d => L2%11%bbentry
L2%8%d => L2%9%bbentry
L2%9%bbentry => E0%0%d
L2%11%bbentry => L2%7%bbentry (backedge) 
=graph done
=is_ssa_graph:
1
=StartState:
=spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=state_end
=PC to var-version map at L0%0%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L2%7%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L2%8%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L2%9%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L2%11%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at E0%0%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=graph_with_var_versions done
=FunctionName: foo
=Input: spec-method-arg.0
=arg addr
1 : (undefined) : UNDEFINED
=arg val
1 : input.spec-%var-x-1 : MAP[BV:32 -> BV:32]
=arg end
=Node outputs: E0%0%d
=Output: spec-%ret-reg
1 : input.spec-%tmpvar-10.E0%0%d : BV:32
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
=Touched symbols:
=Symbol-map done
=Locals-map:
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;foo}
=memlabel_map.0 for call-context {*;foo}
mlheap.src.spec.foo : memlabel-mem--heap
=Edge: L0%0%d => L2%7%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-7.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-8.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-i-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-ret-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-x-0.L2%7%bbentry
1 : input.spec-%var-x-1 : MAP[BV:32 -> BV:32]
=src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((((func_head*ctor_bv)*ctor_bv)*(inline_entry*func_head))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=Edge: L2%7%bbentry => L2%8%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-0.L2%8%d
1 : input.spec-%var-x-0.L2%7%bbentry : MAP[BV:32 -> BV:32]
2 : input.spec-%var-i-0.L2%7%bbentry : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*intrinsic_app_map_get)
tfg_edge_comment end

=Edge: L2%8%d => L2%11%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-0.L2%8%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:6:match_sum_cond_1
tfg_edge_comment end

=Edge: L2%8%d => L2%9%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-0.L2%8%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:4:match_sum_cond_0
tfg_edge_comment end

=Edge: L2%9%bbentry => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-10.E0%0%d
1 : input.spec-%var-ret-0.L2%7%bbentry : BV:32
=spec-%tmpvar-5.E0%0%d
1 : input.spec-%var-ret-0.L2%7%bbentry : BV:32
=spec-%tmpvar-6.E0%0%d
1 : input.spec-%var-ret-0.L2%7%bbentry : BV:32
=spec-%tmpvar-9.E0%0%d
1 : input.spec-%var-ret-0.L2%7%bbentry : BV:32
=spec-%var-u-0.E0%0%d
1 : input.spec-%tmpvar-0.L2%8%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((((bb_entry*match_sum_val_0)*match_sum_merge_0)*func_ret)*(inline_exit*func_ret))
tfg_edge_comment end

=Edge: L2%11%bbentry => L2%7%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%var-i-0.L2%7%bbentry
1 : input.spec-%var-i-0.L2%7%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%var-ret-0.L2%7%bbentry
1 : input.spec-%var-ret-0.L2%7%bbentry : BV:32
2 : input.spec-%tmpvar-0.L2%8%d : SUM[UNIT,BV:32]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : sum_get(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=spec-%var-x-0.L2%7%bbentry
1 : input.spec-%var-x-0.L2%7%bbentry : MAP[BV:32 -> BV:32]
=src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : input.src.spec-ghostvar.itervar.1.L2%7%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-1.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%tmpvar-2.L2%7%bbentry
1 : input.spec-%var-i-0.L2%7%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-3.L2%7%bbentry
1 : input.spec-%var-ret-0.L2%7%bbentry : BV:32
2 : input.spec-%tmpvar-0.L2%8%d : SUM[UNIT,BV:32]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : sum_get(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=spec-%var-x_i-0.L2%7%bbentry
1 : input.spec-%tmpvar-0.L2%8%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(((((bb_entry*match_sum_val_1)*ctor_bv)*intrinsic_app_bvadd)*(intrinsic_app_bvadd*tailrec_backedge))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=graph_with_precondition_done

=Locs in src.spec.foo
=Loc 1 in src.spec.foo.
REGMEM
spec-%var-x-1
1 : input.spec-%var-x-1 : MAP[BV:32 -> BV:32]
=Loc 18 in src.spec.foo.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--heap
=Loc 19 in src.spec.foo.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 20 in src.spec.foo.
REGMEM
spec-%tmpvar-0.L2%8%d
1 : input.spec-%tmpvar-0.L2%8%d : SUM[UNIT,BV:32]
=Loc 21 in src.spec.foo.
REGMEM
spec-%var-i-0.L2%7%bbentry
1 : input.spec-%var-i-0.L2%7%bbentry : BV:32
=Loc 22 in src.spec.foo.
REGMEM
spec-%var-x-0.L2%7%bbentry
1 : input.spec-%var-x-0.L2%7%bbentry : MAP[BV:32 -> BV:32]
=Loc 23 in src.spec.foo.
REGMEM
spec-%tmpvar-10.E0%0%d
1 : input.spec-%tmpvar-10.E0%0%d : BV:32
=Loc 24 in src.spec.foo.
REGMEM
spec-%tmpvar-5.E0%0%d
1 : input.spec-%tmpvar-5.E0%0%d : BV:32
=Loc 25 in src.spec.foo.
REGMEM
spec-%tmpvar-6.E0%0%d
1 : input.spec-%tmpvar-6.E0%0%d : BV:32
=Loc 26 in src.spec.foo.
REGMEM
spec-%tmpvar-9.E0%0%d
1 : input.spec-%tmpvar-9.E0%0%d : BV:32
=Loc 27 in src.spec.foo.
REGMEM
spec-%var-ret-0.L2%7%bbentry
1 : input.spec-%var-ret-0.L2%7%bbentry : BV:32
=Loc 28 in src.spec.foo.
REGMEM
spec-%var-u-0.E0%0%d
1 : input.spec-%var-u-0.E0%0%d : UNIT
=Loc 29 in src.spec.foo.
REGMEM
spec-%tmpvar-7.L2%7%bbentry
1 : input.spec-%tmpvar-7.L2%7%bbentry : BV:32
=Loc 30 in src.spec.foo.
REGMEM
spec-%tmpvar-8.L2%7%bbentry
1 : input.spec-%tmpvar-8.L2%7%bbentry : BV:32
=Loc 31 in src.spec.foo.
REGMEM
src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : input.src.spec-ghostvar.itervar.1.L2%7%bbentry : BV:32
=Loc 32 in src.spec.foo.
REGMEM
spec-%tmpvar-1.L2%7%bbentry
1 : input.spec-%tmpvar-1.L2%7%bbentry : BV:32
=Loc 33 in src.spec.foo.
REGMEM
spec-%tmpvar-2.L2%7%bbentry
1 : input.spec-%tmpvar-2.L2%7%bbentry : BV:32
=Loc 34 in src.spec.foo.
REGMEM
spec-%tmpvar-3.L2%7%bbentry
1 : input.spec-%tmpvar-3.L2%7%bbentry : BV:32
=Loc 35 in src.spec.foo.
REGMEM
spec-%var-x_i-0.L2%7%bbentry
1 : input.spec-%var-x_i-0.L2%7%bbentry : BV:32
=Locs end
=Liveness in src.spec.foo
=live locs at L0%0%d
1, 
=live locs at L2%7%bbentry
21, 22, 27, 
=live locs at L2%8%d
20, 21, 22, 27, 
=live locs at L2%9%bbentry
27, 
=live locs at L2%11%bbentry
20, 21, 22, 27, 
=live locs at E0%0%d
23[f], 

=Definedness in src.spec.foo
=loc definedness at L0%0%d
1, 18, 19
=loc definedness at L2%7%bbentry
1, 18, 19, 21, 22, 27, 29, 30, 31
=loc definedness at L2%8%d
1, 18, 19, 20, 21, 22, 27, 29, 30, 31
=loc definedness at L2%9%bbentry
1, 18, 19, 20, 21, 22, 27, 29, 30, 31
=loc definedness at L2%11%bbentry
1, 18, 19, 20, 21, 22, 27, 29, 30, 31
=loc definedness at E0%0%d
1, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31

=Branch affecting variable locs in src.spec.foo
=branch affecting variable locs at L0%0%d
1
=branch affecting variable locs at L2%7%bbentry
21, 22
=branch affecting variable locs at L2%8%d
20, 21, 22
=branch affecting variable locs at L2%9%bbentry

=branch affecting variable locs at L2%11%bbentry
21, 22
=branch affecting variable locs at E0%0%d


=Relevant Memlabels in src.spec.foo
=relevant memlabels
=function: foo
memlabel-mem--heap
memlabel-mem--arg.0
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%7%bbentry
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%7%bbentry for loc_id 21 {input.spec-%var-i-0.L2%7%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%7%bbentry for loc_id 22 {input.spec-%var-x-0.L2%7%bbentry }
1 : input.spec-%var-x-1 : MAP[BV:32 -> BV:32]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%7%bbentry for loc_id 27 {input.spec-%var-ret-0.L2%7%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%7%bbentry for loc_id 29 {input.spec-%tmpvar-7.L2%7%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%7%bbentry for loc_id 30 {input.spec-%tmpvar-8.L2%7%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%7%bbentry for loc_id 31 {input.src.spec-ghostvar.itervar.1.L2%7%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%7%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%7%bbentry=>L2%8%d
=graph_with_edge_structures.loc_to_expr_map at L2%7%bbentry=>L2%8%d for loc_id 20 {input.spec-%tmpvar-0.L2%8%d }
1 : input.spec-%var-x-0.L2%7%bbentry : MAP[BV:32 -> BV:32]
2 : input.spec-%var-i-0.L2%7%bbentry : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=graph_with_edge_structures.loc_to_expr_map at L2%7%bbentry=>L2%8%d done
=graph_with_edge_structures.loc_to_expr_map at L2%8%d=>L2%9%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%8%d=>L2%9%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%8%d=>L2%11%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%8%d=>L2%11%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%9%bbentry=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at L2%9%bbentry=>E0%0%d for loc_id 23 {input.spec-%tmpvar-10.E0%0%d }
1 : input.spec-%var-ret-0.L2%7%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%9%bbentry=>E0%0%d for loc_id 24 {input.spec-%tmpvar-5.E0%0%d }
1 : input.spec-%var-ret-0.L2%7%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%9%bbentry=>E0%0%d for loc_id 25 {input.spec-%tmpvar-6.E0%0%d }
1 : input.spec-%var-ret-0.L2%7%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%9%bbentry=>E0%0%d for loc_id 26 {input.spec-%tmpvar-9.E0%0%d }
1 : input.spec-%var-ret-0.L2%7%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%9%bbentry=>E0%0%d for loc_id 28 {input.spec-%var-u-0.E0%0%d }
1 : input.spec-%tmpvar-0.L2%8%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=graph_with_edge_structures.loc_to_expr_map at L2%9%bbentry=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map at L2%11%bbentry=>L2%7%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%11%bbentry=>L2%7%bbentry for loc_id 21 {input.spec-%var-i-0.L2%7%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-i-0.L2%7%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%11%bbentry=>L2%7%bbentry for loc_id 27 {input.spec-%var-ret-0.L2%7%bbentry }
1 : input.spec-%var-ret-0.L2%7%bbentry : BV:32
2 : input.spec-%tmpvar-0.L2%8%d : SUM[UNIT,BV:32]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : sum_get(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%11%bbentry=>L2%7%bbentry for loc_id 31 {input.src.spec-ghostvar.itervar.1.L2%7%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.spec-ghostvar.itervar.1.L2%7%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%11%bbentry=>L2%7%bbentry for loc_id 32 {input.spec-%tmpvar-1.L2%7%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%11%bbentry=>L2%7%bbentry for loc_id 33 {input.spec-%tmpvar-2.L2%7%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-i-0.L2%7%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%11%bbentry=>L2%7%bbentry for loc_id 34 {input.spec-%tmpvar-3.L2%7%bbentry }
1 : input.spec-%var-ret-0.L2%7%bbentry : BV:32
2 : input.spec-%tmpvar-0.L2%8%d : SUM[UNIT,BV:32]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : sum_get(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%11%bbentry=>L2%7%bbentry for loc_id 35 {input.spec-%var-x_i-0.L2%7%bbentry }
1 : input.spec-%tmpvar-0.L2%8%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%11%bbentry=>L2%7%bbentry done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at L2%7%bbentry:
vacuous mls at L2%8%d:
vacuous mls at L2%9%bbentry:
vacuous mls at L2%11%bbentry:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at L2%7%bbentry:
non-vacuous mls at L2%8%d:
non-vacuous mls at L2%9%bbentry:
non-vacuous mls at L2%11%bbentry:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in src.spec.foo
=avail_exprs begin
=loc 1
=loc_expr
140273 : input.spec-%var-x-1 : MAP[BV:32 -> BV:32]
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 22
=loc_expr
140417 : input.spec-%var-x-0.L2%7%bbentry : MAP[BV:32 -> BV:32]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-x-1 : MAP[BV:32 -> BV:32]
=avail_exprs_val.end
=loc 29
=loc_expr
140442 : input.spec-%tmpvar-7.L2%7%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 30
=loc_expr
140443 : input.spec-%tmpvar-8.L2%7%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 32
=loc_expr
140444 : input.spec-%tmpvar-1.L2%7%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 1 { 0x1 +1.11e129 } : BV:32
=avail_exprs_val.end
=avail_exprs end
=sprel_map in src.spec.foo
=loc 29 expr
1 : input.spec-%tmpvar-7.L2%7%bbentry : BV:32
=loc 29 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 30 expr
1 : input.spec-%tmpvar-8.L2%7%bbentry : BV:32
=loc 30 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 32 expr
1 : input.spec-%tmpvar-1.L2%7%bbentry : BV:32
=loc 32 spreled-expr
140288 : 1 { 0x1 +1.11e129 } : BV:32
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;foo}
=loc_id 1 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 18 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 19 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 20 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 21 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 22 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 23 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 24 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 25 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 26 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 27 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 28 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 29 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 30 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 31 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 32 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 33 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 34 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 35 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 29 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 30 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 32 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>L2%7%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%7%bbentry=>L2%8%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%8%d=>L2%9%bbentry
1 : input.spec-%tmpvar-0.L2%8%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%8%d=>L2%11%bbentry
1 : input.spec-%tmpvar-0.L2%8%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%9%bbentry=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%11%bbentry=>L2%7%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>L2%7%bbentry
=spec-%tmpvar-7.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-8.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-i-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-ret-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-x-0.L2%7%bbentry
1 : input.spec-%var-x-1 : MAP[BV:32 -> BV:32]
=src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%7%bbentry=>L2%8%d
=spec-%tmpvar-0.L2%8%d
1 : input.spec-%var-x-0.L2%7%bbentry : MAP[BV:32 -> BV:32]
2 : input.spec-%var-i-0.L2%7%bbentry : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%8%d=>L2%9%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%8%d=>L2%11%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%9%bbentry=>E0%0%d
=spec-%tmpvar-10.E0%0%d
1 : input.spec-%var-ret-0.L2%7%bbentry : BV:32
=spec-%tmpvar-5.E0%0%d
1 : input.spec-%var-ret-0.L2%7%bbentry : BV:32
=spec-%tmpvar-6.E0%0%d
1 : input.spec-%var-ret-0.L2%7%bbentry : BV:32
=spec-%tmpvar-9.E0%0%d
1 : input.spec-%var-ret-0.L2%7%bbentry : BV:32
=spec-%var-u-0.E0%0%d
1 : input.spec-%tmpvar-0.L2%8%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%11%bbentry=>L2%7%bbentry
=spec-%var-i-0.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-i-0.L2%7%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%var-ret-0.L2%7%bbentry
1 : input.spec-%var-ret-0.L2%7%bbentry : BV:32
2 : input.spec-%tmpvar-0.L2%8%d : SUM[UNIT,BV:32]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : sum_get(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.spec-ghostvar.itervar.1.L2%7%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-1.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%tmpvar-2.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-i-0.L2%7%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-3.L2%7%bbentry
1 : input.spec-%var-ret-0.L2%7%bbentry : BV:32
2 : input.spec-%tmpvar-0.L2%8%d : SUM[UNIT,BV:32]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : sum_get(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=spec-%var-x_i-0.L2%7%bbentry
1 : input.spec-%tmpvar-0.L2%8%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>L2%7%bbentry
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>L2%7%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%7%bbentry=>L2%8%d
=graph_with_simplified_assets.simplified_assumes at L2%7%bbentry=>L2%8%d done
=graph_with_simplified_assets.simplified_assumes at L2%8%d=>L2%9%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%8%d=>L2%9%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%8%d=>L2%11%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%8%d=>L2%11%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%9%bbentry=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at L2%9%bbentry=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes at L2%11%bbentry=>L2%7%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%11%bbentry=>L2%7%bbentry done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
0
=String-contents:
=Nextpc-map:
=Nextpc-map done
=suffixpaths for src.spec.foo
=suffixpath_at_L0%0%d for src.spec.foo
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_L2%7%bbentry for src.spec.foo
=suffixpath_at_L2%7%bbentry.graph_edge_composition
(L0%0%d=>L2%7%bbentry)
=suffixpath_at_L2%8%d for src.spec.foo
=suffixpath_at_L2%8%d.graph_edge_composition
((L0%0%d=>L2%7%bbentry)*(L2%7%bbentry=>L2%8%d))
=suffixpath_at_L2%9%bbentry for src.spec.foo
=suffixpath_at_L2%9%bbentry.graph_edge_composition
((L0%0%d=>L2%7%bbentry)*((L2%7%bbentry=>L2%8%d)*(L2%8%d=>L2%9%bbentry)))
=suffixpath_at_L2%11%bbentry for src.spec.foo
=suffixpath_at_L2%11%bbentry.graph_edge_composition
((L0%0%d=>L2%7%bbentry)*((L2%7%bbentry=>L2%8%d)*(L2%8%d=>L2%11%bbentry)))
=suffixpath_at_E0%0%d for src.spec.foo
=suffixpath_at_E0%0%d.graph_edge_composition
((L0%0%d=>L2%7%bbentry)*((L2%7%bbentry=>L2%8%d)*((L2%8%d=>L2%9%bbentry)*(L2%9%bbentry=>E0%0%d))))
=suffixpaths for src.spec.foo done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>L2%7%bbentry
tfg.assumes_around_edge at L0%0%d=>L2%7%bbentry done
tfg.assumes_around_edge at L2%7%bbentry=>L2%8%d
tfg.assumes_around_edge at L2%7%bbentry=>L2%8%d done
tfg.assumes_around_edge at L2%8%d=>L2%9%bbentry
tfg.assumes_around_edge at L2%8%d=>L2%9%bbentry done
tfg.assumes_around_edge at L2%8%d=>L2%11%bbentry
tfg.assumes_around_edge at L2%8%d=>L2%11%bbentry done
tfg.assumes_around_edge at L2%9%bbentry=>E0%0%d
tfg.assumes_around_edge at L2%9%bbentry=>E0%0%d done
tfg.assumes_around_edge at L2%11%bbentry=>L2%7%bbentry
tfg.assumes_around_edge at L2%11%bbentry=>L2%7%bbentry done
tfg.assumes_around_edge done
=TFGdone
=TFG_SPEC_done
=TFG_SSA_done
=dst_tfg
=TFG_SSA:
=TFG_LLVM dst.llvm.foo:
=TFG:
=Nodes: L0%0%d Lfor.body%1%d Lfor.cond%1%bbentry Lfor.cond%2%d Lfor.end%1%d E0%0%d
=Edges:
L0%0%d => Lfor.cond%1%bbentry
Lfor.cond%1%bbentry => Lfor.cond%2%d
Lfor.cond%2%d => Lfor.body%1%d
Lfor.cond%2%d => Lfor.end%1%d
Lfor.end%1%d => E0%0%d
Lfor.body%1%d => Lfor.cond%1%bbentry (backedge) 
=graph done
=is_ssa_graph:
1
=StartState:
=dst.llvm-%x
1 : input.dst.llvm-%x : BV:32
=dst.llvm-%n
1 : input.dst.llvm-%n : BV:32
=dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=state_end
=PC to var-version map at L0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.body%1%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.cond%1%bbentry
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.cond%2%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.end%1%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at E0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=graph_with_var_versions done
=FunctionName: foo
=Input: llvm-method-arg.1
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
=arg val
1 : input.dst.llvm-%n : BV:32
=arg end
=Input: llvm-method-arg.0
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%x : BV:32
=arg end
=Node outputs: E0%0%d
=Output: heap
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=Output: llvm-indir_tgt
1 : retaddr_const : BV:32
=Output: llvm-%ret-reg
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : foo : 20 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%x : 4 : 4 : 0
C_LOCAL=L0%0%argnum1= : dst.llvm-%n : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;foo}
=memlabel_map.0 for call-context {*;foo}
mlheap.dst.llvm.foo : memlabel-mem-may-straddle-symbol.1-heap
=memlabel_map.1 for call-context {*;foo}
mlvar.dst.llvm.foo.0 : memlabel-mem-no-straddle-symbol.1-heap-arg.0
=Edge: L0%0%d => Lfor.cond%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.local_alloc_count.Lfor.cond%1%bbentry
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:-1:((((((start_pc_edge*  br label %for.cond, !dbg !21)*  %ret.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ], !dbg !15)*(  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ], !dbg !20*  br label %for.cond, !dbg !21))*  br label %for.cond, !dbg !21)*(  br label %for.cond, !dbg !21*  br label %for.cond, !dbg !21))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=Edge: Lfor.cond%1%bbentry => Lfor.cond%2%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%cmp.Lfor.cond%2%d
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*  %cmp = icmp ult i32 %i.0, %n, !dbg !22)
tfg_edge_comment end

=Edge: Lfor.cond%2%d => Lfor.body%1%d
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %cmp, label %for.body, label %for.end, !dbg !24*  br i1 %cmp, label %for.body, label %for.end, !dbg !24)*  br i1 %cmp, label %for.body, label %for.end, !dbg !24)
tfg_edge_comment end

=Edge: Lfor.cond%2%d => Lfor.end%1%d
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
2 : not(1) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %cmp, label %for.body, label %for.end, !dbg !24*  br i1 %cmp, label %for.body, label %for.end, !dbg !24)*  br i1 %cmp, label %for.body, label %for.end, !dbg !24)
tfg_edge_comment end

=Edge: Lfor.end%1%d => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:1:  ret i32 %ret.0, !dbg !33
tfg_edge_comment end

=Edge: Lfor.body%1%d => Lfor.cond%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : mlvar.dst.llvm.foo.0 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 0 { 0x0 +1.0e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : bvadd(5, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(2, 3, 4, 11, 12, 13) : BV:32
15 : bvadd(1, 14) : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%0.Lfor.cond%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
=dst.llvm-%add.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : mlvar.dst.llvm.foo.0 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 0 { 0x0 +1.0e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : bvadd(5, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(2, 3, 4, 11, 12, 13) : BV:32
15 : bvadd(1, 14) : BV:32
=dst.llvm-%arrayidx.Lfor.cond%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(3, 4) : BV:32
6 : bvadd(2, 5) : BV:32
7 : bvadd(1, 6) : BV:32
=dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(3, 4) : BV:32
6 : bvadd(2, 5) : BV:32
7 : bvadd(1, 6) : BV:32
=dst.llvm-%f9857086f688cad98a3e07acb716d2f.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : mlvar.dst.llvm.foo.0 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 0 { 0x0 +1.0e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : bvadd(5, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(2, 3, 4, 11, 12, 13) : BV:32
15 : bvadd(1, 14) : BV:32
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : input.dst.llvm-%x : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(3, 4) : BV:32
6 : bvadd(2, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : 4 { 0x4 +1.0e1025 } : INT
9 : islangaligned(7, 8) : BOOL
=EdgeAssume.1
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvslt(1, 2) : BOOL
4 : 32 { 0x20 +1.0e1025 } : INT
5 : bvsign_ext(1, 4) : BV:64
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvzero_ext(6, 4) : BV:64
8 : bvmul(5, 7) : BV:64
9 : 63 { 0x3f +1.0e1025 } : INT
10 : bvextract(8, 9, 4) : BV:32
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : eq(10, 11) : BOOL
13 : eq(10, 2) : BOOL
14 : ite(3, 12, 13) : BOOL
15 : 4 { 0x4 +1.0e1025 } : INT
16 : isindexforsize(14, 15) : BOOL
17 : input.dst.llvm-%x : BV:32
18 : bvmul(1, 6) : BV:32
19 : bvadd(2, 18) : BV:32
20 : bvadd(17, 19) : BV:32
21 : isgepoffset(20, 18) : BOOL
22 : and(16, 21) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:1:((  %arrayidx = getelementptr inbounds i32, i32* %x, i32 %i.0, !dbg !25*(  %arrayidx = getelementptr inbounds i32, i32* %x, i32 %i.0, !dbg !25*  %arrayidx = getelementptr inbounds i32, i32* %x, i32 %i.0, !dbg !25))*((((  %0 = load i32, i32* %arrayidx, align 4, !dbg !25*  %0 = load i32, i32* %arrayidx, align 4, !dbg !25)*(((  %add = add i32 %ret.0, %0, !dbg !27*  br label %for.inc, !dbg !28)*  br label %for.inc, !dbg !28)*  br label %for.inc, !dbg !28))*(((((  %inc = add i32 %i.0, 1, !dbg !29*  br label %for.cond, !dbg !30, !llvm.loop !31)*  %ret.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ], !dbg !15)*(  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ], !dbg !20*  br label %for.cond, !dbg !30, !llvm.loop !31))*  br label %for.cond, !dbg !30, !llvm.loop !31)*(  br label %for.cond, !dbg !30, !llvm.loop !31*  br label %for.cond, !dbg !30, !llvm.loop !31)))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge)))
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%x : BV:32
=predicate done
=start_pc_precondition.1
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%n : BV:32
=predicate done
=graph_with_precondition_done

=Locs in dst.llvm.foo
=Loc 100006 in dst.llvm.foo.
REGMEM
dst.llvm-%n
1 : input.dst.llvm-%n : BV:32
=Loc 100009 in dst.llvm.foo.
REGMEM
dst.llvm-%x
1 : input.dst.llvm-%x : BV:32
=Loc 100017 in dst.llvm.foo.
REGMEM
dst.llvm-%hidden-reg
1 : input.dst.llvm-%hidden-reg : BV:32
=Loc 100019 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.0
1 : input.dst.llvm-callee-save.0 : BV:32
=Loc 100020 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.1
1 : input.dst.llvm-callee-save.1 : BV:32
=Loc 100021 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.2
1 : input.dst.llvm-callee-save.2 : BV:32
=Loc 100022 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.3
1 : input.dst.llvm-callee-save.3 : BV:32
=Loc 100026 in dst.llvm.foo.
REGMEM
dst.local_alloc_count.=L0%0%d=
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=Loc 100027 in dst.llvm.foo.
REGMEM
dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
=Loc 100028 in dst.llvm.foo.
REGMEM
dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=Loc 100030 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 100031 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/
=Loc 100032 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
=Loc 100033 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem-may-straddle-symbol.1-heap
=Loc 100034 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.1
=Loc 100035 in dst.llvm.foo.
REGMEM
dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=Loc 100036 in dst.llvm.foo.
REGMEM
dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=Loc 100037 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=Loc 100038 in dst.llvm.foo.
REGMEM
dst.llvm-indir_tgt.E0%0%d
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=Loc 100039 in dst.llvm.foo.
REGMEM
dst.llvm-%cmp.Lfor.cond%2%d
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=Loc 100040 in dst.llvm.foo.
REGMEM
dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=Loc 100041 in dst.llvm.foo.
REGMEM
dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=Loc 100042 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=Loc 100043 in dst.llvm.foo.
REGMEM
dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=Loc 100044 in dst.llvm.foo.
REGMEM
dst.llvm-%0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%0.Lfor.cond%1%bbentry : BV:32
=Loc 100045 in dst.llvm.foo.
REGMEM
dst.llvm-%add.Lfor.cond%1%bbentry
1 : input.dst.llvm-%add.Lfor.cond%1%bbentry : BV:32
=Loc 100046 in dst.llvm.foo.
REGMEM
dst.llvm-%arrayidx.Lfor.cond%1%bbentry
1 : input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry : BV:32
=Loc 100047 in dst.llvm.foo.
REGMEM
dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=Loc 100048 in dst.llvm.foo.
REGMEM
dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=Loc 100049 in dst.llvm.foo.
REGMEM
dst.llvm-%f9857086f688cad98a3e07acb716d2f.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=Loc 100050 in dst.llvm.foo.
REGMEM
dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=Loc 100051 in dst.llvm.foo.
REGMEM
dst.llvm-%inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=Loc 100052 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=Loc 100053 in dst.llvm.foo.
REGMEM
dst.local_alloc_count.Lfor.cond%1%bbentry
1 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
=Loc 100054 in dst.llvm.foo.
REGMEM
dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : ROUNDING_MODE
=Locs end
=Liveness in dst.llvm.foo
=live locs at L0%0%d
100006, 100009, 100031, 100032, 100033, 
=live locs at Lfor.body%1%d
100006, 100009, 100031, 100032, 100033, 100037, 100040, 
=live locs at Lfor.cond%1%bbentry
100006, 100009, 100031, 100032, 100033, 100037[f], 100040, 
=live locs at Lfor.cond%2%d
100006, 100009, 100031, 100032, 100033, 100037[f], 100039, 100040, 
=live locs at Lfor.end%1%d
100033, 100037[f], 
=live locs at E0%0%d
100033, 100037[f], 

=Definedness in dst.llvm.foo
=loc definedness at L0%0%d
100006, 100009, 100027, 100028, 100030, 100031, 100032, 100033, 100034
=loc definedness at Lfor.body%1%d
100006, 100009, 100027, 100028, 100030, 100031, 100032, 100033, 100034, 100037, 100039, 100040, 100041, 100042, 100043, 100053, 100054
=loc definedness at Lfor.cond%1%bbentry
100006, 100009, 100027, 100028, 100030, 100031, 100032, 100033, 100034, 100037, 100040, 100041, 100042, 100043, 100053, 100054
=loc definedness at Lfor.cond%2%d
100006, 100009, 100027, 100028, 100030, 100031, 100032, 100033, 100034, 100037, 100039, 100040, 100041, 100042, 100043, 100053, 100054
=loc definedness at Lfor.end%1%d
100006, 100009, 100027, 100028, 100030, 100031, 100032, 100033, 100034, 100037, 100039, 100040, 100041, 100042, 100043, 100053, 100054
=loc definedness at E0%0%d
100006, 100009, 100027, 100028, 100030, 100031, 100032, 100033, 100034, 100035, 100036, 100037, 100038, 100039, 100040, 100041, 100042, 100043, 100053, 100054

=Branch affecting variable locs in dst.llvm.foo
=branch affecting variable locs at L0%0%d
100006
=branch affecting variable locs at Lfor.body%1%d
100006, 100040
=branch affecting variable locs at Lfor.cond%1%bbentry
100006, 100040
=branch affecting variable locs at Lfor.cond%2%d
100006, 100039, 100040
=branch affecting variable locs at Lfor.end%1%d

=branch affecting variable locs at E0%0%d


=Relevant Memlabels in dst.llvm.foo
=relevant memlabels
=function: foo
memlabel-mem--arg.0
memlabel-mem-may-straddle-symbol.1-heap
memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
memlabel-mem--arg.1
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100037 {input.dst.llvm-%ret.0.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100040 {input.dst.llvm-%i.0.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100041 {input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100042 {input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100043 {input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100053 {input.dst.local_alloc_count.Lfor.cond%1%bbentry }
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100054 {input.dst.cur_rounding_mode.Lfor.cond%1%bbentry }
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100037 {input.dst.llvm-%ret.0.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(2, 3, 4, 9, 10, 11) : BV:32
13 : bvadd(1, 12) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100040 {input.dst.llvm-%i.0.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100043 {input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100044 {input.dst.llvm-%0.Lfor.cond%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100045 {input.dst.llvm-%add.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(2, 3, 4, 9, 10, 11) : BV:32
13 : bvadd(1, 12) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100046 {input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100047 {input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.1.total_offset.Lfor.cond%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100048 {input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.2.total_offset.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100049 {input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100050 {input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100051 {input.dst.llvm-%inc.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100052 {input.dst.llvm-%ret.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(2, 3, 4, 9, 10, 11) : BV:32
13 : bvadd(1, 12) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%1%bbentry=>Lfor.cond%2%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%1%bbentry=>Lfor.cond%2%d for loc_id 100039 {input.dst.llvm-%cmp.Lfor.cond%2%d }
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%1%bbentry=>Lfor.cond%2%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.body%1%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.body%1%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.end%1%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.end%1%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.end%1%d=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.end%1%d=>E0%0%d for loc_id 100035 {input.dst.llvm-%hidden-reg.E0%0%d }
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.end%1%d=>E0%0%d for loc_id 100036 {input.dst.llvm-%ret-reg.E0%0%d }
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.end%1%d=>E0%0%d for loc_id 100038 {input.dst.llvm-indir_tgt.E0%0%d }
1 : retaddr_const : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.end%1%d=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at Lfor.body%1%d:
vacuous mls at Lfor.cond%1%bbentry:
vacuous mls at Lfor.cond%2%d:
vacuous mls at Lfor.end%1%d:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at Lfor.body%1%d:
non-vacuous mls at Lfor.cond%1%bbentry:
non-vacuous mls at Lfor.cond%2%d:
non-vacuous mls at Lfor.end%1%d:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in dst.llvm.foo
=avail_exprs begin
=loc 100006
=loc_expr
140341 : input.dst.llvm-%n : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100009
=loc_expr
140340 : input.dst.llvm-%x : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100017
=loc_expr
140387 : input.dst.llvm-%hidden-reg : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100019
=loc_expr
140388 : input.dst.llvm-callee-save.0 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100020
=loc_expr
140390 : input.dst.llvm-callee-save.1 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100021
=loc_expr
140392 : input.dst.llvm-callee-save.2 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100022
=loc_expr
140394 : input.dst.llvm-callee-save.3 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100026
=loc_expr
140350 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100027
=loc_expr
140344 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100028
=loc_expr
140345 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100035
=loc_expr
140494 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=avail_exprs_val.end
=loc 100036
=loc_expr
140495 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.end
=loc 100038
=loc_expr
140496 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : retaddr_const : BV:32
=avail_exprs_val.end
=loc 100041
=loc_expr
140497 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100042
=loc_expr
140498 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100053
=loc_expr
140508 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.end
=loc 100054
=loc_expr
140509 : input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : ROUNDING_MODE
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=avail_exprs_val.end
=avail_exprs end
=sprel_map in dst.llvm.foo
=loc 100038 expr
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=loc 100038 spreled-expr
140267 : retaddr_const : BV:32
=loc 100041 expr
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=loc 100041 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100042 expr
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=loc 100042 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100053 expr
1 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
=loc 100053 spreled-expr
140350 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=loc 100054 expr
1 : input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : ROUNDING_MODE
=loc 100054 spreled-expr
140349 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;foo}
=loc_id 100006 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.1, )
=loc_id 100009 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100017 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100019 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100020 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100021 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100022 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100026 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100027 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100028 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100030 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100031 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100032 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100033 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100034 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100035 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100036 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100037 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100038 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100039 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100040 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100041 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100042 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100043 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100044 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100045 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100046 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100047 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100048 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100049 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100050 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100051 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100052 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100053 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100054 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 100038 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100041 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100042 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100053 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100054 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>Lfor.cond%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.body%1%d=>Lfor.cond%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond%1%bbentry=>Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond%2%d=>Lfor.body%1%d
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond%2%d=>Lfor.end%1%d
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
2 : not(1) : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.end%1%d=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>Lfor.cond%1%bbentry
=dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.local_alloc_count.Lfor.cond%1%bbentry
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.body%1%d=>Lfor.cond%1%bbentry
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(2, 3, 4, 9, 10, 11) : BV:32
13 : bvadd(1, 12) : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%0.Lfor.cond%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
=dst.llvm-%add.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(2, 3, 4, 9, 10, 11) : BV:32
13 : bvadd(1, 12) : BV:32
=dst.llvm-%arrayidx.Lfor.cond%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%f9857086f688cad98a3e07acb716d2f.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%inc.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(2, 3, 4, 9, 10, 11) : BV:32
13 : bvadd(1, 12) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond%1%bbentry=>Lfor.cond%2%d
=dst.llvm-%cmp.Lfor.cond%2%d
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond%2%d=>Lfor.body%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond%2%d=>Lfor.end%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.end%1%d=>E0%0%d
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lfor.cond%1%bbentry
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lfor.cond%1%bbentry assume# 0
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lfor.cond%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%d=>Lfor.cond%1%bbentry
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%d=>Lfor.cond%1%bbentry assume# 0
1 : 4 { 0x4 +1.0e1025 } : BV:64
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : 32 { 0x20 +1.0e1025 } : INT
4 : bvsign_ext(2, 3) : BV:64
5 : bvmul(1, 4) : BV:64
6 : 63 { 0x3f +1.0e1025 } : INT
7 : bvextract(5, 6, 3) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvslt(2, 8) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : ite(9, 10, 8) : BV:32
12 : eq(7, 11) : BOOL
13 : 4 { 0x4 +1.0e1025 } : INT
14 : isindexforsize(12, 13) : BOOL
15 : input.dst.llvm-%x : BV:32
16 : 4 { 0x4 +1.47e129 } : BV:32
17 : bvmul(16, 2) : BV:32
18 : bvadd(15, 17) : BV:32
19 : isgepoffset(18, 17) : BOOL
20 : and(14, 19) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%d=>Lfor.cond%1%bbentry assume# 1
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
6 : 4 { 0x4 +1.0e1025 } : INT
7 : islangaligned(5, 6) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%d=>Lfor.cond%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%1%bbentry=>Lfor.cond%2%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%1%bbentry=>Lfor.cond%2%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.body%1%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.body%1%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.end%1%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.end%1%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.end%1%d=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at Lfor.end%1%d=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
1
=String-contents:
=Nextpc-map:
=Nextpc-map done
=suffixpaths for dst.llvm.foo
=suffixpath_at_L0%0%d for dst.llvm.foo
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_Lfor.body%1%d for dst.llvm.foo
=suffixpath_at_Lfor.body%1%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*(Lfor.cond%2%d=>Lfor.body%1%d)))
=suffixpath_at_Lfor.cond%1%bbentry for dst.llvm.foo
=suffixpath_at_Lfor.cond%1%bbentry.graph_edge_composition
(L0%0%d=>Lfor.cond%1%bbentry)
=suffixpath_at_Lfor.cond%2%d for dst.llvm.foo
=suffixpath_at_Lfor.cond%2%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.cond%2%d))
=suffixpath_at_Lfor.end%1%d for dst.llvm.foo
=suffixpath_at_Lfor.end%1%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*(Lfor.cond%2%d=>Lfor.end%1%d)))
=suffixpath_at_E0%0%d for dst.llvm.foo
=suffixpath_at_E0%0%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.end%1%d)*(Lfor.end%1%d=>E0%0%d))))
=suffixpaths for dst.llvm.foo done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry assume #0
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry assume #0.ec
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry assume #0.pred
=Comment
undef-behaviour-align-assume.edge.L0%0%d=>Lfor.cond%1%bbentry
=LhsExpr
140340 : input.dst.llvm-%x : BV:32
140331 : 4 { 0x4 +1.0e1025 } : INT
140351 : islangaligned(140340, 140331) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry done
tfg.assumes_around_edge at Lfor.body%1%d=>Lfor.cond%1%bbentry
tfg.assumes_around_edge at Lfor.body%1%d=>Lfor.cond%1%bbentry assume #0
tfg.assumes_around_edge at Lfor.body%1%d=>Lfor.cond%1%bbentry assume #0.ec
tfg.assumes_around_edge at Lfor.body%1%d=>Lfor.cond%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lfor.body%1%d=>Lfor.cond%1%bbentry assume #0.pred
=Comment
undef-behavioursome.edge.Lfor.body%1%d=>Lfor.cond%1%bbentry
=LhsExpr
140422 : 4 { 0x4 +1.0e1025 } : BV:64
140473 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
140363 : 32 { 0x20 +1.0e1025 } : INT
140484 : bvsign_ext(140473, 140363) : BV:64
140549 : bvmul(140422, 140484) : BV:64
140367 : 63 { 0x3f +1.0e1025 } : INT
140550 : bvextract(140549, 140367, 140363) : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
140483 : bvslt(140473, 140276) : BOOL
140369 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
140563 : ite(140483, 140369, 140276) : BV:32
140565 : eq(140550, 140563) : BOOL
140331 : 4 { 0x4 +1.0e1025 } : INT
140567 : isindexforsize(140565, 140331) : BOOL
140340 : input.dst.llvm-%x : BV:32
140328 : 4 { 0x4 +1.47e129 } : BV:32
140519 : bvmul(140328, 140473) : BV:32
140522 : bvadd(140340, 140519) : BV:32
140569 : isgepoffset(140522, 140519) : BOOL
140571 : and(140567, 140569) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lfor.body%1%d=>Lfor.cond%1%bbentry assume #1
tfg.assumes_around_edge at Lfor.body%1%d=>Lfor.cond%1%bbentry assume #1.ec
tfg.assumes_around_edge at Lfor.body%1%d=>Lfor.cond%1%bbentry assume #1.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lfor.body%1%d=>Lfor.cond%1%bbentry assume #1.pred
=Comment
undef-behaviour-align-assume.edge.Lfor.body%1%d=>Lfor.cond%1%bbentry
=LhsExpr
140340 : input.dst.llvm-%x : BV:32
140328 : 4 { 0x4 +1.47e129 } : BV:32
140473 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
140519 : bvmul(140328, 140473) : BV:32
140522 : bvadd(140340, 140519) : BV:32
140331 : 4 { 0x4 +1.0e1025 } : INT
140540 : islangaligned(140522, 140331) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lfor.body%1%d=>Lfor.cond%1%bbentry done
tfg.assumes_around_edge at Lfor.cond%1%bbentry=>Lfor.cond%2%d
tfg.assumes_around_edge at Lfor.cond%1%bbentry=>Lfor.cond%2%d done
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.body%1%d
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.body%1%d done
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.end%1%d
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.end%1%d done
tfg.assumes_around_edge at Lfor.end%1%d=>E0%0%d
tfg.assumes_around_edge at Lfor.end%1%d=>E0%0%d done
tfg.assumes_around_edge done
=TFGdone
=PC_to_linename:
=pc
Lentry%1%d
=linename
line 3
=pc
Lfor.body%1%d
=linename
line 4
=pc
Lfor.body%2%d
=linename
line 4
=pc
Lfor.body%3%d
=linename
line 4
=pc
Lfor.body%4%d
=linename
line 5
=pc
Lfor.cond%1%d
=linename
line 3
=pc
Lfor.cond%2%d
=linename
line 3
=pc
Lfor.end%1%d
=linename
line 6
=pc
Lfor.inc%1%d
=linename
line 3
=pc
Lfor.inc%2%d
=linename
line 3
=PC_to_linename done
=PC_to_column_name:
=pc
Lentry%1%d
=column_name
 at column 8
=pc
Lfor.body%1%d
=column_name
 at column 12
=pc
Lfor.body%2%d
=column_name
 at column 12
=pc
Lfor.body%3%d
=column_name
 at column 9
=pc
Lfor.body%4%d
=column_name
 at column 3
=pc
Lfor.cond%1%d
=column_name
 at column 26
=pc
Lfor.cond%2%d
=column_name
 at column 3
=pc
Lfor.end%1%d
=column_name
 at column 3
=pc
Lfor.inc%1%d
=column_name
 at column 31
=pc
Lfor.inc%2%d
=column_name
 at column 3
=PC_to_column_name done
=PC_to_line_and_column:
=pc
Lentry%1%d
=line_and_column
(line 3 at column 8)
=pc
Lfor.body%1%d
=line_and_column
(line 4 at column 12)
=pc
Lfor.body%2%d
=line_and_column
(line 4 at column 12)
=pc
Lfor.body%3%d
=line_and_column
(line 4 at column 9)
=pc
Lfor.body%4%d
=line_and_column
line 5
=pc
Lfor.cond%1%d
=line_and_column
(line 3 at column 26)
=pc
Lfor.cond%2%d
=line_and_column
(line 3 at column 3)
=pc
Lfor.end%1%d
=line_and_column
line 6
=pc
Lfor.inc%1%d
=line_and_column
(line 3 at column 31)
=pc
Lfor.inc%2%d
=line_and_column
(line 3 at column 3)
=PC_to_line_and_column done
=SourceToLLVMVarnames:
=SourceToLLVMVarnames done
=InputLLVMToSourceVarnames:
input.dst.llvm-%x : L0%0%d : x'
input.dst.llvm-%n : L0%0%d : n'
input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : L0%0%d : input.dst.local./*___y___foo__x__=L0%0%argnum1=/
input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : L0%0%d : input.dst.local./*___y___foo__x__=L0%0%argnum0=/
input.dst.llvm-%ret.0 : Lfor.cond%1%bbentry : ret'
input.dst.local_alloc_count.=L0%0%d= : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.llvm-%i.0.phi.tmpvar.entry : L0%0%d : 0
input.dst.llvm-%ret.0.phi.tmpvar.entry : L0%0%d : 0
input.dst.llvm-%i.0 : Lfor.cond%1%bbentry : i'
input.dst.llvm-%0 : L0%0%d : DSTMEM[input.dst.llvm-%arrayidx]_4
input.dst.llvm-%add : Lfor.body%4%bbentry : ret'
input.dst.llvm-%inc : Lfor.inc%2%bbentry : i'
input.dst.llvm-%hidden-reg : L0%0%d : input.dst.llvm-%hidden-reg
input.dst.llvm-callee-save.0 : L0%0%d : input.dst.llvm-callee-save.0
input.dst.llvm-callee-save.1 : L0%0%d : input.dst.llvm-callee-save.1
input.dst.llvm-callee-save.2 : L0%0%d : input.dst.llvm-callee-save.2
input.dst.llvm-callee-save.3 : L0%0%d : input.dst.llvm-callee-save.3
input.dst.llvm-%arrayidx : L0%0%d : input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.2.total_offset
input.dst.llvm-%ret.0.phi.tmpvar.for.inc : L0%0%d : input.dst.llvm-%add
input.dst.llvm-%ret-reg : L0%0%d : input.dst.llvm-%ret.0
input.dst.llvm-indir_tgt : L0%0%d : return-address
input.dst.local_alloc_count : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.cur_rounding_mode : L0%0%d : ROUND_to_nearest_ties_to_even
input.dst.llvm-indir_tgt.E0%0%d : L0%0%d : return-address
input.dst.llvm-%hidden-reg.E0%0%d : L0%0%d : bvxor(bvxor(bvxor(bvxor(input.dst.llvm-%hidden-reg, input.dst.llvm-callee-save.0), input.dst.llvm-callee-save.1), input.dst.llvm-callee-save.2), input.dst.llvm-callee-save.3)
input.dst.llvm-%ret-reg.E0%0%d : L0%0%d : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : L0%0%d : 0
input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : L0%0%d : 0
input.dst.local_alloc_count.Lfor.cond%1%bbentry : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : L0%0%d : ROUND_to_nearest_ties_to_even
=InputLLVMToSourceVarnames done
=PotentialSCEVRelations:
=dst.llvm-%i.0
=dst.llvm-%i.0 loop pc: Lfor.cond%1%d
=dst.llvm-%i.0 val_scevb
=dst.llvm-%i.0 val_scevb scev
=dst.llvm-%i.0 val_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%i.0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%i.0 val_scevb scev scev_expr
1 : 00000000000000000000000000000000b
2 : 00000000000000000000000000000001b
3 : scev_op_addrec(1, 2) : loop Lfor.cond%1%d : 
=dst.llvm-%i.0 val_scevb scev scev_expr done
=dst.llvm-%i.0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%i.0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%i.0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%i.0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%i.0 atuse_scevb
=dst.llvm-%i.0 atuse_scevb scev
=dst.llvm-%i.0 atuse_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%i.0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%i.0 atuse_scevb scev scev_expr
1 : 00000000000000000000000000000000b
2 : 00000000000000000000000000000001b
3 : scev_op_addrec(1, 2) : loop Lfor.cond%1%d : 
=dst.llvm-%i.0 atuse_scevb scev scev_expr done
=dst.llvm-%i.0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%i.0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%i.0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%i.0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%i.0 atexit_scev
=dst.llvm-%i.0 atexit_scev loop: L0%0%d
=dst.llvm-%i.0 atexit_scev scev_overflow_flag: 
=dst.llvm-%i.0 atexit_scev scev_expr
4 : input.dst.llvm-%n : BV32
=dst.llvm-%i.0 atexit_scev scev_expr done
=dst.llvm-%ret.0
=dst.llvm-%ret.0 loop pc: Lfor.cond%1%d
=dst.llvm-%ret.0 val_scevb
=dst.llvm-%ret.0 val_scevb scev
=dst.llvm-%ret.0 val_scevb scev loop: L0%0%d
=dst.llvm-%ret.0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%ret.0 val_scevb scev scev_expr
5 : input.dst.llvm-%ret.0 : BV32
=dst.llvm-%ret.0 val_scevb scev scev_expr done
=dst.llvm-%ret.0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%ret.0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%ret.0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%ret.0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%ret.0 atuse_scevb
=dst.llvm-%ret.0 atuse_scevb scev
=dst.llvm-%ret.0 atuse_scevb scev loop: L0%0%d
=dst.llvm-%ret.0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%ret.0 atuse_scevb scev scev_expr
5 : input.dst.llvm-%ret.0 : BV32
=dst.llvm-%ret.0 atuse_scevb scev scev_expr done
=dst.llvm-%ret.0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%ret.0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%ret.0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%ret.0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%ret.0 atexit_scev
=dst.llvm-%ret.0 atexit_scev loop: L0%0%d
=dst.llvm-%ret.0 atexit_scev scev_overflow_flag: 
=dst.llvm-%ret.0 atexit_scev scev_expr
5 : input.dst.llvm-%ret.0 : BV32
=dst.llvm-%ret.0 atexit_scev scev_expr done
=dst.llvm-%arrayidx
=dst.llvm-%arrayidx loop pc: Lfor.cond%1%d
=dst.llvm-%arrayidx val_scevb
=dst.llvm-%arrayidx val_scevb scev
=dst.llvm-%arrayidx val_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%arrayidx val_scevb scev scev_overflow_flag: 
=dst.llvm-%arrayidx val_scevb scev scev_expr
6 : input.dst.llvm-%x : BV32
7 : 00000000000000000000000000000100b
8 : scev_op_addrec(6, 7) : loop Lfor.cond%1%d : 
=dst.llvm-%arrayidx val_scevb scev scev_expr done
=dst.llvm-%arrayidx val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%arrayidx val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%arrayidx val_scevb signed lower bound: 32:4294967295
=dst.llvm-%arrayidx val_scevb signed upper bound: 32:4294967295
=dst.llvm-%arrayidx atuse_scevb
=dst.llvm-%arrayidx atuse_scevb scev
=dst.llvm-%arrayidx atuse_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%arrayidx atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%arrayidx atuse_scevb scev scev_expr
6 : input.dst.llvm-%x : BV32
7 : 00000000000000000000000000000100b
8 : scev_op_addrec(6, 7) : loop Lfor.cond%1%d : 
=dst.llvm-%arrayidx atuse_scevb scev scev_expr done
=dst.llvm-%arrayidx atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%arrayidx atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%arrayidx atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%arrayidx atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%arrayidx atexit_scev
=dst.llvm-%arrayidx atexit_scev loop: L0%0%d
=dst.llvm-%arrayidx atexit_scev scev_overflow_flag: 
=dst.llvm-%arrayidx atexit_scev scev_expr
7 : 00000000000000000000000000000100b
4 : input.dst.llvm-%n : BV32
9 : scev_op_mul(7, 4) : loop L0%0%d : 
6 : input.dst.llvm-%x : BV32
10 : scev_op_add(9, 6) : loop L0%0%d : 
=dst.llvm-%arrayidx atexit_scev scev_expr done
=dst.llvm-%0
=dst.llvm-%0 loop pc: Lfor.cond%1%d
=dst.llvm-%0 val_scevb
=dst.llvm-%0 val_scevb scev
=dst.llvm-%0 val_scevb scev loop: L0%0%d
=dst.llvm-%0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%0 val_scevb scev scev_expr
11 : input.dst.llvm-%0 : BV32
=dst.llvm-%0 val_scevb scev scev_expr done
=dst.llvm-%0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%0 atuse_scevb
=dst.llvm-%0 atuse_scevb scev
=dst.llvm-%0 atuse_scevb scev loop: L0%0%d
=dst.llvm-%0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%0 atuse_scevb scev scev_expr
11 : input.dst.llvm-%0 : BV32
=dst.llvm-%0 atuse_scevb scev scev_expr done
=dst.llvm-%0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%0 atexit_scev
=dst.llvm-%0 atexit_scev loop: L0%0%d
=dst.llvm-%0 atexit_scev scev_overflow_flag: 
=dst.llvm-%0 atexit_scev scev_expr
11 : input.dst.llvm-%0 : BV32
=dst.llvm-%0 atexit_scev scev_expr done
=dst.llvm-%add
=dst.llvm-%add loop pc: Lfor.cond%1%d
=dst.llvm-%add val_scevb
=dst.llvm-%add val_scevb scev
=dst.llvm-%add val_scevb scev loop: L0%0%d
=dst.llvm-%add val_scevb scev scev_overflow_flag: 
=dst.llvm-%add val_scevb scev scev_expr
11 : input.dst.llvm-%0 : BV32
5 : input.dst.llvm-%ret.0 : BV32
12 : scev_op_add(11, 5) : loop L0%0%d : 
=dst.llvm-%add val_scevb scev scev_expr done
=dst.llvm-%add val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%add val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%add val_scevb signed lower bound: 32:4294967295
=dst.llvm-%add val_scevb signed upper bound: 32:4294967295
=dst.llvm-%add atuse_scevb
=dst.llvm-%add atuse_scevb scev
=dst.llvm-%add atuse_scevb scev loop: L0%0%d
=dst.llvm-%add atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%add atuse_scevb scev scev_expr
11 : input.dst.llvm-%0 : BV32
5 : input.dst.llvm-%ret.0 : BV32
12 : scev_op_add(11, 5) : loop L0%0%d : 
=dst.llvm-%add atuse_scevb scev scev_expr done
=dst.llvm-%add atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%add atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%add atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%add atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%add atexit_scev
=dst.llvm-%add atexit_scev loop: L0%0%d
=dst.llvm-%add atexit_scev scev_overflow_flag: 
=dst.llvm-%add atexit_scev scev_expr
11 : input.dst.llvm-%0 : BV32
5 : input.dst.llvm-%ret.0 : BV32
12 : scev_op_add(11, 5) : loop L0%0%d : 
=dst.llvm-%add atexit_scev scev_expr done
=dst.llvm-%inc
=dst.llvm-%inc loop pc: Lfor.cond%1%d
=dst.llvm-%inc val_scevb
=dst.llvm-%inc val_scevb scev
=dst.llvm-%inc val_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%inc val_scevb scev scev_overflow_flag: 
=dst.llvm-%inc val_scevb scev scev_expr
2 : 00000000000000000000000000000001b
13 : scev_op_addrec(2, 2) : loop Lfor.cond%1%d : 
=dst.llvm-%inc val_scevb scev scev_expr done
=dst.llvm-%inc val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%inc val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%inc val_scevb signed lower bound: 32:4294967295
=dst.llvm-%inc val_scevb signed upper bound: 32:4294967295
=dst.llvm-%inc atuse_scevb
=dst.llvm-%inc atuse_scevb scev
=dst.llvm-%inc atuse_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%inc atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%inc atuse_scevb scev scev_expr
2 : 00000000000000000000000000000001b
13 : scev_op_addrec(2, 2) : loop Lfor.cond%1%d : 
=dst.llvm-%inc atuse_scevb scev scev_expr done
=dst.llvm-%inc atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%inc atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%inc atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%inc atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%inc atexit_scev
=dst.llvm-%inc atexit_scev loop: L0%0%d
=dst.llvm-%inc atexit_scev scev_overflow_flag: 
=dst.llvm-%inc atexit_scev scev_expr
2 : 00000000000000000000000000000001b
4 : input.dst.llvm-%n : BV32
14 : scev_op_add(2, 4) : loop L0%0%d : 
=dst.llvm-%inc atexit_scev scev_expr done
=PotentialSCEVRelations done
=ReachingDefinitionsForLocs:
=Reaching Definitions at L0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns done
=Reaching Definitions at Lfor.body%1%d
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 7 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 8 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 9 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%add.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns done
=Reaching Definitions at Lfor.cond%1%bbentry
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 7 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 8 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 9 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%add.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns done
=Reaching Definitions at Lfor.cond%2%d
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 7 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 8 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 9 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%add.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns done
=Reaching Definitions at Lfor.end%1%d
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 7 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 8 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 9 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%add.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns done
=Reaching Definitions at E0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 7 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 8 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 9 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=reaching defns for expr 11 edges
  Lfor.end%1%d=>E0%0%d
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=reaching defns for expr 12 edges
  Lfor.end%1%d=>E0%0%d
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=reaching defns for expr 13 edges
  Lfor.end%1%d=>E0%0%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 14 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 15 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%add.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns done
=ReachingDefinitionsForLocs done
=VarnameToLRStatus Begin:
=LR status for var input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.2.total_offset.Lfor.cond%1%bbentry
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%x
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%n
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.1, )
=LR status for var input.dst.local./*___y___foo__x__=L0%0%argnum1=/
lr_status_top
=LR status for var input.dst.local./*___y___foo__x__=L0%0%argnum0=/
lr_status_top
=LR status for var input.dst.local_alloc_count.=L0%0%d=
lr_status_top
=LR status for var input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%hidden-reg
lr_status_top
=LR status for var input.dst.llvm-callee-save.0
lr_status_top
=LR status for var input.dst.llvm-callee-save.1
lr_status_top
=LR status for var input.dst.llvm-callee-save.2
lr_status_top
=LR status for var input.dst.llvm-callee-save.3
lr_status_top
=LR status for var input.dst.llvm-%i.0.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%cmp.Lfor.cond%2%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%0.Lfor.cond%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-indir_tgt.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%hidden-reg.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%add.Lfor.cond%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%ret-reg.E0%0%d
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.1.total_offset.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%inc.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%ret.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.local_alloc_count.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=VarnameToLRStatus End
=TFG_LLVM_done
=TFG_SSA_done
=eqcheck_info
=eqcheck
=proof_filename couple8.proof
=function_name foo
=asm_filename NONE
=fixed_reg_mappings begin
0 : 0 : 0
0 : 4 : 4
=fixed_reg_mappings end
=rodata_map begin
=rodata_map end
=dst_iseq
=dst_iseq done
=dst_insn_pcs
=dst_insn_pcs done
=xml_output_format text-color
=use_only_relocatable_memlabels 0
=run_safety_check 0
=debug_header_pc_lsprels
=Local offsets from compile log
=Local offsets from compile log done
=done
=spec_iospecs
=SpecFuncIOSpecs
=FunctionName: foo
=EntryPreconds
=pred 0
=Comment
pointer-implements-variable-sized-map
=LhsExpr
1 : $spec-arg-0 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : $llvm-arg-1 : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : $llvm-md : ARRAY[BV:32 -> BV:8]
11 : $llvm-ma : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : $llvm-arg-0 : BV:32
14 : 4 { 0x4 +1.47e129 } : BV:32
15 : bvmul(9, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=EntryPreconds done
=ExitAsserts
=pred 0
=Comment
equal-regs
=LhsExpr
1 : $spec-ret : BV:32
2 : $llvm-ret : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=ExitAsserts done
=SpecFuncIOSpecs done
=eqcheck done
=graph_with_guessing
=Nodes: L0%0%d_L0%0%d L2%7%bbentry_Lfor.cond%1%bbentry E0%0%d_E0%0%d
=Edges:
L0%0%d_L0%0%d => L2%7%bbentry_Lfor.cond%1%bbentry
L2%7%bbentry_Lfor.cond%1%bbentry => L2%7%bbentry_Lfor.cond%1%bbentry
L2%7%bbentry_Lfor.cond%1%bbentry => E0%0%d_E0%0%d
=graph done
=is_ssa_graph:
0
=StartState:
=state_end
=graph_with_var_versions done
=FunctionName: foo
=Input: llvm-method-arg.1
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
=arg val
1 : input.dst.llvm-%n : BV:32
=arg end
=Input: llvm-method-arg.0
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%x : BV:32
=arg end
=Node outputs: E0%0%d_E0%0%d
=Node outputs done for E0%0%d_E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : foo : 20 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%x : 4 : 4 : 0
C_LOCAL=L0%0%argnum1= : dst.llvm-%n : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
=Edge: L0%0%d_L0%0%d => L2%7%bbentry_Lfor.cond%1%bbentry
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L0%0%d to L2%7%bbentry at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
(L0%0%d#{0,0}=>L2%7%bbentry#{0,0})
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from L0%0%d to Lfor.cond%1%bbentry at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
(L0%0%d#{0,0}=>Lfor.cond%1%bbentry#{0,0})
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L2%7%bbentry_Lfor.cond%1%bbentry => L2%7%bbentry_Lfor.cond%1%bbentry
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L2%7%bbentry to L2%7%bbentry at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
((L2%7%bbentry#{0,0}=>L2%8%d#{0,0})*((L2%8%d#{0,0}=>L2%11%bbentry#{0,0})*(L2%11%bbentry#{0,0}=>L2%7%bbentry#{1,0})))
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lfor.cond%1%bbentry to Lfor.cond%1%bbentry at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((Lfor.cond%1%bbentry#{0,0}=>Lfor.cond%2%d#{0,0})*((Lfor.cond%2%d#{0,0}=>Lfor.body%1%d#{0,0})*(Lfor.body%1%d#{0,0}=>Lfor.cond%1%bbentry#{1,0})))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L2%7%bbentry_Lfor.cond%1%bbentry => E0%0%d_E0%0%d
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L2%7%bbentry to E0%0%d at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
((L2%7%bbentry#{0,0}=>L2%8%d#{0,0})*((L2%8%d#{0,0}=>L2%9%bbentry#{0,0})*(L2%9%bbentry#{0,0}=>E0%0%d#{0,0})))
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lfor.cond%1%bbentry to E0%0%d at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((Lfor.cond%1%bbentry#{0,0}=>Lfor.cond%2%d#{0,0})*((Lfor.cond%2%d#{0,0}=>Lfor.end%1%d#{0,0})*(Lfor.end%1%d#{0,0}=>E0%0%d#{0,0})))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
pointer-implements-variable-sized-map
=LhsExpr
1 : input.spec-%var-x-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%x : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.1
=Comment
precond-mlasserts
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : bvuge(1, 10) : BOOL
18 : bvule(1, 11) : BOOL
19 : and(17, 18) : BOOL
20 : bvuge(2, 10) : BOOL
21 : bvule(2, 11) : BOOL
22 : and(20, 21) : BOOL
23 : not(22) : BOOL
24 : andnot1(19, 23) : BOOL
25 : bvuge(10, 1) : BOOL
26 : bvule(10, 2) : BOOL
27 : and(25, 26) : BOOL
28 : bvuge(11, 1) : BOOL
29 : bvule(11, 2) : BOOL
30 : and(28, 29) : BOOL
31 : not(30) : BOOL
32 : andnot1(27, 31) : BOOL
33 : and(24, 32) : BOOL
34 : and(16, 33) : BOOL
35 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
36 : 3 { 0x3 +1.35e129 } : BV:32
37 : bvand(35, 36) : BV:32
38 : 0 { 0x0 +1.0e129 } : BV:32
39 : eq(37, 38) : BOOL
40 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
41 : bvand(40, 36) : BV:32
42 : eq(41, 38) : BOOL
43 : and(39, 42) : BOOL
44 : and(34, 43) : BOOL
45 : eq(35, 1) : BOOL
46 : eq(40, 10) : BOOL
47 : and(45, 46) : BOOL
48 : and(44, 47) : BOOL
49 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
50 : 1 { 0x1 +1.11e129 } : BV:32
51 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
52 : region_agrees_with_memlabel(49, 38, 50, 51) : BOOL
53 : and(48, 52) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.2
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%n : BV:32
=predicate done
=start_pc_precondition.3
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%x : BV:32
=predicate done
=graph_with_precondition_done

=Locs in foo.A2.B2.C1
=Locs end
=Liveness in foo.A2.B2.C1
=live locs at L0%0%d_L0%0%d

=live locs at L2%7%bbentry_Lfor.cond%1%bbentry

=live locs at E0%0%d_E0%0%d


=Definedness in foo.A2.B2.C1

=Branch affecting variable locs in foo.A2.B2.C1

=Relevant Memlabels in foo.A2.B2.C1
=relevant memlabels
=function: foo
memlabel-mem--arg.0
memlabel-mem-may-straddle-symbol.1-heap
memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
memlabel-mem--arg.1
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
=graph_with_ml_contiguity_info non-vacuous mls
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in foo.A2.B2.C1
=avail_exprs begin
=avail_exprs end
=sprel_map in foo.A2.B2.C1
=sprel_map done
=lr-status-map
=lr-status-map done
=lr-status-for-sprel-locs-map
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=global counterexamples for reason inductive-invariants
=global nodece 0
=global nodece 0 nodece z3.ce3.num_edges_traversed1
=global nodece 0 nodece_path
=global nodece 0 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 0 nodece_cached_counterexample
=counter_example_begin z3.ce3 f2619b5cf62578d1e86fef0ad122117
=input.spec-%var-x-1
1 : Lambda23 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda24 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry
1 : Lambda23 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda24 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3533380667 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3533380668; 3533380671 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3533380672; 4159837991 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4159837992; 4159837995 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 4159837996; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4159837992 { 0xf7f21728 -135129304 -1.89133167e112 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3533380668 { 0xd29b1c3c -761586628 -1.21179914e38 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 924236686 { 0x3716bb8e +1.17759871e239 } : COUNT
=input.spec-%var-i-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 924236686 { 0x3716bb8e +1.17759871e239 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4159837992 { 0xf7f21728 -135129304 -1.89133167e112 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 4159837995 { 0xf7f2172b -135129301 -1.89133203e112 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3533380668 { 0xd29b1c3c -761586628 -1.21179914e38 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3533380671 { 0xd29b1c3f -761586625 -1.21179950e38 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L2%7%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
2811112354
=counter_example_end
=global nodece 0 num_edges_traversed 1
=global nodece 0 nodece_visted_pcs: 
L0%0%d_L0%0%d -> L2%7%bbentry_Lfor.cond%1%bbentry
=global nodece 1
=global nodece 1 nodece z3v487.ce4.num_edges_traversed0
=global nodece 1 nodece_path
=global nodece 1 nodece_path.graph_edge_composition
(epsilon)
=global nodece 1 nodece_cached_counterexample
=counter_example_begin z3v487.ce4 c3132aa57a844dae4d67efc8f98d856
=input.spec-%var-x-1
1 : Lambda35 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda36 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry
1 : Lambda39 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda40 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2179 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2180; 2183 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2184; 35656255 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 35656256; 35656259 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 35656260; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2180 { 0x884 +1.25987e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 35656256 { 0x2201240 +1.25055694e133 } : BV:32
=input.spec-%tmpvar-8.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2180 { 0x884 +1.25987e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2183 { 0x887 +1.26023e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 35656256 { 0x2201240 +1.25055694e133 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 35656259 { 0x2201243 +1.25055730e133 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L2%7%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
3747455381
=counter_example_end
=global nodece 1 num_edges_traversed 0
=global nodece 1 nodece_visted_pcs: 
L0%0%d_L0%0%d
=global nodece 2
=global nodece 2 nodece z3.ce23.num_edges_traversed1
=global nodece 2 nodece_path
=global nodece 2 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 2 nodece_cached_counterexample
=counter_example_begin z3.ce23 e48c6ea3270b58d170923bc7a1de18
=input.spec-%var-x-1
1 : Lambda72 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 65535 { 0xffff +1.781238e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 65536 { 0x10000 +1.781250e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda73 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 2012183808 { 0x77ef7d00 +1.87100219e112 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 720777442 { 0x2af630e2 +1.92336678e214 } : BV:32
25 : eq(23, 24) : BOOL
26 : 239 { 0xef -17 } : BV:8
27 : 318022142 { 0x12f4a1fe +1.91119360e166 } : BV:32
28 : eq(23, 27) : BOOL
29 : 1 { 0x1 } : BV:8
30 : 720777441 { 0x2af630e1 +1.92336666e214 } : BV:32
31 : eq(23, 30) : BOOL
32 : 125 { 0x7d } : BV:8
33 : 720777443 { 0x2af630e3 +1.92336690e214 } : BV:32
34 : eq(23, 33) : BOOL
35 : 119 { 0x77 } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvadd(41, 21, 22) : BV:32
43 : eq(42, 24) : BOOL
44 : eq(42, 27) : BOOL
45 : eq(42, 30) : BOOL
46 : eq(42, 33) : BOOL
47 : ite(46, 35, 36) : BV:8
48 : ite(45, 32, 47) : BV:8
49 : ite(44, 29, 48) : BV:8
50 : ite(43, 26, 49) : BV:8
51 : 1 { 0x1 +1.11e129 } : BV:32
52 : bvadd(51, 21, 22) : BV:32
53 : eq(52, 24) : BOOL
54 : eq(52, 27) : BOOL
55 : eq(52, 30) : BOOL
56 : eq(52, 33) : BOOL
57 : ite(56, 35, 36) : BV:8
58 : ite(55, 32, 57) : BV:8
59 : ite(54, 29, 58) : BV:8
60 : ite(53, 26, 59) : BV:8
61 : bvadd(21, 22) : BV:32
62 : eq(61, 24) : BOOL
63 : eq(61, 27) : BOOL
64 : eq(61, 30) : BOOL
65 : eq(61, 33) : BOOL
66 : ite(65, 35, 36) : BV:8
67 : ite(64, 32, 66) : BV:8
68 : ite(63, 29, 67) : BV:8
69 : ite(62, 26, 68) : BV:8
70 : bvconcat(40, 50, 60, 69) : BV:32
71 : ite(18, 2, 70) : BV:32
72 : lambda(17, 71) : FUNCTION[BV:32 -> BV:32]
73 : map(16, 72) : MAP[BV:32 -> BV:32]
74 : sym_const(73) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry
1 : Lambda72 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 65535 { 0xffff +1.781238e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 65536 { 0x10000 +1.781250e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda73 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 2012183808 { 0x77ef7d00 +1.87100219e112 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 720777442 { 0x2af630e2 +1.92336678e214 } : BV:32
25 : eq(23, 24) : BOOL
26 : 239 { 0xef -17 } : BV:8
27 : 318022142 { 0x12f4a1fe +1.91119360e166 } : BV:32
28 : eq(23, 27) : BOOL
29 : 1 { 0x1 } : BV:8
30 : 720777441 { 0x2af630e1 +1.92336666e214 } : BV:32
31 : eq(23, 30) : BOOL
32 : 125 { 0x7d } : BV:8
33 : 720777443 { 0x2af630e3 +1.92336690e214 } : BV:32
34 : eq(23, 33) : BOOL
35 : 119 { 0x77 } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvadd(41, 21, 22) : BV:32
43 : eq(42, 24) : BOOL
44 : eq(42, 27) : BOOL
45 : eq(42, 30) : BOOL
46 : eq(42, 33) : BOOL
47 : ite(46, 35, 36) : BV:8
48 : ite(45, 32, 47) : BV:8
49 : ite(44, 29, 48) : BV:8
50 : ite(43, 26, 49) : BV:8
51 : 1 { 0x1 +1.11e129 } : BV:32
52 : bvadd(51, 21, 22) : BV:32
53 : eq(52, 24) : BOOL
54 : eq(52, 27) : BOOL
55 : eq(52, 30) : BOOL
56 : eq(52, 33) : BOOL
57 : ite(56, 35, 36) : BV:8
58 : ite(55, 32, 57) : BV:8
59 : ite(54, 29, 58) : BV:8
60 : ite(53, 26, 59) : BV:8
61 : bvadd(21, 22) : BV:32
62 : eq(61, 24) : BOOL
63 : eq(61, 27) : BOOL
64 : eq(61, 30) : BOOL
65 : eq(61, 33) : BOOL
66 : ite(65, 35, 36) : BV:8
67 : ite(64, 32, 66) : BV:8
68 : ite(63, 29, 67) : BV:8
69 : ite(62, 26, 68) : BV:8
70 : bvconcat(40, 50, 60, 69) : BV:32
71 : ite(18, 2, 70) : BV:32
72 : lambda(17, 71) : FUNCTION[BV:32 -> BV:32]
73 : map(16, 72) : MAP[BV:32 -> BV:32]
74 : sym_const(73) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%x
1 : 2012183808 { 0x77ef7d00 +1.87100219e112 } : BV:32
=input.dst.llvm-%n
1 : 65536 { 0x10000 +1.781250e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 318022141 ] -> 0, [ 318022142; 318022142 ] -> 1, [ 318022143; 720777440 ] -> 0, [ 720777441; 720777441 ] -> 125, [ 720777442; 720777442 ] -> 239, [ 720777443; 720777443 ] -> 119, [ 720777444; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 318022139 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 318022140; 318022143 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 318022144; 720777439 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 720777440; 720777443 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 720777444; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 318022140 { 0x12f4a1fc +1.91119337e166 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 720777440 { 0x2af630e0 +1.92336654e214 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1079274789 { 0x40546d25 +1.65958082e1 } : COUNT
=input.spec-%var-i-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1079274789 { 0x40546d25 +1.65958082e1 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 318022140 { 0x12f4a1fc +1.91119337e166 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 318022143 { 0x12f4a1ff +1.91119372e166 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 720777440 { 0x2af630e0 +1.92336654e214 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 720777443 { 0x2af630e3 +1.92336690e214 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 65535 ] -> true, [ 65536; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : Lambda57 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 2012183808 { 0x77ef7d00 +1.87100219e112 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 720777442 { 0x2af630e2 +1.92336678e214 } : BV:32
10 : eq(8, 9) : BOOL
11 : 239 { 0xef -17 } : BV:8
12 : 318022142 { 0x12f4a1fe +1.91119360e166 } : BV:32
13 : eq(8, 12) : BOOL
14 : 1 { 0x1 } : BV:8
15 : 720777441 { 0x2af630e1 +1.92336666e214 } : BV:32
16 : eq(8, 15) : BOOL
17 : 125 { 0x7d } : BV:8
18 : 720777443 { 0x2af630e3 +1.92336690e214 } : BV:32
19 : eq(8, 18) : BOOL
20 : 119 { 0x77 } : BV:8
21 : 0 { 0x0 } : BV:8
22 : ite(19, 20, 21) : BV:8
23 : ite(16, 17, 22) : BV:8
24 : ite(13, 14, 23) : BV:8
25 : ite(10, 11, 24) : BV:8
26 : 2 { 0x2 +1.23e129 } : BV:32
27 : bvadd(26, 6, 7) : BV:32
28 : eq(27, 9) : BOOL
29 : eq(27, 12) : BOOL
30 : eq(27, 15) : BOOL
31 : eq(27, 18) : BOOL
32 : ite(31, 20, 21) : BV:8
33 : ite(30, 17, 32) : BV:8
34 : ite(29, 14, 33) : BV:8
35 : ite(28, 11, 34) : BV:8
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvadd(36, 6, 7) : BV:32
38 : eq(37, 9) : BOOL
39 : eq(37, 12) : BOOL
40 : eq(37, 15) : BOOL
41 : eq(37, 18) : BOOL
42 : ite(41, 20, 21) : BV:8
43 : ite(40, 17, 42) : BV:8
44 : ite(39, 14, 43) : BV:8
45 : ite(38, 11, 44) : BV:8
46 : bvadd(6, 7) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : eq(46, 15) : BOOL
50 : eq(46, 18) : BOOL
51 : ite(50, 20, 21) : BV:8
52 : ite(49, 17, 51) : BV:8
53 : ite(48, 14, 52) : BV:8
54 : ite(47, 11, 53) : BV:8
55 : bvconcat(25, 35, 45, 54) : BV:32
56 : ite(3, 2, 55) : BV:32
57 : lambda(1, 56) : FUNCTION[BV:32 -> BV:32]
58 : sym_const(57) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry.0.1
1 : ([ 0; 65535 ] -> true, [ 65536; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L2%7%bbentry.1.1
1 : Lambda59 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 2012183808 { 0x77ef7d00 +1.87100219e112 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 720777442 { 0x2af630e2 +1.92336678e214 } : BV:32
10 : eq(8, 9) : BOOL
11 : 239 { 0xef -17 } : BV:8
12 : 318022142 { 0x12f4a1fe +1.91119360e166 } : BV:32
13 : eq(8, 12) : BOOL
14 : 1 { 0x1 } : BV:8
15 : 720777441 { 0x2af630e1 +1.92336666e214 } : BV:32
16 : eq(8, 15) : BOOL
17 : 125 { 0x7d } : BV:8
18 : 720777443 { 0x2af630e3 +1.92336690e214 } : BV:32
19 : eq(8, 18) : BOOL
20 : 119 { 0x77 } : BV:8
21 : 0 { 0x0 } : BV:8
22 : ite(19, 20, 21) : BV:8
23 : ite(16, 17, 22) : BV:8
24 : ite(13, 14, 23) : BV:8
25 : ite(10, 11, 24) : BV:8
26 : 2 { 0x2 +1.23e129 } : BV:32
27 : bvadd(26, 6, 7) : BV:32
28 : eq(27, 9) : BOOL
29 : eq(27, 12) : BOOL
30 : eq(27, 15) : BOOL
31 : eq(27, 18) : BOOL
32 : ite(31, 20, 21) : BV:8
33 : ite(30, 17, 32) : BV:8
34 : ite(29, 14, 33) : BV:8
35 : ite(28, 11, 34) : BV:8
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvadd(36, 6, 7) : BV:32
38 : eq(37, 9) : BOOL
39 : eq(37, 12) : BOOL
40 : eq(37, 15) : BOOL
41 : eq(37, 18) : BOOL
42 : ite(41, 20, 21) : BV:8
43 : ite(40, 17, 42) : BV:8
44 : ite(39, 14, 43) : BV:8
45 : ite(38, 11, 44) : BV:8
46 : bvadd(6, 7) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : eq(46, 15) : BOOL
50 : eq(46, 18) : BOOL
51 : ite(50, 20, 21) : BV:8
52 : ite(49, 17, 51) : BV:8
53 : ite(48, 14, 52) : BV:8
54 : ite(47, 11, 53) : BV:8
55 : bvconcat(25, 35, 45, 54) : BV:32
56 : ite(3, 2, 55) : BV:32
57 : ite(3, 2, 56) : BV:32
58 : lambda(1, 57) : FUNCTION[BV:32 -> BV:32]
59 : sym_const(58) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
2233806052
=counter_example_end
=global nodece 2 num_edges_traversed 1
=global nodece 2 nodece_visted_pcs: 
L2%7%bbentry_Lfor.cond%1%bbentry
=global nodece 3
=global nodece 3 nodece z3v487.ce24.num_edges_traversed1
=global nodece 3 nodece_path
=global nodece 3 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 3 nodece_cached_counterexample
=counter_example_begin z3v487.ce24 eee198273ab871d7bf88f34cddc8ef10
=input.spec-%var-x-1
1 : Lambda82 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 65535 { 0xffff +1.781238e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 65536 { 0x10000 +1.781250e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda83 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : bvadd(19, 21, 2) : BV:32
23 : 74 { 0x4a +1.882e129 } : BV:32
24 : eq(22, 23) : BOOL
25 : 1 { 0x1 } : BV:8
26 : 0 { 0x0 } : BV:8
27 : ite(24, 25, 26) : BV:8
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvadd(28, 21, 2) : BV:32
30 : eq(29, 23) : BOOL
31 : ite(30, 25, 26) : BV:8
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : bvadd(32, 21, 2) : BV:32
34 : eq(33, 23) : BOOL
35 : ite(34, 25, 26) : BV:8
36 : bvadd(21, 2) : BV:32
37 : eq(36, 23) : BOOL
38 : ite(37, 25, 26) : BV:8
39 : bvconcat(27, 31, 35, 38) : BV:32
40 : ite(18, 2, 39) : BV:32
41 : lambda(17, 40) : FUNCTION[BV:32 -> BV:32]
42 : map(16, 41) : MAP[BV:32 -> BV:32]
43 : sym_const(42) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry
1 : Lambda82 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 65535 { 0xffff +1.781238e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 65536 { 0x10000 +1.781250e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda83 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : bvadd(19, 21, 2) : BV:32
23 : 74 { 0x4a +1.882e129 } : BV:32
24 : eq(22, 23) : BOOL
25 : 1 { 0x1 } : BV:8
26 : 0 { 0x0 } : BV:8
27 : ite(24, 25, 26) : BV:8
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvadd(28, 21, 2) : BV:32
30 : eq(29, 23) : BOOL
31 : ite(30, 25, 26) : BV:8
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : bvadd(32, 21, 2) : BV:32
34 : eq(33, 23) : BOOL
35 : ite(34, 25, 26) : BV:8
36 : bvadd(21, 2) : BV:32
37 : eq(36, 23) : BOOL
38 : ite(37, 25, 26) : BV:8
39 : bvconcat(27, 31, 35, 38) : BV:32
40 : ite(18, 2, 39) : BV:32
41 : lambda(17, 40) : FUNCTION[BV:32 -> BV:32]
42 : map(16, 41) : MAP[BV:32 -> BV:32]
43 : sym_const(42) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 65536 { 0x10000 +1.781250e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 73 ] -> 0, [ 74; 74 ] -> 1, [ 75; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 15 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 16; 19 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 20; 71 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 72; 75 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 76; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 72 { 0x48 +1.858e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 578391065 { 0x22798c19 +1.94958794e197 } : COUNT
=input.spec-%var-i-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 578391065 { 0x22798c19 +1.94958794e197 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 72 { 0x48 +1.858e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 75 { 0x4b +1.894e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 19 { 0x13 +1.226e129 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 65535 ] -> true, [ 65536; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : Lambda64 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : bvadd(4, 6, 2) : BV:32
8 : 74 { 0x4a +1.882e129 } : BV:32
9 : eq(7, 8) : BOOL
10 : 1 { 0x1 } : BV:8
11 : 0 { 0x0 } : BV:8
12 : ite(9, 10, 11) : BV:8
13 : 2 { 0x2 +1.23e129 } : BV:32
14 : bvadd(13, 6, 2) : BV:32
15 : eq(14, 8) : BOOL
16 : ite(15, 10, 11) : BV:8
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : bvadd(17, 6, 2) : BV:32
19 : eq(18, 8) : BOOL
20 : ite(19, 10, 11) : BV:8
21 : bvadd(6, 2) : BV:32
22 : eq(21, 8) : BOOL
23 : ite(22, 10, 11) : BV:8
24 : bvconcat(12, 16, 20, 23) : BV:32
25 : ite(3, 2, 24) : BV:32
26 : lambda(1, 25) : FUNCTION[BV:32 -> BV:32]
27 : sym_const(26) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry.0.1
1 : ([ 0; 65535 ] -> true, [ 65536; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L2%7%bbentry.1.1
1 : Lambda66 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : bvadd(4, 6, 2) : BV:32
8 : 74 { 0x4a +1.882e129 } : BV:32
9 : eq(7, 8) : BOOL
10 : 1 { 0x1 } : BV:8
11 : 0 { 0x0 } : BV:8
12 : ite(9, 10, 11) : BV:8
13 : 2 { 0x2 +1.23e129 } : BV:32
14 : bvadd(13, 6, 2) : BV:32
15 : eq(14, 8) : BOOL
16 : ite(15, 10, 11) : BV:8
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : bvadd(17, 6, 2) : BV:32
19 : eq(18, 8) : BOOL
20 : ite(19, 10, 11) : BV:8
21 : bvadd(6, 2) : BV:32
22 : eq(21, 8) : BOOL
23 : ite(22, 10, 11) : BV:8
24 : bvconcat(12, 16, 20, 23) : BV:32
25 : ite(3, 2, 24) : BV:32
26 : ite(3, 2, 25) : BV:32
27 : lambda(1, 26) : FUNCTION[BV:32 -> BV:32]
28 : sym_const(27) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
404338641
=counter_example_end
=global nodece 3 num_edges_traversed 1
=global nodece 3 nodece_visted_pcs: 
L2%7%bbentry_Lfor.cond%1%bbentry
=global nodece 4
=global nodece 4 nodece z3.ce43.num_edges_traversed1
=global nodece 4 nodece_path
=global nodece 4 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 4 nodece_cached_counterexample
=counter_example_begin z3.ce43 538cf6ad3c17e6ed1aa4b1362b595fd9
=input.spec-%var-x-1
1 : Lambda112 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3755990815 { 0xdfdfdf1f -538976481 -1.74899661e64 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3755990816 { 0xdfdfdf20 -538976480 -1.74899673e64 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda113 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 2140659456 { 0x7f97df00 +1.18649291e128 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 2140659457 { 0x7f97df01 +1.18649303e128 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 3078290490 { 0xb77afc3a -1216676806 -1.96082234e239 } : BV:32
28 : eq(23, 27) : BOOL
29 : 151 { 0x97 -105 } : BV:8
30 : 257798132 { 0xf5daff4 +1.73193216e159 } : BV:32
31 : eq(23, 30) : BOOL
32 : 32 { 0x20 } : BV:8
33 : 2140659459 { 0x7f97df03 +1.18649327e128 } : BV:32
34 : eq(23, 33) : BOOL
35 : 2140659458 { 0x7f97df02 +1.18649315e128 } : BV:32
36 : eq(23, 35) : BOOL
37 : eq(23, 22) : BOOL
38 : 3078290491 { 0xb77afc3b -1216676805 -1.96082246e239 } : BV:32
39 : eq(23, 38) : BOOL
40 : 127 { 0x7f } : BV:8
41 : 3078290488 { 0xb77afc38 -1216676808 -1.96082210e239 } : BV:32
42 : eq(23, 41) : BOOL
43 : 223 { 0xdf -33 } : BV:8
44 : ite(42, 26, 43) : BV:8
45 : ite(39, 40, 44) : BV:8
46 : ite(37, 26, 45) : BV:8
47 : ite(36, 26, 46) : BV:8
48 : ite(34, 26, 47) : BV:8
49 : ite(31, 32, 48) : BV:8
50 : ite(28, 29, 49) : BV:8
51 : ite(25, 26, 50) : BV:8
52 : 2 { 0x2 +1.23e129 } : BV:32
53 : bvadd(52, 21, 22) : BV:32
54 : eq(53, 24) : BOOL
55 : eq(53, 27) : BOOL
56 : eq(53, 30) : BOOL
57 : eq(53, 33) : BOOL
58 : eq(53, 35) : BOOL
59 : eq(53, 22) : BOOL
60 : eq(53, 38) : BOOL
61 : eq(53, 41) : BOOL
62 : ite(61, 26, 43) : BV:8
63 : ite(60, 40, 62) : BV:8
64 : ite(59, 26, 63) : BV:8
65 : ite(58, 26, 64) : BV:8
66 : ite(57, 26, 65) : BV:8
67 : ite(56, 32, 66) : BV:8
68 : ite(55, 29, 67) : BV:8
69 : ite(54, 26, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 21, 22) : BV:32
72 : eq(71, 24) : BOOL
73 : eq(71, 27) : BOOL
74 : eq(71, 30) : BOOL
75 : eq(71, 33) : BOOL
76 : eq(71, 35) : BOOL
77 : eq(71, 22) : BOOL
78 : eq(71, 38) : BOOL
79 : eq(71, 41) : BOOL
80 : ite(79, 26, 43) : BV:8
81 : ite(78, 40, 80) : BV:8
82 : ite(77, 26, 81) : BV:8
83 : ite(76, 26, 82) : BV:8
84 : ite(75, 26, 83) : BV:8
85 : ite(74, 32, 84) : BV:8
86 : ite(73, 29, 85) : BV:8
87 : ite(72, 26, 86) : BV:8
88 : bvadd(21, 22) : BV:32
89 : eq(88, 24) : BOOL
90 : eq(88, 27) : BOOL
91 : eq(88, 30) : BOOL
92 : eq(88, 33) : BOOL
93 : eq(88, 35) : BOOL
94 : eq(88, 22) : BOOL
95 : eq(88, 38) : BOOL
96 : eq(88, 41) : BOOL
97 : ite(96, 26, 43) : BV:8
98 : ite(95, 40, 97) : BV:8
99 : ite(94, 26, 98) : BV:8
100 : ite(93, 26, 99) : BV:8
101 : ite(92, 26, 100) : BV:8
102 : ite(91, 32, 101) : BV:8
103 : ite(90, 29, 102) : BV:8
104 : ite(89, 26, 103) : BV:8
105 : bvconcat(51, 69, 87, 104) : BV:32
106 : ite(18, 2, 105) : BV:32
107 : lambda(17, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(16, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry
1 : Lambda112 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3755990815 { 0xdfdfdf1f -538976481 -1.74899661e64 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3755990816 { 0xdfdfdf20 -538976480 -1.74899673e64 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda113 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 2140659456 { 0x7f97df00 +1.18649291e128 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 2140659457 { 0x7f97df01 +1.18649303e128 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 3078290490 { 0xb77afc3a -1216676806 -1.96082234e239 } : BV:32
28 : eq(23, 27) : BOOL
29 : 151 { 0x97 -105 } : BV:8
30 : 257798132 { 0xf5daff4 +1.73193216e159 } : BV:32
31 : eq(23, 30) : BOOL
32 : 32 { 0x20 } : BV:8
33 : 2140659459 { 0x7f97df03 +1.18649327e128 } : BV:32
34 : eq(23, 33) : BOOL
35 : 2140659458 { 0x7f97df02 +1.18649315e128 } : BV:32
36 : eq(23, 35) : BOOL
37 : eq(23, 22) : BOOL
38 : 3078290491 { 0xb77afc3b -1216676805 -1.96082246e239 } : BV:32
39 : eq(23, 38) : BOOL
40 : 127 { 0x7f } : BV:8
41 : 3078290488 { 0xb77afc38 -1216676808 -1.96082210e239 } : BV:32
42 : eq(23, 41) : BOOL
43 : 223 { 0xdf -33 } : BV:8
44 : ite(42, 26, 43) : BV:8
45 : ite(39, 40, 44) : BV:8
46 : ite(37, 26, 45) : BV:8
47 : ite(36, 26, 46) : BV:8
48 : ite(34, 26, 47) : BV:8
49 : ite(31, 32, 48) : BV:8
50 : ite(28, 29, 49) : BV:8
51 : ite(25, 26, 50) : BV:8
52 : 2 { 0x2 +1.23e129 } : BV:32
53 : bvadd(52, 21, 22) : BV:32
54 : eq(53, 24) : BOOL
55 : eq(53, 27) : BOOL
56 : eq(53, 30) : BOOL
57 : eq(53, 33) : BOOL
58 : eq(53, 35) : BOOL
59 : eq(53, 22) : BOOL
60 : eq(53, 38) : BOOL
61 : eq(53, 41) : BOOL
62 : ite(61, 26, 43) : BV:8
63 : ite(60, 40, 62) : BV:8
64 : ite(59, 26, 63) : BV:8
65 : ite(58, 26, 64) : BV:8
66 : ite(57, 26, 65) : BV:8
67 : ite(56, 32, 66) : BV:8
68 : ite(55, 29, 67) : BV:8
69 : ite(54, 26, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 21, 22) : BV:32
72 : eq(71, 24) : BOOL
73 : eq(71, 27) : BOOL
74 : eq(71, 30) : BOOL
75 : eq(71, 33) : BOOL
76 : eq(71, 35) : BOOL
77 : eq(71, 22) : BOOL
78 : eq(71, 38) : BOOL
79 : eq(71, 41) : BOOL
80 : ite(79, 26, 43) : BV:8
81 : ite(78, 40, 80) : BV:8
82 : ite(77, 26, 81) : BV:8
83 : ite(76, 26, 82) : BV:8
84 : ite(75, 26, 83) : BV:8
85 : ite(74, 32, 84) : BV:8
86 : ite(73, 29, 85) : BV:8
87 : ite(72, 26, 86) : BV:8
88 : bvadd(21, 22) : BV:32
89 : eq(88, 24) : BOOL
90 : eq(88, 27) : BOOL
91 : eq(88, 30) : BOOL
92 : eq(88, 33) : BOOL
93 : eq(88, 35) : BOOL
94 : eq(88, 22) : BOOL
95 : eq(88, 38) : BOOL
96 : eq(88, 41) : BOOL
97 : ite(96, 26, 43) : BV:8
98 : ite(95, 40, 97) : BV:8
99 : ite(94, 26, 98) : BV:8
100 : ite(93, 26, 99) : BV:8
101 : ite(92, 26, 100) : BV:8
102 : ite(91, 32, 101) : BV:8
103 : ite(90, 29, 102) : BV:8
104 : ite(89, 26, 103) : BV:8
105 : bvconcat(51, 69, 87, 104) : BV:32
106 : ite(18, 2, 105) : BV:32
107 : lambda(17, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(16, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%x
1 : 2140659456 { 0x7f97df00 +1.18649291e128 } : BV:32
=input.dst.llvm-%n
1 : 3755990816 { 0xdfdfdf20 -538976480 -1.74899673e64 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 257798131 ] -> 223, [ 257798132; 257798132 ] -> 32, [ 257798133; 2140659455 ] -> 223, [ 2140659456; 2140659459 ] -> 0, [ 2140659460; 3078290487 ] -> 223, [ 3078290488; 3078290488 ] -> 0, [ 3078290489; 3078290489 ] -> 223, [ 3078290490; 3078290490 ] -> 151, [ 3078290491; 3078290491 ] -> 127, [ 3078290492; 4294967295 ] -> 223, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 257798131 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 257798132; 257798135 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 257798136; 3078290487 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3078290488; 3078290491 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3078290492; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 257798132 { 0xf5daff4 +1.73193216e159 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3078290488 { 0xb77afc38 -1216676808 -1.96082210e239 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 193259268 { 0xb84e704 +1.3830003e152 } : COUNT
=input.spec-%var-i-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 193259268 { 0xb84e704 +1.3830003e152 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 257798132 { 0xf5daff4 +1.73193216e159 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 257798135 { 0xf5daff7 +1.73193252e159 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3078290488 { 0xb77afc38 -1216676808 -1.96082210e239 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3078290491 { 0xb77afc3b -1216676805 -1.96082246e239 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 3755990815 ] -> true, [ 3755990816; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : Lambda97 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 2140659456 { 0x7f97df00 +1.18649291e128 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 2140659457 { 0x7f97df01 +1.18649303e128 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 3078290490 { 0xb77afc3a -1216676806 -1.96082234e239 } : BV:32
13 : eq(8, 12) : BOOL
14 : 151 { 0x97 -105 } : BV:8
15 : 257798132 { 0xf5daff4 +1.73193216e159 } : BV:32
16 : eq(8, 15) : BOOL
17 : 32 { 0x20 } : BV:8
18 : 2140659459 { 0x7f97df03 +1.18649327e128 } : BV:32
19 : eq(8, 18) : BOOL
20 : 2140659458 { 0x7f97df02 +1.18649315e128 } : BV:32
21 : eq(8, 20) : BOOL
22 : eq(8, 7) : BOOL
23 : 3078290491 { 0xb77afc3b -1216676805 -1.96082246e239 } : BV:32
24 : eq(8, 23) : BOOL
25 : 127 { 0x7f } : BV:8
26 : 3078290488 { 0xb77afc38 -1216676808 -1.96082210e239 } : BV:32
27 : eq(8, 26) : BOOL
28 : 223 { 0xdf -33 } : BV:8
29 : ite(27, 11, 28) : BV:8
30 : ite(24, 25, 29) : BV:8
31 : ite(22, 11, 30) : BV:8
32 : ite(21, 11, 31) : BV:8
33 : ite(19, 11, 32) : BV:8
34 : ite(16, 17, 33) : BV:8
35 : ite(13, 14, 34) : BV:8
36 : ite(10, 11, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 6, 7) : BV:32
39 : eq(38, 9) : BOOL
40 : eq(38, 12) : BOOL
41 : eq(38, 15) : BOOL
42 : eq(38, 18) : BOOL
43 : eq(38, 20) : BOOL
44 : eq(38, 7) : BOOL
45 : eq(38, 23) : BOOL
46 : eq(38, 26) : BOOL
47 : ite(46, 11, 28) : BV:8
48 : ite(45, 25, 47) : BV:8
49 : ite(44, 11, 48) : BV:8
50 : ite(43, 11, 49) : BV:8
51 : ite(42, 11, 50) : BV:8
52 : ite(41, 17, 51) : BV:8
53 : ite(40, 14, 52) : BV:8
54 : ite(39, 11, 53) : BV:8
55 : 1 { 0x1 +1.11e129 } : BV:32
56 : bvadd(55, 6, 7) : BV:32
57 : eq(56, 9) : BOOL
58 : eq(56, 12) : BOOL
59 : eq(56, 15) : BOOL
60 : eq(56, 18) : BOOL
61 : eq(56, 20) : BOOL
62 : eq(56, 7) : BOOL
63 : eq(56, 23) : BOOL
64 : eq(56, 26) : BOOL
65 : ite(64, 11, 28) : BV:8
66 : ite(63, 25, 65) : BV:8
67 : ite(62, 11, 66) : BV:8
68 : ite(61, 11, 67) : BV:8
69 : ite(60, 11, 68) : BV:8
70 : ite(59, 17, 69) : BV:8
71 : ite(58, 14, 70) : BV:8
72 : ite(57, 11, 71) : BV:8
73 : bvadd(6, 7) : BV:32
74 : eq(73, 9) : BOOL
75 : eq(73, 12) : BOOL
76 : eq(73, 15) : BOOL
77 : eq(73, 18) : BOOL
78 : eq(73, 20) : BOOL
79 : eq(73, 7) : BOOL
80 : eq(73, 23) : BOOL
81 : eq(73, 26) : BOOL
82 : ite(81, 11, 28) : BV:8
83 : ite(80, 25, 82) : BV:8
84 : ite(79, 11, 83) : BV:8
85 : ite(78, 11, 84) : BV:8
86 : ite(77, 11, 85) : BV:8
87 : ite(76, 17, 86) : BV:8
88 : ite(75, 14, 87) : BV:8
89 : ite(74, 11, 88) : BV:8
90 : bvconcat(36, 54, 72, 89) : BV:32
91 : ite(3, 2, 90) : BV:32
92 : lambda(1, 91) : FUNCTION[BV:32 -> BV:32]
93 : sym_const(92) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry.0.1
1 : ([ 0; 3755990815 ] -> true, [ 3755990816; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L2%7%bbentry.1.1
1 : Lambda99 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 2140659456 { 0x7f97df00 +1.18649291e128 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 2140659457 { 0x7f97df01 +1.18649303e128 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 3078290490 { 0xb77afc3a -1216676806 -1.96082234e239 } : BV:32
13 : eq(8, 12) : BOOL
14 : 151 { 0x97 -105 } : BV:8
15 : 257798132 { 0xf5daff4 +1.73193216e159 } : BV:32
16 : eq(8, 15) : BOOL
17 : 32 { 0x20 } : BV:8
18 : 2140659459 { 0x7f97df03 +1.18649327e128 } : BV:32
19 : eq(8, 18) : BOOL
20 : 2140659458 { 0x7f97df02 +1.18649315e128 } : BV:32
21 : eq(8, 20) : BOOL
22 : eq(8, 7) : BOOL
23 : 3078290491 { 0xb77afc3b -1216676805 -1.96082246e239 } : BV:32
24 : eq(8, 23) : BOOL
25 : 127 { 0x7f } : BV:8
26 : 3078290488 { 0xb77afc38 -1216676808 -1.96082210e239 } : BV:32
27 : eq(8, 26) : BOOL
28 : 223 { 0xdf -33 } : BV:8
29 : ite(27, 11, 28) : BV:8
30 : ite(24, 25, 29) : BV:8
31 : ite(22, 11, 30) : BV:8
32 : ite(21, 11, 31) : BV:8
33 : ite(19, 11, 32) : BV:8
34 : ite(16, 17, 33) : BV:8
35 : ite(13, 14, 34) : BV:8
36 : ite(10, 11, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 6, 7) : BV:32
39 : eq(38, 9) : BOOL
40 : eq(38, 12) : BOOL
41 : eq(38, 15) : BOOL
42 : eq(38, 18) : BOOL
43 : eq(38, 20) : BOOL
44 : eq(38, 7) : BOOL
45 : eq(38, 23) : BOOL
46 : eq(38, 26) : BOOL
47 : ite(46, 11, 28) : BV:8
48 : ite(45, 25, 47) : BV:8
49 : ite(44, 11, 48) : BV:8
50 : ite(43, 11, 49) : BV:8
51 : ite(42, 11, 50) : BV:8
52 : ite(41, 17, 51) : BV:8
53 : ite(40, 14, 52) : BV:8
54 : ite(39, 11, 53) : BV:8
55 : 1 { 0x1 +1.11e129 } : BV:32
56 : bvadd(55, 6, 7) : BV:32
57 : eq(56, 9) : BOOL
58 : eq(56, 12) : BOOL
59 : eq(56, 15) : BOOL
60 : eq(56, 18) : BOOL
61 : eq(56, 20) : BOOL
62 : eq(56, 7) : BOOL
63 : eq(56, 23) : BOOL
64 : eq(56, 26) : BOOL
65 : ite(64, 11, 28) : BV:8
66 : ite(63, 25, 65) : BV:8
67 : ite(62, 11, 66) : BV:8
68 : ite(61, 11, 67) : BV:8
69 : ite(60, 11, 68) : BV:8
70 : ite(59, 17, 69) : BV:8
71 : ite(58, 14, 70) : BV:8
72 : ite(57, 11, 71) : BV:8
73 : bvadd(6, 7) : BV:32
74 : eq(73, 9) : BOOL
75 : eq(73, 12) : BOOL
76 : eq(73, 15) : BOOL
77 : eq(73, 18) : BOOL
78 : eq(73, 20) : BOOL
79 : eq(73, 7) : BOOL
80 : eq(73, 23) : BOOL
81 : eq(73, 26) : BOOL
82 : ite(81, 11, 28) : BV:8
83 : ite(80, 25, 82) : BV:8
84 : ite(79, 11, 83) : BV:8
85 : ite(78, 11, 84) : BV:8
86 : ite(77, 11, 85) : BV:8
87 : ite(76, 17, 86) : BV:8
88 : ite(75, 14, 87) : BV:8
89 : ite(74, 11, 88) : BV:8
90 : bvconcat(36, 54, 72, 89) : BV:32
91 : ite(3, 2, 90) : BV:32
92 : ite(3, 2, 91) : BV:32
93 : lambda(1, 92) : FUNCTION[BV:32 -> BV:32]
94 : sym_const(93) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
1795444310
=counter_example_end
=global nodece 4 num_edges_traversed 1
=global nodece 4 nodece_visted_pcs: 
L2%7%bbentry_Lfor.cond%1%bbentry
=global nodece 5
=global nodece 5 nodece z3.ce63.num_edges_traversed1
=global nodece 5 nodece_path
=global nodece 5 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 5 nodece_cached_counterexample
=counter_example_begin z3.ce63 f98a14c4511960e7ec555f6774872992
=input.spec-%var-x-1
1 : Lambda150 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 524551 { 0x80107 +1.6253135e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 524552 { 0x80108 +1.6253147e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda151 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 1610604296 { 0x5fffdf08 +1.99899387e64 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 3603268049 { 0xd6c581d1 -691699247 -1.54302418e46 } : BV:32
25 : eq(23, 24) : BOOL
26 : 1 { 0x1 } : BV:8
27 : 2256135706 { 0x8679e61a -2038831590 -1.95233464e141 } : BV:32
28 : eq(23, 27) : BOOL
29 : 255 { 0xff -1 } : BV:8
30 : 1610604297 { 0x5fffdf09 +1.99899399e64 } : BV:32
31 : eq(23, 30) : BOOL
32 : 0 { 0x0 } : BV:8
33 : 1610604299 { 0x5fffdf0b +1.99899423e64 } : BV:32
34 : eq(23, 33) : BOOL
35 : 3603268051 { 0xd6c581d3 -691699245 -1.54302442e46 } : BV:32
36 : eq(23, 35) : BOOL
37 : 2256135705 { 0x8679e619 -2038831591 -1.95233452e141 } : BV:32
38 : eq(23, 37) : BOOL
39 : 223 { 0xdf -33 } : BV:8
40 : 1610604298 { 0x5fffdf0a +1.99899411e64 } : BV:32
41 : eq(23, 40) : BOOL
42 : eq(23, 22) : BOOL
43 : 2256135707 { 0x8679e61b -2038831589 -1.95233476e141 } : BV:32
44 : eq(23, 43) : BOOL
45 : 95 { 0x5f } : BV:8
46 : 8 { 0x8 } : BV:8
47 : ite(44, 45, 46) : BV:8
48 : ite(42, 32, 47) : BV:8
49 : ite(41, 32, 48) : BV:8
50 : ite(38, 39, 49) : BV:8
51 : ite(36, 32, 50) : BV:8
52 : ite(34, 32, 51) : BV:8
53 : ite(31, 32, 52) : BV:8
54 : ite(28, 29, 53) : BV:8
55 : ite(25, 26, 54) : BV:8
56 : 2 { 0x2 +1.23e129 } : BV:32
57 : bvadd(56, 21, 22) : BV:32
58 : eq(57, 24) : BOOL
59 : eq(57, 27) : BOOL
60 : eq(57, 30) : BOOL
61 : eq(57, 33) : BOOL
62 : eq(57, 35) : BOOL
63 : eq(57, 37) : BOOL
64 : eq(57, 40) : BOOL
65 : eq(57, 22) : BOOL
66 : eq(57, 43) : BOOL
67 : ite(66, 45, 46) : BV:8
68 : ite(65, 32, 67) : BV:8
69 : ite(64, 32, 68) : BV:8
70 : ite(63, 39, 69) : BV:8
71 : ite(62, 32, 70) : BV:8
72 : ite(61, 32, 71) : BV:8
73 : ite(60, 32, 72) : BV:8
74 : ite(59, 29, 73) : BV:8
75 : ite(58, 26, 74) : BV:8
76 : 1 { 0x1 +1.11e129 } : BV:32
77 : bvadd(76, 21, 22) : BV:32
78 : eq(77, 24) : BOOL
79 : eq(77, 27) : BOOL
80 : eq(77, 30) : BOOL
81 : eq(77, 33) : BOOL
82 : eq(77, 35) : BOOL
83 : eq(77, 37) : BOOL
84 : eq(77, 40) : BOOL
85 : eq(77, 22) : BOOL
86 : eq(77, 43) : BOOL
87 : ite(86, 45, 46) : BV:8
88 : ite(85, 32, 87) : BV:8
89 : ite(84, 32, 88) : BV:8
90 : ite(83, 39, 89) : BV:8
91 : ite(82, 32, 90) : BV:8
92 : ite(81, 32, 91) : BV:8
93 : ite(80, 32, 92) : BV:8
94 : ite(79, 29, 93) : BV:8
95 : ite(78, 26, 94) : BV:8
96 : bvadd(21, 22) : BV:32
97 : eq(96, 24) : BOOL
98 : eq(96, 27) : BOOL
99 : eq(96, 30) : BOOL
100 : eq(96, 33) : BOOL
101 : eq(96, 35) : BOOL
102 : eq(96, 37) : BOOL
103 : eq(96, 40) : BOOL
104 : eq(96, 22) : BOOL
105 : eq(96, 43) : BOOL
106 : ite(105, 45, 46) : BV:8
107 : ite(104, 32, 106) : BV:8
108 : ite(103, 32, 107) : BV:8
109 : ite(102, 39, 108) : BV:8
110 : ite(101, 32, 109) : BV:8
111 : ite(100, 32, 110) : BV:8
112 : ite(99, 32, 111) : BV:8
113 : ite(98, 29, 112) : BV:8
114 : ite(97, 26, 113) : BV:8
115 : bvconcat(55, 75, 95, 114) : BV:32
116 : ite(18, 2, 115) : BV:32
117 : lambda(17, 116) : FUNCTION[BV:32 -> BV:32]
118 : map(16, 117) : MAP[BV:32 -> BV:32]
119 : sym_const(118) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry
1 : Lambda150 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 524551 { 0x80107 +1.6253135e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 524552 { 0x80108 +1.6253147e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda151 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 1610604296 { 0x5fffdf08 +1.99899387e64 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 3603268049 { 0xd6c581d1 -691699247 -1.54302418e46 } : BV:32
25 : eq(23, 24) : BOOL
26 : 1 { 0x1 } : BV:8
27 : 2256135706 { 0x8679e61a -2038831590 -1.95233464e141 } : BV:32
28 : eq(23, 27) : BOOL
29 : 255 { 0xff -1 } : BV:8
30 : 1610604297 { 0x5fffdf09 +1.99899399e64 } : BV:32
31 : eq(23, 30) : BOOL
32 : 0 { 0x0 } : BV:8
33 : 1610604299 { 0x5fffdf0b +1.99899423e64 } : BV:32
34 : eq(23, 33) : BOOL
35 : 3603268051 { 0xd6c581d3 -691699245 -1.54302442e46 } : BV:32
36 : eq(23, 35) : BOOL
37 : 2256135705 { 0x8679e619 -2038831591 -1.95233452e141 } : BV:32
38 : eq(23, 37) : BOOL
39 : 223 { 0xdf -33 } : BV:8
40 : 1610604298 { 0x5fffdf0a +1.99899411e64 } : BV:32
41 : eq(23, 40) : BOOL
42 : eq(23, 22) : BOOL
43 : 2256135707 { 0x8679e61b -2038831589 -1.95233476e141 } : BV:32
44 : eq(23, 43) : BOOL
45 : 95 { 0x5f } : BV:8
46 : 8 { 0x8 } : BV:8
47 : ite(44, 45, 46) : BV:8
48 : ite(42, 32, 47) : BV:8
49 : ite(41, 32, 48) : BV:8
50 : ite(38, 39, 49) : BV:8
51 : ite(36, 32, 50) : BV:8
52 : ite(34, 32, 51) : BV:8
53 : ite(31, 32, 52) : BV:8
54 : ite(28, 29, 53) : BV:8
55 : ite(25, 26, 54) : BV:8
56 : 2 { 0x2 +1.23e129 } : BV:32
57 : bvadd(56, 21, 22) : BV:32
58 : eq(57, 24) : BOOL
59 : eq(57, 27) : BOOL
60 : eq(57, 30) : BOOL
61 : eq(57, 33) : BOOL
62 : eq(57, 35) : BOOL
63 : eq(57, 37) : BOOL
64 : eq(57, 40) : BOOL
65 : eq(57, 22) : BOOL
66 : eq(57, 43) : BOOL
67 : ite(66, 45, 46) : BV:8
68 : ite(65, 32, 67) : BV:8
69 : ite(64, 32, 68) : BV:8
70 : ite(63, 39, 69) : BV:8
71 : ite(62, 32, 70) : BV:8
72 : ite(61, 32, 71) : BV:8
73 : ite(60, 32, 72) : BV:8
74 : ite(59, 29, 73) : BV:8
75 : ite(58, 26, 74) : BV:8
76 : 1 { 0x1 +1.11e129 } : BV:32
77 : bvadd(76, 21, 22) : BV:32
78 : eq(77, 24) : BOOL
79 : eq(77, 27) : BOOL
80 : eq(77, 30) : BOOL
81 : eq(77, 33) : BOOL
82 : eq(77, 35) : BOOL
83 : eq(77, 37) : BOOL
84 : eq(77, 40) : BOOL
85 : eq(77, 22) : BOOL
86 : eq(77, 43) : BOOL
87 : ite(86, 45, 46) : BV:8
88 : ite(85, 32, 87) : BV:8
89 : ite(84, 32, 88) : BV:8
90 : ite(83, 39, 89) : BV:8
91 : ite(82, 32, 90) : BV:8
92 : ite(81, 32, 91) : BV:8
93 : ite(80, 32, 92) : BV:8
94 : ite(79, 29, 93) : BV:8
95 : ite(78, 26, 94) : BV:8
96 : bvadd(21, 22) : BV:32
97 : eq(96, 24) : BOOL
98 : eq(96, 27) : BOOL
99 : eq(96, 30) : BOOL
100 : eq(96, 33) : BOOL
101 : eq(96, 35) : BOOL
102 : eq(96, 37) : BOOL
103 : eq(96, 40) : BOOL
104 : eq(96, 22) : BOOL
105 : eq(96, 43) : BOOL
106 : ite(105, 45, 46) : BV:8
107 : ite(104, 32, 106) : BV:8
108 : ite(103, 32, 107) : BV:8
109 : ite(102, 39, 108) : BV:8
110 : ite(101, 32, 109) : BV:8
111 : ite(100, 32, 110) : BV:8
112 : ite(99, 32, 111) : BV:8
113 : ite(98, 29, 112) : BV:8
114 : ite(97, 26, 113) : BV:8
115 : bvconcat(55, 75, 95, 114) : BV:32
116 : ite(18, 2, 115) : BV:32
117 : lambda(17, 116) : FUNCTION[BV:32 -> BV:32]
118 : map(16, 117) : MAP[BV:32 -> BV:32]
119 : sym_const(118) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%x
1 : 1610604296 { 0x5fffdf08 +1.99899387e64 } : BV:32
=input.dst.llvm-%n
1 : 524552 { 0x80108 +1.6253147e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1610604295 ] -> 8, [ 1610604296; 1610604299 ] -> 0, [ 1610604300; 2256135704 ] -> 8, [ 2256135705; 2256135705 ] -> 223, [ 2256135706; 2256135706 ] -> 255, [ 2256135707; 2256135707 ] -> 95, [ 2256135708; 3603268048 ] -> 8, [ 3603268049; 3603268049 ] -> 1, [ 3603268050; 3603268050 ] -> 8, [ 3603268051; 3603268051 ] -> 0, [ 3603268052; 4294967295 ] -> 8, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2256135703 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2256135704; 2256135707 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2256135708; 3603268047 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3603268048; 3603268051 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3603268052; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3603268048 { 0xd6c581d0 -691699248 -1.54302406e46 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2256135704 { 0x8679e618 -2038831592 -1.95233440e141 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1407581506 { 0x53e5fd42 +1.79679131e40 } : COUNT
=input.spec-%var-i-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1407581506 { 0x53e5fd42 +1.79679131e40 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3603268048 { 0xd6c581d0 -691699248 -1.54302406e46 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3603268051 { 0xd6c581d3 -691699245 -1.54302442e46 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2256135704 { 0x8679e618 -2038831592 -1.95233440e141 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2256135707 { 0x8679e61b -2038831589 -1.95233476e141 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 524551 ] -> true, [ 524552; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : Lambda137 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 1610604296 { 0x5fffdf08 +1.99899387e64 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 3603268049 { 0xd6c581d1 -691699247 -1.54302418e46 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 2256135706 { 0x8679e61a -2038831590 -1.95233464e141 } : BV:32
13 : eq(8, 12) : BOOL
14 : 255 { 0xff -1 } : BV:8
15 : 1610604297 { 0x5fffdf09 +1.99899399e64 } : BV:32
16 : eq(8, 15) : BOOL
17 : 0 { 0x0 } : BV:8
18 : 1610604299 { 0x5fffdf0b +1.99899423e64 } : BV:32
19 : eq(8, 18) : BOOL
20 : 3603268051 { 0xd6c581d3 -691699245 -1.54302442e46 } : BV:32
21 : eq(8, 20) : BOOL
22 : 2256135705 { 0x8679e619 -2038831591 -1.95233452e141 } : BV:32
23 : eq(8, 22) : BOOL
24 : 223 { 0xdf -33 } : BV:8
25 : 1610604298 { 0x5fffdf0a +1.99899411e64 } : BV:32
26 : eq(8, 25) : BOOL
27 : eq(8, 7) : BOOL
28 : 2256135707 { 0x8679e61b -2038831589 -1.95233476e141 } : BV:32
29 : eq(8, 28) : BOOL
30 : 95 { 0x5f } : BV:8
31 : 8 { 0x8 } : BV:8
32 : ite(29, 30, 31) : BV:8
33 : ite(27, 17, 32) : BV:8
34 : ite(26, 17, 33) : BV:8
35 : ite(23, 24, 34) : BV:8
36 : ite(21, 17, 35) : BV:8
37 : ite(19, 17, 36) : BV:8
38 : ite(16, 17, 37) : BV:8
39 : ite(13, 14, 38) : BV:8
40 : ite(10, 11, 39) : BV:8
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvadd(41, 6, 7) : BV:32
43 : eq(42, 9) : BOOL
44 : eq(42, 12) : BOOL
45 : eq(42, 15) : BOOL
46 : eq(42, 18) : BOOL
47 : eq(42, 20) : BOOL
48 : eq(42, 22) : BOOL
49 : eq(42, 25) : BOOL
50 : eq(42, 7) : BOOL
51 : eq(42, 28) : BOOL
52 : ite(51, 30, 31) : BV:8
53 : ite(50, 17, 52) : BV:8
54 : ite(49, 17, 53) : BV:8
55 : ite(48, 24, 54) : BV:8
56 : ite(47, 17, 55) : BV:8
57 : ite(46, 17, 56) : BV:8
58 : ite(45, 17, 57) : BV:8
59 : ite(44, 14, 58) : BV:8
60 : ite(43, 11, 59) : BV:8
61 : 1 { 0x1 +1.11e129 } : BV:32
62 : bvadd(61, 6, 7) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 15) : BOOL
66 : eq(62, 18) : BOOL
67 : eq(62, 20) : BOOL
68 : eq(62, 22) : BOOL
69 : eq(62, 25) : BOOL
70 : eq(62, 7) : BOOL
71 : eq(62, 28) : BOOL
72 : ite(71, 30, 31) : BV:8
73 : ite(70, 17, 72) : BV:8
74 : ite(69, 17, 73) : BV:8
75 : ite(68, 24, 74) : BV:8
76 : ite(67, 17, 75) : BV:8
77 : ite(66, 17, 76) : BV:8
78 : ite(65, 17, 77) : BV:8
79 : ite(64, 14, 78) : BV:8
80 : ite(63, 11, 79) : BV:8
81 : bvadd(6, 7) : BV:32
82 : eq(81, 9) : BOOL
83 : eq(81, 12) : BOOL
84 : eq(81, 15) : BOOL
85 : eq(81, 18) : BOOL
86 : eq(81, 20) : BOOL
87 : eq(81, 22) : BOOL
88 : eq(81, 25) : BOOL
89 : eq(81, 7) : BOOL
90 : eq(81, 28) : BOOL
91 : ite(90, 30, 31) : BV:8
92 : ite(89, 17, 91) : BV:8
93 : ite(88, 17, 92) : BV:8
94 : ite(87, 24, 93) : BV:8
95 : ite(86, 17, 94) : BV:8
96 : ite(85, 17, 95) : BV:8
97 : ite(84, 17, 96) : BV:8
98 : ite(83, 14, 97) : BV:8
99 : ite(82, 11, 98) : BV:8
100 : bvconcat(40, 60, 80, 99) : BV:32
101 : ite(3, 2, 100) : BV:32
102 : lambda(1, 101) : FUNCTION[BV:32 -> BV:32]
103 : sym_const(102) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry.0.1
1 : ([ 0; 524551 ] -> true, [ 524552; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L2%7%bbentry.1.1
1 : Lambda139 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 1610604296 { 0x5fffdf08 +1.99899387e64 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 3603268049 { 0xd6c581d1 -691699247 -1.54302418e46 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 2256135706 { 0x8679e61a -2038831590 -1.95233464e141 } : BV:32
13 : eq(8, 12) : BOOL
14 : 255 { 0xff -1 } : BV:8
15 : 1610604297 { 0x5fffdf09 +1.99899399e64 } : BV:32
16 : eq(8, 15) : BOOL
17 : 0 { 0x0 } : BV:8
18 : 1610604299 { 0x5fffdf0b +1.99899423e64 } : BV:32
19 : eq(8, 18) : BOOL
20 : 3603268051 { 0xd6c581d3 -691699245 -1.54302442e46 } : BV:32
21 : eq(8, 20) : BOOL
22 : 2256135705 { 0x8679e619 -2038831591 -1.95233452e141 } : BV:32
23 : eq(8, 22) : BOOL
24 : 223 { 0xdf -33 } : BV:8
25 : 1610604298 { 0x5fffdf0a +1.99899411e64 } : BV:32
26 : eq(8, 25) : BOOL
27 : eq(8, 7) : BOOL
28 : 2256135707 { 0x8679e61b -2038831589 -1.95233476e141 } : BV:32
29 : eq(8, 28) : BOOL
30 : 95 { 0x5f } : BV:8
31 : 8 { 0x8 } : BV:8
32 : ite(29, 30, 31) : BV:8
33 : ite(27, 17, 32) : BV:8
34 : ite(26, 17, 33) : BV:8
35 : ite(23, 24, 34) : BV:8
36 : ite(21, 17, 35) : BV:8
37 : ite(19, 17, 36) : BV:8
38 : ite(16, 17, 37) : BV:8
39 : ite(13, 14, 38) : BV:8
40 : ite(10, 11, 39) : BV:8
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvadd(41, 6, 7) : BV:32
43 : eq(42, 9) : BOOL
44 : eq(42, 12) : BOOL
45 : eq(42, 15) : BOOL
46 : eq(42, 18) : BOOL
47 : eq(42, 20) : BOOL
48 : eq(42, 22) : BOOL
49 : eq(42, 25) : BOOL
50 : eq(42, 7) : BOOL
51 : eq(42, 28) : BOOL
52 : ite(51, 30, 31) : BV:8
53 : ite(50, 17, 52) : BV:8
54 : ite(49, 17, 53) : BV:8
55 : ite(48, 24, 54) : BV:8
56 : ite(47, 17, 55) : BV:8
57 : ite(46, 17, 56) : BV:8
58 : ite(45, 17, 57) : BV:8
59 : ite(44, 14, 58) : BV:8
60 : ite(43, 11, 59) : BV:8
61 : 1 { 0x1 +1.11e129 } : BV:32
62 : bvadd(61, 6, 7) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 15) : BOOL
66 : eq(62, 18) : BOOL
67 : eq(62, 20) : BOOL
68 : eq(62, 22) : BOOL
69 : eq(62, 25) : BOOL
70 : eq(62, 7) : BOOL
71 : eq(62, 28) : BOOL
72 : ite(71, 30, 31) : BV:8
73 : ite(70, 17, 72) : BV:8
74 : ite(69, 17, 73) : BV:8
75 : ite(68, 24, 74) : BV:8
76 : ite(67, 17, 75) : BV:8
77 : ite(66, 17, 76) : BV:8
78 : ite(65, 17, 77) : BV:8
79 : ite(64, 14, 78) : BV:8
80 : ite(63, 11, 79) : BV:8
81 : bvadd(6, 7) : BV:32
82 : eq(81, 9) : BOOL
83 : eq(81, 12) : BOOL
84 : eq(81, 15) : BOOL
85 : eq(81, 18) : BOOL
86 : eq(81, 20) : BOOL
87 : eq(81, 22) : BOOL
88 : eq(81, 25) : BOOL
89 : eq(81, 7) : BOOL
90 : eq(81, 28) : BOOL
91 : ite(90, 30, 31) : BV:8
92 : ite(89, 17, 91) : BV:8
93 : ite(88, 17, 92) : BV:8
94 : ite(87, 24, 93) : BV:8
95 : ite(86, 17, 94) : BV:8
96 : ite(85, 17, 95) : BV:8
97 : ite(84, 17, 96) : BV:8
98 : ite(83, 14, 97) : BV:8
99 : ite(82, 11, 98) : BV:8
100 : bvconcat(40, 60, 80, 99) : BV:32
101 : ite(3, 2, 100) : BV:32
102 : ite(3, 2, 101) : BV:32
103 : lambda(1, 102) : FUNCTION[BV:32 -> BV:32]
104 : sym_const(103) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
1027758982
=counter_example_end
=global nodece 5 num_edges_traversed 1
=global nodece 5 nodece_visted_pcs: 
L2%7%bbentry_Lfor.cond%1%bbentry
=global nodece 6
=global nodece 6 nodece z3.ce83.num_edges_traversed1
=global nodece 6 nodece_path
=global nodece 6 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 6 nodece_cached_counterexample
=counter_example_begin z3.ce83 dfa2afa553835576824c7ce2db7837e9
=input.spec-%var-x-1
1 : Lambda186 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda187 : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(12, 10) : BV:32
14 : 4059950084 { 0xf1fdec04 -235017212 -1.98376512e100 } : BV:32
15 : bvadd(11, 13, 14) : BV:32
16 : 4209635409 { 0xfae9f051 -85331887 -1.82764637e118 } : BV:32
17 : eq(15, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : 4209635408 { 0xfae9f050 -85331888 -1.82764625e118 } : BV:32
20 : eq(15, 19) : BOOL
21 : 4209635411 { 0xfae9f053 -85331885 -1.82764661e118 } : BV:32
22 : eq(15, 21) : BOOL
23 : 4209635410 { 0xfae9f052 -85331886 -1.82764649e118 } : BV:32
24 : eq(15, 23) : BOOL
25 : 2417119557 { 0x90125145 -1877847739 -1.14310514e161 } : BV:32
26 : eq(15, 25) : BOOL
27 : 236 { 0xec -20 } : BV:8
28 : 2417119559 { 0x90125147 -1877847737 -1.14310538e161 } : BV:32
29 : eq(15, 28) : BOOL
30 : 241 { 0xf1 -15 } : BV:8
31 : 2417119556 { 0x90125144 -1877847740 -1.14310503e161 } : BV:32
32 : eq(15, 31) : BOOL
33 : 4 { 0x4 } : BV:8
34 : 253 { 0xfd -3 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(29, 30, 35) : BV:8
37 : ite(26, 27, 36) : BV:8
38 : ite(24, 18, 37) : BV:8
39 : ite(22, 18, 38) : BV:8
40 : ite(20, 18, 39) : BV:8
41 : ite(17, 18, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 13, 14) : BV:32
44 : eq(43, 16) : BOOL
45 : eq(43, 19) : BOOL
46 : eq(43, 21) : BOOL
47 : eq(43, 23) : BOOL
48 : eq(43, 25) : BOOL
49 : eq(43, 28) : BOOL
50 : eq(43, 31) : BOOL
51 : ite(50, 33, 34) : BV:8
52 : ite(49, 30, 51) : BV:8
53 : ite(48, 27, 52) : BV:8
54 : ite(47, 18, 53) : BV:8
55 : ite(46, 18, 54) : BV:8
56 : ite(45, 18, 55) : BV:8
57 : ite(44, 18, 56) : BV:8
58 : 1 { 0x1 +1.11e129 } : BV:32
59 : bvadd(58, 13, 14) : BV:32
60 : eq(59, 16) : BOOL
61 : eq(59, 19) : BOOL
62 : eq(59, 21) : BOOL
63 : eq(59, 23) : BOOL
64 : eq(59, 25) : BOOL
65 : eq(59, 28) : BOOL
66 : eq(59, 31) : BOOL
67 : ite(66, 33, 34) : BV:8
68 : ite(65, 30, 67) : BV:8
69 : ite(64, 27, 68) : BV:8
70 : ite(63, 18, 69) : BV:8
71 : ite(62, 18, 70) : BV:8
72 : ite(61, 18, 71) : BV:8
73 : ite(60, 18, 72) : BV:8
74 : bvadd(13, 14) : BV:32
75 : eq(74, 16) : BOOL
76 : eq(74, 19) : BOOL
77 : eq(74, 21) : BOOL
78 : eq(74, 23) : BOOL
79 : eq(74, 25) : BOOL
80 : eq(74, 28) : BOOL
81 : eq(74, 31) : BOOL
82 : ite(81, 33, 34) : BV:8
83 : ite(80, 30, 82) : BV:8
84 : ite(79, 27, 83) : BV:8
85 : ite(78, 18, 84) : BV:8
86 : ite(77, 18, 85) : BV:8
87 : ite(76, 18, 86) : BV:8
88 : ite(75, 18, 87) : BV:8
89 : bvconcat(41, 57, 73, 88) : BV:32
90 : lambda(10, 89) : FUNCTION[BV:32 -> BV:32]
91 : map(9, 90) : MAP[BV:32 -> BV:32]
92 : sym_const(91) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry
1 : Lambda186 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda187 : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(12, 10) : BV:32
14 : 4059950084 { 0xf1fdec04 -235017212 -1.98376512e100 } : BV:32
15 : bvadd(11, 13, 14) : BV:32
16 : 4209635409 { 0xfae9f051 -85331887 -1.82764637e118 } : BV:32
17 : eq(15, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : 4209635408 { 0xfae9f050 -85331888 -1.82764625e118 } : BV:32
20 : eq(15, 19) : BOOL
21 : 4209635411 { 0xfae9f053 -85331885 -1.82764661e118 } : BV:32
22 : eq(15, 21) : BOOL
23 : 4209635410 { 0xfae9f052 -85331886 -1.82764649e118 } : BV:32
24 : eq(15, 23) : BOOL
25 : 2417119557 { 0x90125145 -1877847739 -1.14310514e161 } : BV:32
26 : eq(15, 25) : BOOL
27 : 236 { 0xec -20 } : BV:8
28 : 2417119559 { 0x90125147 -1877847737 -1.14310538e161 } : BV:32
29 : eq(15, 28) : BOOL
30 : 241 { 0xf1 -15 } : BV:8
31 : 2417119556 { 0x90125144 -1877847740 -1.14310503e161 } : BV:32
32 : eq(15, 31) : BOOL
33 : 4 { 0x4 } : BV:8
34 : 253 { 0xfd -3 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(29, 30, 35) : BV:8
37 : ite(26, 27, 36) : BV:8
38 : ite(24, 18, 37) : BV:8
39 : ite(22, 18, 38) : BV:8
40 : ite(20, 18, 39) : BV:8
41 : ite(17, 18, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 13, 14) : BV:32
44 : eq(43, 16) : BOOL
45 : eq(43, 19) : BOOL
46 : eq(43, 21) : BOOL
47 : eq(43, 23) : BOOL
48 : eq(43, 25) : BOOL
49 : eq(43, 28) : BOOL
50 : eq(43, 31) : BOOL
51 : ite(50, 33, 34) : BV:8
52 : ite(49, 30, 51) : BV:8
53 : ite(48, 27, 52) : BV:8
54 : ite(47, 18, 53) : BV:8
55 : ite(46, 18, 54) : BV:8
56 : ite(45, 18, 55) : BV:8
57 : ite(44, 18, 56) : BV:8
58 : 1 { 0x1 +1.11e129 } : BV:32
59 : bvadd(58, 13, 14) : BV:32
60 : eq(59, 16) : BOOL
61 : eq(59, 19) : BOOL
62 : eq(59, 21) : BOOL
63 : eq(59, 23) : BOOL
64 : eq(59, 25) : BOOL
65 : eq(59, 28) : BOOL
66 : eq(59, 31) : BOOL
67 : ite(66, 33, 34) : BV:8
68 : ite(65, 30, 67) : BV:8
69 : ite(64, 27, 68) : BV:8
70 : ite(63, 18, 69) : BV:8
71 : ite(62, 18, 70) : BV:8
72 : ite(61, 18, 71) : BV:8
73 : ite(60, 18, 72) : BV:8
74 : bvadd(13, 14) : BV:32
75 : eq(74, 16) : BOOL
76 : eq(74, 19) : BOOL
77 : eq(74, 21) : BOOL
78 : eq(74, 23) : BOOL
79 : eq(74, 25) : BOOL
80 : eq(74, 28) : BOOL
81 : eq(74, 31) : BOOL
82 : ite(81, 33, 34) : BV:8
83 : ite(80, 30, 82) : BV:8
84 : ite(79, 27, 83) : BV:8
85 : ite(78, 18, 84) : BV:8
86 : ite(77, 18, 85) : BV:8
87 : ite(76, 18, 86) : BV:8
88 : ite(75, 18, 87) : BV:8
89 : bvconcat(41, 57, 73, 88) : BV:32
90 : lambda(10, 89) : FUNCTION[BV:32 -> BV:32]
91 : map(9, 90) : MAP[BV:32 -> BV:32]
92 : sym_const(91) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%x
1 : 4059950084 { 0xf1fdec04 -235017212 -1.98376512e100 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 2417119555 ] -> 253, [ 2417119556; 2417119556 ] -> 4, [ 2417119557; 2417119557 ] -> 236, [ 2417119558; 2417119558 ] -> 253, [ 2417119559; 2417119559 ] -> 241, [ 2417119560; 4209635407 ] -> 253, [ 4209635408; 4209635411 ] -> 0, [ 4209635412; 4294967295 ] -> 253, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2417119555 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2417119556; 2417119559 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2417119560; 4209635407 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4209635408; 4209635411 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 4209635412; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4209635408 { 0xfae9f050 -85331888 -1.82764625e118 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2417119556 { 0x90125144 -1877847740 -1.14310503e161 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 308041456 { 0x125c56f0 +1.72140312e165 } : COUNT
=input.spec-%var-i-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 308041456 { 0x125c56f0 +1.72140312e165 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4209635408 { 0xfae9f050 -85331888 -1.82764625e118 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 4209635411 { 0xfae9f053 -85331885 -1.82764661e118 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2417119556 { 0x90125144 -1877847740 -1.14310503e161 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2417119559 { 0x90125147 -1877847737 -1.14310538e161 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : Lambda173 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(3, 1) : BV:32
5 : 4059950084 { 0xf1fdec04 -235017212 -1.98376512e100 } : BV:32
6 : bvadd(2, 4, 5) : BV:32
7 : 4209635409 { 0xfae9f051 -85331887 -1.82764637e118 } : BV:32
8 : eq(6, 7) : BOOL
9 : 0 { 0x0 } : BV:8
10 : 4209635408 { 0xfae9f050 -85331888 -1.82764625e118 } : BV:32
11 : eq(6, 10) : BOOL
12 : 4209635411 { 0xfae9f053 -85331885 -1.82764661e118 } : BV:32
13 : eq(6, 12) : BOOL
14 : 4209635410 { 0xfae9f052 -85331886 -1.82764649e118 } : BV:32
15 : eq(6, 14) : BOOL
16 : 2417119557 { 0x90125145 -1877847739 -1.14310514e161 } : BV:32
17 : eq(6, 16) : BOOL
18 : 236 { 0xec -20 } : BV:8
19 : 2417119559 { 0x90125147 -1877847737 -1.14310538e161 } : BV:32
20 : eq(6, 19) : BOOL
21 : 241 { 0xf1 -15 } : BV:8
22 : 2417119556 { 0x90125144 -1877847740 -1.14310503e161 } : BV:32
23 : eq(6, 22) : BOOL
24 : 4 { 0x4 } : BV:8
25 : 253 { 0xfd -3 } : BV:8
26 : ite(23, 24, 25) : BV:8
27 : ite(20, 21, 26) : BV:8
28 : ite(17, 18, 27) : BV:8
29 : ite(15, 9, 28) : BV:8
30 : ite(13, 9, 29) : BV:8
31 : ite(11, 9, 30) : BV:8
32 : ite(8, 9, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 4, 5) : BV:32
35 : eq(34, 7) : BOOL
36 : eq(34, 10) : BOOL
37 : eq(34, 12) : BOOL
38 : eq(34, 14) : BOOL
39 : eq(34, 16) : BOOL
40 : eq(34, 19) : BOOL
41 : eq(34, 22) : BOOL
42 : ite(41, 24, 25) : BV:8
43 : ite(40, 21, 42) : BV:8
44 : ite(39, 18, 43) : BV:8
45 : ite(38, 9, 44) : BV:8
46 : ite(37, 9, 45) : BV:8
47 : ite(36, 9, 46) : BV:8
48 : ite(35, 9, 47) : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : bvadd(49, 4, 5) : BV:32
51 : eq(50, 7) : BOOL
52 : eq(50, 10) : BOOL
53 : eq(50, 12) : BOOL
54 : eq(50, 14) : BOOL
55 : eq(50, 16) : BOOL
56 : eq(50, 19) : BOOL
57 : eq(50, 22) : BOOL
58 : ite(57, 24, 25) : BV:8
59 : ite(56, 21, 58) : BV:8
60 : ite(55, 18, 59) : BV:8
61 : ite(54, 9, 60) : BV:8
62 : ite(53, 9, 61) : BV:8
63 : ite(52, 9, 62) : BV:8
64 : ite(51, 9, 63) : BV:8
65 : bvadd(4, 5) : BV:32
66 : eq(65, 7) : BOOL
67 : eq(65, 10) : BOOL
68 : eq(65, 12) : BOOL
69 : eq(65, 14) : BOOL
70 : eq(65, 16) : BOOL
71 : eq(65, 19) : BOOL
72 : eq(65, 22) : BOOL
73 : ite(72, 24, 25) : BV:8
74 : ite(71, 21, 73) : BV:8
75 : ite(70, 18, 74) : BV:8
76 : ite(69, 9, 75) : BV:8
77 : ite(68, 9, 76) : BV:8
78 : ite(67, 9, 77) : BV:8
79 : ite(66, 9, 78) : BV:8
80 : bvconcat(32, 48, 64, 79) : BV:32
81 : lambda(1, 80) : FUNCTION[BV:32 -> BV:32]
82 : sym_const(81) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L2%7%bbentry.1.1
1 : Lambda175 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(3, 1) : BV:32
5 : 4059950084 { 0xf1fdec04 -235017212 -1.98376512e100 } : BV:32
6 : bvadd(2, 4, 5) : BV:32
7 : 4209635409 { 0xfae9f051 -85331887 -1.82764637e118 } : BV:32
8 : eq(6, 7) : BOOL
9 : 0 { 0x0 } : BV:8
10 : 4209635408 { 0xfae9f050 -85331888 -1.82764625e118 } : BV:32
11 : eq(6, 10) : BOOL
12 : 4209635411 { 0xfae9f053 -85331885 -1.82764661e118 } : BV:32
13 : eq(6, 12) : BOOL
14 : 4209635410 { 0xfae9f052 -85331886 -1.82764649e118 } : BV:32
15 : eq(6, 14) : BOOL
16 : 2417119557 { 0x90125145 -1877847739 -1.14310514e161 } : BV:32
17 : eq(6, 16) : BOOL
18 : 236 { 0xec -20 } : BV:8
19 : 2417119559 { 0x90125147 -1877847737 -1.14310538e161 } : BV:32
20 : eq(6, 19) : BOOL
21 : 241 { 0xf1 -15 } : BV:8
22 : 2417119556 { 0x90125144 -1877847740 -1.14310503e161 } : BV:32
23 : eq(6, 22) : BOOL
24 : 4 { 0x4 } : BV:8
25 : 253 { 0xfd -3 } : BV:8
26 : ite(23, 24, 25) : BV:8
27 : ite(20, 21, 26) : BV:8
28 : ite(17, 18, 27) : BV:8
29 : ite(15, 9, 28) : BV:8
30 : ite(13, 9, 29) : BV:8
31 : ite(11, 9, 30) : BV:8
32 : ite(8, 9, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 4, 5) : BV:32
35 : eq(34, 7) : BOOL
36 : eq(34, 10) : BOOL
37 : eq(34, 12) : BOOL
38 : eq(34, 14) : BOOL
39 : eq(34, 16) : BOOL
40 : eq(34, 19) : BOOL
41 : eq(34, 22) : BOOL
42 : ite(41, 24, 25) : BV:8
43 : ite(40, 21, 42) : BV:8
44 : ite(39, 18, 43) : BV:8
45 : ite(38, 9, 44) : BV:8
46 : ite(37, 9, 45) : BV:8
47 : ite(36, 9, 46) : BV:8
48 : ite(35, 9, 47) : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : bvadd(49, 4, 5) : BV:32
51 : eq(50, 7) : BOOL
52 : eq(50, 10) : BOOL
53 : eq(50, 12) : BOOL
54 : eq(50, 14) : BOOL
55 : eq(50, 16) : BOOL
56 : eq(50, 19) : BOOL
57 : eq(50, 22) : BOOL
58 : ite(57, 24, 25) : BV:8
59 : ite(56, 21, 58) : BV:8
60 : ite(55, 18, 59) : BV:8
61 : ite(54, 9, 60) : BV:8
62 : ite(53, 9, 61) : BV:8
63 : ite(52, 9, 62) : BV:8
64 : ite(51, 9, 63) : BV:8
65 : bvadd(4, 5) : BV:32
66 : eq(65, 7) : BOOL
67 : eq(65, 10) : BOOL
68 : eq(65, 12) : BOOL
69 : eq(65, 14) : BOOL
70 : eq(65, 16) : BOOL
71 : eq(65, 19) : BOOL
72 : eq(65, 22) : BOOL
73 : ite(72, 24, 25) : BV:8
74 : ite(71, 21, 73) : BV:8
75 : ite(70, 18, 74) : BV:8
76 : ite(69, 9, 75) : BV:8
77 : ite(68, 9, 76) : BV:8
78 : ite(67, 9, 77) : BV:8
79 : ite(66, 9, 78) : BV:8
80 : bvconcat(32, 48, 64, 79) : BV:32
81 : lambda(1, 80) : FUNCTION[BV:32 -> BV:32]
82 : sym_const(81) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
3002094805
=counter_example_end
=global nodece 6 num_edges_traversed 1
=global nodece 6 nodece_visted_pcs: 
L2%7%bbentry_Lfor.cond%1%bbentry
=global nodece 7
=global nodece 7 nodece z3.ce103.num_edges_traversed1
=global nodece 7 nodece_path
=global nodece 7 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 7 nodece_cached_counterexample
=counter_example_begin z3.ce103 f678387d93182cc597f269b47e7dcf7
=input.spec-%var-x-1
1 : Lambda226 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4211145472 { 0xfb00fb00 -83821824 -1.765991e119 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4211145473 { 0xfb00fb01 -83821823 -1.766003e119 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda227 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 4020501248 { 0xefa3fb00 -274466048 -1.28109741e96 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 4020501249 { 0xefa3fb01 -274466047 -1.28109753e96 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 1725816726 { 0x66dddf96 +1.73338580e78 } : BV:32
28 : eq(23, 27) : BOOL
29 : 163 { 0xa3 -93 } : BV:8
30 : 1530347496 { 0x5b373fe8 +1.43163776e55 } : BV:32
31 : eq(23, 30) : BOOL
32 : 1 { 0x1 } : BV:8
33 : 4020501251 { 0xefa3fb03 -274466045 -1.28109776e96 } : BV:32
34 : eq(23, 33) : BOOL
35 : 1530347498 { 0x5b373fea +1.43163800e55 } : BV:32
36 : eq(23, 35) : BOOL
37 : 4020501250 { 0xefa3fb02 -274466046 -1.28109765e96 } : BV:32
38 : eq(23, 37) : BOOL
39 : eq(23, 22) : BOOL
40 : 1725816727 { 0x66dddf97 +1.73338592e78 } : BV:32
41 : eq(23, 40) : BOOL
42 : 239 { 0xef -17 } : BV:8
43 : 1725816724 { 0x66dddf94 +1.73338556e78 } : BV:32
44 : eq(23, 43) : BOOL
45 : 251 { 0xfb -5 } : BV:8
46 : ite(44, 26, 45) : BV:8
47 : ite(41, 42, 46) : BV:8
48 : ite(39, 26, 47) : BV:8
49 : ite(38, 26, 48) : BV:8
50 : ite(36, 26, 49) : BV:8
51 : ite(34, 26, 50) : BV:8
52 : ite(31, 32, 51) : BV:8
53 : ite(28, 29, 52) : BV:8
54 : ite(25, 26, 53) : BV:8
55 : 2 { 0x2 +1.23e129 } : BV:32
56 : bvadd(55, 21, 22) : BV:32
57 : eq(56, 24) : BOOL
58 : eq(56, 27) : BOOL
59 : eq(56, 30) : BOOL
60 : eq(56, 33) : BOOL
61 : eq(56, 35) : BOOL
62 : eq(56, 37) : BOOL
63 : eq(56, 22) : BOOL
64 : eq(56, 40) : BOOL
65 : eq(56, 43) : BOOL
66 : ite(65, 26, 45) : BV:8
67 : ite(64, 42, 66) : BV:8
68 : ite(63, 26, 67) : BV:8
69 : ite(62, 26, 68) : BV:8
70 : ite(61, 26, 69) : BV:8
71 : ite(60, 26, 70) : BV:8
72 : ite(59, 32, 71) : BV:8
73 : ite(58, 29, 72) : BV:8
74 : ite(57, 26, 73) : BV:8
75 : 1 { 0x1 +1.11e129 } : BV:32
76 : bvadd(75, 21, 22) : BV:32
77 : eq(76, 24) : BOOL
78 : eq(76, 27) : BOOL
79 : eq(76, 30) : BOOL
80 : eq(76, 33) : BOOL
81 : eq(76, 35) : BOOL
82 : eq(76, 37) : BOOL
83 : eq(76, 22) : BOOL
84 : eq(76, 40) : BOOL
85 : eq(76, 43) : BOOL
86 : ite(85, 26, 45) : BV:8
87 : ite(84, 42, 86) : BV:8
88 : ite(83, 26, 87) : BV:8
89 : ite(82, 26, 88) : BV:8
90 : ite(81, 26, 89) : BV:8
91 : ite(80, 26, 90) : BV:8
92 : ite(79, 32, 91) : BV:8
93 : ite(78, 29, 92) : BV:8
94 : ite(77, 26, 93) : BV:8
95 : bvadd(21, 22) : BV:32
96 : eq(95, 24) : BOOL
97 : eq(95, 27) : BOOL
98 : eq(95, 30) : BOOL
99 : eq(95, 33) : BOOL
100 : eq(95, 35) : BOOL
101 : eq(95, 37) : BOOL
102 : eq(95, 22) : BOOL
103 : eq(95, 40) : BOOL
104 : eq(95, 43) : BOOL
105 : ite(104, 26, 45) : BV:8
106 : ite(103, 42, 105) : BV:8
107 : ite(102, 26, 106) : BV:8
108 : ite(101, 26, 107) : BV:8
109 : ite(100, 26, 108) : BV:8
110 : ite(99, 26, 109) : BV:8
111 : ite(98, 32, 110) : BV:8
112 : ite(97, 29, 111) : BV:8
113 : ite(96, 26, 112) : BV:8
114 : bvconcat(54, 74, 94, 113) : BV:32
115 : ite(18, 2, 114) : BV:32
116 : lambda(17, 115) : FUNCTION[BV:32 -> BV:32]
117 : map(16, 116) : MAP[BV:32 -> BV:32]
118 : sym_const(117) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry
1 : Lambda226 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4211145472 { 0xfb00fb00 -83821824 -1.765991e119 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4211145473 { 0xfb00fb01 -83821823 -1.766003e119 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda227 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 4020501248 { 0xefa3fb00 -274466048 -1.28109741e96 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 4020501249 { 0xefa3fb01 -274466047 -1.28109753e96 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 1725816726 { 0x66dddf96 +1.73338580e78 } : BV:32
28 : eq(23, 27) : BOOL
29 : 163 { 0xa3 -93 } : BV:8
30 : 1530347496 { 0x5b373fe8 +1.43163776e55 } : BV:32
31 : eq(23, 30) : BOOL
32 : 1 { 0x1 } : BV:8
33 : 4020501251 { 0xefa3fb03 -274466045 -1.28109776e96 } : BV:32
34 : eq(23, 33) : BOOL
35 : 1530347498 { 0x5b373fea +1.43163800e55 } : BV:32
36 : eq(23, 35) : BOOL
37 : 4020501250 { 0xefa3fb02 -274466046 -1.28109765e96 } : BV:32
38 : eq(23, 37) : BOOL
39 : eq(23, 22) : BOOL
40 : 1725816727 { 0x66dddf97 +1.73338592e78 } : BV:32
41 : eq(23, 40) : BOOL
42 : 239 { 0xef -17 } : BV:8
43 : 1725816724 { 0x66dddf94 +1.73338556e78 } : BV:32
44 : eq(23, 43) : BOOL
45 : 251 { 0xfb -5 } : BV:8
46 : ite(44, 26, 45) : BV:8
47 : ite(41, 42, 46) : BV:8
48 : ite(39, 26, 47) : BV:8
49 : ite(38, 26, 48) : BV:8
50 : ite(36, 26, 49) : BV:8
51 : ite(34, 26, 50) : BV:8
52 : ite(31, 32, 51) : BV:8
53 : ite(28, 29, 52) : BV:8
54 : ite(25, 26, 53) : BV:8
55 : 2 { 0x2 +1.23e129 } : BV:32
56 : bvadd(55, 21, 22) : BV:32
57 : eq(56, 24) : BOOL
58 : eq(56, 27) : BOOL
59 : eq(56, 30) : BOOL
60 : eq(56, 33) : BOOL
61 : eq(56, 35) : BOOL
62 : eq(56, 37) : BOOL
63 : eq(56, 22) : BOOL
64 : eq(56, 40) : BOOL
65 : eq(56, 43) : BOOL
66 : ite(65, 26, 45) : BV:8
67 : ite(64, 42, 66) : BV:8
68 : ite(63, 26, 67) : BV:8
69 : ite(62, 26, 68) : BV:8
70 : ite(61, 26, 69) : BV:8
71 : ite(60, 26, 70) : BV:8
72 : ite(59, 32, 71) : BV:8
73 : ite(58, 29, 72) : BV:8
74 : ite(57, 26, 73) : BV:8
75 : 1 { 0x1 +1.11e129 } : BV:32
76 : bvadd(75, 21, 22) : BV:32
77 : eq(76, 24) : BOOL
78 : eq(76, 27) : BOOL
79 : eq(76, 30) : BOOL
80 : eq(76, 33) : BOOL
81 : eq(76, 35) : BOOL
82 : eq(76, 37) : BOOL
83 : eq(76, 22) : BOOL
84 : eq(76, 40) : BOOL
85 : eq(76, 43) : BOOL
86 : ite(85, 26, 45) : BV:8
87 : ite(84, 42, 86) : BV:8
88 : ite(83, 26, 87) : BV:8
89 : ite(82, 26, 88) : BV:8
90 : ite(81, 26, 89) : BV:8
91 : ite(80, 26, 90) : BV:8
92 : ite(79, 32, 91) : BV:8
93 : ite(78, 29, 92) : BV:8
94 : ite(77, 26, 93) : BV:8
95 : bvadd(21, 22) : BV:32
96 : eq(95, 24) : BOOL
97 : eq(95, 27) : BOOL
98 : eq(95, 30) : BOOL
99 : eq(95, 33) : BOOL
100 : eq(95, 35) : BOOL
101 : eq(95, 37) : BOOL
102 : eq(95, 22) : BOOL
103 : eq(95, 40) : BOOL
104 : eq(95, 43) : BOOL
105 : ite(104, 26, 45) : BV:8
106 : ite(103, 42, 105) : BV:8
107 : ite(102, 26, 106) : BV:8
108 : ite(101, 26, 107) : BV:8
109 : ite(100, 26, 108) : BV:8
110 : ite(99, 26, 109) : BV:8
111 : ite(98, 32, 110) : BV:8
112 : ite(97, 29, 111) : BV:8
113 : ite(96, 26, 112) : BV:8
114 : bvconcat(54, 74, 94, 113) : BV:32
115 : ite(18, 2, 114) : BV:32
116 : lambda(17, 115) : FUNCTION[BV:32 -> BV:32]
117 : map(16, 116) : MAP[BV:32 -> BV:32]
118 : sym_const(117) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%x
1 : 4020501248 { 0xefa3fb00 -274466048 -1.28109741e96 } : BV:32
=input.dst.llvm-%n
1 : 4211145473 { 0xfb00fb01 -83821823 -1.766003e119 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1530347495 ] -> 251, [ 1530347496; 1530347496 ] -> 1, [ 1530347497; 1530347497 ] -> 251, [ 1530347498; 1530347498 ] -> 0, [ 1530347499; 1725816723 ] -> 251, [ 1725816724; 1725816724 ] -> 0, [ 1725816725; 1725816725 ] -> 251, [ 1725816726; 1725816726 ] -> 163, [ 1725816727; 1725816727 ] -> 239, [ 1725816728; 4020501247 ] -> 251, [ 4020501248; 4020501251 ] -> 0, [ 4020501252; 4294967295 ] -> 251, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1530347495 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1530347496; 1530347499 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1530347500; 1725816723 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1725816724; 1725816727 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1725816728; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1530347496 { 0x5b373fe8 +1.43163776e55 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1725816724 { 0x66dddf94 +1.73338556e78 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1935754076 { 0x7361435c +1.75986814e103 } : COUNT
=input.spec-%var-i-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1935754076 { 0x7361435c +1.75986814e103 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1530347496 { 0x5b373fe8 +1.43163776e55 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1530347499 { 0x5b373feb +1.43163812e55 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1725816724 { 0x66dddf94 +1.73338556e78 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1725816727 { 0x66dddf97 +1.73338592e78 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 4211145472 ] -> true, [ 4211145473; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : Lambda211 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 4020501248 { 0xefa3fb00 -274466048 -1.28109741e96 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 4020501249 { 0xefa3fb01 -274466047 -1.28109753e96 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 1725816726 { 0x66dddf96 +1.73338580e78 } : BV:32
13 : eq(8, 12) : BOOL
14 : 163 { 0xa3 -93 } : BV:8
15 : 1530347496 { 0x5b373fe8 +1.43163776e55 } : BV:32
16 : eq(8, 15) : BOOL
17 : 1 { 0x1 } : BV:8
18 : 4020501251 { 0xefa3fb03 -274466045 -1.28109776e96 } : BV:32
19 : eq(8, 18) : BOOL
20 : 1530347498 { 0x5b373fea +1.43163800e55 } : BV:32
21 : eq(8, 20) : BOOL
22 : 4020501250 { 0xefa3fb02 -274466046 -1.28109765e96 } : BV:32
23 : eq(8, 22) : BOOL
24 : eq(8, 7) : BOOL
25 : 1725816727 { 0x66dddf97 +1.73338592e78 } : BV:32
26 : eq(8, 25) : BOOL
27 : 239 { 0xef -17 } : BV:8
28 : 1725816724 { 0x66dddf94 +1.73338556e78 } : BV:32
29 : eq(8, 28) : BOOL
30 : 251 { 0xfb -5 } : BV:8
31 : ite(29, 11, 30) : BV:8
32 : ite(26, 27, 31) : BV:8
33 : ite(24, 11, 32) : BV:8
34 : ite(23, 11, 33) : BV:8
35 : ite(21, 11, 34) : BV:8
36 : ite(19, 11, 35) : BV:8
37 : ite(16, 17, 36) : BV:8
38 : ite(13, 14, 37) : BV:8
39 : ite(10, 11, 38) : BV:8
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvadd(40, 6, 7) : BV:32
42 : eq(41, 9) : BOOL
43 : eq(41, 12) : BOOL
44 : eq(41, 15) : BOOL
45 : eq(41, 18) : BOOL
46 : eq(41, 20) : BOOL
47 : eq(41, 22) : BOOL
48 : eq(41, 7) : BOOL
49 : eq(41, 25) : BOOL
50 : eq(41, 28) : BOOL
51 : ite(50, 11, 30) : BV:8
52 : ite(49, 27, 51) : BV:8
53 : ite(48, 11, 52) : BV:8
54 : ite(47, 11, 53) : BV:8
55 : ite(46, 11, 54) : BV:8
56 : ite(45, 11, 55) : BV:8
57 : ite(44, 17, 56) : BV:8
58 : ite(43, 14, 57) : BV:8
59 : ite(42, 11, 58) : BV:8
60 : 1 { 0x1 +1.11e129 } : BV:32
61 : bvadd(60, 6, 7) : BV:32
62 : eq(61, 9) : BOOL
63 : eq(61, 12) : BOOL
64 : eq(61, 15) : BOOL
65 : eq(61, 18) : BOOL
66 : eq(61, 20) : BOOL
67 : eq(61, 22) : BOOL
68 : eq(61, 7) : BOOL
69 : eq(61, 25) : BOOL
70 : eq(61, 28) : BOOL
71 : ite(70, 11, 30) : BV:8
72 : ite(69, 27, 71) : BV:8
73 : ite(68, 11, 72) : BV:8
74 : ite(67, 11, 73) : BV:8
75 : ite(66, 11, 74) : BV:8
76 : ite(65, 11, 75) : BV:8
77 : ite(64, 17, 76) : BV:8
78 : ite(63, 14, 77) : BV:8
79 : ite(62, 11, 78) : BV:8
80 : bvadd(6, 7) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 15) : BOOL
84 : eq(80, 18) : BOOL
85 : eq(80, 20) : BOOL
86 : eq(80, 22) : BOOL
87 : eq(80, 7) : BOOL
88 : eq(80, 25) : BOOL
89 : eq(80, 28) : BOOL
90 : ite(89, 11, 30) : BV:8
91 : ite(88, 27, 90) : BV:8
92 : ite(87, 11, 91) : BV:8
93 : ite(86, 11, 92) : BV:8
94 : ite(85, 11, 93) : BV:8
95 : ite(84, 11, 94) : BV:8
96 : ite(83, 17, 95) : BV:8
97 : ite(82, 14, 96) : BV:8
98 : ite(81, 11, 97) : BV:8
99 : bvconcat(39, 59, 79, 98) : BV:32
100 : ite(3, 2, 99) : BV:32
101 : lambda(1, 100) : FUNCTION[BV:32 -> BV:32]
102 : sym_const(101) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry.0.1
1 : ([ 0; 4211145472 ] -> true, [ 4211145473; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L2%7%bbentry.1.1
1 : Lambda213 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 4020501248 { 0xefa3fb00 -274466048 -1.28109741e96 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 4020501249 { 0xefa3fb01 -274466047 -1.28109753e96 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 1725816726 { 0x66dddf96 +1.73338580e78 } : BV:32
13 : eq(8, 12) : BOOL
14 : 163 { 0xa3 -93 } : BV:8
15 : 1530347496 { 0x5b373fe8 +1.43163776e55 } : BV:32
16 : eq(8, 15) : BOOL
17 : 1 { 0x1 } : BV:8
18 : 4020501251 { 0xefa3fb03 -274466045 -1.28109776e96 } : BV:32
19 : eq(8, 18) : BOOL
20 : 1530347498 { 0x5b373fea +1.43163800e55 } : BV:32
21 : eq(8, 20) : BOOL
22 : 4020501250 { 0xefa3fb02 -274466046 -1.28109765e96 } : BV:32
23 : eq(8, 22) : BOOL
24 : eq(8, 7) : BOOL
25 : 1725816727 { 0x66dddf97 +1.73338592e78 } : BV:32
26 : eq(8, 25) : BOOL
27 : 239 { 0xef -17 } : BV:8
28 : 1725816724 { 0x66dddf94 +1.73338556e78 } : BV:32
29 : eq(8, 28) : BOOL
30 : 251 { 0xfb -5 } : BV:8
31 : ite(29, 11, 30) : BV:8
32 : ite(26, 27, 31) : BV:8
33 : ite(24, 11, 32) : BV:8
34 : ite(23, 11, 33) : BV:8
35 : ite(21, 11, 34) : BV:8
36 : ite(19, 11, 35) : BV:8
37 : ite(16, 17, 36) : BV:8
38 : ite(13, 14, 37) : BV:8
39 : ite(10, 11, 38) : BV:8
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvadd(40, 6, 7) : BV:32
42 : eq(41, 9) : BOOL
43 : eq(41, 12) : BOOL
44 : eq(41, 15) : BOOL
45 : eq(41, 18) : BOOL
46 : eq(41, 20) : BOOL
47 : eq(41, 22) : BOOL
48 : eq(41, 7) : BOOL
49 : eq(41, 25) : BOOL
50 : eq(41, 28) : BOOL
51 : ite(50, 11, 30) : BV:8
52 : ite(49, 27, 51) : BV:8
53 : ite(48, 11, 52) : BV:8
54 : ite(47, 11, 53) : BV:8
55 : ite(46, 11, 54) : BV:8
56 : ite(45, 11, 55) : BV:8
57 : ite(44, 17, 56) : BV:8
58 : ite(43, 14, 57) : BV:8
59 : ite(42, 11, 58) : BV:8
60 : 1 { 0x1 +1.11e129 } : BV:32
61 : bvadd(60, 6, 7) : BV:32
62 : eq(61, 9) : BOOL
63 : eq(61, 12) : BOOL
64 : eq(61, 15) : BOOL
65 : eq(61, 18) : BOOL
66 : eq(61, 20) : BOOL
67 : eq(61, 22) : BOOL
68 : eq(61, 7) : BOOL
69 : eq(61, 25) : BOOL
70 : eq(61, 28) : BOOL
71 : ite(70, 11, 30) : BV:8
72 : ite(69, 27, 71) : BV:8
73 : ite(68, 11, 72) : BV:8
74 : ite(67, 11, 73) : BV:8
75 : ite(66, 11, 74) : BV:8
76 : ite(65, 11, 75) : BV:8
77 : ite(64, 17, 76) : BV:8
78 : ite(63, 14, 77) : BV:8
79 : ite(62, 11, 78) : BV:8
80 : bvadd(6, 7) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 15) : BOOL
84 : eq(80, 18) : BOOL
85 : eq(80, 20) : BOOL
86 : eq(80, 22) : BOOL
87 : eq(80, 7) : BOOL
88 : eq(80, 25) : BOOL
89 : eq(80, 28) : BOOL
90 : ite(89, 11, 30) : BV:8
91 : ite(88, 27, 90) : BV:8
92 : ite(87, 11, 91) : BV:8
93 : ite(86, 11, 92) : BV:8
94 : ite(85, 11, 93) : BV:8
95 : ite(84, 11, 94) : BV:8
96 : ite(83, 17, 95) : BV:8
97 : ite(82, 14, 96) : BV:8
98 : ite(81, 11, 97) : BV:8
99 : bvconcat(39, 59, 79, 98) : BV:32
100 : ite(3, 2, 99) : BV:32
101 : ite(3, 2, 100) : BV:32
102 : lambda(1, 101) : FUNCTION[BV:32 -> BV:32]
103 : sym_const(102) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
3277587493
=counter_example_end
=global nodece 7 num_edges_traversed 1
=global nodece 7 nodece_visted_pcs: 
L2%7%bbentry_Lfor.cond%1%bbentry
=global nodece 8
=global nodece 8 nodece z3.ce123.num_edges_traversed1
=global nodece 8 nodece_path
=global nodece 8 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 8 nodece_cached_counterexample
=counter_example_begin z3.ce123 ceb9bbac8fbbacbfc9d9d79ebd7b75b
=input.spec-%var-x-1
1 : Lambda272 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda273 : BV:32
17 : eq(16, 2) : BOOL
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 16) : BV:32
21 : 4292869632 { 0xffdffe00 -2097664 -1.74993896e128 } : BV:32
22 : bvadd(18, 20, 21) : BV:32
23 : 2873711457 { 0xab495b61 -1421255839 -1.57310116e215 } : BV:32
24 : eq(22, 23) : BOOL
25 : 255 { 0xff -1 } : BV:8
26 : 2873711456 { 0xab495b60 -1421255840 -1.57310104e215 } : BV:32
27 : eq(22, 26) : BOOL
28 : 4292869635 { 0xffdffe03 -2097661 -1.74993932e128 } : BV:32
29 : eq(22, 28) : BOOL
30 : 0 { 0x0 } : BV:8
31 : 2873711459 { 0xab495b63 -1421255837 -1.57310140e215 } : BV:32
32 : eq(22, 31) : BOOL
33 : 4292869633 { 0xffdffe01 -2097663 -1.74993908e128 } : BV:32
34 : eq(22, 33) : BOOL
35 : 2873711458 { 0xab495b62 -1421255838 -1.57310128e215 } : BV:32
36 : eq(22, 35) : BOOL
37 : 2451339973 { 0x921c7ac5 -1843627323 -1.22249662e165 } : BV:32
38 : eq(22, 37) : BOOL
39 : 254 { 0xfe -2 } : BV:8
40 : 4292869634 { 0xffdffe02 -2097662 -1.74993920e128 } : BV:32
41 : eq(22, 40) : BOOL
42 : eq(22, 21) : BOOL
43 : 2451339975 { 0x921c7ac7 -1843627321 -1.22249686e165 } : BV:32
44 : eq(22, 43) : BOOL
45 : 2451339972 { 0x921c7ac4 -1843627324 -1.22249650e165 } : BV:32
46 : eq(22, 45) : BOOL
47 : 223 { 0xdf -33 } : BV:8
48 : ite(46, 30, 47) : BV:8
49 : ite(44, 25, 48) : BV:8
50 : ite(42, 30, 49) : BV:8
51 : ite(41, 30, 50) : BV:8
52 : ite(38, 39, 51) : BV:8
53 : ite(36, 25, 52) : BV:8
54 : ite(34, 30, 53) : BV:8
55 : ite(32, 25, 54) : BV:8
56 : ite(29, 30, 55) : BV:8
57 : ite(27, 25, 56) : BV:8
58 : ite(24, 25, 57) : BV:8
59 : 2 { 0x2 +1.23e129 } : BV:32
60 : bvadd(59, 20, 21) : BV:32
61 : eq(60, 23) : BOOL
62 : eq(60, 26) : BOOL
63 : eq(60, 28) : BOOL
64 : eq(60, 31) : BOOL
65 : eq(60, 33) : BOOL
66 : eq(60, 35) : BOOL
67 : eq(60, 37) : BOOL
68 : eq(60, 40) : BOOL
69 : eq(60, 21) : BOOL
70 : eq(60, 43) : BOOL
71 : eq(60, 45) : BOOL
72 : ite(71, 30, 47) : BV:8
73 : ite(70, 25, 72) : BV:8
74 : ite(69, 30, 73) : BV:8
75 : ite(68, 30, 74) : BV:8
76 : ite(67, 39, 75) : BV:8
77 : ite(66, 25, 76) : BV:8
78 : ite(65, 30, 77) : BV:8
79 : ite(64, 25, 78) : BV:8
80 : ite(63, 30, 79) : BV:8
81 : ite(62, 25, 80) : BV:8
82 : ite(61, 25, 81) : BV:8
83 : 1 { 0x1 +1.11e129 } : BV:32
84 : bvadd(83, 20, 21) : BV:32
85 : eq(84, 23) : BOOL
86 : eq(84, 26) : BOOL
87 : eq(84, 28) : BOOL
88 : eq(84, 31) : BOOL
89 : eq(84, 33) : BOOL
90 : eq(84, 35) : BOOL
91 : eq(84, 37) : BOOL
92 : eq(84, 40) : BOOL
93 : eq(84, 21) : BOOL
94 : eq(84, 43) : BOOL
95 : eq(84, 45) : BOOL
96 : ite(95, 30, 47) : BV:8
97 : ite(94, 25, 96) : BV:8
98 : ite(93, 30, 97) : BV:8
99 : ite(92, 30, 98) : BV:8
100 : ite(91, 39, 99) : BV:8
101 : ite(90, 25, 100) : BV:8
102 : ite(89, 30, 101) : BV:8
103 : ite(88, 25, 102) : BV:8
104 : ite(87, 30, 103) : BV:8
105 : ite(86, 25, 104) : BV:8
106 : ite(85, 25, 105) : BV:8
107 : bvadd(20, 21) : BV:32
108 : eq(107, 23) : BOOL
109 : eq(107, 26) : BOOL
110 : eq(107, 28) : BOOL
111 : eq(107, 31) : BOOL
112 : eq(107, 33) : BOOL
113 : eq(107, 35) : BOOL
114 : eq(107, 37) : BOOL
115 : eq(107, 40) : BOOL
116 : eq(107, 21) : BOOL
117 : eq(107, 43) : BOOL
118 : eq(107, 45) : BOOL
119 : ite(118, 30, 47) : BV:8
120 : ite(117, 25, 119) : BV:8
121 : ite(116, 30, 120) : BV:8
122 : ite(115, 30, 121) : BV:8
123 : ite(114, 39, 122) : BV:8
124 : ite(113, 25, 123) : BV:8
125 : ite(112, 30, 124) : BV:8
126 : ite(111, 25, 125) : BV:8
127 : ite(110, 30, 126) : BV:8
128 : ite(109, 25, 127) : BV:8
129 : ite(108, 25, 128) : BV:8
130 : bvconcat(58, 82, 106, 129) : BV:32
131 : ite(17, 2, 130) : BV:32
132 : lambda(16, 131) : FUNCTION[BV:32 -> BV:32]
133 : map(15, 132) : MAP[BV:32 -> BV:32]
134 : sym_const(133) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry
1 : Lambda272 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda273 : BV:32
17 : eq(16, 2) : BOOL
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 16) : BV:32
21 : 4292869632 { 0xffdffe00 -2097664 -1.74993896e128 } : BV:32
22 : bvadd(18, 20, 21) : BV:32
23 : 2873711457 { 0xab495b61 -1421255839 -1.57310116e215 } : BV:32
24 : eq(22, 23) : BOOL
25 : 255 { 0xff -1 } : BV:8
26 : 2873711456 { 0xab495b60 -1421255840 -1.57310104e215 } : BV:32
27 : eq(22, 26) : BOOL
28 : 4292869635 { 0xffdffe03 -2097661 -1.74993932e128 } : BV:32
29 : eq(22, 28) : BOOL
30 : 0 { 0x0 } : BV:8
31 : 2873711459 { 0xab495b63 -1421255837 -1.57310140e215 } : BV:32
32 : eq(22, 31) : BOOL
33 : 4292869633 { 0xffdffe01 -2097663 -1.74993908e128 } : BV:32
34 : eq(22, 33) : BOOL
35 : 2873711458 { 0xab495b62 -1421255838 -1.57310128e215 } : BV:32
36 : eq(22, 35) : BOOL
37 : 2451339973 { 0x921c7ac5 -1843627323 -1.22249662e165 } : BV:32
38 : eq(22, 37) : BOOL
39 : 254 { 0xfe -2 } : BV:8
40 : 4292869634 { 0xffdffe02 -2097662 -1.74993920e128 } : BV:32
41 : eq(22, 40) : BOOL
42 : eq(22, 21) : BOOL
43 : 2451339975 { 0x921c7ac7 -1843627321 -1.22249686e165 } : BV:32
44 : eq(22, 43) : BOOL
45 : 2451339972 { 0x921c7ac4 -1843627324 -1.22249650e165 } : BV:32
46 : eq(22, 45) : BOOL
47 : 223 { 0xdf -33 } : BV:8
48 : ite(46, 30, 47) : BV:8
49 : ite(44, 25, 48) : BV:8
50 : ite(42, 30, 49) : BV:8
51 : ite(41, 30, 50) : BV:8
52 : ite(38, 39, 51) : BV:8
53 : ite(36, 25, 52) : BV:8
54 : ite(34, 30, 53) : BV:8
55 : ite(32, 25, 54) : BV:8
56 : ite(29, 30, 55) : BV:8
57 : ite(27, 25, 56) : BV:8
58 : ite(24, 25, 57) : BV:8
59 : 2 { 0x2 +1.23e129 } : BV:32
60 : bvadd(59, 20, 21) : BV:32
61 : eq(60, 23) : BOOL
62 : eq(60, 26) : BOOL
63 : eq(60, 28) : BOOL
64 : eq(60, 31) : BOOL
65 : eq(60, 33) : BOOL
66 : eq(60, 35) : BOOL
67 : eq(60, 37) : BOOL
68 : eq(60, 40) : BOOL
69 : eq(60, 21) : BOOL
70 : eq(60, 43) : BOOL
71 : eq(60, 45) : BOOL
72 : ite(71, 30, 47) : BV:8
73 : ite(70, 25, 72) : BV:8
74 : ite(69, 30, 73) : BV:8
75 : ite(68, 30, 74) : BV:8
76 : ite(67, 39, 75) : BV:8
77 : ite(66, 25, 76) : BV:8
78 : ite(65, 30, 77) : BV:8
79 : ite(64, 25, 78) : BV:8
80 : ite(63, 30, 79) : BV:8
81 : ite(62, 25, 80) : BV:8
82 : ite(61, 25, 81) : BV:8
83 : 1 { 0x1 +1.11e129 } : BV:32
84 : bvadd(83, 20, 21) : BV:32
85 : eq(84, 23) : BOOL
86 : eq(84, 26) : BOOL
87 : eq(84, 28) : BOOL
88 : eq(84, 31) : BOOL
89 : eq(84, 33) : BOOL
90 : eq(84, 35) : BOOL
91 : eq(84, 37) : BOOL
92 : eq(84, 40) : BOOL
93 : eq(84, 21) : BOOL
94 : eq(84, 43) : BOOL
95 : eq(84, 45) : BOOL
96 : ite(95, 30, 47) : BV:8
97 : ite(94, 25, 96) : BV:8
98 : ite(93, 30, 97) : BV:8
99 : ite(92, 30, 98) : BV:8
100 : ite(91, 39, 99) : BV:8
101 : ite(90, 25, 100) : BV:8
102 : ite(89, 30, 101) : BV:8
103 : ite(88, 25, 102) : BV:8
104 : ite(87, 30, 103) : BV:8
105 : ite(86, 25, 104) : BV:8
106 : ite(85, 25, 105) : BV:8
107 : bvadd(20, 21) : BV:32
108 : eq(107, 23) : BOOL
109 : eq(107, 26) : BOOL
110 : eq(107, 28) : BOOL
111 : eq(107, 31) : BOOL
112 : eq(107, 33) : BOOL
113 : eq(107, 35) : BOOL
114 : eq(107, 37) : BOOL
115 : eq(107, 40) : BOOL
116 : eq(107, 21) : BOOL
117 : eq(107, 43) : BOOL
118 : eq(107, 45) : BOOL
119 : ite(118, 30, 47) : BV:8
120 : ite(117, 25, 119) : BV:8
121 : ite(116, 30, 120) : BV:8
122 : ite(115, 30, 121) : BV:8
123 : ite(114, 39, 122) : BV:8
124 : ite(113, 25, 123) : BV:8
125 : ite(112, 30, 124) : BV:8
126 : ite(111, 25, 125) : BV:8
127 : ite(110, 30, 126) : BV:8
128 : ite(109, 25, 127) : BV:8
129 : ite(108, 25, 128) : BV:8
130 : bvconcat(58, 82, 106, 129) : BV:32
131 : ite(17, 2, 130) : BV:32
132 : lambda(16, 131) : FUNCTION[BV:32 -> BV:32]
133 : map(15, 132) : MAP[BV:32 -> BV:32]
134 : sym_const(133) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%x
1 : 4292869632 { 0xffdffe00 -2097664 -1.74993896e128 } : BV:32
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 2451339971 ] -> 223, [ 2451339972; 2451339972 ] -> 0, [ 2451339973; 2451339973 ] -> 254, [ 2451339974; 2451339974 ] -> 223, [ 2451339975; 2451339975 ] -> 255, [ 2451339976; 2873711455 ] -> 223, [ 2873711456; 2873711459 ] -> 255, [ 2873711460; 4292869631 ] -> 223, [ 4292869632; 4292869635 ] -> 0, [ 4292869636; 4294967295 ] -> 223, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2451339971 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2451339972; 2451339975 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2451339976; 2873711455 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2873711456; 2873711459 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2873711460; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2873711456 { 0xab495b60 -1421255840 -1.57310104e215 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2451339972 { 0x921c7ac4 -1843627324 -1.22249650e165 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1115311958 { 0x427a4f56 +1.95554614e5 } : COUNT
=input.spec-%var-i-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1115311958 { 0x427a4f56 +1.95554614e5 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2873711456 { 0xab495b60 -1421255840 -1.57310104e215 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2873711459 { 0xab495b63 -1421255837 -1.57310140e215 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2451339972 { 0x921c7ac4 -1843627324 -1.22249650e165 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2451339975 { 0x921c7ac7 -1843627321 -1.22249686e165 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : Lambda257 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 4292869632 { 0xffdffe00 -2097664 -1.74993896e128 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 2873711457 { 0xab495b61 -1421255839 -1.57310116e215 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 2873711456 { 0xab495b60 -1421255840 -1.57310104e215 } : BV:32
13 : eq(8, 12) : BOOL
14 : 4292869635 { 0xffdffe03 -2097661 -1.74993932e128 } : BV:32
15 : eq(8, 14) : BOOL
16 : 0 { 0x0 } : BV:8
17 : 2873711459 { 0xab495b63 -1421255837 -1.57310140e215 } : BV:32
18 : eq(8, 17) : BOOL
19 : 4292869633 { 0xffdffe01 -2097663 -1.74993908e128 } : BV:32
20 : eq(8, 19) : BOOL
21 : 2873711458 { 0xab495b62 -1421255838 -1.57310128e215 } : BV:32
22 : eq(8, 21) : BOOL
23 : 2451339973 { 0x921c7ac5 -1843627323 -1.22249662e165 } : BV:32
24 : eq(8, 23) : BOOL
25 : 254 { 0xfe -2 } : BV:8
26 : 4292869634 { 0xffdffe02 -2097662 -1.74993920e128 } : BV:32
27 : eq(8, 26) : BOOL
28 : eq(8, 7) : BOOL
29 : 2451339975 { 0x921c7ac7 -1843627321 -1.22249686e165 } : BV:32
30 : eq(8, 29) : BOOL
31 : 2451339972 { 0x921c7ac4 -1843627324 -1.22249650e165 } : BV:32
32 : eq(8, 31) : BOOL
33 : 223 { 0xdf -33 } : BV:8
34 : ite(32, 16, 33) : BV:8
35 : ite(30, 11, 34) : BV:8
36 : ite(28, 16, 35) : BV:8
37 : ite(27, 16, 36) : BV:8
38 : ite(24, 25, 37) : BV:8
39 : ite(22, 11, 38) : BV:8
40 : ite(20, 16, 39) : BV:8
41 : ite(18, 11, 40) : BV:8
42 : ite(15, 16, 41) : BV:8
43 : ite(13, 11, 42) : BV:8
44 : ite(10, 11, 43) : BV:8
45 : 2 { 0x2 +1.23e129 } : BV:32
46 : bvadd(45, 6, 7) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : eq(46, 14) : BOOL
50 : eq(46, 17) : BOOL
51 : eq(46, 19) : BOOL
52 : eq(46, 21) : BOOL
53 : eq(46, 23) : BOOL
54 : eq(46, 26) : BOOL
55 : eq(46, 7) : BOOL
56 : eq(46, 29) : BOOL
57 : eq(46, 31) : BOOL
58 : ite(57, 16, 33) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 16, 59) : BV:8
61 : ite(54, 16, 60) : BV:8
62 : ite(53, 25, 61) : BV:8
63 : ite(52, 11, 62) : BV:8
64 : ite(51, 16, 63) : BV:8
65 : ite(50, 11, 64) : BV:8
66 : ite(49, 16, 65) : BV:8
67 : ite(48, 11, 66) : BV:8
68 : ite(47, 11, 67) : BV:8
69 : 1 { 0x1 +1.11e129 } : BV:32
70 : bvadd(69, 6, 7) : BV:32
71 : eq(70, 9) : BOOL
72 : eq(70, 12) : BOOL
73 : eq(70, 14) : BOOL
74 : eq(70, 17) : BOOL
75 : eq(70, 19) : BOOL
76 : eq(70, 21) : BOOL
77 : eq(70, 23) : BOOL
78 : eq(70, 26) : BOOL
79 : eq(70, 7) : BOOL
80 : eq(70, 29) : BOOL
81 : eq(70, 31) : BOOL
82 : ite(81, 16, 33) : BV:8
83 : ite(80, 11, 82) : BV:8
84 : ite(79, 16, 83) : BV:8
85 : ite(78, 16, 84) : BV:8
86 : ite(77, 25, 85) : BV:8
87 : ite(76, 11, 86) : BV:8
88 : ite(75, 16, 87) : BV:8
89 : ite(74, 11, 88) : BV:8
90 : ite(73, 16, 89) : BV:8
91 : ite(72, 11, 90) : BV:8
92 : ite(71, 11, 91) : BV:8
93 : bvadd(6, 7) : BV:32
94 : eq(93, 9) : BOOL
95 : eq(93, 12) : BOOL
96 : eq(93, 14) : BOOL
97 : eq(93, 17) : BOOL
98 : eq(93, 19) : BOOL
99 : eq(93, 21) : BOOL
100 : eq(93, 23) : BOOL
101 : eq(93, 26) : BOOL
102 : eq(93, 7) : BOOL
103 : eq(93, 29) : BOOL
104 : eq(93, 31) : BOOL
105 : ite(104, 16, 33) : BV:8
106 : ite(103, 11, 105) : BV:8
107 : ite(102, 16, 106) : BV:8
108 : ite(101, 16, 107) : BV:8
109 : ite(100, 25, 108) : BV:8
110 : ite(99, 11, 109) : BV:8
111 : ite(98, 16, 110) : BV:8
112 : ite(97, 11, 111) : BV:8
113 : ite(96, 16, 112) : BV:8
114 : ite(95, 11, 113) : BV:8
115 : ite(94, 11, 114) : BV:8
116 : bvconcat(44, 68, 92, 115) : BV:32
117 : ite(3, 2, 116) : BV:32
118 : lambda(1, 117) : FUNCTION[BV:32 -> BV:32]
119 : sym_const(118) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L2%7%bbentry.1.1
1 : Lambda259 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 4292869632 { 0xffdffe00 -2097664 -1.74993896e128 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 2873711457 { 0xab495b61 -1421255839 -1.57310116e215 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 2873711456 { 0xab495b60 -1421255840 -1.57310104e215 } : BV:32
13 : eq(8, 12) : BOOL
14 : 4292869635 { 0xffdffe03 -2097661 -1.74993932e128 } : BV:32
15 : eq(8, 14) : BOOL
16 : 0 { 0x0 } : BV:8
17 : 2873711459 { 0xab495b63 -1421255837 -1.57310140e215 } : BV:32
18 : eq(8, 17) : BOOL
19 : 4292869633 { 0xffdffe01 -2097663 -1.74993908e128 } : BV:32
20 : eq(8, 19) : BOOL
21 : 2873711458 { 0xab495b62 -1421255838 -1.57310128e215 } : BV:32
22 : eq(8, 21) : BOOL
23 : 2451339973 { 0x921c7ac5 -1843627323 -1.22249662e165 } : BV:32
24 : eq(8, 23) : BOOL
25 : 254 { 0xfe -2 } : BV:8
26 : 4292869634 { 0xffdffe02 -2097662 -1.74993920e128 } : BV:32
27 : eq(8, 26) : BOOL
28 : eq(8, 7) : BOOL
29 : 2451339975 { 0x921c7ac7 -1843627321 -1.22249686e165 } : BV:32
30 : eq(8, 29) : BOOL
31 : 2451339972 { 0x921c7ac4 -1843627324 -1.22249650e165 } : BV:32
32 : eq(8, 31) : BOOL
33 : 223 { 0xdf -33 } : BV:8
34 : ite(32, 16, 33) : BV:8
35 : ite(30, 11, 34) : BV:8
36 : ite(28, 16, 35) : BV:8
37 : ite(27, 16, 36) : BV:8
38 : ite(24, 25, 37) : BV:8
39 : ite(22, 11, 38) : BV:8
40 : ite(20, 16, 39) : BV:8
41 : ite(18, 11, 40) : BV:8
42 : ite(15, 16, 41) : BV:8
43 : ite(13, 11, 42) : BV:8
44 : ite(10, 11, 43) : BV:8
45 : 2 { 0x2 +1.23e129 } : BV:32
46 : bvadd(45, 6, 7) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : eq(46, 14) : BOOL
50 : eq(46, 17) : BOOL
51 : eq(46, 19) : BOOL
52 : eq(46, 21) : BOOL
53 : eq(46, 23) : BOOL
54 : eq(46, 26) : BOOL
55 : eq(46, 7) : BOOL
56 : eq(46, 29) : BOOL
57 : eq(46, 31) : BOOL
58 : ite(57, 16, 33) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 16, 59) : BV:8
61 : ite(54, 16, 60) : BV:8
62 : ite(53, 25, 61) : BV:8
63 : ite(52, 11, 62) : BV:8
64 : ite(51, 16, 63) : BV:8
65 : ite(50, 11, 64) : BV:8
66 : ite(49, 16, 65) : BV:8
67 : ite(48, 11, 66) : BV:8
68 : ite(47, 11, 67) : BV:8
69 : 1 { 0x1 +1.11e129 } : BV:32
70 : bvadd(69, 6, 7) : BV:32
71 : eq(70, 9) : BOOL
72 : eq(70, 12) : BOOL
73 : eq(70, 14) : BOOL
74 : eq(70, 17) : BOOL
75 : eq(70, 19) : BOOL
76 : eq(70, 21) : BOOL
77 : eq(70, 23) : BOOL
78 : eq(70, 26) : BOOL
79 : eq(70, 7) : BOOL
80 : eq(70, 29) : BOOL
81 : eq(70, 31) : BOOL
82 : ite(81, 16, 33) : BV:8
83 : ite(80, 11, 82) : BV:8
84 : ite(79, 16, 83) : BV:8
85 : ite(78, 16, 84) : BV:8
86 : ite(77, 25, 85) : BV:8
87 : ite(76, 11, 86) : BV:8
88 : ite(75, 16, 87) : BV:8
89 : ite(74, 11, 88) : BV:8
90 : ite(73, 16, 89) : BV:8
91 : ite(72, 11, 90) : BV:8
92 : ite(71, 11, 91) : BV:8
93 : bvadd(6, 7) : BV:32
94 : eq(93, 9) : BOOL
95 : eq(93, 12) : BOOL
96 : eq(93, 14) : BOOL
97 : eq(93, 17) : BOOL
98 : eq(93, 19) : BOOL
99 : eq(93, 21) : BOOL
100 : eq(93, 23) : BOOL
101 : eq(93, 26) : BOOL
102 : eq(93, 7) : BOOL
103 : eq(93, 29) : BOOL
104 : eq(93, 31) : BOOL
105 : ite(104, 16, 33) : BV:8
106 : ite(103, 11, 105) : BV:8
107 : ite(102, 16, 106) : BV:8
108 : ite(101, 16, 107) : BV:8
109 : ite(100, 25, 108) : BV:8
110 : ite(99, 11, 109) : BV:8
111 : ite(98, 16, 110) : BV:8
112 : ite(97, 11, 111) : BV:8
113 : ite(96, 16, 112) : BV:8
114 : ite(95, 11, 113) : BV:8
115 : ite(94, 11, 114) : BV:8
116 : bvconcat(44, 68, 92, 115) : BV:32
117 : ite(3, 2, 116) : BV:32
118 : ite(3, 2, 117) : BV:32
119 : lambda(1, 118) : FUNCTION[BV:32 -> BV:32]
120 : sym_const(119) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
794214668
=counter_example_end
=global nodece 8 num_edges_traversed 1
=global nodece 8 nodece_visted_pcs: 
L2%7%bbentry_Lfor.cond%1%bbentry
=global nodece 9
=global nodece 9 nodece z3.ce561.num_edges_traversed0
=global nodece 9 nodece_path
=global nodece 9 nodece_path.graph_edge_composition
(epsilon)
=global nodece 9 nodece_cached_counterexample
=counter_example_begin z3.ce561 739fe1baf03f6ffa464279824157ee74
=input.spec-%var-x-1
1 : Lambda610 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 524287 { 0x7ffff +1.6249988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 524288 { 0x80000 +1.6250000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda611 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 2, 28) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry
1 : Lambda614 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 524287 { 0x7ffff +1.6249988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 524288 { 0x80000 +1.6250000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda615 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%x
1 : 3050497956 { 0xb5d2e7a4 -1244469340 -1.64769411e236 } : BV:32
=input.dst.llvm-%n
1 : 524288 { 0x80000 +1.6250000e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1973085103 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1973085104; 1973085107 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1973085108; 3079203727 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3079203728; 3079203731 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3079203732; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1973085104 { 0x759ae3b0 +1.21007347e108 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3079203728 { 0xb788eb90 -1215763568 -1.6968879e240 } : BV:32
=input.spec-%var-i-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1973085104 { 0x759ae3b0 +1.21007347e108 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1973085107 { 0x759ae3b3 +1.21007382e108 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3079203728 { 0xb788eb90 -1215763568 -1.6968879e240 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3079203731 { 0xb788eb93 -1215763565 -1.6968915e240 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 524287 ] -> true, [ 524288; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : Lambda593 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 524287 { 0x7ffff +1.6249988e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 524288 { 0x80000 +1.6250000e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 2, 18) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry.0.1
1 : ([ 0; 524287 ] -> true, [ 524288; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L2%7%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
2516558234
=counter_example_end
=global nodece 9 num_edges_traversed 0
=global nodece 9 nodece_visted_pcs: 
L2%7%bbentry_Lfor.cond%1%bbentry
=global nodece 10
=global nodece 10 nodece z3v487.ce562.num_edges_traversed0
=global nodece 10 nodece_path
=global nodece 10 nodece_path.graph_edge_composition
(epsilon)
=global nodece 10 nodece_cached_counterexample
=counter_example_begin z3v487.ce562 293d6367db841918efdd8dc483dd12e5
=input.spec-%var-x-1
1 : Lambda622 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1024 { 0x400 +1.12207e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda623 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry
1 : Lambda625 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1024 { 0x400 +1.12207e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda626 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 2, 28) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%x
1 : 1098907648 { 0x41800000 +1.0e4 } : BV:32
=input.dst.llvm-%n
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 545259523 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 545259524; 545259527 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 545259528; 2256535567 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2256535568; 2256535571 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2256535572; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 545259524 { 0x20800004 +1.47e194 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2256535568 { 0x86800010 -2038431728 -1.190e142 } : BV:32
=input.spec-%var-i-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 545259524 { 0x20800004 +1.47e194 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 545259527 { 0x20800007 +1.83e194 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2256535568 { 0x86800010 -2038431728 -1.190e142 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2256535571 { 0x86800013 -2038431725 -1.226e142 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 1023 ] -> true, [ 1024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry.0.1
1 : ([ 0; 1023 ] -> true, [ 1024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L2%7%bbentry.1.1
1 : Lambda604 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 1023 { 0x3ff +1.12195e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 1024 { 0x400 +1.12207e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 2, 18) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
4238727718
=counter_example_end
=global nodece 10 num_edges_traversed 0
=global nodece 10 nodece_visted_pcs: 
L2%7%bbentry_Lfor.cond%1%bbentry
=global nodece 11
=global nodece 11 nodece z3.ce646.num_edges_traversed2
=global nodece 11 nodece_path
=global nodece 11 nodece_path.graph_edge_composition
(epsilon)
=global nodece 11 nodece_cached_counterexample
=counter_example_begin z3.ce646 dcc48de9afd8f6cbfa0ce8e97d7da
=input.spec-%var-x-1
1 : Lambda72 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 65535 { 0xffff +1.781238e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 65536 { 0x10000 +1.781250e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda73 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 2012183808 { 0x77ef7d00 +1.87100219e112 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 720777442 { 0x2af630e2 +1.92336678e214 } : BV:32
25 : eq(23, 24) : BOOL
26 : 239 { 0xef -17 } : BV:8
27 : 318022142 { 0x12f4a1fe +1.91119360e166 } : BV:32
28 : eq(23, 27) : BOOL
29 : 1 { 0x1 } : BV:8
30 : 720777441 { 0x2af630e1 +1.92336666e214 } : BV:32
31 : eq(23, 30) : BOOL
32 : 125 { 0x7d } : BV:8
33 : 720777443 { 0x2af630e3 +1.92336690e214 } : BV:32
34 : eq(23, 33) : BOOL
35 : 119 { 0x77 } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvadd(41, 21, 22) : BV:32
43 : eq(42, 24) : BOOL
44 : eq(42, 27) : BOOL
45 : eq(42, 30) : BOOL
46 : eq(42, 33) : BOOL
47 : ite(46, 35, 36) : BV:8
48 : ite(45, 32, 47) : BV:8
49 : ite(44, 29, 48) : BV:8
50 : ite(43, 26, 49) : BV:8
51 : 1 { 0x1 +1.11e129 } : BV:32
52 : bvadd(51, 21, 22) : BV:32
53 : eq(52, 24) : BOOL
54 : eq(52, 27) : BOOL
55 : eq(52, 30) : BOOL
56 : eq(52, 33) : BOOL
57 : ite(56, 35, 36) : BV:8
58 : ite(55, 32, 57) : BV:8
59 : ite(54, 29, 58) : BV:8
60 : ite(53, 26, 59) : BV:8
61 : bvadd(21, 22) : BV:32
62 : eq(61, 24) : BOOL
63 : eq(61, 27) : BOOL
64 : eq(61, 30) : BOOL
65 : eq(61, 33) : BOOL
66 : ite(65, 35, 36) : BV:8
67 : ite(64, 32, 66) : BV:8
68 : ite(63, 29, 67) : BV:8
69 : ite(62, 26, 68) : BV:8
70 : bvconcat(40, 50, 60, 69) : BV:32
71 : ite(18, 2, 70) : BV:32
72 : lambda(17, 71) : FUNCTION[BV:32 -> BV:32]
73 : map(16, 72) : MAP[BV:32 -> BV:32]
74 : sym_const(73) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry
1 : Lambda72 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 65535 { 0xffff +1.781238e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 65536 { 0x10000 +1.781250e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda73 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 2012183808 { 0x77ef7d00 +1.87100219e112 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 720777442 { 0x2af630e2 +1.92336678e214 } : BV:32
25 : eq(23, 24) : BOOL
26 : 239 { 0xef -17 } : BV:8
27 : 318022142 { 0x12f4a1fe +1.91119360e166 } : BV:32
28 : eq(23, 27) : BOOL
29 : 1 { 0x1 } : BV:8
30 : 720777441 { 0x2af630e1 +1.92336666e214 } : BV:32
31 : eq(23, 30) : BOOL
32 : 125 { 0x7d } : BV:8
33 : 720777443 { 0x2af630e3 +1.92336690e214 } : BV:32
34 : eq(23, 33) : BOOL
35 : 119 { 0x77 } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvadd(41, 21, 22) : BV:32
43 : eq(42, 24) : BOOL
44 : eq(42, 27) : BOOL
45 : eq(42, 30) : BOOL
46 : eq(42, 33) : BOOL
47 : ite(46, 35, 36) : BV:8
48 : ite(45, 32, 47) : BV:8
49 : ite(44, 29, 48) : BV:8
50 : ite(43, 26, 49) : BV:8
51 : 1 { 0x1 +1.11e129 } : BV:32
52 : bvadd(51, 21, 22) : BV:32
53 : eq(52, 24) : BOOL
54 : eq(52, 27) : BOOL
55 : eq(52, 30) : BOOL
56 : eq(52, 33) : BOOL
57 : ite(56, 35, 36) : BV:8
58 : ite(55, 32, 57) : BV:8
59 : ite(54, 29, 58) : BV:8
60 : ite(53, 26, 59) : BV:8
61 : bvadd(21, 22) : BV:32
62 : eq(61, 24) : BOOL
63 : eq(61, 27) : BOOL
64 : eq(61, 30) : BOOL
65 : eq(61, 33) : BOOL
66 : ite(65, 35, 36) : BV:8
67 : ite(64, 32, 66) : BV:8
68 : ite(63, 29, 67) : BV:8
69 : ite(62, 26, 68) : BV:8
70 : bvconcat(40, 50, 60, 69) : BV:32
71 : ite(18, 2, 70) : BV:32
72 : lambda(17, 71) : FUNCTION[BV:32 -> BV:32]
73 : map(16, 72) : MAP[BV:32 -> BV:32]
74 : sym_const(73) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%x
1 : 2012183808 { 0x77ef7d00 +1.87100219e112 } : BV:32
=input.dst.llvm-%n
1 : 65536 { 0x10000 +1.781250e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 318022141 ] -> 0, [ 318022142; 318022142 ] -> 1, [ 318022143; 720777440 ] -> 0, [ 720777441; 720777441 ] -> 125, [ 720777442; 720777442 ] -> 239, [ 720777443; 720777443 ] -> 119, [ 720777444; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 318022139 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 318022140; 318022143 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 318022144; 720777439 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 720777440; 720777443 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 720777444; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 318022140 { 0x12f4a1fc +1.91119337e166 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 720777440 { 0x2af630e0 +1.92336654e214 } : BV:32
=input.spec-%var-i-0.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-ret-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-8.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1079274789 { 0x40546d25 +1.65958082e1 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 318022140 { 0x12f4a1fc +1.91119337e166 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 318022143 { 0x12f4a1ff +1.91119372e166 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 720777440 { 0x2af630e0 +1.92336654e214 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 720777443 { 0x2af630e3 +1.92336690e214 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 65535 ] -> true, [ 65536; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : Lambda57 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 2012183808 { 0x77ef7d00 +1.87100219e112 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 720777442 { 0x2af630e2 +1.92336678e214 } : BV:32
10 : eq(8, 9) : BOOL
11 : 239 { 0xef -17 } : BV:8
12 : 318022142 { 0x12f4a1fe +1.91119360e166 } : BV:32
13 : eq(8, 12) : BOOL
14 : 1 { 0x1 } : BV:8
15 : 720777441 { 0x2af630e1 +1.92336666e214 } : BV:32
16 : eq(8, 15) : BOOL
17 : 125 { 0x7d } : BV:8
18 : 720777443 { 0x2af630e3 +1.92336690e214 } : BV:32
19 : eq(8, 18) : BOOL
20 : 119 { 0x77 } : BV:8
21 : 0 { 0x0 } : BV:8
22 : ite(19, 20, 21) : BV:8
23 : ite(16, 17, 22) : BV:8
24 : ite(13, 14, 23) : BV:8
25 : ite(10, 11, 24) : BV:8
26 : 2 { 0x2 +1.23e129 } : BV:32
27 : bvadd(26, 6, 7) : BV:32
28 : eq(27, 9) : BOOL
29 : eq(27, 12) : BOOL
30 : eq(27, 15) : BOOL
31 : eq(27, 18) : BOOL
32 : ite(31, 20, 21) : BV:8
33 : ite(30, 17, 32) : BV:8
34 : ite(29, 14, 33) : BV:8
35 : ite(28, 11, 34) : BV:8
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvadd(36, 6, 7) : BV:32
38 : eq(37, 9) : BOOL
39 : eq(37, 12) : BOOL
40 : eq(37, 15) : BOOL
41 : eq(37, 18) : BOOL
42 : ite(41, 20, 21) : BV:8
43 : ite(40, 17, 42) : BV:8
44 : ite(39, 14, 43) : BV:8
45 : ite(38, 11, 44) : BV:8
46 : bvadd(6, 7) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : eq(46, 15) : BOOL
50 : eq(46, 18) : BOOL
51 : ite(50, 20, 21) : BV:8
52 : ite(49, 17, 51) : BV:8
53 : ite(48, 14, 52) : BV:8
54 : ite(47, 11, 53) : BV:8
55 : bvconcat(25, 35, 45, 54) : BV:32
56 : ite(3, 2, 55) : BV:32
57 : lambda(1, 56) : FUNCTION[BV:32 -> BV:32]
58 : sym_const(57) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry.0.1
1 : ([ 0; 65535 ] -> true, [ 65536; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L2%7%bbentry.1.1
1 : Lambda59 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 2012183808 { 0x77ef7d00 +1.87100219e112 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 720777442 { 0x2af630e2 +1.92336678e214 } : BV:32
10 : eq(8, 9) : BOOL
11 : 239 { 0xef -17 } : BV:8
12 : 318022142 { 0x12f4a1fe +1.91119360e166 } : BV:32
13 : eq(8, 12) : BOOL
14 : 1 { 0x1 } : BV:8
15 : 720777441 { 0x2af630e1 +1.92336666e214 } : BV:32
16 : eq(8, 15) : BOOL
17 : 125 { 0x7d } : BV:8
18 : 720777443 { 0x2af630e3 +1.92336690e214 } : BV:32
19 : eq(8, 18) : BOOL
20 : 119 { 0x77 } : BV:8
21 : 0 { 0x0 } : BV:8
22 : ite(19, 20, 21) : BV:8
23 : ite(16, 17, 22) : BV:8
24 : ite(13, 14, 23) : BV:8
25 : ite(10, 11, 24) : BV:8
26 : 2 { 0x2 +1.23e129 } : BV:32
27 : bvadd(26, 6, 7) : BV:32
28 : eq(27, 9) : BOOL
29 : eq(27, 12) : BOOL
30 : eq(27, 15) : BOOL
31 : eq(27, 18) : BOOL
32 : ite(31, 20, 21) : BV:8
33 : ite(30, 17, 32) : BV:8
34 : ite(29, 14, 33) : BV:8
35 : ite(28, 11, 34) : BV:8
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvadd(36, 6, 7) : BV:32
38 : eq(37, 9) : BOOL
39 : eq(37, 12) : BOOL
40 : eq(37, 15) : BOOL
41 : eq(37, 18) : BOOL
42 : ite(41, 20, 21) : BV:8
43 : ite(40, 17, 42) : BV:8
44 : ite(39, 14, 43) : BV:8
45 : ite(38, 11, 44) : BV:8
46 : bvadd(6, 7) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : eq(46, 15) : BOOL
50 : eq(46, 18) : BOOL
51 : ite(50, 20, 21) : BV:8
52 : ite(49, 17, 51) : BV:8
53 : ite(48, 14, 52) : BV:8
54 : ite(47, 11, 53) : BV:8
55 : bvconcat(25, 35, 45, 54) : BV:32
56 : ite(3, 2, 55) : BV:32
57 : ite(3, 2, 56) : BV:32
58 : lambda(1, 57) : FUNCTION[BV:32 -> BV:32]
59 : sym_const(58) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
2233806052
=counter_example_end
=global nodece 11 num_edges_traversed 2
=global nodece 11 nodece_visted_pcs: 
L2%7%bbentry_Lfor.cond%1%bbentry
=global nodece 12
=global nodece 12 nodece z3.ce663.num_edges_traversed3
=global nodece 12 nodece_path
=global nodece 12 nodece_path.graph_edge_composition
(L2%7%bbentry_Lfor.cond%1%bbentry=>L2%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 12 nodece_cached_counterexample
=counter_example_begin z3.ce663 a55f6f3759ea12f893c45c847afcf6
=input.spec-%var-x-1
1 : Lambda72 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 65535 { 0xffff +1.781238e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 65536 { 0x10000 +1.781250e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda73 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 2012183808 { 0x77ef7d00 +1.87100219e112 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 720777442 { 0x2af630e2 +1.92336678e214 } : BV:32
25 : eq(23, 24) : BOOL
26 : 239 { 0xef -17 } : BV:8
27 : 318022142 { 0x12f4a1fe +1.91119360e166 } : BV:32
28 : eq(23, 27) : BOOL
29 : 1 { 0x1 } : BV:8
30 : 720777441 { 0x2af630e1 +1.92336666e214 } : BV:32
31 : eq(23, 30) : BOOL
32 : 125 { 0x7d } : BV:8
33 : 720777443 { 0x2af630e3 +1.92336690e214 } : BV:32
34 : eq(23, 33) : BOOL
35 : 119 { 0x77 } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvadd(41, 21, 22) : BV:32
43 : eq(42, 24) : BOOL
44 : eq(42, 27) : BOOL
45 : eq(42, 30) : BOOL
46 : eq(42, 33) : BOOL
47 : ite(46, 35, 36) : BV:8
48 : ite(45, 32, 47) : BV:8
49 : ite(44, 29, 48) : BV:8
50 : ite(43, 26, 49) : BV:8
51 : 1 { 0x1 +1.11e129 } : BV:32
52 : bvadd(51, 21, 22) : BV:32
53 : eq(52, 24) : BOOL
54 : eq(52, 27) : BOOL
55 : eq(52, 30) : BOOL
56 : eq(52, 33) : BOOL
57 : ite(56, 35, 36) : BV:8
58 : ite(55, 32, 57) : BV:8
59 : ite(54, 29, 58) : BV:8
60 : ite(53, 26, 59) : BV:8
61 : bvadd(21, 22) : BV:32
62 : eq(61, 24) : BOOL
63 : eq(61, 27) : BOOL
64 : eq(61, 30) : BOOL
65 : eq(61, 33) : BOOL
66 : ite(65, 35, 36) : BV:8
67 : ite(64, 32, 66) : BV:8
68 : ite(63, 29, 67) : BV:8
69 : ite(62, 26, 68) : BV:8
70 : bvconcat(40, 50, 60, 69) : BV:32
71 : ite(18, 2, 70) : BV:32
72 : lambda(17, 71) : FUNCTION[BV:32 -> BV:32]
73 : map(16, 72) : MAP[BV:32 -> BV:32]
74 : sym_const(73) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry
1 : Lambda72 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 65535 { 0xffff +1.781238e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 65536 { 0x10000 +1.781250e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda73 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 2012183808 { 0x77ef7d00 +1.87100219e112 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 720777442 { 0x2af630e2 +1.92336678e214 } : BV:32
25 : eq(23, 24) : BOOL
26 : 239 { 0xef -17 } : BV:8
27 : 318022142 { 0x12f4a1fe +1.91119360e166 } : BV:32
28 : eq(23, 27) : BOOL
29 : 1 { 0x1 } : BV:8
30 : 720777441 { 0x2af630e1 +1.92336666e214 } : BV:32
31 : eq(23, 30) : BOOL
32 : 125 { 0x7d } : BV:8
33 : 720777443 { 0x2af630e3 +1.92336690e214 } : BV:32
34 : eq(23, 33) : BOOL
35 : 119 { 0x77 } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvadd(41, 21, 22) : BV:32
43 : eq(42, 24) : BOOL
44 : eq(42, 27) : BOOL
45 : eq(42, 30) : BOOL
46 : eq(42, 33) : BOOL
47 : ite(46, 35, 36) : BV:8
48 : ite(45, 32, 47) : BV:8
49 : ite(44, 29, 48) : BV:8
50 : ite(43, 26, 49) : BV:8
51 : 1 { 0x1 +1.11e129 } : BV:32
52 : bvadd(51, 21, 22) : BV:32
53 : eq(52, 24) : BOOL
54 : eq(52, 27) : BOOL
55 : eq(52, 30) : BOOL
56 : eq(52, 33) : BOOL
57 : ite(56, 35, 36) : BV:8
58 : ite(55, 32, 57) : BV:8
59 : ite(54, 29, 58) : BV:8
60 : ite(53, 26, 59) : BV:8
61 : bvadd(21, 22) : BV:32
62 : eq(61, 24) : BOOL
63 : eq(61, 27) : BOOL
64 : eq(61, 30) : BOOL
65 : eq(61, 33) : BOOL
66 : ite(65, 35, 36) : BV:8
67 : ite(64, 32, 66) : BV:8
68 : ite(63, 29, 67) : BV:8
69 : ite(62, 26, 68) : BV:8
70 : bvconcat(40, 50, 60, 69) : BV:32
71 : ite(18, 2, 70) : BV:32
72 : lambda(17, 71) : FUNCTION[BV:32 -> BV:32]
73 : map(16, 72) : MAP[BV:32 -> BV:32]
74 : sym_const(73) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%x
1 : 2012183808 { 0x77ef7d00 +1.87100219e112 } : BV:32
=input.dst.llvm-%n
1 : 65536 { 0x10000 +1.781250e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 318022141 ] -> 0, [ 318022142; 318022142 ] -> 1, [ 318022143; 720777440 ] -> 0, [ 720777441; 720777441 ] -> 125, [ 720777442; 720777442 ] -> 239, [ 720777443; 720777443 ] -> 119, [ 720777444; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 318022139 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 318022140; 318022143 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 318022144; 720777439 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 720777440; 720777443 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 720777444; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 318022140 { 0x12f4a1fc +1.91119337e166 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 720777440 { 0x2af630e0 +1.92336654e214 } : BV:32
=input.spec-%var-i-0.L2%7%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%var-ret-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-8.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1079274789 { 0x40546d25 +1.65958082e1 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 318022140 { 0x12f4a1fc +1.91119337e166 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 318022143 { 0x12f4a1ff +1.91119372e166 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 720777440 { 0x2af630e0 +1.92336654e214 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 720777443 { 0x2af630e3 +1.92336690e214 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 65535 ] -> true, [ 65536; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : Lambda57 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 2012183808 { 0x77ef7d00 +1.87100219e112 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 720777442 { 0x2af630e2 +1.92336678e214 } : BV:32
10 : eq(8, 9) : BOOL
11 : 239 { 0xef -17 } : BV:8
12 : 318022142 { 0x12f4a1fe +1.91119360e166 } : BV:32
13 : eq(8, 12) : BOOL
14 : 1 { 0x1 } : BV:8
15 : 720777441 { 0x2af630e1 +1.92336666e214 } : BV:32
16 : eq(8, 15) : BOOL
17 : 125 { 0x7d } : BV:8
18 : 720777443 { 0x2af630e3 +1.92336690e214 } : BV:32
19 : eq(8, 18) : BOOL
20 : 119 { 0x77 } : BV:8
21 : 0 { 0x0 } : BV:8
22 : ite(19, 20, 21) : BV:8
23 : ite(16, 17, 22) : BV:8
24 : ite(13, 14, 23) : BV:8
25 : ite(10, 11, 24) : BV:8
26 : 2 { 0x2 +1.23e129 } : BV:32
27 : bvadd(26, 6, 7) : BV:32
28 : eq(27, 9) : BOOL
29 : eq(27, 12) : BOOL
30 : eq(27, 15) : BOOL
31 : eq(27, 18) : BOOL
32 : ite(31, 20, 21) : BV:8
33 : ite(30, 17, 32) : BV:8
34 : ite(29, 14, 33) : BV:8
35 : ite(28, 11, 34) : BV:8
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvadd(36, 6, 7) : BV:32
38 : eq(37, 9) : BOOL
39 : eq(37, 12) : BOOL
40 : eq(37, 15) : BOOL
41 : eq(37, 18) : BOOL
42 : ite(41, 20, 21) : BV:8
43 : ite(40, 17, 42) : BV:8
44 : ite(39, 14, 43) : BV:8
45 : ite(38, 11, 44) : BV:8
46 : bvadd(6, 7) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : eq(46, 15) : BOOL
50 : eq(46, 18) : BOOL
51 : ite(50, 20, 21) : BV:8
52 : ite(49, 17, 51) : BV:8
53 : ite(48, 14, 52) : BV:8
54 : ite(47, 11, 53) : BV:8
55 : bvconcat(25, 35, 45, 54) : BV:32
56 : ite(3, 2, 55) : BV:32
57 : lambda(1, 56) : FUNCTION[BV:32 -> BV:32]
58 : sym_const(57) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry.0.1
1 : ([ 0; 65535 ] -> true, [ 65536; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L2%7%bbentry.1.1
1 : Lambda59 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 2012183808 { 0x77ef7d00 +1.87100219e112 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 720777442 { 0x2af630e2 +1.92336678e214 } : BV:32
10 : eq(8, 9) : BOOL
11 : 239 { 0xef -17 } : BV:8
12 : 318022142 { 0x12f4a1fe +1.91119360e166 } : BV:32
13 : eq(8, 12) : BOOL
14 : 1 { 0x1 } : BV:8
15 : 720777441 { 0x2af630e1 +1.92336666e214 } : BV:32
16 : eq(8, 15) : BOOL
17 : 125 { 0x7d } : BV:8
18 : 720777443 { 0x2af630e3 +1.92336690e214 } : BV:32
19 : eq(8, 18) : BOOL
20 : 119 { 0x77 } : BV:8
21 : 0 { 0x0 } : BV:8
22 : ite(19, 20, 21) : BV:8
23 : ite(16, 17, 22) : BV:8
24 : ite(13, 14, 23) : BV:8
25 : ite(10, 11, 24) : BV:8
26 : 2 { 0x2 +1.23e129 } : BV:32
27 : bvadd(26, 6, 7) : BV:32
28 : eq(27, 9) : BOOL
29 : eq(27, 12) : BOOL
30 : eq(27, 15) : BOOL
31 : eq(27, 18) : BOOL
32 : ite(31, 20, 21) : BV:8
33 : ite(30, 17, 32) : BV:8
34 : ite(29, 14, 33) : BV:8
35 : ite(28, 11, 34) : BV:8
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvadd(36, 6, 7) : BV:32
38 : eq(37, 9) : BOOL
39 : eq(37, 12) : BOOL
40 : eq(37, 15) : BOOL
41 : eq(37, 18) : BOOL
42 : ite(41, 20, 21) : BV:8
43 : ite(40, 17, 42) : BV:8
44 : ite(39, 14, 43) : BV:8
45 : ite(38, 11, 44) : BV:8
46 : bvadd(6, 7) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : eq(46, 15) : BOOL
50 : eq(46, 18) : BOOL
51 : ite(50, 20, 21) : BV:8
52 : ite(49, 17, 51) : BV:8
53 : ite(48, 14, 52) : BV:8
54 : ite(47, 11, 53) : BV:8
55 : bvconcat(25, 35, 45, 54) : BV:32
56 : ite(3, 2, 55) : BV:32
57 : ite(3, 2, 56) : BV:32
58 : lambda(1, 57) : FUNCTION[BV:32 -> BV:32]
59 : sym_const(58) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
2233806052
=counter_example_end
=global nodece 12 num_edges_traversed 3
=global nodece 12 nodece_visted_pcs: 
L2%7%bbentry_Lfor.cond%1%bbentry
=global nodece 13
=global nodece 13 nodece z3.ce682.num_edges_traversed4
=global nodece 13 nodece_path
=global nodece 13 nodece_path.graph_edge_composition
(epsilon)
=global nodece 13 nodece_cached_counterexample
=counter_example_begin z3.ce682 4b1bb821914cebf05662b27873f49d
=input.spec-%var-x-1
1 : Lambda72 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 65535 { 0xffff +1.781238e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 65536 { 0x10000 +1.781250e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda73 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 2012183808 { 0x77ef7d00 +1.87100219e112 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 720777442 { 0x2af630e2 +1.92336678e214 } : BV:32
25 : eq(23, 24) : BOOL
26 : 239 { 0xef -17 } : BV:8
27 : 318022142 { 0x12f4a1fe +1.91119360e166 } : BV:32
28 : eq(23, 27) : BOOL
29 : 1 { 0x1 } : BV:8
30 : 720777441 { 0x2af630e1 +1.92336666e214 } : BV:32
31 : eq(23, 30) : BOOL
32 : 125 { 0x7d } : BV:8
33 : 720777443 { 0x2af630e3 +1.92336690e214 } : BV:32
34 : eq(23, 33) : BOOL
35 : 119 { 0x77 } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvadd(41, 21, 22) : BV:32
43 : eq(42, 24) : BOOL
44 : eq(42, 27) : BOOL
45 : eq(42, 30) : BOOL
46 : eq(42, 33) : BOOL
47 : ite(46, 35, 36) : BV:8
48 : ite(45, 32, 47) : BV:8
49 : ite(44, 29, 48) : BV:8
50 : ite(43, 26, 49) : BV:8
51 : 1 { 0x1 +1.11e129 } : BV:32
52 : bvadd(51, 21, 22) : BV:32
53 : eq(52, 24) : BOOL
54 : eq(52, 27) : BOOL
55 : eq(52, 30) : BOOL
56 : eq(52, 33) : BOOL
57 : ite(56, 35, 36) : BV:8
58 : ite(55, 32, 57) : BV:8
59 : ite(54, 29, 58) : BV:8
60 : ite(53, 26, 59) : BV:8
61 : bvadd(21, 22) : BV:32
62 : eq(61, 24) : BOOL
63 : eq(61, 27) : BOOL
64 : eq(61, 30) : BOOL
65 : eq(61, 33) : BOOL
66 : ite(65, 35, 36) : BV:8
67 : ite(64, 32, 66) : BV:8
68 : ite(63, 29, 67) : BV:8
69 : ite(62, 26, 68) : BV:8
70 : bvconcat(40, 50, 60, 69) : BV:32
71 : ite(18, 2, 70) : BV:32
72 : lambda(17, 71) : FUNCTION[BV:32 -> BV:32]
73 : map(16, 72) : MAP[BV:32 -> BV:32]
74 : sym_const(73) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry
1 : Lambda72 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 65535 { 0xffff +1.781238e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 65536 { 0x10000 +1.781250e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda73 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 2012183808 { 0x77ef7d00 +1.87100219e112 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 720777442 { 0x2af630e2 +1.92336678e214 } : BV:32
25 : eq(23, 24) : BOOL
26 : 239 { 0xef -17 } : BV:8
27 : 318022142 { 0x12f4a1fe +1.91119360e166 } : BV:32
28 : eq(23, 27) : BOOL
29 : 1 { 0x1 } : BV:8
30 : 720777441 { 0x2af630e1 +1.92336666e214 } : BV:32
31 : eq(23, 30) : BOOL
32 : 125 { 0x7d } : BV:8
33 : 720777443 { 0x2af630e3 +1.92336690e214 } : BV:32
34 : eq(23, 33) : BOOL
35 : 119 { 0x77 } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvadd(41, 21, 22) : BV:32
43 : eq(42, 24) : BOOL
44 : eq(42, 27) : BOOL
45 : eq(42, 30) : BOOL
46 : eq(42, 33) : BOOL
47 : ite(46, 35, 36) : BV:8
48 : ite(45, 32, 47) : BV:8
49 : ite(44, 29, 48) : BV:8
50 : ite(43, 26, 49) : BV:8
51 : 1 { 0x1 +1.11e129 } : BV:32
52 : bvadd(51, 21, 22) : BV:32
53 : eq(52, 24) : BOOL
54 : eq(52, 27) : BOOL
55 : eq(52, 30) : BOOL
56 : eq(52, 33) : BOOL
57 : ite(56, 35, 36) : BV:8
58 : ite(55, 32, 57) : BV:8
59 : ite(54, 29, 58) : BV:8
60 : ite(53, 26, 59) : BV:8
61 : bvadd(21, 22) : BV:32
62 : eq(61, 24) : BOOL
63 : eq(61, 27) : BOOL
64 : eq(61, 30) : BOOL
65 : eq(61, 33) : BOOL
66 : ite(65, 35, 36) : BV:8
67 : ite(64, 32, 66) : BV:8
68 : ite(63, 29, 67) : BV:8
69 : ite(62, 26, 68) : BV:8
70 : bvconcat(40, 50, 60, 69) : BV:32
71 : ite(18, 2, 70) : BV:32
72 : lambda(17, 71) : FUNCTION[BV:32 -> BV:32]
73 : map(16, 72) : MAP[BV:32 -> BV:32]
74 : sym_const(73) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%x
1 : 2012183808 { 0x77ef7d00 +1.87100219e112 } : BV:32
=input.dst.llvm-%n
1 : 65536 { 0x10000 +1.781250e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 318022141 ] -> 0, [ 318022142; 318022142 ] -> 1, [ 318022143; 720777440 ] -> 0, [ 720777441; 720777441 ] -> 125, [ 720777442; 720777442 ] -> 239, [ 720777443; 720777443 ] -> 119, [ 720777444; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 318022139 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 318022140; 318022143 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 318022144; 720777439 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 720777440; 720777443 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 720777444; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 318022140 { 0x12f4a1fc +1.91119337e166 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 720777440 { 0x2af630e0 +1.92336654e214 } : BV:32
=input.spec-%var-i-0.L2%7%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-ret-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-8.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1079274789 { 0x40546d25 +1.65958082e1 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 318022140 { 0x12f4a1fc +1.91119337e166 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 318022143 { 0x12f4a1ff +1.91119372e166 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 720777440 { 0x2af630e0 +1.92336654e214 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 720777443 { 0x2af630e3 +1.92336690e214 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 65535 ] -> true, [ 65536; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : Lambda57 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 2012183808 { 0x77ef7d00 +1.87100219e112 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 720777442 { 0x2af630e2 +1.92336678e214 } : BV:32
10 : eq(8, 9) : BOOL
11 : 239 { 0xef -17 } : BV:8
12 : 318022142 { 0x12f4a1fe +1.91119360e166 } : BV:32
13 : eq(8, 12) : BOOL
14 : 1 { 0x1 } : BV:8
15 : 720777441 { 0x2af630e1 +1.92336666e214 } : BV:32
16 : eq(8, 15) : BOOL
17 : 125 { 0x7d } : BV:8
18 : 720777443 { 0x2af630e3 +1.92336690e214 } : BV:32
19 : eq(8, 18) : BOOL
20 : 119 { 0x77 } : BV:8
21 : 0 { 0x0 } : BV:8
22 : ite(19, 20, 21) : BV:8
23 : ite(16, 17, 22) : BV:8
24 : ite(13, 14, 23) : BV:8
25 : ite(10, 11, 24) : BV:8
26 : 2 { 0x2 +1.23e129 } : BV:32
27 : bvadd(26, 6, 7) : BV:32
28 : eq(27, 9) : BOOL
29 : eq(27, 12) : BOOL
30 : eq(27, 15) : BOOL
31 : eq(27, 18) : BOOL
32 : ite(31, 20, 21) : BV:8
33 : ite(30, 17, 32) : BV:8
34 : ite(29, 14, 33) : BV:8
35 : ite(28, 11, 34) : BV:8
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvadd(36, 6, 7) : BV:32
38 : eq(37, 9) : BOOL
39 : eq(37, 12) : BOOL
40 : eq(37, 15) : BOOL
41 : eq(37, 18) : BOOL
42 : ite(41, 20, 21) : BV:8
43 : ite(40, 17, 42) : BV:8
44 : ite(39, 14, 43) : BV:8
45 : ite(38, 11, 44) : BV:8
46 : bvadd(6, 7) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : eq(46, 15) : BOOL
50 : eq(46, 18) : BOOL
51 : ite(50, 20, 21) : BV:8
52 : ite(49, 17, 51) : BV:8
53 : ite(48, 14, 52) : BV:8
54 : ite(47, 11, 53) : BV:8
55 : bvconcat(25, 35, 45, 54) : BV:32
56 : ite(3, 2, 55) : BV:32
57 : lambda(1, 56) : FUNCTION[BV:32 -> BV:32]
58 : sym_const(57) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry.0.1
1 : ([ 0; 65535 ] -> true, [ 65536; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L2%7%bbentry.1.1
1 : Lambda59 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 2012183808 { 0x77ef7d00 +1.87100219e112 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 720777442 { 0x2af630e2 +1.92336678e214 } : BV:32
10 : eq(8, 9) : BOOL
11 : 239 { 0xef -17 } : BV:8
12 : 318022142 { 0x12f4a1fe +1.91119360e166 } : BV:32
13 : eq(8, 12) : BOOL
14 : 1 { 0x1 } : BV:8
15 : 720777441 { 0x2af630e1 +1.92336666e214 } : BV:32
16 : eq(8, 15) : BOOL
17 : 125 { 0x7d } : BV:8
18 : 720777443 { 0x2af630e3 +1.92336690e214 } : BV:32
19 : eq(8, 18) : BOOL
20 : 119 { 0x77 } : BV:8
21 : 0 { 0x0 } : BV:8
22 : ite(19, 20, 21) : BV:8
23 : ite(16, 17, 22) : BV:8
24 : ite(13, 14, 23) : BV:8
25 : ite(10, 11, 24) : BV:8
26 : 2 { 0x2 +1.23e129 } : BV:32
27 : bvadd(26, 6, 7) : BV:32
28 : eq(27, 9) : BOOL
29 : eq(27, 12) : BOOL
30 : eq(27, 15) : BOOL
31 : eq(27, 18) : BOOL
32 : ite(31, 20, 21) : BV:8
33 : ite(30, 17, 32) : BV:8
34 : ite(29, 14, 33) : BV:8
35 : ite(28, 11, 34) : BV:8
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvadd(36, 6, 7) : BV:32
38 : eq(37, 9) : BOOL
39 : eq(37, 12) : BOOL
40 : eq(37, 15) : BOOL
41 : eq(37, 18) : BOOL
42 : ite(41, 20, 21) : BV:8
43 : ite(40, 17, 42) : BV:8
44 : ite(39, 14, 43) : BV:8
45 : ite(38, 11, 44) : BV:8
46 : bvadd(6, 7) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : eq(46, 15) : BOOL
50 : eq(46, 18) : BOOL
51 : ite(50, 20, 21) : BV:8
52 : ite(49, 17, 51) : BV:8
53 : ite(48, 14, 52) : BV:8
54 : ite(47, 11, 53) : BV:8
55 : bvconcat(25, 35, 45, 54) : BV:32
56 : ite(3, 2, 55) : BV:32
57 : ite(3, 2, 56) : BV:32
58 : lambda(1, 57) : FUNCTION[BV:32 -> BV:32]
59 : sym_const(58) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
2233806052
=counter_example_end
=global nodece 13 num_edges_traversed 4
=global nodece 13 nodece_visted_pcs: 
L2%7%bbentry_Lfor.cond%1%bbentry
=global nodece 14
=global nodece 14 nodece z3v487.ce636.num_edges_traversed2
=global nodece 14 nodece_path
=global nodece 14 nodece_path.graph_edge_composition
(epsilon)
=global nodece 14 nodece_cached_counterexample
=counter_example_begin z3v487.ce636 57732f8fe51865df38c4a16c26dcb
=input.spec-%var-x-1
1 : Lambda82 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 65535 { 0xffff +1.781238e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 65536 { 0x10000 +1.781250e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda83 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : bvadd(19, 21, 2) : BV:32
23 : 74 { 0x4a +1.882e129 } : BV:32
24 : eq(22, 23) : BOOL
25 : 1 { 0x1 } : BV:8
26 : 0 { 0x0 } : BV:8
27 : ite(24, 25, 26) : BV:8
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvadd(28, 21, 2) : BV:32
30 : eq(29, 23) : BOOL
31 : ite(30, 25, 26) : BV:8
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : bvadd(32, 21, 2) : BV:32
34 : eq(33, 23) : BOOL
35 : ite(34, 25, 26) : BV:8
36 : bvadd(21, 2) : BV:32
37 : eq(36, 23) : BOOL
38 : ite(37, 25, 26) : BV:8
39 : bvconcat(27, 31, 35, 38) : BV:32
40 : ite(18, 2, 39) : BV:32
41 : lambda(17, 40) : FUNCTION[BV:32 -> BV:32]
42 : map(16, 41) : MAP[BV:32 -> BV:32]
43 : sym_const(42) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry
1 : Lambda82 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 65535 { 0xffff +1.781238e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 65536 { 0x10000 +1.781250e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda83 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : bvadd(19, 21, 2) : BV:32
23 : 74 { 0x4a +1.882e129 } : BV:32
24 : eq(22, 23) : BOOL
25 : 1 { 0x1 } : BV:8
26 : 0 { 0x0 } : BV:8
27 : ite(24, 25, 26) : BV:8
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvadd(28, 21, 2) : BV:32
30 : eq(29, 23) : BOOL
31 : ite(30, 25, 26) : BV:8
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : bvadd(32, 21, 2) : BV:32
34 : eq(33, 23) : BOOL
35 : ite(34, 25, 26) : BV:8
36 : bvadd(21, 2) : BV:32
37 : eq(36, 23) : BOOL
38 : ite(37, 25, 26) : BV:8
39 : bvconcat(27, 31, 35, 38) : BV:32
40 : ite(18, 2, 39) : BV:32
41 : lambda(17, 40) : FUNCTION[BV:32 -> BV:32]
42 : map(16, 41) : MAP[BV:32 -> BV:32]
43 : sym_const(42) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 65536 { 0x10000 +1.781250e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 73 ] -> 0, [ 74; 74 ] -> 1, [ 75; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 15 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 16; 19 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 20; 71 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 72; 75 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 76; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 72 { 0x48 +1.858e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.spec-%var-i-0.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-ret-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-8.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 578391065 { 0x22798c19 +1.94958794e197 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 72 { 0x48 +1.858e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 75 { 0x4b +1.894e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 19 { 0x13 +1.226e129 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 65535 ] -> true, [ 65536; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : Lambda64 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : bvadd(4, 6, 2) : BV:32
8 : 74 { 0x4a +1.882e129 } : BV:32
9 : eq(7, 8) : BOOL
10 : 1 { 0x1 } : BV:8
11 : 0 { 0x0 } : BV:8
12 : ite(9, 10, 11) : BV:8
13 : 2 { 0x2 +1.23e129 } : BV:32
14 : bvadd(13, 6, 2) : BV:32
15 : eq(14, 8) : BOOL
16 : ite(15, 10, 11) : BV:8
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : bvadd(17, 6, 2) : BV:32
19 : eq(18, 8) : BOOL
20 : ite(19, 10, 11) : BV:8
21 : bvadd(6, 2) : BV:32
22 : eq(21, 8) : BOOL
23 : ite(22, 10, 11) : BV:8
24 : bvconcat(12, 16, 20, 23) : BV:32
25 : ite(3, 2, 24) : BV:32
26 : lambda(1, 25) : FUNCTION[BV:32 -> BV:32]
27 : sym_const(26) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry.0.1
1 : ([ 0; 65535 ] -> true, [ 65536; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L2%7%bbentry.1.1
1 : Lambda66 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : bvadd(4, 6, 2) : BV:32
8 : 74 { 0x4a +1.882e129 } : BV:32
9 : eq(7, 8) : BOOL
10 : 1 { 0x1 } : BV:8
11 : 0 { 0x0 } : BV:8
12 : ite(9, 10, 11) : BV:8
13 : 2 { 0x2 +1.23e129 } : BV:32
14 : bvadd(13, 6, 2) : BV:32
15 : eq(14, 8) : BOOL
16 : ite(15, 10, 11) : BV:8
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : bvadd(17, 6, 2) : BV:32
19 : eq(18, 8) : BOOL
20 : ite(19, 10, 11) : BV:8
21 : bvadd(6, 2) : BV:32
22 : eq(21, 8) : BOOL
23 : ite(22, 10, 11) : BV:8
24 : bvconcat(12, 16, 20, 23) : BV:32
25 : ite(3, 2, 24) : BV:32
26 : ite(3, 2, 25) : BV:32
27 : lambda(1, 26) : FUNCTION[BV:32 -> BV:32]
28 : sym_const(27) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
404338641
=counter_example_end
=global nodece 14 num_edges_traversed 2
=global nodece 14 nodece_visted_pcs: 
L2%7%bbentry_Lfor.cond%1%bbentry
=global nodece 15
=global nodece 15 nodece z3.ce626.num_edges_traversed2
=global nodece 15 nodece_path
=global nodece 15 nodece_path.graph_edge_composition
(epsilon)
=global nodece 15 nodece_cached_counterexample
=counter_example_begin z3.ce626 9716d034b1c17e8c57181ba548344e22
=input.spec-%var-x-1
1 : Lambda112 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3755990815 { 0xdfdfdf1f -538976481 -1.74899661e64 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3755990816 { 0xdfdfdf20 -538976480 -1.74899673e64 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda113 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 2140659456 { 0x7f97df00 +1.18649291e128 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 2140659457 { 0x7f97df01 +1.18649303e128 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 3078290490 { 0xb77afc3a -1216676806 -1.96082234e239 } : BV:32
28 : eq(23, 27) : BOOL
29 : 151 { 0x97 -105 } : BV:8
30 : 257798132 { 0xf5daff4 +1.73193216e159 } : BV:32
31 : eq(23, 30) : BOOL
32 : 32 { 0x20 } : BV:8
33 : 2140659459 { 0x7f97df03 +1.18649327e128 } : BV:32
34 : eq(23, 33) : BOOL
35 : 2140659458 { 0x7f97df02 +1.18649315e128 } : BV:32
36 : eq(23, 35) : BOOL
37 : eq(23, 22) : BOOL
38 : 3078290491 { 0xb77afc3b -1216676805 -1.96082246e239 } : BV:32
39 : eq(23, 38) : BOOL
40 : 127 { 0x7f } : BV:8
41 : 3078290488 { 0xb77afc38 -1216676808 -1.96082210e239 } : BV:32
42 : eq(23, 41) : BOOL
43 : 223 { 0xdf -33 } : BV:8
44 : ite(42, 26, 43) : BV:8
45 : ite(39, 40, 44) : BV:8
46 : ite(37, 26, 45) : BV:8
47 : ite(36, 26, 46) : BV:8
48 : ite(34, 26, 47) : BV:8
49 : ite(31, 32, 48) : BV:8
50 : ite(28, 29, 49) : BV:8
51 : ite(25, 26, 50) : BV:8
52 : 2 { 0x2 +1.23e129 } : BV:32
53 : bvadd(52, 21, 22) : BV:32
54 : eq(53, 24) : BOOL
55 : eq(53, 27) : BOOL
56 : eq(53, 30) : BOOL
57 : eq(53, 33) : BOOL
58 : eq(53, 35) : BOOL
59 : eq(53, 22) : BOOL
60 : eq(53, 38) : BOOL
61 : eq(53, 41) : BOOL
62 : ite(61, 26, 43) : BV:8
63 : ite(60, 40, 62) : BV:8
64 : ite(59, 26, 63) : BV:8
65 : ite(58, 26, 64) : BV:8
66 : ite(57, 26, 65) : BV:8
67 : ite(56, 32, 66) : BV:8
68 : ite(55, 29, 67) : BV:8
69 : ite(54, 26, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 21, 22) : BV:32
72 : eq(71, 24) : BOOL
73 : eq(71, 27) : BOOL
74 : eq(71, 30) : BOOL
75 : eq(71, 33) : BOOL
76 : eq(71, 35) : BOOL
77 : eq(71, 22) : BOOL
78 : eq(71, 38) : BOOL
79 : eq(71, 41) : BOOL
80 : ite(79, 26, 43) : BV:8
81 : ite(78, 40, 80) : BV:8
82 : ite(77, 26, 81) : BV:8
83 : ite(76, 26, 82) : BV:8
84 : ite(75, 26, 83) : BV:8
85 : ite(74, 32, 84) : BV:8
86 : ite(73, 29, 85) : BV:8
87 : ite(72, 26, 86) : BV:8
88 : bvadd(21, 22) : BV:32
89 : eq(88, 24) : BOOL
90 : eq(88, 27) : BOOL
91 : eq(88, 30) : BOOL
92 : eq(88, 33) : BOOL
93 : eq(88, 35) : BOOL
94 : eq(88, 22) : BOOL
95 : eq(88, 38) : BOOL
96 : eq(88, 41) : BOOL
97 : ite(96, 26, 43) : BV:8
98 : ite(95, 40, 97) : BV:8
99 : ite(94, 26, 98) : BV:8
100 : ite(93, 26, 99) : BV:8
101 : ite(92, 26, 100) : BV:8
102 : ite(91, 32, 101) : BV:8
103 : ite(90, 29, 102) : BV:8
104 : ite(89, 26, 103) : BV:8
105 : bvconcat(51, 69, 87, 104) : BV:32
106 : ite(18, 2, 105) : BV:32
107 : lambda(17, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(16, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry
1 : Lambda112 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3755990815 { 0xdfdfdf1f -538976481 -1.74899661e64 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3755990816 { 0xdfdfdf20 -538976480 -1.74899673e64 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda113 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 2140659456 { 0x7f97df00 +1.18649291e128 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 2140659457 { 0x7f97df01 +1.18649303e128 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 3078290490 { 0xb77afc3a -1216676806 -1.96082234e239 } : BV:32
28 : eq(23, 27) : BOOL
29 : 151 { 0x97 -105 } : BV:8
30 : 257798132 { 0xf5daff4 +1.73193216e159 } : BV:32
31 : eq(23, 30) : BOOL
32 : 32 { 0x20 } : BV:8
33 : 2140659459 { 0x7f97df03 +1.18649327e128 } : BV:32
34 : eq(23, 33) : BOOL
35 : 2140659458 { 0x7f97df02 +1.18649315e128 } : BV:32
36 : eq(23, 35) : BOOL
37 : eq(23, 22) : BOOL
38 : 3078290491 { 0xb77afc3b -1216676805 -1.96082246e239 } : BV:32
39 : eq(23, 38) : BOOL
40 : 127 { 0x7f } : BV:8
41 : 3078290488 { 0xb77afc38 -1216676808 -1.96082210e239 } : BV:32
42 : eq(23, 41) : BOOL
43 : 223 { 0xdf -33 } : BV:8
44 : ite(42, 26, 43) : BV:8
45 : ite(39, 40, 44) : BV:8
46 : ite(37, 26, 45) : BV:8
47 : ite(36, 26, 46) : BV:8
48 : ite(34, 26, 47) : BV:8
49 : ite(31, 32, 48) : BV:8
50 : ite(28, 29, 49) : BV:8
51 : ite(25, 26, 50) : BV:8
52 : 2 { 0x2 +1.23e129 } : BV:32
53 : bvadd(52, 21, 22) : BV:32
54 : eq(53, 24) : BOOL
55 : eq(53, 27) : BOOL
56 : eq(53, 30) : BOOL
57 : eq(53, 33) : BOOL
58 : eq(53, 35) : BOOL
59 : eq(53, 22) : BOOL
60 : eq(53, 38) : BOOL
61 : eq(53, 41) : BOOL
62 : ite(61, 26, 43) : BV:8
63 : ite(60, 40, 62) : BV:8
64 : ite(59, 26, 63) : BV:8
65 : ite(58, 26, 64) : BV:8
66 : ite(57, 26, 65) : BV:8
67 : ite(56, 32, 66) : BV:8
68 : ite(55, 29, 67) : BV:8
69 : ite(54, 26, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 21, 22) : BV:32
72 : eq(71, 24) : BOOL
73 : eq(71, 27) : BOOL
74 : eq(71, 30) : BOOL
75 : eq(71, 33) : BOOL
76 : eq(71, 35) : BOOL
77 : eq(71, 22) : BOOL
78 : eq(71, 38) : BOOL
79 : eq(71, 41) : BOOL
80 : ite(79, 26, 43) : BV:8
81 : ite(78, 40, 80) : BV:8
82 : ite(77, 26, 81) : BV:8
83 : ite(76, 26, 82) : BV:8
84 : ite(75, 26, 83) : BV:8
85 : ite(74, 32, 84) : BV:8
86 : ite(73, 29, 85) : BV:8
87 : ite(72, 26, 86) : BV:8
88 : bvadd(21, 22) : BV:32
89 : eq(88, 24) : BOOL
90 : eq(88, 27) : BOOL
91 : eq(88, 30) : BOOL
92 : eq(88, 33) : BOOL
93 : eq(88, 35) : BOOL
94 : eq(88, 22) : BOOL
95 : eq(88, 38) : BOOL
96 : eq(88, 41) : BOOL
97 : ite(96, 26, 43) : BV:8
98 : ite(95, 40, 97) : BV:8
99 : ite(94, 26, 98) : BV:8
100 : ite(93, 26, 99) : BV:8
101 : ite(92, 26, 100) : BV:8
102 : ite(91, 32, 101) : BV:8
103 : ite(90, 29, 102) : BV:8
104 : ite(89, 26, 103) : BV:8
105 : bvconcat(51, 69, 87, 104) : BV:32
106 : ite(18, 2, 105) : BV:32
107 : lambda(17, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(16, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%x
1 : 2140659456 { 0x7f97df00 +1.18649291e128 } : BV:32
=input.dst.llvm-%n
1 : 3755990816 { 0xdfdfdf20 -538976480 -1.74899673e64 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 257798131 ] -> 223, [ 257798132; 257798132 ] -> 32, [ 257798133; 2140659455 ] -> 223, [ 2140659456; 2140659459 ] -> 0, [ 2140659460; 3078290487 ] -> 223, [ 3078290488; 3078290488 ] -> 0, [ 3078290489; 3078290489 ] -> 223, [ 3078290490; 3078290490 ] -> 151, [ 3078290491; 3078290491 ] -> 127, [ 3078290492; 4294967295 ] -> 223, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 257798131 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 257798132; 257798135 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 257798136; 3078290487 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3078290488; 3078290491 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3078290492; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 257798132 { 0xf5daff4 +1.73193216e159 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3078290488 { 0xb77afc38 -1216676808 -1.96082210e239 } : BV:32
=input.spec-%var-i-0.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-ret-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-8.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 193259268 { 0xb84e704 +1.3830003e152 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 257798132 { 0xf5daff4 +1.73193216e159 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 257798135 { 0xf5daff7 +1.73193252e159 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3078290488 { 0xb77afc38 -1216676808 -1.96082210e239 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3078290491 { 0xb77afc3b -1216676805 -1.96082246e239 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 3755990815 ] -> true, [ 3755990816; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : Lambda97 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 2140659456 { 0x7f97df00 +1.18649291e128 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 2140659457 { 0x7f97df01 +1.18649303e128 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 3078290490 { 0xb77afc3a -1216676806 -1.96082234e239 } : BV:32
13 : eq(8, 12) : BOOL
14 : 151 { 0x97 -105 } : BV:8
15 : 257798132 { 0xf5daff4 +1.73193216e159 } : BV:32
16 : eq(8, 15) : BOOL
17 : 32 { 0x20 } : BV:8
18 : 2140659459 { 0x7f97df03 +1.18649327e128 } : BV:32
19 : eq(8, 18) : BOOL
20 : 2140659458 { 0x7f97df02 +1.18649315e128 } : BV:32
21 : eq(8, 20) : BOOL
22 : eq(8, 7) : BOOL
23 : 3078290491 { 0xb77afc3b -1216676805 -1.96082246e239 } : BV:32
24 : eq(8, 23) : BOOL
25 : 127 { 0x7f } : BV:8
26 : 3078290488 { 0xb77afc38 -1216676808 -1.96082210e239 } : BV:32
27 : eq(8, 26) : BOOL
28 : 223 { 0xdf -33 } : BV:8
29 : ite(27, 11, 28) : BV:8
30 : ite(24, 25, 29) : BV:8
31 : ite(22, 11, 30) : BV:8
32 : ite(21, 11, 31) : BV:8
33 : ite(19, 11, 32) : BV:8
34 : ite(16, 17, 33) : BV:8
35 : ite(13, 14, 34) : BV:8
36 : ite(10, 11, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 6, 7) : BV:32
39 : eq(38, 9) : BOOL
40 : eq(38, 12) : BOOL
41 : eq(38, 15) : BOOL
42 : eq(38, 18) : BOOL
43 : eq(38, 20) : BOOL
44 : eq(38, 7) : BOOL
45 : eq(38, 23) : BOOL
46 : eq(38, 26) : BOOL
47 : ite(46, 11, 28) : BV:8
48 : ite(45, 25, 47) : BV:8
49 : ite(44, 11, 48) : BV:8
50 : ite(43, 11, 49) : BV:8
51 : ite(42, 11, 50) : BV:8
52 : ite(41, 17, 51) : BV:8
53 : ite(40, 14, 52) : BV:8
54 : ite(39, 11, 53) : BV:8
55 : 1 { 0x1 +1.11e129 } : BV:32
56 : bvadd(55, 6, 7) : BV:32
57 : eq(56, 9) : BOOL
58 : eq(56, 12) : BOOL
59 : eq(56, 15) : BOOL
60 : eq(56, 18) : BOOL
61 : eq(56, 20) : BOOL
62 : eq(56, 7) : BOOL
63 : eq(56, 23) : BOOL
64 : eq(56, 26) : BOOL
65 : ite(64, 11, 28) : BV:8
66 : ite(63, 25, 65) : BV:8
67 : ite(62, 11, 66) : BV:8
68 : ite(61, 11, 67) : BV:8
69 : ite(60, 11, 68) : BV:8
70 : ite(59, 17, 69) : BV:8
71 : ite(58, 14, 70) : BV:8
72 : ite(57, 11, 71) : BV:8
73 : bvadd(6, 7) : BV:32
74 : eq(73, 9) : BOOL
75 : eq(73, 12) : BOOL
76 : eq(73, 15) : BOOL
77 : eq(73, 18) : BOOL
78 : eq(73, 20) : BOOL
79 : eq(73, 7) : BOOL
80 : eq(73, 23) : BOOL
81 : eq(73, 26) : BOOL
82 : ite(81, 11, 28) : BV:8
83 : ite(80, 25, 82) : BV:8
84 : ite(79, 11, 83) : BV:8
85 : ite(78, 11, 84) : BV:8
86 : ite(77, 11, 85) : BV:8
87 : ite(76, 17, 86) : BV:8
88 : ite(75, 14, 87) : BV:8
89 : ite(74, 11, 88) : BV:8
90 : bvconcat(36, 54, 72, 89) : BV:32
91 : ite(3, 2, 90) : BV:32
92 : lambda(1, 91) : FUNCTION[BV:32 -> BV:32]
93 : sym_const(92) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry.0.1
1 : ([ 0; 3755990815 ] -> true, [ 3755990816; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L2%7%bbentry.1.1
1 : Lambda99 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 2140659456 { 0x7f97df00 +1.18649291e128 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 2140659457 { 0x7f97df01 +1.18649303e128 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 3078290490 { 0xb77afc3a -1216676806 -1.96082234e239 } : BV:32
13 : eq(8, 12) : BOOL
14 : 151 { 0x97 -105 } : BV:8
15 : 257798132 { 0xf5daff4 +1.73193216e159 } : BV:32
16 : eq(8, 15) : BOOL
17 : 32 { 0x20 } : BV:8
18 : 2140659459 { 0x7f97df03 +1.18649327e128 } : BV:32
19 : eq(8, 18) : BOOL
20 : 2140659458 { 0x7f97df02 +1.18649315e128 } : BV:32
21 : eq(8, 20) : BOOL
22 : eq(8, 7) : BOOL
23 : 3078290491 { 0xb77afc3b -1216676805 -1.96082246e239 } : BV:32
24 : eq(8, 23) : BOOL
25 : 127 { 0x7f } : BV:8
26 : 3078290488 { 0xb77afc38 -1216676808 -1.96082210e239 } : BV:32
27 : eq(8, 26) : BOOL
28 : 223 { 0xdf -33 } : BV:8
29 : ite(27, 11, 28) : BV:8
30 : ite(24, 25, 29) : BV:8
31 : ite(22, 11, 30) : BV:8
32 : ite(21, 11, 31) : BV:8
33 : ite(19, 11, 32) : BV:8
34 : ite(16, 17, 33) : BV:8
35 : ite(13, 14, 34) : BV:8
36 : ite(10, 11, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 6, 7) : BV:32
39 : eq(38, 9) : BOOL
40 : eq(38, 12) : BOOL
41 : eq(38, 15) : BOOL
42 : eq(38, 18) : BOOL
43 : eq(38, 20) : BOOL
44 : eq(38, 7) : BOOL
45 : eq(38, 23) : BOOL
46 : eq(38, 26) : BOOL
47 : ite(46, 11, 28) : BV:8
48 : ite(45, 25, 47) : BV:8
49 : ite(44, 11, 48) : BV:8
50 : ite(43, 11, 49) : BV:8
51 : ite(42, 11, 50) : BV:8
52 : ite(41, 17, 51) : BV:8
53 : ite(40, 14, 52) : BV:8
54 : ite(39, 11, 53) : BV:8
55 : 1 { 0x1 +1.11e129 } : BV:32
56 : bvadd(55, 6, 7) : BV:32
57 : eq(56, 9) : BOOL
58 : eq(56, 12) : BOOL
59 : eq(56, 15) : BOOL
60 : eq(56, 18) : BOOL
61 : eq(56, 20) : BOOL
62 : eq(56, 7) : BOOL
63 : eq(56, 23) : BOOL
64 : eq(56, 26) : BOOL
65 : ite(64, 11, 28) : BV:8
66 : ite(63, 25, 65) : BV:8
67 : ite(62, 11, 66) : BV:8
68 : ite(61, 11, 67) : BV:8
69 : ite(60, 11, 68) : BV:8
70 : ite(59, 17, 69) : BV:8
71 : ite(58, 14, 70) : BV:8
72 : ite(57, 11, 71) : BV:8
73 : bvadd(6, 7) : BV:32
74 : eq(73, 9) : BOOL
75 : eq(73, 12) : BOOL
76 : eq(73, 15) : BOOL
77 : eq(73, 18) : BOOL
78 : eq(73, 20) : BOOL
79 : eq(73, 7) : BOOL
80 : eq(73, 23) : BOOL
81 : eq(73, 26) : BOOL
82 : ite(81, 11, 28) : BV:8
83 : ite(80, 25, 82) : BV:8
84 : ite(79, 11, 83) : BV:8
85 : ite(78, 11, 84) : BV:8
86 : ite(77, 11, 85) : BV:8
87 : ite(76, 17, 86) : BV:8
88 : ite(75, 14, 87) : BV:8
89 : ite(74, 11, 88) : BV:8
90 : bvconcat(36, 54, 72, 89) : BV:32
91 : ite(3, 2, 90) : BV:32
92 : ite(3, 2, 91) : BV:32
93 : lambda(1, 92) : FUNCTION[BV:32 -> BV:32]
94 : sym_const(93) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
1795444310
=counter_example_end
=global nodece 15 num_edges_traversed 2
=global nodece 15 nodece_visted_pcs: 
L2%7%bbentry_Lfor.cond%1%bbentry
=global nodece 16
=global nodece 16 nodece z3.ce720.num_edges_traversed3
=global nodece 16 nodece_path
=global nodece 16 nodece_path.graph_edge_composition
(L2%7%bbentry_Lfor.cond%1%bbentry=>L2%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 16 nodece_cached_counterexample
=counter_example_begin z3.ce720 7499282d4d77b75f5d54eb4b508bf77
=input.spec-%var-x-1
1 : Lambda112 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3755990815 { 0xdfdfdf1f -538976481 -1.74899661e64 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3755990816 { 0xdfdfdf20 -538976480 -1.74899673e64 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda113 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 2140659456 { 0x7f97df00 +1.18649291e128 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 2140659457 { 0x7f97df01 +1.18649303e128 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 3078290490 { 0xb77afc3a -1216676806 -1.96082234e239 } : BV:32
28 : eq(23, 27) : BOOL
29 : 151 { 0x97 -105 } : BV:8
30 : 257798132 { 0xf5daff4 +1.73193216e159 } : BV:32
31 : eq(23, 30) : BOOL
32 : 32 { 0x20 } : BV:8
33 : 2140659459 { 0x7f97df03 +1.18649327e128 } : BV:32
34 : eq(23, 33) : BOOL
35 : 2140659458 { 0x7f97df02 +1.18649315e128 } : BV:32
36 : eq(23, 35) : BOOL
37 : eq(23, 22) : BOOL
38 : 3078290491 { 0xb77afc3b -1216676805 -1.96082246e239 } : BV:32
39 : eq(23, 38) : BOOL
40 : 127 { 0x7f } : BV:8
41 : 3078290488 { 0xb77afc38 -1216676808 -1.96082210e239 } : BV:32
42 : eq(23, 41) : BOOL
43 : 223 { 0xdf -33 } : BV:8
44 : ite(42, 26, 43) : BV:8
45 : ite(39, 40, 44) : BV:8
46 : ite(37, 26, 45) : BV:8
47 : ite(36, 26, 46) : BV:8
48 : ite(34, 26, 47) : BV:8
49 : ite(31, 32, 48) : BV:8
50 : ite(28, 29, 49) : BV:8
51 : ite(25, 26, 50) : BV:8
52 : 2 { 0x2 +1.23e129 } : BV:32
53 : bvadd(52, 21, 22) : BV:32
54 : eq(53, 24) : BOOL
55 : eq(53, 27) : BOOL
56 : eq(53, 30) : BOOL
57 : eq(53, 33) : BOOL
58 : eq(53, 35) : BOOL
59 : eq(53, 22) : BOOL
60 : eq(53, 38) : BOOL
61 : eq(53, 41) : BOOL
62 : ite(61, 26, 43) : BV:8
63 : ite(60, 40, 62) : BV:8
64 : ite(59, 26, 63) : BV:8
65 : ite(58, 26, 64) : BV:8
66 : ite(57, 26, 65) : BV:8
67 : ite(56, 32, 66) : BV:8
68 : ite(55, 29, 67) : BV:8
69 : ite(54, 26, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 21, 22) : BV:32
72 : eq(71, 24) : BOOL
73 : eq(71, 27) : BOOL
74 : eq(71, 30) : BOOL
75 : eq(71, 33) : BOOL
76 : eq(71, 35) : BOOL
77 : eq(71, 22) : BOOL
78 : eq(71, 38) : BOOL
79 : eq(71, 41) : BOOL
80 : ite(79, 26, 43) : BV:8
81 : ite(78, 40, 80) : BV:8
82 : ite(77, 26, 81) : BV:8
83 : ite(76, 26, 82) : BV:8
84 : ite(75, 26, 83) : BV:8
85 : ite(74, 32, 84) : BV:8
86 : ite(73, 29, 85) : BV:8
87 : ite(72, 26, 86) : BV:8
88 : bvadd(21, 22) : BV:32
89 : eq(88, 24) : BOOL
90 : eq(88, 27) : BOOL
91 : eq(88, 30) : BOOL
92 : eq(88, 33) : BOOL
93 : eq(88, 35) : BOOL
94 : eq(88, 22) : BOOL
95 : eq(88, 38) : BOOL
96 : eq(88, 41) : BOOL
97 : ite(96, 26, 43) : BV:8
98 : ite(95, 40, 97) : BV:8
99 : ite(94, 26, 98) : BV:8
100 : ite(93, 26, 99) : BV:8
101 : ite(92, 26, 100) : BV:8
102 : ite(91, 32, 101) : BV:8
103 : ite(90, 29, 102) : BV:8
104 : ite(89, 26, 103) : BV:8
105 : bvconcat(51, 69, 87, 104) : BV:32
106 : ite(18, 2, 105) : BV:32
107 : lambda(17, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(16, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry
1 : Lambda112 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3755990815 { 0xdfdfdf1f -538976481 -1.74899661e64 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3755990816 { 0xdfdfdf20 -538976480 -1.74899673e64 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda113 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 2140659456 { 0x7f97df00 +1.18649291e128 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 2140659457 { 0x7f97df01 +1.18649303e128 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 3078290490 { 0xb77afc3a -1216676806 -1.96082234e239 } : BV:32
28 : eq(23, 27) : BOOL
29 : 151 { 0x97 -105 } : BV:8
30 : 257798132 { 0xf5daff4 +1.73193216e159 } : BV:32
31 : eq(23, 30) : BOOL
32 : 32 { 0x20 } : BV:8
33 : 2140659459 { 0x7f97df03 +1.18649327e128 } : BV:32
34 : eq(23, 33) : BOOL
35 : 2140659458 { 0x7f97df02 +1.18649315e128 } : BV:32
36 : eq(23, 35) : BOOL
37 : eq(23, 22) : BOOL
38 : 3078290491 { 0xb77afc3b -1216676805 -1.96082246e239 } : BV:32
39 : eq(23, 38) : BOOL
40 : 127 { 0x7f } : BV:8
41 : 3078290488 { 0xb77afc38 -1216676808 -1.96082210e239 } : BV:32
42 : eq(23, 41) : BOOL
43 : 223 { 0xdf -33 } : BV:8
44 : ite(42, 26, 43) : BV:8
45 : ite(39, 40, 44) : BV:8
46 : ite(37, 26, 45) : BV:8
47 : ite(36, 26, 46) : BV:8
48 : ite(34, 26, 47) : BV:8
49 : ite(31, 32, 48) : BV:8
50 : ite(28, 29, 49) : BV:8
51 : ite(25, 26, 50) : BV:8
52 : 2 { 0x2 +1.23e129 } : BV:32
53 : bvadd(52, 21, 22) : BV:32
54 : eq(53, 24) : BOOL
55 : eq(53, 27) : BOOL
56 : eq(53, 30) : BOOL
57 : eq(53, 33) : BOOL
58 : eq(53, 35) : BOOL
59 : eq(53, 22) : BOOL
60 : eq(53, 38) : BOOL
61 : eq(53, 41) : BOOL
62 : ite(61, 26, 43) : BV:8
63 : ite(60, 40, 62) : BV:8
64 : ite(59, 26, 63) : BV:8
65 : ite(58, 26, 64) : BV:8
66 : ite(57, 26, 65) : BV:8
67 : ite(56, 32, 66) : BV:8
68 : ite(55, 29, 67) : BV:8
69 : ite(54, 26, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 21, 22) : BV:32
72 : eq(71, 24) : BOOL
73 : eq(71, 27) : BOOL
74 : eq(71, 30) : BOOL
75 : eq(71, 33) : BOOL
76 : eq(71, 35) : BOOL
77 : eq(71, 22) : BOOL
78 : eq(71, 38) : BOOL
79 : eq(71, 41) : BOOL
80 : ite(79, 26, 43) : BV:8
81 : ite(78, 40, 80) : BV:8
82 : ite(77, 26, 81) : BV:8
83 : ite(76, 26, 82) : BV:8
84 : ite(75, 26, 83) : BV:8
85 : ite(74, 32, 84) : BV:8
86 : ite(73, 29, 85) : BV:8
87 : ite(72, 26, 86) : BV:8
88 : bvadd(21, 22) : BV:32
89 : eq(88, 24) : BOOL
90 : eq(88, 27) : BOOL
91 : eq(88, 30) : BOOL
92 : eq(88, 33) : BOOL
93 : eq(88, 35) : BOOL
94 : eq(88, 22) : BOOL
95 : eq(88, 38) : BOOL
96 : eq(88, 41) : BOOL
97 : ite(96, 26, 43) : BV:8
98 : ite(95, 40, 97) : BV:8
99 : ite(94, 26, 98) : BV:8
100 : ite(93, 26, 99) : BV:8
101 : ite(92, 26, 100) : BV:8
102 : ite(91, 32, 101) : BV:8
103 : ite(90, 29, 102) : BV:8
104 : ite(89, 26, 103) : BV:8
105 : bvconcat(51, 69, 87, 104) : BV:32
106 : ite(18, 2, 105) : BV:32
107 : lambda(17, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(16, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%x
1 : 2140659456 { 0x7f97df00 +1.18649291e128 } : BV:32
=input.dst.llvm-%n
1 : 3755990816 { 0xdfdfdf20 -538976480 -1.74899673e64 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 257798131 ] -> 223, [ 257798132; 257798132 ] -> 32, [ 257798133; 2140659455 ] -> 223, [ 2140659456; 2140659459 ] -> 0, [ 2140659460; 3078290487 ] -> 223, [ 3078290488; 3078290488 ] -> 0, [ 3078290489; 3078290489 ] -> 223, [ 3078290490; 3078290490 ] -> 151, [ 3078290491; 3078290491 ] -> 127, [ 3078290492; 4294967295 ] -> 223, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 257798131 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 257798132; 257798135 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 257798136; 3078290487 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3078290488; 3078290491 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3078290492; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 257798132 { 0xf5daff4 +1.73193216e159 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3078290488 { 0xb77afc38 -1216676808 -1.96082210e239 } : BV:32
=input.spec-%var-i-0.L2%7%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%var-ret-0.L2%7%bbentry
1 : 3755991007 { 0xdfdfdfdf -538976289 -1.74901950e64 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-8.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 3755991007 { 0xdfdfdfdf -538976289 -1.74901950e64 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 193259268 { 0xb84e704 +1.3830003e152 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 257798132 { 0xf5daff4 +1.73193216e159 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 257798135 { 0xf5daff7 +1.73193252e159 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3078290488 { 0xb77afc38 -1216676808 -1.96082210e239 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3078290491 { 0xb77afc3b -1216676805 -1.96082246e239 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 3755990815 ] -> true, [ 3755990816; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : Lambda97 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 2140659456 { 0x7f97df00 +1.18649291e128 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 2140659457 { 0x7f97df01 +1.18649303e128 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 3078290490 { 0xb77afc3a -1216676806 -1.96082234e239 } : BV:32
13 : eq(8, 12) : BOOL
14 : 151 { 0x97 -105 } : BV:8
15 : 257798132 { 0xf5daff4 +1.73193216e159 } : BV:32
16 : eq(8, 15) : BOOL
17 : 32 { 0x20 } : BV:8
18 : 2140659459 { 0x7f97df03 +1.18649327e128 } : BV:32
19 : eq(8, 18) : BOOL
20 : 2140659458 { 0x7f97df02 +1.18649315e128 } : BV:32
21 : eq(8, 20) : BOOL
22 : eq(8, 7) : BOOL
23 : 3078290491 { 0xb77afc3b -1216676805 -1.96082246e239 } : BV:32
24 : eq(8, 23) : BOOL
25 : 127 { 0x7f } : BV:8
26 : 3078290488 { 0xb77afc38 -1216676808 -1.96082210e239 } : BV:32
27 : eq(8, 26) : BOOL
28 : 223 { 0xdf -33 } : BV:8
29 : ite(27, 11, 28) : BV:8
30 : ite(24, 25, 29) : BV:8
31 : ite(22, 11, 30) : BV:8
32 : ite(21, 11, 31) : BV:8
33 : ite(19, 11, 32) : BV:8
34 : ite(16, 17, 33) : BV:8
35 : ite(13, 14, 34) : BV:8
36 : ite(10, 11, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 6, 7) : BV:32
39 : eq(38, 9) : BOOL
40 : eq(38, 12) : BOOL
41 : eq(38, 15) : BOOL
42 : eq(38, 18) : BOOL
43 : eq(38, 20) : BOOL
44 : eq(38, 7) : BOOL
45 : eq(38, 23) : BOOL
46 : eq(38, 26) : BOOL
47 : ite(46, 11, 28) : BV:8
48 : ite(45, 25, 47) : BV:8
49 : ite(44, 11, 48) : BV:8
50 : ite(43, 11, 49) : BV:8
51 : ite(42, 11, 50) : BV:8
52 : ite(41, 17, 51) : BV:8
53 : ite(40, 14, 52) : BV:8
54 : ite(39, 11, 53) : BV:8
55 : 1 { 0x1 +1.11e129 } : BV:32
56 : bvadd(55, 6, 7) : BV:32
57 : eq(56, 9) : BOOL
58 : eq(56, 12) : BOOL
59 : eq(56, 15) : BOOL
60 : eq(56, 18) : BOOL
61 : eq(56, 20) : BOOL
62 : eq(56, 7) : BOOL
63 : eq(56, 23) : BOOL
64 : eq(56, 26) : BOOL
65 : ite(64, 11, 28) : BV:8
66 : ite(63, 25, 65) : BV:8
67 : ite(62, 11, 66) : BV:8
68 : ite(61, 11, 67) : BV:8
69 : ite(60, 11, 68) : BV:8
70 : ite(59, 17, 69) : BV:8
71 : ite(58, 14, 70) : BV:8
72 : ite(57, 11, 71) : BV:8
73 : bvadd(6, 7) : BV:32
74 : eq(73, 9) : BOOL
75 : eq(73, 12) : BOOL
76 : eq(73, 15) : BOOL
77 : eq(73, 18) : BOOL
78 : eq(73, 20) : BOOL
79 : eq(73, 7) : BOOL
80 : eq(73, 23) : BOOL
81 : eq(73, 26) : BOOL
82 : ite(81, 11, 28) : BV:8
83 : ite(80, 25, 82) : BV:8
84 : ite(79, 11, 83) : BV:8
85 : ite(78, 11, 84) : BV:8
86 : ite(77, 11, 85) : BV:8
87 : ite(76, 17, 86) : BV:8
88 : ite(75, 14, 87) : BV:8
89 : ite(74, 11, 88) : BV:8
90 : bvconcat(36, 54, 72, 89) : BV:32
91 : ite(3, 2, 90) : BV:32
92 : lambda(1, 91) : FUNCTION[BV:32 -> BV:32]
93 : sym_const(92) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry.0.1
1 : ([ 0; 3755990815 ] -> true, [ 3755990816; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L2%7%bbentry.1.1
1 : Lambda99 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 2140659456 { 0x7f97df00 +1.18649291e128 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 2140659457 { 0x7f97df01 +1.18649303e128 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 3078290490 { 0xb77afc3a -1216676806 -1.96082234e239 } : BV:32
13 : eq(8, 12) : BOOL
14 : 151 { 0x97 -105 } : BV:8
15 : 257798132 { 0xf5daff4 +1.73193216e159 } : BV:32
16 : eq(8, 15) : BOOL
17 : 32 { 0x20 } : BV:8
18 : 2140659459 { 0x7f97df03 +1.18649327e128 } : BV:32
19 : eq(8, 18) : BOOL
20 : 2140659458 { 0x7f97df02 +1.18649315e128 } : BV:32
21 : eq(8, 20) : BOOL
22 : eq(8, 7) : BOOL
23 : 3078290491 { 0xb77afc3b -1216676805 -1.96082246e239 } : BV:32
24 : eq(8, 23) : BOOL
25 : 127 { 0x7f } : BV:8
26 : 3078290488 { 0xb77afc38 -1216676808 -1.96082210e239 } : BV:32
27 : eq(8, 26) : BOOL
28 : 223 { 0xdf -33 } : BV:8
29 : ite(27, 11, 28) : BV:8
30 : ite(24, 25, 29) : BV:8
31 : ite(22, 11, 30) : BV:8
32 : ite(21, 11, 31) : BV:8
33 : ite(19, 11, 32) : BV:8
34 : ite(16, 17, 33) : BV:8
35 : ite(13, 14, 34) : BV:8
36 : ite(10, 11, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 6, 7) : BV:32
39 : eq(38, 9) : BOOL
40 : eq(38, 12) : BOOL
41 : eq(38, 15) : BOOL
42 : eq(38, 18) : BOOL
43 : eq(38, 20) : BOOL
44 : eq(38, 7) : BOOL
45 : eq(38, 23) : BOOL
46 : eq(38, 26) : BOOL
47 : ite(46, 11, 28) : BV:8
48 : ite(45, 25, 47) : BV:8
49 : ite(44, 11, 48) : BV:8
50 : ite(43, 11, 49) : BV:8
51 : ite(42, 11, 50) : BV:8
52 : ite(41, 17, 51) : BV:8
53 : ite(40, 14, 52) : BV:8
54 : ite(39, 11, 53) : BV:8
55 : 1 { 0x1 +1.11e129 } : BV:32
56 : bvadd(55, 6, 7) : BV:32
57 : eq(56, 9) : BOOL
58 : eq(56, 12) : BOOL
59 : eq(56, 15) : BOOL
60 : eq(56, 18) : BOOL
61 : eq(56, 20) : BOOL
62 : eq(56, 7) : BOOL
63 : eq(56, 23) : BOOL
64 : eq(56, 26) : BOOL
65 : ite(64, 11, 28) : BV:8
66 : ite(63, 25, 65) : BV:8
67 : ite(62, 11, 66) : BV:8
68 : ite(61, 11, 67) : BV:8
69 : ite(60, 11, 68) : BV:8
70 : ite(59, 17, 69) : BV:8
71 : ite(58, 14, 70) : BV:8
72 : ite(57, 11, 71) : BV:8
73 : bvadd(6, 7) : BV:32
74 : eq(73, 9) : BOOL
75 : eq(73, 12) : BOOL
76 : eq(73, 15) : BOOL
77 : eq(73, 18) : BOOL
78 : eq(73, 20) : BOOL
79 : eq(73, 7) : BOOL
80 : eq(73, 23) : BOOL
81 : eq(73, 26) : BOOL
82 : ite(81, 11, 28) : BV:8
83 : ite(80, 25, 82) : BV:8
84 : ite(79, 11, 83) : BV:8
85 : ite(78, 11, 84) : BV:8
86 : ite(77, 11, 85) : BV:8
87 : ite(76, 17, 86) : BV:8
88 : ite(75, 14, 87) : BV:8
89 : ite(74, 11, 88) : BV:8
90 : bvconcat(36, 54, 72, 89) : BV:32
91 : ite(3, 2, 90) : BV:32
92 : ite(3, 2, 91) : BV:32
93 : lambda(1, 92) : FUNCTION[BV:32 -> BV:32]
94 : sym_const(93) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
1795444310
=counter_example_end
=global nodece 16 num_edges_traversed 3
=global nodece 16 nodece_visted_pcs: 
L2%7%bbentry_Lfor.cond%1%bbentry
=global nodece 17
=global nodece 17 nodece z3.ce739.num_edges_traversed4
=global nodece 17 nodece_path
=global nodece 17 nodece_path.graph_edge_composition
(epsilon)
=global nodece 17 nodece_cached_counterexample
=counter_example_begin z3.ce739 a5bfe5208ab9f0c96973179cc92be9
=input.spec-%var-x-1
1 : Lambda112 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3755990815 { 0xdfdfdf1f -538976481 -1.74899661e64 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3755990816 { 0xdfdfdf20 -538976480 -1.74899673e64 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda113 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 2140659456 { 0x7f97df00 +1.18649291e128 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 2140659457 { 0x7f97df01 +1.18649303e128 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 3078290490 { 0xb77afc3a -1216676806 -1.96082234e239 } : BV:32
28 : eq(23, 27) : BOOL
29 : 151 { 0x97 -105 } : BV:8
30 : 257798132 { 0xf5daff4 +1.73193216e159 } : BV:32
31 : eq(23, 30) : BOOL
32 : 32 { 0x20 } : BV:8
33 : 2140659459 { 0x7f97df03 +1.18649327e128 } : BV:32
34 : eq(23, 33) : BOOL
35 : 2140659458 { 0x7f97df02 +1.18649315e128 } : BV:32
36 : eq(23, 35) : BOOL
37 : eq(23, 22) : BOOL
38 : 3078290491 { 0xb77afc3b -1216676805 -1.96082246e239 } : BV:32
39 : eq(23, 38) : BOOL
40 : 127 { 0x7f } : BV:8
41 : 3078290488 { 0xb77afc38 -1216676808 -1.96082210e239 } : BV:32
42 : eq(23, 41) : BOOL
43 : 223 { 0xdf -33 } : BV:8
44 : ite(42, 26, 43) : BV:8
45 : ite(39, 40, 44) : BV:8
46 : ite(37, 26, 45) : BV:8
47 : ite(36, 26, 46) : BV:8
48 : ite(34, 26, 47) : BV:8
49 : ite(31, 32, 48) : BV:8
50 : ite(28, 29, 49) : BV:8
51 : ite(25, 26, 50) : BV:8
52 : 2 { 0x2 +1.23e129 } : BV:32
53 : bvadd(52, 21, 22) : BV:32
54 : eq(53, 24) : BOOL
55 : eq(53, 27) : BOOL
56 : eq(53, 30) : BOOL
57 : eq(53, 33) : BOOL
58 : eq(53, 35) : BOOL
59 : eq(53, 22) : BOOL
60 : eq(53, 38) : BOOL
61 : eq(53, 41) : BOOL
62 : ite(61, 26, 43) : BV:8
63 : ite(60, 40, 62) : BV:8
64 : ite(59, 26, 63) : BV:8
65 : ite(58, 26, 64) : BV:8
66 : ite(57, 26, 65) : BV:8
67 : ite(56, 32, 66) : BV:8
68 : ite(55, 29, 67) : BV:8
69 : ite(54, 26, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 21, 22) : BV:32
72 : eq(71, 24) : BOOL
73 : eq(71, 27) : BOOL
74 : eq(71, 30) : BOOL
75 : eq(71, 33) : BOOL
76 : eq(71, 35) : BOOL
77 : eq(71, 22) : BOOL
78 : eq(71, 38) : BOOL
79 : eq(71, 41) : BOOL
80 : ite(79, 26, 43) : BV:8
81 : ite(78, 40, 80) : BV:8
82 : ite(77, 26, 81) : BV:8
83 : ite(76, 26, 82) : BV:8
84 : ite(75, 26, 83) : BV:8
85 : ite(74, 32, 84) : BV:8
86 : ite(73, 29, 85) : BV:8
87 : ite(72, 26, 86) : BV:8
88 : bvadd(21, 22) : BV:32
89 : eq(88, 24) : BOOL
90 : eq(88, 27) : BOOL
91 : eq(88, 30) : BOOL
92 : eq(88, 33) : BOOL
93 : eq(88, 35) : BOOL
94 : eq(88, 22) : BOOL
95 : eq(88, 38) : BOOL
96 : eq(88, 41) : BOOL
97 : ite(96, 26, 43) : BV:8
98 : ite(95, 40, 97) : BV:8
99 : ite(94, 26, 98) : BV:8
100 : ite(93, 26, 99) : BV:8
101 : ite(92, 26, 100) : BV:8
102 : ite(91, 32, 101) : BV:8
103 : ite(90, 29, 102) : BV:8
104 : ite(89, 26, 103) : BV:8
105 : bvconcat(51, 69, 87, 104) : BV:32
106 : ite(18, 2, 105) : BV:32
107 : lambda(17, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(16, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry
1 : Lambda112 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3755990815 { 0xdfdfdf1f -538976481 -1.74899661e64 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3755990816 { 0xdfdfdf20 -538976480 -1.74899673e64 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda113 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 2140659456 { 0x7f97df00 +1.18649291e128 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 2140659457 { 0x7f97df01 +1.18649303e128 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 3078290490 { 0xb77afc3a -1216676806 -1.96082234e239 } : BV:32
28 : eq(23, 27) : BOOL
29 : 151 { 0x97 -105 } : BV:8
30 : 257798132 { 0xf5daff4 +1.73193216e159 } : BV:32
31 : eq(23, 30) : BOOL
32 : 32 { 0x20 } : BV:8
33 : 2140659459 { 0x7f97df03 +1.18649327e128 } : BV:32
34 : eq(23, 33) : BOOL
35 : 2140659458 { 0x7f97df02 +1.18649315e128 } : BV:32
36 : eq(23, 35) : BOOL
37 : eq(23, 22) : BOOL
38 : 3078290491 { 0xb77afc3b -1216676805 -1.96082246e239 } : BV:32
39 : eq(23, 38) : BOOL
40 : 127 { 0x7f } : BV:8
41 : 3078290488 { 0xb77afc38 -1216676808 -1.96082210e239 } : BV:32
42 : eq(23, 41) : BOOL
43 : 223 { 0xdf -33 } : BV:8
44 : ite(42, 26, 43) : BV:8
45 : ite(39, 40, 44) : BV:8
46 : ite(37, 26, 45) : BV:8
47 : ite(36, 26, 46) : BV:8
48 : ite(34, 26, 47) : BV:8
49 : ite(31, 32, 48) : BV:8
50 : ite(28, 29, 49) : BV:8
51 : ite(25, 26, 50) : BV:8
52 : 2 { 0x2 +1.23e129 } : BV:32
53 : bvadd(52, 21, 22) : BV:32
54 : eq(53, 24) : BOOL
55 : eq(53, 27) : BOOL
56 : eq(53, 30) : BOOL
57 : eq(53, 33) : BOOL
58 : eq(53, 35) : BOOL
59 : eq(53, 22) : BOOL
60 : eq(53, 38) : BOOL
61 : eq(53, 41) : BOOL
62 : ite(61, 26, 43) : BV:8
63 : ite(60, 40, 62) : BV:8
64 : ite(59, 26, 63) : BV:8
65 : ite(58, 26, 64) : BV:8
66 : ite(57, 26, 65) : BV:8
67 : ite(56, 32, 66) : BV:8
68 : ite(55, 29, 67) : BV:8
69 : ite(54, 26, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 21, 22) : BV:32
72 : eq(71, 24) : BOOL
73 : eq(71, 27) : BOOL
74 : eq(71, 30) : BOOL
75 : eq(71, 33) : BOOL
76 : eq(71, 35) : BOOL
77 : eq(71, 22) : BOOL
78 : eq(71, 38) : BOOL
79 : eq(71, 41) : BOOL
80 : ite(79, 26, 43) : BV:8
81 : ite(78, 40, 80) : BV:8
82 : ite(77, 26, 81) : BV:8
83 : ite(76, 26, 82) : BV:8
84 : ite(75, 26, 83) : BV:8
85 : ite(74, 32, 84) : BV:8
86 : ite(73, 29, 85) : BV:8
87 : ite(72, 26, 86) : BV:8
88 : bvadd(21, 22) : BV:32
89 : eq(88, 24) : BOOL
90 : eq(88, 27) : BOOL
91 : eq(88, 30) : BOOL
92 : eq(88, 33) : BOOL
93 : eq(88, 35) : BOOL
94 : eq(88, 22) : BOOL
95 : eq(88, 38) : BOOL
96 : eq(88, 41) : BOOL
97 : ite(96, 26, 43) : BV:8
98 : ite(95, 40, 97) : BV:8
99 : ite(94, 26, 98) : BV:8
100 : ite(93, 26, 99) : BV:8
101 : ite(92, 26, 100) : BV:8
102 : ite(91, 32, 101) : BV:8
103 : ite(90, 29, 102) : BV:8
104 : ite(89, 26, 103) : BV:8
105 : bvconcat(51, 69, 87, 104) : BV:32
106 : ite(18, 2, 105) : BV:32
107 : lambda(17, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(16, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%x
1 : 2140659456 { 0x7f97df00 +1.18649291e128 } : BV:32
=input.dst.llvm-%n
1 : 3755990816 { 0xdfdfdf20 -538976480 -1.74899673e64 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 257798131 ] -> 223, [ 257798132; 257798132 ] -> 32, [ 257798133; 2140659455 ] -> 223, [ 2140659456; 2140659459 ] -> 0, [ 2140659460; 3078290487 ] -> 223, [ 3078290488; 3078290488 ] -> 0, [ 3078290489; 3078290489 ] -> 223, [ 3078290490; 3078290490 ] -> 151, [ 3078290491; 3078290491 ] -> 127, [ 3078290492; 4294967295 ] -> 223, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 257798131 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 257798132; 257798135 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 257798136; 3078290487 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3078290488; 3078290491 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3078290492; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 257798132 { 0xf5daff4 +1.73193216e159 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3078290488 { 0xb77afc38 -1216676808 -1.96082210e239 } : BV:32
=input.spec-%var-i-0.L2%7%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-ret-0.L2%7%bbentry
1 : 3217014718 { 0xbfbfbfbe -1077952578 -1.49803900e0 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-8.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 3217014718 { 0xbfbfbfbe -1077952578 -1.49803900e0 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 193259268 { 0xb84e704 +1.3830003e152 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 257798132 { 0xf5daff4 +1.73193216e159 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 257798135 { 0xf5daff7 +1.73193252e159 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3078290488 { 0xb77afc38 -1216676808 -1.96082210e239 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3078290491 { 0xb77afc3b -1216676805 -1.96082246e239 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 3755990815 ] -> true, [ 3755990816; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : Lambda97 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 2140659456 { 0x7f97df00 +1.18649291e128 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 2140659457 { 0x7f97df01 +1.18649303e128 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 3078290490 { 0xb77afc3a -1216676806 -1.96082234e239 } : BV:32
13 : eq(8, 12) : BOOL
14 : 151 { 0x97 -105 } : BV:8
15 : 257798132 { 0xf5daff4 +1.73193216e159 } : BV:32
16 : eq(8, 15) : BOOL
17 : 32 { 0x20 } : BV:8
18 : 2140659459 { 0x7f97df03 +1.18649327e128 } : BV:32
19 : eq(8, 18) : BOOL
20 : 2140659458 { 0x7f97df02 +1.18649315e128 } : BV:32
21 : eq(8, 20) : BOOL
22 : eq(8, 7) : BOOL
23 : 3078290491 { 0xb77afc3b -1216676805 -1.96082246e239 } : BV:32
24 : eq(8, 23) : BOOL
25 : 127 { 0x7f } : BV:8
26 : 3078290488 { 0xb77afc38 -1216676808 -1.96082210e239 } : BV:32
27 : eq(8, 26) : BOOL
28 : 223 { 0xdf -33 } : BV:8
29 : ite(27, 11, 28) : BV:8
30 : ite(24, 25, 29) : BV:8
31 : ite(22, 11, 30) : BV:8
32 : ite(21, 11, 31) : BV:8
33 : ite(19, 11, 32) : BV:8
34 : ite(16, 17, 33) : BV:8
35 : ite(13, 14, 34) : BV:8
36 : ite(10, 11, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 6, 7) : BV:32
39 : eq(38, 9) : BOOL
40 : eq(38, 12) : BOOL
41 : eq(38, 15) : BOOL
42 : eq(38, 18) : BOOL
43 : eq(38, 20) : BOOL
44 : eq(38, 7) : BOOL
45 : eq(38, 23) : BOOL
46 : eq(38, 26) : BOOL
47 : ite(46, 11, 28) : BV:8
48 : ite(45, 25, 47) : BV:8
49 : ite(44, 11, 48) : BV:8
50 : ite(43, 11, 49) : BV:8
51 : ite(42, 11, 50) : BV:8
52 : ite(41, 17, 51) : BV:8
53 : ite(40, 14, 52) : BV:8
54 : ite(39, 11, 53) : BV:8
55 : 1 { 0x1 +1.11e129 } : BV:32
56 : bvadd(55, 6, 7) : BV:32
57 : eq(56, 9) : BOOL
58 : eq(56, 12) : BOOL
59 : eq(56, 15) : BOOL
60 : eq(56, 18) : BOOL
61 : eq(56, 20) : BOOL
62 : eq(56, 7) : BOOL
63 : eq(56, 23) : BOOL
64 : eq(56, 26) : BOOL
65 : ite(64, 11, 28) : BV:8
66 : ite(63, 25, 65) : BV:8
67 : ite(62, 11, 66) : BV:8
68 : ite(61, 11, 67) : BV:8
69 : ite(60, 11, 68) : BV:8
70 : ite(59, 17, 69) : BV:8
71 : ite(58, 14, 70) : BV:8
72 : ite(57, 11, 71) : BV:8
73 : bvadd(6, 7) : BV:32
74 : eq(73, 9) : BOOL
75 : eq(73, 12) : BOOL
76 : eq(73, 15) : BOOL
77 : eq(73, 18) : BOOL
78 : eq(73, 20) : BOOL
79 : eq(73, 7) : BOOL
80 : eq(73, 23) : BOOL
81 : eq(73, 26) : BOOL
82 : ite(81, 11, 28) : BV:8
83 : ite(80, 25, 82) : BV:8
84 : ite(79, 11, 83) : BV:8
85 : ite(78, 11, 84) : BV:8
86 : ite(77, 11, 85) : BV:8
87 : ite(76, 17, 86) : BV:8
88 : ite(75, 14, 87) : BV:8
89 : ite(74, 11, 88) : BV:8
90 : bvconcat(36, 54, 72, 89) : BV:32
91 : ite(3, 2, 90) : BV:32
92 : lambda(1, 91) : FUNCTION[BV:32 -> BV:32]
93 : sym_const(92) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry.0.1
1 : ([ 0; 3755990815 ] -> true, [ 3755990816; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L2%7%bbentry.1.1
1 : Lambda99 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 2140659456 { 0x7f97df00 +1.18649291e128 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 2140659457 { 0x7f97df01 +1.18649303e128 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 3078290490 { 0xb77afc3a -1216676806 -1.96082234e239 } : BV:32
13 : eq(8, 12) : BOOL
14 : 151 { 0x97 -105 } : BV:8
15 : 257798132 { 0xf5daff4 +1.73193216e159 } : BV:32
16 : eq(8, 15) : BOOL
17 : 32 { 0x20 } : BV:8
18 : 2140659459 { 0x7f97df03 +1.18649327e128 } : BV:32
19 : eq(8, 18) : BOOL
20 : 2140659458 { 0x7f97df02 +1.18649315e128 } : BV:32
21 : eq(8, 20) : BOOL
22 : eq(8, 7) : BOOL
23 : 3078290491 { 0xb77afc3b -1216676805 -1.96082246e239 } : BV:32
24 : eq(8, 23) : BOOL
25 : 127 { 0x7f } : BV:8
26 : 3078290488 { 0xb77afc38 -1216676808 -1.96082210e239 } : BV:32
27 : eq(8, 26) : BOOL
28 : 223 { 0xdf -33 } : BV:8
29 : ite(27, 11, 28) : BV:8
30 : ite(24, 25, 29) : BV:8
31 : ite(22, 11, 30) : BV:8
32 : ite(21, 11, 31) : BV:8
33 : ite(19, 11, 32) : BV:8
34 : ite(16, 17, 33) : BV:8
35 : ite(13, 14, 34) : BV:8
36 : ite(10, 11, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 6, 7) : BV:32
39 : eq(38, 9) : BOOL
40 : eq(38, 12) : BOOL
41 : eq(38, 15) : BOOL
42 : eq(38, 18) : BOOL
43 : eq(38, 20) : BOOL
44 : eq(38, 7) : BOOL
45 : eq(38, 23) : BOOL
46 : eq(38, 26) : BOOL
47 : ite(46, 11, 28) : BV:8
48 : ite(45, 25, 47) : BV:8
49 : ite(44, 11, 48) : BV:8
50 : ite(43, 11, 49) : BV:8
51 : ite(42, 11, 50) : BV:8
52 : ite(41, 17, 51) : BV:8
53 : ite(40, 14, 52) : BV:8
54 : ite(39, 11, 53) : BV:8
55 : 1 { 0x1 +1.11e129 } : BV:32
56 : bvadd(55, 6, 7) : BV:32
57 : eq(56, 9) : BOOL
58 : eq(56, 12) : BOOL
59 : eq(56, 15) : BOOL
60 : eq(56, 18) : BOOL
61 : eq(56, 20) : BOOL
62 : eq(56, 7) : BOOL
63 : eq(56, 23) : BOOL
64 : eq(56, 26) : BOOL
65 : ite(64, 11, 28) : BV:8
66 : ite(63, 25, 65) : BV:8
67 : ite(62, 11, 66) : BV:8
68 : ite(61, 11, 67) : BV:8
69 : ite(60, 11, 68) : BV:8
70 : ite(59, 17, 69) : BV:8
71 : ite(58, 14, 70) : BV:8
72 : ite(57, 11, 71) : BV:8
73 : bvadd(6, 7) : BV:32
74 : eq(73, 9) : BOOL
75 : eq(73, 12) : BOOL
76 : eq(73, 15) : BOOL
77 : eq(73, 18) : BOOL
78 : eq(73, 20) : BOOL
79 : eq(73, 7) : BOOL
80 : eq(73, 23) : BOOL
81 : eq(73, 26) : BOOL
82 : ite(81, 11, 28) : BV:8
83 : ite(80, 25, 82) : BV:8
84 : ite(79, 11, 83) : BV:8
85 : ite(78, 11, 84) : BV:8
86 : ite(77, 11, 85) : BV:8
87 : ite(76, 17, 86) : BV:8
88 : ite(75, 14, 87) : BV:8
89 : ite(74, 11, 88) : BV:8
90 : bvconcat(36, 54, 72, 89) : BV:32
91 : ite(3, 2, 90) : BV:32
92 : ite(3, 2, 91) : BV:32
93 : lambda(1, 92) : FUNCTION[BV:32 -> BV:32]
94 : sym_const(93) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
1795444310
=counter_example_end
=global nodece 17 num_edges_traversed 4
=global nodece 17 nodece_visted_pcs: 
L2%7%bbentry_Lfor.cond%1%bbentry
=global nodece 18
=global nodece 18 nodece z3.ce616.num_edges_traversed2
=global nodece 18 nodece_path
=global nodece 18 nodece_path.graph_edge_composition
(epsilon)
=global nodece 18 nodece_cached_counterexample
=counter_example_begin z3.ce616 7de91e1963cde7ea47db8a65fa72486
=input.spec-%var-x-1
1 : Lambda150 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 524551 { 0x80107 +1.6253135e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 524552 { 0x80108 +1.6253147e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda151 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 1610604296 { 0x5fffdf08 +1.99899387e64 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 3603268049 { 0xd6c581d1 -691699247 -1.54302418e46 } : BV:32
25 : eq(23, 24) : BOOL
26 : 1 { 0x1 } : BV:8
27 : 2256135706 { 0x8679e61a -2038831590 -1.95233464e141 } : BV:32
28 : eq(23, 27) : BOOL
29 : 255 { 0xff -1 } : BV:8
30 : 1610604297 { 0x5fffdf09 +1.99899399e64 } : BV:32
31 : eq(23, 30) : BOOL
32 : 0 { 0x0 } : BV:8
33 : 1610604299 { 0x5fffdf0b +1.99899423e64 } : BV:32
34 : eq(23, 33) : BOOL
35 : 3603268051 { 0xd6c581d3 -691699245 -1.54302442e46 } : BV:32
36 : eq(23, 35) : BOOL
37 : 2256135705 { 0x8679e619 -2038831591 -1.95233452e141 } : BV:32
38 : eq(23, 37) : BOOL
39 : 223 { 0xdf -33 } : BV:8
40 : 1610604298 { 0x5fffdf0a +1.99899411e64 } : BV:32
41 : eq(23, 40) : BOOL
42 : eq(23, 22) : BOOL
43 : 2256135707 { 0x8679e61b -2038831589 -1.95233476e141 } : BV:32
44 : eq(23, 43) : BOOL
45 : 95 { 0x5f } : BV:8
46 : 8 { 0x8 } : BV:8
47 : ite(44, 45, 46) : BV:8
48 : ite(42, 32, 47) : BV:8
49 : ite(41, 32, 48) : BV:8
50 : ite(38, 39, 49) : BV:8
51 : ite(36, 32, 50) : BV:8
52 : ite(34, 32, 51) : BV:8
53 : ite(31, 32, 52) : BV:8
54 : ite(28, 29, 53) : BV:8
55 : ite(25, 26, 54) : BV:8
56 : 2 { 0x2 +1.23e129 } : BV:32
57 : bvadd(56, 21, 22) : BV:32
58 : eq(57, 24) : BOOL
59 : eq(57, 27) : BOOL
60 : eq(57, 30) : BOOL
61 : eq(57, 33) : BOOL
62 : eq(57, 35) : BOOL
63 : eq(57, 37) : BOOL
64 : eq(57, 40) : BOOL
65 : eq(57, 22) : BOOL
66 : eq(57, 43) : BOOL
67 : ite(66, 45, 46) : BV:8
68 : ite(65, 32, 67) : BV:8
69 : ite(64, 32, 68) : BV:8
70 : ite(63, 39, 69) : BV:8
71 : ite(62, 32, 70) : BV:8
72 : ite(61, 32, 71) : BV:8
73 : ite(60, 32, 72) : BV:8
74 : ite(59, 29, 73) : BV:8
75 : ite(58, 26, 74) : BV:8
76 : 1 { 0x1 +1.11e129 } : BV:32
77 : bvadd(76, 21, 22) : BV:32
78 : eq(77, 24) : BOOL
79 : eq(77, 27) : BOOL
80 : eq(77, 30) : BOOL
81 : eq(77, 33) : BOOL
82 : eq(77, 35) : BOOL
83 : eq(77, 37) : BOOL
84 : eq(77, 40) : BOOL
85 : eq(77, 22) : BOOL
86 : eq(77, 43) : BOOL
87 : ite(86, 45, 46) : BV:8
88 : ite(85, 32, 87) : BV:8
89 : ite(84, 32, 88) : BV:8
90 : ite(83, 39, 89) : BV:8
91 : ite(82, 32, 90) : BV:8
92 : ite(81, 32, 91) : BV:8
93 : ite(80, 32, 92) : BV:8
94 : ite(79, 29, 93) : BV:8
95 : ite(78, 26, 94) : BV:8
96 : bvadd(21, 22) : BV:32
97 : eq(96, 24) : BOOL
98 : eq(96, 27) : BOOL
99 : eq(96, 30) : BOOL
100 : eq(96, 33) : BOOL
101 : eq(96, 35) : BOOL
102 : eq(96, 37) : BOOL
103 : eq(96, 40) : BOOL
104 : eq(96, 22) : BOOL
105 : eq(96, 43) : BOOL
106 : ite(105, 45, 46) : BV:8
107 : ite(104, 32, 106) : BV:8
108 : ite(103, 32, 107) : BV:8
109 : ite(102, 39, 108) : BV:8
110 : ite(101, 32, 109) : BV:8
111 : ite(100, 32, 110) : BV:8
112 : ite(99, 32, 111) : BV:8
113 : ite(98, 29, 112) : BV:8
114 : ite(97, 26, 113) : BV:8
115 : bvconcat(55, 75, 95, 114) : BV:32
116 : ite(18, 2, 115) : BV:32
117 : lambda(17, 116) : FUNCTION[BV:32 -> BV:32]
118 : map(16, 117) : MAP[BV:32 -> BV:32]
119 : sym_const(118) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry
1 : Lambda150 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 524551 { 0x80107 +1.6253135e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 524552 { 0x80108 +1.6253147e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda151 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 1610604296 { 0x5fffdf08 +1.99899387e64 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 3603268049 { 0xd6c581d1 -691699247 -1.54302418e46 } : BV:32
25 : eq(23, 24) : BOOL
26 : 1 { 0x1 } : BV:8
27 : 2256135706 { 0x8679e61a -2038831590 -1.95233464e141 } : BV:32
28 : eq(23, 27) : BOOL
29 : 255 { 0xff -1 } : BV:8
30 : 1610604297 { 0x5fffdf09 +1.99899399e64 } : BV:32
31 : eq(23, 30) : BOOL
32 : 0 { 0x0 } : BV:8
33 : 1610604299 { 0x5fffdf0b +1.99899423e64 } : BV:32
34 : eq(23, 33) : BOOL
35 : 3603268051 { 0xd6c581d3 -691699245 -1.54302442e46 } : BV:32
36 : eq(23, 35) : BOOL
37 : 2256135705 { 0x8679e619 -2038831591 -1.95233452e141 } : BV:32
38 : eq(23, 37) : BOOL
39 : 223 { 0xdf -33 } : BV:8
40 : 1610604298 { 0x5fffdf0a +1.99899411e64 } : BV:32
41 : eq(23, 40) : BOOL
42 : eq(23, 22) : BOOL
43 : 2256135707 { 0x8679e61b -2038831589 -1.95233476e141 } : BV:32
44 : eq(23, 43) : BOOL
45 : 95 { 0x5f } : BV:8
46 : 8 { 0x8 } : BV:8
47 : ite(44, 45, 46) : BV:8
48 : ite(42, 32, 47) : BV:8
49 : ite(41, 32, 48) : BV:8
50 : ite(38, 39, 49) : BV:8
51 : ite(36, 32, 50) : BV:8
52 : ite(34, 32, 51) : BV:8
53 : ite(31, 32, 52) : BV:8
54 : ite(28, 29, 53) : BV:8
55 : ite(25, 26, 54) : BV:8
56 : 2 { 0x2 +1.23e129 } : BV:32
57 : bvadd(56, 21, 22) : BV:32
58 : eq(57, 24) : BOOL
59 : eq(57, 27) : BOOL
60 : eq(57, 30) : BOOL
61 : eq(57, 33) : BOOL
62 : eq(57, 35) : BOOL
63 : eq(57, 37) : BOOL
64 : eq(57, 40) : BOOL
65 : eq(57, 22) : BOOL
66 : eq(57, 43) : BOOL
67 : ite(66, 45, 46) : BV:8
68 : ite(65, 32, 67) : BV:8
69 : ite(64, 32, 68) : BV:8
70 : ite(63, 39, 69) : BV:8
71 : ite(62, 32, 70) : BV:8
72 : ite(61, 32, 71) : BV:8
73 : ite(60, 32, 72) : BV:8
74 : ite(59, 29, 73) : BV:8
75 : ite(58, 26, 74) : BV:8
76 : 1 { 0x1 +1.11e129 } : BV:32
77 : bvadd(76, 21, 22) : BV:32
78 : eq(77, 24) : BOOL
79 : eq(77, 27) : BOOL
80 : eq(77, 30) : BOOL
81 : eq(77, 33) : BOOL
82 : eq(77, 35) : BOOL
83 : eq(77, 37) : BOOL
84 : eq(77, 40) : BOOL
85 : eq(77, 22) : BOOL
86 : eq(77, 43) : BOOL
87 : ite(86, 45, 46) : BV:8
88 : ite(85, 32, 87) : BV:8
89 : ite(84, 32, 88) : BV:8
90 : ite(83, 39, 89) : BV:8
91 : ite(82, 32, 90) : BV:8
92 : ite(81, 32, 91) : BV:8
93 : ite(80, 32, 92) : BV:8
94 : ite(79, 29, 93) : BV:8
95 : ite(78, 26, 94) : BV:8
96 : bvadd(21, 22) : BV:32
97 : eq(96, 24) : BOOL
98 : eq(96, 27) : BOOL
99 : eq(96, 30) : BOOL
100 : eq(96, 33) : BOOL
101 : eq(96, 35) : BOOL
102 : eq(96, 37) : BOOL
103 : eq(96, 40) : BOOL
104 : eq(96, 22) : BOOL
105 : eq(96, 43) : BOOL
106 : ite(105, 45, 46) : BV:8
107 : ite(104, 32, 106) : BV:8
108 : ite(103, 32, 107) : BV:8
109 : ite(102, 39, 108) : BV:8
110 : ite(101, 32, 109) : BV:8
111 : ite(100, 32, 110) : BV:8
112 : ite(99, 32, 111) : BV:8
113 : ite(98, 29, 112) : BV:8
114 : ite(97, 26, 113) : BV:8
115 : bvconcat(55, 75, 95, 114) : BV:32
116 : ite(18, 2, 115) : BV:32
117 : lambda(17, 116) : FUNCTION[BV:32 -> BV:32]
118 : map(16, 117) : MAP[BV:32 -> BV:32]
119 : sym_const(118) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%x
1 : 1610604296 { 0x5fffdf08 +1.99899387e64 } : BV:32
=input.dst.llvm-%n
1 : 524552 { 0x80108 +1.6253147e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1610604295 ] -> 8, [ 1610604296; 1610604299 ] -> 0, [ 1610604300; 2256135704 ] -> 8, [ 2256135705; 2256135705 ] -> 223, [ 2256135706; 2256135706 ] -> 255, [ 2256135707; 2256135707 ] -> 95, [ 2256135708; 3603268048 ] -> 8, [ 3603268049; 3603268049 ] -> 1, [ 3603268050; 3603268050 ] -> 8, [ 3603268051; 3603268051 ] -> 0, [ 3603268052; 4294967295 ] -> 8, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2256135703 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2256135704; 2256135707 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2256135708; 3603268047 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3603268048; 3603268051 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3603268052; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3603268048 { 0xd6c581d0 -691699248 -1.54302406e46 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2256135704 { 0x8679e618 -2038831592 -1.95233440e141 } : BV:32
=input.spec-%var-i-0.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-ret-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-8.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1407581506 { 0x53e5fd42 +1.79679131e40 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3603268048 { 0xd6c581d0 -691699248 -1.54302406e46 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3603268051 { 0xd6c581d3 -691699245 -1.54302442e46 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2256135704 { 0x8679e618 -2038831592 -1.95233440e141 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2256135707 { 0x8679e61b -2038831589 -1.95233476e141 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 524551 ] -> true, [ 524552; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : Lambda137 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 1610604296 { 0x5fffdf08 +1.99899387e64 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 3603268049 { 0xd6c581d1 -691699247 -1.54302418e46 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 2256135706 { 0x8679e61a -2038831590 -1.95233464e141 } : BV:32
13 : eq(8, 12) : BOOL
14 : 255 { 0xff -1 } : BV:8
15 : 1610604297 { 0x5fffdf09 +1.99899399e64 } : BV:32
16 : eq(8, 15) : BOOL
17 : 0 { 0x0 } : BV:8
18 : 1610604299 { 0x5fffdf0b +1.99899423e64 } : BV:32
19 : eq(8, 18) : BOOL
20 : 3603268051 { 0xd6c581d3 -691699245 -1.54302442e46 } : BV:32
21 : eq(8, 20) : BOOL
22 : 2256135705 { 0x8679e619 -2038831591 -1.95233452e141 } : BV:32
23 : eq(8, 22) : BOOL
24 : 223 { 0xdf -33 } : BV:8
25 : 1610604298 { 0x5fffdf0a +1.99899411e64 } : BV:32
26 : eq(8, 25) : BOOL
27 : eq(8, 7) : BOOL
28 : 2256135707 { 0x8679e61b -2038831589 -1.95233476e141 } : BV:32
29 : eq(8, 28) : BOOL
30 : 95 { 0x5f } : BV:8
31 : 8 { 0x8 } : BV:8
32 : ite(29, 30, 31) : BV:8
33 : ite(27, 17, 32) : BV:8
34 : ite(26, 17, 33) : BV:8
35 : ite(23, 24, 34) : BV:8
36 : ite(21, 17, 35) : BV:8
37 : ite(19, 17, 36) : BV:8
38 : ite(16, 17, 37) : BV:8
39 : ite(13, 14, 38) : BV:8
40 : ite(10, 11, 39) : BV:8
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvadd(41, 6, 7) : BV:32
43 : eq(42, 9) : BOOL
44 : eq(42, 12) : BOOL
45 : eq(42, 15) : BOOL
46 : eq(42, 18) : BOOL
47 : eq(42, 20) : BOOL
48 : eq(42, 22) : BOOL
49 : eq(42, 25) : BOOL
50 : eq(42, 7) : BOOL
51 : eq(42, 28) : BOOL
52 : ite(51, 30, 31) : BV:8
53 : ite(50, 17, 52) : BV:8
54 : ite(49, 17, 53) : BV:8
55 : ite(48, 24, 54) : BV:8
56 : ite(47, 17, 55) : BV:8
57 : ite(46, 17, 56) : BV:8
58 : ite(45, 17, 57) : BV:8
59 : ite(44, 14, 58) : BV:8
60 : ite(43, 11, 59) : BV:8
61 : 1 { 0x1 +1.11e129 } : BV:32
62 : bvadd(61, 6, 7) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 15) : BOOL
66 : eq(62, 18) : BOOL
67 : eq(62, 20) : BOOL
68 : eq(62, 22) : BOOL
69 : eq(62, 25) : BOOL
70 : eq(62, 7) : BOOL
71 : eq(62, 28) : BOOL
72 : ite(71, 30, 31) : BV:8
73 : ite(70, 17, 72) : BV:8
74 : ite(69, 17, 73) : BV:8
75 : ite(68, 24, 74) : BV:8
76 : ite(67, 17, 75) : BV:8
77 : ite(66, 17, 76) : BV:8
78 : ite(65, 17, 77) : BV:8
79 : ite(64, 14, 78) : BV:8
80 : ite(63, 11, 79) : BV:8
81 : bvadd(6, 7) : BV:32
82 : eq(81, 9) : BOOL
83 : eq(81, 12) : BOOL
84 : eq(81, 15) : BOOL
85 : eq(81, 18) : BOOL
86 : eq(81, 20) : BOOL
87 : eq(81, 22) : BOOL
88 : eq(81, 25) : BOOL
89 : eq(81, 7) : BOOL
90 : eq(81, 28) : BOOL
91 : ite(90, 30, 31) : BV:8
92 : ite(89, 17, 91) : BV:8
93 : ite(88, 17, 92) : BV:8
94 : ite(87, 24, 93) : BV:8
95 : ite(86, 17, 94) : BV:8
96 : ite(85, 17, 95) : BV:8
97 : ite(84, 17, 96) : BV:8
98 : ite(83, 14, 97) : BV:8
99 : ite(82, 11, 98) : BV:8
100 : bvconcat(40, 60, 80, 99) : BV:32
101 : ite(3, 2, 100) : BV:32
102 : lambda(1, 101) : FUNCTION[BV:32 -> BV:32]
103 : sym_const(102) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry.0.1
1 : ([ 0; 524551 ] -> true, [ 524552; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L2%7%bbentry.1.1
1 : Lambda139 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 1610604296 { 0x5fffdf08 +1.99899387e64 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 3603268049 { 0xd6c581d1 -691699247 -1.54302418e46 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 2256135706 { 0x8679e61a -2038831590 -1.95233464e141 } : BV:32
13 : eq(8, 12) : BOOL
14 : 255 { 0xff -1 } : BV:8
15 : 1610604297 { 0x5fffdf09 +1.99899399e64 } : BV:32
16 : eq(8, 15) : BOOL
17 : 0 { 0x0 } : BV:8
18 : 1610604299 { 0x5fffdf0b +1.99899423e64 } : BV:32
19 : eq(8, 18) : BOOL
20 : 3603268051 { 0xd6c581d3 -691699245 -1.54302442e46 } : BV:32
21 : eq(8, 20) : BOOL
22 : 2256135705 { 0x8679e619 -2038831591 -1.95233452e141 } : BV:32
23 : eq(8, 22) : BOOL
24 : 223 { 0xdf -33 } : BV:8
25 : 1610604298 { 0x5fffdf0a +1.99899411e64 } : BV:32
26 : eq(8, 25) : BOOL
27 : eq(8, 7) : BOOL
28 : 2256135707 { 0x8679e61b -2038831589 -1.95233476e141 } : BV:32
29 : eq(8, 28) : BOOL
30 : 95 { 0x5f } : BV:8
31 : 8 { 0x8 } : BV:8
32 : ite(29, 30, 31) : BV:8
33 : ite(27, 17, 32) : BV:8
34 : ite(26, 17, 33) : BV:8
35 : ite(23, 24, 34) : BV:8
36 : ite(21, 17, 35) : BV:8
37 : ite(19, 17, 36) : BV:8
38 : ite(16, 17, 37) : BV:8
39 : ite(13, 14, 38) : BV:8
40 : ite(10, 11, 39) : BV:8
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvadd(41, 6, 7) : BV:32
43 : eq(42, 9) : BOOL
44 : eq(42, 12) : BOOL
45 : eq(42, 15) : BOOL
46 : eq(42, 18) : BOOL
47 : eq(42, 20) : BOOL
48 : eq(42, 22) : BOOL
49 : eq(42, 25) : BOOL
50 : eq(42, 7) : BOOL
51 : eq(42, 28) : BOOL
52 : ite(51, 30, 31) : BV:8
53 : ite(50, 17, 52) : BV:8
54 : ite(49, 17, 53) : BV:8
55 : ite(48, 24, 54) : BV:8
56 : ite(47, 17, 55) : BV:8
57 : ite(46, 17, 56) : BV:8
58 : ite(45, 17, 57) : BV:8
59 : ite(44, 14, 58) : BV:8
60 : ite(43, 11, 59) : BV:8
61 : 1 { 0x1 +1.11e129 } : BV:32
62 : bvadd(61, 6, 7) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 15) : BOOL
66 : eq(62, 18) : BOOL
67 : eq(62, 20) : BOOL
68 : eq(62, 22) : BOOL
69 : eq(62, 25) : BOOL
70 : eq(62, 7) : BOOL
71 : eq(62, 28) : BOOL
72 : ite(71, 30, 31) : BV:8
73 : ite(70, 17, 72) : BV:8
74 : ite(69, 17, 73) : BV:8
75 : ite(68, 24, 74) : BV:8
76 : ite(67, 17, 75) : BV:8
77 : ite(66, 17, 76) : BV:8
78 : ite(65, 17, 77) : BV:8
79 : ite(64, 14, 78) : BV:8
80 : ite(63, 11, 79) : BV:8
81 : bvadd(6, 7) : BV:32
82 : eq(81, 9) : BOOL
83 : eq(81, 12) : BOOL
84 : eq(81, 15) : BOOL
85 : eq(81, 18) : BOOL
86 : eq(81, 20) : BOOL
87 : eq(81, 22) : BOOL
88 : eq(81, 25) : BOOL
89 : eq(81, 7) : BOOL
90 : eq(81, 28) : BOOL
91 : ite(90, 30, 31) : BV:8
92 : ite(89, 17, 91) : BV:8
93 : ite(88, 17, 92) : BV:8
94 : ite(87, 24, 93) : BV:8
95 : ite(86, 17, 94) : BV:8
96 : ite(85, 17, 95) : BV:8
97 : ite(84, 17, 96) : BV:8
98 : ite(83, 14, 97) : BV:8
99 : ite(82, 11, 98) : BV:8
100 : bvconcat(40, 60, 80, 99) : BV:32
101 : ite(3, 2, 100) : BV:32
102 : ite(3, 2, 101) : BV:32
103 : lambda(1, 102) : FUNCTION[BV:32 -> BV:32]
104 : sym_const(103) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
1027758982
=counter_example_end
=global nodece 18 num_edges_traversed 2
=global nodece 18 nodece_visted_pcs: 
L2%7%bbentry_Lfor.cond%1%bbentry
=global nodece 19
=global nodece 19 nodece z3.ce602.num_edges_traversed2
=global nodece 19 nodece_path
=global nodece 19 nodece_path.graph_edge_composition
(epsilon)
=global nodece 19 nodece_cached_counterexample
=counter_example_begin z3.ce602 a896bfd7839a41475669778ac5c392
=input.spec-%var-x-1
1 : Lambda226 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4211145472 { 0xfb00fb00 -83821824 -1.765991e119 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4211145473 { 0xfb00fb01 -83821823 -1.766003e119 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda227 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 4020501248 { 0xefa3fb00 -274466048 -1.28109741e96 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 4020501249 { 0xefa3fb01 -274466047 -1.28109753e96 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 1725816726 { 0x66dddf96 +1.73338580e78 } : BV:32
28 : eq(23, 27) : BOOL
29 : 163 { 0xa3 -93 } : BV:8
30 : 1530347496 { 0x5b373fe8 +1.43163776e55 } : BV:32
31 : eq(23, 30) : BOOL
32 : 1 { 0x1 } : BV:8
33 : 4020501251 { 0xefa3fb03 -274466045 -1.28109776e96 } : BV:32
34 : eq(23, 33) : BOOL
35 : 1530347498 { 0x5b373fea +1.43163800e55 } : BV:32
36 : eq(23, 35) : BOOL
37 : 4020501250 { 0xefa3fb02 -274466046 -1.28109765e96 } : BV:32
38 : eq(23, 37) : BOOL
39 : eq(23, 22) : BOOL
40 : 1725816727 { 0x66dddf97 +1.73338592e78 } : BV:32
41 : eq(23, 40) : BOOL
42 : 239 { 0xef -17 } : BV:8
43 : 1725816724 { 0x66dddf94 +1.73338556e78 } : BV:32
44 : eq(23, 43) : BOOL
45 : 251 { 0xfb -5 } : BV:8
46 : ite(44, 26, 45) : BV:8
47 : ite(41, 42, 46) : BV:8
48 : ite(39, 26, 47) : BV:8
49 : ite(38, 26, 48) : BV:8
50 : ite(36, 26, 49) : BV:8
51 : ite(34, 26, 50) : BV:8
52 : ite(31, 32, 51) : BV:8
53 : ite(28, 29, 52) : BV:8
54 : ite(25, 26, 53) : BV:8
55 : 2 { 0x2 +1.23e129 } : BV:32
56 : bvadd(55, 21, 22) : BV:32
57 : eq(56, 24) : BOOL
58 : eq(56, 27) : BOOL
59 : eq(56, 30) : BOOL
60 : eq(56, 33) : BOOL
61 : eq(56, 35) : BOOL
62 : eq(56, 37) : BOOL
63 : eq(56, 22) : BOOL
64 : eq(56, 40) : BOOL
65 : eq(56, 43) : BOOL
66 : ite(65, 26, 45) : BV:8
67 : ite(64, 42, 66) : BV:8
68 : ite(63, 26, 67) : BV:8
69 : ite(62, 26, 68) : BV:8
70 : ite(61, 26, 69) : BV:8
71 : ite(60, 26, 70) : BV:8
72 : ite(59, 32, 71) : BV:8
73 : ite(58, 29, 72) : BV:8
74 : ite(57, 26, 73) : BV:8
75 : 1 { 0x1 +1.11e129 } : BV:32
76 : bvadd(75, 21, 22) : BV:32
77 : eq(76, 24) : BOOL
78 : eq(76, 27) : BOOL
79 : eq(76, 30) : BOOL
80 : eq(76, 33) : BOOL
81 : eq(76, 35) : BOOL
82 : eq(76, 37) : BOOL
83 : eq(76, 22) : BOOL
84 : eq(76, 40) : BOOL
85 : eq(76, 43) : BOOL
86 : ite(85, 26, 45) : BV:8
87 : ite(84, 42, 86) : BV:8
88 : ite(83, 26, 87) : BV:8
89 : ite(82, 26, 88) : BV:8
90 : ite(81, 26, 89) : BV:8
91 : ite(80, 26, 90) : BV:8
92 : ite(79, 32, 91) : BV:8
93 : ite(78, 29, 92) : BV:8
94 : ite(77, 26, 93) : BV:8
95 : bvadd(21, 22) : BV:32
96 : eq(95, 24) : BOOL
97 : eq(95, 27) : BOOL
98 : eq(95, 30) : BOOL
99 : eq(95, 33) : BOOL
100 : eq(95, 35) : BOOL
101 : eq(95, 37) : BOOL
102 : eq(95, 22) : BOOL
103 : eq(95, 40) : BOOL
104 : eq(95, 43) : BOOL
105 : ite(104, 26, 45) : BV:8
106 : ite(103, 42, 105) : BV:8
107 : ite(102, 26, 106) : BV:8
108 : ite(101, 26, 107) : BV:8
109 : ite(100, 26, 108) : BV:8
110 : ite(99, 26, 109) : BV:8
111 : ite(98, 32, 110) : BV:8
112 : ite(97, 29, 111) : BV:8
113 : ite(96, 26, 112) : BV:8
114 : bvconcat(54, 74, 94, 113) : BV:32
115 : ite(18, 2, 114) : BV:32
116 : lambda(17, 115) : FUNCTION[BV:32 -> BV:32]
117 : map(16, 116) : MAP[BV:32 -> BV:32]
118 : sym_const(117) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry
1 : Lambda226 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4211145472 { 0xfb00fb00 -83821824 -1.765991e119 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4211145473 { 0xfb00fb01 -83821823 -1.766003e119 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda227 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 4020501248 { 0xefa3fb00 -274466048 -1.28109741e96 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 4020501249 { 0xefa3fb01 -274466047 -1.28109753e96 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 1725816726 { 0x66dddf96 +1.73338580e78 } : BV:32
28 : eq(23, 27) : BOOL
29 : 163 { 0xa3 -93 } : BV:8
30 : 1530347496 { 0x5b373fe8 +1.43163776e55 } : BV:32
31 : eq(23, 30) : BOOL
32 : 1 { 0x1 } : BV:8
33 : 4020501251 { 0xefa3fb03 -274466045 -1.28109776e96 } : BV:32
34 : eq(23, 33) : BOOL
35 : 1530347498 { 0x5b373fea +1.43163800e55 } : BV:32
36 : eq(23, 35) : BOOL
37 : 4020501250 { 0xefa3fb02 -274466046 -1.28109765e96 } : BV:32
38 : eq(23, 37) : BOOL
39 : eq(23, 22) : BOOL
40 : 1725816727 { 0x66dddf97 +1.73338592e78 } : BV:32
41 : eq(23, 40) : BOOL
42 : 239 { 0xef -17 } : BV:8
43 : 1725816724 { 0x66dddf94 +1.73338556e78 } : BV:32
44 : eq(23, 43) : BOOL
45 : 251 { 0xfb -5 } : BV:8
46 : ite(44, 26, 45) : BV:8
47 : ite(41, 42, 46) : BV:8
48 : ite(39, 26, 47) : BV:8
49 : ite(38, 26, 48) : BV:8
50 : ite(36, 26, 49) : BV:8
51 : ite(34, 26, 50) : BV:8
52 : ite(31, 32, 51) : BV:8
53 : ite(28, 29, 52) : BV:8
54 : ite(25, 26, 53) : BV:8
55 : 2 { 0x2 +1.23e129 } : BV:32
56 : bvadd(55, 21, 22) : BV:32
57 : eq(56, 24) : BOOL
58 : eq(56, 27) : BOOL
59 : eq(56, 30) : BOOL
60 : eq(56, 33) : BOOL
61 : eq(56, 35) : BOOL
62 : eq(56, 37) : BOOL
63 : eq(56, 22) : BOOL
64 : eq(56, 40) : BOOL
65 : eq(56, 43) : BOOL
66 : ite(65, 26, 45) : BV:8
67 : ite(64, 42, 66) : BV:8
68 : ite(63, 26, 67) : BV:8
69 : ite(62, 26, 68) : BV:8
70 : ite(61, 26, 69) : BV:8
71 : ite(60, 26, 70) : BV:8
72 : ite(59, 32, 71) : BV:8
73 : ite(58, 29, 72) : BV:8
74 : ite(57, 26, 73) : BV:8
75 : 1 { 0x1 +1.11e129 } : BV:32
76 : bvadd(75, 21, 22) : BV:32
77 : eq(76, 24) : BOOL
78 : eq(76, 27) : BOOL
79 : eq(76, 30) : BOOL
80 : eq(76, 33) : BOOL
81 : eq(76, 35) : BOOL
82 : eq(76, 37) : BOOL
83 : eq(76, 22) : BOOL
84 : eq(76, 40) : BOOL
85 : eq(76, 43) : BOOL
86 : ite(85, 26, 45) : BV:8
87 : ite(84, 42, 86) : BV:8
88 : ite(83, 26, 87) : BV:8
89 : ite(82, 26, 88) : BV:8
90 : ite(81, 26, 89) : BV:8
91 : ite(80, 26, 90) : BV:8
92 : ite(79, 32, 91) : BV:8
93 : ite(78, 29, 92) : BV:8
94 : ite(77, 26, 93) : BV:8
95 : bvadd(21, 22) : BV:32
96 : eq(95, 24) : BOOL
97 : eq(95, 27) : BOOL
98 : eq(95, 30) : BOOL
99 : eq(95, 33) : BOOL
100 : eq(95, 35) : BOOL
101 : eq(95, 37) : BOOL
102 : eq(95, 22) : BOOL
103 : eq(95, 40) : BOOL
104 : eq(95, 43) : BOOL
105 : ite(104, 26, 45) : BV:8
106 : ite(103, 42, 105) : BV:8
107 : ite(102, 26, 106) : BV:8
108 : ite(101, 26, 107) : BV:8
109 : ite(100, 26, 108) : BV:8
110 : ite(99, 26, 109) : BV:8
111 : ite(98, 32, 110) : BV:8
112 : ite(97, 29, 111) : BV:8
113 : ite(96, 26, 112) : BV:8
114 : bvconcat(54, 74, 94, 113) : BV:32
115 : ite(18, 2, 114) : BV:32
116 : lambda(17, 115) : FUNCTION[BV:32 -> BV:32]
117 : map(16, 116) : MAP[BV:32 -> BV:32]
118 : sym_const(117) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%x
1 : 4020501248 { 0xefa3fb00 -274466048 -1.28109741e96 } : BV:32
=input.dst.llvm-%n
1 : 4211145473 { 0xfb00fb01 -83821823 -1.766003e119 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1530347495 ] -> 251, [ 1530347496; 1530347496 ] -> 1, [ 1530347497; 1530347497 ] -> 251, [ 1530347498; 1530347498 ] -> 0, [ 1530347499; 1725816723 ] -> 251, [ 1725816724; 1725816724 ] -> 0, [ 1725816725; 1725816725 ] -> 251, [ 1725816726; 1725816726 ] -> 163, [ 1725816727; 1725816727 ] -> 239, [ 1725816728; 4020501247 ] -> 251, [ 4020501248; 4020501251 ] -> 0, [ 4020501252; 4294967295 ] -> 251, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1530347495 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1530347496; 1530347499 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1530347500; 1725816723 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1725816724; 1725816727 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1725816728; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1530347496 { 0x5b373fe8 +1.43163776e55 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1725816724 { 0x66dddf94 +1.73338556e78 } : BV:32
=input.spec-%var-i-0.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-ret-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-8.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1935754076 { 0x7361435c +1.75986814e103 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1530347496 { 0x5b373fe8 +1.43163776e55 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1530347499 { 0x5b373feb +1.43163812e55 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1725816724 { 0x66dddf94 +1.73338556e78 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1725816727 { 0x66dddf97 +1.73338592e78 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 4211145472 ] -> true, [ 4211145473; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : Lambda211 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 4020501248 { 0xefa3fb00 -274466048 -1.28109741e96 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 4020501249 { 0xefa3fb01 -274466047 -1.28109753e96 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 1725816726 { 0x66dddf96 +1.73338580e78 } : BV:32
13 : eq(8, 12) : BOOL
14 : 163 { 0xa3 -93 } : BV:8
15 : 1530347496 { 0x5b373fe8 +1.43163776e55 } : BV:32
16 : eq(8, 15) : BOOL
17 : 1 { 0x1 } : BV:8
18 : 4020501251 { 0xefa3fb03 -274466045 -1.28109776e96 } : BV:32
19 : eq(8, 18) : BOOL
20 : 1530347498 { 0x5b373fea +1.43163800e55 } : BV:32
21 : eq(8, 20) : BOOL
22 : 4020501250 { 0xefa3fb02 -274466046 -1.28109765e96 } : BV:32
23 : eq(8, 22) : BOOL
24 : eq(8, 7) : BOOL
25 : 1725816727 { 0x66dddf97 +1.73338592e78 } : BV:32
26 : eq(8, 25) : BOOL
27 : 239 { 0xef -17 } : BV:8
28 : 1725816724 { 0x66dddf94 +1.73338556e78 } : BV:32
29 : eq(8, 28) : BOOL
30 : 251 { 0xfb -5 } : BV:8
31 : ite(29, 11, 30) : BV:8
32 : ite(26, 27, 31) : BV:8
33 : ite(24, 11, 32) : BV:8
34 : ite(23, 11, 33) : BV:8
35 : ite(21, 11, 34) : BV:8
36 : ite(19, 11, 35) : BV:8
37 : ite(16, 17, 36) : BV:8
38 : ite(13, 14, 37) : BV:8
39 : ite(10, 11, 38) : BV:8
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvadd(40, 6, 7) : BV:32
42 : eq(41, 9) : BOOL
43 : eq(41, 12) : BOOL
44 : eq(41, 15) : BOOL
45 : eq(41, 18) : BOOL
46 : eq(41, 20) : BOOL
47 : eq(41, 22) : BOOL
48 : eq(41, 7) : BOOL
49 : eq(41, 25) : BOOL
50 : eq(41, 28) : BOOL
51 : ite(50, 11, 30) : BV:8
52 : ite(49, 27, 51) : BV:8
53 : ite(48, 11, 52) : BV:8
54 : ite(47, 11, 53) : BV:8
55 : ite(46, 11, 54) : BV:8
56 : ite(45, 11, 55) : BV:8
57 : ite(44, 17, 56) : BV:8
58 : ite(43, 14, 57) : BV:8
59 : ite(42, 11, 58) : BV:8
60 : 1 { 0x1 +1.11e129 } : BV:32
61 : bvadd(60, 6, 7) : BV:32
62 : eq(61, 9) : BOOL
63 : eq(61, 12) : BOOL
64 : eq(61, 15) : BOOL
65 : eq(61, 18) : BOOL
66 : eq(61, 20) : BOOL
67 : eq(61, 22) : BOOL
68 : eq(61, 7) : BOOL
69 : eq(61, 25) : BOOL
70 : eq(61, 28) : BOOL
71 : ite(70, 11, 30) : BV:8
72 : ite(69, 27, 71) : BV:8
73 : ite(68, 11, 72) : BV:8
74 : ite(67, 11, 73) : BV:8
75 : ite(66, 11, 74) : BV:8
76 : ite(65, 11, 75) : BV:8
77 : ite(64, 17, 76) : BV:8
78 : ite(63, 14, 77) : BV:8
79 : ite(62, 11, 78) : BV:8
80 : bvadd(6, 7) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 15) : BOOL
84 : eq(80, 18) : BOOL
85 : eq(80, 20) : BOOL
86 : eq(80, 22) : BOOL
87 : eq(80, 7) : BOOL
88 : eq(80, 25) : BOOL
89 : eq(80, 28) : BOOL
90 : ite(89, 11, 30) : BV:8
91 : ite(88, 27, 90) : BV:8
92 : ite(87, 11, 91) : BV:8
93 : ite(86, 11, 92) : BV:8
94 : ite(85, 11, 93) : BV:8
95 : ite(84, 11, 94) : BV:8
96 : ite(83, 17, 95) : BV:8
97 : ite(82, 14, 96) : BV:8
98 : ite(81, 11, 97) : BV:8
99 : bvconcat(39, 59, 79, 98) : BV:32
100 : ite(3, 2, 99) : BV:32
101 : lambda(1, 100) : FUNCTION[BV:32 -> BV:32]
102 : sym_const(101) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry.0.1
1 : ([ 0; 4211145472 ] -> true, [ 4211145473; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L2%7%bbentry.1.1
1 : Lambda213 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 4020501248 { 0xefa3fb00 -274466048 -1.28109741e96 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 4020501249 { 0xefa3fb01 -274466047 -1.28109753e96 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 1725816726 { 0x66dddf96 +1.73338580e78 } : BV:32
13 : eq(8, 12) : BOOL
14 : 163 { 0xa3 -93 } : BV:8
15 : 1530347496 { 0x5b373fe8 +1.43163776e55 } : BV:32
16 : eq(8, 15) : BOOL
17 : 1 { 0x1 } : BV:8
18 : 4020501251 { 0xefa3fb03 -274466045 -1.28109776e96 } : BV:32
19 : eq(8, 18) : BOOL
20 : 1530347498 { 0x5b373fea +1.43163800e55 } : BV:32
21 : eq(8, 20) : BOOL
22 : 4020501250 { 0xefa3fb02 -274466046 -1.28109765e96 } : BV:32
23 : eq(8, 22) : BOOL
24 : eq(8, 7) : BOOL
25 : 1725816727 { 0x66dddf97 +1.73338592e78 } : BV:32
26 : eq(8, 25) : BOOL
27 : 239 { 0xef -17 } : BV:8
28 : 1725816724 { 0x66dddf94 +1.73338556e78 } : BV:32
29 : eq(8, 28) : BOOL
30 : 251 { 0xfb -5 } : BV:8
31 : ite(29, 11, 30) : BV:8
32 : ite(26, 27, 31) : BV:8
33 : ite(24, 11, 32) : BV:8
34 : ite(23, 11, 33) : BV:8
35 : ite(21, 11, 34) : BV:8
36 : ite(19, 11, 35) : BV:8
37 : ite(16, 17, 36) : BV:8
38 : ite(13, 14, 37) : BV:8
39 : ite(10, 11, 38) : BV:8
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvadd(40, 6, 7) : BV:32
42 : eq(41, 9) : BOOL
43 : eq(41, 12) : BOOL
44 : eq(41, 15) : BOOL
45 : eq(41, 18) : BOOL
46 : eq(41, 20) : BOOL
47 : eq(41, 22) : BOOL
48 : eq(41, 7) : BOOL
49 : eq(41, 25) : BOOL
50 : eq(41, 28) : BOOL
51 : ite(50, 11, 30) : BV:8
52 : ite(49, 27, 51) : BV:8
53 : ite(48, 11, 52) : BV:8
54 : ite(47, 11, 53) : BV:8
55 : ite(46, 11, 54) : BV:8
56 : ite(45, 11, 55) : BV:8
57 : ite(44, 17, 56) : BV:8
58 : ite(43, 14, 57) : BV:8
59 : ite(42, 11, 58) : BV:8
60 : 1 { 0x1 +1.11e129 } : BV:32
61 : bvadd(60, 6, 7) : BV:32
62 : eq(61, 9) : BOOL
63 : eq(61, 12) : BOOL
64 : eq(61, 15) : BOOL
65 : eq(61, 18) : BOOL
66 : eq(61, 20) : BOOL
67 : eq(61, 22) : BOOL
68 : eq(61, 7) : BOOL
69 : eq(61, 25) : BOOL
70 : eq(61, 28) : BOOL
71 : ite(70, 11, 30) : BV:8
72 : ite(69, 27, 71) : BV:8
73 : ite(68, 11, 72) : BV:8
74 : ite(67, 11, 73) : BV:8
75 : ite(66, 11, 74) : BV:8
76 : ite(65, 11, 75) : BV:8
77 : ite(64, 17, 76) : BV:8
78 : ite(63, 14, 77) : BV:8
79 : ite(62, 11, 78) : BV:8
80 : bvadd(6, 7) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 15) : BOOL
84 : eq(80, 18) : BOOL
85 : eq(80, 20) : BOOL
86 : eq(80, 22) : BOOL
87 : eq(80, 7) : BOOL
88 : eq(80, 25) : BOOL
89 : eq(80, 28) : BOOL
90 : ite(89, 11, 30) : BV:8
91 : ite(88, 27, 90) : BV:8
92 : ite(87, 11, 91) : BV:8
93 : ite(86, 11, 92) : BV:8
94 : ite(85, 11, 93) : BV:8
95 : ite(84, 11, 94) : BV:8
96 : ite(83, 17, 95) : BV:8
97 : ite(82, 14, 96) : BV:8
98 : ite(81, 11, 97) : BV:8
99 : bvconcat(39, 59, 79, 98) : BV:32
100 : ite(3, 2, 99) : BV:32
101 : ite(3, 2, 100) : BV:32
102 : lambda(1, 101) : FUNCTION[BV:32 -> BV:32]
103 : sym_const(102) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
3277587493
=counter_example_end
=global nodece 19 num_edges_traversed 2
=global nodece 19 nodece_visted_pcs: 
L2%7%bbentry_Lfor.cond%1%bbentry
=global nodece 20
=global nodece 20 nodece z3.ce592.num_edges_traversed2
=global nodece 20 nodece_path
=global nodece 20 nodece_path.graph_edge_composition
(epsilon)
=global nodece 20 nodece_cached_counterexample
=counter_example_begin z3.ce592 7a5a4df3c3995def43a6fc9dd7a7ac0
=input.spec-%var-x-1
1 : Lambda272 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda273 : BV:32
17 : eq(16, 2) : BOOL
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 16) : BV:32
21 : 4292869632 { 0xffdffe00 -2097664 -1.74993896e128 } : BV:32
22 : bvadd(18, 20, 21) : BV:32
23 : 2873711457 { 0xab495b61 -1421255839 -1.57310116e215 } : BV:32
24 : eq(22, 23) : BOOL
25 : 255 { 0xff -1 } : BV:8
26 : 2873711456 { 0xab495b60 -1421255840 -1.57310104e215 } : BV:32
27 : eq(22, 26) : BOOL
28 : 4292869635 { 0xffdffe03 -2097661 -1.74993932e128 } : BV:32
29 : eq(22, 28) : BOOL
30 : 0 { 0x0 } : BV:8
31 : 2873711459 { 0xab495b63 -1421255837 -1.57310140e215 } : BV:32
32 : eq(22, 31) : BOOL
33 : 4292869633 { 0xffdffe01 -2097663 -1.74993908e128 } : BV:32
34 : eq(22, 33) : BOOL
35 : 2873711458 { 0xab495b62 -1421255838 -1.57310128e215 } : BV:32
36 : eq(22, 35) : BOOL
37 : 2451339973 { 0x921c7ac5 -1843627323 -1.22249662e165 } : BV:32
38 : eq(22, 37) : BOOL
39 : 254 { 0xfe -2 } : BV:8
40 : 4292869634 { 0xffdffe02 -2097662 -1.74993920e128 } : BV:32
41 : eq(22, 40) : BOOL
42 : eq(22, 21) : BOOL
43 : 2451339975 { 0x921c7ac7 -1843627321 -1.22249686e165 } : BV:32
44 : eq(22, 43) : BOOL
45 : 2451339972 { 0x921c7ac4 -1843627324 -1.22249650e165 } : BV:32
46 : eq(22, 45) : BOOL
47 : 223 { 0xdf -33 } : BV:8
48 : ite(46, 30, 47) : BV:8
49 : ite(44, 25, 48) : BV:8
50 : ite(42, 30, 49) : BV:8
51 : ite(41, 30, 50) : BV:8
52 : ite(38, 39, 51) : BV:8
53 : ite(36, 25, 52) : BV:8
54 : ite(34, 30, 53) : BV:8
55 : ite(32, 25, 54) : BV:8
56 : ite(29, 30, 55) : BV:8
57 : ite(27, 25, 56) : BV:8
58 : ite(24, 25, 57) : BV:8
59 : 2 { 0x2 +1.23e129 } : BV:32
60 : bvadd(59, 20, 21) : BV:32
61 : eq(60, 23) : BOOL
62 : eq(60, 26) : BOOL
63 : eq(60, 28) : BOOL
64 : eq(60, 31) : BOOL
65 : eq(60, 33) : BOOL
66 : eq(60, 35) : BOOL
67 : eq(60, 37) : BOOL
68 : eq(60, 40) : BOOL
69 : eq(60, 21) : BOOL
70 : eq(60, 43) : BOOL
71 : eq(60, 45) : BOOL
72 : ite(71, 30, 47) : BV:8
73 : ite(70, 25, 72) : BV:8
74 : ite(69, 30, 73) : BV:8
75 : ite(68, 30, 74) : BV:8
76 : ite(67, 39, 75) : BV:8
77 : ite(66, 25, 76) : BV:8
78 : ite(65, 30, 77) : BV:8
79 : ite(64, 25, 78) : BV:8
80 : ite(63, 30, 79) : BV:8
81 : ite(62, 25, 80) : BV:8
82 : ite(61, 25, 81) : BV:8
83 : 1 { 0x1 +1.11e129 } : BV:32
84 : bvadd(83, 20, 21) : BV:32
85 : eq(84, 23) : BOOL
86 : eq(84, 26) : BOOL
87 : eq(84, 28) : BOOL
88 : eq(84, 31) : BOOL
89 : eq(84, 33) : BOOL
90 : eq(84, 35) : BOOL
91 : eq(84, 37) : BOOL
92 : eq(84, 40) : BOOL
93 : eq(84, 21) : BOOL
94 : eq(84, 43) : BOOL
95 : eq(84, 45) : BOOL
96 : ite(95, 30, 47) : BV:8
97 : ite(94, 25, 96) : BV:8
98 : ite(93, 30, 97) : BV:8
99 : ite(92, 30, 98) : BV:8
100 : ite(91, 39, 99) : BV:8
101 : ite(90, 25, 100) : BV:8
102 : ite(89, 30, 101) : BV:8
103 : ite(88, 25, 102) : BV:8
104 : ite(87, 30, 103) : BV:8
105 : ite(86, 25, 104) : BV:8
106 : ite(85, 25, 105) : BV:8
107 : bvadd(20, 21) : BV:32
108 : eq(107, 23) : BOOL
109 : eq(107, 26) : BOOL
110 : eq(107, 28) : BOOL
111 : eq(107, 31) : BOOL
112 : eq(107, 33) : BOOL
113 : eq(107, 35) : BOOL
114 : eq(107, 37) : BOOL
115 : eq(107, 40) : BOOL
116 : eq(107, 21) : BOOL
117 : eq(107, 43) : BOOL
118 : eq(107, 45) : BOOL
119 : ite(118, 30, 47) : BV:8
120 : ite(117, 25, 119) : BV:8
121 : ite(116, 30, 120) : BV:8
122 : ite(115, 30, 121) : BV:8
123 : ite(114, 39, 122) : BV:8
124 : ite(113, 25, 123) : BV:8
125 : ite(112, 30, 124) : BV:8
126 : ite(111, 25, 125) : BV:8
127 : ite(110, 30, 126) : BV:8
128 : ite(109, 25, 127) : BV:8
129 : ite(108, 25, 128) : BV:8
130 : bvconcat(58, 82, 106, 129) : BV:32
131 : ite(17, 2, 130) : BV:32
132 : lambda(16, 131) : FUNCTION[BV:32 -> BV:32]
133 : map(15, 132) : MAP[BV:32 -> BV:32]
134 : sym_const(133) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry
1 : Lambda272 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda273 : BV:32
17 : eq(16, 2) : BOOL
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 16) : BV:32
21 : 4292869632 { 0xffdffe00 -2097664 -1.74993896e128 } : BV:32
22 : bvadd(18, 20, 21) : BV:32
23 : 2873711457 { 0xab495b61 -1421255839 -1.57310116e215 } : BV:32
24 : eq(22, 23) : BOOL
25 : 255 { 0xff -1 } : BV:8
26 : 2873711456 { 0xab495b60 -1421255840 -1.57310104e215 } : BV:32
27 : eq(22, 26) : BOOL
28 : 4292869635 { 0xffdffe03 -2097661 -1.74993932e128 } : BV:32
29 : eq(22, 28) : BOOL
30 : 0 { 0x0 } : BV:8
31 : 2873711459 { 0xab495b63 -1421255837 -1.57310140e215 } : BV:32
32 : eq(22, 31) : BOOL
33 : 4292869633 { 0xffdffe01 -2097663 -1.74993908e128 } : BV:32
34 : eq(22, 33) : BOOL
35 : 2873711458 { 0xab495b62 -1421255838 -1.57310128e215 } : BV:32
36 : eq(22, 35) : BOOL
37 : 2451339973 { 0x921c7ac5 -1843627323 -1.22249662e165 } : BV:32
38 : eq(22, 37) : BOOL
39 : 254 { 0xfe -2 } : BV:8
40 : 4292869634 { 0xffdffe02 -2097662 -1.74993920e128 } : BV:32
41 : eq(22, 40) : BOOL
42 : eq(22, 21) : BOOL
43 : 2451339975 { 0x921c7ac7 -1843627321 -1.22249686e165 } : BV:32
44 : eq(22, 43) : BOOL
45 : 2451339972 { 0x921c7ac4 -1843627324 -1.22249650e165 } : BV:32
46 : eq(22, 45) : BOOL
47 : 223 { 0xdf -33 } : BV:8
48 : ite(46, 30, 47) : BV:8
49 : ite(44, 25, 48) : BV:8
50 : ite(42, 30, 49) : BV:8
51 : ite(41, 30, 50) : BV:8
52 : ite(38, 39, 51) : BV:8
53 : ite(36, 25, 52) : BV:8
54 : ite(34, 30, 53) : BV:8
55 : ite(32, 25, 54) : BV:8
56 : ite(29, 30, 55) : BV:8
57 : ite(27, 25, 56) : BV:8
58 : ite(24, 25, 57) : BV:8
59 : 2 { 0x2 +1.23e129 } : BV:32
60 : bvadd(59, 20, 21) : BV:32
61 : eq(60, 23) : BOOL
62 : eq(60, 26) : BOOL
63 : eq(60, 28) : BOOL
64 : eq(60, 31) : BOOL
65 : eq(60, 33) : BOOL
66 : eq(60, 35) : BOOL
67 : eq(60, 37) : BOOL
68 : eq(60, 40) : BOOL
69 : eq(60, 21) : BOOL
70 : eq(60, 43) : BOOL
71 : eq(60, 45) : BOOL
72 : ite(71, 30, 47) : BV:8
73 : ite(70, 25, 72) : BV:8
74 : ite(69, 30, 73) : BV:8
75 : ite(68, 30, 74) : BV:8
76 : ite(67, 39, 75) : BV:8
77 : ite(66, 25, 76) : BV:8
78 : ite(65, 30, 77) : BV:8
79 : ite(64, 25, 78) : BV:8
80 : ite(63, 30, 79) : BV:8
81 : ite(62, 25, 80) : BV:8
82 : ite(61, 25, 81) : BV:8
83 : 1 { 0x1 +1.11e129 } : BV:32
84 : bvadd(83, 20, 21) : BV:32
85 : eq(84, 23) : BOOL
86 : eq(84, 26) : BOOL
87 : eq(84, 28) : BOOL
88 : eq(84, 31) : BOOL
89 : eq(84, 33) : BOOL
90 : eq(84, 35) : BOOL
91 : eq(84, 37) : BOOL
92 : eq(84, 40) : BOOL
93 : eq(84, 21) : BOOL
94 : eq(84, 43) : BOOL
95 : eq(84, 45) : BOOL
96 : ite(95, 30, 47) : BV:8
97 : ite(94, 25, 96) : BV:8
98 : ite(93, 30, 97) : BV:8
99 : ite(92, 30, 98) : BV:8
100 : ite(91, 39, 99) : BV:8
101 : ite(90, 25, 100) : BV:8
102 : ite(89, 30, 101) : BV:8
103 : ite(88, 25, 102) : BV:8
104 : ite(87, 30, 103) : BV:8
105 : ite(86, 25, 104) : BV:8
106 : ite(85, 25, 105) : BV:8
107 : bvadd(20, 21) : BV:32
108 : eq(107, 23) : BOOL
109 : eq(107, 26) : BOOL
110 : eq(107, 28) : BOOL
111 : eq(107, 31) : BOOL
112 : eq(107, 33) : BOOL
113 : eq(107, 35) : BOOL
114 : eq(107, 37) : BOOL
115 : eq(107, 40) : BOOL
116 : eq(107, 21) : BOOL
117 : eq(107, 43) : BOOL
118 : eq(107, 45) : BOOL
119 : ite(118, 30, 47) : BV:8
120 : ite(117, 25, 119) : BV:8
121 : ite(116, 30, 120) : BV:8
122 : ite(115, 30, 121) : BV:8
123 : ite(114, 39, 122) : BV:8
124 : ite(113, 25, 123) : BV:8
125 : ite(112, 30, 124) : BV:8
126 : ite(111, 25, 125) : BV:8
127 : ite(110, 30, 126) : BV:8
128 : ite(109, 25, 127) : BV:8
129 : ite(108, 25, 128) : BV:8
130 : bvconcat(58, 82, 106, 129) : BV:32
131 : ite(17, 2, 130) : BV:32
132 : lambda(16, 131) : FUNCTION[BV:32 -> BV:32]
133 : map(15, 132) : MAP[BV:32 -> BV:32]
134 : sym_const(133) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%x
1 : 4292869632 { 0xffdffe00 -2097664 -1.74993896e128 } : BV:32
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 2451339971 ] -> 223, [ 2451339972; 2451339972 ] -> 0, [ 2451339973; 2451339973 ] -> 254, [ 2451339974; 2451339974 ] -> 223, [ 2451339975; 2451339975 ] -> 255, [ 2451339976; 2873711455 ] -> 223, [ 2873711456; 2873711459 ] -> 255, [ 2873711460; 4292869631 ] -> 223, [ 4292869632; 4292869635 ] -> 0, [ 4292869636; 4294967295 ] -> 223, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2451339971 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2451339972; 2451339975 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2451339976; 2873711455 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2873711456; 2873711459 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2873711460; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2873711456 { 0xab495b60 -1421255840 -1.57310104e215 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2451339972 { 0x921c7ac4 -1843627324 -1.22249650e165 } : BV:32
=input.spec-%var-i-0.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-ret-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-8.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1115311958 { 0x427a4f56 +1.95554614e5 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2873711456 { 0xab495b60 -1421255840 -1.57310104e215 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2873711459 { 0xab495b63 -1421255837 -1.57310140e215 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2451339972 { 0x921c7ac4 -1843627324 -1.22249650e165 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2451339975 { 0x921c7ac7 -1843627321 -1.22249686e165 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : Lambda257 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 4292869632 { 0xffdffe00 -2097664 -1.74993896e128 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 2873711457 { 0xab495b61 -1421255839 -1.57310116e215 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 2873711456 { 0xab495b60 -1421255840 -1.57310104e215 } : BV:32
13 : eq(8, 12) : BOOL
14 : 4292869635 { 0xffdffe03 -2097661 -1.74993932e128 } : BV:32
15 : eq(8, 14) : BOOL
16 : 0 { 0x0 } : BV:8
17 : 2873711459 { 0xab495b63 -1421255837 -1.57310140e215 } : BV:32
18 : eq(8, 17) : BOOL
19 : 4292869633 { 0xffdffe01 -2097663 -1.74993908e128 } : BV:32
20 : eq(8, 19) : BOOL
21 : 2873711458 { 0xab495b62 -1421255838 -1.57310128e215 } : BV:32
22 : eq(8, 21) : BOOL
23 : 2451339973 { 0x921c7ac5 -1843627323 -1.22249662e165 } : BV:32
24 : eq(8, 23) : BOOL
25 : 254 { 0xfe -2 } : BV:8
26 : 4292869634 { 0xffdffe02 -2097662 -1.74993920e128 } : BV:32
27 : eq(8, 26) : BOOL
28 : eq(8, 7) : BOOL
29 : 2451339975 { 0x921c7ac7 -1843627321 -1.22249686e165 } : BV:32
30 : eq(8, 29) : BOOL
31 : 2451339972 { 0x921c7ac4 -1843627324 -1.22249650e165 } : BV:32
32 : eq(8, 31) : BOOL
33 : 223 { 0xdf -33 } : BV:8
34 : ite(32, 16, 33) : BV:8
35 : ite(30, 11, 34) : BV:8
36 : ite(28, 16, 35) : BV:8
37 : ite(27, 16, 36) : BV:8
38 : ite(24, 25, 37) : BV:8
39 : ite(22, 11, 38) : BV:8
40 : ite(20, 16, 39) : BV:8
41 : ite(18, 11, 40) : BV:8
42 : ite(15, 16, 41) : BV:8
43 : ite(13, 11, 42) : BV:8
44 : ite(10, 11, 43) : BV:8
45 : 2 { 0x2 +1.23e129 } : BV:32
46 : bvadd(45, 6, 7) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : eq(46, 14) : BOOL
50 : eq(46, 17) : BOOL
51 : eq(46, 19) : BOOL
52 : eq(46, 21) : BOOL
53 : eq(46, 23) : BOOL
54 : eq(46, 26) : BOOL
55 : eq(46, 7) : BOOL
56 : eq(46, 29) : BOOL
57 : eq(46, 31) : BOOL
58 : ite(57, 16, 33) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 16, 59) : BV:8
61 : ite(54, 16, 60) : BV:8
62 : ite(53, 25, 61) : BV:8
63 : ite(52, 11, 62) : BV:8
64 : ite(51, 16, 63) : BV:8
65 : ite(50, 11, 64) : BV:8
66 : ite(49, 16, 65) : BV:8
67 : ite(48, 11, 66) : BV:8
68 : ite(47, 11, 67) : BV:8
69 : 1 { 0x1 +1.11e129 } : BV:32
70 : bvadd(69, 6, 7) : BV:32
71 : eq(70, 9) : BOOL
72 : eq(70, 12) : BOOL
73 : eq(70, 14) : BOOL
74 : eq(70, 17) : BOOL
75 : eq(70, 19) : BOOL
76 : eq(70, 21) : BOOL
77 : eq(70, 23) : BOOL
78 : eq(70, 26) : BOOL
79 : eq(70, 7) : BOOL
80 : eq(70, 29) : BOOL
81 : eq(70, 31) : BOOL
82 : ite(81, 16, 33) : BV:8
83 : ite(80, 11, 82) : BV:8
84 : ite(79, 16, 83) : BV:8
85 : ite(78, 16, 84) : BV:8
86 : ite(77, 25, 85) : BV:8
87 : ite(76, 11, 86) : BV:8
88 : ite(75, 16, 87) : BV:8
89 : ite(74, 11, 88) : BV:8
90 : ite(73, 16, 89) : BV:8
91 : ite(72, 11, 90) : BV:8
92 : ite(71, 11, 91) : BV:8
93 : bvadd(6, 7) : BV:32
94 : eq(93, 9) : BOOL
95 : eq(93, 12) : BOOL
96 : eq(93, 14) : BOOL
97 : eq(93, 17) : BOOL
98 : eq(93, 19) : BOOL
99 : eq(93, 21) : BOOL
100 : eq(93, 23) : BOOL
101 : eq(93, 26) : BOOL
102 : eq(93, 7) : BOOL
103 : eq(93, 29) : BOOL
104 : eq(93, 31) : BOOL
105 : ite(104, 16, 33) : BV:8
106 : ite(103, 11, 105) : BV:8
107 : ite(102, 16, 106) : BV:8
108 : ite(101, 16, 107) : BV:8
109 : ite(100, 25, 108) : BV:8
110 : ite(99, 11, 109) : BV:8
111 : ite(98, 16, 110) : BV:8
112 : ite(97, 11, 111) : BV:8
113 : ite(96, 16, 112) : BV:8
114 : ite(95, 11, 113) : BV:8
115 : ite(94, 11, 114) : BV:8
116 : bvconcat(44, 68, 92, 115) : BV:32
117 : ite(3, 2, 116) : BV:32
118 : lambda(1, 117) : FUNCTION[BV:32 -> BV:32]
119 : sym_const(118) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L2%7%bbentry.1.1
1 : Lambda259 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 4292869632 { 0xffdffe00 -2097664 -1.74993896e128 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 2873711457 { 0xab495b61 -1421255839 -1.57310116e215 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 2873711456 { 0xab495b60 -1421255840 -1.57310104e215 } : BV:32
13 : eq(8, 12) : BOOL
14 : 4292869635 { 0xffdffe03 -2097661 -1.74993932e128 } : BV:32
15 : eq(8, 14) : BOOL
16 : 0 { 0x0 } : BV:8
17 : 2873711459 { 0xab495b63 -1421255837 -1.57310140e215 } : BV:32
18 : eq(8, 17) : BOOL
19 : 4292869633 { 0xffdffe01 -2097663 -1.74993908e128 } : BV:32
20 : eq(8, 19) : BOOL
21 : 2873711458 { 0xab495b62 -1421255838 -1.57310128e215 } : BV:32
22 : eq(8, 21) : BOOL
23 : 2451339973 { 0x921c7ac5 -1843627323 -1.22249662e165 } : BV:32
24 : eq(8, 23) : BOOL
25 : 254 { 0xfe -2 } : BV:8
26 : 4292869634 { 0xffdffe02 -2097662 -1.74993920e128 } : BV:32
27 : eq(8, 26) : BOOL
28 : eq(8, 7) : BOOL
29 : 2451339975 { 0x921c7ac7 -1843627321 -1.22249686e165 } : BV:32
30 : eq(8, 29) : BOOL
31 : 2451339972 { 0x921c7ac4 -1843627324 -1.22249650e165 } : BV:32
32 : eq(8, 31) : BOOL
33 : 223 { 0xdf -33 } : BV:8
34 : ite(32, 16, 33) : BV:8
35 : ite(30, 11, 34) : BV:8
36 : ite(28, 16, 35) : BV:8
37 : ite(27, 16, 36) : BV:8
38 : ite(24, 25, 37) : BV:8
39 : ite(22, 11, 38) : BV:8
40 : ite(20, 16, 39) : BV:8
41 : ite(18, 11, 40) : BV:8
42 : ite(15, 16, 41) : BV:8
43 : ite(13, 11, 42) : BV:8
44 : ite(10, 11, 43) : BV:8
45 : 2 { 0x2 +1.23e129 } : BV:32
46 : bvadd(45, 6, 7) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : eq(46, 14) : BOOL
50 : eq(46, 17) : BOOL
51 : eq(46, 19) : BOOL
52 : eq(46, 21) : BOOL
53 : eq(46, 23) : BOOL
54 : eq(46, 26) : BOOL
55 : eq(46, 7) : BOOL
56 : eq(46, 29) : BOOL
57 : eq(46, 31) : BOOL
58 : ite(57, 16, 33) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 16, 59) : BV:8
61 : ite(54, 16, 60) : BV:8
62 : ite(53, 25, 61) : BV:8
63 : ite(52, 11, 62) : BV:8
64 : ite(51, 16, 63) : BV:8
65 : ite(50, 11, 64) : BV:8
66 : ite(49, 16, 65) : BV:8
67 : ite(48, 11, 66) : BV:8
68 : ite(47, 11, 67) : BV:8
69 : 1 { 0x1 +1.11e129 } : BV:32
70 : bvadd(69, 6, 7) : BV:32
71 : eq(70, 9) : BOOL
72 : eq(70, 12) : BOOL
73 : eq(70, 14) : BOOL
74 : eq(70, 17) : BOOL
75 : eq(70, 19) : BOOL
76 : eq(70, 21) : BOOL
77 : eq(70, 23) : BOOL
78 : eq(70, 26) : BOOL
79 : eq(70, 7) : BOOL
80 : eq(70, 29) : BOOL
81 : eq(70, 31) : BOOL
82 : ite(81, 16, 33) : BV:8
83 : ite(80, 11, 82) : BV:8
84 : ite(79, 16, 83) : BV:8
85 : ite(78, 16, 84) : BV:8
86 : ite(77, 25, 85) : BV:8
87 : ite(76, 11, 86) : BV:8
88 : ite(75, 16, 87) : BV:8
89 : ite(74, 11, 88) : BV:8
90 : ite(73, 16, 89) : BV:8
91 : ite(72, 11, 90) : BV:8
92 : ite(71, 11, 91) : BV:8
93 : bvadd(6, 7) : BV:32
94 : eq(93, 9) : BOOL
95 : eq(93, 12) : BOOL
96 : eq(93, 14) : BOOL
97 : eq(93, 17) : BOOL
98 : eq(93, 19) : BOOL
99 : eq(93, 21) : BOOL
100 : eq(93, 23) : BOOL
101 : eq(93, 26) : BOOL
102 : eq(93, 7) : BOOL
103 : eq(93, 29) : BOOL
104 : eq(93, 31) : BOOL
105 : ite(104, 16, 33) : BV:8
106 : ite(103, 11, 105) : BV:8
107 : ite(102, 16, 106) : BV:8
108 : ite(101, 16, 107) : BV:8
109 : ite(100, 25, 108) : BV:8
110 : ite(99, 11, 109) : BV:8
111 : ite(98, 16, 110) : BV:8
112 : ite(97, 11, 111) : BV:8
113 : ite(96, 16, 112) : BV:8
114 : ite(95, 11, 113) : BV:8
115 : ite(94, 11, 114) : BV:8
116 : bvconcat(44, 68, 92, 115) : BV:32
117 : ite(3, 2, 116) : BV:32
118 : ite(3, 2, 117) : BV:32
119 : lambda(1, 118) : FUNCTION[BV:32 -> BV:32]
120 : sym_const(119) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
794214668
=counter_example_end
=global nodece 20 num_edges_traversed 2
=global nodece 20 nodece_visted_pcs: 
L2%7%bbentry_Lfor.cond%1%bbentry
=global nodece 21
=global nodece 21 nodece z3.ce582.num_edges_traversed1
=global nodece 21 nodece_path
=global nodece 21 nodece_path.graph_edge_composition
(L2%7%bbentry_Lfor.cond%1%bbentry=>L2%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 21 nodece_cached_counterexample
=counter_example_begin z3.ce582 a23dc52fa787ce9e3da8191c724431e
=input.spec-%var-x-1
1 : Lambda610 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 524287 { 0x7ffff +1.6249988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 524288 { 0x80000 +1.6250000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda611 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 2, 28) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry
1 : Lambda614 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 524287 { 0x7ffff +1.6249988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 524288 { 0x80000 +1.6250000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda615 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%x
1 : 3050497956 { 0xb5d2e7a4 -1244469340 -1.64769411e236 } : BV:32
=input.dst.llvm-%n
1 : 524288 { 0x80000 +1.6250000e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1973085103 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1973085104; 1973085107 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1973085108; 3079203727 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3079203728; 3079203731 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3079203732; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1973085104 { 0x759ae3b0 +1.21007347e108 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3079203728 { 0xb788eb90 -1215763568 -1.6968879e240 } : BV:32
=input.spec-%var-i-0.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-ret-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 1476399405 { 0x5800112d +1.52416e49 } : BV:32
=input.spec-%tmpvar-8.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 50430881 { 0x30183a1 +1.1182949e135 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1973085104 { 0x759ae3b0 +1.21007347e108 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1973085107 { 0x759ae3b3 +1.21007382e108 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3079203728 { 0xb788eb90 -1215763568 -1.6968879e240 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3079203731 { 0xb788eb93 -1215763565 -1.6968915e240 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 524287 ] -> true, [ 524288; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : Lambda593 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 524287 { 0x7ffff +1.6249988e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 524288 { 0x80000 +1.6250000e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 2, 18) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry.0.1
1 : ([ 0; 524287 ] -> true, [ 524288; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L2%7%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
3057882018
=counter_example_end
=global nodece 21 num_edges_traversed 1
=global nodece 21 nodece_visted_pcs: 
L2%7%bbentry_Lfor.cond%1%bbentry
=global nodece 22
=global nodece 22 nodece z3.ce827.num_edges_traversed2
=global nodece 22 nodece_path
=global nodece 22 nodece_path.graph_edge_composition
(epsilon)
=global nodece 22 nodece_cached_counterexample
=counter_example_begin z3.ce827 34cd70b44080ff6ad36a8c192c22318
=input.spec-%var-x-1
1 : Lambda610 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 524287 { 0x7ffff +1.6249988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 524288 { 0x80000 +1.6250000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda611 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 2, 28) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry
1 : Lambda614 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 524287 { 0x7ffff +1.6249988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 524288 { 0x80000 +1.6250000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda615 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%x
1 : 3050497956 { 0xb5d2e7a4 -1244469340 -1.64769411e236 } : BV:32
=input.dst.llvm-%n
1 : 524288 { 0x80000 +1.6250000e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1973085103 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1973085104; 1973085107 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1973085108; 3079203727 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3079203728; 3079203731 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3079203732; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1973085104 { 0x759ae3b0 +1.21007347e108 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3079203728 { 0xb788eb90 -1215763568 -1.6968879e240 } : BV:32
=input.spec-%var-i-0.L2%7%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%var-ret-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 1476399406 { 0x5800112e +1.52428e49 } : BV:32
=input.spec-%tmpvar-8.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 50430882 { 0x30183a2 +1.1182961e135 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1973085104 { 0x759ae3b0 +1.21007347e108 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1973085107 { 0x759ae3b3 +1.21007382e108 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3079203728 { 0xb788eb90 -1215763568 -1.6968879e240 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3079203731 { 0xb788eb93 -1215763565 -1.6968915e240 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 524287 ] -> true, [ 524288; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : Lambda593 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 524287 { 0x7ffff +1.6249988e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 524288 { 0x80000 +1.6250000e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 2, 18) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry.0.1
1 : ([ 0; 524287 ] -> true, [ 524288; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L2%7%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
3057882018
=counter_example_end
=global nodece 22 num_edges_traversed 2
=global nodece 22 nodece_visted_pcs: 
L2%7%bbentry_Lfor.cond%1%bbentry
=global nodece 23
=global nodece 23 nodece z3v487.ce840.num_edges_traversed1
=global nodece 23 nodece_path
=global nodece 23 nodece_path.graph_edge_composition
(L2%7%bbentry_Lfor.cond%1%bbentry=>L2%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 23 nodece_cached_counterexample
=counter_example_begin z3v487.ce840 ecbc17d622d20b333df9da027c377a3
=input.spec-%var-x-1
1 : Lambda677 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2047 { 0x7ff +1.24402e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2048 { 0x800 +1.24414e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda678 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 212773548 { 0xcaeaaac +1.36458349e154 } : BV:32
=input.spec-%var-x-0.L2%7%bbentry
1 : Lambda680 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2047 { 0x7ff +1.24402e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2048 { 0x800 +1.24414e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda681 : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : bvule(2, 17) : BOOL
21 : bvule(17, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(8, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : ite(25, 13, 13) : BOOL
27 : ite(22, 7, 26) : BOOL
28 : and(20, 24) : BOOL
29 : ite(28, 2, 2) : BV:32
30 : ite(27, 2, 29) : BV:32
31 : ite(19, 2, 30) : BV:32
32 : lambda(17, 31) : FUNCTION[BV:32 -> BV:32]
33 : map(16, 32) : MAP[BV:32 -> BV:32]
34 : sym_const(33) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%x
1 : 212773536 { 0xcaeaaa0 +1.36458206e154 } : BV:32
=input.dst.llvm-%n
1 : 2048 { 0x800 +1.24414e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 45071 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 45072; 45075 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 45076; 671139863 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 671139864; 671139867 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 671139868; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 671139864 { 0x2800c818 +1.610637e209 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 45072 { 0xb010 +1.537300e129 } : BV:32
=input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 12 { 0xc +1.143e129 } : BV:32
=input.spec-%var-i-0.L2%7%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-2.L2%7%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-0.L2%8%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%var-ret-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 63360626 { 0x3c6ce72 +1.55317521e136 } : BV:32
=input.spec-%tmpvar-8.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-3.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1290872655 { 0x4cf1274f +1.88401210e26 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%add.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry
1 : 212773548 { 0xcaeaaac +1.36458349e154 } : BV:32
=input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 12 { 0xc +1.143e129 } : BV:32
=input.dst.llvm-%inc.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 671139864 { 0x2800c818 +1.610637e209 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 671139867 { 0x2800c81b +1.610673e209 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 45072 { 0xb010 +1.537300e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 45075 { 0xb013 +1.537335e129 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 2047 ] -> true, [ 2048; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry.0.1
1 : ([ 0; 2047 ] -> true, [ 2048; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L2%7%bbentry.1.1
1 : Lambda662 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 1) : BOOL
6 : 2047 { 0x7ff +1.24402e129 } : BV:32
7 : bvule(1, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 2048 { 0x800 +1.24414e129 } : BV:32
11 : bvule(10, 1) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(1, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : and(5, 13) : BOOL
19 : ite(18, 4, 4) : BV:32
20 : ite(17, 4, 19) : BV:32
21 : ite(3, 4, 20) : BV:32
22 : lambda(1, 21) : FUNCTION[BV:32 -> BV:32]
23 : sym_const(22) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
4201553910
=counter_example_end
=global nodece 23 num_edges_traversed 1
=global nodece 23 nodece_visted_pcs: 
L2%7%bbentry_Lfor.cond%1%bbentry
=global nodece 24
=global nodece 24 nodece z3v487.ce869.num_edges_traversed2
=global nodece 24 nodece_path
=global nodece 24 nodece_path.graph_edge_composition
(epsilon)
=global nodece 24 nodece_cached_counterexample
=counter_example_begin z3v487.ce869 eb8970356ea2239c8a7e7bf9644431
=input.spec-%var-x-1
1 : Lambda677 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2047 { 0x7ff +1.24402e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2048 { 0x800 +1.24414e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda678 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry
1 : Lambda680 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2047 { 0x7ff +1.24402e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2048 { 0x800 +1.24414e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda681 : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : bvule(2, 17) : BOOL
21 : bvule(17, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(8, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : ite(25, 13, 13) : BOOL
27 : ite(22, 7, 26) : BOOL
28 : and(20, 24) : BOOL
29 : ite(28, 2, 2) : BV:32
30 : ite(27, 2, 29) : BV:32
31 : ite(19, 2, 30) : BV:32
32 : lambda(17, 31) : FUNCTION[BV:32 -> BV:32]
33 : map(16, 32) : MAP[BV:32 -> BV:32]
34 : sym_const(33) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%x
1 : 212773536 { 0xcaeaaa0 +1.36458206e154 } : BV:32
=input.dst.llvm-%n
1 : 2048 { 0x800 +1.24414e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 45071 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 45072; 45075 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 45076; 671139863 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 671139864; 671139867 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 671139868; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 671139864 { 0x2800c818 +1.610637e209 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 45072 { 0xb010 +1.537300e129 } : BV:32
=input.spec-%var-i-0.L2%7%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%var-ret-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 63360627 { 0x3c6ce73 +1.55317533e136 } : BV:32
=input.spec-%tmpvar-8.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1290872656 { 0x4cf12750 +1.88401222e26 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 671139864 { 0x2800c818 +1.610637e209 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 671139867 { 0x2800c81b +1.610673e209 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 45072 { 0xb010 +1.537300e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 45075 { 0xb013 +1.537335e129 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 2047 ] -> true, [ 2048; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry.0.1
1 : ([ 0; 2047 ] -> true, [ 2048; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L2%7%bbentry.1.1
1 : Lambda662 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 1) : BOOL
6 : 2047 { 0x7ff +1.24402e129 } : BV:32
7 : bvule(1, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 2048 { 0x800 +1.24414e129 } : BV:32
11 : bvule(10, 1) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(1, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : and(5, 13) : BOOL
19 : ite(18, 4, 4) : BV:32
20 : ite(17, 4, 19) : BV:32
21 : ite(3, 4, 20) : BV:32
22 : lambda(1, 21) : FUNCTION[BV:32 -> BV:32]
23 : sym_const(22) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
4201553910
=counter_example_end
=global nodece 24 num_edges_traversed 2
=global nodece 24 nodece_visted_pcs: 
L2%7%bbentry_Lfor.cond%1%bbentry
=global nodece 25
=global nodece 25 nodece z3v487.ce891.num_edges_traversed1
=global nodece 25 nodece_path
=global nodece 25 nodece_path.graph_edge_composition
(L2%7%bbentry_Lfor.cond%1%bbentry=>L2%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 25 nodece_cached_counterexample
=counter_example_begin z3v487.ce891 7394d8bb2859e9e5148dd21fea27702c
=input.spec-%var-x-1
1 : Lambda722 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 19 { 0x13 +1.226e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 20 { 0x14 +1.238e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda723 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-x-0.L2%7%bbentry
1 : Lambda725 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 19 { 0x13 +1.226e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 20 { 0x14 +1.238e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda726 : BV:32
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : bvule(2, 17) : BOOL
21 : bvule(17, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(8, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : ite(25, 13, 13) : BOOL
27 : ite(22, 7, 26) : BOOL
28 : and(20, 24) : BOOL
29 : ite(28, 2, 2) : BV:32
30 : ite(27, 2, 29) : BV:32
31 : ite(19, 2, 30) : BV:32
32 : lambda(17, 31) : FUNCTION[BV:32 -> BV:32]
33 : map(16, 32) : MAP[BV:32 -> BV:32]
34 : sym_const(33) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%x
1 : 2147483632 { 0x7ffffff0 +1.99999809e128 } : BV:32
=input.dst.llvm-%n
1 : 20 { 0x14 +1.238e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 8650783 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 8650784; 8650787 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 8650788; 822083651 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 822083652; 822083655 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 822083656; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 822083652 { 0x31000044 +1.810e227 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 8650784 { 0x840020 +1.3125381e130 } : BV:32
=input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.spec-%var-i-0.L2%7%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%tmpvar-2.L2%7%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%tmpvar-0.L2%8%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%var-ret-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 658792904 { 0x274461c8 +1.53423404e207 } : BV:32
=input.spec-%tmpvar-8.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-3.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 2008596742 { 0x77b8c106 +1.44339060e112 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%add.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%inc.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 822083652 { 0x31000044 +1.810e227 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 822083655 { 0x31000047 +1.846e227 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 8650784 { 0x840020 +1.3125381e130 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 8650787 { 0x840023 +1.3125417e130 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 19 ] -> true, [ 20; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry.0.1
1 : ([ 0; 19 ] -> true, [ 20; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L2%7%bbentry.1.1
1 : Lambda707 : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 1) : BOOL
6 : 19 { 0x13 +1.226e129 } : BV:32
7 : bvule(1, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 20 { 0x14 +1.238e129 } : BV:32
11 : bvule(10, 1) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(1, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : and(5, 13) : BOOL
19 : ite(18, 4, 4) : BV:32
20 : ite(17, 4, 19) : BV:32
21 : ite(3, 4, 20) : BV:32
22 : lambda(1, 21) : FUNCTION[BV:32 -> BV:32]
23 : sym_const(22) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
3457440865
=counter_example_end
=global nodece 25 num_edges_traversed 1
=global nodece 25 nodece_visted_pcs: 
L2%7%bbentry_Lfor.cond%1%bbentry
=global nodece 26
=global nodece 26 nodece z3v487.ce920.num_edges_traversed2
=global nodece 26 nodece_path
=global nodece 26 nodece_path.graph_edge_composition
(epsilon)
=global nodece 26 nodece_cached_counterexample
=counter_example_begin z3v487.ce920 bf531e64581045a84dd428f61ec77232
=input.spec-%var-x-1
1 : Lambda722 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 19 { 0x13 +1.226e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 20 { 0x14 +1.238e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda723 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry
1 : Lambda725 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 19 { 0x13 +1.226e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 20 { 0x14 +1.238e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda726 : BV:32
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : bvule(2, 17) : BOOL
21 : bvule(17, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(8, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : ite(25, 13, 13) : BOOL
27 : ite(22, 7, 26) : BOOL
28 : and(20, 24) : BOOL
29 : ite(28, 2, 2) : BV:32
30 : ite(27, 2, 29) : BV:32
31 : ite(19, 2, 30) : BV:32
32 : lambda(17, 31) : FUNCTION[BV:32 -> BV:32]
33 : map(16, 32) : MAP[BV:32 -> BV:32]
34 : sym_const(33) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%x
1 : 2147483632 { 0x7ffffff0 +1.99999809e128 } : BV:32
=input.dst.llvm-%n
1 : 20 { 0x14 +1.238e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 8650783 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 8650784; 8650787 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 8650788; 822083651 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 822083652; 822083655 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 822083656; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 822083652 { 0x31000044 +1.810e227 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 8650784 { 0x840020 +1.3125381e130 } : BV:32
=input.spec-%var-i-0.L2%7%bbentry
1 : 6 { 0x6 +1.71e129 } : BV:32
=input.spec-%var-ret-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 658792905 { 0x274461c9 +1.53423416e207 } : BV:32
=input.spec-%tmpvar-8.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 6 { 0x6 +1.71e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 2008596743 { 0x77b8c107 +1.44339072e112 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 822083652 { 0x31000044 +1.810e227 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 822083655 { 0x31000047 +1.846e227 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 8650784 { 0x840020 +1.3125381e130 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 8650787 { 0x840023 +1.3125417e130 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 19 ] -> true, [ 20; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry.0.1
1 : ([ 0; 19 ] -> true, [ 20; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L2%7%bbentry.1.1
1 : Lambda707 : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 1) : BOOL
6 : 19 { 0x13 +1.226e129 } : BV:32
7 : bvule(1, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 20 { 0x14 +1.238e129 } : BV:32
11 : bvule(10, 1) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(1, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : and(5, 13) : BOOL
19 : ite(18, 4, 4) : BV:32
20 : ite(17, 4, 19) : BV:32
21 : ite(3, 4, 20) : BV:32
22 : lambda(1, 21) : FUNCTION[BV:32 -> BV:32]
23 : sym_const(22) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
3457440865
=counter_example_end
=global nodece 26 num_edges_traversed 2
=global nodece 26 nodece_visted_pcs: 
L2%7%bbentry_Lfor.cond%1%bbentry
=global nodece 27
=global nodece 27 nodece z3.ce942.num_edges_traversed0
=global nodece 27 nodece_path
=global nodece 27 nodece_path.graph_edge_composition
(epsilon)
=global nodece 27 nodece_cached_counterexample
=counter_example_begin z3.ce942 74ab14dbd67aec7dd7f961135e1edcd7
=input.spec-%var-x-1
1 : Lambda858 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1606853743 { 0x5fc6a46f +1.55189311e64 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1606853744 { 0x5fc6a470 +1.55189323e64 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda859 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 2, 28) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry
1 : Lambda862 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1606853743 { 0x5fc6a46f +1.55189311e64 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1606853744 { 0x5fc6a470 +1.55189323e64 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda863 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 1606853744 { 0x5fc6a470 +1.55189323e64 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 167565979 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 167565980; 167565983 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 167565984; 2267117751 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2267117752; 2267117755 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2267117756; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2267117752 { 0x872178b8 -2027849544 -1.26149654e143 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 167565980 { 0x9fcda9c +1.97542142e148 } : BV:32
=input.spec-%var-i-0.L2%7%bbentry
1 : 1606853744 { 0x5fc6a470 +1.55189323e64 } : BV:32
=input.spec-%var-ret-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1606853744 { 0x5fc6a470 +1.55189323e64 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2267117752 { 0x872178b8 -2027849544 -1.26149654e143 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2267117755 { 0x872178bb -2027849541 -1.26149690e143 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 167565980 { 0x9fcda9c +1.97542142e148 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 167565983 { 0x9fcda9f +1.97542178e148 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 1606853743 ] -> true, [ 1606853744; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : Lambda841 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 1606853743 { 0x5fc6a46f +1.55189311e64 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 1606853744 { 0x5fc6a470 +1.55189323e64 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 2, 18) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry.0.1
1 : ([ 0; 1606853743 ] -> true, [ 1606853744; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L2%7%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
2743918101
=counter_example_end
=global nodece 27 num_edges_traversed 0
=global nodece 27 nodece_visted_pcs: 
L2%7%bbentry_Lfor.cond%1%bbentry
=global nodece 28
=global nodece 28 nodece z3v487.ce943.num_edges_traversed0
=global nodece 28 nodece_path
=global nodece 28 nodece_path.graph_edge_composition
(epsilon)
=global nodece 28 nodece_cached_counterexample
=counter_example_begin z3v487.ce943 df98dcef5a78fce2127acc6d7cb2af1
=input.spec-%var-x-1
1 : Lambda870 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1877901321 { 0x6fee8009 +1.86328232e96 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1877901322 { 0x6fee800a +1.86328244e96 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda871 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry
1 : Lambda873 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1877901321 { 0x6fee8009 +1.86328232e96 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1877901322 { 0x6fee800a +1.86328244e96 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda874 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 2, 28) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 1877901322 { 0x6fee800a +1.86328244e96 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 8; 4095 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4096; 4099 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4100; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4096 { 0x1000 +1.48828e129 } : BV:32
=input.spec-%var-i-0.L2%7%bbentry
1 : 1877901322 { 0x6fee800a +1.86328244e96 } : BV:32
=input.spec-%var-ret-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1877901322 { 0x6fee800a +1.86328244e96 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4096 { 0x1000 +1.48828e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 4099 { 0x1003 +1.48863e129 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 1877901321 ] -> true, [ 1877901322; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry.0.1
1 : ([ 0; 1877901321 ] -> true, [ 1877901322; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L2%7%bbentry.1.1
1 : Lambda852 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 1877901321 { 0x6fee8009 +1.86328232e96 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 1877901322 { 0x6fee800a +1.86328244e96 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 2, 18) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
983800848
=counter_example_end
=global nodece 28 num_edges_traversed 0
=global nodece 28 nodece_visted_pcs: 
L2%7%bbentry_Lfor.cond%1%bbentry
=global nodece 29
=global nodece 29 nodece z3.ce1173.num_edges_traversed2
=global nodece 29 nodece_path
=global nodece 29 nodece_path.graph_edge_composition
(epsilon)
=global nodece 29 nodece_cached_counterexample
=counter_example_begin z3.ce1173 abe8a4f5b79585a474f5ea2b289da
=retaddr_const
1 : 571456685 { 0x220fbcad +1.12294542e197 } : BV:32
=input.spec-%var-x-1
1 : Lambda23 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda24 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry
1 : Lambda23 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda24 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-6.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3533380667 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3533380668; 3533380671 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3533380672; 4159837991 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4159837992; 4159837995 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 4159837996; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4159837992 { 0xf7f21728 -135129304 -1.89133167e112 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3533380668 { 0xd29b1c3c -761586628 -1.21179914e38 } : BV:32
=input.spec-%var-i-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-5.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-0.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-0.L2%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : sum(1, 2, 1) : SUM[UNIT,BV:32]
4 : sym_const(3) : SUM[UNIT,BV:32]
=input.spec-%var-ret-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-indir_tgt.E0%0%d
1 : 571456685 { 0x220fbcad +1.12294542e197 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 1015735436 { 0x3c8ae48c +1.8509969e250 } : BV:32
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 924236686 { 0x3716bb8e +1.17759871e239 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4159837992 { 0xf7f21728 -135129304 -1.89133167e112 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 4159837995 { 0xf7f2172b -135129301 -1.89133203e112 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3533380668 { 0xd29b1c3c -761586628 -1.21179914e38 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3533380671 { 0xd29b1c3f -761586625 -1.21179950e38 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L2%7%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
190170042
=counter_example_end
=global nodece 29 num_edges_traversed 2
=global nodece 29 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 30
=global nodece 30 nodece z3.ce1131.num_edges_traversed2
=global nodece 30 nodece_path
=global nodece 30 nodece_path.graph_edge_composition
(epsilon)
=global nodece 30 nodece_cached_counterexample
=counter_example_begin z3.ce1131 b7ee8a269da864bdd09e8e6d29879076
=retaddr_const
1 : 1051788605 { 0x3eb1053d +1.38297235e254 } : BV:32
=input.spec-%var-x-1
1 : Lambda186 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda187 : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(12, 10) : BV:32
14 : 4059950084 { 0xf1fdec04 -235017212 -1.98376512e100 } : BV:32
15 : bvadd(11, 13, 14) : BV:32
16 : 4209635409 { 0xfae9f051 -85331887 -1.82764637e118 } : BV:32
17 : eq(15, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : 4209635408 { 0xfae9f050 -85331888 -1.82764625e118 } : BV:32
20 : eq(15, 19) : BOOL
21 : 4209635411 { 0xfae9f053 -85331885 -1.82764661e118 } : BV:32
22 : eq(15, 21) : BOOL
23 : 4209635410 { 0xfae9f052 -85331886 -1.82764649e118 } : BV:32
24 : eq(15, 23) : BOOL
25 : 2417119557 { 0x90125145 -1877847739 -1.14310514e161 } : BV:32
26 : eq(15, 25) : BOOL
27 : 236 { 0xec -20 } : BV:8
28 : 2417119559 { 0x90125147 -1877847737 -1.14310538e161 } : BV:32
29 : eq(15, 28) : BOOL
30 : 241 { 0xf1 -15 } : BV:8
31 : 2417119556 { 0x90125144 -1877847740 -1.14310503e161 } : BV:32
32 : eq(15, 31) : BOOL
33 : 4 { 0x4 } : BV:8
34 : 253 { 0xfd -3 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(29, 30, 35) : BV:8
37 : ite(26, 27, 36) : BV:8
38 : ite(24, 18, 37) : BV:8
39 : ite(22, 18, 38) : BV:8
40 : ite(20, 18, 39) : BV:8
41 : ite(17, 18, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 13, 14) : BV:32
44 : eq(43, 16) : BOOL
45 : eq(43, 19) : BOOL
46 : eq(43, 21) : BOOL
47 : eq(43, 23) : BOOL
48 : eq(43, 25) : BOOL
49 : eq(43, 28) : BOOL
50 : eq(43, 31) : BOOL
51 : ite(50, 33, 34) : BV:8
52 : ite(49, 30, 51) : BV:8
53 : ite(48, 27, 52) : BV:8
54 : ite(47, 18, 53) : BV:8
55 : ite(46, 18, 54) : BV:8
56 : ite(45, 18, 55) : BV:8
57 : ite(44, 18, 56) : BV:8
58 : 1 { 0x1 +1.11e129 } : BV:32
59 : bvadd(58, 13, 14) : BV:32
60 : eq(59, 16) : BOOL
61 : eq(59, 19) : BOOL
62 : eq(59, 21) : BOOL
63 : eq(59, 23) : BOOL
64 : eq(59, 25) : BOOL
65 : eq(59, 28) : BOOL
66 : eq(59, 31) : BOOL
67 : ite(66, 33, 34) : BV:8
68 : ite(65, 30, 67) : BV:8
69 : ite(64, 27, 68) : BV:8
70 : ite(63, 18, 69) : BV:8
71 : ite(62, 18, 70) : BV:8
72 : ite(61, 18, 71) : BV:8
73 : ite(60, 18, 72) : BV:8
74 : bvadd(13, 14) : BV:32
75 : eq(74, 16) : BOOL
76 : eq(74, 19) : BOOL
77 : eq(74, 21) : BOOL
78 : eq(74, 23) : BOOL
79 : eq(74, 25) : BOOL
80 : eq(74, 28) : BOOL
81 : eq(74, 31) : BOOL
82 : ite(81, 33, 34) : BV:8
83 : ite(80, 30, 82) : BV:8
84 : ite(79, 27, 83) : BV:8
85 : ite(78, 18, 84) : BV:8
86 : ite(77, 18, 85) : BV:8
87 : ite(76, 18, 86) : BV:8
88 : ite(75, 18, 87) : BV:8
89 : bvconcat(41, 57, 73, 88) : BV:32
90 : lambda(10, 89) : FUNCTION[BV:32 -> BV:32]
91 : map(9, 90) : MAP[BV:32 -> BV:32]
92 : sym_const(91) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry
1 : Lambda186 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda187 : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(12, 10) : BV:32
14 : 4059950084 { 0xf1fdec04 -235017212 -1.98376512e100 } : BV:32
15 : bvadd(11, 13, 14) : BV:32
16 : 4209635409 { 0xfae9f051 -85331887 -1.82764637e118 } : BV:32
17 : eq(15, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : 4209635408 { 0xfae9f050 -85331888 -1.82764625e118 } : BV:32
20 : eq(15, 19) : BOOL
21 : 4209635411 { 0xfae9f053 -85331885 -1.82764661e118 } : BV:32
22 : eq(15, 21) : BOOL
23 : 4209635410 { 0xfae9f052 -85331886 -1.82764649e118 } : BV:32
24 : eq(15, 23) : BOOL
25 : 2417119557 { 0x90125145 -1877847739 -1.14310514e161 } : BV:32
26 : eq(15, 25) : BOOL
27 : 236 { 0xec -20 } : BV:8
28 : 2417119559 { 0x90125147 -1877847737 -1.14310538e161 } : BV:32
29 : eq(15, 28) : BOOL
30 : 241 { 0xf1 -15 } : BV:8
31 : 2417119556 { 0x90125144 -1877847740 -1.14310503e161 } : BV:32
32 : eq(15, 31) : BOOL
33 : 4 { 0x4 } : BV:8
34 : 253 { 0xfd -3 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(29, 30, 35) : BV:8
37 : ite(26, 27, 36) : BV:8
38 : ite(24, 18, 37) : BV:8
39 : ite(22, 18, 38) : BV:8
40 : ite(20, 18, 39) : BV:8
41 : ite(17, 18, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 13, 14) : BV:32
44 : eq(43, 16) : BOOL
45 : eq(43, 19) : BOOL
46 : eq(43, 21) : BOOL
47 : eq(43, 23) : BOOL
48 : eq(43, 25) : BOOL
49 : eq(43, 28) : BOOL
50 : eq(43, 31) : BOOL
51 : ite(50, 33, 34) : BV:8
52 : ite(49, 30, 51) : BV:8
53 : ite(48, 27, 52) : BV:8
54 : ite(47, 18, 53) : BV:8
55 : ite(46, 18, 54) : BV:8
56 : ite(45, 18, 55) : BV:8
57 : ite(44, 18, 56) : BV:8
58 : 1 { 0x1 +1.11e129 } : BV:32
59 : bvadd(58, 13, 14) : BV:32
60 : eq(59, 16) : BOOL
61 : eq(59, 19) : BOOL
62 : eq(59, 21) : BOOL
63 : eq(59, 23) : BOOL
64 : eq(59, 25) : BOOL
65 : eq(59, 28) : BOOL
66 : eq(59, 31) : BOOL
67 : ite(66, 33, 34) : BV:8
68 : ite(65, 30, 67) : BV:8
69 : ite(64, 27, 68) : BV:8
70 : ite(63, 18, 69) : BV:8
71 : ite(62, 18, 70) : BV:8
72 : ite(61, 18, 71) : BV:8
73 : ite(60, 18, 72) : BV:8
74 : bvadd(13, 14) : BV:32
75 : eq(74, 16) : BOOL
76 : eq(74, 19) : BOOL
77 : eq(74, 21) : BOOL
78 : eq(74, 23) : BOOL
79 : eq(74, 25) : BOOL
80 : eq(74, 28) : BOOL
81 : eq(74, 31) : BOOL
82 : ite(81, 33, 34) : BV:8
83 : ite(80, 30, 82) : BV:8
84 : ite(79, 27, 83) : BV:8
85 : ite(78, 18, 84) : BV:8
86 : ite(77, 18, 85) : BV:8
87 : ite(76, 18, 86) : BV:8
88 : ite(75, 18, 87) : BV:8
89 : bvconcat(41, 57, 73, 88) : BV:32
90 : lambda(10, 89) : FUNCTION[BV:32 -> BV:32]
91 : map(9, 90) : MAP[BV:32 -> BV:32]
92 : sym_const(91) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-6.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 4059950084 { 0xf1fdec04 -235017212 -1.98376512e100 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 2417119555 ] -> 253, [ 2417119556; 2417119556 ] -> 4, [ 2417119557; 2417119557 ] -> 236, [ 2417119558; 2417119558 ] -> 253, [ 2417119559; 2417119559 ] -> 241, [ 2417119560; 4209635407 ] -> 253, [ 4209635408; 4209635411 ] -> 0, [ 4209635412; 4294967295 ] -> 253, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2417119555 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2417119556; 2417119559 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2417119560; 4209635407 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4209635408; 4209635411 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 4209635412; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4209635408 { 0xfae9f050 -85331888 -1.82764625e118 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2417119556 { 0x90125144 -1877847740 -1.14310503e161 } : BV:32
=input.spec-%var-i-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-5.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-0.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-0.L2%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 4261281277 { 0xfdfdfdfd -33686019 -1.98431360e124 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%var-ret-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-indir_tgt.E0%0%d
1 : 1051788605 { 0x3eb1053d +1.38297235e254 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 2037545563 { 0x79727a5b +1.89435899e115 } : BV:32
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 308041456 { 0x125c56f0 +1.72140312e165 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4209635408 { 0xfae9f050 -85331888 -1.82764625e118 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 4209635411 { 0xfae9f053 -85331885 -1.82764661e118 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2417119556 { 0x90125144 -1877847740 -1.14310503e161 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2417119559 { 0x90125147 -1877847737 -1.14310538e161 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : Lambda173 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(3, 1) : BV:32
5 : 4059950084 { 0xf1fdec04 -235017212 -1.98376512e100 } : BV:32
6 : bvadd(2, 4, 5) : BV:32
7 : 4209635409 { 0xfae9f051 -85331887 -1.82764637e118 } : BV:32
8 : eq(6, 7) : BOOL
9 : 0 { 0x0 } : BV:8
10 : 4209635408 { 0xfae9f050 -85331888 -1.82764625e118 } : BV:32
11 : eq(6, 10) : BOOL
12 : 4209635411 { 0xfae9f053 -85331885 -1.82764661e118 } : BV:32
13 : eq(6, 12) : BOOL
14 : 4209635410 { 0xfae9f052 -85331886 -1.82764649e118 } : BV:32
15 : eq(6, 14) : BOOL
16 : 2417119557 { 0x90125145 -1877847739 -1.14310514e161 } : BV:32
17 : eq(6, 16) : BOOL
18 : 236 { 0xec -20 } : BV:8
19 : 2417119559 { 0x90125147 -1877847737 -1.14310538e161 } : BV:32
20 : eq(6, 19) : BOOL
21 : 241 { 0xf1 -15 } : BV:8
22 : 2417119556 { 0x90125144 -1877847740 -1.14310503e161 } : BV:32
23 : eq(6, 22) : BOOL
24 : 4 { 0x4 } : BV:8
25 : 253 { 0xfd -3 } : BV:8
26 : ite(23, 24, 25) : BV:8
27 : ite(20, 21, 26) : BV:8
28 : ite(17, 18, 27) : BV:8
29 : ite(15, 9, 28) : BV:8
30 : ite(13, 9, 29) : BV:8
31 : ite(11, 9, 30) : BV:8
32 : ite(8, 9, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 4, 5) : BV:32
35 : eq(34, 7) : BOOL
36 : eq(34, 10) : BOOL
37 : eq(34, 12) : BOOL
38 : eq(34, 14) : BOOL
39 : eq(34, 16) : BOOL
40 : eq(34, 19) : BOOL
41 : eq(34, 22) : BOOL
42 : ite(41, 24, 25) : BV:8
43 : ite(40, 21, 42) : BV:8
44 : ite(39, 18, 43) : BV:8
45 : ite(38, 9, 44) : BV:8
46 : ite(37, 9, 45) : BV:8
47 : ite(36, 9, 46) : BV:8
48 : ite(35, 9, 47) : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : bvadd(49, 4, 5) : BV:32
51 : eq(50, 7) : BOOL
52 : eq(50, 10) : BOOL
53 : eq(50, 12) : BOOL
54 : eq(50, 14) : BOOL
55 : eq(50, 16) : BOOL
56 : eq(50, 19) : BOOL
57 : eq(50, 22) : BOOL
58 : ite(57, 24, 25) : BV:8
59 : ite(56, 21, 58) : BV:8
60 : ite(55, 18, 59) : BV:8
61 : ite(54, 9, 60) : BV:8
62 : ite(53, 9, 61) : BV:8
63 : ite(52, 9, 62) : BV:8
64 : ite(51, 9, 63) : BV:8
65 : bvadd(4, 5) : BV:32
66 : eq(65, 7) : BOOL
67 : eq(65, 10) : BOOL
68 : eq(65, 12) : BOOL
69 : eq(65, 14) : BOOL
70 : eq(65, 16) : BOOL
71 : eq(65, 19) : BOOL
72 : eq(65, 22) : BOOL
73 : ite(72, 24, 25) : BV:8
74 : ite(71, 21, 73) : BV:8
75 : ite(70, 18, 74) : BV:8
76 : ite(69, 9, 75) : BV:8
77 : ite(68, 9, 76) : BV:8
78 : ite(67, 9, 77) : BV:8
79 : ite(66, 9, 78) : BV:8
80 : bvconcat(32, 48, 64, 79) : BV:32
81 : lambda(1, 80) : FUNCTION[BV:32 -> BV:32]
82 : sym_const(81) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-0.L2%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L2%7%bbentry.1.1
1 : Lambda175 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(3, 1) : BV:32
5 : 4059950084 { 0xf1fdec04 -235017212 -1.98376512e100 } : BV:32
6 : bvadd(2, 4, 5) : BV:32
7 : 4209635409 { 0xfae9f051 -85331887 -1.82764637e118 } : BV:32
8 : eq(6, 7) : BOOL
9 : 0 { 0x0 } : BV:8
10 : 4209635408 { 0xfae9f050 -85331888 -1.82764625e118 } : BV:32
11 : eq(6, 10) : BOOL
12 : 4209635411 { 0xfae9f053 -85331885 -1.82764661e118 } : BV:32
13 : eq(6, 12) : BOOL
14 : 4209635410 { 0xfae9f052 -85331886 -1.82764649e118 } : BV:32
15 : eq(6, 14) : BOOL
16 : 2417119557 { 0x90125145 -1877847739 -1.14310514e161 } : BV:32
17 : eq(6, 16) : BOOL
18 : 236 { 0xec -20 } : BV:8
19 : 2417119559 { 0x90125147 -1877847737 -1.14310538e161 } : BV:32
20 : eq(6, 19) : BOOL
21 : 241 { 0xf1 -15 } : BV:8
22 : 2417119556 { 0x90125144 -1877847740 -1.14310503e161 } : BV:32
23 : eq(6, 22) : BOOL
24 : 4 { 0x4 } : BV:8
25 : 253 { 0xfd -3 } : BV:8
26 : ite(23, 24, 25) : BV:8
27 : ite(20, 21, 26) : BV:8
28 : ite(17, 18, 27) : BV:8
29 : ite(15, 9, 28) : BV:8
30 : ite(13, 9, 29) : BV:8
31 : ite(11, 9, 30) : BV:8
32 : ite(8, 9, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 4, 5) : BV:32
35 : eq(34, 7) : BOOL
36 : eq(34, 10) : BOOL
37 : eq(34, 12) : BOOL
38 : eq(34, 14) : BOOL
39 : eq(34, 16) : BOOL
40 : eq(34, 19) : BOOL
41 : eq(34, 22) : BOOL
42 : ite(41, 24, 25) : BV:8
43 : ite(40, 21, 42) : BV:8
44 : ite(39, 18, 43) : BV:8
45 : ite(38, 9, 44) : BV:8
46 : ite(37, 9, 45) : BV:8
47 : ite(36, 9, 46) : BV:8
48 : ite(35, 9, 47) : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : bvadd(49, 4, 5) : BV:32
51 : eq(50, 7) : BOOL
52 : eq(50, 10) : BOOL
53 : eq(50, 12) : BOOL
54 : eq(50, 14) : BOOL
55 : eq(50, 16) : BOOL
56 : eq(50, 19) : BOOL
57 : eq(50, 22) : BOOL
58 : ite(57, 24, 25) : BV:8
59 : ite(56, 21, 58) : BV:8
60 : ite(55, 18, 59) : BV:8
61 : ite(54, 9, 60) : BV:8
62 : ite(53, 9, 61) : BV:8
63 : ite(52, 9, 62) : BV:8
64 : ite(51, 9, 63) : BV:8
65 : bvadd(4, 5) : BV:32
66 : eq(65, 7) : BOOL
67 : eq(65, 10) : BOOL
68 : eq(65, 12) : BOOL
69 : eq(65, 14) : BOOL
70 : eq(65, 16) : BOOL
71 : eq(65, 19) : BOOL
72 : eq(65, 22) : BOOL
73 : ite(72, 24, 25) : BV:8
74 : ite(71, 21, 73) : BV:8
75 : ite(70, 18, 74) : BV:8
76 : ite(69, 9, 75) : BV:8
77 : ite(68, 9, 76) : BV:8
78 : ite(67, 9, 77) : BV:8
79 : ite(66, 9, 78) : BV:8
80 : bvconcat(32, 48, 64, 79) : BV:32
81 : lambda(1, 80) : FUNCTION[BV:32 -> BV:32]
82 : sym_const(81) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
1530907469
=counter_example_end
=global nodece 30 num_edges_traversed 2
=global nodece 30 nodece_visted_pcs: 
E0%0%d_E0%0%d
=graph_with_ce done
=point_set for reason inductive-invariants
=inductive-invariants point_set global exprs map
=inductive-invariants point_set point_expr 1
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : bvuge(1, 10) : BOOL
18 : bvule(1, 11) : BOOL
19 : and(17, 18) : BOOL
20 : bvuge(2, 10) : BOOL
21 : bvule(2, 11) : BOOL
22 : and(20, 21) : BOOL
23 : not(22) : BOOL
24 : andnot1(19, 23) : BOOL
25 : bvuge(10, 1) : BOOL
26 : bvule(10, 2) : BOOL
27 : and(25, 26) : BOOL
28 : bvuge(11, 1) : BOOL
29 : bvule(11, 2) : BOOL
30 : and(28, 29) : BOOL
31 : not(30) : BOOL
32 : andnot1(27, 31) : BOOL
33 : and(24, 32) : BOOL
34 : and(16, 33) : BOOL
35 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
36 : 3 { 0x3 +1.35e129 } : BV:32
37 : bvand(35, 36) : BV:32
38 : 0 { 0x0 +1.0e129 } : BV:32
39 : eq(37, 38) : BOOL
40 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
41 : bvand(40, 36) : BV:32
42 : eq(41, 38) : BOOL
43 : and(39, 42) : BOOL
44 : and(34, 43) : BOOL
45 : eq(35, 1) : BOOL
46 : eq(40, 10) : BOOL
47 : and(45, 46) : BOOL
48 : and(44, 47) : BOOL
49 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
50 : 1 { 0x1 +1.11e129 } : BV:32
51 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
52 : region_agrees_with_memlabel(49, 38, 50, 51) : BOOL
53 : and(48, 52) : BOOL
=inductive-invariants point_set point_expr 2
1 : input.spec-%var-i-0.L2%7%bbentry : BV:32
=inductive-invariants point_set point_expr 3
1 : input.spec-%var-ret-0.L2%7%bbentry : BV:32
=inductive-invariants point_set point_expr 4
1 : input.dst.llvm-%x : BV:32
=inductive-invariants point_set point_expr 5
1 : input.dst.llvm-%n : BV:32
=inductive-invariants point_set point_expr 6
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=inductive-invariants point_set point_expr 7
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=inductive-invariants point_set point_expr 8
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 9
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 10
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 11
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 12
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 13
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 14
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 15
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 16
1 : input.spec-%var-x-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%x : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 17
1 : input.spec-%var-x-0.L2%7%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 18
1 : input.spec-%var-x-0.L2%7%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%x : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : bvadd(14, 5) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(10, 11, 12, 15, 16, 17) : BV:32
19 : lambda(9, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(8, 19) : MAP[BV:32 -> BV:32]
21 : eq(1, 20) : BOOL
=inductive-invariants point_set point_expr 19
1 : input.spec-%var-x-0.L2%7%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : bvadd(14, 5) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(10, 11, 12, 15, 16, 17) : BV:32
19 : lambda(9, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(8, 19) : MAP[BV:32 -> BV:32]
21 : eq(1, 20) : BOOL
=inductive-invariants point_set point_expr 20
1 : input.spec-%var-x-0.L2%7%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 21
1 : input.spec-%var-x-0.L2%7%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%x : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set global exprs map done
=inductive-invariants point_set points
=inductive-invariants point_set point z3v487.ce4
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 2 for input.spec-%var-i-0.L2%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 3 for input.spec-%var-ret-0.L2%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 done
=inductive-invariants point_set point z3.ce3
=inductive-invariants point_set point z3.ce3 expr point z3.ce3
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 2 for input.spec-%var-i-0.L2%7%bbentry
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 3 for input.spec-%var-ret-0.L2%7%bbentry
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 done
=inductive-invariants point_set point z3.ce103
=inductive-invariants point_set point z3.ce103 expr point z3.ce103
=inductive-invariants point_set point z3.ce103 expr point z3.ce103 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce103 expr point z3.ce103 val 2 for input.spec-%var-i-0.L2%7%bbentry
0
=inductive-invariants point_set point z3.ce103 expr point z3.ce103 val 3 for input.spec-%var-ret-0.L2%7%bbentry
0
=inductive-invariants point_set point z3.ce103 expr point z3.ce103 val 4 for input.dst.llvm-%x
4020501248
=inductive-invariants point_set point z3.ce103 expr point z3.ce103 val 5 for input.dst.llvm-%n
4211145473
=inductive-invariants point_set point z3.ce103 expr point z3.ce103 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce103 expr point z3.ce103 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce103 expr point z3.ce103 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce103 expr point z3.ce103 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce103 expr point z3.ce103 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce103 expr point z3.ce103 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce103 expr point z3.ce103 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce103 expr point z3.ce103 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce103 expr point z3.ce103 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce103 expr point z3.ce103 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce103 expr point z3.ce103 done
=inductive-invariants point_set point z3.ce43
=inductive-invariants point_set point z3.ce43 expr point z3.ce43
=inductive-invariants point_set point z3.ce43 expr point z3.ce43 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce43 expr point z3.ce43 val 2 for input.spec-%var-i-0.L2%7%bbentry
0
=inductive-invariants point_set point z3.ce43 expr point z3.ce43 val 3 for input.spec-%var-ret-0.L2%7%bbentry
0
=inductive-invariants point_set point z3.ce43 expr point z3.ce43 val 4 for input.dst.llvm-%x
2140659456
=inductive-invariants point_set point z3.ce43 expr point z3.ce43 val 5 for input.dst.llvm-%n
3755990816
=inductive-invariants point_set point z3.ce43 expr point z3.ce43 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce43 expr point z3.ce43 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce43 expr point z3.ce43 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce43 expr point z3.ce43 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce43 expr point z3.ce43 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce43 expr point z3.ce43 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce43 expr point z3.ce43 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce43 expr point z3.ce43 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce43 expr point z3.ce43 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce43 expr point z3.ce43 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce43 expr point z3.ce43 done
=inductive-invariants point_set point z3.ce23
=inductive-invariants point_set point z3.ce23 expr point z3.ce23
=inductive-invariants point_set point z3.ce23 expr point z3.ce23 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce23 expr point z3.ce23 val 2 for input.spec-%var-i-0.L2%7%bbentry
0
=inductive-invariants point_set point z3.ce23 expr point z3.ce23 val 3 for input.spec-%var-ret-0.L2%7%bbentry
0
=inductive-invariants point_set point z3.ce23 expr point z3.ce23 val 4 for input.dst.llvm-%x
2012183808
=inductive-invariants point_set point z3.ce23 expr point z3.ce23 val 5 for input.dst.llvm-%n
65536
=inductive-invariants point_set point z3.ce23 expr point z3.ce23 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce23 expr point z3.ce23 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce23 expr point z3.ce23 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce23 expr point z3.ce23 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce23 expr point z3.ce23 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce23 expr point z3.ce23 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce23 expr point z3.ce23 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce23 expr point z3.ce23 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce23 expr point z3.ce23 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce23 expr point z3.ce23 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce23 expr point z3.ce23 done
=inductive-invariants point_set point z3.ce63
=inductive-invariants point_set point z3.ce63 expr point z3.ce63
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 2 for input.spec-%var-i-0.L2%7%bbentry
0
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 3 for input.spec-%var-ret-0.L2%7%bbentry
0
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 4 for input.dst.llvm-%x
1610604296
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 5 for input.dst.llvm-%n
524552
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 done
=inductive-invariants point_set point z3v487.ce24
=inductive-invariants point_set point z3v487.ce24 expr point z3v487.ce24
=inductive-invariants point_set point z3v487.ce24 expr point z3v487.ce24 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce24 expr point z3v487.ce24 val 2 for input.spec-%var-i-0.L2%7%bbentry
0
=inductive-invariants point_set point z3v487.ce24 expr point z3v487.ce24 val 3 for input.spec-%var-ret-0.L2%7%bbentry
0
=inductive-invariants point_set point z3v487.ce24 expr point z3v487.ce24 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce24 expr point z3v487.ce24 val 5 for input.dst.llvm-%n
65536
=inductive-invariants point_set point z3v487.ce24 expr point z3v487.ce24 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce24 expr point z3v487.ce24 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce24 expr point z3v487.ce24 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce24 expr point z3v487.ce24 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce24 expr point z3v487.ce24 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce24 expr point z3v487.ce24 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce24 expr point z3v487.ce24 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce24 expr point z3v487.ce24 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce24 expr point z3v487.ce24 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce24 expr point z3v487.ce24 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce24 expr point z3v487.ce24 done
=inductive-invariants point_set point z3.ce83
=inductive-invariants point_set point z3.ce83 expr point z3.ce83
=inductive-invariants point_set point z3.ce83 expr point z3.ce83 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce83 expr point z3.ce83 val 2 for input.spec-%var-i-0.L2%7%bbentry
0
=inductive-invariants point_set point z3.ce83 expr point z3.ce83 val 3 for input.spec-%var-ret-0.L2%7%bbentry
0
=inductive-invariants point_set point z3.ce83 expr point z3.ce83 val 4 for input.dst.llvm-%x
4059950084
=inductive-invariants point_set point z3.ce83 expr point z3.ce83 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce83 expr point z3.ce83 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce83 expr point z3.ce83 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce83 expr point z3.ce83 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce83 expr point z3.ce83 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce83 expr point z3.ce83 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce83 expr point z3.ce83 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce83 expr point z3.ce83 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce83 expr point z3.ce83 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce83 expr point z3.ce83 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce83 expr point z3.ce83 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce83 expr point z3.ce83 done
=inductive-invariants point_set point z3v487.ce44
=inductive-invariants point_set point z3v487.ce44 expr point z3v487.ce44
=inductive-invariants point_set point z3v487.ce44 expr point z3v487.ce44 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce44 expr point z3v487.ce44 val 2 for input.spec-%var-i-0.L2%7%bbentry
0
=inductive-invariants point_set point z3v487.ce44 expr point z3v487.ce44 val 3 for input.spec-%var-ret-0.L2%7%bbentry
0
=inductive-invariants point_set point z3v487.ce44 expr point z3v487.ce44 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce44 expr point z3v487.ce44 val 5 for input.dst.llvm-%n
4096
=inductive-invariants point_set point z3v487.ce44 expr point z3v487.ce44 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce44 expr point z3v487.ce44 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce44 expr point z3v487.ce44 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce44 expr point z3v487.ce44 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce44 expr point z3v487.ce44 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce44 expr point z3v487.ce44 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce44 expr point z3v487.ce44 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce44 expr point z3v487.ce44 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce44 expr point z3v487.ce44 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce44 expr point z3v487.ce44 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce44 expr point z3v487.ce44 done
=inductive-invariants point_set point z3v487.ce64
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 2 for input.spec-%var-i-0.L2%7%bbentry
0
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 3 for input.spec-%var-ret-0.L2%7%bbentry
0
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 4 for input.dst.llvm-%x
32
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 done
=inductive-invariants point_set point z3v487.ce84
=inductive-invariants point_set point z3v487.ce84 expr point z3v487.ce84
=inductive-invariants point_set point z3v487.ce84 expr point z3v487.ce84 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce84 expr point z3v487.ce84 val 2 for input.spec-%var-i-0.L2%7%bbentry
0
=inductive-invariants point_set point z3v487.ce84 expr point z3v487.ce84 val 3 for input.spec-%var-ret-0.L2%7%bbentry
0
=inductive-invariants point_set point z3v487.ce84 expr point z3v487.ce84 val 4 for input.dst.llvm-%x
4
=inductive-invariants point_set point z3v487.ce84 expr point z3v487.ce84 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce84 expr point z3v487.ce84 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce84 expr point z3v487.ce84 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce84 expr point z3v487.ce84 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce84 expr point z3v487.ce84 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce84 expr point z3v487.ce84 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce84 expr point z3v487.ce84 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce84 expr point z3v487.ce84 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce84 expr point z3v487.ce84 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce84 expr point z3v487.ce84 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce84 expr point z3v487.ce84 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce84 expr point z3v487.ce84 done
=inductive-invariants point_set point z3v487.ce144
=inductive-invariants point_set point z3v487.ce144 expr point z3v487.ce144
=inductive-invariants point_set point z3v487.ce144 expr point z3v487.ce144 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce144 expr point z3v487.ce144 val 2 for input.spec-%var-i-0.L2%7%bbentry
0
=inductive-invariants point_set point z3v487.ce144 expr point z3v487.ce144 val 3 for input.spec-%var-ret-0.L2%7%bbentry
0
=inductive-invariants point_set point z3v487.ce144 expr point z3v487.ce144 val 4 for input.dst.llvm-%x
3231062016
=inductive-invariants point_set point z3v487.ce144 expr point z3v487.ce144 val 5 for input.dst.llvm-%n
2147483652
=inductive-invariants point_set point z3v487.ce144 expr point z3v487.ce144 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce144 expr point z3v487.ce144 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce144 expr point z3v487.ce144 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce144 expr point z3v487.ce144 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce144 expr point z3v487.ce144 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce144 expr point z3v487.ce144 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce144 expr point z3v487.ce144 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce144 expr point z3v487.ce144 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce144 expr point z3v487.ce144 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce144 expr point z3v487.ce144 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce144 expr point z3v487.ce144 done
=inductive-invariants point_set point z3.ce143
=inductive-invariants point_set point z3.ce143 expr point z3.ce143
=inductive-invariants point_set point z3.ce143 expr point z3.ce143 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce143 expr point z3.ce143 val 2 for input.spec-%var-i-0.L2%7%bbentry
0
=inductive-invariants point_set point z3.ce143 expr point z3.ce143 val 3 for input.spec-%var-ret-0.L2%7%bbentry
0
=inductive-invariants point_set point z3.ce143 expr point z3.ce143 val 4 for input.dst.llvm-%x
1422430464
=inductive-invariants point_set point z3.ce143 expr point z3.ce143 val 5 for input.dst.llvm-%n
98636065
=inductive-invariants point_set point z3.ce143 expr point z3.ce143 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce143 expr point z3.ce143 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce143 expr point z3.ce143 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce143 expr point z3.ce143 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce143 expr point z3.ce143 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce143 expr point z3.ce143 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce143 expr point z3.ce143 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce143 expr point z3.ce143 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce143 expr point z3.ce143 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce143 expr point z3.ce143 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce143 expr point z3.ce143 done
=inductive-invariants point_set point z3.ce223
=inductive-invariants point_set point z3.ce223 expr point z3.ce223
=inductive-invariants point_set point z3.ce223 expr point z3.ce223 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce223 expr point z3.ce223 val 2 for input.spec-%var-i-0.L2%7%bbentry
0
=inductive-invariants point_set point z3.ce223 expr point z3.ce223 val 3 for input.spec-%var-ret-0.L2%7%bbentry
0
=inductive-invariants point_set point z3.ce223 expr point z3.ce223 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce223 expr point z3.ce223 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce223 expr point z3.ce223 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce223 expr point z3.ce223 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce223 expr point z3.ce223 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce223 expr point z3.ce223 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce223 expr point z3.ce223 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce223 expr point z3.ce223 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce223 expr point z3.ce223 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce223 expr point z3.ce223 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce223 expr point z3.ce223 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce223 expr point z3.ce223 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce223 expr point z3.ce223 done
=inductive-invariants point_set point z3v487.ce164
=inductive-invariants point_set point z3v487.ce164 expr point z3v487.ce164
=inductive-invariants point_set point z3v487.ce164 expr point z3v487.ce164 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce164 expr point z3v487.ce164 val 2 for input.spec-%var-i-0.L2%7%bbentry
0
=inductive-invariants point_set point z3v487.ce164 expr point z3v487.ce164 val 3 for input.spec-%var-ret-0.L2%7%bbentry
0
=inductive-invariants point_set point z3v487.ce164 expr point z3v487.ce164 val 4 for input.dst.llvm-%x
8
=inductive-invariants point_set point z3v487.ce164 expr point z3v487.ce164 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce164 expr point z3v487.ce164 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce164 expr point z3v487.ce164 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce164 expr point z3v487.ce164 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce164 expr point z3v487.ce164 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce164 expr point z3v487.ce164 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce164 expr point z3v487.ce164 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce164 expr point z3v487.ce164 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce164 expr point z3v487.ce164 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce164 expr point z3v487.ce164 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce164 expr point z3v487.ce164 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce164 expr point z3v487.ce164 done
=inductive-invariants point_set point z3.ce163
=inductive-invariants point_set point z3.ce163 expr point z3.ce163
=inductive-invariants point_set point z3.ce163 expr point z3.ce163 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce163 expr point z3.ce163 val 2 for input.spec-%var-i-0.L2%7%bbentry
0
=inductive-invariants point_set point z3.ce163 expr point z3.ce163 val 3 for input.spec-%var-ret-0.L2%7%bbentry
0
=inductive-invariants point_set point z3.ce163 expr point z3.ce163 val 4 for input.dst.llvm-%x
4
=inductive-invariants point_set point z3.ce163 expr point z3.ce163 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce163 expr point z3.ce163 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce163 expr point z3.ce163 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce163 expr point z3.ce163 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce163 expr point z3.ce163 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce163 expr point z3.ce163 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce163 expr point z3.ce163 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce163 expr point z3.ce163 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce163 expr point z3.ce163 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce163 expr point z3.ce163 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce163 expr point z3.ce163 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce163 expr point z3.ce163 done
=inductive-invariants point_set point z3.ce123
=inductive-invariants point_set point z3.ce123 expr point z3.ce123
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 2 for input.spec-%var-i-0.L2%7%bbentry
0
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 3 for input.spec-%var-ret-0.L2%7%bbentry
0
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 4 for input.dst.llvm-%x
4292869632
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 done
=inductive-invariants point_set point z3v487.ce104
=inductive-invariants point_set point z3v487.ce104 expr point z3v487.ce104
=inductive-invariants point_set point z3v487.ce104 expr point z3v487.ce104 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce104 expr point z3v487.ce104 val 2 for input.spec-%var-i-0.L2%7%bbentry
0
=inductive-invariants point_set point z3v487.ce104 expr point z3v487.ce104 val 3 for input.spec-%var-ret-0.L2%7%bbentry
0
=inductive-invariants point_set point z3v487.ce104 expr point z3v487.ce104 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce104 expr point z3v487.ce104 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3v487.ce104 expr point z3v487.ce104 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce104 expr point z3v487.ce104 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce104 expr point z3v487.ce104 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce104 expr point z3v487.ce104 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce104 expr point z3v487.ce104 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce104 expr point z3v487.ce104 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce104 expr point z3v487.ce104 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce104 expr point z3v487.ce104 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce104 expr point z3v487.ce104 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce104 expr point z3v487.ce104 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce104 expr point z3v487.ce104 done
=inductive-invariants point_set point z3v487.ce124
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 2 for input.spec-%var-i-0.L2%7%bbentry
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 3 for input.spec-%var-ret-0.L2%7%bbentry
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 done
=inductive-invariants point_set point z3.ce203
=inductive-invariants point_set point z3.ce203 expr point z3.ce203
=inductive-invariants point_set point z3.ce203 expr point z3.ce203 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce203 expr point z3.ce203 val 2 for input.spec-%var-i-0.L2%7%bbentry
0
=inductive-invariants point_set point z3.ce203 expr point z3.ce203 val 3 for input.spec-%var-ret-0.L2%7%bbentry
0
=inductive-invariants point_set point z3.ce203 expr point z3.ce203 val 4 for input.dst.llvm-%x
4042230016
=inductive-invariants point_set point z3.ce203 expr point z3.ce203 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3.ce203 expr point z3.ce203 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce203 expr point z3.ce203 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce203 expr point z3.ce203 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce203 expr point z3.ce203 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce203 expr point z3.ce203 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce203 expr point z3.ce203 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce203 expr point z3.ce203 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce203 expr point z3.ce203 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce203 expr point z3.ce203 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce203 expr point z3.ce203 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce203 expr point z3.ce203 done
=inductive-invariants point_set point z3.ce183
=inductive-invariants point_set point z3.ce183 expr point z3.ce183
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 2 for input.spec-%var-i-0.L2%7%bbentry
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 3 for input.spec-%var-ret-0.L2%7%bbentry
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 4 for input.dst.llvm-%x
4042230016
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 done
=inductive-invariants point_set point z3v487.ce184
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 2 for input.spec-%var-i-0.L2%7%bbentry
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 3 for input.spec-%var-ret-0.L2%7%bbentry
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 4 for input.dst.llvm-%x
8472832
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 done
=inductive-invariants point_set point z3v487.ce204
=inductive-invariants point_set point z3v487.ce204 expr point z3v487.ce204
=inductive-invariants point_set point z3v487.ce204 expr point z3v487.ce204 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce204 expr point z3v487.ce204 val 2 for input.spec-%var-i-0.L2%7%bbentry
0
=inductive-invariants point_set point z3v487.ce204 expr point z3v487.ce204 val 3 for input.spec-%var-ret-0.L2%7%bbentry
0
=inductive-invariants point_set point z3v487.ce204 expr point z3v487.ce204 val 4 for input.dst.llvm-%x
8472832
=inductive-invariants point_set point z3v487.ce204 expr point z3v487.ce204 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3v487.ce204 expr point z3v487.ce204 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce204 expr point z3v487.ce204 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce204 expr point z3v487.ce204 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce204 expr point z3v487.ce204 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce204 expr point z3v487.ce204 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce204 expr point z3v487.ce204 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce204 expr point z3v487.ce204 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce204 expr point z3v487.ce204 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce204 expr point z3v487.ce204 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce204 expr point z3v487.ce204 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce204 expr point z3v487.ce204 done
=inductive-invariants point_set point z3v487.ce224
=inductive-invariants point_set point z3v487.ce224 expr point z3v487.ce224
=inductive-invariants point_set point z3v487.ce224 expr point z3v487.ce224 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce224 expr point z3v487.ce224 val 2 for input.spec-%var-i-0.L2%7%bbentry
0
=inductive-invariants point_set point z3v487.ce224 expr point z3v487.ce224 val 3 for input.spec-%var-ret-0.L2%7%bbentry
0
=inductive-invariants point_set point z3v487.ce224 expr point z3v487.ce224 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce224 expr point z3v487.ce224 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce224 expr point z3v487.ce224 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce224 expr point z3v487.ce224 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce224 expr point z3v487.ce224 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce224 expr point z3v487.ce224 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce224 expr point z3v487.ce224 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce224 expr point z3v487.ce224 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce224 expr point z3v487.ce224 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce224 expr point z3v487.ce224 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce224 expr point z3v487.ce224 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce224 expr point z3v487.ce224 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce224 expr point z3v487.ce224 done
=inductive-invariants point_set point z3v487.ce572
=inductive-invariants point_set point z3v487.ce572 expr point z3v487.ce572
=inductive-invariants point_set point z3v487.ce572 expr point z3v487.ce572 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce572 expr point z3v487.ce572 val 2 for input.spec-%var-i-0.L2%7%bbentry
1
=inductive-invariants point_set point z3v487.ce572 expr point z3v487.ce572 val 3 for input.spec-%var-ret-0.L2%7%bbentry
0
=inductive-invariants point_set point z3v487.ce572 expr point z3v487.ce572 val 4 for input.dst.llvm-%x
1098907648
=inductive-invariants point_set point z3v487.ce572 expr point z3v487.ce572 val 5 for input.dst.llvm-%n
1024
=inductive-invariants point_set point z3v487.ce572 expr point z3v487.ce572 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce572 expr point z3v487.ce572 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce572 expr point z3v487.ce572 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce572 expr point z3v487.ce572 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce572 expr point z3v487.ce572 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce572 expr point z3v487.ce572 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce572 expr point z3v487.ce572 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce572 expr point z3v487.ce572 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce572 expr point z3v487.ce572 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce572 expr point z3v487.ce572 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce572 expr point z3v487.ce572 done
=inductive-invariants point_set point z3.ce582
=inductive-invariants point_set point z3.ce582 expr point z3.ce582
=inductive-invariants point_set point z3.ce582 expr point z3.ce582 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce582 expr point z3.ce582 val 2 for input.spec-%var-i-0.L2%7%bbentry
1
=inductive-invariants point_set point z3.ce582 expr point z3.ce582 val 3 for input.spec-%var-ret-0.L2%7%bbentry
0
=inductive-invariants point_set point z3.ce582 expr point z3.ce582 val 4 for input.dst.llvm-%x
3050497956
=inductive-invariants point_set point z3.ce582 expr point z3.ce582 val 5 for input.dst.llvm-%n
524288
=inductive-invariants point_set point z3.ce582 expr point z3.ce582 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce582 expr point z3.ce582 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce582 expr point z3.ce582 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce582 expr point z3.ce582 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce582 expr point z3.ce582 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce582 expr point z3.ce582 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce582 expr point z3.ce582 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce582 expr point z3.ce582 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce582 expr point z3.ce582 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce582 expr point z3.ce582 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce582 expr point z3.ce582 done
=inductive-invariants point_set point z3v487.ce891
=inductive-invariants point_set point z3v487.ce891 expr point z3v487.ce891
=inductive-invariants point_set point z3v487.ce891 expr point z3v487.ce891 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce891 expr point z3v487.ce891 val 2 for input.spec-%var-i-0.L2%7%bbentry
5
=inductive-invariants point_set point z3v487.ce891 expr point z3v487.ce891 val 3 for input.spec-%var-ret-0.L2%7%bbentry
0
=inductive-invariants point_set point z3v487.ce891 expr point z3v487.ce891 val 4 for input.dst.llvm-%x
2147483632
=inductive-invariants point_set point z3v487.ce891 expr point z3v487.ce891 val 5 for input.dst.llvm-%n
20
=inductive-invariants point_set point z3v487.ce891 expr point z3v487.ce891 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce891 expr point z3v487.ce891 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
5
=inductive-invariants point_set point z3v487.ce891 expr point z3v487.ce891 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce891 expr point z3v487.ce891 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce891 expr point z3v487.ce891 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce891 expr point z3v487.ce891 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce891 expr point z3v487.ce891 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce891 expr point z3v487.ce891 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce891 expr point z3v487.ce891 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce891 expr point z3v487.ce891 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce891 expr point z3v487.ce891 done
=inductive-invariants point_set point z3.ce892
=inductive-invariants point_set point z3.ce892 expr point z3.ce892
=inductive-invariants point_set point z3.ce892 expr point z3.ce892 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce892 expr point z3.ce892 val 2 for input.spec-%var-i-0.L2%7%bbentry
5
=inductive-invariants point_set point z3.ce892 expr point z3.ce892 val 3 for input.spec-%var-ret-0.L2%7%bbentry
0
=inductive-invariants point_set point z3.ce892 expr point z3.ce892 val 4 for input.dst.llvm-%x
2147483640
=inductive-invariants point_set point z3.ce892 expr point z3.ce892 val 5 for input.dst.llvm-%n
5
=inductive-invariants point_set point z3.ce892 expr point z3.ce892 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce892 expr point z3.ce892 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
5
=inductive-invariants point_set point z3.ce892 expr point z3.ce892 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce892 expr point z3.ce892 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce892 expr point z3.ce892 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce892 expr point z3.ce892 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce892 expr point z3.ce892 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce892 expr point z3.ce892 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce892 expr point z3.ce892 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce892 expr point z3.ce892 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce892 expr point z3.ce892 done
=inductive-invariants point_set point z3.ce777
=inductive-invariants point_set point z3.ce777 expr point z3.ce777
=inductive-invariants point_set point z3.ce777 expr point z3.ce777 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce777 expr point z3.ce777 val 2 for input.spec-%var-i-0.L2%7%bbentry
2
=inductive-invariants point_set point z3.ce777 expr point z3.ce777 val 3 for input.spec-%var-ret-0.L2%7%bbentry
4227595259
=inductive-invariants point_set point z3.ce777 expr point z3.ce777 val 4 for input.dst.llvm-%x
4020501248
=inductive-invariants point_set point z3.ce777 expr point z3.ce777 val 5 for input.dst.llvm-%n
4211145473
=inductive-invariants point_set point z3.ce777 expr point z3.ce777 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
4227595259
=inductive-invariants point_set point z3.ce777 expr point z3.ce777 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3.ce777 expr point z3.ce777 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce777 expr point z3.ce777 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce777 expr point z3.ce777 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce777 expr point z3.ce777 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce777 expr point z3.ce777 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce777 expr point z3.ce777 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce777 expr point z3.ce777 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce777 expr point z3.ce777 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce777 expr point z3.ce777 done
=inductive-invariants point_set point z3.ce663
=inductive-invariants point_set point z3.ce663 expr point z3.ce663
=inductive-invariants point_set point z3.ce663 expr point z3.ce663 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce663 expr point z3.ce663 val 2 for input.spec-%var-i-0.L2%7%bbentry
2
=inductive-invariants point_set point z3.ce663 expr point z3.ce663 val 3 for input.spec-%var-ret-0.L2%7%bbentry
0
=inductive-invariants point_set point z3.ce663 expr point z3.ce663 val 4 for input.dst.llvm-%x
2012183808
=inductive-invariants point_set point z3.ce663 expr point z3.ce663 val 5 for input.dst.llvm-%n
65536
=inductive-invariants point_set point z3.ce663 expr point z3.ce663 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce663 expr point z3.ce663 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3.ce663 expr point z3.ce663 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce663 expr point z3.ce663 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce663 expr point z3.ce663 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce663 expr point z3.ce663 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce663 expr point z3.ce663 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce663 expr point z3.ce663 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce663 expr point z3.ce663 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce663 expr point z3.ce663 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce663 expr point z3.ce663 done
=inductive-invariants point_set point z3.ce720
=inductive-invariants point_set point z3.ce720 expr point z3.ce720
=inductive-invariants point_set point z3.ce720 expr point z3.ce720 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce720 expr point z3.ce720 val 2 for input.spec-%var-i-0.L2%7%bbentry
2
=inductive-invariants point_set point z3.ce720 expr point z3.ce720 val 3 for input.spec-%var-ret-0.L2%7%bbentry
3755991007
=inductive-invariants point_set point z3.ce720 expr point z3.ce720 val 4 for input.dst.llvm-%x
2140659456
=inductive-invariants point_set point z3.ce720 expr point z3.ce720 val 5 for input.dst.llvm-%n
3755990816
=inductive-invariants point_set point z3.ce720 expr point z3.ce720 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
3755991007
=inductive-invariants point_set point z3.ce720 expr point z3.ce720 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3.ce720 expr point z3.ce720 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce720 expr point z3.ce720 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce720 expr point z3.ce720 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce720 expr point z3.ce720 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce720 expr point z3.ce720 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce720 expr point z3.ce720 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce720 expr point z3.ce720 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce720 expr point z3.ce720 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce720 expr point z3.ce720 done
=inductive-invariants point_set point z3v487.ce698
=inductive-invariants point_set point z3v487.ce698 expr point z3v487.ce698
=inductive-invariants point_set point z3v487.ce698 expr point z3v487.ce698 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce698 expr point z3v487.ce698 val 2 for input.spec-%var-i-0.L2%7%bbentry
2
=inductive-invariants point_set point z3v487.ce698 expr point z3v487.ce698 val 3 for input.spec-%var-ret-0.L2%7%bbentry
0
=inductive-invariants point_set point z3v487.ce698 expr point z3v487.ce698 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce698 expr point z3v487.ce698 val 5 for input.dst.llvm-%n
65536
=inductive-invariants point_set point z3v487.ce698 expr point z3v487.ce698 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce698 expr point z3v487.ce698 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3v487.ce698 expr point z3v487.ce698 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce698 expr point z3v487.ce698 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce698 expr point z3v487.ce698 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce698 expr point z3v487.ce698 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce698 expr point z3v487.ce698 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce698 expr point z3v487.ce698 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce698 expr point z3v487.ce698 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce698 expr point z3v487.ce698 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce698 expr point z3v487.ce698 done
=inductive-invariants point_set point z3.ce799
=inductive-invariants point_set point z3.ce799 expr point z3.ce799
=inductive-invariants point_set point z3.ce799 expr point z3.ce799 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce799 expr point z3.ce799 val 2 for input.spec-%var-i-0.L2%7%bbentry
2
=inductive-invariants point_set point z3.ce799 expr point z3.ce799 val 3 for input.spec-%var-ret-0.L2%7%bbentry
3755991007
=inductive-invariants point_set point z3.ce799 expr point z3.ce799 val 4 for input.dst.llvm-%x
4292869632
=inductive-invariants point_set point z3.ce799 expr point z3.ce799 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3.ce799 expr point z3.ce799 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
3755991007
=inductive-invariants point_set point z3.ce799 expr point z3.ce799 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3.ce799 expr point z3.ce799 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce799 expr point z3.ce799 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce799 expr point z3.ce799 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce799 expr point z3.ce799 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce799 expr point z3.ce799 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce799 expr point z3.ce799 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce799 expr point z3.ce799 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce799 expr point z3.ce799 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce799 expr point z3.ce799 done
=inductive-invariants point_set point z3.ce755
=inductive-invariants point_set point z3.ce755 expr point z3.ce755
=inductive-invariants point_set point z3.ce755 expr point z3.ce755 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce755 expr point z3.ce755 val 2 for input.spec-%var-i-0.L2%7%bbentry
2
=inductive-invariants point_set point z3.ce755 expr point z3.ce755 val 3 for input.spec-%var-ret-0.L2%7%bbentry
134744072
=inductive-invariants point_set point z3.ce755 expr point z3.ce755 val 4 for input.dst.llvm-%x
1610604296
=inductive-invariants point_set point z3.ce755 expr point z3.ce755 val 5 for input.dst.llvm-%n
524552
=inductive-invariants point_set point z3.ce755 expr point z3.ce755 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
134744072
=inductive-invariants point_set point z3.ce755 expr point z3.ce755 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3.ce755 expr point z3.ce755 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce755 expr point z3.ce755 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce755 expr point z3.ce755 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce755 expr point z3.ce755 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce755 expr point z3.ce755 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce755 expr point z3.ce755 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce755 expr point z3.ce755 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce755 expr point z3.ce755 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce755 expr point z3.ce755 done
=inductive-invariants point_set point z3v487.ce840
=inductive-invariants point_set point z3v487.ce840 expr point z3v487.ce840
=inductive-invariants point_set point z3v487.ce840 expr point z3v487.ce840 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce840 expr point z3v487.ce840 val 2 for input.spec-%var-i-0.L2%7%bbentry
4
=inductive-invariants point_set point z3v487.ce840 expr point z3v487.ce840 val 3 for input.spec-%var-ret-0.L2%7%bbentry
0
=inductive-invariants point_set point z3v487.ce840 expr point z3v487.ce840 val 4 for input.dst.llvm-%x
212773536
=inductive-invariants point_set point z3v487.ce840 expr point z3v487.ce840 val 5 for input.dst.llvm-%n
2048
=inductive-invariants point_set point z3v487.ce840 expr point z3v487.ce840 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce840 expr point z3v487.ce840 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3v487.ce840 expr point z3v487.ce840 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce840 expr point z3v487.ce840 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce840 expr point z3v487.ce840 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce840 expr point z3v487.ce840 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce840 expr point z3v487.ce840 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce840 expr point z3v487.ce840 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce840 expr point z3v487.ce840 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce840 expr point z3v487.ce840 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce840 expr point z3v487.ce840 done
=inductive-invariants point_set point z3.ce841
=inductive-invariants point_set point z3.ce841 expr point z3.ce841
=inductive-invariants point_set point z3.ce841 expr point z3.ce841 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce841 expr point z3.ce841 val 2 for input.spec-%var-i-0.L2%7%bbentry
4
=inductive-invariants point_set point z3.ce841 expr point z3.ce841 val 3 for input.spec-%var-ret-0.L2%7%bbentry
0
=inductive-invariants point_set point z3.ce841 expr point z3.ce841 val 4 for input.dst.llvm-%x
411096120
=inductive-invariants point_set point z3.ce841 expr point z3.ce841 val 5 for input.dst.llvm-%n
6
=inductive-invariants point_set point z3.ce841 expr point z3.ce841 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce841 expr point z3.ce841 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3.ce841 expr point z3.ce841 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce841 expr point z3.ce841 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce841 expr point z3.ce841 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce841 expr point z3.ce841 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce841 expr point z3.ce841 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce841 expr point z3.ce841 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce841 expr point z3.ce841 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce841 expr point z3.ce841 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce841 expr point z3.ce841 done
=inductive-invariants point_set points done
=out-of-bound-exprs for reason inductive-invariants
=out-of-bound-exprs for reason inductive-invariants at L0%0%d_L0%0%d

=out-of-bound-exprs for reason inductive-invariants at L2%7%bbentry_Lfor.cond%1%bbentry

=out-of-bound-exprs for reason inductive-invariants at E0%0%d_E0%0%d

=graph_with_points done
=Invariant state at node L0%0%d_L0%0%d for reason inductive-invariants
=pc L0%0%d_L0%0%d inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond.description

=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond.expr is null
=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond done
=pc L0%0%d_L0%0%d inductive-invariants invariant_state done
=Invariant state at node L2%7%bbentry_Lfor.cond%1%bbentry for reason inductive-invariants
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state failcond.description

=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state failcond.expr is null
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state failcond done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability name abstract-memlabel-asserts
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability expr_group_type HOUDINI_EXPECTS_STABILITY with 1 exprs
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability point_expr 1
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : bvuge(1, 10) : BOOL
18 : bvule(1, 11) : BOOL
19 : and(17, 18) : BOOL
20 : bvuge(2, 10) : BOOL
21 : bvule(2, 11) : BOOL
22 : and(20, 21) : BOOL
23 : not(22) : BOOL
24 : andnot1(19, 23) : BOOL
25 : bvuge(10, 1) : BOOL
26 : bvule(10, 2) : BOOL
27 : and(25, 26) : BOOL
28 : bvuge(11, 1) : BOOL
29 : bvule(11, 2) : BOOL
30 : and(28, 29) : BOOL
31 : not(30) : BOOL
32 : andnot1(27, 31) : BOOL
33 : and(24, 32) : BOOL
34 : and(16, 33) : BOOL
35 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
36 : 3 { 0x3 +1.35e129 } : BV:32
37 : bvand(35, 36) : BV:32
38 : 0 { 0x0 +1.0e129 } : BV:32
39 : eq(37, 38) : BOOL
40 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
41 : bvand(40, 36) : BV:32
42 : eq(41, 38) : BOOL
43 : and(39, 42) : BOOL
44 : and(34, 43) : BOOL
45 : eq(35, 1) : BOOL
46 : eq(40, 10) : BOOL
47 : and(45, 46) : BOOL
48 : and(44, 47) : BOOL
49 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
50 : 1 { 0x1 +1.11e129 } : BV:32
51 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
52 : region_agrees_with_memlabel(49, 38, 50, 51) : BOOL
53 : and(48, 52) : BOOL
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability pred 0
=Comment
abstract-memlabel-asserts-houdini-guess
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : bvuge(1, 10) : BOOL
18 : bvule(1, 11) : BOOL
19 : and(17, 18) : BOOL
20 : bvuge(2, 10) : BOOL
21 : bvule(2, 11) : BOOL
22 : and(20, 21) : BOOL
23 : not(22) : BOOL
24 : andnot1(19, 23) : BOOL
25 : bvuge(10, 1) : BOOL
26 : bvule(10, 2) : BOOL
27 : and(25, 26) : BOOL
28 : bvuge(11, 1) : BOOL
29 : bvule(11, 2) : BOOL
30 : and(28, 29) : BOOL
31 : not(30) : BOOL
32 : andnot1(27, 31) : BOOL
33 : and(24, 32) : BOOL
34 : and(16, 33) : BOOL
35 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
36 : 3 { 0x3 +1.35e129 } : BV:32
37 : bvand(35, 36) : BV:32
38 : 0 { 0x0 +1.0e129 } : BV:32
39 : eq(37, 38) : BOOL
40 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
41 : bvand(40, 36) : BV:32
42 : eq(41, 38) : BOOL
43 : and(39, 42) : BOOL
44 : and(34, 43) : BOOL
45 : eq(35, 1) : BOOL
46 : eq(40, 10) : BOOL
47 : and(45, 46) : BOOL
48 : and(44, 47) : BOOL
49 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
50 : 1 { 0x1 +1.11e129 } : BV:32
51 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
52 : region_agrees_with_memlabel(49, 38, 50, 51) : BOOL
53 : and(48, 52) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability predicate_set done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability is assumed eqclass : 0
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ce 0: z3.ce3
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ces set done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability summary: number of exprs=1; number of visited CEs=1; number of preds=1
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv name expr-group-bvs
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv expr_group_type BV_EQ with 6 exprs
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 2
1 : input.spec-%var-i-0.L2%7%bbentry : BV:32
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 3
1 : input.spec-%var-ret-0.L2%7%bbentry : BV:32
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 4
1 : input.dst.llvm-%x : BV:32
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 5
1 : input.dst.llvm-%n : BV:32
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 6
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 7
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 0
=Comment
expr-group-bvs.linear2-32-free_var_idx.7
=LhsExpr
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
2 : input.spec-%var-i-0.L2%7%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=predicate done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 1
=Comment
expr-group-bvs.linear2-32-free_var_idx.6
=LhsExpr
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
2 : input.spec-%var-ret-0.L2%7%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=predicate done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 2
=Comment
expr-group-bvs.linear1-2-free_var_idx.4
=LhsExpr
1 : 0 { 0x0 } : BV:2
=RhsExpr
1 : input.dst.llvm-%x : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 0 { 0x0 +1.0e1025 } : INT
4 : bvextract(1, 2, 3) : BV:2
=predicate done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv predicate_set done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv is assumed eqclass : 0
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 0: z3.ce3
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 1: z3.ce103
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 2: z3.ce43
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 3: z3.ce23
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 4: z3.ce63
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 5: z3v487.ce24
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 6: z3.ce83
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 7: z3.ce582
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 8: z3.ce663
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 9: z3.ce720
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ces set done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv summary: number of exprs=6; number of visited CEs=10; number of preds=3
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv output matrix
matrix:
4
-2147483648->0; 2->0; 3->0; 4->1073741824; 5->0; 6->0; 7->0; 
6
-2147483648->0; 2->0; 3->4294967295; 4->0; 5->0; 6->1; 7->0; 
7
-2147483648->0; 2->4294967295; 3->0; 4->0; 5->0; 6->0; 7->1; 
matrix done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv state elems done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const name src-branches-const-ineq
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const point_expr 2
1 : input.spec-%var-i-0.L2%7%bbentry : BV:32
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const pred 0
=Comment
src-branches-const-ineq.ub-unsigned
=LhsExpr
1 : input.spec-%var-i-0.L2%7%bbentry : BV:32
2 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const pred 1
=Comment
src-branches-const-ineq.lb-signed
=LhsExpr
1 : input.spec-%var-i-0.L2%7%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvsge(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const predicate_set done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const is assumed eqclass : 0
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 0: z3.ce3
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 1: z3v487.ce891
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 2: z3.ce663
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 3: z3v487.ce840
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ces set done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=2
=m_lower_bound_signed_cur 0
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967294
=m_lower_bound_signed_known 0
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967294
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 3
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_exprs done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%n
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const point_expr 5
1 : input.dst.llvm-%n : BV:32
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const predicate_set done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const is assumed eqclass : 0
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 0: z3.ce3
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 1: z3.ce43
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 2: z3.ce23
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 3: z3.ce123
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ces set done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=0
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967295
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 3
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_exprs done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const point_expr 7
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const pred 0
=Comment
dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.ub-unsigned
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const pred 1
=Comment
dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.lb-signed
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvsge(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const predicate_set done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const is assumed eqclass : 0
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 0: z3.ce3
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 1: z3v487.ce891
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 2: z3.ce663
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 3: z3v487.ce840
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ces set done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=2
=m_lower_bound_signed_cur 0
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967294
=m_lower_bound_signed_known 0
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967294
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 3
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_exprs done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini name dst-ineq
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini expr_group_type HOUDINI with 8 exprs
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini point_expr 8
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini point_expr 9
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini point_expr 10
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini point_expr 11
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini point_expr 12
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini point_expr 13
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini point_expr 14
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini point_expr 15
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini pred 0
=Comment
dst-ineq-houdini-guess
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini predicate_set done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini is assumed eqclass : 0
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini visited ce 0: z3.ce3
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini visited ce 1: z3.ce43
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini visited ce 2: z3.ce23
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini visited ces set done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini summary: number of exprs=8; number of visited CEs=3; number of preds=1
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based name spec-coupling-invariants
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based expr_group_type HOUDINI_AXIOM_BASED with 6 exprs
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 16
1 : input.spec-%var-x-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%x : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 17
1 : input.spec-%var-x-0.L2%7%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 18
1 : input.spec-%var-x-0.L2%7%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%x : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : bvadd(14, 5) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(10, 11, 12, 15, 16, 17) : BV:32
19 : lambda(9, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(8, 19) : MAP[BV:32 -> BV:32]
21 : eq(1, 20) : BOOL
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 19
1 : input.spec-%var-x-0.L2%7%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : bvadd(14, 5) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(10, 11, 12, 15, 16, 17) : BV:32
19 : lambda(9, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(8, 19) : MAP[BV:32 -> BV:32]
21 : eq(1, 20) : BOOL
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 20
1 : input.spec-%var-x-0.L2%7%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 21
1 : input.spec-%var-x-0.L2%7%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%x : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based pred 0
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-x-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%x : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based pred 1
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-x-0.L2%7%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%x : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based predicate_set done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based is assumed eqclass : 0
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based visited ce 0: z3.ce3
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based visited ces set done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based summary: number of exprs=6; number of visited CEs=1; number of preds=2
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state done
=Invariant state at node E0%0%d_E0%0%d for reason inductive-invariants
=pc E0%0%d_E0%0%d inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond.description

=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond.expr is null
=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond done
=pc E0%0%d_E0%0%d inductive-invariants invariant_state done
=invariant_state_changed_at_pcs for reason inductive-invariants:
=graph_with_guessing done
=graph_with_correctness_covers begin
=graph_with_correctness_covers done
=m_dst_fcall_edges_already_updated_from_pcs:
=m_internal_pcs:
=m_super_edges:
=AllocaPCLocalSprelAssumptionsBegin:
=Local offsets from compile log
=Local offsets from compile log done
=done
=AllocaPCLocalSprelAssumptionsEnd
=DeallocaPCLocalSprelAssumptionsBegin:
=Local offsets from compile log
=Local offsets from compile log done
=done
=DeallocaPCLocalSprelAssumptionsEnd
=src_tfg pcs reaching pcpair L0%0%d_L0%0%d
=src_tfg pc: L0%0%d
=exit_pc_asserts at E0%0%d_E0%0%d
=exit_pc_assert.0 at E0%0%d_E0%0%d
=Comment
equal-regs
=LhsExpr
1 : input.spec-%tmpvar-10.E0%0%d : BV:32
2 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry
=well-formedness-conditions for L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry edge well-formedness condition
=well-formedness-conditions for L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry edge well-formedness condition done
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>L2%7%bbentry_Lfor.cond%1%bbentry
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>L2%7%bbentry_Lfor.cond%1%bbentry edge well-formedness condition
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>L2%7%bbentry_Lfor.cond%1%bbentry edge-wf-cond cg_path
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>L2%7%bbentry_Lfor.cond%1%bbentry edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>L2%7%bbentry_Lfor.cond%1%bbentry edge-wf-cond src_path
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>L2%7%bbentry_Lfor.cond%1%bbentry edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>L2%7%bbentry_Lfor.cond%1%bbentry edge-wf-cond dst_path
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>L2%7%bbentry_Lfor.cond%1%bbentry edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>L2%7%bbentry_Lfor.cond%1%bbentry edge-wf-cond pred.0
=Comment
wfcond.from_pcL2%7%bbentry_Lfor.cond%1%bbentry.to_pcL2%7%bbentry_Lfor.cond%1%bbentry-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
4 : not(3) : BOOL
5 : input.spec-%var-x-0.L2%7%bbentry : MAP[BV:32 -> BV:32]
6 : input.spec-%var-i-0.L2%7%bbentry : BV:32
7 : map_get(5, 6) : SUM[UNIT,BV:32]
8 : 1 { 0x1 +1.0e1025 } : INT
9 : sum_is(7, 8) : BOOL
10 : or(4, 9) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>L2%7%bbentry_Lfor.cond%1%bbentry edge well-formedness condition done
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge well-formedness condition
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond pred.0
=Comment
wfcond.from_pcL2%7%bbentry_Lfor.cond%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
4 : input.spec-%var-x-0.L2%7%bbentry : MAP[BV:32 -> BV:32]
5 : input.spec-%var-i-0.L2%7%bbentry : BV:32
6 : map_get(4, 5) : SUM[UNIT,BV:32]
7 : 0 { 0x0 +1.0e1025 } : INT
8 : sum_is(6, 7) : BOOL
9 : or(3, 8) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path.graph_edge_composition
(L2%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d)
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond pred.0
=Comment
equal-regs
=LhsExpr
1 : input.spec-%tmpvar-10.E0%0%d : BV:32
2 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge well-formedness condition done
=Ranking exprs at node L2%7%bbentry_Lfor.cond%1%bbentry
=SRC Ranking expr 0
1 : input.spec-%var-i-0.L2%7%bbentry : BV:32
=SRC Ranking expr 1
1 : input.spec-%var-ret-0.L2%7%bbentry : BV:32
=SRC Tie Breaking expr 0
1 : input.spec-%var-x-1 : MAP[BV:32 -> BV:32]
=SRC Tie Breaking expr 1
1 : input.spec-%var-x-0.L2%7%bbentry : MAP[BV:32 -> BV:32]
=DST Ranking expr 0
1 : input.dst.llvm-%x : BV:32
=DST Ranking expr 1
1 : input.dst.llvm-%n : BV:32
=DST Ranking expr 2
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=DST Ranking expr 3
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=bv_rank_exprs done
=Ranking exprs done
=dst-to-src submaps done
=cg-edge-contains-repeated-src-tfg-edge at edge-id L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry
0
=cg-edge-contains-repeated-src-tfg-edge at edge-id L2%7%bbentry_Lfor.cond%1%bbentry=>L2%7%bbentry_Lfor.cond%1%bbentry
1
=cg-edge-contains-repeated-src-tfg-edge at edge-id L2%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d
1
=cg-edge-contains-repeated-src-tfg-edge-map done
=cg.assumes_around_edge
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry assume #0
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry assume #0.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry assume #0.pred
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
140342 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140343 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140396 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
140344 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
140331 : 4 { 0x4 +1.0e1025 } : INT
140332 : 0 { 0x0 } : BOOL
140397 : select(140342, 140343, 140396, 140344, 140331, 140332) : BV:32
=RhsExpr
140341 : input.dst.llvm-%n : BV:32
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry assume #1
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry assume #1.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry assume #1.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry assume #1.pred
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
140342 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140343 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140398 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
140345 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
140331 : 4 { 0x4 +1.0e1025 } : INT
140332 : 0 { 0x0 } : BOOL
140399 : select(140342, 140343, 140398, 140345, 140331, 140332) : BV:32
=RhsExpr
140340 : input.dst.llvm-%x : BV:32
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry assume #2
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry assume #2.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry assume #2.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry assume #2.pred
=Comment
undef-behaviour-align-assume.edge.L0%0%d=>Lfor.cond%1%bbentry
=LhsExpr
140340 : input.dst.llvm-%x : BV:32
140331 : 4 { 0x4 +1.0e1025 } : INT
140351 : islangaligned(140340, 140331) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry assume #3
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry assume #3.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry assume #3.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry assume #3.pred
=Comment
pointer-implements-variable-sized-map
=LhsExpr
140273 : input.spec-%var-x-1 : MAP[BV:32 -> BV:32]
140320 : Lambda0 : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
140322 : bvule(140276, 140320) : BOOL
140341 : input.dst.llvm-%n : BV:32
140647 : bvult(140320, 140341) : BOOL
140648 : and(140322, 140647) : BOOL
140649 : lambda(140320, 140648) : FUNCTION[BV:32 -> BOOL]
140321 : Lambda1 : BV:32
140342 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140343 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140646 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-heap : MEMLABEL
140328 : 4 { 0x4 +1.47e129 } : BV:32
140329 : bvmul(140321, 140328) : BV:32
140340 : input.dst.llvm-%x : BV:32
140673 : bvadd(140329, 140340) : BV:32
140331 : 4 { 0x4 +1.0e1025 } : INT
140332 : 0 { 0x0 } : BOOL
140683 : select(140342, 140343, 140646, 140673, 140331, 140332) : BV:32
140684 : lambda(140321, 140683) : FUNCTION[BV:32 -> BV:32]
140685 : map(140649, 140684) : MAP[BV:32 -> BV:32]
140687 : eq(140273, 140685) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry assume #4
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry assume #4.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry assume #4.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry assume #4.pred
=Comment
precond-mlasserts
=LhsExpr
140601 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
140602 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
140603 : bvule(140601, 140602) : BOOL
140328 : 4 { 0x4 +1.47e129 } : BV:32
140369 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
140604 : bvadd(140328, 140369) : BV:32
140605 : bvadd(140601, 140604) : BV:32
140606 : eq(140602, 140605) : BOOL
140607 : and(140603, 140606) : BOOL
140608 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
140609 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
140610 : bvule(140608, 140609) : BOOL
140611 : and(140607, 140610) : BOOL
140612 : bvadd(140608, 140604) : BV:32
140613 : eq(140609, 140612) : BOOL
140614 : and(140611, 140613) : BOOL
140615 : bvuge(140601, 140608) : BOOL
140616 : bvule(140601, 140609) : BOOL
140617 : and(140615, 140616) : BOOL
140619 : bvuge(140602, 140608) : BOOL
140620 : bvule(140602, 140609) : BOOL
140621 : and(140619, 140620) : BOOL
140622 : not(140621) : BOOL
140623 : andnot1(140617, 140622) : BOOL
140618 : bvuge(140608, 140601) : BOOL
140624 : bvule(140608, 140602) : BOOL
140625 : and(140618, 140624) : BOOL
140627 : bvuge(140609, 140601) : BOOL
140628 : bvule(140609, 140602) : BOOL
140629 : and(140627, 140628) : BOOL
140630 : not(140629) : BOOL
140631 : andnot1(140625, 140630) : BOOL
140626 : and(140623, 140631) : BOOL
140632 : and(140614, 140626) : BOOL
140344 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
140633 : 3 { 0x3 +1.35e129 } : BV:32
140634 : bvand(140344, 140633) : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
140635 : eq(140634, 140276) : BOOL
140345 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
140636 : bvand(140345, 140633) : BV:32
140637 : eq(140636, 140276) : BOOL
140638 : and(140635, 140637) : BOOL
140639 : and(140632, 140638) : BOOL
140640 : eq(140344, 140601) : BOOL
140641 : eq(140345, 140608) : BOOL
140642 : and(140640, 140641) : BOOL
140643 : and(140639, 140642) : BOOL
140343 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140288 : 1 { 0x1 +1.11e129 } : BV:32
140346 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
140644 : region_agrees_with_memlabel(140343, 140276, 140288, 140346) : BOOL
140645 : and(140643, 140644) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry done
cg.assumes_around_edge at L2%7%bbentry_Lfor.cond%1%bbentry=>L2%7%bbentry_Lfor.cond%1%bbentry
cg.assumes_around_edge at L2%7%bbentry_Lfor.cond%1%bbentry=>L2%7%bbentry_Lfor.cond%1%bbentry assume #0
cg.assumes_around_edge at L2%7%bbentry_Lfor.cond%1%bbentry=>L2%7%bbentry_Lfor.cond%1%bbentry assume #0.ec
cg.assumes_around_edge at L2%7%bbentry_Lfor.cond%1%bbentry=>L2%7%bbentry_Lfor.cond%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L2%7%bbentry_Lfor.cond%1%bbentry=>L2%7%bbentry_Lfor.cond%1%bbentry assume #0.pred
=Comment
merged-predicate
=LhsExpr
140473 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
140341 : input.dst.llvm-%n : BV:32
140474 : bvult(140473, 140341) : BOOL
140422 : 4 { 0x4 +1.0e1025 } : BV:64
140363 : 32 { 0x20 +1.0e1025 } : INT
140484 : bvsign_ext(140473, 140363) : BV:64
140549 : bvmul(140422, 140484) : BV:64
140367 : 63 { 0x3f +1.0e1025 } : INT
140550 : bvextract(140549, 140367, 140363) : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
140483 : bvslt(140473, 140276) : BOOL
140369 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
140563 : ite(140483, 140369, 140276) : BV:32
140565 : eq(140550, 140563) : BOOL
140331 : 4 { 0x4 +1.0e1025 } : INT
140567 : isindexforsize(140565, 140331) : BOOL
140340 : input.dst.llvm-%x : BV:32
140328 : 4 { 0x4 +1.47e129 } : BV:32
140519 : bvmul(140328, 140473) : BV:32
140522 : bvadd(140340, 140519) : BV:32
140569 : isgepoffset(140522, 140519) : BOOL
140571 : and(140567, 140569) : BOOL
140540 : islangaligned(140522, 140331) : BOOL
150751 : and(140571, 140540) : BOOL
140275 : 1 { 0x1 } : BOOL
150752 : eq(150751, 140275) : BOOL
150753 : implies(140474, 150752) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L2%7%bbentry_Lfor.cond%1%bbentry=>L2%7%bbentry_Lfor.cond%1%bbentry done
cg.assumes_around_edge at L2%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d
cg.assumes_around_edge at L2%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d done
cg.assumes_around_edge done
=corr_graph_done
=bv_rank_map
=bv_rank at L0%0%d_L0%0%d
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=bv_rank at L2%7%bbentry_Lfor.cond%1%bbentry
m_dst_rank: 2, m_src_rank: 0, m_spec_rank: 5
=bv_rank at E0%0%d_E0%0%d
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=cg_with_rank done
=cg_with_backtracker done
=asm filename

=cg_with_asm_annotation done
