=FunctionName: foo
=result: 1
=cg_with_asm_annotation
=cg_with_backtracker
=cg_with_rank
=corr_graph foo.A2.B2.C1
=src_tfg
=TFG_SSA:
=TFG_SPEC src.spec.foo:
=TFG:
=Nodes: L0%0%d L3%6%bbentry L3%7%d L3%8%bbentry L3%10%bbentry E0%0%d
=Edges:
L0%0%d => L3%6%bbentry
L3%6%bbentry => L3%7%d
L3%7%d => L3%10%bbentry
L3%7%d => L3%8%bbentry
L3%8%bbentry => E0%0%d
L3%10%bbentry => L3%6%bbentry (backedge) 
=graph done
=is_ssa_graph:
1
=StartState:
=spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=state_end
=PC to var-version map at L0%0%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%6%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%7%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%8%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%10%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at E0%0%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=graph_with_var_versions done
=FunctionName: foo
=Input: tfg-method-arg.0
=arg addr
1 : (undefined) : UNDEFINED
=arg val
1 : input.spec-%var-x-1 : MAP[BV:32 -> BV:32]
=arg end
=Node outputs: E0%0%d
=Output: spec-%ret-reg
1 : input.spec-%tmpvar-10.E0%0%d : BV:32
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
=Touched symbols:
=Symbol-map done
=Locals-map:
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;foo}
=memlabel_map.0 for call-context {*;foo}
mlheap.src.spec.foo : memlabel-mem--heap
=Edge: L0%0%d => L3%6%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-8.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-ret-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-x-0.L3%6%bbentry
1 : input.spec-%var-x-1 : MAP[BV:32 -> BV:32]
=src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((((func_head*ctor_bv)*ctor_bv)*(inline_entry*func_head))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=Edge: L3%6%bbentry => L3%7%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-0.L3%7%d
1 : input.spec-%var-x-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : input.spec-%var-i-0.L3%6%bbentry : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*intrinsic_app_map_get)
tfg_edge_comment end

=Edge: L3%7%d => L3%10%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:6:match_sum_cond_1
tfg_edge_comment end

=Edge: L3%7%d => L3%8%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:4:match_sum_cond_0
tfg_edge_comment end

=Edge: L3%8%bbentry => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-5.E0%0%d
1 : input.spec-%var-ret-0.L3%6%bbentry : BV:32
=spec-%tmpvar-10.E0%0%d
1 : input.spec-%var-ret-0.L3%6%bbentry : BV:32
=spec-%tmpvar-9.E0%0%d
1 : input.spec-%var-ret-0.L3%6%bbentry : BV:32
=spec-%tmpvar-6.E0%0%d
1 : input.spec-%var-ret-0.L3%6%bbentry : BV:32
=spec-%var-u-0.E0%0%d
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((((bb_entry*match_sum_val_0)*match_sum_merge_0)*func_ret)*(inline_exit*func_ret))
tfg_edge_comment end

=Edge: L3%10%bbentry => L3%6%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%var-i-0.L3%6%bbentry
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%var-ret-0.L3%6%bbentry
1 : input.spec-%var-ret-0.L3%6%bbentry : BV:32
2 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : sum_get(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=spec-%var-x-0.L3%6%bbentry
1 : input.spec-%var-x-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
=src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : input.src.spec-ghostvar.itervar.1.L3%6%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%tmpvar-2.L3%6%bbentry
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-3.L3%6%bbentry
1 : input.spec-%var-ret-0.L3%6%bbentry : BV:32
2 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : sum_get(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=spec-%var-x_i-0.L3%6%bbentry
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(((((bb_entry*match_sum_val_1)*ctor_bv)*intrinsic_app_bvadd)*(intrinsic_app_bvadd*tailrec_backedge))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=graph_with_precondition_done

=Locs in src.spec.foo
=Loc 1 in src.spec.foo.
REGMEM
spec-%var-x-1
1 : input.spec-%var-x-1 : MAP[BV:32 -> BV:32]
=Loc 18 in src.spec.foo.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--heap
=Loc 19 in src.spec.foo.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 20 in src.spec.foo.
REGMEM
spec-%tmpvar-0.L3%7%d
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
=Loc 21 in src.spec.foo.
REGMEM
spec-%var-i-0.L3%6%bbentry
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
=Loc 22 in src.spec.foo.
REGMEM
spec-%var-x-0.L3%6%bbentry
1 : input.spec-%var-x-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
=Loc 23 in src.spec.foo.
REGMEM
spec-%tmpvar-10.E0%0%d
1 : input.spec-%tmpvar-10.E0%0%d : BV:32
=Loc 24 in src.spec.foo.
REGMEM
spec-%tmpvar-5.E0%0%d
1 : input.spec-%tmpvar-5.E0%0%d : BV:32
=Loc 25 in src.spec.foo.
REGMEM
spec-%tmpvar-6.E0%0%d
1 : input.spec-%tmpvar-6.E0%0%d : BV:32
=Loc 26 in src.spec.foo.
REGMEM
spec-%tmpvar-9.E0%0%d
1 : input.spec-%tmpvar-9.E0%0%d : BV:32
=Loc 27 in src.spec.foo.
REGMEM
spec-%var-ret-0.L3%6%bbentry
1 : input.spec-%var-ret-0.L3%6%bbentry : BV:32
=Loc 28 in src.spec.foo.
REGMEM
spec-%var-u-0.E0%0%d
1 : input.spec-%var-u-0.E0%0%d : UNIT
=Loc 29 in src.spec.foo.
REGMEM
spec-%tmpvar-7.L3%6%bbentry
1 : input.spec-%tmpvar-7.L3%6%bbentry : BV:32
=Loc 30 in src.spec.foo.
REGMEM
spec-%tmpvar-8.L3%6%bbentry
1 : input.spec-%tmpvar-8.L3%6%bbentry : BV:32
=Loc 31 in src.spec.foo.
REGMEM
src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : input.src.spec-ghostvar.itervar.1.L3%6%bbentry : BV:32
=Loc 32 in src.spec.foo.
REGMEM
spec-%tmpvar-1.L3%6%bbentry
1 : input.spec-%tmpvar-1.L3%6%bbentry : BV:32
=Loc 33 in src.spec.foo.
REGMEM
spec-%tmpvar-2.L3%6%bbentry
1 : input.spec-%tmpvar-2.L3%6%bbentry : BV:32
=Loc 34 in src.spec.foo.
REGMEM
spec-%tmpvar-3.L3%6%bbentry
1 : input.spec-%tmpvar-3.L3%6%bbentry : BV:32
=Loc 35 in src.spec.foo.
REGMEM
spec-%var-x_i-0.L3%6%bbentry
1 : input.spec-%var-x_i-0.L3%6%bbentry : BV:32
=Locs end
=Liveness in src.spec.foo
=live locs at L0%0%d
1, 
=live locs at L3%6%bbentry
21, 22, 27, 
=live locs at L3%7%d
20, 21, 22, 27, 
=live locs at L3%8%bbentry
27, 
=live locs at L3%10%bbentry
20, 21, 22, 27, 
=live locs at E0%0%d
23[f], 

=Definedness in src.spec.foo
=loc definedness at L0%0%d
1, 18, 19
=loc definedness at L3%6%bbentry
1, 18, 19, 21, 22, 27, 29, 30, 31
=loc definedness at L3%7%d
1, 18, 19, 20, 21, 22, 27, 29, 30, 31
=loc definedness at L3%8%bbentry
1, 18, 19, 20, 21, 22, 27, 29, 30, 31
=loc definedness at L3%10%bbentry
1, 18, 19, 20, 21, 22, 27, 29, 30, 31
=loc definedness at E0%0%d
1, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31

=Branch affecting variable locs in src.spec.foo
=branch affecting variable locs at L0%0%d
1
=branch affecting variable locs at L3%6%bbentry
21, 22
=branch affecting variable locs at L3%7%d
20, 21, 22
=branch affecting variable locs at L3%8%bbentry

=branch affecting variable locs at L3%10%bbentry
21, 22
=branch affecting variable locs at E0%0%d


=Relevant Memlabels in src.spec.foo
=relevant memlabels
=function: foo
memlabel-mem--heap
memlabel-mem--arg.0
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%6%bbentry
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%6%bbentry for loc_id 21 {input.spec-%var-i-0.L3%6%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%6%bbentry for loc_id 22 {input.spec-%var-x-0.L3%6%bbentry }
1 : input.spec-%var-x-1 : MAP[BV:32 -> BV:32]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%6%bbentry for loc_id 27 {input.spec-%var-ret-0.L3%6%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%6%bbentry for loc_id 29 {input.spec-%tmpvar-7.L3%6%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%6%bbentry for loc_id 30 {input.spec-%tmpvar-8.L3%6%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%6%bbentry for loc_id 31 {input.src.spec-ghostvar.itervar.1.L3%6%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%6%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%6%bbentry=>L3%7%d
=graph_with_edge_structures.loc_to_expr_map at L3%6%bbentry=>L3%7%d for loc_id 20 {input.spec-%tmpvar-0.L3%7%d }
1 : input.spec-%var-x-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : input.spec-%var-i-0.L3%6%bbentry : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=graph_with_edge_structures.loc_to_expr_map at L3%6%bbentry=>L3%7%d done
=graph_with_edge_structures.loc_to_expr_map at L3%7%d=>L3%8%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%7%d=>L3%8%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%7%d=>L3%10%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%7%d=>L3%10%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%8%bbentry=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at L3%8%bbentry=>E0%0%d for loc_id 23 {input.spec-%tmpvar-10.E0%0%d }
1 : input.spec-%var-ret-0.L3%6%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%8%bbentry=>E0%0%d for loc_id 24 {input.spec-%tmpvar-5.E0%0%d }
1 : input.spec-%var-ret-0.L3%6%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%8%bbentry=>E0%0%d for loc_id 25 {input.spec-%tmpvar-6.E0%0%d }
1 : input.spec-%var-ret-0.L3%6%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%8%bbentry=>E0%0%d for loc_id 26 {input.spec-%tmpvar-9.E0%0%d }
1 : input.spec-%var-ret-0.L3%6%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%8%bbentry=>E0%0%d for loc_id 28 {input.spec-%var-u-0.E0%0%d }
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=graph_with_edge_structures.loc_to_expr_map at L3%8%bbentry=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map at L3%10%bbentry=>L3%6%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%10%bbentry=>L3%6%bbentry for loc_id 21 {input.spec-%var-i-0.L3%6%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-i-0.L3%6%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%10%bbentry=>L3%6%bbentry for loc_id 27 {input.spec-%var-ret-0.L3%6%bbentry }
1 : input.spec-%var-ret-0.L3%6%bbentry : BV:32
2 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : sum_get(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%10%bbentry=>L3%6%bbentry for loc_id 31 {input.src.spec-ghostvar.itervar.1.L3%6%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.spec-ghostvar.itervar.1.L3%6%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%10%bbentry=>L3%6%bbentry for loc_id 32 {input.spec-%tmpvar-1.L3%6%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%10%bbentry=>L3%6%bbentry for loc_id 33 {input.spec-%tmpvar-2.L3%6%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-i-0.L3%6%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%10%bbentry=>L3%6%bbentry for loc_id 34 {input.spec-%tmpvar-3.L3%6%bbentry }
1 : input.spec-%var-ret-0.L3%6%bbentry : BV:32
2 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : sum_get(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%10%bbentry=>L3%6%bbentry for loc_id 35 {input.spec-%var-x_i-0.L3%6%bbentry }
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%10%bbentry=>L3%6%bbentry done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at L3%6%bbentry:
vacuous mls at L3%7%d:
vacuous mls at L3%8%bbentry:
vacuous mls at L3%10%bbentry:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at L3%6%bbentry:
non-vacuous mls at L3%7%d:
non-vacuous mls at L3%8%bbentry:
non-vacuous mls at L3%10%bbentry:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in src.spec.foo
=avail_exprs begin
=loc 1
=loc_expr
140273 : input.spec-%var-x-1 : MAP[BV:32 -> BV:32]
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 22
=loc_expr
140318 : input.spec-%var-x-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-x-1 : MAP[BV:32 -> BV:32]
=avail_exprs_val.end
=loc 29
=loc_expr
140441 : input.spec-%tmpvar-7.L3%6%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 30
=loc_expr
140442 : input.spec-%tmpvar-8.L3%6%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 32
=loc_expr
140443 : input.spec-%tmpvar-1.L3%6%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 1 { 0x1 +1.11e129 } : BV:32
=avail_exprs_val.end
=avail_exprs end
=sprel_map in src.spec.foo
=loc 29 expr
1 : input.spec-%tmpvar-7.L3%6%bbentry : BV:32
=loc 29 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 30 expr
1 : input.spec-%tmpvar-8.L3%6%bbentry : BV:32
=loc 30 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 32 expr
1 : input.spec-%tmpvar-1.L3%6%bbentry : BV:32
=loc 32 spreled-expr
140288 : 1 { 0x1 +1.11e129 } : BV:32
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;foo}
=loc_id 1 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 18 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 19 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 20 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 21 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 22 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 23 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 24 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 25 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 26 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 27 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 28 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 29 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 30 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 31 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 32 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 33 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 34 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 35 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 29 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 30 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 32 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>L3%6%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%6%bbentry=>L3%7%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%7%d=>L3%8%bbentry
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%7%d=>L3%10%bbentry
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%8%bbentry=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%10%bbentry=>L3%6%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>L3%6%bbentry
=spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-8.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-ret-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-x-0.L3%6%bbentry
1 : input.spec-%var-x-1 : MAP[BV:32 -> BV:32]
=src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%6%bbentry=>L3%7%d
=spec-%tmpvar-0.L3%7%d
1 : input.spec-%var-x-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : input.spec-%var-i-0.L3%6%bbentry : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%7%d=>L3%8%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%7%d=>L3%10%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%8%bbentry=>E0%0%d
=spec-%tmpvar-5.E0%0%d
1 : input.spec-%var-ret-0.L3%6%bbentry : BV:32
=spec-%tmpvar-10.E0%0%d
1 : input.spec-%var-ret-0.L3%6%bbentry : BV:32
=spec-%tmpvar-9.E0%0%d
1 : input.spec-%var-ret-0.L3%6%bbentry : BV:32
=spec-%tmpvar-6.E0%0%d
1 : input.spec-%var-ret-0.L3%6%bbentry : BV:32
=spec-%var-u-0.E0%0%d
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%10%bbentry=>L3%6%bbentry
=spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-i-0.L3%6%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%var-ret-0.L3%6%bbentry
1 : input.spec-%var-ret-0.L3%6%bbentry : BV:32
2 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : sum_get(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.spec-ghostvar.itervar.1.L3%6%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%tmpvar-2.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-i-0.L3%6%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-3.L3%6%bbentry
1 : input.spec-%var-ret-0.L3%6%bbentry : BV:32
2 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : sum_get(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=spec-%var-x_i-0.L3%6%bbentry
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>L3%6%bbentry
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>L3%6%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%6%bbentry=>L3%7%d
=graph_with_simplified_assets.simplified_assumes at L3%6%bbentry=>L3%7%d done
=graph_with_simplified_assets.simplified_assumes at L3%7%d=>L3%8%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%7%d=>L3%8%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%7%d=>L3%10%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%7%d=>L3%10%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%8%bbentry=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at L3%8%bbentry=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes at L3%10%bbentry=>L3%6%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%10%bbentry=>L3%6%bbentry done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
0
=String-contents:
=Nextpc-map:
=Nextpc-map done
=suffixpaths for src.spec.foo
=suffixpath_at_L0%0%d for src.spec.foo
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_L3%6%bbentry for src.spec.foo
=suffixpath_at_L3%6%bbentry.graph_edge_composition
(L0%0%d=>L3%6%bbentry)
=suffixpath_at_L3%7%d for src.spec.foo
=suffixpath_at_L3%7%d.graph_edge_composition
((L0%0%d=>L3%6%bbentry)*(L3%6%bbentry=>L3%7%d))
=suffixpath_at_L3%8%bbentry for src.spec.foo
=suffixpath_at_L3%8%bbentry.graph_edge_composition
((L0%0%d=>L3%6%bbentry)*((L3%6%bbentry=>L3%7%d)*(L3%7%d=>L3%8%bbentry)))
=suffixpath_at_L3%10%bbentry for src.spec.foo
=suffixpath_at_L3%10%bbentry.graph_edge_composition
((L0%0%d=>L3%6%bbentry)*((L3%6%bbentry=>L3%7%d)*(L3%7%d=>L3%10%bbentry)))
=suffixpath_at_E0%0%d for src.spec.foo
=suffixpath_at_E0%0%d.graph_edge_composition
((L0%0%d=>L3%6%bbentry)*((L3%6%bbentry=>L3%7%d)*((L3%7%d=>L3%8%bbentry)*(L3%8%bbentry=>E0%0%d))))
=suffixpaths for src.spec.foo done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>L3%6%bbentry
tfg.assumes_around_edge at L0%0%d=>L3%6%bbentry done
tfg.assumes_around_edge at L3%6%bbentry=>L3%7%d
tfg.assumes_around_edge at L3%6%bbentry=>L3%7%d done
tfg.assumes_around_edge at L3%7%d=>L3%8%bbentry
tfg.assumes_around_edge at L3%7%d=>L3%8%bbentry done
tfg.assumes_around_edge at L3%7%d=>L3%10%bbentry
tfg.assumes_around_edge at L3%7%d=>L3%10%bbentry done
tfg.assumes_around_edge at L3%8%bbentry=>E0%0%d
tfg.assumes_around_edge at L3%8%bbentry=>E0%0%d done
tfg.assumes_around_edge at L3%10%bbentry=>L3%6%bbentry
tfg.assumes_around_edge at L3%10%bbentry=>L3%6%bbentry done
tfg.assumes_around_edge done
=TFGdone
=TFG_SPEC_done
=TFG_SSA_done
=dst_tfg
=TFG_SSA:
=TFG_LLVM dst.llvm.foo:
=TFG:
=Nodes: L0%0%d Lfor.body%1%d Lfor.cond%1%bbentry Lfor.cond%2%d Lfor.end%1%d E0%0%d
=Edges:
L0%0%d => Lfor.cond%1%bbentry
Lfor.cond%1%bbentry => Lfor.cond%2%d
Lfor.cond%2%d => Lfor.body%1%d
Lfor.cond%2%d => Lfor.end%1%d
Lfor.end%1%d => E0%0%d
Lfor.body%1%d => Lfor.cond%1%bbentry (backedge) 
=graph done
=is_ssa_graph:
1
=StartState:
=dst.llvm-%x
1 : input.dst.llvm-%x : BV:32
=dst.llvm-%n
1 : input.dst.llvm-%n : BV:32
=dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=state_end
=PC to var-version map at L0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.body%1%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.cond%1%bbentry
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.cond%2%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.end%1%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at E0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=graph_with_var_versions done
=FunctionName: foo
=Input: tfg-method-arg.0
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%x : BV:32
=arg end
=Input: tfg-method-arg.1
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
=arg val
1 : input.dst.llvm-%n : BV:32
=arg end
=Node outputs: E0%0%d
=Output: heap
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=Output: llvm-indir_tgt
1 : retaddr_const : BV:32
=Output: llvm-%ret-reg
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : foo : 20 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%x : 4 : 4 : 0
C_LOCAL=L0%0%argnum1= : dst.llvm-%n : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;foo}
=memlabel_map.0 for call-context {*;foo}
mlheap.dst.llvm.foo : memlabel-mem-may-straddle-symbol.1-heap
=memlabel_map.1 for call-context {*;foo}
mlvar.dst.llvm.foo.0 : memlabel-mem-no-straddle-symbol.1-heap-arg.0
=Edge: L0%0%d => Lfor.cond%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.local_alloc_count.Lfor.cond%1%bbentry
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:-1:((((((start_pc_edge*  br label %for.cond, !dbg !21)*  %ret.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ], !dbg !15)*(  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ], !dbg !20*  br label %for.cond, !dbg !21))*  br label %for.cond, !dbg !21)*(  br label %for.cond, !dbg !21*  br label %for.cond, !dbg !21))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=Edge: Lfor.cond%1%bbentry => Lfor.cond%2%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%cmp.Lfor.cond%2%d
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*  %cmp = icmp ult i32 %i.0, %n, !dbg !22)
tfg_edge_comment end

=Edge: Lfor.cond%2%d => Lfor.body%1%d
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %cmp, label %for.body, label %for.end, !dbg !24*  br i1 %cmp, label %for.body, label %for.end, !dbg !24)*  br i1 %cmp, label %for.body, label %for.end, !dbg !24)
tfg_edge_comment end

=Edge: Lfor.cond%2%d => Lfor.end%1%d
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
2 : not(1) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %cmp, label %for.body, label %for.end, !dbg !24*  br i1 %cmp, label %for.body, label %for.end, !dbg !24)*  br i1 %cmp, label %for.body, label %for.end, !dbg !24)
tfg_edge_comment end

=Edge: Lfor.end%1%d => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:1:  ret i32 %ret.0, !dbg !33
tfg_edge_comment end

=Edge: Lfor.body%1%d => Lfor.cond%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : mlvar.dst.llvm.foo.0 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 0 { 0x0 +1.0e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : bvadd(5, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(2, 3, 4, 11, 12, 13) : BV:32
15 : bvadd(1, 14) : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%0.Lfor.cond%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
=dst.llvm-%add.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : mlvar.dst.llvm.foo.0 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 0 { 0x0 +1.0e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : bvadd(5, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(2, 3, 4, 11, 12, 13) : BV:32
15 : bvadd(1, 14) : BV:32
=dst.llvm-%arrayidx.Lfor.cond%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(3, 4) : BV:32
6 : bvadd(2, 5) : BV:32
7 : bvadd(1, 6) : BV:32
=dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(3, 4) : BV:32
6 : bvadd(2, 5) : BV:32
7 : bvadd(1, 6) : BV:32
=dst.llvm-%f9857086f688cad98a3e07acb716d2f.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : mlvar.dst.llvm.foo.0 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 0 { 0x0 +1.0e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : bvadd(5, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(2, 3, 4, 11, 12, 13) : BV:32
15 : bvadd(1, 14) : BV:32
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : input.dst.llvm-%x : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(3, 4) : BV:32
6 : bvadd(2, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : 4 { 0x4 +1.0e1025 } : INT
9 : islangaligned(7, 8) : BOOL
=EdgeAssume.1
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvslt(1, 2) : BOOL
4 : 32 { 0x20 +1.0e1025 } : INT
5 : bvsign_ext(1, 4) : BV:64
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvzero_ext(6, 4) : BV:64
8 : bvmul(5, 7) : BV:64
9 : 63 { 0x3f +1.0e1025 } : INT
10 : bvextract(8, 9, 4) : BV:32
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : eq(10, 11) : BOOL
13 : eq(10, 2) : BOOL
14 : ite(3, 12, 13) : BOOL
15 : 4 { 0x4 +1.0e1025 } : INT
16 : isindexforsize(14, 15) : BOOL
17 : input.dst.llvm-%x : BV:32
18 : bvmul(1, 6) : BV:32
19 : bvadd(2, 18) : BV:32
20 : bvadd(17, 19) : BV:32
21 : isgepoffset(20, 18) : BOOL
22 : and(16, 21) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:1:((  %arrayidx = getelementptr inbounds i32, i32* %x, i32 %i.0, !dbg !25*(  %arrayidx = getelementptr inbounds i32, i32* %x, i32 %i.0, !dbg !25*  %arrayidx = getelementptr inbounds i32, i32* %x, i32 %i.0, !dbg !25))*((((  %0 = load i32, i32* %arrayidx, align 4, !dbg !25*  %0 = load i32, i32* %arrayidx, align 4, !dbg !25)*(((  %add = add i32 %ret.0, %0, !dbg !27*  br label %for.inc, !dbg !28)*  br label %for.inc, !dbg !28)*  br label %for.inc, !dbg !28))*(((((  %inc = add i32 %i.0, 1, !dbg !29*  br label %for.cond, !dbg !30, !llvm.loop !31)*  %ret.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ], !dbg !15)*(  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ], !dbg !20*  br label %for.cond, !dbg !30, !llvm.loop !31))*  br label %for.cond, !dbg !30, !llvm.loop !31)*(  br label %for.cond, !dbg !30, !llvm.loop !31*  br label %for.cond, !dbg !30, !llvm.loop !31)))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge)))
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%x : BV:32
=predicate done
=start_pc_precondition.1
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%n : BV:32
=predicate done
=graph_with_precondition_done

=Locs in dst.llvm.foo
=Loc 100006 in dst.llvm.foo.
REGMEM
dst.llvm-%n
1 : input.dst.llvm-%n : BV:32
=Loc 100009 in dst.llvm.foo.
REGMEM
dst.llvm-%x
1 : input.dst.llvm-%x : BV:32
=Loc 100017 in dst.llvm.foo.
REGMEM
dst.llvm-%hidden-reg
1 : input.dst.llvm-%hidden-reg : BV:32
=Loc 100019 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.0
1 : input.dst.llvm-callee-save.0 : BV:32
=Loc 100020 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.1
1 : input.dst.llvm-callee-save.1 : BV:32
=Loc 100021 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.2
1 : input.dst.llvm-callee-save.2 : BV:32
=Loc 100022 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.3
1 : input.dst.llvm-callee-save.3 : BV:32
=Loc 100026 in dst.llvm.foo.
REGMEM
dst.local_alloc_count.=L0%0%d=
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=Loc 100027 in dst.llvm.foo.
REGMEM
dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=Loc 100028 in dst.llvm.foo.
REGMEM
dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
=Loc 100030 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 100031 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/
=Loc 100032 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
=Loc 100033 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem-may-straddle-symbol.1-heap
=Loc 100034 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.1
=Loc 100035 in dst.llvm.foo.
REGMEM
dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=Loc 100036 in dst.llvm.foo.
REGMEM
dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=Loc 100037 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=Loc 100038 in dst.llvm.foo.
REGMEM
dst.llvm-indir_tgt.E0%0%d
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=Loc 100039 in dst.llvm.foo.
REGMEM
dst.llvm-%cmp.Lfor.cond%2%d
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=Loc 100040 in dst.llvm.foo.
REGMEM
dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=Loc 100041 in dst.llvm.foo.
REGMEM
dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=Loc 100042 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=Loc 100043 in dst.llvm.foo.
REGMEM
dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=Loc 100044 in dst.llvm.foo.
REGMEM
dst.llvm-%0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%0.Lfor.cond%1%bbentry : BV:32
=Loc 100045 in dst.llvm.foo.
REGMEM
dst.llvm-%add.Lfor.cond%1%bbentry
1 : input.dst.llvm-%add.Lfor.cond%1%bbentry : BV:32
=Loc 100046 in dst.llvm.foo.
REGMEM
dst.llvm-%arrayidx.Lfor.cond%1%bbentry
1 : input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry : BV:32
=Loc 100047 in dst.llvm.foo.
REGMEM
dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=Loc 100048 in dst.llvm.foo.
REGMEM
dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=Loc 100049 in dst.llvm.foo.
REGMEM
dst.llvm-%f9857086f688cad98a3e07acb716d2f.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=Loc 100050 in dst.llvm.foo.
REGMEM
dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=Loc 100051 in dst.llvm.foo.
REGMEM
dst.llvm-%inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=Loc 100052 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=Loc 100053 in dst.llvm.foo.
REGMEM
dst.local_alloc_count.Lfor.cond%1%bbentry
1 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
=Loc 100054 in dst.llvm.foo.
REGMEM
dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : ROUNDING_MODE
=Locs end
=Liveness in dst.llvm.foo
=live locs at L0%0%d
100006, 100009, 100031, 100032, 100033, 
=live locs at Lfor.body%1%d
100006, 100009, 100031, 100032, 100033, 100037, 100040, 
=live locs at Lfor.cond%1%bbentry
100006, 100009, 100031, 100032, 100033, 100037[f], 100040, 
=live locs at Lfor.cond%2%d
100006, 100009, 100031, 100032, 100033, 100037[f], 100039, 100040, 
=live locs at Lfor.end%1%d
100033, 100037[f], 
=live locs at E0%0%d
100033, 100037[f], 

=Definedness in dst.llvm.foo
=loc definedness at L0%0%d
100006, 100009, 100027, 100028, 100030, 100031, 100032, 100033, 100034
=loc definedness at Lfor.body%1%d
100006, 100009, 100027, 100028, 100030, 100031, 100032, 100033, 100034, 100037, 100039, 100040, 100041, 100042, 100043, 100053, 100054
=loc definedness at Lfor.cond%1%bbentry
100006, 100009, 100027, 100028, 100030, 100031, 100032, 100033, 100034, 100037, 100040, 100041, 100042, 100043, 100053, 100054
=loc definedness at Lfor.cond%2%d
100006, 100009, 100027, 100028, 100030, 100031, 100032, 100033, 100034, 100037, 100039, 100040, 100041, 100042, 100043, 100053, 100054
=loc definedness at Lfor.end%1%d
100006, 100009, 100027, 100028, 100030, 100031, 100032, 100033, 100034, 100037, 100039, 100040, 100041, 100042, 100043, 100053, 100054
=loc definedness at E0%0%d
100006, 100009, 100027, 100028, 100030, 100031, 100032, 100033, 100034, 100035, 100036, 100037, 100038, 100039, 100040, 100041, 100042, 100043, 100053, 100054

=Branch affecting variable locs in dst.llvm.foo
=branch affecting variable locs at L0%0%d
100006
=branch affecting variable locs at Lfor.body%1%d
100006, 100040
=branch affecting variable locs at Lfor.cond%1%bbentry
100006, 100040
=branch affecting variable locs at Lfor.cond%2%d
100006, 100039, 100040
=branch affecting variable locs at Lfor.end%1%d

=branch affecting variable locs at E0%0%d


=Relevant Memlabels in dst.llvm.foo
=relevant memlabels
=function: foo
memlabel-mem--arg.0
memlabel-mem-may-straddle-symbol.1-heap
memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
memlabel-mem--arg.1
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100037 {input.dst.llvm-%ret.0.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100040 {input.dst.llvm-%i.0.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100041 {input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100042 {input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100043 {input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100053 {input.dst.local_alloc_count.Lfor.cond%1%bbentry }
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100054 {input.dst.cur_rounding_mode.Lfor.cond%1%bbentry }
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100037 {input.dst.llvm-%ret.0.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(2, 3, 4, 9, 10, 11) : BV:32
13 : bvadd(1, 12) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100040 {input.dst.llvm-%i.0.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100043 {input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100044 {input.dst.llvm-%0.Lfor.cond%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100045 {input.dst.llvm-%add.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(2, 3, 4, 9, 10, 11) : BV:32
13 : bvadd(1, 12) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100046 {input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100047 {input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.1.total_offset.Lfor.cond%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100048 {input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.2.total_offset.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100049 {input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100050 {input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100051 {input.dst.llvm-%inc.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100052 {input.dst.llvm-%ret.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(2, 3, 4, 9, 10, 11) : BV:32
13 : bvadd(1, 12) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%1%bbentry=>Lfor.cond%2%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%1%bbentry=>Lfor.cond%2%d for loc_id 100039 {input.dst.llvm-%cmp.Lfor.cond%2%d }
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%1%bbentry=>Lfor.cond%2%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.body%1%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.body%1%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.end%1%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.end%1%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.end%1%d=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.end%1%d=>E0%0%d for loc_id 100035 {input.dst.llvm-%hidden-reg.E0%0%d }
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.end%1%d=>E0%0%d for loc_id 100036 {input.dst.llvm-%ret-reg.E0%0%d }
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.end%1%d=>E0%0%d for loc_id 100038 {input.dst.llvm-indir_tgt.E0%0%d }
1 : retaddr_const : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.end%1%d=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at Lfor.body%1%d:
vacuous mls at Lfor.cond%1%bbentry:
vacuous mls at Lfor.cond%2%d:
vacuous mls at Lfor.end%1%d:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at Lfor.body%1%d:
non-vacuous mls at Lfor.cond%1%bbentry:
non-vacuous mls at Lfor.cond%2%d:
non-vacuous mls at Lfor.end%1%d:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in dst.llvm.foo
=avail_exprs begin
=loc 100006
=loc_expr
140354 : input.dst.llvm-%n : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100009
=loc_expr
140353 : input.dst.llvm-%x : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100017
=loc_expr
140400 : input.dst.llvm-%hidden-reg : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100019
=loc_expr
140401 : input.dst.llvm-callee-save.0 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100020
=loc_expr
140403 : input.dst.llvm-callee-save.1 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100021
=loc_expr
140405 : input.dst.llvm-callee-save.2 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100022
=loc_expr
140407 : input.dst.llvm-callee-save.3 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100026
=loc_expr
140363 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100027
=loc_expr
140357 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100028
=loc_expr
140358 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100035
=loc_expr
140531 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=avail_exprs_val.end
=loc 100036
=loc_expr
140532 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.end
=loc 100038
=loc_expr
140533 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : retaddr_const : BV:32
=avail_exprs_val.end
=loc 100041
=loc_expr
140534 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100042
=loc_expr
140535 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100053
=loc_expr
140545 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.end
=loc 100054
=loc_expr
140546 : input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : ROUNDING_MODE
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=avail_exprs_val.end
=avail_exprs end
=sprel_map in dst.llvm.foo
=loc 100038 expr
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=loc 100038 spreled-expr
140267 : retaddr_const : BV:32
=loc 100041 expr
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=loc 100041 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100042 expr
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=loc 100042 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100053 expr
1 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
=loc 100053 spreled-expr
140363 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=loc 100054 expr
1 : input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : ROUNDING_MODE
=loc 100054 spreled-expr
140362 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;foo}
=loc_id 100006 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.1, )
=loc_id 100009 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100017 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100019 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100020 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100021 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100022 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100026 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100027 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100028 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100030 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100031 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100032 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100033 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100034 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100035 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100036 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100037 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100038 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100039 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100040 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100041 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100042 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100043 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100044 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100045 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100046 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100047 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100048 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100049 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100050 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100051 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100052 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100053 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100054 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 100038 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100041 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100042 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100053 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100054 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>Lfor.cond%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.body%1%d=>Lfor.cond%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond%1%bbentry=>Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond%2%d=>Lfor.body%1%d
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond%2%d=>Lfor.end%1%d
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
2 : not(1) : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.end%1%d=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>Lfor.cond%1%bbentry
=dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.local_alloc_count.Lfor.cond%1%bbentry
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.body%1%d=>Lfor.cond%1%bbentry
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(2, 3, 4, 9, 10, 11) : BV:32
13 : bvadd(1, 12) : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%0.Lfor.cond%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
=dst.llvm-%add.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(2, 3, 4, 9, 10, 11) : BV:32
13 : bvadd(1, 12) : BV:32
=dst.llvm-%arrayidx.Lfor.cond%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%f9857086f688cad98a3e07acb716d2f.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%inc.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(2, 3, 4, 9, 10, 11) : BV:32
13 : bvadd(1, 12) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond%1%bbentry=>Lfor.cond%2%d
=dst.llvm-%cmp.Lfor.cond%2%d
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond%2%d=>Lfor.body%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond%2%d=>Lfor.end%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.end%1%d=>E0%0%d
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lfor.cond%1%bbentry
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lfor.cond%1%bbentry assume# 0
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lfor.cond%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%d=>Lfor.cond%1%bbentry
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%d=>Lfor.cond%1%bbentry assume# 0
1 : 4 { 0x4 +1.0e1025 } : BV:64
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : 32 { 0x20 +1.0e1025 } : INT
4 : bvsign_ext(2, 3) : BV:64
5 : bvmul(1, 4) : BV:64
6 : 63 { 0x3f +1.0e1025 } : INT
7 : bvextract(5, 6, 3) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvslt(2, 8) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : ite(9, 10, 8) : BV:32
12 : eq(7, 11) : BOOL
13 : 4 { 0x4 +1.0e1025 } : INT
14 : isindexforsize(12, 13) : BOOL
15 : input.dst.llvm-%x : BV:32
16 : 4 { 0x4 +1.47e129 } : BV:32
17 : bvmul(16, 2) : BV:32
18 : bvadd(15, 17) : BV:32
19 : isgepoffset(18, 17) : BOOL
20 : and(14, 19) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%d=>Lfor.cond%1%bbentry assume# 1
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
6 : 4 { 0x4 +1.0e1025 } : INT
7 : islangaligned(5, 6) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%d=>Lfor.cond%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%1%bbentry=>Lfor.cond%2%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%1%bbentry=>Lfor.cond%2%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.body%1%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.body%1%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.end%1%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.end%1%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.end%1%d=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at Lfor.end%1%d=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
1
=String-contents:
=Nextpc-map:
=Nextpc-map done
=suffixpaths for dst.llvm.foo
=suffixpath_at_L0%0%d for dst.llvm.foo
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_Lfor.body%1%d for dst.llvm.foo
=suffixpath_at_Lfor.body%1%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*(Lfor.cond%2%d=>Lfor.body%1%d)))
=suffixpath_at_Lfor.cond%1%bbentry for dst.llvm.foo
=suffixpath_at_Lfor.cond%1%bbentry.graph_edge_composition
(L0%0%d=>Lfor.cond%1%bbentry)
=suffixpath_at_Lfor.cond%2%d for dst.llvm.foo
=suffixpath_at_Lfor.cond%2%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.cond%2%d))
=suffixpath_at_Lfor.end%1%d for dst.llvm.foo
=suffixpath_at_Lfor.end%1%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*(Lfor.cond%2%d=>Lfor.end%1%d)))
=suffixpath_at_E0%0%d for dst.llvm.foo
=suffixpath_at_E0%0%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.end%1%d)*(Lfor.end%1%d=>E0%0%d))))
=suffixpaths for dst.llvm.foo done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry assume #0
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry assume #0.ec
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry assume #0.pred
=Comment
undef-behaviour-align-assume.edge.L0%0%d=>Lfor.cond%1%bbentry
=LhsExpr
140353 : input.dst.llvm-%x : BV:32
140344 : 4 { 0x4 +1.0e1025 } : INT
140364 : islangaligned(140353, 140344) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry done
tfg.assumes_around_edge at Lfor.body%1%d=>Lfor.cond%1%bbentry
tfg.assumes_around_edge at Lfor.body%1%d=>Lfor.cond%1%bbentry assume #0
tfg.assumes_around_edge at Lfor.body%1%d=>Lfor.cond%1%bbentry assume #0.ec
tfg.assumes_around_edge at Lfor.body%1%d=>Lfor.cond%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lfor.body%1%d=>Lfor.cond%1%bbentry assume #0.pred
=Comment
undef-behavioursome.edge.Lfor.body%1%d=>Lfor.cond%1%bbentry
=LhsExpr
140435 : 4 { 0x4 +1.0e1025 } : BV:64
140510 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
140376 : 32 { 0x20 +1.0e1025 } : INT
140521 : bvsign_ext(140510, 140376) : BV:64
140586 : bvmul(140435, 140521) : BV:64
140380 : 63 { 0x3f +1.0e1025 } : INT
140587 : bvextract(140586, 140380, 140376) : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
140520 : bvslt(140510, 140276) : BOOL
140382 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
140600 : ite(140520, 140382, 140276) : BV:32
140602 : eq(140587, 140600) : BOOL
140344 : 4 { 0x4 +1.0e1025 } : INT
140604 : isindexforsize(140602, 140344) : BOOL
140353 : input.dst.llvm-%x : BV:32
140341 : 4 { 0x4 +1.47e129 } : BV:32
140556 : bvmul(140341, 140510) : BV:32
140559 : bvadd(140353, 140556) : BV:32
140606 : isgepoffset(140559, 140556) : BOOL
140608 : and(140604, 140606) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lfor.body%1%d=>Lfor.cond%1%bbentry assume #1
tfg.assumes_around_edge at Lfor.body%1%d=>Lfor.cond%1%bbentry assume #1.ec
tfg.assumes_around_edge at Lfor.body%1%d=>Lfor.cond%1%bbentry assume #1.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lfor.body%1%d=>Lfor.cond%1%bbentry assume #1.pred
=Comment
undef-behaviour-align-assume.edge.Lfor.body%1%d=>Lfor.cond%1%bbentry
=LhsExpr
140353 : input.dst.llvm-%x : BV:32
140341 : 4 { 0x4 +1.47e129 } : BV:32
140510 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
140556 : bvmul(140341, 140510) : BV:32
140559 : bvadd(140353, 140556) : BV:32
140344 : 4 { 0x4 +1.0e1025 } : INT
140577 : islangaligned(140559, 140344) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lfor.body%1%d=>Lfor.cond%1%bbentry done
tfg.assumes_around_edge at Lfor.cond%1%bbentry=>Lfor.cond%2%d
tfg.assumes_around_edge at Lfor.cond%1%bbentry=>Lfor.cond%2%d done
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.body%1%d
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.body%1%d done
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.end%1%d
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.end%1%d done
tfg.assumes_around_edge at Lfor.end%1%d=>E0%0%d
tfg.assumes_around_edge at Lfor.end%1%d=>E0%0%d done
tfg.assumes_around_edge done
=TFGdone
=PC_to_linename:
=pc
Lentry%1%d
=linename
line 3
=pc
Lfor.body%1%d
=linename
line 4
=pc
Lfor.body%2%d
=linename
line 4
=pc
Lfor.body%3%d
=linename
line 4
=pc
Lfor.body%4%d
=linename
line 5
=pc
Lfor.cond%1%d
=linename
line 3
=pc
Lfor.cond%2%d
=linename
line 3
=pc
Lfor.end%1%d
=linename
line 6
=pc
Lfor.inc%1%d
=linename
line 3
=pc
Lfor.inc%2%d
=linename
line 3
=PC_to_linename done
=PC_to_column_name:
=pc
Lentry%1%d
=column_name
 at column 8
=pc
Lfor.body%1%d
=column_name
 at column 12
=pc
Lfor.body%2%d
=column_name
 at column 12
=pc
Lfor.body%3%d
=column_name
 at column 9
=pc
Lfor.body%4%d
=column_name
 at column 3
=pc
Lfor.cond%1%d
=column_name
 at column 26
=pc
Lfor.cond%2%d
=column_name
 at column 3
=pc
Lfor.end%1%d
=column_name
 at column 3
=pc
Lfor.inc%1%d
=column_name
 at column 31
=pc
Lfor.inc%2%d
=column_name
 at column 3
=PC_to_column_name done
=PC_to_line_and_column:
=pc
Lentry%1%d
=line_and_column
(line 3 at column 8)
=pc
Lfor.body%1%d
=line_and_column
(line 4 at column 12)
=pc
Lfor.body%2%d
=line_and_column
(line 4 at column 12)
=pc
Lfor.body%3%d
=line_and_column
(line 4 at column 9)
=pc
Lfor.body%4%d
=line_and_column
line 5
=pc
Lfor.cond%1%d
=line_and_column
(line 3 at column 26)
=pc
Lfor.cond%2%d
=line_and_column
(line 3 at column 3)
=pc
Lfor.end%1%d
=line_and_column
line 6
=pc
Lfor.inc%1%d
=line_and_column
(line 3 at column 31)
=pc
Lfor.inc%2%d
=line_and_column
(line 3 at column 3)
=PC_to_line_and_column done
=SourceToLLVMVarnames:
=SourceToLLVMVarnames done
=InputLLVMToSourceVarnames:
input.dst.llvm-%x : L0%0%d : x'
input.dst.llvm-%n : L0%0%d : n'
input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : L0%0%d : input.dst.local./*___y___foo__x__=L0%0%argnum0=/
input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : L0%0%d : input.dst.local./*___y___foo__x__=L0%0%argnum1=/
input.dst.llvm-%ret.0 : Lfor.cond%1%bbentry : ret'
input.dst.local_alloc_count.=L0%0%d= : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.llvm-%i.0.phi.tmpvar.entry : L0%0%d : 0
input.dst.llvm-%ret.0.phi.tmpvar.entry : L0%0%d : 0
input.dst.llvm-%i.0 : Lfor.cond%1%bbentry : i'
input.dst.llvm-%0 : L0%0%d : DSTMEM[input.dst.llvm-%arrayidx]_4
input.dst.llvm-%add : Lfor.body%4%bbentry : ret'
input.dst.llvm-%inc : Lfor.inc%2%bbentry : i'
input.dst.llvm-%hidden-reg : L0%0%d : input.dst.llvm-%hidden-reg
input.dst.llvm-callee-save.0 : L0%0%d : input.dst.llvm-callee-save.0
input.dst.llvm-callee-save.1 : L0%0%d : input.dst.llvm-callee-save.1
input.dst.llvm-callee-save.2 : L0%0%d : input.dst.llvm-callee-save.2
input.dst.llvm-callee-save.3 : L0%0%d : input.dst.llvm-callee-save.3
input.dst.llvm-%arrayidx : L0%0%d : input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.2.total_offset
input.dst.llvm-%ret.0.phi.tmpvar.for.inc : L0%0%d : input.dst.llvm-%add
input.dst.llvm-%ret-reg : L0%0%d : input.dst.llvm-%ret.0
input.dst.llvm-indir_tgt : L0%0%d : return-address
input.dst.local_alloc_count : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.cur_rounding_mode : L0%0%d : ROUND_to_nearest_ties_to_even
input.dst.llvm-indir_tgt.E0%0%d : L0%0%d : return-address
input.dst.llvm-%hidden-reg.E0%0%d : L0%0%d : bvxor(bvxor(bvxor(bvxor(input.dst.llvm-%hidden-reg, input.dst.llvm-callee-save.0), input.dst.llvm-callee-save.1), input.dst.llvm-callee-save.2), input.dst.llvm-callee-save.3)
input.dst.llvm-%ret-reg.E0%0%d : L0%0%d : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : L0%0%d : 0
input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : L0%0%d : 0
input.dst.local_alloc_count.Lfor.cond%1%bbentry : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : L0%0%d : ROUND_to_nearest_ties_to_even
=InputLLVMToSourceVarnames done
=PotentialSCEVRelations:
=dst.llvm-%i.0
=dst.llvm-%i.0 loop pc: Lfor.cond%1%d
=dst.llvm-%i.0 val_scevb
=dst.llvm-%i.0 val_scevb scev
=dst.llvm-%i.0 val_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%i.0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%i.0 val_scevb scev scev_expr
1 : 00000000000000000000000000000000b
2 : 00000000000000000000000000000001b
3 : scev_op_addrec(1, 2) : loop Lfor.cond%1%d : 
=dst.llvm-%i.0 val_scevb scev scev_expr done
=dst.llvm-%i.0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%i.0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%i.0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%i.0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%i.0 atuse_scevb
=dst.llvm-%i.0 atuse_scevb scev
=dst.llvm-%i.0 atuse_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%i.0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%i.0 atuse_scevb scev scev_expr
1 : 00000000000000000000000000000000b
2 : 00000000000000000000000000000001b
3 : scev_op_addrec(1, 2) : loop Lfor.cond%1%d : 
=dst.llvm-%i.0 atuse_scevb scev scev_expr done
=dst.llvm-%i.0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%i.0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%i.0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%i.0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%i.0 atexit_scev
=dst.llvm-%i.0 atexit_scev loop: L0%0%d
=dst.llvm-%i.0 atexit_scev scev_overflow_flag: 
=dst.llvm-%i.0 atexit_scev scev_expr
4 : input.dst.llvm-%n : BV32
=dst.llvm-%i.0 atexit_scev scev_expr done
=dst.llvm-%ret.0
=dst.llvm-%ret.0 loop pc: Lfor.cond%1%d
=dst.llvm-%ret.0 val_scevb
=dst.llvm-%ret.0 val_scevb scev
=dst.llvm-%ret.0 val_scevb scev loop: L0%0%d
=dst.llvm-%ret.0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%ret.0 val_scevb scev scev_expr
5 : input.dst.llvm-%ret.0 : BV32
=dst.llvm-%ret.0 val_scevb scev scev_expr done
=dst.llvm-%ret.0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%ret.0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%ret.0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%ret.0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%ret.0 atuse_scevb
=dst.llvm-%ret.0 atuse_scevb scev
=dst.llvm-%ret.0 atuse_scevb scev loop: L0%0%d
=dst.llvm-%ret.0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%ret.0 atuse_scevb scev scev_expr
5 : input.dst.llvm-%ret.0 : BV32
=dst.llvm-%ret.0 atuse_scevb scev scev_expr done
=dst.llvm-%ret.0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%ret.0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%ret.0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%ret.0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%ret.0 atexit_scev
=dst.llvm-%ret.0 atexit_scev loop: L0%0%d
=dst.llvm-%ret.0 atexit_scev scev_overflow_flag: 
=dst.llvm-%ret.0 atexit_scev scev_expr
5 : input.dst.llvm-%ret.0 : BV32
=dst.llvm-%ret.0 atexit_scev scev_expr done
=dst.llvm-%arrayidx
=dst.llvm-%arrayidx loop pc: Lfor.cond%1%d
=dst.llvm-%arrayidx val_scevb
=dst.llvm-%arrayidx val_scevb scev
=dst.llvm-%arrayidx val_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%arrayidx val_scevb scev scev_overflow_flag: 
=dst.llvm-%arrayidx val_scevb scev scev_expr
6 : input.dst.llvm-%x : BV32
7 : 00000000000000000000000000000100b
8 : scev_op_addrec(6, 7) : loop Lfor.cond%1%d : 
=dst.llvm-%arrayidx val_scevb scev scev_expr done
=dst.llvm-%arrayidx val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%arrayidx val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%arrayidx val_scevb signed lower bound: 32:4294967295
=dst.llvm-%arrayidx val_scevb signed upper bound: 32:4294967295
=dst.llvm-%arrayidx atuse_scevb
=dst.llvm-%arrayidx atuse_scevb scev
=dst.llvm-%arrayidx atuse_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%arrayidx atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%arrayidx atuse_scevb scev scev_expr
6 : input.dst.llvm-%x : BV32
7 : 00000000000000000000000000000100b
8 : scev_op_addrec(6, 7) : loop Lfor.cond%1%d : 
=dst.llvm-%arrayidx atuse_scevb scev scev_expr done
=dst.llvm-%arrayidx atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%arrayidx atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%arrayidx atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%arrayidx atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%arrayidx atexit_scev
=dst.llvm-%arrayidx atexit_scev loop: L0%0%d
=dst.llvm-%arrayidx atexit_scev scev_overflow_flag: 
=dst.llvm-%arrayidx atexit_scev scev_expr
7 : 00000000000000000000000000000100b
4 : input.dst.llvm-%n : BV32
9 : scev_op_mul(7, 4) : loop L0%0%d : 
6 : input.dst.llvm-%x : BV32
10 : scev_op_add(9, 6) : loop L0%0%d : 
=dst.llvm-%arrayidx atexit_scev scev_expr done
=dst.llvm-%0
=dst.llvm-%0 loop pc: Lfor.cond%1%d
=dst.llvm-%0 val_scevb
=dst.llvm-%0 val_scevb scev
=dst.llvm-%0 val_scevb scev loop: L0%0%d
=dst.llvm-%0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%0 val_scevb scev scev_expr
11 : input.dst.llvm-%0 : BV32
=dst.llvm-%0 val_scevb scev scev_expr done
=dst.llvm-%0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%0 atuse_scevb
=dst.llvm-%0 atuse_scevb scev
=dst.llvm-%0 atuse_scevb scev loop: L0%0%d
=dst.llvm-%0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%0 atuse_scevb scev scev_expr
11 : input.dst.llvm-%0 : BV32
=dst.llvm-%0 atuse_scevb scev scev_expr done
=dst.llvm-%0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%0 atexit_scev
=dst.llvm-%0 atexit_scev loop: L0%0%d
=dst.llvm-%0 atexit_scev scev_overflow_flag: 
=dst.llvm-%0 atexit_scev scev_expr
11 : input.dst.llvm-%0 : BV32
=dst.llvm-%0 atexit_scev scev_expr done
=dst.llvm-%add
=dst.llvm-%add loop pc: Lfor.cond%1%d
=dst.llvm-%add val_scevb
=dst.llvm-%add val_scevb scev
=dst.llvm-%add val_scevb scev loop: L0%0%d
=dst.llvm-%add val_scevb scev scev_overflow_flag: 
=dst.llvm-%add val_scevb scev scev_expr
11 : input.dst.llvm-%0 : BV32
5 : input.dst.llvm-%ret.0 : BV32
12 : scev_op_add(11, 5) : loop L0%0%d : 
=dst.llvm-%add val_scevb scev scev_expr done
=dst.llvm-%add val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%add val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%add val_scevb signed lower bound: 32:4294967295
=dst.llvm-%add val_scevb signed upper bound: 32:4294967295
=dst.llvm-%add atuse_scevb
=dst.llvm-%add atuse_scevb scev
=dst.llvm-%add atuse_scevb scev loop: L0%0%d
=dst.llvm-%add atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%add atuse_scevb scev scev_expr
11 : input.dst.llvm-%0 : BV32
5 : input.dst.llvm-%ret.0 : BV32
12 : scev_op_add(11, 5) : loop L0%0%d : 
=dst.llvm-%add atuse_scevb scev scev_expr done
=dst.llvm-%add atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%add atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%add atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%add atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%add atexit_scev
=dst.llvm-%add atexit_scev loop: L0%0%d
=dst.llvm-%add atexit_scev scev_overflow_flag: 
=dst.llvm-%add atexit_scev scev_expr
11 : input.dst.llvm-%0 : BV32
5 : input.dst.llvm-%ret.0 : BV32
12 : scev_op_add(11, 5) : loop L0%0%d : 
=dst.llvm-%add atexit_scev scev_expr done
=dst.llvm-%inc
=dst.llvm-%inc loop pc: Lfor.cond%1%d
=dst.llvm-%inc val_scevb
=dst.llvm-%inc val_scevb scev
=dst.llvm-%inc val_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%inc val_scevb scev scev_overflow_flag: 
=dst.llvm-%inc val_scevb scev scev_expr
2 : 00000000000000000000000000000001b
13 : scev_op_addrec(2, 2) : loop Lfor.cond%1%d : 
=dst.llvm-%inc val_scevb scev scev_expr done
=dst.llvm-%inc val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%inc val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%inc val_scevb signed lower bound: 32:4294967295
=dst.llvm-%inc val_scevb signed upper bound: 32:4294967295
=dst.llvm-%inc atuse_scevb
=dst.llvm-%inc atuse_scevb scev
=dst.llvm-%inc atuse_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%inc atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%inc atuse_scevb scev scev_expr
2 : 00000000000000000000000000000001b
13 : scev_op_addrec(2, 2) : loop Lfor.cond%1%d : 
=dst.llvm-%inc atuse_scevb scev scev_expr done
=dst.llvm-%inc atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%inc atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%inc atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%inc atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%inc atexit_scev
=dst.llvm-%inc atexit_scev loop: L0%0%d
=dst.llvm-%inc atexit_scev scev_overflow_flag: 
=dst.llvm-%inc atexit_scev scev_expr
2 : 00000000000000000000000000000001b
4 : input.dst.llvm-%n : BV32
14 : scev_op_add(2, 4) : loop L0%0%d : 
=dst.llvm-%inc atexit_scev scev_expr done
=PotentialSCEVRelations done
=ReachingDefinitionsForLocs:
=Reaching Definitions at L0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns done
=Reaching Definitions at Lfor.body%1%d
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 7 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 8 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 9 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%add.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns done
=Reaching Definitions at Lfor.cond%1%bbentry
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 7 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 8 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 9 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%add.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns done
=Reaching Definitions at Lfor.cond%2%d
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 7 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 8 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 9 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%add.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns done
=Reaching Definitions at Lfor.end%1%d
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 7 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 8 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 9 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%add.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns done
=Reaching Definitions at E0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 7 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 8 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 9 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=reaching defns for expr 11 edges
  Lfor.end%1%d=>E0%0%d
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=reaching defns for expr 12 edges
  Lfor.end%1%d=>E0%0%d
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=reaching defns for expr 13 edges
  Lfor.end%1%d=>E0%0%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 14 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 15 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%add.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns done
=ReachingDefinitionsForLocs done
=VarnameToLRStatus Begin:
=LR status for var input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.2.total_offset.Lfor.cond%1%bbentry
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%x
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%n
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.1, )
=LR status for var input.dst.local./*___y___foo__x__=L0%0%argnum0=/
lr_status_top
=LR status for var input.dst.local./*___y___foo__x__=L0%0%argnum1=/
lr_status_top
=LR status for var input.dst.local_alloc_count.=L0%0%d=
lr_status_top
=LR status for var input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%hidden-reg
lr_status_top
=LR status for var input.dst.llvm-callee-save.0
lr_status_top
=LR status for var input.dst.llvm-callee-save.1
lr_status_top
=LR status for var input.dst.llvm-callee-save.2
lr_status_top
=LR status for var input.dst.llvm-callee-save.3
lr_status_top
=LR status for var input.dst.llvm-%i.0.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%cmp.Lfor.cond%2%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%0.Lfor.cond%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-indir_tgt.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%hidden-reg.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%add.Lfor.cond%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%ret-reg.E0%0%d
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.1.total_offset.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%inc.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%ret.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.local_alloc_count.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=VarnameToLRStatus End
=TFG_LLVM_done
=TFG_SSA_done
=eqcheck_info
=eqcheck
=proof_filename couple8.proof
=function_name foo
=asm_filename NONE
=fixed_reg_mappings begin
0 : 0 : 0
0 : 4 : 4
=fixed_reg_mappings end
=rodata_map begin
=rodata_map end
=dst_iseq
=dst_iseq done
=dst_insn_pcs
=dst_insn_pcs done
=xml_output_format text-color
=use_only_relocatable_memlabels 0
=run_safety_check 0
=debug_header_pc_lsprels
=Local offsets from compile log
=Local offsets from compile log done
=done
=spec_iospecs
=SpecFuncIOSpecs
=FunctionName: foo
=EntryPreconds
=pred 0
=Comment
pointer-implements-variable-sized-map
=LhsExpr
1 : $spec-arg-0 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : $llvm-arg-1 : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : $llvm-md : ARRAY[BV:32 -> BV:8]
11 : $llvm-ma : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : $llvm-arg-0 : BV:32
14 : 4 { 0x4 +1.47e129 } : BV:32
15 : bvmul(9, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=EntryPreconds done
=ExitAsserts
=pred 0
=Comment
equal-regs
=LhsExpr
1 : $spec-ret : BV:32
2 : $llvm-ret : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=ExitAsserts done
=SpecFuncIOSpecs done
=eqcheck done
=graph_with_guessing
=Nodes: L0%0%d_L0%0%d L3%6%bbentry_Lfor.cond%1%bbentry E0%0%d_E0%0%d
=Edges:
L0%0%d_L0%0%d => L3%6%bbentry_Lfor.cond%1%bbentry
L3%6%bbentry_Lfor.cond%1%bbentry => L3%6%bbentry_Lfor.cond%1%bbentry
L3%6%bbentry_Lfor.cond%1%bbentry => E0%0%d_E0%0%d
=graph done
=is_ssa_graph:
0
=StartState:
=state_end
=graph_with_var_versions done
=FunctionName: foo
=Input: tfg-method-arg.0
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%x : BV:32
=arg end
=Input: tfg-method-arg.1
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
=arg val
1 : input.dst.llvm-%n : BV:32
=arg end
=Node outputs: E0%0%d_E0%0%d
=Node outputs done for E0%0%d_E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : foo : 20 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%x : 4 : 4 : 0
C_LOCAL=L0%0%argnum1= : dst.llvm-%n : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
=Edge: L0%0%d_L0%0%d => L3%6%bbentry_Lfor.cond%1%bbentry
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L0%0%d to L3%6%bbentry at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
(L0%0%d#{0,0}=>L3%6%bbentry#{0,0})
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from L0%0%d to Lfor.cond%1%bbentry at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
(L0%0%d#{0,0}=>Lfor.cond%1%bbentry#{0,0})
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L3%6%bbentry_Lfor.cond%1%bbentry => L3%6%bbentry_Lfor.cond%1%bbentry
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L3%6%bbentry to L3%6%bbentry at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
((L3%6%bbentry#{0,0}=>L3%7%d#{0,0})*((L3%7%d#{0,0}=>L3%10%bbentry#{0,0})*(L3%10%bbentry#{0,0}=>L3%6%bbentry#{1,0})))
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lfor.cond%1%bbentry to Lfor.cond%1%bbentry at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((Lfor.cond%1%bbentry#{0,0}=>Lfor.cond%2%d#{0,0})*((Lfor.cond%2%d#{0,0}=>Lfor.body%1%d#{0,0})*(Lfor.body%1%d#{0,0}=>Lfor.cond%1%bbentry#{1,0})))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L3%6%bbentry_Lfor.cond%1%bbentry => E0%0%d_E0%0%d
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L3%6%bbentry to E0%0%d at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
((L3%6%bbentry#{0,0}=>L3%7%d#{0,0})*((L3%7%d#{0,0}=>L3%8%bbentry#{0,0})*(L3%8%bbentry#{0,0}=>E0%0%d#{0,0})))
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lfor.cond%1%bbentry to E0%0%d at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((Lfor.cond%1%bbentry#{0,0}=>Lfor.cond%2%d#{0,0})*((Lfor.cond%2%d#{0,0}=>Lfor.end%1%d#{0,0})*(Lfor.end%1%d#{0,0}=>E0%0%d#{0,0})))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
pointer-implements-variable-sized-map
=LhsExpr
1 : input.spec-%var-x-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%x : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.1
=Comment
precond-mlasserts
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : bvuge(1, 10) : BOOL
18 : bvule(1, 11) : BOOL
19 : and(17, 18) : BOOL
20 : bvuge(2, 10) : BOOL
21 : bvule(2, 11) : BOOL
22 : and(20, 21) : BOOL
23 : not(22) : BOOL
24 : andnot1(19, 23) : BOOL
25 : bvuge(10, 1) : BOOL
26 : bvule(10, 2) : BOOL
27 : and(25, 26) : BOOL
28 : bvuge(11, 1) : BOOL
29 : bvule(11, 2) : BOOL
30 : and(28, 29) : BOOL
31 : not(30) : BOOL
32 : andnot1(27, 31) : BOOL
33 : and(24, 32) : BOOL
34 : and(16, 33) : BOOL
35 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
36 : 3 { 0x3 +1.35e129 } : BV:32
37 : bvand(35, 36) : BV:32
38 : 0 { 0x0 +1.0e129 } : BV:32
39 : eq(37, 38) : BOOL
40 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
41 : bvand(40, 36) : BV:32
42 : eq(41, 38) : BOOL
43 : and(39, 42) : BOOL
44 : and(34, 43) : BOOL
45 : eq(35, 1) : BOOL
46 : eq(40, 10) : BOOL
47 : and(45, 46) : BOOL
48 : and(44, 47) : BOOL
49 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
50 : 1 { 0x1 +1.11e129 } : BV:32
51 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
52 : region_agrees_with_memlabel(49, 38, 50, 51) : BOOL
53 : and(48, 52) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.2
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%n : BV:32
=predicate done
=start_pc_precondition.3
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%x : BV:32
=predicate done
=graph_with_precondition_done

=Locs in foo.A2.B2.C1
=Locs end
=Liveness in foo.A2.B2.C1
=live locs at L0%0%d_L0%0%d

=live locs at L3%6%bbentry_Lfor.cond%1%bbentry

=live locs at E0%0%d_E0%0%d


=Definedness in foo.A2.B2.C1

=Branch affecting variable locs in foo.A2.B2.C1

=Relevant Memlabels in foo.A2.B2.C1
=relevant memlabels
=function: foo
memlabel-mem--arg.0
memlabel-mem-may-straddle-symbol.1-heap
memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
memlabel-mem--arg.1
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
=graph_with_ml_contiguity_info non-vacuous mls
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in foo.A2.B2.C1
=avail_exprs begin
=avail_exprs end
=sprel_map in foo.A2.B2.C1
=sprel_map done
=lr-status-map
=lr-status-map done
=lr-status-for-sprel-locs-map
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=global counterexamples for reason inductive-invariants
=global nodece 0
=global nodece 0 nodece z3.ce3.num_edges_traversed1
=global nodece 0 nodece_path
=global nodece 0 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 0 nodece_cached_counterexample
=counter_example_begin z3.ce3 ba3b6c28ec264bbf4ae152c53766a68
=input.spec-%var-x-1
1 : Lambda20 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda21 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L3%6%bbentry
1 : Lambda20 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda21 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1102672323 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1102672324; 1102672327 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1102672328; 2277714411 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2277714412; 2277714415 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2277714416; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2277714412 { 0x87c329ec -2017252884 -1.52471685e144 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1102672324 { 0x41b971c4 +1.44878435e4 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 924236686 { 0x3716bb8e +1.17759871e239 } : COUNT
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-0.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 924236686 { 0x3716bb8e +1.17759871e239 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1102672324 { 0x41b971c4 +1.44878435e4 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1102672327 { 0x41b971c7 +1.44878470e4 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2277714412 { 0x87c329ec -2017252884 -1.52471685e144 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2277714415 { 0x87c329ef -2017252881 -1.52471721e144 } : BV:32
=counter_example.random_seed
2811112354
=counter_example_end
=global nodece 0 num_edges_traversed 1
=global nodece 0 nodece_visted_pcs: 
L0%0%d_L0%0%d -> L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 1
=global nodece 1 nodece z3v487.ce4.num_edges_traversed0
=global nodece 1 nodece_path
=global nodece 1 nodece_path.graph_edge_composition
(epsilon)
=global nodece 1 nodece_cached_counterexample
=counter_example_begin z3v487.ce4 9fe8c6808bbafb4a5596905b21a8951d
=input.spec-%var-x-1
1 : Lambda32 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda33 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L3%6%bbentry
1 : Lambda36 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda37 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 209927 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 209928; 209931 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 209932; 435219 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 435220; 435223 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 435224; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 209928 { 0x33408 +1.2502536e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 435220 { 0x6a414 +1.5188226e129 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-0.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 435220 { 0x6a414 +1.5188226e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 435223 { 0x6a417 +1.5188262e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 209928 { 0x33408 +1.2502536e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 209931 { 0x3340b +1.2502572e129 } : BV:32
=counter_example.random_seed
3747455381
=counter_example_end
=global nodece 1 num_edges_traversed 0
=global nodece 1 nodece_visted_pcs: 
L0%0%d_L0%0%d
=global nodece 2
=global nodece 2 nodece z3.ce23.num_edges_traversed1
=global nodece 2 nodece_path
=global nodece 2 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 2 nodece_cached_counterexample
=counter_example_begin z3.ce23 b282eadadaf62fa7ea2c3ccb67ad24f
=input.spec-%var-x-1
1 : Lambda63 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 65535 { 0xffff +1.781238e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 65536 { 0x10000 +1.781250e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda64 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 4286299904 { 0xff7bbf00 -8667392 -1.96676635e127 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 2930012418 { 0xaea47102 -1364954878 -1.28469872e222 } : BV:32
25 : eq(23, 24) : BOOL
26 : 123 { 0x7b } : BV:8
27 : 2151810054 { 0x80420406 -2143157242 -1.51574778e129 } : BV:32
28 : eq(23, 27) : BOOL
29 : 1 { 0x1 } : BV:8
30 : 2930012417 { 0xaea47101 -1364954879 -1.28469860e222 } : BV:32
31 : eq(23, 30) : BOOL
32 : 191 { 0xbf -65 } : BV:8
33 : 2930012419 { 0xaea47103 -1364954877 -1.28469884e222 } : BV:32
34 : eq(23, 33) : BOOL
35 : 255 { 0xff -1 } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvadd(41, 21, 22) : BV:32
43 : eq(42, 24) : BOOL
44 : eq(42, 27) : BOOL
45 : eq(42, 30) : BOOL
46 : eq(42, 33) : BOOL
47 : ite(46, 35, 36) : BV:8
48 : ite(45, 32, 47) : BV:8
49 : ite(44, 29, 48) : BV:8
50 : ite(43, 26, 49) : BV:8
51 : 1 { 0x1 +1.11e129 } : BV:32
52 : bvadd(51, 21, 22) : BV:32
53 : eq(52, 24) : BOOL
54 : eq(52, 27) : BOOL
55 : eq(52, 30) : BOOL
56 : eq(52, 33) : BOOL
57 : ite(56, 35, 36) : BV:8
58 : ite(55, 32, 57) : BV:8
59 : ite(54, 29, 58) : BV:8
60 : ite(53, 26, 59) : BV:8
61 : bvadd(21, 22) : BV:32
62 : eq(61, 24) : BOOL
63 : eq(61, 27) : BOOL
64 : eq(61, 30) : BOOL
65 : eq(61, 33) : BOOL
66 : ite(65, 35, 36) : BV:8
67 : ite(64, 32, 66) : BV:8
68 : ite(63, 29, 67) : BV:8
69 : ite(62, 26, 68) : BV:8
70 : bvconcat(40, 50, 60, 69) : BV:32
71 : ite(18, 2, 70) : BV:32
72 : lambda(17, 71) : FUNCTION[BV:32 -> BV:32]
73 : map(16, 72) : MAP[BV:32 -> BV:32]
74 : sym_const(73) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L3%6%bbentry
1 : Lambda63 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 65535 { 0xffff +1.781238e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 65536 { 0x10000 +1.781250e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda64 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 4286299904 { 0xff7bbf00 -8667392 -1.96676635e127 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 2930012418 { 0xaea47102 -1364954878 -1.28469872e222 } : BV:32
25 : eq(23, 24) : BOOL
26 : 123 { 0x7b } : BV:8
27 : 2151810054 { 0x80420406 -2143157242 -1.51574778e129 } : BV:32
28 : eq(23, 27) : BOOL
29 : 1 { 0x1 } : BV:8
30 : 2930012417 { 0xaea47101 -1364954879 -1.28469860e222 } : BV:32
31 : eq(23, 30) : BOOL
32 : 191 { 0xbf -65 } : BV:8
33 : 2930012419 { 0xaea47103 -1364954877 -1.28469884e222 } : BV:32
34 : eq(23, 33) : BOOL
35 : 255 { 0xff -1 } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvadd(41, 21, 22) : BV:32
43 : eq(42, 24) : BOOL
44 : eq(42, 27) : BOOL
45 : eq(42, 30) : BOOL
46 : eq(42, 33) : BOOL
47 : ite(46, 35, 36) : BV:8
48 : ite(45, 32, 47) : BV:8
49 : ite(44, 29, 48) : BV:8
50 : ite(43, 26, 49) : BV:8
51 : 1 { 0x1 +1.11e129 } : BV:32
52 : bvadd(51, 21, 22) : BV:32
53 : eq(52, 24) : BOOL
54 : eq(52, 27) : BOOL
55 : eq(52, 30) : BOOL
56 : eq(52, 33) : BOOL
57 : ite(56, 35, 36) : BV:8
58 : ite(55, 32, 57) : BV:8
59 : ite(54, 29, 58) : BV:8
60 : ite(53, 26, 59) : BV:8
61 : bvadd(21, 22) : BV:32
62 : eq(61, 24) : BOOL
63 : eq(61, 27) : BOOL
64 : eq(61, 30) : BOOL
65 : eq(61, 33) : BOOL
66 : ite(65, 35, 36) : BV:8
67 : ite(64, 32, 66) : BV:8
68 : ite(63, 29, 67) : BV:8
69 : ite(62, 26, 68) : BV:8
70 : bvconcat(40, 50, 60, 69) : BV:32
71 : ite(18, 2, 70) : BV:32
72 : lambda(17, 71) : FUNCTION[BV:32 -> BV:32]
73 : map(16, 72) : MAP[BV:32 -> BV:32]
74 : sym_const(73) : MAP[BV:32 -> BV:32]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 4286299904 { 0xff7bbf00 -8667392 -1.96676635e127 } : BV:32
=input.dst.llvm-%n
1 : 65536 { 0x10000 +1.781250e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 2151810053 ] -> 0, [ 2151810054; 2151810054 ] -> 1, [ 2151810055; 2930012416 ] -> 0, [ 2930012417; 2930012417 ] -> 191, [ 2930012418; 2930012418 ] -> 123, [ 2930012419; 2930012419 ] -> 255, [ 2930012420; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2151810051 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2151810052; 2151810055 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2151810056; 2930012415 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2930012416; 2930012419 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2930012420; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2930012416 { 0xaea47100 -1364954880 -1.28469848e222 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2151810052 { 0x80420404 -2143157244 -1.51574754e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1079274789 { 0x40546d25 +1.65958082e1 } : COUNT
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-0.L3%6%bbentry.0.1
1 : ([ 0; 65535 ] -> true, [ 65536; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%6%bbentry.1.1
1 : Lambda51 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 4286299904 { 0xff7bbf00 -8667392 -1.96676635e127 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 2930012418 { 0xaea47102 -1364954878 -1.28469872e222 } : BV:32
10 : eq(8, 9) : BOOL
11 : 123 { 0x7b } : BV:8
12 : 2151810054 { 0x80420406 -2143157242 -1.51574778e129 } : BV:32
13 : eq(8, 12) : BOOL
14 : 1 { 0x1 } : BV:8
15 : 2930012417 { 0xaea47101 -1364954879 -1.28469860e222 } : BV:32
16 : eq(8, 15) : BOOL
17 : 191 { 0xbf -65 } : BV:8
18 : 2930012419 { 0xaea47103 -1364954877 -1.28469884e222 } : BV:32
19 : eq(8, 18) : BOOL
20 : 255 { 0xff -1 } : BV:8
21 : 0 { 0x0 } : BV:8
22 : ite(19, 20, 21) : BV:8
23 : ite(16, 17, 22) : BV:8
24 : ite(13, 14, 23) : BV:8
25 : ite(10, 11, 24) : BV:8
26 : 2 { 0x2 +1.23e129 } : BV:32
27 : bvadd(26, 6, 7) : BV:32
28 : eq(27, 9) : BOOL
29 : eq(27, 12) : BOOL
30 : eq(27, 15) : BOOL
31 : eq(27, 18) : BOOL
32 : ite(31, 20, 21) : BV:8
33 : ite(30, 17, 32) : BV:8
34 : ite(29, 14, 33) : BV:8
35 : ite(28, 11, 34) : BV:8
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvadd(36, 6, 7) : BV:32
38 : eq(37, 9) : BOOL
39 : eq(37, 12) : BOOL
40 : eq(37, 15) : BOOL
41 : eq(37, 18) : BOOL
42 : ite(41, 20, 21) : BV:8
43 : ite(40, 17, 42) : BV:8
44 : ite(39, 14, 43) : BV:8
45 : ite(38, 11, 44) : BV:8
46 : bvadd(6, 7) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : eq(46, 15) : BOOL
50 : eq(46, 18) : BOOL
51 : ite(50, 20, 21) : BV:8
52 : ite(49, 17, 51) : BV:8
53 : ite(48, 14, 52) : BV:8
54 : ite(47, 11, 53) : BV:8
55 : bvconcat(25, 35, 45, 54) : BV:32
56 : ite(3, 2, 55) : BV:32
57 : ite(3, 2, 56) : BV:32
58 : lambda(1, 57) : FUNCTION[BV:32 -> BV:32]
59 : sym_const(58) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 65535 ] -> true, [ 65536; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : Lambda52 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 4286299904 { 0xff7bbf00 -8667392 -1.96676635e127 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 2930012418 { 0xaea47102 -1364954878 -1.28469872e222 } : BV:32
10 : eq(8, 9) : BOOL
11 : 123 { 0x7b } : BV:8
12 : 2151810054 { 0x80420406 -2143157242 -1.51574778e129 } : BV:32
13 : eq(8, 12) : BOOL
14 : 1 { 0x1 } : BV:8
15 : 2930012417 { 0xaea47101 -1364954879 -1.28469860e222 } : BV:32
16 : eq(8, 15) : BOOL
17 : 191 { 0xbf -65 } : BV:8
18 : 2930012419 { 0xaea47103 -1364954877 -1.28469884e222 } : BV:32
19 : eq(8, 18) : BOOL
20 : 255 { 0xff -1 } : BV:8
21 : 0 { 0x0 } : BV:8
22 : ite(19, 20, 21) : BV:8
23 : ite(16, 17, 22) : BV:8
24 : ite(13, 14, 23) : BV:8
25 : ite(10, 11, 24) : BV:8
26 : 2 { 0x2 +1.23e129 } : BV:32
27 : bvadd(26, 6, 7) : BV:32
28 : eq(27, 9) : BOOL
29 : eq(27, 12) : BOOL
30 : eq(27, 15) : BOOL
31 : eq(27, 18) : BOOL
32 : ite(31, 20, 21) : BV:8
33 : ite(30, 17, 32) : BV:8
34 : ite(29, 14, 33) : BV:8
35 : ite(28, 11, 34) : BV:8
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvadd(36, 6, 7) : BV:32
38 : eq(37, 9) : BOOL
39 : eq(37, 12) : BOOL
40 : eq(37, 15) : BOOL
41 : eq(37, 18) : BOOL
42 : ite(41, 20, 21) : BV:8
43 : ite(40, 17, 42) : BV:8
44 : ite(39, 14, 43) : BV:8
45 : ite(38, 11, 44) : BV:8
46 : bvadd(6, 7) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : eq(46, 15) : BOOL
50 : eq(46, 18) : BOOL
51 : ite(50, 20, 21) : BV:8
52 : ite(49, 17, 51) : BV:8
53 : ite(48, 14, 52) : BV:8
54 : ite(47, 11, 53) : BV:8
55 : bvconcat(25, 35, 45, 54) : BV:32
56 : ite(3, 2, 55) : BV:32
57 : lambda(1, 56) : FUNCTION[BV:32 -> BV:32]
58 : sym_const(57) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1079274789 { 0x40546d25 +1.65958082e1 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2151810052 { 0x80420404 -2143157244 -1.51574754e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2151810055 { 0x80420407 -2143157241 -1.51574790e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2930012416 { 0xaea47100 -1364954880 -1.28469848e222 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2930012419 { 0xaea47103 -1364954877 -1.28469884e222 } : BV:32
=counter_example.random_seed
2233806052
=counter_example_end
=global nodece 2 num_edges_traversed 1
=global nodece 2 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 3
=global nodece 3 nodece z3v487.ce24.num_edges_traversed1
=global nodece 3 nodece_path
=global nodece 3 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 3 nodece_cached_counterexample
=counter_example_begin z3v487.ce24 504bbbefe576a6bdb22c426313fc3d47
=input.spec-%var-x-1
1 : Lambda73 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 65535 { 0xffff +1.781238e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 65536 { 0x10000 +1.781250e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda74 : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 17) : BV:32
21 : bvadd(18, 20, 2) : BV:32
22 : 14 { 0xe +1.166e129 } : BV:32
23 : eq(21, 22) : BOOL
24 : 1 { 0x1 } : BV:8
25 : 0 { 0x0 } : BV:8
26 : ite(23, 24, 25) : BV:8
27 : 2 { 0x2 +1.23e129 } : BV:32
28 : bvadd(27, 20, 2) : BV:32
29 : eq(28, 22) : BOOL
30 : ite(29, 24, 25) : BV:8
31 : 1 { 0x1 +1.11e129 } : BV:32
32 : bvadd(31, 20, 2) : BV:32
33 : eq(32, 22) : BOOL
34 : ite(33, 24, 25) : BV:8
35 : bvadd(20, 2) : BV:32
36 : eq(35, 22) : BOOL
37 : ite(36, 24, 25) : BV:8
38 : bvconcat(26, 30, 34, 37) : BV:32
39 : lambda(17, 38) : FUNCTION[BV:32 -> BV:32]
40 : map(16, 39) : MAP[BV:32 -> BV:32]
41 : sym_const(40) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L3%6%bbentry
1 : Lambda73 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 65535 { 0xffff +1.781238e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 65536 { 0x10000 +1.781250e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda74 : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 17) : BV:32
21 : bvadd(18, 20, 2) : BV:32
22 : 14 { 0xe +1.166e129 } : BV:32
23 : eq(21, 22) : BOOL
24 : 1 { 0x1 } : BV:8
25 : 0 { 0x0 } : BV:8
26 : ite(23, 24, 25) : BV:8
27 : 2 { 0x2 +1.23e129 } : BV:32
28 : bvadd(27, 20, 2) : BV:32
29 : eq(28, 22) : BOOL
30 : ite(29, 24, 25) : BV:8
31 : 1 { 0x1 +1.11e129 } : BV:32
32 : bvadd(31, 20, 2) : BV:32
33 : eq(32, 22) : BOOL
34 : ite(33, 24, 25) : BV:8
35 : bvadd(20, 2) : BV:32
36 : eq(35, 22) : BOOL
37 : ite(36, 24, 25) : BV:8
38 : bvconcat(26, 30, 34, 37) : BV:32
39 : lambda(17, 38) : FUNCTION[BV:32 -> BV:32]
40 : map(16, 39) : MAP[BV:32 -> BV:32]
41 : sym_const(40) : MAP[BV:32 -> BV:32]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 65536 { 0x10000 +1.781250e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 13 ] -> 0, [ 14; 14 ] -> 1, [ 15; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 7 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 8; 11 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 12; 15 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 16; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 12 { 0xc +1.143e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 578391065 { 0x22798c19 +1.94958794e197 } : COUNT
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-0.L3%6%bbentry.0.1
1 : ([ 0; 65535 ] -> true, [ 65536; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%6%bbentry.1.1
1 : Lambda56 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(3, 1) : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : bvadd(2, 4, 5) : BV:32
7 : 14 { 0xe +1.166e129 } : BV:32
8 : eq(6, 7) : BOOL
9 : 1 { 0x1 } : BV:8
10 : 0 { 0x0 } : BV:8
11 : ite(8, 9, 10) : BV:8
12 : 2 { 0x2 +1.23e129 } : BV:32
13 : bvadd(12, 4, 5) : BV:32
14 : eq(13, 7) : BOOL
15 : ite(14, 9, 10) : BV:8
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : bvadd(16, 4, 5) : BV:32
18 : eq(17, 7) : BOOL
19 : ite(18, 9, 10) : BV:8
20 : bvadd(4, 5) : BV:32
21 : eq(20, 7) : BOOL
22 : ite(21, 9, 10) : BV:8
23 : bvconcat(11, 15, 19, 22) : BV:32
24 : lambda(1, 23) : FUNCTION[BV:32 -> BV:32]
25 : sym_const(24) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 65535 ] -> true, [ 65536; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : Lambda57 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(3, 1) : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : bvadd(2, 4, 5) : BV:32
7 : 14 { 0xe +1.166e129 } : BV:32
8 : eq(6, 7) : BOOL
9 : 1 { 0x1 } : BV:8
10 : 0 { 0x0 } : BV:8
11 : ite(8, 9, 10) : BV:8
12 : 2 { 0x2 +1.23e129 } : BV:32
13 : bvadd(12, 4, 5) : BV:32
14 : eq(13, 7) : BOOL
15 : ite(14, 9, 10) : BV:8
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : bvadd(16, 4, 5) : BV:32
18 : eq(17, 7) : BOOL
19 : ite(18, 9, 10) : BV:8
20 : bvadd(4, 5) : BV:32
21 : eq(20, 7) : BOOL
22 : ite(21, 9, 10) : BV:8
23 : bvconcat(11, 15, 19, 22) : BV:32
24 : lambda(1, 23) : FUNCTION[BV:32 -> BV:32]
25 : sym_const(24) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 578391065 { 0x22798c19 +1.94958794e197 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 12 { 0xc +1.143e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 15 { 0xf +1.178e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 11 { 0xb +1.131e129 } : BV:32
=counter_example.random_seed
404338641
=counter_example_end
=global nodece 3 num_edges_traversed 1
=global nodece 3 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 4
=global nodece 4 nodece z3.ce43.num_edges_traversed1
=global nodece 4 nodece_path
=global nodece 4 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 4 nodece_cached_counterexample
=counter_example_begin z3.ce43 bf7c6569aaabc9d146506ac61e5ec479
=input.spec-%var-x-1
1 : Lambda99 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3082270495 { 0xb7b7b71f -1212696801 -1.43527591e240 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3082270496 { 0xb7b7b720 -1212696800 -1.43527603e240 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda100 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3086833152 { 0xb7fd5600 -1208134144 -1.97918701e240 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 3086833153 { 0xb7fd5601 -1208134143 -1.97918713e240 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 911867418 { 0x3659fe1a +1.70306706e237 } : BV:32
28 : eq(23, 27) : BOOL
29 : 253 { 0xfd -3 } : BV:8
30 : 2392657684 { 0x8e9d0f14 -1902309612 -1.22702264e158 } : BV:32
31 : eq(23, 30) : BOOL
32 : 32 { 0x20 } : BV:8
33 : 3086833155 { 0xb7fd5603 -1208134141 -1.97918736e240 } : BV:32
34 : eq(23, 33) : BOOL
35 : 911867417 { 0x3659fe19 +1.70306694e237 } : BV:32
36 : eq(23, 35) : BOOL
37 : 86 { 0x56 } : BV:8
38 : 3086833154 { 0xb7fd5602 -1208134142 -1.97918725e240 } : BV:32
39 : eq(23, 38) : BOOL
40 : eq(23, 22) : BOOL
41 : 911867416 { 0x3659fe18 +1.70306682e237 } : BV:32
42 : eq(23, 41) : BOOL
43 : 183 { 0xb7 -73 } : BV:8
44 : ite(42, 26, 43) : BV:8
45 : ite(40, 26, 44) : BV:8
46 : ite(39, 26, 45) : BV:8
47 : ite(36, 37, 46) : BV:8
48 : ite(34, 26, 47) : BV:8
49 : ite(31, 32, 48) : BV:8
50 : ite(28, 29, 49) : BV:8
51 : ite(25, 26, 50) : BV:8
52 : 2 { 0x2 +1.23e129 } : BV:32
53 : bvadd(52, 21, 22) : BV:32
54 : eq(53, 24) : BOOL
55 : eq(53, 27) : BOOL
56 : eq(53, 30) : BOOL
57 : eq(53, 33) : BOOL
58 : eq(53, 35) : BOOL
59 : eq(53, 38) : BOOL
60 : eq(53, 22) : BOOL
61 : eq(53, 41) : BOOL
62 : ite(61, 26, 43) : BV:8
63 : ite(60, 26, 62) : BV:8
64 : ite(59, 26, 63) : BV:8
65 : ite(58, 37, 64) : BV:8
66 : ite(57, 26, 65) : BV:8
67 : ite(56, 32, 66) : BV:8
68 : ite(55, 29, 67) : BV:8
69 : ite(54, 26, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 21, 22) : BV:32
72 : eq(71, 24) : BOOL
73 : eq(71, 27) : BOOL
74 : eq(71, 30) : BOOL
75 : eq(71, 33) : BOOL
76 : eq(71, 35) : BOOL
77 : eq(71, 38) : BOOL
78 : eq(71, 22) : BOOL
79 : eq(71, 41) : BOOL
80 : ite(79, 26, 43) : BV:8
81 : ite(78, 26, 80) : BV:8
82 : ite(77, 26, 81) : BV:8
83 : ite(76, 37, 82) : BV:8
84 : ite(75, 26, 83) : BV:8
85 : ite(74, 32, 84) : BV:8
86 : ite(73, 29, 85) : BV:8
87 : ite(72, 26, 86) : BV:8
88 : bvadd(21, 22) : BV:32
89 : eq(88, 24) : BOOL
90 : eq(88, 27) : BOOL
91 : eq(88, 30) : BOOL
92 : eq(88, 33) : BOOL
93 : eq(88, 35) : BOOL
94 : eq(88, 38) : BOOL
95 : eq(88, 22) : BOOL
96 : eq(88, 41) : BOOL
97 : ite(96, 26, 43) : BV:8
98 : ite(95, 26, 97) : BV:8
99 : ite(94, 26, 98) : BV:8
100 : ite(93, 37, 99) : BV:8
101 : ite(92, 26, 100) : BV:8
102 : ite(91, 32, 101) : BV:8
103 : ite(90, 29, 102) : BV:8
104 : ite(89, 26, 103) : BV:8
105 : bvconcat(51, 69, 87, 104) : BV:32
106 : ite(18, 2, 105) : BV:32
107 : lambda(17, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(16, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L3%6%bbentry
1 : Lambda99 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3082270495 { 0xb7b7b71f -1212696801 -1.43527591e240 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3082270496 { 0xb7b7b720 -1212696800 -1.43527603e240 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda100 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3086833152 { 0xb7fd5600 -1208134144 -1.97918701e240 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 3086833153 { 0xb7fd5601 -1208134143 -1.97918713e240 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 911867418 { 0x3659fe1a +1.70306706e237 } : BV:32
28 : eq(23, 27) : BOOL
29 : 253 { 0xfd -3 } : BV:8
30 : 2392657684 { 0x8e9d0f14 -1902309612 -1.22702264e158 } : BV:32
31 : eq(23, 30) : BOOL
32 : 32 { 0x20 } : BV:8
33 : 3086833155 { 0xb7fd5603 -1208134141 -1.97918736e240 } : BV:32
34 : eq(23, 33) : BOOL
35 : 911867417 { 0x3659fe19 +1.70306694e237 } : BV:32
36 : eq(23, 35) : BOOL
37 : 86 { 0x56 } : BV:8
38 : 3086833154 { 0xb7fd5602 -1208134142 -1.97918725e240 } : BV:32
39 : eq(23, 38) : BOOL
40 : eq(23, 22) : BOOL
41 : 911867416 { 0x3659fe18 +1.70306682e237 } : BV:32
42 : eq(23, 41) : BOOL
43 : 183 { 0xb7 -73 } : BV:8
44 : ite(42, 26, 43) : BV:8
45 : ite(40, 26, 44) : BV:8
46 : ite(39, 26, 45) : BV:8
47 : ite(36, 37, 46) : BV:8
48 : ite(34, 26, 47) : BV:8
49 : ite(31, 32, 48) : BV:8
50 : ite(28, 29, 49) : BV:8
51 : ite(25, 26, 50) : BV:8
52 : 2 { 0x2 +1.23e129 } : BV:32
53 : bvadd(52, 21, 22) : BV:32
54 : eq(53, 24) : BOOL
55 : eq(53, 27) : BOOL
56 : eq(53, 30) : BOOL
57 : eq(53, 33) : BOOL
58 : eq(53, 35) : BOOL
59 : eq(53, 38) : BOOL
60 : eq(53, 22) : BOOL
61 : eq(53, 41) : BOOL
62 : ite(61, 26, 43) : BV:8
63 : ite(60, 26, 62) : BV:8
64 : ite(59, 26, 63) : BV:8
65 : ite(58, 37, 64) : BV:8
66 : ite(57, 26, 65) : BV:8
67 : ite(56, 32, 66) : BV:8
68 : ite(55, 29, 67) : BV:8
69 : ite(54, 26, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 21, 22) : BV:32
72 : eq(71, 24) : BOOL
73 : eq(71, 27) : BOOL
74 : eq(71, 30) : BOOL
75 : eq(71, 33) : BOOL
76 : eq(71, 35) : BOOL
77 : eq(71, 38) : BOOL
78 : eq(71, 22) : BOOL
79 : eq(71, 41) : BOOL
80 : ite(79, 26, 43) : BV:8
81 : ite(78, 26, 80) : BV:8
82 : ite(77, 26, 81) : BV:8
83 : ite(76, 37, 82) : BV:8
84 : ite(75, 26, 83) : BV:8
85 : ite(74, 32, 84) : BV:8
86 : ite(73, 29, 85) : BV:8
87 : ite(72, 26, 86) : BV:8
88 : bvadd(21, 22) : BV:32
89 : eq(88, 24) : BOOL
90 : eq(88, 27) : BOOL
91 : eq(88, 30) : BOOL
92 : eq(88, 33) : BOOL
93 : eq(88, 35) : BOOL
94 : eq(88, 38) : BOOL
95 : eq(88, 22) : BOOL
96 : eq(88, 41) : BOOL
97 : ite(96, 26, 43) : BV:8
98 : ite(95, 26, 97) : BV:8
99 : ite(94, 26, 98) : BV:8
100 : ite(93, 37, 99) : BV:8
101 : ite(92, 26, 100) : BV:8
102 : ite(91, 32, 101) : BV:8
103 : ite(90, 29, 102) : BV:8
104 : ite(89, 26, 103) : BV:8
105 : bvconcat(51, 69, 87, 104) : BV:32
106 : ite(18, 2, 105) : BV:32
107 : lambda(17, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(16, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 3086833152 { 0xb7fd5600 -1208134144 -1.97918701e240 } : BV:32
=input.dst.llvm-%n
1 : 3082270496 { 0xb7b7b720 -1212696800 -1.43527603e240 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 911867415 ] -> 183, [ 911867416; 911867416 ] -> 0, [ 911867417; 911867417 ] -> 86, [ 911867418; 911867418 ] -> 253, [ 911867419; 2392657683 ] -> 183, [ 2392657684; 2392657684 ] -> 32, [ 2392657685; 3086833151 ] -> 183, [ 3086833152; 3086833155 ] -> 0, [ 3086833156; 4294967295 ] -> 183, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 911867415 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 911867416; 911867419 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 911867420; 2392657683 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2392657684; 2392657687 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2392657688; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 911867416 { 0x3659fe18 +1.70306682e237 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2392657684 { 0x8e9d0f14 -1902309612 -1.22702264e158 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 193259268 { 0xb84e704 +1.3830003e152 } : COUNT
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-0.L3%6%bbentry.0.1
1 : ([ 0; 3082270495 ] -> true, [ 3082270496; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%6%bbentry.1.1
1 : Lambda87 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3086833152 { 0xb7fd5600 -1208134144 -1.97918701e240 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 3086833153 { 0xb7fd5601 -1208134143 -1.97918713e240 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 911867418 { 0x3659fe1a +1.70306706e237 } : BV:32
13 : eq(8, 12) : BOOL
14 : 253 { 0xfd -3 } : BV:8
15 : 2392657684 { 0x8e9d0f14 -1902309612 -1.22702264e158 } : BV:32
16 : eq(8, 15) : BOOL
17 : 32 { 0x20 } : BV:8
18 : 3086833155 { 0xb7fd5603 -1208134141 -1.97918736e240 } : BV:32
19 : eq(8, 18) : BOOL
20 : 911867417 { 0x3659fe19 +1.70306694e237 } : BV:32
21 : eq(8, 20) : BOOL
22 : 86 { 0x56 } : BV:8
23 : 3086833154 { 0xb7fd5602 -1208134142 -1.97918725e240 } : BV:32
24 : eq(8, 23) : BOOL
25 : eq(8, 7) : BOOL
26 : 911867416 { 0x3659fe18 +1.70306682e237 } : BV:32
27 : eq(8, 26) : BOOL
28 : 183 { 0xb7 -73 } : BV:8
29 : ite(27, 11, 28) : BV:8
30 : ite(25, 11, 29) : BV:8
31 : ite(24, 11, 30) : BV:8
32 : ite(21, 22, 31) : BV:8
33 : ite(19, 11, 32) : BV:8
34 : ite(16, 17, 33) : BV:8
35 : ite(13, 14, 34) : BV:8
36 : ite(10, 11, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 6, 7) : BV:32
39 : eq(38, 9) : BOOL
40 : eq(38, 12) : BOOL
41 : eq(38, 15) : BOOL
42 : eq(38, 18) : BOOL
43 : eq(38, 20) : BOOL
44 : eq(38, 23) : BOOL
45 : eq(38, 7) : BOOL
46 : eq(38, 26) : BOOL
47 : ite(46, 11, 28) : BV:8
48 : ite(45, 11, 47) : BV:8
49 : ite(44, 11, 48) : BV:8
50 : ite(43, 22, 49) : BV:8
51 : ite(42, 11, 50) : BV:8
52 : ite(41, 17, 51) : BV:8
53 : ite(40, 14, 52) : BV:8
54 : ite(39, 11, 53) : BV:8
55 : 1 { 0x1 +1.11e129 } : BV:32
56 : bvadd(55, 6, 7) : BV:32
57 : eq(56, 9) : BOOL
58 : eq(56, 12) : BOOL
59 : eq(56, 15) : BOOL
60 : eq(56, 18) : BOOL
61 : eq(56, 20) : BOOL
62 : eq(56, 23) : BOOL
63 : eq(56, 7) : BOOL
64 : eq(56, 26) : BOOL
65 : ite(64, 11, 28) : BV:8
66 : ite(63, 11, 65) : BV:8
67 : ite(62, 11, 66) : BV:8
68 : ite(61, 22, 67) : BV:8
69 : ite(60, 11, 68) : BV:8
70 : ite(59, 17, 69) : BV:8
71 : ite(58, 14, 70) : BV:8
72 : ite(57, 11, 71) : BV:8
73 : bvadd(6, 7) : BV:32
74 : eq(73, 9) : BOOL
75 : eq(73, 12) : BOOL
76 : eq(73, 15) : BOOL
77 : eq(73, 18) : BOOL
78 : eq(73, 20) : BOOL
79 : eq(73, 23) : BOOL
80 : eq(73, 7) : BOOL
81 : eq(73, 26) : BOOL
82 : ite(81, 11, 28) : BV:8
83 : ite(80, 11, 82) : BV:8
84 : ite(79, 11, 83) : BV:8
85 : ite(78, 22, 84) : BV:8
86 : ite(77, 11, 85) : BV:8
87 : ite(76, 17, 86) : BV:8
88 : ite(75, 14, 87) : BV:8
89 : ite(74, 11, 88) : BV:8
90 : bvconcat(36, 54, 72, 89) : BV:32
91 : ite(3, 2, 90) : BV:32
92 : ite(3, 2, 91) : BV:32
93 : lambda(1, 92) : FUNCTION[BV:32 -> BV:32]
94 : sym_const(93) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 3082270495 ] -> true, [ 3082270496; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : Lambda88 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3086833152 { 0xb7fd5600 -1208134144 -1.97918701e240 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 3086833153 { 0xb7fd5601 -1208134143 -1.97918713e240 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 911867418 { 0x3659fe1a +1.70306706e237 } : BV:32
13 : eq(8, 12) : BOOL
14 : 253 { 0xfd -3 } : BV:8
15 : 2392657684 { 0x8e9d0f14 -1902309612 -1.22702264e158 } : BV:32
16 : eq(8, 15) : BOOL
17 : 32 { 0x20 } : BV:8
18 : 3086833155 { 0xb7fd5603 -1208134141 -1.97918736e240 } : BV:32
19 : eq(8, 18) : BOOL
20 : 911867417 { 0x3659fe19 +1.70306694e237 } : BV:32
21 : eq(8, 20) : BOOL
22 : 86 { 0x56 } : BV:8
23 : 3086833154 { 0xb7fd5602 -1208134142 -1.97918725e240 } : BV:32
24 : eq(8, 23) : BOOL
25 : eq(8, 7) : BOOL
26 : 911867416 { 0x3659fe18 +1.70306682e237 } : BV:32
27 : eq(8, 26) : BOOL
28 : 183 { 0xb7 -73 } : BV:8
29 : ite(27, 11, 28) : BV:8
30 : ite(25, 11, 29) : BV:8
31 : ite(24, 11, 30) : BV:8
32 : ite(21, 22, 31) : BV:8
33 : ite(19, 11, 32) : BV:8
34 : ite(16, 17, 33) : BV:8
35 : ite(13, 14, 34) : BV:8
36 : ite(10, 11, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 6, 7) : BV:32
39 : eq(38, 9) : BOOL
40 : eq(38, 12) : BOOL
41 : eq(38, 15) : BOOL
42 : eq(38, 18) : BOOL
43 : eq(38, 20) : BOOL
44 : eq(38, 23) : BOOL
45 : eq(38, 7) : BOOL
46 : eq(38, 26) : BOOL
47 : ite(46, 11, 28) : BV:8
48 : ite(45, 11, 47) : BV:8
49 : ite(44, 11, 48) : BV:8
50 : ite(43, 22, 49) : BV:8
51 : ite(42, 11, 50) : BV:8
52 : ite(41, 17, 51) : BV:8
53 : ite(40, 14, 52) : BV:8
54 : ite(39, 11, 53) : BV:8
55 : 1 { 0x1 +1.11e129 } : BV:32
56 : bvadd(55, 6, 7) : BV:32
57 : eq(56, 9) : BOOL
58 : eq(56, 12) : BOOL
59 : eq(56, 15) : BOOL
60 : eq(56, 18) : BOOL
61 : eq(56, 20) : BOOL
62 : eq(56, 23) : BOOL
63 : eq(56, 7) : BOOL
64 : eq(56, 26) : BOOL
65 : ite(64, 11, 28) : BV:8
66 : ite(63, 11, 65) : BV:8
67 : ite(62, 11, 66) : BV:8
68 : ite(61, 22, 67) : BV:8
69 : ite(60, 11, 68) : BV:8
70 : ite(59, 17, 69) : BV:8
71 : ite(58, 14, 70) : BV:8
72 : ite(57, 11, 71) : BV:8
73 : bvadd(6, 7) : BV:32
74 : eq(73, 9) : BOOL
75 : eq(73, 12) : BOOL
76 : eq(73, 15) : BOOL
77 : eq(73, 18) : BOOL
78 : eq(73, 20) : BOOL
79 : eq(73, 23) : BOOL
80 : eq(73, 7) : BOOL
81 : eq(73, 26) : BOOL
82 : ite(81, 11, 28) : BV:8
83 : ite(80, 11, 82) : BV:8
84 : ite(79, 11, 83) : BV:8
85 : ite(78, 22, 84) : BV:8
86 : ite(77, 11, 85) : BV:8
87 : ite(76, 17, 86) : BV:8
88 : ite(75, 14, 87) : BV:8
89 : ite(74, 11, 88) : BV:8
90 : bvconcat(36, 54, 72, 89) : BV:32
91 : ite(3, 2, 90) : BV:32
92 : lambda(1, 91) : FUNCTION[BV:32 -> BV:32]
93 : sym_const(92) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 193259268 { 0xb84e704 +1.3830003e152 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2392657684 { 0x8e9d0f14 -1902309612 -1.22702264e158 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2392657687 { 0x8e9d0f17 -1902309609 -1.22702300e158 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 911867416 { 0x3659fe18 +1.70306682e237 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 911867419 { 0x3659fe1b +1.70306718e237 } : BV:32
=counter_example.random_seed
1795444310
=counter_example_end
=global nodece 4 num_edges_traversed 1
=global nodece 4 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 5
=global nodece 5 nodece z3.ce63.num_edges_traversed1
=global nodece 5 nodece_path
=global nodece 5 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 5 nodece_cached_counterexample
=counter_example_begin z3.ce63 867cf0a11f30953cae346ff17273698
=input.spec-%var-x-1
1 : Lambda135 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 134219783 { 0x8000807 +1.24497e145 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 134219784 { 0x8000808 +1.24509e145 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda136 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3724270080 { 0xddfbda00 -570697216 -1.96759033e60 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 3724270081 { 0xddfbda01 -570697215 -1.96759045e60 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 1671225710 { 0x639ce16e +1.22562956e72 } : BV:32
28 : eq(23, 27) : BOOL
29 : 251 { 0xfb -5 } : BV:8
30 : 3724270083 { 0xddfbda03 -570697213 -1.96759068e60 } : BV:32
31 : eq(23, 30) : BOOL
32 : 4022405450 { 0xefc1094a -272561846 -1.50809597e96 } : BV:32
33 : eq(23, 32) : BOOL
34 : 1671225709 { 0x639ce16d +1.22562944e72 } : BV:32
35 : eq(23, 34) : BOOL
36 : 218 { 0xda -38 } : BV:8
37 : 3724270082 { 0xddfbda02 -570697214 -1.96759057e60 } : BV:32
38 : eq(23, 37) : BOOL
39 : eq(23, 22) : BOOL
40 : 1671225711 { 0x639ce16f +1.22562968e72 } : BV:32
41 : eq(23, 40) : BOOL
42 : 221 { 0xdd -35 } : BV:8
43 : 1671225708 { 0x639ce16c +1.22562932e72 } : BV:32
44 : eq(23, 43) : BOOL
45 : 8 { 0x8 } : BV:8
46 : ite(44, 26, 45) : BV:8
47 : ite(41, 42, 46) : BV:8
48 : ite(39, 26, 47) : BV:8
49 : ite(38, 26, 48) : BV:8
50 : ite(35, 36, 49) : BV:8
51 : ite(33, 26, 50) : BV:8
52 : ite(31, 26, 51) : BV:8
53 : ite(28, 29, 52) : BV:8
54 : ite(25, 26, 53) : BV:8
55 : 2 { 0x2 +1.23e129 } : BV:32
56 : bvadd(55, 21, 22) : BV:32
57 : eq(56, 24) : BOOL
58 : eq(56, 27) : BOOL
59 : eq(56, 30) : BOOL
60 : eq(56, 32) : BOOL
61 : eq(56, 34) : BOOL
62 : eq(56, 37) : BOOL
63 : eq(56, 22) : BOOL
64 : eq(56, 40) : BOOL
65 : eq(56, 43) : BOOL
66 : ite(65, 26, 45) : BV:8
67 : ite(64, 42, 66) : BV:8
68 : ite(63, 26, 67) : BV:8
69 : ite(62, 26, 68) : BV:8
70 : ite(61, 36, 69) : BV:8
71 : ite(60, 26, 70) : BV:8
72 : ite(59, 26, 71) : BV:8
73 : ite(58, 29, 72) : BV:8
74 : ite(57, 26, 73) : BV:8
75 : 1 { 0x1 +1.11e129 } : BV:32
76 : bvadd(75, 21, 22) : BV:32
77 : eq(76, 24) : BOOL
78 : eq(76, 27) : BOOL
79 : eq(76, 30) : BOOL
80 : eq(76, 32) : BOOL
81 : eq(76, 34) : BOOL
82 : eq(76, 37) : BOOL
83 : eq(76, 22) : BOOL
84 : eq(76, 40) : BOOL
85 : eq(76, 43) : BOOL
86 : ite(85, 26, 45) : BV:8
87 : ite(84, 42, 86) : BV:8
88 : ite(83, 26, 87) : BV:8
89 : ite(82, 26, 88) : BV:8
90 : ite(81, 36, 89) : BV:8
91 : ite(80, 26, 90) : BV:8
92 : ite(79, 26, 91) : BV:8
93 : ite(78, 29, 92) : BV:8
94 : ite(77, 26, 93) : BV:8
95 : bvadd(21, 22) : BV:32
96 : eq(95, 24) : BOOL
97 : eq(95, 27) : BOOL
98 : eq(95, 30) : BOOL
99 : eq(95, 32) : BOOL
100 : eq(95, 34) : BOOL
101 : eq(95, 37) : BOOL
102 : eq(95, 22) : BOOL
103 : eq(95, 40) : BOOL
104 : eq(95, 43) : BOOL
105 : ite(104, 26, 45) : BV:8
106 : ite(103, 42, 105) : BV:8
107 : ite(102, 26, 106) : BV:8
108 : ite(101, 26, 107) : BV:8
109 : ite(100, 36, 108) : BV:8
110 : ite(99, 26, 109) : BV:8
111 : ite(98, 26, 110) : BV:8
112 : ite(97, 29, 111) : BV:8
113 : ite(96, 26, 112) : BV:8
114 : bvconcat(54, 74, 94, 113) : BV:32
115 : ite(18, 2, 114) : BV:32
116 : lambda(17, 115) : FUNCTION[BV:32 -> BV:32]
117 : map(16, 116) : MAP[BV:32 -> BV:32]
118 : sym_const(117) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L3%6%bbentry
1 : Lambda135 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 134219783 { 0x8000807 +1.24497e145 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 134219784 { 0x8000808 +1.24509e145 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda136 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3724270080 { 0xddfbda00 -570697216 -1.96759033e60 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 3724270081 { 0xddfbda01 -570697215 -1.96759045e60 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 1671225710 { 0x639ce16e +1.22562956e72 } : BV:32
28 : eq(23, 27) : BOOL
29 : 251 { 0xfb -5 } : BV:8
30 : 3724270083 { 0xddfbda03 -570697213 -1.96759068e60 } : BV:32
31 : eq(23, 30) : BOOL
32 : 4022405450 { 0xefc1094a -272561846 -1.50809597e96 } : BV:32
33 : eq(23, 32) : BOOL
34 : 1671225709 { 0x639ce16d +1.22562944e72 } : BV:32
35 : eq(23, 34) : BOOL
36 : 218 { 0xda -38 } : BV:8
37 : 3724270082 { 0xddfbda02 -570697214 -1.96759057e60 } : BV:32
38 : eq(23, 37) : BOOL
39 : eq(23, 22) : BOOL
40 : 1671225711 { 0x639ce16f +1.22562968e72 } : BV:32
41 : eq(23, 40) : BOOL
42 : 221 { 0xdd -35 } : BV:8
43 : 1671225708 { 0x639ce16c +1.22562932e72 } : BV:32
44 : eq(23, 43) : BOOL
45 : 8 { 0x8 } : BV:8
46 : ite(44, 26, 45) : BV:8
47 : ite(41, 42, 46) : BV:8
48 : ite(39, 26, 47) : BV:8
49 : ite(38, 26, 48) : BV:8
50 : ite(35, 36, 49) : BV:8
51 : ite(33, 26, 50) : BV:8
52 : ite(31, 26, 51) : BV:8
53 : ite(28, 29, 52) : BV:8
54 : ite(25, 26, 53) : BV:8
55 : 2 { 0x2 +1.23e129 } : BV:32
56 : bvadd(55, 21, 22) : BV:32
57 : eq(56, 24) : BOOL
58 : eq(56, 27) : BOOL
59 : eq(56, 30) : BOOL
60 : eq(56, 32) : BOOL
61 : eq(56, 34) : BOOL
62 : eq(56, 37) : BOOL
63 : eq(56, 22) : BOOL
64 : eq(56, 40) : BOOL
65 : eq(56, 43) : BOOL
66 : ite(65, 26, 45) : BV:8
67 : ite(64, 42, 66) : BV:8
68 : ite(63, 26, 67) : BV:8
69 : ite(62, 26, 68) : BV:8
70 : ite(61, 36, 69) : BV:8
71 : ite(60, 26, 70) : BV:8
72 : ite(59, 26, 71) : BV:8
73 : ite(58, 29, 72) : BV:8
74 : ite(57, 26, 73) : BV:8
75 : 1 { 0x1 +1.11e129 } : BV:32
76 : bvadd(75, 21, 22) : BV:32
77 : eq(76, 24) : BOOL
78 : eq(76, 27) : BOOL
79 : eq(76, 30) : BOOL
80 : eq(76, 32) : BOOL
81 : eq(76, 34) : BOOL
82 : eq(76, 37) : BOOL
83 : eq(76, 22) : BOOL
84 : eq(76, 40) : BOOL
85 : eq(76, 43) : BOOL
86 : ite(85, 26, 45) : BV:8
87 : ite(84, 42, 86) : BV:8
88 : ite(83, 26, 87) : BV:8
89 : ite(82, 26, 88) : BV:8
90 : ite(81, 36, 89) : BV:8
91 : ite(80, 26, 90) : BV:8
92 : ite(79, 26, 91) : BV:8
93 : ite(78, 29, 92) : BV:8
94 : ite(77, 26, 93) : BV:8
95 : bvadd(21, 22) : BV:32
96 : eq(95, 24) : BOOL
97 : eq(95, 27) : BOOL
98 : eq(95, 30) : BOOL
99 : eq(95, 32) : BOOL
100 : eq(95, 34) : BOOL
101 : eq(95, 37) : BOOL
102 : eq(95, 22) : BOOL
103 : eq(95, 40) : BOOL
104 : eq(95, 43) : BOOL
105 : ite(104, 26, 45) : BV:8
106 : ite(103, 42, 105) : BV:8
107 : ite(102, 26, 106) : BV:8
108 : ite(101, 26, 107) : BV:8
109 : ite(100, 36, 108) : BV:8
110 : ite(99, 26, 109) : BV:8
111 : ite(98, 26, 110) : BV:8
112 : ite(97, 29, 111) : BV:8
113 : ite(96, 26, 112) : BV:8
114 : bvconcat(54, 74, 94, 113) : BV:32
115 : ite(18, 2, 114) : BV:32
116 : lambda(17, 115) : FUNCTION[BV:32 -> BV:32]
117 : map(16, 116) : MAP[BV:32 -> BV:32]
118 : sym_const(117) : MAP[BV:32 -> BV:32]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 3724270080 { 0xddfbda00 -570697216 -1.96759033e60 } : BV:32
=input.dst.llvm-%n
1 : 134219784 { 0x8000808 +1.24509e145 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1671225707 ] -> 8, [ 1671225708; 1671225708 ] -> 0, [ 1671225709; 1671225709 ] -> 218, [ 1671225710; 1671225710 ] -> 251, [ 1671225711; 1671225711 ] -> 221, [ 1671225712; 3724270079 ] -> 8, [ 3724270080; 3724270083 ] -> 0, [ 3724270084; 4022405449 ] -> 8, [ 4022405450; 4022405450 ] -> 0, [ 4022405451; 4294967295 ] -> 8, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1671225707 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1671225708; 1671225711 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1671225712; 4022405447 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4022405448; 4022405451 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 4022405452; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1671225708 { 0x639ce16c +1.22562932e72 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4022405448 { 0xefc10948 -272561848 -1.50809574e96 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1407581506 { 0x53e5fd42 +1.79679131e40 } : COUNT
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-0.L3%6%bbentry.0.1
1 : ([ 0; 134219783 ] -> true, [ 134219784; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%6%bbentry.1.1
1 : Lambda123 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3724270080 { 0xddfbda00 -570697216 -1.96759033e60 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 3724270081 { 0xddfbda01 -570697215 -1.96759045e60 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 1671225710 { 0x639ce16e +1.22562956e72 } : BV:32
13 : eq(8, 12) : BOOL
14 : 251 { 0xfb -5 } : BV:8
15 : 3724270083 { 0xddfbda03 -570697213 -1.96759068e60 } : BV:32
16 : eq(8, 15) : BOOL
17 : 4022405450 { 0xefc1094a -272561846 -1.50809597e96 } : BV:32
18 : eq(8, 17) : BOOL
19 : 1671225709 { 0x639ce16d +1.22562944e72 } : BV:32
20 : eq(8, 19) : BOOL
21 : 218 { 0xda -38 } : BV:8
22 : 3724270082 { 0xddfbda02 -570697214 -1.96759057e60 } : BV:32
23 : eq(8, 22) : BOOL
24 : eq(8, 7) : BOOL
25 : 1671225711 { 0x639ce16f +1.22562968e72 } : BV:32
26 : eq(8, 25) : BOOL
27 : 221 { 0xdd -35 } : BV:8
28 : 1671225708 { 0x639ce16c +1.22562932e72 } : BV:32
29 : eq(8, 28) : BOOL
30 : 8 { 0x8 } : BV:8
31 : ite(29, 11, 30) : BV:8
32 : ite(26, 27, 31) : BV:8
33 : ite(24, 11, 32) : BV:8
34 : ite(23, 11, 33) : BV:8
35 : ite(20, 21, 34) : BV:8
36 : ite(18, 11, 35) : BV:8
37 : ite(16, 11, 36) : BV:8
38 : ite(13, 14, 37) : BV:8
39 : ite(10, 11, 38) : BV:8
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvadd(40, 6, 7) : BV:32
42 : eq(41, 9) : BOOL
43 : eq(41, 12) : BOOL
44 : eq(41, 15) : BOOL
45 : eq(41, 17) : BOOL
46 : eq(41, 19) : BOOL
47 : eq(41, 22) : BOOL
48 : eq(41, 7) : BOOL
49 : eq(41, 25) : BOOL
50 : eq(41, 28) : BOOL
51 : ite(50, 11, 30) : BV:8
52 : ite(49, 27, 51) : BV:8
53 : ite(48, 11, 52) : BV:8
54 : ite(47, 11, 53) : BV:8
55 : ite(46, 21, 54) : BV:8
56 : ite(45, 11, 55) : BV:8
57 : ite(44, 11, 56) : BV:8
58 : ite(43, 14, 57) : BV:8
59 : ite(42, 11, 58) : BV:8
60 : 1 { 0x1 +1.11e129 } : BV:32
61 : bvadd(60, 6, 7) : BV:32
62 : eq(61, 9) : BOOL
63 : eq(61, 12) : BOOL
64 : eq(61, 15) : BOOL
65 : eq(61, 17) : BOOL
66 : eq(61, 19) : BOOL
67 : eq(61, 22) : BOOL
68 : eq(61, 7) : BOOL
69 : eq(61, 25) : BOOL
70 : eq(61, 28) : BOOL
71 : ite(70, 11, 30) : BV:8
72 : ite(69, 27, 71) : BV:8
73 : ite(68, 11, 72) : BV:8
74 : ite(67, 11, 73) : BV:8
75 : ite(66, 21, 74) : BV:8
76 : ite(65, 11, 75) : BV:8
77 : ite(64, 11, 76) : BV:8
78 : ite(63, 14, 77) : BV:8
79 : ite(62, 11, 78) : BV:8
80 : bvadd(6, 7) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 15) : BOOL
84 : eq(80, 17) : BOOL
85 : eq(80, 19) : BOOL
86 : eq(80, 22) : BOOL
87 : eq(80, 7) : BOOL
88 : eq(80, 25) : BOOL
89 : eq(80, 28) : BOOL
90 : ite(89, 11, 30) : BV:8
91 : ite(88, 27, 90) : BV:8
92 : ite(87, 11, 91) : BV:8
93 : ite(86, 11, 92) : BV:8
94 : ite(85, 21, 93) : BV:8
95 : ite(84, 11, 94) : BV:8
96 : ite(83, 11, 95) : BV:8
97 : ite(82, 14, 96) : BV:8
98 : ite(81, 11, 97) : BV:8
99 : bvconcat(39, 59, 79, 98) : BV:32
100 : ite(3, 2, 99) : BV:32
101 : ite(3, 2, 100) : BV:32
102 : lambda(1, 101) : FUNCTION[BV:32 -> BV:32]
103 : sym_const(102) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 134219783 ] -> true, [ 134219784; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : Lambda124 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3724270080 { 0xddfbda00 -570697216 -1.96759033e60 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 3724270081 { 0xddfbda01 -570697215 -1.96759045e60 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 1671225710 { 0x639ce16e +1.22562956e72 } : BV:32
13 : eq(8, 12) : BOOL
14 : 251 { 0xfb -5 } : BV:8
15 : 3724270083 { 0xddfbda03 -570697213 -1.96759068e60 } : BV:32
16 : eq(8, 15) : BOOL
17 : 4022405450 { 0xefc1094a -272561846 -1.50809597e96 } : BV:32
18 : eq(8, 17) : BOOL
19 : 1671225709 { 0x639ce16d +1.22562944e72 } : BV:32
20 : eq(8, 19) : BOOL
21 : 218 { 0xda -38 } : BV:8
22 : 3724270082 { 0xddfbda02 -570697214 -1.96759057e60 } : BV:32
23 : eq(8, 22) : BOOL
24 : eq(8, 7) : BOOL
25 : 1671225711 { 0x639ce16f +1.22562968e72 } : BV:32
26 : eq(8, 25) : BOOL
27 : 221 { 0xdd -35 } : BV:8
28 : 1671225708 { 0x639ce16c +1.22562932e72 } : BV:32
29 : eq(8, 28) : BOOL
30 : 8 { 0x8 } : BV:8
31 : ite(29, 11, 30) : BV:8
32 : ite(26, 27, 31) : BV:8
33 : ite(24, 11, 32) : BV:8
34 : ite(23, 11, 33) : BV:8
35 : ite(20, 21, 34) : BV:8
36 : ite(18, 11, 35) : BV:8
37 : ite(16, 11, 36) : BV:8
38 : ite(13, 14, 37) : BV:8
39 : ite(10, 11, 38) : BV:8
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvadd(40, 6, 7) : BV:32
42 : eq(41, 9) : BOOL
43 : eq(41, 12) : BOOL
44 : eq(41, 15) : BOOL
45 : eq(41, 17) : BOOL
46 : eq(41, 19) : BOOL
47 : eq(41, 22) : BOOL
48 : eq(41, 7) : BOOL
49 : eq(41, 25) : BOOL
50 : eq(41, 28) : BOOL
51 : ite(50, 11, 30) : BV:8
52 : ite(49, 27, 51) : BV:8
53 : ite(48, 11, 52) : BV:8
54 : ite(47, 11, 53) : BV:8
55 : ite(46, 21, 54) : BV:8
56 : ite(45, 11, 55) : BV:8
57 : ite(44, 11, 56) : BV:8
58 : ite(43, 14, 57) : BV:8
59 : ite(42, 11, 58) : BV:8
60 : 1 { 0x1 +1.11e129 } : BV:32
61 : bvadd(60, 6, 7) : BV:32
62 : eq(61, 9) : BOOL
63 : eq(61, 12) : BOOL
64 : eq(61, 15) : BOOL
65 : eq(61, 17) : BOOL
66 : eq(61, 19) : BOOL
67 : eq(61, 22) : BOOL
68 : eq(61, 7) : BOOL
69 : eq(61, 25) : BOOL
70 : eq(61, 28) : BOOL
71 : ite(70, 11, 30) : BV:8
72 : ite(69, 27, 71) : BV:8
73 : ite(68, 11, 72) : BV:8
74 : ite(67, 11, 73) : BV:8
75 : ite(66, 21, 74) : BV:8
76 : ite(65, 11, 75) : BV:8
77 : ite(64, 11, 76) : BV:8
78 : ite(63, 14, 77) : BV:8
79 : ite(62, 11, 78) : BV:8
80 : bvadd(6, 7) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 15) : BOOL
84 : eq(80, 17) : BOOL
85 : eq(80, 19) : BOOL
86 : eq(80, 22) : BOOL
87 : eq(80, 7) : BOOL
88 : eq(80, 25) : BOOL
89 : eq(80, 28) : BOOL
90 : ite(89, 11, 30) : BV:8
91 : ite(88, 27, 90) : BV:8
92 : ite(87, 11, 91) : BV:8
93 : ite(86, 11, 92) : BV:8
94 : ite(85, 21, 93) : BV:8
95 : ite(84, 11, 94) : BV:8
96 : ite(83, 11, 95) : BV:8
97 : ite(82, 14, 96) : BV:8
98 : ite(81, 11, 97) : BV:8
99 : bvconcat(39, 59, 79, 98) : BV:32
100 : ite(3, 2, 99) : BV:32
101 : lambda(1, 100) : FUNCTION[BV:32 -> BV:32]
102 : sym_const(101) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1407581506 { 0x53e5fd42 +1.79679131e40 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4022405448 { 0xefc10948 -272561848 -1.50809574e96 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 4022405451 { 0xefc1094b -272561845 -1.50809609e96 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1671225708 { 0x639ce16c +1.22562932e72 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1671225711 { 0x639ce16f +1.22562968e72 } : BV:32
=counter_example.random_seed
1027758982
=counter_example_end
=global nodece 5 num_edges_traversed 1
=global nodece 5 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 6
=global nodece 6 nodece z3.ce83.num_edges_traversed1
=global nodece 6 nodece_path
=global nodece 6 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 6 nodece_cached_counterexample
=counter_example_begin z3.ce83 f72ccbc1d824c584ecff3cc8b8c3a2fd
=input.spec-%var-x-1
1 : Lambda171 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 67109891 { 0x4000403 +1.12242e137 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 67109892 { 0x4000404 +1.12254e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda172 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3724270080 { 0xddfbda00 -570697216 -1.96759033e60 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 3724270081 { 0xddfbda01 -570697215 -1.96759045e60 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 1671225710 { 0x639ce16e +1.22562956e72 } : BV:32
28 : eq(23, 27) : BOOL
29 : 251 { 0xfb -5 } : BV:8
30 : 3724270083 { 0xddfbda03 -570697213 -1.96759068e60 } : BV:32
31 : eq(23, 30) : BOOL
32 : 4022405450 { 0xefc1094a -272561846 -1.50809597e96 } : BV:32
33 : eq(23, 32) : BOOL
34 : 1671225709 { 0x639ce16d +1.22562944e72 } : BV:32
35 : eq(23, 34) : BOOL
36 : 218 { 0xda -38 } : BV:8
37 : 3724270082 { 0xddfbda02 -570697214 -1.96759057e60 } : BV:32
38 : eq(23, 37) : BOOL
39 : eq(23, 22) : BOOL
40 : 1671225711 { 0x639ce16f +1.22562968e72 } : BV:32
41 : eq(23, 40) : BOOL
42 : 221 { 0xdd -35 } : BV:8
43 : 1671225708 { 0x639ce16c +1.22562932e72 } : BV:32
44 : eq(23, 43) : BOOL
45 : 4 { 0x4 } : BV:8
46 : ite(44, 26, 45) : BV:8
47 : ite(41, 42, 46) : BV:8
48 : ite(39, 26, 47) : BV:8
49 : ite(38, 26, 48) : BV:8
50 : ite(35, 36, 49) : BV:8
51 : ite(33, 26, 50) : BV:8
52 : ite(31, 26, 51) : BV:8
53 : ite(28, 29, 52) : BV:8
54 : ite(25, 26, 53) : BV:8
55 : 2 { 0x2 +1.23e129 } : BV:32
56 : bvadd(55, 21, 22) : BV:32
57 : eq(56, 24) : BOOL
58 : eq(56, 27) : BOOL
59 : eq(56, 30) : BOOL
60 : eq(56, 32) : BOOL
61 : eq(56, 34) : BOOL
62 : eq(56, 37) : BOOL
63 : eq(56, 22) : BOOL
64 : eq(56, 40) : BOOL
65 : eq(56, 43) : BOOL
66 : ite(65, 26, 45) : BV:8
67 : ite(64, 42, 66) : BV:8
68 : ite(63, 26, 67) : BV:8
69 : ite(62, 26, 68) : BV:8
70 : ite(61, 36, 69) : BV:8
71 : ite(60, 26, 70) : BV:8
72 : ite(59, 26, 71) : BV:8
73 : ite(58, 29, 72) : BV:8
74 : ite(57, 26, 73) : BV:8
75 : 1 { 0x1 +1.11e129 } : BV:32
76 : bvadd(75, 21, 22) : BV:32
77 : eq(76, 24) : BOOL
78 : eq(76, 27) : BOOL
79 : eq(76, 30) : BOOL
80 : eq(76, 32) : BOOL
81 : eq(76, 34) : BOOL
82 : eq(76, 37) : BOOL
83 : eq(76, 22) : BOOL
84 : eq(76, 40) : BOOL
85 : eq(76, 43) : BOOL
86 : ite(85, 26, 45) : BV:8
87 : ite(84, 42, 86) : BV:8
88 : ite(83, 26, 87) : BV:8
89 : ite(82, 26, 88) : BV:8
90 : ite(81, 36, 89) : BV:8
91 : ite(80, 26, 90) : BV:8
92 : ite(79, 26, 91) : BV:8
93 : ite(78, 29, 92) : BV:8
94 : ite(77, 26, 93) : BV:8
95 : bvadd(21, 22) : BV:32
96 : eq(95, 24) : BOOL
97 : eq(95, 27) : BOOL
98 : eq(95, 30) : BOOL
99 : eq(95, 32) : BOOL
100 : eq(95, 34) : BOOL
101 : eq(95, 37) : BOOL
102 : eq(95, 22) : BOOL
103 : eq(95, 40) : BOOL
104 : eq(95, 43) : BOOL
105 : ite(104, 26, 45) : BV:8
106 : ite(103, 42, 105) : BV:8
107 : ite(102, 26, 106) : BV:8
108 : ite(101, 26, 107) : BV:8
109 : ite(100, 36, 108) : BV:8
110 : ite(99, 26, 109) : BV:8
111 : ite(98, 26, 110) : BV:8
112 : ite(97, 29, 111) : BV:8
113 : ite(96, 26, 112) : BV:8
114 : bvconcat(54, 74, 94, 113) : BV:32
115 : ite(18, 2, 114) : BV:32
116 : lambda(17, 115) : FUNCTION[BV:32 -> BV:32]
117 : map(16, 116) : MAP[BV:32 -> BV:32]
118 : sym_const(117) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L3%6%bbentry
1 : Lambda171 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 67109891 { 0x4000403 +1.12242e137 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 67109892 { 0x4000404 +1.12254e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda172 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3724270080 { 0xddfbda00 -570697216 -1.96759033e60 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 3724270081 { 0xddfbda01 -570697215 -1.96759045e60 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 1671225710 { 0x639ce16e +1.22562956e72 } : BV:32
28 : eq(23, 27) : BOOL
29 : 251 { 0xfb -5 } : BV:8
30 : 3724270083 { 0xddfbda03 -570697213 -1.96759068e60 } : BV:32
31 : eq(23, 30) : BOOL
32 : 4022405450 { 0xefc1094a -272561846 -1.50809597e96 } : BV:32
33 : eq(23, 32) : BOOL
34 : 1671225709 { 0x639ce16d +1.22562944e72 } : BV:32
35 : eq(23, 34) : BOOL
36 : 218 { 0xda -38 } : BV:8
37 : 3724270082 { 0xddfbda02 -570697214 -1.96759057e60 } : BV:32
38 : eq(23, 37) : BOOL
39 : eq(23, 22) : BOOL
40 : 1671225711 { 0x639ce16f +1.22562968e72 } : BV:32
41 : eq(23, 40) : BOOL
42 : 221 { 0xdd -35 } : BV:8
43 : 1671225708 { 0x639ce16c +1.22562932e72 } : BV:32
44 : eq(23, 43) : BOOL
45 : 4 { 0x4 } : BV:8
46 : ite(44, 26, 45) : BV:8
47 : ite(41, 42, 46) : BV:8
48 : ite(39, 26, 47) : BV:8
49 : ite(38, 26, 48) : BV:8
50 : ite(35, 36, 49) : BV:8
51 : ite(33, 26, 50) : BV:8
52 : ite(31, 26, 51) : BV:8
53 : ite(28, 29, 52) : BV:8
54 : ite(25, 26, 53) : BV:8
55 : 2 { 0x2 +1.23e129 } : BV:32
56 : bvadd(55, 21, 22) : BV:32
57 : eq(56, 24) : BOOL
58 : eq(56, 27) : BOOL
59 : eq(56, 30) : BOOL
60 : eq(56, 32) : BOOL
61 : eq(56, 34) : BOOL
62 : eq(56, 37) : BOOL
63 : eq(56, 22) : BOOL
64 : eq(56, 40) : BOOL
65 : eq(56, 43) : BOOL
66 : ite(65, 26, 45) : BV:8
67 : ite(64, 42, 66) : BV:8
68 : ite(63, 26, 67) : BV:8
69 : ite(62, 26, 68) : BV:8
70 : ite(61, 36, 69) : BV:8
71 : ite(60, 26, 70) : BV:8
72 : ite(59, 26, 71) : BV:8
73 : ite(58, 29, 72) : BV:8
74 : ite(57, 26, 73) : BV:8
75 : 1 { 0x1 +1.11e129 } : BV:32
76 : bvadd(75, 21, 22) : BV:32
77 : eq(76, 24) : BOOL
78 : eq(76, 27) : BOOL
79 : eq(76, 30) : BOOL
80 : eq(76, 32) : BOOL
81 : eq(76, 34) : BOOL
82 : eq(76, 37) : BOOL
83 : eq(76, 22) : BOOL
84 : eq(76, 40) : BOOL
85 : eq(76, 43) : BOOL
86 : ite(85, 26, 45) : BV:8
87 : ite(84, 42, 86) : BV:8
88 : ite(83, 26, 87) : BV:8
89 : ite(82, 26, 88) : BV:8
90 : ite(81, 36, 89) : BV:8
91 : ite(80, 26, 90) : BV:8
92 : ite(79, 26, 91) : BV:8
93 : ite(78, 29, 92) : BV:8
94 : ite(77, 26, 93) : BV:8
95 : bvadd(21, 22) : BV:32
96 : eq(95, 24) : BOOL
97 : eq(95, 27) : BOOL
98 : eq(95, 30) : BOOL
99 : eq(95, 32) : BOOL
100 : eq(95, 34) : BOOL
101 : eq(95, 37) : BOOL
102 : eq(95, 22) : BOOL
103 : eq(95, 40) : BOOL
104 : eq(95, 43) : BOOL
105 : ite(104, 26, 45) : BV:8
106 : ite(103, 42, 105) : BV:8
107 : ite(102, 26, 106) : BV:8
108 : ite(101, 26, 107) : BV:8
109 : ite(100, 36, 108) : BV:8
110 : ite(99, 26, 109) : BV:8
111 : ite(98, 26, 110) : BV:8
112 : ite(97, 29, 111) : BV:8
113 : ite(96, 26, 112) : BV:8
114 : bvconcat(54, 74, 94, 113) : BV:32
115 : ite(18, 2, 114) : BV:32
116 : lambda(17, 115) : FUNCTION[BV:32 -> BV:32]
117 : map(16, 116) : MAP[BV:32 -> BV:32]
118 : sym_const(117) : MAP[BV:32 -> BV:32]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 3724270080 { 0xddfbda00 -570697216 -1.96759033e60 } : BV:32
=input.dst.llvm-%n
1 : 67109892 { 0x4000404 +1.12254e137 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1671225707 ] -> 4, [ 1671225708; 1671225708 ] -> 0, [ 1671225709; 1671225709 ] -> 218, [ 1671225710; 1671225710 ] -> 251, [ 1671225711; 1671225711 ] -> 221, [ 1671225712; 3724270079 ] -> 4, [ 3724270080; 3724270083 ] -> 0, [ 3724270084; 4022405449 ] -> 4, [ 4022405450; 4022405450 ] -> 0, [ 4022405451; 4294967295 ] -> 4, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1671225707 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1671225708; 1671225711 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1671225712; 4022405447 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4022405448; 4022405451 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 4022405452; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1671225708 { 0x639ce16c +1.22562932e72 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4022405448 { 0xefc10948 -272561848 -1.50809574e96 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 308041456 { 0x125c56f0 +1.72140312e165 } : COUNT
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-0.L3%6%bbentry.0.1
1 : ([ 0; 67109891 ] -> true, [ 67109892; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%6%bbentry.1.1
1 : Lambda159 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3724270080 { 0xddfbda00 -570697216 -1.96759033e60 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 3724270081 { 0xddfbda01 -570697215 -1.96759045e60 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 1671225710 { 0x639ce16e +1.22562956e72 } : BV:32
13 : eq(8, 12) : BOOL
14 : 251 { 0xfb -5 } : BV:8
15 : 3724270083 { 0xddfbda03 -570697213 -1.96759068e60 } : BV:32
16 : eq(8, 15) : BOOL
17 : 4022405450 { 0xefc1094a -272561846 -1.50809597e96 } : BV:32
18 : eq(8, 17) : BOOL
19 : 1671225709 { 0x639ce16d +1.22562944e72 } : BV:32
20 : eq(8, 19) : BOOL
21 : 218 { 0xda -38 } : BV:8
22 : 3724270082 { 0xddfbda02 -570697214 -1.96759057e60 } : BV:32
23 : eq(8, 22) : BOOL
24 : eq(8, 7) : BOOL
25 : 1671225711 { 0x639ce16f +1.22562968e72 } : BV:32
26 : eq(8, 25) : BOOL
27 : 221 { 0xdd -35 } : BV:8
28 : 1671225708 { 0x639ce16c +1.22562932e72 } : BV:32
29 : eq(8, 28) : BOOL
30 : 4 { 0x4 } : BV:8
31 : ite(29, 11, 30) : BV:8
32 : ite(26, 27, 31) : BV:8
33 : ite(24, 11, 32) : BV:8
34 : ite(23, 11, 33) : BV:8
35 : ite(20, 21, 34) : BV:8
36 : ite(18, 11, 35) : BV:8
37 : ite(16, 11, 36) : BV:8
38 : ite(13, 14, 37) : BV:8
39 : ite(10, 11, 38) : BV:8
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvadd(40, 6, 7) : BV:32
42 : eq(41, 9) : BOOL
43 : eq(41, 12) : BOOL
44 : eq(41, 15) : BOOL
45 : eq(41, 17) : BOOL
46 : eq(41, 19) : BOOL
47 : eq(41, 22) : BOOL
48 : eq(41, 7) : BOOL
49 : eq(41, 25) : BOOL
50 : eq(41, 28) : BOOL
51 : ite(50, 11, 30) : BV:8
52 : ite(49, 27, 51) : BV:8
53 : ite(48, 11, 52) : BV:8
54 : ite(47, 11, 53) : BV:8
55 : ite(46, 21, 54) : BV:8
56 : ite(45, 11, 55) : BV:8
57 : ite(44, 11, 56) : BV:8
58 : ite(43, 14, 57) : BV:8
59 : ite(42, 11, 58) : BV:8
60 : 1 { 0x1 +1.11e129 } : BV:32
61 : bvadd(60, 6, 7) : BV:32
62 : eq(61, 9) : BOOL
63 : eq(61, 12) : BOOL
64 : eq(61, 15) : BOOL
65 : eq(61, 17) : BOOL
66 : eq(61, 19) : BOOL
67 : eq(61, 22) : BOOL
68 : eq(61, 7) : BOOL
69 : eq(61, 25) : BOOL
70 : eq(61, 28) : BOOL
71 : ite(70, 11, 30) : BV:8
72 : ite(69, 27, 71) : BV:8
73 : ite(68, 11, 72) : BV:8
74 : ite(67, 11, 73) : BV:8
75 : ite(66, 21, 74) : BV:8
76 : ite(65, 11, 75) : BV:8
77 : ite(64, 11, 76) : BV:8
78 : ite(63, 14, 77) : BV:8
79 : ite(62, 11, 78) : BV:8
80 : bvadd(6, 7) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 15) : BOOL
84 : eq(80, 17) : BOOL
85 : eq(80, 19) : BOOL
86 : eq(80, 22) : BOOL
87 : eq(80, 7) : BOOL
88 : eq(80, 25) : BOOL
89 : eq(80, 28) : BOOL
90 : ite(89, 11, 30) : BV:8
91 : ite(88, 27, 90) : BV:8
92 : ite(87, 11, 91) : BV:8
93 : ite(86, 11, 92) : BV:8
94 : ite(85, 21, 93) : BV:8
95 : ite(84, 11, 94) : BV:8
96 : ite(83, 11, 95) : BV:8
97 : ite(82, 14, 96) : BV:8
98 : ite(81, 11, 97) : BV:8
99 : bvconcat(39, 59, 79, 98) : BV:32
100 : ite(3, 2, 99) : BV:32
101 : ite(3, 2, 100) : BV:32
102 : lambda(1, 101) : FUNCTION[BV:32 -> BV:32]
103 : sym_const(102) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 67109891 ] -> true, [ 67109892; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : Lambda160 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3724270080 { 0xddfbda00 -570697216 -1.96759033e60 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 3724270081 { 0xddfbda01 -570697215 -1.96759045e60 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 1671225710 { 0x639ce16e +1.22562956e72 } : BV:32
13 : eq(8, 12) : BOOL
14 : 251 { 0xfb -5 } : BV:8
15 : 3724270083 { 0xddfbda03 -570697213 -1.96759068e60 } : BV:32
16 : eq(8, 15) : BOOL
17 : 4022405450 { 0xefc1094a -272561846 -1.50809597e96 } : BV:32
18 : eq(8, 17) : BOOL
19 : 1671225709 { 0x639ce16d +1.22562944e72 } : BV:32
20 : eq(8, 19) : BOOL
21 : 218 { 0xda -38 } : BV:8
22 : 3724270082 { 0xddfbda02 -570697214 -1.96759057e60 } : BV:32
23 : eq(8, 22) : BOOL
24 : eq(8, 7) : BOOL
25 : 1671225711 { 0x639ce16f +1.22562968e72 } : BV:32
26 : eq(8, 25) : BOOL
27 : 221 { 0xdd -35 } : BV:8
28 : 1671225708 { 0x639ce16c +1.22562932e72 } : BV:32
29 : eq(8, 28) : BOOL
30 : 4 { 0x4 } : BV:8
31 : ite(29, 11, 30) : BV:8
32 : ite(26, 27, 31) : BV:8
33 : ite(24, 11, 32) : BV:8
34 : ite(23, 11, 33) : BV:8
35 : ite(20, 21, 34) : BV:8
36 : ite(18, 11, 35) : BV:8
37 : ite(16, 11, 36) : BV:8
38 : ite(13, 14, 37) : BV:8
39 : ite(10, 11, 38) : BV:8
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvadd(40, 6, 7) : BV:32
42 : eq(41, 9) : BOOL
43 : eq(41, 12) : BOOL
44 : eq(41, 15) : BOOL
45 : eq(41, 17) : BOOL
46 : eq(41, 19) : BOOL
47 : eq(41, 22) : BOOL
48 : eq(41, 7) : BOOL
49 : eq(41, 25) : BOOL
50 : eq(41, 28) : BOOL
51 : ite(50, 11, 30) : BV:8
52 : ite(49, 27, 51) : BV:8
53 : ite(48, 11, 52) : BV:8
54 : ite(47, 11, 53) : BV:8
55 : ite(46, 21, 54) : BV:8
56 : ite(45, 11, 55) : BV:8
57 : ite(44, 11, 56) : BV:8
58 : ite(43, 14, 57) : BV:8
59 : ite(42, 11, 58) : BV:8
60 : 1 { 0x1 +1.11e129 } : BV:32
61 : bvadd(60, 6, 7) : BV:32
62 : eq(61, 9) : BOOL
63 : eq(61, 12) : BOOL
64 : eq(61, 15) : BOOL
65 : eq(61, 17) : BOOL
66 : eq(61, 19) : BOOL
67 : eq(61, 22) : BOOL
68 : eq(61, 7) : BOOL
69 : eq(61, 25) : BOOL
70 : eq(61, 28) : BOOL
71 : ite(70, 11, 30) : BV:8
72 : ite(69, 27, 71) : BV:8
73 : ite(68, 11, 72) : BV:8
74 : ite(67, 11, 73) : BV:8
75 : ite(66, 21, 74) : BV:8
76 : ite(65, 11, 75) : BV:8
77 : ite(64, 11, 76) : BV:8
78 : ite(63, 14, 77) : BV:8
79 : ite(62, 11, 78) : BV:8
80 : bvadd(6, 7) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 15) : BOOL
84 : eq(80, 17) : BOOL
85 : eq(80, 19) : BOOL
86 : eq(80, 22) : BOOL
87 : eq(80, 7) : BOOL
88 : eq(80, 25) : BOOL
89 : eq(80, 28) : BOOL
90 : ite(89, 11, 30) : BV:8
91 : ite(88, 27, 90) : BV:8
92 : ite(87, 11, 91) : BV:8
93 : ite(86, 11, 92) : BV:8
94 : ite(85, 21, 93) : BV:8
95 : ite(84, 11, 94) : BV:8
96 : ite(83, 11, 95) : BV:8
97 : ite(82, 14, 96) : BV:8
98 : ite(81, 11, 97) : BV:8
99 : bvconcat(39, 59, 79, 98) : BV:32
100 : ite(3, 2, 99) : BV:32
101 : lambda(1, 100) : FUNCTION[BV:32 -> BV:32]
102 : sym_const(101) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 308041456 { 0x125c56f0 +1.72140312e165 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4022405448 { 0xefc10948 -272561848 -1.50809574e96 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 4022405451 { 0xefc1094b -272561845 -1.50809609e96 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1671225708 { 0x639ce16c +1.22562932e72 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1671225711 { 0x639ce16f +1.22562968e72 } : BV:32
=counter_example.random_seed
3002094805
=counter_example_end
=global nodece 6 num_edges_traversed 1
=global nodece 6 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 7
=global nodece 7 nodece z3v487.ce84.num_edges_traversed1
=global nodece 7 nodece_path
=global nodece 7 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 7 nodece_cached_counterexample
=counter_example_begin z3v487.ce84 d9d255461840858d23dca56c9edb3c13
=input.spec-%var-x-1
1 : Lambda181 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2 { 0x2 +1.23e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda182 : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 17) : BV:32
21 : bvadd(18, 20, 2) : BV:32
22 : 211200 { 0x33900 +1.2517700e129 } : BV:32
23 : eq(21, 22) : BOOL
24 : 2 { 0x2 } : BV:8
25 : 0 { 0x0 } : BV:8
26 : ite(23, 24, 25) : BV:8
27 : bvadd(8, 20, 2) : BV:32
28 : eq(27, 22) : BOOL
29 : ite(28, 24, 25) : BV:8
30 : bvadd(4, 20, 2) : BV:32
31 : eq(30, 22) : BOOL
32 : ite(31, 24, 25) : BV:8
33 : bvadd(20, 2) : BV:32
34 : eq(33, 22) : BOOL
35 : ite(34, 24, 25) : BV:8
36 : bvconcat(26, 29, 32, 35) : BV:32
37 : lambda(17, 36) : FUNCTION[BV:32 -> BV:32]
38 : map(16, 37) : MAP[BV:32 -> BV:32]
39 : sym_const(38) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L3%6%bbentry
1 : Lambda181 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2 { 0x2 +1.23e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda182 : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 17) : BV:32
21 : bvadd(18, 20, 2) : BV:32
22 : 211200 { 0x33900 +1.2517700e129 } : BV:32
23 : eq(21, 22) : BOOL
24 : 2 { 0x2 } : BV:8
25 : 0 { 0x0 } : BV:8
26 : ite(23, 24, 25) : BV:8
27 : bvadd(8, 20, 2) : BV:32
28 : eq(27, 22) : BOOL
29 : ite(28, 24, 25) : BV:8
30 : bvadd(4, 20, 2) : BV:32
31 : eq(30, 22) : BOOL
32 : ite(31, 24, 25) : BV:8
33 : bvadd(20, 2) : BV:32
34 : eq(33, 22) : BOOL
35 : ite(34, 24, 25) : BV:8
36 : bvconcat(26, 29, 32, 35) : BV:32
37 : lambda(17, 36) : FUNCTION[BV:32 -> BV:32]
38 : map(16, 37) : MAP[BV:32 -> BV:32]
39 : sym_const(38) : MAP[BV:32 -> BV:32]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 211199 ] -> 0, [ 211200; 211200 ] -> 2, [ 211201; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 211199 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 211200; 211203 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 211204; 805200387 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 805200388; 805200391 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 805200392; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 805200388 { 0x2ffe6204 +1.98736619e224 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 211200 { 0x33900 +1.2517700e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 914012779 { 0x367aba6b +1.95881402e237 } : COUNT
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-0.L3%6%bbentry.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%6%bbentry.1.1
1 : Lambda164 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(3, 1) : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : bvadd(2, 4, 5) : BV:32
7 : 211200 { 0x33900 +1.2517700e129 } : BV:32
8 : eq(6, 7) : BOOL
9 : 2 { 0x2 } : BV:8
10 : 0 { 0x0 } : BV:8
11 : ite(8, 9, 10) : BV:8
12 : 2 { 0x2 +1.23e129 } : BV:32
13 : bvadd(12, 4, 5) : BV:32
14 : eq(13, 7) : BOOL
15 : ite(14, 9, 10) : BV:8
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : bvadd(16, 4, 5) : BV:32
18 : eq(17, 7) : BOOL
19 : ite(18, 9, 10) : BV:8
20 : bvadd(4, 5) : BV:32
21 : eq(20, 7) : BOOL
22 : ite(21, 9, 10) : BV:8
23 : bvconcat(11, 15, 19, 22) : BV:32
24 : lambda(1, 23) : FUNCTION[BV:32 -> BV:32]
25 : sym_const(24) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : Lambda165 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(3, 1) : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : bvadd(2, 4, 5) : BV:32
7 : 211200 { 0x33900 +1.2517700e129 } : BV:32
8 : eq(6, 7) : BOOL
9 : 2 { 0x2 } : BV:8
10 : 0 { 0x0 } : BV:8
11 : ite(8, 9, 10) : BV:8
12 : 2 { 0x2 +1.23e129 } : BV:32
13 : bvadd(12, 4, 5) : BV:32
14 : eq(13, 7) : BOOL
15 : ite(14, 9, 10) : BV:8
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : bvadd(16, 4, 5) : BV:32
18 : eq(17, 7) : BOOL
19 : ite(18, 9, 10) : BV:8
20 : bvadd(4, 5) : BV:32
21 : eq(20, 7) : BOOL
22 : ite(21, 9, 10) : BV:8
23 : bvconcat(11, 15, 19, 22) : BV:32
24 : lambda(1, 23) : FUNCTION[BV:32 -> BV:32]
25 : sym_const(24) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 914012779 { 0x367aba6b +1.95881402e237 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 211200 { 0x33900 +1.2517700e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 211203 { 0x33903 +1.2517735e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 805200388 { 0x2ffe6204 +1.98736619e224 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 805200391 { 0x2ffe6207 +1.98736655e224 } : BV:32
=counter_example.random_seed
4268463455
=counter_example_end
=global nodece 7 num_edges_traversed 1
=global nodece 7 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 8
=global nodece 8 nodece z3.ce103.num_edges_traversed1
=global nodece 8 nodece_path
=global nodece 8 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 8 nodece_cached_counterexample
=counter_example_begin z3.ce103 f545a6383faade9f26ca704054c3c3
=input.spec-%var-x-1
1 : Lambda207 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda208 : BV:32
17 : eq(16, 2) : BOOL
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 16) : BV:32
21 : 1761587968 { 0x68ffb300 +1.99765014e82 } : BV:32
22 : bvadd(18, 20, 21) : BV:32
23 : 3047749397 { 0xb5a8f715 -1247217899 -1.32004034e236 } : BV:32
24 : eq(22, 23) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 1863589430 { 0x6f141e36 +1.15717196e95 } : BV:32
27 : eq(22, 26) : BOOL
28 : 255 { 0xff -1 } : BV:8
29 : 3047749396 { 0xb5a8f714 -1247217900 -1.32004022e236 } : BV:32
30 : eq(22, 29) : BOOL
31 : 1 { 0x1 } : BV:8
32 : 1761587971 { 0x68ffb303 +1.99765050e82 } : BV:32
33 : eq(22, 32) : BOOL
34 : 3047749399 { 0xb5a8f717 -1247217897 -1.32004058e236 } : BV:32
35 : eq(22, 34) : BOOL
36 : 1761587969 { 0x68ffb301 +1.99765026e82 } : BV:32
37 : eq(22, 36) : BOOL
38 : 3047749398 { 0xb5a8f716 -1247217898 -1.32004046e236 } : BV:32
39 : eq(22, 38) : BOOL
40 : 1761587970 { 0x68ffb302 +1.99765038e82 } : BV:32
41 : eq(22, 40) : BOOL
42 : eq(22, 21) : BOOL
43 : 1863589431 { 0x6f141e37 +1.15717208e95 } : BV:32
44 : eq(22, 43) : BOOL
45 : 104 { 0x68 } : BV:8
46 : 1863589428 { 0x6f141e34 +1.15717172e95 } : BV:32
47 : eq(22, 46) : BOOL
48 : 179 { 0xb3 -77 } : BV:8
49 : ite(47, 25, 48) : BV:8
50 : ite(44, 45, 49) : BV:8
51 : ite(42, 25, 50) : BV:8
52 : ite(41, 25, 51) : BV:8
53 : ite(39, 25, 52) : BV:8
54 : ite(37, 25, 53) : BV:8
55 : ite(35, 25, 54) : BV:8
56 : ite(33, 25, 55) : BV:8
57 : ite(30, 31, 56) : BV:8
58 : ite(27, 28, 57) : BV:8
59 : ite(24, 25, 58) : BV:8
60 : 2 { 0x2 +1.23e129 } : BV:32
61 : bvadd(60, 20, 21) : BV:32
62 : eq(61, 23) : BOOL
63 : eq(61, 26) : BOOL
64 : eq(61, 29) : BOOL
65 : eq(61, 32) : BOOL
66 : eq(61, 34) : BOOL
67 : eq(61, 36) : BOOL
68 : eq(61, 38) : BOOL
69 : eq(61, 40) : BOOL
70 : eq(61, 21) : BOOL
71 : eq(61, 43) : BOOL
72 : eq(61, 46) : BOOL
73 : ite(72, 25, 48) : BV:8
74 : ite(71, 45, 73) : BV:8
75 : ite(70, 25, 74) : BV:8
76 : ite(69, 25, 75) : BV:8
77 : ite(68, 25, 76) : BV:8
78 : ite(67, 25, 77) : BV:8
79 : ite(66, 25, 78) : BV:8
80 : ite(65, 25, 79) : BV:8
81 : ite(64, 31, 80) : BV:8
82 : ite(63, 28, 81) : BV:8
83 : ite(62, 25, 82) : BV:8
84 : bvadd(7, 20, 21) : BV:32
85 : eq(84, 23) : BOOL
86 : eq(84, 26) : BOOL
87 : eq(84, 29) : BOOL
88 : eq(84, 32) : BOOL
89 : eq(84, 34) : BOOL
90 : eq(84, 36) : BOOL
91 : eq(84, 38) : BOOL
92 : eq(84, 40) : BOOL
93 : eq(84, 21) : BOOL
94 : eq(84, 43) : BOOL
95 : eq(84, 46) : BOOL
96 : ite(95, 25, 48) : BV:8
97 : ite(94, 45, 96) : BV:8
98 : ite(93, 25, 97) : BV:8
99 : ite(92, 25, 98) : BV:8
100 : ite(91, 25, 99) : BV:8
101 : ite(90, 25, 100) : BV:8
102 : ite(89, 25, 101) : BV:8
103 : ite(88, 25, 102) : BV:8
104 : ite(87, 31, 103) : BV:8
105 : ite(86, 28, 104) : BV:8
106 : ite(85, 25, 105) : BV:8
107 : bvadd(20, 21) : BV:32
108 : eq(107, 23) : BOOL
109 : eq(107, 26) : BOOL
110 : eq(107, 29) : BOOL
111 : eq(107, 32) : BOOL
112 : eq(107, 34) : BOOL
113 : eq(107, 36) : BOOL
114 : eq(107, 38) : BOOL
115 : eq(107, 40) : BOOL
116 : eq(107, 21) : BOOL
117 : eq(107, 43) : BOOL
118 : eq(107, 46) : BOOL
119 : ite(118, 25, 48) : BV:8
120 : ite(117, 45, 119) : BV:8
121 : ite(116, 25, 120) : BV:8
122 : ite(115, 25, 121) : BV:8
123 : ite(114, 25, 122) : BV:8
124 : ite(113, 25, 123) : BV:8
125 : ite(112, 25, 124) : BV:8
126 : ite(111, 25, 125) : BV:8
127 : ite(110, 31, 126) : BV:8
128 : ite(109, 28, 127) : BV:8
129 : ite(108, 25, 128) : BV:8
130 : bvconcat(59, 83, 106, 129) : BV:32
131 : ite(17, 2, 130) : BV:32
132 : lambda(16, 131) : FUNCTION[BV:32 -> BV:32]
133 : map(15, 132) : MAP[BV:32 -> BV:32]
134 : sym_const(133) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L3%6%bbentry
1 : Lambda207 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda208 : BV:32
17 : eq(16, 2) : BOOL
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 16) : BV:32
21 : 1761587968 { 0x68ffb300 +1.99765014e82 } : BV:32
22 : bvadd(18, 20, 21) : BV:32
23 : 3047749397 { 0xb5a8f715 -1247217899 -1.32004034e236 } : BV:32
24 : eq(22, 23) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 1863589430 { 0x6f141e36 +1.15717196e95 } : BV:32
27 : eq(22, 26) : BOOL
28 : 255 { 0xff -1 } : BV:8
29 : 3047749396 { 0xb5a8f714 -1247217900 -1.32004022e236 } : BV:32
30 : eq(22, 29) : BOOL
31 : 1 { 0x1 } : BV:8
32 : 1761587971 { 0x68ffb303 +1.99765050e82 } : BV:32
33 : eq(22, 32) : BOOL
34 : 3047749399 { 0xb5a8f717 -1247217897 -1.32004058e236 } : BV:32
35 : eq(22, 34) : BOOL
36 : 1761587969 { 0x68ffb301 +1.99765026e82 } : BV:32
37 : eq(22, 36) : BOOL
38 : 3047749398 { 0xb5a8f716 -1247217898 -1.32004046e236 } : BV:32
39 : eq(22, 38) : BOOL
40 : 1761587970 { 0x68ffb302 +1.99765038e82 } : BV:32
41 : eq(22, 40) : BOOL
42 : eq(22, 21) : BOOL
43 : 1863589431 { 0x6f141e37 +1.15717208e95 } : BV:32
44 : eq(22, 43) : BOOL
45 : 104 { 0x68 } : BV:8
46 : 1863589428 { 0x6f141e34 +1.15717172e95 } : BV:32
47 : eq(22, 46) : BOOL
48 : 179 { 0xb3 -77 } : BV:8
49 : ite(47, 25, 48) : BV:8
50 : ite(44, 45, 49) : BV:8
51 : ite(42, 25, 50) : BV:8
52 : ite(41, 25, 51) : BV:8
53 : ite(39, 25, 52) : BV:8
54 : ite(37, 25, 53) : BV:8
55 : ite(35, 25, 54) : BV:8
56 : ite(33, 25, 55) : BV:8
57 : ite(30, 31, 56) : BV:8
58 : ite(27, 28, 57) : BV:8
59 : ite(24, 25, 58) : BV:8
60 : 2 { 0x2 +1.23e129 } : BV:32
61 : bvadd(60, 20, 21) : BV:32
62 : eq(61, 23) : BOOL
63 : eq(61, 26) : BOOL
64 : eq(61, 29) : BOOL
65 : eq(61, 32) : BOOL
66 : eq(61, 34) : BOOL
67 : eq(61, 36) : BOOL
68 : eq(61, 38) : BOOL
69 : eq(61, 40) : BOOL
70 : eq(61, 21) : BOOL
71 : eq(61, 43) : BOOL
72 : eq(61, 46) : BOOL
73 : ite(72, 25, 48) : BV:8
74 : ite(71, 45, 73) : BV:8
75 : ite(70, 25, 74) : BV:8
76 : ite(69, 25, 75) : BV:8
77 : ite(68, 25, 76) : BV:8
78 : ite(67, 25, 77) : BV:8
79 : ite(66, 25, 78) : BV:8
80 : ite(65, 25, 79) : BV:8
81 : ite(64, 31, 80) : BV:8
82 : ite(63, 28, 81) : BV:8
83 : ite(62, 25, 82) : BV:8
84 : bvadd(7, 20, 21) : BV:32
85 : eq(84, 23) : BOOL
86 : eq(84, 26) : BOOL
87 : eq(84, 29) : BOOL
88 : eq(84, 32) : BOOL
89 : eq(84, 34) : BOOL
90 : eq(84, 36) : BOOL
91 : eq(84, 38) : BOOL
92 : eq(84, 40) : BOOL
93 : eq(84, 21) : BOOL
94 : eq(84, 43) : BOOL
95 : eq(84, 46) : BOOL
96 : ite(95, 25, 48) : BV:8
97 : ite(94, 45, 96) : BV:8
98 : ite(93, 25, 97) : BV:8
99 : ite(92, 25, 98) : BV:8
100 : ite(91, 25, 99) : BV:8
101 : ite(90, 25, 100) : BV:8
102 : ite(89, 25, 101) : BV:8
103 : ite(88, 25, 102) : BV:8
104 : ite(87, 31, 103) : BV:8
105 : ite(86, 28, 104) : BV:8
106 : ite(85, 25, 105) : BV:8
107 : bvadd(20, 21) : BV:32
108 : eq(107, 23) : BOOL
109 : eq(107, 26) : BOOL
110 : eq(107, 29) : BOOL
111 : eq(107, 32) : BOOL
112 : eq(107, 34) : BOOL
113 : eq(107, 36) : BOOL
114 : eq(107, 38) : BOOL
115 : eq(107, 40) : BOOL
116 : eq(107, 21) : BOOL
117 : eq(107, 43) : BOOL
118 : eq(107, 46) : BOOL
119 : ite(118, 25, 48) : BV:8
120 : ite(117, 45, 119) : BV:8
121 : ite(116, 25, 120) : BV:8
122 : ite(115, 25, 121) : BV:8
123 : ite(114, 25, 122) : BV:8
124 : ite(113, 25, 123) : BV:8
125 : ite(112, 25, 124) : BV:8
126 : ite(111, 25, 125) : BV:8
127 : ite(110, 31, 126) : BV:8
128 : ite(109, 28, 127) : BV:8
129 : ite(108, 25, 128) : BV:8
130 : bvconcat(59, 83, 106, 129) : BV:32
131 : ite(17, 2, 130) : BV:32
132 : lambda(16, 131) : FUNCTION[BV:32 -> BV:32]
133 : map(15, 132) : MAP[BV:32 -> BV:32]
134 : sym_const(133) : MAP[BV:32 -> BV:32]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 1761587968 { 0x68ffb300 +1.99765014e82 } : BV:32
=input.dst.llvm-%n
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1761587967 ] -> 179, [ 1761587968; 1761587971 ] -> 0, [ 1761587972; 1863589427 ] -> 179, [ 1863589428; 1863589428 ] -> 0, [ 1863589429; 1863589429 ] -> 179, [ 1863589430; 1863589430 ] -> 255, [ 1863589431; 1863589431 ] -> 104, [ 1863589432; 3047749395 ] -> 179, [ 3047749396; 3047749396 ] -> 1, [ 3047749397; 3047749399 ] -> 0, [ 3047749400; 4294967295 ] -> 179, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1863589427 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1863589428; 1863589431 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1863589432; 3047749395 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3047749396; 3047749399 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3047749400; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1863589428 { 0x6f141e34 +1.15717172e95 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3047749396 { 0xb5a8f714 -1247217900 -1.32004022e236 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1935754076 { 0x7361435c +1.75986814e103 } : COUNT
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-0.L3%6%bbentry.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%6%bbentry.1.1
1 : Lambda195 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 1761587968 { 0x68ffb300 +1.99765014e82 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 3047749397 { 0xb5a8f715 -1247217899 -1.32004034e236 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 1863589430 { 0x6f141e36 +1.15717196e95 } : BV:32
13 : eq(8, 12) : BOOL
14 : 255 { 0xff -1 } : BV:8
15 : 3047749396 { 0xb5a8f714 -1247217900 -1.32004022e236 } : BV:32
16 : eq(8, 15) : BOOL
17 : 1 { 0x1 } : BV:8
18 : 1761587971 { 0x68ffb303 +1.99765050e82 } : BV:32
19 : eq(8, 18) : BOOL
20 : 3047749399 { 0xb5a8f717 -1247217897 -1.32004058e236 } : BV:32
21 : eq(8, 20) : BOOL
22 : 1761587969 { 0x68ffb301 +1.99765026e82 } : BV:32
23 : eq(8, 22) : BOOL
24 : 3047749398 { 0xb5a8f716 -1247217898 -1.32004046e236 } : BV:32
25 : eq(8, 24) : BOOL
26 : 1761587970 { 0x68ffb302 +1.99765038e82 } : BV:32
27 : eq(8, 26) : BOOL
28 : eq(8, 7) : BOOL
29 : 1863589431 { 0x6f141e37 +1.15717208e95 } : BV:32
30 : eq(8, 29) : BOOL
31 : 104 { 0x68 } : BV:8
32 : 1863589428 { 0x6f141e34 +1.15717172e95 } : BV:32
33 : eq(8, 32) : BOOL
34 : 179 { 0xb3 -77 } : BV:8
35 : ite(33, 11, 34) : BV:8
36 : ite(30, 31, 35) : BV:8
37 : ite(28, 11, 36) : BV:8
38 : ite(27, 11, 37) : BV:8
39 : ite(25, 11, 38) : BV:8
40 : ite(23, 11, 39) : BV:8
41 : ite(21, 11, 40) : BV:8
42 : ite(19, 11, 41) : BV:8
43 : ite(16, 17, 42) : BV:8
44 : ite(13, 14, 43) : BV:8
45 : ite(10, 11, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 6, 7) : BV:32
48 : eq(47, 9) : BOOL
49 : eq(47, 12) : BOOL
50 : eq(47, 15) : BOOL
51 : eq(47, 18) : BOOL
52 : eq(47, 20) : BOOL
53 : eq(47, 22) : BOOL
54 : eq(47, 24) : BOOL
55 : eq(47, 26) : BOOL
56 : eq(47, 7) : BOOL
57 : eq(47, 29) : BOOL
58 : eq(47, 32) : BOOL
59 : ite(58, 11, 34) : BV:8
60 : ite(57, 31, 59) : BV:8
61 : ite(56, 11, 60) : BV:8
62 : ite(55, 11, 61) : BV:8
63 : ite(54, 11, 62) : BV:8
64 : ite(53, 11, 63) : BV:8
65 : ite(52, 11, 64) : BV:8
66 : ite(51, 11, 65) : BV:8
67 : ite(50, 17, 66) : BV:8
68 : ite(49, 14, 67) : BV:8
69 : ite(48, 11, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 6, 7) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 15) : BOOL
75 : eq(71, 18) : BOOL
76 : eq(71, 20) : BOOL
77 : eq(71, 22) : BOOL
78 : eq(71, 24) : BOOL
79 : eq(71, 26) : BOOL
80 : eq(71, 7) : BOOL
81 : eq(71, 29) : BOOL
82 : eq(71, 32) : BOOL
83 : ite(82, 11, 34) : BV:8
84 : ite(81, 31, 83) : BV:8
85 : ite(80, 11, 84) : BV:8
86 : ite(79, 11, 85) : BV:8
87 : ite(78, 11, 86) : BV:8
88 : ite(77, 11, 87) : BV:8
89 : ite(76, 11, 88) : BV:8
90 : ite(75, 11, 89) : BV:8
91 : ite(74, 17, 90) : BV:8
92 : ite(73, 14, 91) : BV:8
93 : ite(72, 11, 92) : BV:8
94 : bvadd(6, 7) : BV:32
95 : eq(94, 9) : BOOL
96 : eq(94, 12) : BOOL
97 : eq(94, 15) : BOOL
98 : eq(94, 18) : BOOL
99 : eq(94, 20) : BOOL
100 : eq(94, 22) : BOOL
101 : eq(94, 24) : BOOL
102 : eq(94, 26) : BOOL
103 : eq(94, 7) : BOOL
104 : eq(94, 29) : BOOL
105 : eq(94, 32) : BOOL
106 : ite(105, 11, 34) : BV:8
107 : ite(104, 31, 106) : BV:8
108 : ite(103, 11, 107) : BV:8
109 : ite(102, 11, 108) : BV:8
110 : ite(101, 11, 109) : BV:8
111 : ite(100, 11, 110) : BV:8
112 : ite(99, 11, 111) : BV:8
113 : ite(98, 11, 112) : BV:8
114 : ite(97, 17, 113) : BV:8
115 : ite(96, 14, 114) : BV:8
116 : ite(95, 11, 115) : BV:8
117 : bvconcat(45, 69, 93, 116) : BV:32
118 : ite(3, 2, 117) : BV:32
119 : ite(3, 2, 118) : BV:32
120 : lambda(1, 119) : FUNCTION[BV:32 -> BV:32]
121 : sym_const(120) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : Lambda196 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 1761587968 { 0x68ffb300 +1.99765014e82 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 3047749397 { 0xb5a8f715 -1247217899 -1.32004034e236 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 1863589430 { 0x6f141e36 +1.15717196e95 } : BV:32
13 : eq(8, 12) : BOOL
14 : 255 { 0xff -1 } : BV:8
15 : 3047749396 { 0xb5a8f714 -1247217900 -1.32004022e236 } : BV:32
16 : eq(8, 15) : BOOL
17 : 1 { 0x1 } : BV:8
18 : 1761587971 { 0x68ffb303 +1.99765050e82 } : BV:32
19 : eq(8, 18) : BOOL
20 : 3047749399 { 0xb5a8f717 -1247217897 -1.32004058e236 } : BV:32
21 : eq(8, 20) : BOOL
22 : 1761587969 { 0x68ffb301 +1.99765026e82 } : BV:32
23 : eq(8, 22) : BOOL
24 : 3047749398 { 0xb5a8f716 -1247217898 -1.32004046e236 } : BV:32
25 : eq(8, 24) : BOOL
26 : 1761587970 { 0x68ffb302 +1.99765038e82 } : BV:32
27 : eq(8, 26) : BOOL
28 : eq(8, 7) : BOOL
29 : 1863589431 { 0x6f141e37 +1.15717208e95 } : BV:32
30 : eq(8, 29) : BOOL
31 : 104 { 0x68 } : BV:8
32 : 1863589428 { 0x6f141e34 +1.15717172e95 } : BV:32
33 : eq(8, 32) : BOOL
34 : 179 { 0xb3 -77 } : BV:8
35 : ite(33, 11, 34) : BV:8
36 : ite(30, 31, 35) : BV:8
37 : ite(28, 11, 36) : BV:8
38 : ite(27, 11, 37) : BV:8
39 : ite(25, 11, 38) : BV:8
40 : ite(23, 11, 39) : BV:8
41 : ite(21, 11, 40) : BV:8
42 : ite(19, 11, 41) : BV:8
43 : ite(16, 17, 42) : BV:8
44 : ite(13, 14, 43) : BV:8
45 : ite(10, 11, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 6, 7) : BV:32
48 : eq(47, 9) : BOOL
49 : eq(47, 12) : BOOL
50 : eq(47, 15) : BOOL
51 : eq(47, 18) : BOOL
52 : eq(47, 20) : BOOL
53 : eq(47, 22) : BOOL
54 : eq(47, 24) : BOOL
55 : eq(47, 26) : BOOL
56 : eq(47, 7) : BOOL
57 : eq(47, 29) : BOOL
58 : eq(47, 32) : BOOL
59 : ite(58, 11, 34) : BV:8
60 : ite(57, 31, 59) : BV:8
61 : ite(56, 11, 60) : BV:8
62 : ite(55, 11, 61) : BV:8
63 : ite(54, 11, 62) : BV:8
64 : ite(53, 11, 63) : BV:8
65 : ite(52, 11, 64) : BV:8
66 : ite(51, 11, 65) : BV:8
67 : ite(50, 17, 66) : BV:8
68 : ite(49, 14, 67) : BV:8
69 : ite(48, 11, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 6, 7) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 15) : BOOL
75 : eq(71, 18) : BOOL
76 : eq(71, 20) : BOOL
77 : eq(71, 22) : BOOL
78 : eq(71, 24) : BOOL
79 : eq(71, 26) : BOOL
80 : eq(71, 7) : BOOL
81 : eq(71, 29) : BOOL
82 : eq(71, 32) : BOOL
83 : ite(82, 11, 34) : BV:8
84 : ite(81, 31, 83) : BV:8
85 : ite(80, 11, 84) : BV:8
86 : ite(79, 11, 85) : BV:8
87 : ite(78, 11, 86) : BV:8
88 : ite(77, 11, 87) : BV:8
89 : ite(76, 11, 88) : BV:8
90 : ite(75, 11, 89) : BV:8
91 : ite(74, 17, 90) : BV:8
92 : ite(73, 14, 91) : BV:8
93 : ite(72, 11, 92) : BV:8
94 : bvadd(6, 7) : BV:32
95 : eq(94, 9) : BOOL
96 : eq(94, 12) : BOOL
97 : eq(94, 15) : BOOL
98 : eq(94, 18) : BOOL
99 : eq(94, 20) : BOOL
100 : eq(94, 22) : BOOL
101 : eq(94, 24) : BOOL
102 : eq(94, 26) : BOOL
103 : eq(94, 7) : BOOL
104 : eq(94, 29) : BOOL
105 : eq(94, 32) : BOOL
106 : ite(105, 11, 34) : BV:8
107 : ite(104, 31, 106) : BV:8
108 : ite(103, 11, 107) : BV:8
109 : ite(102, 11, 108) : BV:8
110 : ite(101, 11, 109) : BV:8
111 : ite(100, 11, 110) : BV:8
112 : ite(99, 11, 111) : BV:8
113 : ite(98, 11, 112) : BV:8
114 : ite(97, 17, 113) : BV:8
115 : ite(96, 14, 114) : BV:8
116 : ite(95, 11, 115) : BV:8
117 : bvconcat(45, 69, 93, 116) : BV:32
118 : ite(3, 2, 117) : BV:32
119 : lambda(1, 118) : FUNCTION[BV:32 -> BV:32]
120 : sym_const(119) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1935754076 { 0x7361435c +1.75986814e103 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3047749396 { 0xb5a8f714 -1247217900 -1.32004022e236 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3047749399 { 0xb5a8f717 -1247217897 -1.32004058e236 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1863589428 { 0x6f141e34 +1.15717172e95 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1863589431 { 0x6f141e37 +1.15717208e95 } : BV:32
=counter_example.random_seed
3277587493
=counter_example_end
=global nodece 8 num_edges_traversed 1
=global nodece 8 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 9
=global nodece 9 nodece z3.ce123.num_edges_traversed1
=global nodece 9 nodece_path
=global nodece 9 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 9 nodece_cached_counterexample
=counter_example_begin z3.ce123 e25431ab2cb1b3ff20b5d8f7f144a61
=input.spec-%var-x-1
1 : Lambda243 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 94062 { 0x16f6e +1.1121306e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 94063 { 0x16f6f +1.1121318e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda244 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3857542916 { 0xe5ed6f04 -437424380 -1.85495042e76 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 3857542917 { 0xe5ed6f05 -437424379 -1.85495054e76 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 4076267994 { 0xf2f6e9da -218699302 -1.92901158e102 } : BV:32
28 : eq(23, 27) : BOOL
29 : 237 { 0xed -19 } : BV:8
30 : 3857542919 { 0xe5ed6f07 -437424377 -1.85495078e76 } : BV:32
31 : eq(23, 30) : BOOL
32 : 3407283775 { 0xcb17063f -887683521 -1.17987811e23 } : BV:32
33 : eq(23, 32) : BOOL
34 : 3407283774 { 0xcb17063e -887683522 -1.17987799e23 } : BV:32
35 : eq(23, 34) : BOOL
36 : 1 { 0x1 } : BV:8
37 : 3857542918 { 0xe5ed6f06 -437424378 -1.85495066e76 } : BV:32
38 : eq(23, 37) : BOOL
39 : eq(23, 22) : BOOL
40 : 4076267995 { 0xf2f6e9db -218699301 -1.92901170e102 } : BV:32
41 : eq(23, 40) : BOOL
42 : 229 { 0xe5 -27 } : BV:8
43 : 4076267992 { 0xf2f6e9d8 -218699304 -1.92901134e102 } : BV:32
44 : eq(23, 43) : BOOL
45 : 4 { 0x4 } : BV:8
46 : 111 { 0x6f } : BV:8
47 : ite(44, 45, 46) : BV:8
48 : ite(41, 42, 47) : BV:8
49 : ite(39, 26, 48) : BV:8
50 : ite(38, 26, 49) : BV:8
51 : ite(35, 36, 50) : BV:8
52 : ite(33, 26, 51) : BV:8
53 : ite(31, 26, 52) : BV:8
54 : ite(28, 29, 53) : BV:8
55 : ite(25, 26, 54) : BV:8
56 : 2 { 0x2 +1.23e129 } : BV:32
57 : bvadd(56, 21, 22) : BV:32
58 : eq(57, 24) : BOOL
59 : eq(57, 27) : BOOL
60 : eq(57, 30) : BOOL
61 : eq(57, 32) : BOOL
62 : eq(57, 34) : BOOL
63 : eq(57, 37) : BOOL
64 : eq(57, 22) : BOOL
65 : eq(57, 40) : BOOL
66 : eq(57, 43) : BOOL
67 : ite(66, 45, 46) : BV:8
68 : ite(65, 42, 67) : BV:8
69 : ite(64, 26, 68) : BV:8
70 : ite(63, 26, 69) : BV:8
71 : ite(62, 36, 70) : BV:8
72 : ite(61, 26, 71) : BV:8
73 : ite(60, 26, 72) : BV:8
74 : ite(59, 29, 73) : BV:8
75 : ite(58, 26, 74) : BV:8
76 : 1 { 0x1 +1.11e129 } : BV:32
77 : bvadd(76, 21, 22) : BV:32
78 : eq(77, 24) : BOOL
79 : eq(77, 27) : BOOL
80 : eq(77, 30) : BOOL
81 : eq(77, 32) : BOOL
82 : eq(77, 34) : BOOL
83 : eq(77, 37) : BOOL
84 : eq(77, 22) : BOOL
85 : eq(77, 40) : BOOL
86 : eq(77, 43) : BOOL
87 : ite(86, 45, 46) : BV:8
88 : ite(85, 42, 87) : BV:8
89 : ite(84, 26, 88) : BV:8
90 : ite(83, 26, 89) : BV:8
91 : ite(82, 36, 90) : BV:8
92 : ite(81, 26, 91) : BV:8
93 : ite(80, 26, 92) : BV:8
94 : ite(79, 29, 93) : BV:8
95 : ite(78, 26, 94) : BV:8
96 : bvadd(21, 22) : BV:32
97 : eq(96, 24) : BOOL
98 : eq(96, 27) : BOOL
99 : eq(96, 30) : BOOL
100 : eq(96, 32) : BOOL
101 : eq(96, 34) : BOOL
102 : eq(96, 37) : BOOL
103 : eq(96, 22) : BOOL
104 : eq(96, 40) : BOOL
105 : eq(96, 43) : BOOL
106 : ite(105, 45, 46) : BV:8
107 : ite(104, 42, 106) : BV:8
108 : ite(103, 26, 107) : BV:8
109 : ite(102, 26, 108) : BV:8
110 : ite(101, 36, 109) : BV:8
111 : ite(100, 26, 110) : BV:8
112 : ite(99, 26, 111) : BV:8
113 : ite(98, 29, 112) : BV:8
114 : ite(97, 26, 113) : BV:8
115 : bvconcat(55, 75, 95, 114) : BV:32
116 : ite(18, 2, 115) : BV:32
117 : lambda(17, 116) : FUNCTION[BV:32 -> BV:32]
118 : map(16, 117) : MAP[BV:32 -> BV:32]
119 : sym_const(118) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L3%6%bbentry
1 : Lambda243 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 94062 { 0x16f6e +1.1121306e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 94063 { 0x16f6f +1.1121318e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda244 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3857542916 { 0xe5ed6f04 -437424380 -1.85495042e76 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 3857542917 { 0xe5ed6f05 -437424379 -1.85495054e76 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 4076267994 { 0xf2f6e9da -218699302 -1.92901158e102 } : BV:32
28 : eq(23, 27) : BOOL
29 : 237 { 0xed -19 } : BV:8
30 : 3857542919 { 0xe5ed6f07 -437424377 -1.85495078e76 } : BV:32
31 : eq(23, 30) : BOOL
32 : 3407283775 { 0xcb17063f -887683521 -1.17987811e23 } : BV:32
33 : eq(23, 32) : BOOL
34 : 3407283774 { 0xcb17063e -887683522 -1.17987799e23 } : BV:32
35 : eq(23, 34) : BOOL
36 : 1 { 0x1 } : BV:8
37 : 3857542918 { 0xe5ed6f06 -437424378 -1.85495066e76 } : BV:32
38 : eq(23, 37) : BOOL
39 : eq(23, 22) : BOOL
40 : 4076267995 { 0xf2f6e9db -218699301 -1.92901170e102 } : BV:32
41 : eq(23, 40) : BOOL
42 : 229 { 0xe5 -27 } : BV:8
43 : 4076267992 { 0xf2f6e9d8 -218699304 -1.92901134e102 } : BV:32
44 : eq(23, 43) : BOOL
45 : 4 { 0x4 } : BV:8
46 : 111 { 0x6f } : BV:8
47 : ite(44, 45, 46) : BV:8
48 : ite(41, 42, 47) : BV:8
49 : ite(39, 26, 48) : BV:8
50 : ite(38, 26, 49) : BV:8
51 : ite(35, 36, 50) : BV:8
52 : ite(33, 26, 51) : BV:8
53 : ite(31, 26, 52) : BV:8
54 : ite(28, 29, 53) : BV:8
55 : ite(25, 26, 54) : BV:8
56 : 2 { 0x2 +1.23e129 } : BV:32
57 : bvadd(56, 21, 22) : BV:32
58 : eq(57, 24) : BOOL
59 : eq(57, 27) : BOOL
60 : eq(57, 30) : BOOL
61 : eq(57, 32) : BOOL
62 : eq(57, 34) : BOOL
63 : eq(57, 37) : BOOL
64 : eq(57, 22) : BOOL
65 : eq(57, 40) : BOOL
66 : eq(57, 43) : BOOL
67 : ite(66, 45, 46) : BV:8
68 : ite(65, 42, 67) : BV:8
69 : ite(64, 26, 68) : BV:8
70 : ite(63, 26, 69) : BV:8
71 : ite(62, 36, 70) : BV:8
72 : ite(61, 26, 71) : BV:8
73 : ite(60, 26, 72) : BV:8
74 : ite(59, 29, 73) : BV:8
75 : ite(58, 26, 74) : BV:8
76 : 1 { 0x1 +1.11e129 } : BV:32
77 : bvadd(76, 21, 22) : BV:32
78 : eq(77, 24) : BOOL
79 : eq(77, 27) : BOOL
80 : eq(77, 30) : BOOL
81 : eq(77, 32) : BOOL
82 : eq(77, 34) : BOOL
83 : eq(77, 37) : BOOL
84 : eq(77, 22) : BOOL
85 : eq(77, 40) : BOOL
86 : eq(77, 43) : BOOL
87 : ite(86, 45, 46) : BV:8
88 : ite(85, 42, 87) : BV:8
89 : ite(84, 26, 88) : BV:8
90 : ite(83, 26, 89) : BV:8
91 : ite(82, 36, 90) : BV:8
92 : ite(81, 26, 91) : BV:8
93 : ite(80, 26, 92) : BV:8
94 : ite(79, 29, 93) : BV:8
95 : ite(78, 26, 94) : BV:8
96 : bvadd(21, 22) : BV:32
97 : eq(96, 24) : BOOL
98 : eq(96, 27) : BOOL
99 : eq(96, 30) : BOOL
100 : eq(96, 32) : BOOL
101 : eq(96, 34) : BOOL
102 : eq(96, 37) : BOOL
103 : eq(96, 22) : BOOL
104 : eq(96, 40) : BOOL
105 : eq(96, 43) : BOOL
106 : ite(105, 45, 46) : BV:8
107 : ite(104, 42, 106) : BV:8
108 : ite(103, 26, 107) : BV:8
109 : ite(102, 26, 108) : BV:8
110 : ite(101, 36, 109) : BV:8
111 : ite(100, 26, 110) : BV:8
112 : ite(99, 26, 111) : BV:8
113 : ite(98, 29, 112) : BV:8
114 : ite(97, 26, 113) : BV:8
115 : bvconcat(55, 75, 95, 114) : BV:32
116 : ite(18, 2, 115) : BV:32
117 : lambda(17, 116) : FUNCTION[BV:32 -> BV:32]
118 : map(16, 117) : MAP[BV:32 -> BV:32]
119 : sym_const(118) : MAP[BV:32 -> BV:32]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 3857542916 { 0xe5ed6f04 -437424380 -1.85495042e76 } : BV:32
=input.dst.llvm-%n
1 : 94063 { 0x16f6f +1.1121318e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3407283773 ] -> 111, [ 3407283774; 3407283774 ] -> 1, [ 3407283775; 3407283775 ] -> 0, [ 3407283776; 3857542915 ] -> 111, [ 3857542916; 3857542919 ] -> 0, [ 3857542920; 4076267991 ] -> 111, [ 4076267992; 4076267992 ] -> 4, [ 4076267993; 4076267993 ] -> 111, [ 4076267994; 4076267994 ] -> 237, [ 4076267995; 4076267995 ] -> 229, [ 4076267996; 4294967295 ] -> 111, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3407283771 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3407283772; 3407283775 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3407283776; 4076267991 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4076267992; 4076267995 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4076267996; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4076267992 { 0xf2f6e9d8 -218699304 -1.92901134e102 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3407283772 { 0xcb17063c -887683524 -1.17987775e23 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1115311958 { 0x427a4f56 +1.95554614e5 } : COUNT
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-0.L3%6%bbentry.0.1
1 : ([ 0; 94062 ] -> true, [ 94063; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%6%bbentry.1.1
1 : Lambda231 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3857542916 { 0xe5ed6f04 -437424380 -1.85495042e76 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 3857542917 { 0xe5ed6f05 -437424379 -1.85495054e76 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 4076267994 { 0xf2f6e9da -218699302 -1.92901158e102 } : BV:32
13 : eq(8, 12) : BOOL
14 : 237 { 0xed -19 } : BV:8
15 : 3857542919 { 0xe5ed6f07 -437424377 -1.85495078e76 } : BV:32
16 : eq(8, 15) : BOOL
17 : 3407283775 { 0xcb17063f -887683521 -1.17987811e23 } : BV:32
18 : eq(8, 17) : BOOL
19 : 3407283774 { 0xcb17063e -887683522 -1.17987799e23 } : BV:32
20 : eq(8, 19) : BOOL
21 : 1 { 0x1 } : BV:8
22 : 3857542918 { 0xe5ed6f06 -437424378 -1.85495066e76 } : BV:32
23 : eq(8, 22) : BOOL
24 : eq(8, 7) : BOOL
25 : 4076267995 { 0xf2f6e9db -218699301 -1.92901170e102 } : BV:32
26 : eq(8, 25) : BOOL
27 : 229 { 0xe5 -27 } : BV:8
28 : 4076267992 { 0xf2f6e9d8 -218699304 -1.92901134e102 } : BV:32
29 : eq(8, 28) : BOOL
30 : 4 { 0x4 } : BV:8
31 : 111 { 0x6f } : BV:8
32 : ite(29, 30, 31) : BV:8
33 : ite(26, 27, 32) : BV:8
34 : ite(24, 11, 33) : BV:8
35 : ite(23, 11, 34) : BV:8
36 : ite(20, 21, 35) : BV:8
37 : ite(18, 11, 36) : BV:8
38 : ite(16, 11, 37) : BV:8
39 : ite(13, 14, 38) : BV:8
40 : ite(10, 11, 39) : BV:8
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvadd(41, 6, 7) : BV:32
43 : eq(42, 9) : BOOL
44 : eq(42, 12) : BOOL
45 : eq(42, 15) : BOOL
46 : eq(42, 17) : BOOL
47 : eq(42, 19) : BOOL
48 : eq(42, 22) : BOOL
49 : eq(42, 7) : BOOL
50 : eq(42, 25) : BOOL
51 : eq(42, 28) : BOOL
52 : ite(51, 30, 31) : BV:8
53 : ite(50, 27, 52) : BV:8
54 : ite(49, 11, 53) : BV:8
55 : ite(48, 11, 54) : BV:8
56 : ite(47, 21, 55) : BV:8
57 : ite(46, 11, 56) : BV:8
58 : ite(45, 11, 57) : BV:8
59 : ite(44, 14, 58) : BV:8
60 : ite(43, 11, 59) : BV:8
61 : 1 { 0x1 +1.11e129 } : BV:32
62 : bvadd(61, 6, 7) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 15) : BOOL
66 : eq(62, 17) : BOOL
67 : eq(62, 19) : BOOL
68 : eq(62, 22) : BOOL
69 : eq(62, 7) : BOOL
70 : eq(62, 25) : BOOL
71 : eq(62, 28) : BOOL
72 : ite(71, 30, 31) : BV:8
73 : ite(70, 27, 72) : BV:8
74 : ite(69, 11, 73) : BV:8
75 : ite(68, 11, 74) : BV:8
76 : ite(67, 21, 75) : BV:8
77 : ite(66, 11, 76) : BV:8
78 : ite(65, 11, 77) : BV:8
79 : ite(64, 14, 78) : BV:8
80 : ite(63, 11, 79) : BV:8
81 : bvadd(6, 7) : BV:32
82 : eq(81, 9) : BOOL
83 : eq(81, 12) : BOOL
84 : eq(81, 15) : BOOL
85 : eq(81, 17) : BOOL
86 : eq(81, 19) : BOOL
87 : eq(81, 22) : BOOL
88 : eq(81, 7) : BOOL
89 : eq(81, 25) : BOOL
90 : eq(81, 28) : BOOL
91 : ite(90, 30, 31) : BV:8
92 : ite(89, 27, 91) : BV:8
93 : ite(88, 11, 92) : BV:8
94 : ite(87, 11, 93) : BV:8
95 : ite(86, 21, 94) : BV:8
96 : ite(85, 11, 95) : BV:8
97 : ite(84, 11, 96) : BV:8
98 : ite(83, 14, 97) : BV:8
99 : ite(82, 11, 98) : BV:8
100 : bvconcat(40, 60, 80, 99) : BV:32
101 : ite(3, 2, 100) : BV:32
102 : ite(3, 2, 101) : BV:32
103 : lambda(1, 102) : FUNCTION[BV:32 -> BV:32]
104 : sym_const(103) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 94062 ] -> true, [ 94063; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : Lambda232 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3857542916 { 0xe5ed6f04 -437424380 -1.85495042e76 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 3857542917 { 0xe5ed6f05 -437424379 -1.85495054e76 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 4076267994 { 0xf2f6e9da -218699302 -1.92901158e102 } : BV:32
13 : eq(8, 12) : BOOL
14 : 237 { 0xed -19 } : BV:8
15 : 3857542919 { 0xe5ed6f07 -437424377 -1.85495078e76 } : BV:32
16 : eq(8, 15) : BOOL
17 : 3407283775 { 0xcb17063f -887683521 -1.17987811e23 } : BV:32
18 : eq(8, 17) : BOOL
19 : 3407283774 { 0xcb17063e -887683522 -1.17987799e23 } : BV:32
20 : eq(8, 19) : BOOL
21 : 1 { 0x1 } : BV:8
22 : 3857542918 { 0xe5ed6f06 -437424378 -1.85495066e76 } : BV:32
23 : eq(8, 22) : BOOL
24 : eq(8, 7) : BOOL
25 : 4076267995 { 0xf2f6e9db -218699301 -1.92901170e102 } : BV:32
26 : eq(8, 25) : BOOL
27 : 229 { 0xe5 -27 } : BV:8
28 : 4076267992 { 0xf2f6e9d8 -218699304 -1.92901134e102 } : BV:32
29 : eq(8, 28) : BOOL
30 : 4 { 0x4 } : BV:8
31 : 111 { 0x6f } : BV:8
32 : ite(29, 30, 31) : BV:8
33 : ite(26, 27, 32) : BV:8
34 : ite(24, 11, 33) : BV:8
35 : ite(23, 11, 34) : BV:8
36 : ite(20, 21, 35) : BV:8
37 : ite(18, 11, 36) : BV:8
38 : ite(16, 11, 37) : BV:8
39 : ite(13, 14, 38) : BV:8
40 : ite(10, 11, 39) : BV:8
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvadd(41, 6, 7) : BV:32
43 : eq(42, 9) : BOOL
44 : eq(42, 12) : BOOL
45 : eq(42, 15) : BOOL
46 : eq(42, 17) : BOOL
47 : eq(42, 19) : BOOL
48 : eq(42, 22) : BOOL
49 : eq(42, 7) : BOOL
50 : eq(42, 25) : BOOL
51 : eq(42, 28) : BOOL
52 : ite(51, 30, 31) : BV:8
53 : ite(50, 27, 52) : BV:8
54 : ite(49, 11, 53) : BV:8
55 : ite(48, 11, 54) : BV:8
56 : ite(47, 21, 55) : BV:8
57 : ite(46, 11, 56) : BV:8
58 : ite(45, 11, 57) : BV:8
59 : ite(44, 14, 58) : BV:8
60 : ite(43, 11, 59) : BV:8
61 : 1 { 0x1 +1.11e129 } : BV:32
62 : bvadd(61, 6, 7) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 15) : BOOL
66 : eq(62, 17) : BOOL
67 : eq(62, 19) : BOOL
68 : eq(62, 22) : BOOL
69 : eq(62, 7) : BOOL
70 : eq(62, 25) : BOOL
71 : eq(62, 28) : BOOL
72 : ite(71, 30, 31) : BV:8
73 : ite(70, 27, 72) : BV:8
74 : ite(69, 11, 73) : BV:8
75 : ite(68, 11, 74) : BV:8
76 : ite(67, 21, 75) : BV:8
77 : ite(66, 11, 76) : BV:8
78 : ite(65, 11, 77) : BV:8
79 : ite(64, 14, 78) : BV:8
80 : ite(63, 11, 79) : BV:8
81 : bvadd(6, 7) : BV:32
82 : eq(81, 9) : BOOL
83 : eq(81, 12) : BOOL
84 : eq(81, 15) : BOOL
85 : eq(81, 17) : BOOL
86 : eq(81, 19) : BOOL
87 : eq(81, 22) : BOOL
88 : eq(81, 7) : BOOL
89 : eq(81, 25) : BOOL
90 : eq(81, 28) : BOOL
91 : ite(90, 30, 31) : BV:8
92 : ite(89, 27, 91) : BV:8
93 : ite(88, 11, 92) : BV:8
94 : ite(87, 11, 93) : BV:8
95 : ite(86, 21, 94) : BV:8
96 : ite(85, 11, 95) : BV:8
97 : ite(84, 11, 96) : BV:8
98 : ite(83, 14, 97) : BV:8
99 : ite(82, 11, 98) : BV:8
100 : bvconcat(40, 60, 80, 99) : BV:32
101 : ite(3, 2, 100) : BV:32
102 : lambda(1, 101) : FUNCTION[BV:32 -> BV:32]
103 : sym_const(102) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1115311958 { 0x427a4f56 +1.95554614e5 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3407283772 { 0xcb17063c -887683524 -1.17987775e23 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3407283775 { 0xcb17063f -887683521 -1.17987811e23 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4076267992 { 0xf2f6e9d8 -218699304 -1.92901134e102 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 4076267995 { 0xf2f6e9db -218699301 -1.92901170e102 } : BV:32
=counter_example.random_seed
794214668
=counter_example_end
=global nodece 9 num_edges_traversed 1
=global nodece 9 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 10
=global nodece 10 nodece z3.ce143.num_edges_traversed1
=global nodece 10 nodece_path
=global nodece 10 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 10 nodece_cached_counterexample
=counter_example_begin z3.ce143 4b45d8f62f19d4c3827d6109a52f425
=input.spec-%var-x-1
1 : Lambda285 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda286 : BV:32
17 : eq(16, 2) : BOOL
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 16) : BV:32
21 : 4288671232 { 0xff9fee00 -6296064 -1.24945068e128 } : BV:32
22 : bvadd(18, 20, 21) : BV:32
23 : 882445057 { 0x34990b01 +1.19564831e234 } : BV:32
24 : eq(22, 23) : BOOL
25 : 255 { 0xff -1 } : BV:8
26 : 882445056 { 0x34990b00 +1.19564819e234 } : BV:32
27 : eq(22, 26) : BOOL
28 : 4288671235 { 0xff9fee03 -6296061 -1.24945104e128 } : BV:32
29 : eq(22, 28) : BOOL
30 : 0 { 0x0 } : BV:8
31 : 882445059 { 0x34990b03 +1.19564855e234 } : BV:32
32 : eq(22, 31) : BOOL
33 : 4288671233 { 0xff9fee01 -6296063 -1.24945080e128 } : BV:32
34 : eq(22, 33) : BOOL
35 : 882445058 { 0x34990b02 +1.19564843e234 } : BV:32
36 : eq(22, 35) : BOOL
37 : 880872205 { 0x34810b0d +1.814974e234 } : BV:32
38 : eq(22, 37) : BOOL
39 : 238 { 0xee -18 } : BV:8
40 : 4288671234 { 0xff9fee02 -6296062 -1.24945092e128 } : BV:32
41 : eq(22, 40) : BOOL
42 : eq(22, 21) : BOOL
43 : 880872207 { 0x34810b0f +1.814998e234 } : BV:32
44 : eq(22, 43) : BOOL
45 : 880872204 { 0x34810b0c +1.814962e234 } : BV:32
46 : eq(22, 45) : BOOL
47 : 159 { 0x9f -97 } : BV:8
48 : ite(46, 30, 47) : BV:8
49 : ite(44, 25, 48) : BV:8
50 : ite(42, 30, 49) : BV:8
51 : ite(41, 30, 50) : BV:8
52 : ite(38, 39, 51) : BV:8
53 : ite(36, 25, 52) : BV:8
54 : ite(34, 30, 53) : BV:8
55 : ite(32, 25, 54) : BV:8
56 : ite(29, 30, 55) : BV:8
57 : ite(27, 25, 56) : BV:8
58 : ite(24, 25, 57) : BV:8
59 : 2 { 0x2 +1.23e129 } : BV:32
60 : bvadd(59, 20, 21) : BV:32
61 : eq(60, 23) : BOOL
62 : eq(60, 26) : BOOL
63 : eq(60, 28) : BOOL
64 : eq(60, 31) : BOOL
65 : eq(60, 33) : BOOL
66 : eq(60, 35) : BOOL
67 : eq(60, 37) : BOOL
68 : eq(60, 40) : BOOL
69 : eq(60, 21) : BOOL
70 : eq(60, 43) : BOOL
71 : eq(60, 45) : BOOL
72 : ite(71, 30, 47) : BV:8
73 : ite(70, 25, 72) : BV:8
74 : ite(69, 30, 73) : BV:8
75 : ite(68, 30, 74) : BV:8
76 : ite(67, 39, 75) : BV:8
77 : ite(66, 25, 76) : BV:8
78 : ite(65, 30, 77) : BV:8
79 : ite(64, 25, 78) : BV:8
80 : ite(63, 30, 79) : BV:8
81 : ite(62, 25, 80) : BV:8
82 : ite(61, 25, 81) : BV:8
83 : 1 { 0x1 +1.11e129 } : BV:32
84 : bvadd(83, 20, 21) : BV:32
85 : eq(84, 23) : BOOL
86 : eq(84, 26) : BOOL
87 : eq(84, 28) : BOOL
88 : eq(84, 31) : BOOL
89 : eq(84, 33) : BOOL
90 : eq(84, 35) : BOOL
91 : eq(84, 37) : BOOL
92 : eq(84, 40) : BOOL
93 : eq(84, 21) : BOOL
94 : eq(84, 43) : BOOL
95 : eq(84, 45) : BOOL
96 : ite(95, 30, 47) : BV:8
97 : ite(94, 25, 96) : BV:8
98 : ite(93, 30, 97) : BV:8
99 : ite(92, 30, 98) : BV:8
100 : ite(91, 39, 99) : BV:8
101 : ite(90, 25, 100) : BV:8
102 : ite(89, 30, 101) : BV:8
103 : ite(88, 25, 102) : BV:8
104 : ite(87, 30, 103) : BV:8
105 : ite(86, 25, 104) : BV:8
106 : ite(85, 25, 105) : BV:8
107 : bvadd(20, 21) : BV:32
108 : eq(107, 23) : BOOL
109 : eq(107, 26) : BOOL
110 : eq(107, 28) : BOOL
111 : eq(107, 31) : BOOL
112 : eq(107, 33) : BOOL
113 : eq(107, 35) : BOOL
114 : eq(107, 37) : BOOL
115 : eq(107, 40) : BOOL
116 : eq(107, 21) : BOOL
117 : eq(107, 43) : BOOL
118 : eq(107, 45) : BOOL
119 : ite(118, 30, 47) : BV:8
120 : ite(117, 25, 119) : BV:8
121 : ite(116, 30, 120) : BV:8
122 : ite(115, 30, 121) : BV:8
123 : ite(114, 39, 122) : BV:8
124 : ite(113, 25, 123) : BV:8
125 : ite(112, 30, 124) : BV:8
126 : ite(111, 25, 125) : BV:8
127 : ite(110, 30, 126) : BV:8
128 : ite(109, 25, 127) : BV:8
129 : ite(108, 25, 128) : BV:8
130 : bvconcat(58, 82, 106, 129) : BV:32
131 : ite(17, 2, 130) : BV:32
132 : lambda(16, 131) : FUNCTION[BV:32 -> BV:32]
133 : map(15, 132) : MAP[BV:32 -> BV:32]
134 : sym_const(133) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L3%6%bbentry
1 : Lambda285 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda286 : BV:32
17 : eq(16, 2) : BOOL
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 16) : BV:32
21 : 4288671232 { 0xff9fee00 -6296064 -1.24945068e128 } : BV:32
22 : bvadd(18, 20, 21) : BV:32
23 : 882445057 { 0x34990b01 +1.19564831e234 } : BV:32
24 : eq(22, 23) : BOOL
25 : 255 { 0xff -1 } : BV:8
26 : 882445056 { 0x34990b00 +1.19564819e234 } : BV:32
27 : eq(22, 26) : BOOL
28 : 4288671235 { 0xff9fee03 -6296061 -1.24945104e128 } : BV:32
29 : eq(22, 28) : BOOL
30 : 0 { 0x0 } : BV:8
31 : 882445059 { 0x34990b03 +1.19564855e234 } : BV:32
32 : eq(22, 31) : BOOL
33 : 4288671233 { 0xff9fee01 -6296063 -1.24945080e128 } : BV:32
34 : eq(22, 33) : BOOL
35 : 882445058 { 0x34990b02 +1.19564843e234 } : BV:32
36 : eq(22, 35) : BOOL
37 : 880872205 { 0x34810b0d +1.814974e234 } : BV:32
38 : eq(22, 37) : BOOL
39 : 238 { 0xee -18 } : BV:8
40 : 4288671234 { 0xff9fee02 -6296062 -1.24945092e128 } : BV:32
41 : eq(22, 40) : BOOL
42 : eq(22, 21) : BOOL
43 : 880872207 { 0x34810b0f +1.814998e234 } : BV:32
44 : eq(22, 43) : BOOL
45 : 880872204 { 0x34810b0c +1.814962e234 } : BV:32
46 : eq(22, 45) : BOOL
47 : 159 { 0x9f -97 } : BV:8
48 : ite(46, 30, 47) : BV:8
49 : ite(44, 25, 48) : BV:8
50 : ite(42, 30, 49) : BV:8
51 : ite(41, 30, 50) : BV:8
52 : ite(38, 39, 51) : BV:8
53 : ite(36, 25, 52) : BV:8
54 : ite(34, 30, 53) : BV:8
55 : ite(32, 25, 54) : BV:8
56 : ite(29, 30, 55) : BV:8
57 : ite(27, 25, 56) : BV:8
58 : ite(24, 25, 57) : BV:8
59 : 2 { 0x2 +1.23e129 } : BV:32
60 : bvadd(59, 20, 21) : BV:32
61 : eq(60, 23) : BOOL
62 : eq(60, 26) : BOOL
63 : eq(60, 28) : BOOL
64 : eq(60, 31) : BOOL
65 : eq(60, 33) : BOOL
66 : eq(60, 35) : BOOL
67 : eq(60, 37) : BOOL
68 : eq(60, 40) : BOOL
69 : eq(60, 21) : BOOL
70 : eq(60, 43) : BOOL
71 : eq(60, 45) : BOOL
72 : ite(71, 30, 47) : BV:8
73 : ite(70, 25, 72) : BV:8
74 : ite(69, 30, 73) : BV:8
75 : ite(68, 30, 74) : BV:8
76 : ite(67, 39, 75) : BV:8
77 : ite(66, 25, 76) : BV:8
78 : ite(65, 30, 77) : BV:8
79 : ite(64, 25, 78) : BV:8
80 : ite(63, 30, 79) : BV:8
81 : ite(62, 25, 80) : BV:8
82 : ite(61, 25, 81) : BV:8
83 : 1 { 0x1 +1.11e129 } : BV:32
84 : bvadd(83, 20, 21) : BV:32
85 : eq(84, 23) : BOOL
86 : eq(84, 26) : BOOL
87 : eq(84, 28) : BOOL
88 : eq(84, 31) : BOOL
89 : eq(84, 33) : BOOL
90 : eq(84, 35) : BOOL
91 : eq(84, 37) : BOOL
92 : eq(84, 40) : BOOL
93 : eq(84, 21) : BOOL
94 : eq(84, 43) : BOOL
95 : eq(84, 45) : BOOL
96 : ite(95, 30, 47) : BV:8
97 : ite(94, 25, 96) : BV:8
98 : ite(93, 30, 97) : BV:8
99 : ite(92, 30, 98) : BV:8
100 : ite(91, 39, 99) : BV:8
101 : ite(90, 25, 100) : BV:8
102 : ite(89, 30, 101) : BV:8
103 : ite(88, 25, 102) : BV:8
104 : ite(87, 30, 103) : BV:8
105 : ite(86, 25, 104) : BV:8
106 : ite(85, 25, 105) : BV:8
107 : bvadd(20, 21) : BV:32
108 : eq(107, 23) : BOOL
109 : eq(107, 26) : BOOL
110 : eq(107, 28) : BOOL
111 : eq(107, 31) : BOOL
112 : eq(107, 33) : BOOL
113 : eq(107, 35) : BOOL
114 : eq(107, 37) : BOOL
115 : eq(107, 40) : BOOL
116 : eq(107, 21) : BOOL
117 : eq(107, 43) : BOOL
118 : eq(107, 45) : BOOL
119 : ite(118, 30, 47) : BV:8
120 : ite(117, 25, 119) : BV:8
121 : ite(116, 30, 120) : BV:8
122 : ite(115, 30, 121) : BV:8
123 : ite(114, 39, 122) : BV:8
124 : ite(113, 25, 123) : BV:8
125 : ite(112, 30, 124) : BV:8
126 : ite(111, 25, 125) : BV:8
127 : ite(110, 30, 126) : BV:8
128 : ite(109, 25, 127) : BV:8
129 : ite(108, 25, 128) : BV:8
130 : bvconcat(58, 82, 106, 129) : BV:32
131 : ite(17, 2, 130) : BV:32
132 : lambda(16, 131) : FUNCTION[BV:32 -> BV:32]
133 : map(15, 132) : MAP[BV:32 -> BV:32]
134 : sym_const(133) : MAP[BV:32 -> BV:32]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 4288671232 { 0xff9fee00 -6296064 -1.24945068e128 } : BV:32
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 880872203 ] -> 159, [ 880872204; 880872204 ] -> 0, [ 880872205; 880872205 ] -> 238, [ 880872206; 880872206 ] -> 159, [ 880872207; 880872207 ] -> 255, [ 880872208; 882445055 ] -> 159, [ 882445056; 882445059 ] -> 255, [ 882445060; 4288671231 ] -> 159, [ 4288671232; 4288671235 ] -> 0, [ 4288671236; 4294967295 ] -> 159, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 880872203 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 880872204; 880872207 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 880872208; 882445055 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 882445056; 882445059 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 882445060; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 880872204 { 0x34810b0c +1.814962e234 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 882445056 { 0x34990b00 +1.19564819e234 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 2033807165 { 0x79396f3d +1.44870722e115 } : COUNT
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-0.L3%6%bbentry.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%6%bbentry.1.1
1 : Lambda273 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 4288671232 { 0xff9fee00 -6296064 -1.24945068e128 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 882445057 { 0x34990b01 +1.19564831e234 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 882445056 { 0x34990b00 +1.19564819e234 } : BV:32
13 : eq(8, 12) : BOOL
14 : 4288671235 { 0xff9fee03 -6296061 -1.24945104e128 } : BV:32
15 : eq(8, 14) : BOOL
16 : 0 { 0x0 } : BV:8
17 : 882445059 { 0x34990b03 +1.19564855e234 } : BV:32
18 : eq(8, 17) : BOOL
19 : 4288671233 { 0xff9fee01 -6296063 -1.24945080e128 } : BV:32
20 : eq(8, 19) : BOOL
21 : 882445058 { 0x34990b02 +1.19564843e234 } : BV:32
22 : eq(8, 21) : BOOL
23 : 880872205 { 0x34810b0d +1.814974e234 } : BV:32
24 : eq(8, 23) : BOOL
25 : 238 { 0xee -18 } : BV:8
26 : 4288671234 { 0xff9fee02 -6296062 -1.24945092e128 } : BV:32
27 : eq(8, 26) : BOOL
28 : eq(8, 7) : BOOL
29 : 880872207 { 0x34810b0f +1.814998e234 } : BV:32
30 : eq(8, 29) : BOOL
31 : 880872204 { 0x34810b0c +1.814962e234 } : BV:32
32 : eq(8, 31) : BOOL
33 : 159 { 0x9f -97 } : BV:8
34 : ite(32, 16, 33) : BV:8
35 : ite(30, 11, 34) : BV:8
36 : ite(28, 16, 35) : BV:8
37 : ite(27, 16, 36) : BV:8
38 : ite(24, 25, 37) : BV:8
39 : ite(22, 11, 38) : BV:8
40 : ite(20, 16, 39) : BV:8
41 : ite(18, 11, 40) : BV:8
42 : ite(15, 16, 41) : BV:8
43 : ite(13, 11, 42) : BV:8
44 : ite(10, 11, 43) : BV:8
45 : 2 { 0x2 +1.23e129 } : BV:32
46 : bvadd(45, 6, 7) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : eq(46, 14) : BOOL
50 : eq(46, 17) : BOOL
51 : eq(46, 19) : BOOL
52 : eq(46, 21) : BOOL
53 : eq(46, 23) : BOOL
54 : eq(46, 26) : BOOL
55 : eq(46, 7) : BOOL
56 : eq(46, 29) : BOOL
57 : eq(46, 31) : BOOL
58 : ite(57, 16, 33) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 16, 59) : BV:8
61 : ite(54, 16, 60) : BV:8
62 : ite(53, 25, 61) : BV:8
63 : ite(52, 11, 62) : BV:8
64 : ite(51, 16, 63) : BV:8
65 : ite(50, 11, 64) : BV:8
66 : ite(49, 16, 65) : BV:8
67 : ite(48, 11, 66) : BV:8
68 : ite(47, 11, 67) : BV:8
69 : 1 { 0x1 +1.11e129 } : BV:32
70 : bvadd(69, 6, 7) : BV:32
71 : eq(70, 9) : BOOL
72 : eq(70, 12) : BOOL
73 : eq(70, 14) : BOOL
74 : eq(70, 17) : BOOL
75 : eq(70, 19) : BOOL
76 : eq(70, 21) : BOOL
77 : eq(70, 23) : BOOL
78 : eq(70, 26) : BOOL
79 : eq(70, 7) : BOOL
80 : eq(70, 29) : BOOL
81 : eq(70, 31) : BOOL
82 : ite(81, 16, 33) : BV:8
83 : ite(80, 11, 82) : BV:8
84 : ite(79, 16, 83) : BV:8
85 : ite(78, 16, 84) : BV:8
86 : ite(77, 25, 85) : BV:8
87 : ite(76, 11, 86) : BV:8
88 : ite(75, 16, 87) : BV:8
89 : ite(74, 11, 88) : BV:8
90 : ite(73, 16, 89) : BV:8
91 : ite(72, 11, 90) : BV:8
92 : ite(71, 11, 91) : BV:8
93 : bvadd(6, 7) : BV:32
94 : eq(93, 9) : BOOL
95 : eq(93, 12) : BOOL
96 : eq(93, 14) : BOOL
97 : eq(93, 17) : BOOL
98 : eq(93, 19) : BOOL
99 : eq(93, 21) : BOOL
100 : eq(93, 23) : BOOL
101 : eq(93, 26) : BOOL
102 : eq(93, 7) : BOOL
103 : eq(93, 29) : BOOL
104 : eq(93, 31) : BOOL
105 : ite(104, 16, 33) : BV:8
106 : ite(103, 11, 105) : BV:8
107 : ite(102, 16, 106) : BV:8
108 : ite(101, 16, 107) : BV:8
109 : ite(100, 25, 108) : BV:8
110 : ite(99, 11, 109) : BV:8
111 : ite(98, 16, 110) : BV:8
112 : ite(97, 11, 111) : BV:8
113 : ite(96, 16, 112) : BV:8
114 : ite(95, 11, 113) : BV:8
115 : ite(94, 11, 114) : BV:8
116 : bvconcat(44, 68, 92, 115) : BV:32
117 : ite(3, 2, 116) : BV:32
118 : ite(3, 2, 117) : BV:32
119 : lambda(1, 118) : FUNCTION[BV:32 -> BV:32]
120 : sym_const(119) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : Lambda274 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 4288671232 { 0xff9fee00 -6296064 -1.24945068e128 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 882445057 { 0x34990b01 +1.19564831e234 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 882445056 { 0x34990b00 +1.19564819e234 } : BV:32
13 : eq(8, 12) : BOOL
14 : 4288671235 { 0xff9fee03 -6296061 -1.24945104e128 } : BV:32
15 : eq(8, 14) : BOOL
16 : 0 { 0x0 } : BV:8
17 : 882445059 { 0x34990b03 +1.19564855e234 } : BV:32
18 : eq(8, 17) : BOOL
19 : 4288671233 { 0xff9fee01 -6296063 -1.24945080e128 } : BV:32
20 : eq(8, 19) : BOOL
21 : 882445058 { 0x34990b02 +1.19564843e234 } : BV:32
22 : eq(8, 21) : BOOL
23 : 880872205 { 0x34810b0d +1.814974e234 } : BV:32
24 : eq(8, 23) : BOOL
25 : 238 { 0xee -18 } : BV:8
26 : 4288671234 { 0xff9fee02 -6296062 -1.24945092e128 } : BV:32
27 : eq(8, 26) : BOOL
28 : eq(8, 7) : BOOL
29 : 880872207 { 0x34810b0f +1.814998e234 } : BV:32
30 : eq(8, 29) : BOOL
31 : 880872204 { 0x34810b0c +1.814962e234 } : BV:32
32 : eq(8, 31) : BOOL
33 : 159 { 0x9f -97 } : BV:8
34 : ite(32, 16, 33) : BV:8
35 : ite(30, 11, 34) : BV:8
36 : ite(28, 16, 35) : BV:8
37 : ite(27, 16, 36) : BV:8
38 : ite(24, 25, 37) : BV:8
39 : ite(22, 11, 38) : BV:8
40 : ite(20, 16, 39) : BV:8
41 : ite(18, 11, 40) : BV:8
42 : ite(15, 16, 41) : BV:8
43 : ite(13, 11, 42) : BV:8
44 : ite(10, 11, 43) : BV:8
45 : 2 { 0x2 +1.23e129 } : BV:32
46 : bvadd(45, 6, 7) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : eq(46, 14) : BOOL
50 : eq(46, 17) : BOOL
51 : eq(46, 19) : BOOL
52 : eq(46, 21) : BOOL
53 : eq(46, 23) : BOOL
54 : eq(46, 26) : BOOL
55 : eq(46, 7) : BOOL
56 : eq(46, 29) : BOOL
57 : eq(46, 31) : BOOL
58 : ite(57, 16, 33) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 16, 59) : BV:8
61 : ite(54, 16, 60) : BV:8
62 : ite(53, 25, 61) : BV:8
63 : ite(52, 11, 62) : BV:8
64 : ite(51, 16, 63) : BV:8
65 : ite(50, 11, 64) : BV:8
66 : ite(49, 16, 65) : BV:8
67 : ite(48, 11, 66) : BV:8
68 : ite(47, 11, 67) : BV:8
69 : 1 { 0x1 +1.11e129 } : BV:32
70 : bvadd(69, 6, 7) : BV:32
71 : eq(70, 9) : BOOL
72 : eq(70, 12) : BOOL
73 : eq(70, 14) : BOOL
74 : eq(70, 17) : BOOL
75 : eq(70, 19) : BOOL
76 : eq(70, 21) : BOOL
77 : eq(70, 23) : BOOL
78 : eq(70, 26) : BOOL
79 : eq(70, 7) : BOOL
80 : eq(70, 29) : BOOL
81 : eq(70, 31) : BOOL
82 : ite(81, 16, 33) : BV:8
83 : ite(80, 11, 82) : BV:8
84 : ite(79, 16, 83) : BV:8
85 : ite(78, 16, 84) : BV:8
86 : ite(77, 25, 85) : BV:8
87 : ite(76, 11, 86) : BV:8
88 : ite(75, 16, 87) : BV:8
89 : ite(74, 11, 88) : BV:8
90 : ite(73, 16, 89) : BV:8
91 : ite(72, 11, 90) : BV:8
92 : ite(71, 11, 91) : BV:8
93 : bvadd(6, 7) : BV:32
94 : eq(93, 9) : BOOL
95 : eq(93, 12) : BOOL
96 : eq(93, 14) : BOOL
97 : eq(93, 17) : BOOL
98 : eq(93, 19) : BOOL
99 : eq(93, 21) : BOOL
100 : eq(93, 23) : BOOL
101 : eq(93, 26) : BOOL
102 : eq(93, 7) : BOOL
103 : eq(93, 29) : BOOL
104 : eq(93, 31) : BOOL
105 : ite(104, 16, 33) : BV:8
106 : ite(103, 11, 105) : BV:8
107 : ite(102, 16, 106) : BV:8
108 : ite(101, 16, 107) : BV:8
109 : ite(100, 25, 108) : BV:8
110 : ite(99, 11, 109) : BV:8
111 : ite(98, 16, 110) : BV:8
112 : ite(97, 11, 111) : BV:8
113 : ite(96, 16, 112) : BV:8
114 : ite(95, 11, 113) : BV:8
115 : ite(94, 11, 114) : BV:8
116 : bvconcat(44, 68, 92, 115) : BV:32
117 : ite(3, 2, 116) : BV:32
118 : lambda(1, 117) : FUNCTION[BV:32 -> BV:32]
119 : sym_const(118) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 2033807165 { 0x79396f3d +1.44870722e115 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 882445056 { 0x34990b00 +1.19564819e234 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 882445059 { 0x34990b03 +1.19564855e234 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 880872204 { 0x34810b0c +1.814962e234 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 880872207 { 0x34810b0f +1.814998e234 } : BV:32
=counter_example.random_seed
1128103636
=counter_example_end
=global nodece 10 num_edges_traversed 1
=global nodece 10 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 11
=global nodece 11 nodece z3.ce652.num_edges_traversed0
=global nodece 11 nodece_path
=global nodece 11 nodece_path.graph_edge_composition
(epsilon)
=global nodece 11 nodece_cached_counterexample
=counter_example_begin z3.ce652 acb8cf3c7b404fcf56de6ca77b3ee5
=input.spec-%var-x-1
1 : Lambda998 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 8191 { 0x1fff +1.97644e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8192 { 0x2000 +1.97656e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda999 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 2, 28) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L3%6%bbentry
1 : Lambda1002 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 8191 { 0x1fff +1.97644e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8192 { 0x2000 +1.97656e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1003 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 2847819940 { 0xa9be48a4 -1447147356 -1.48659181e212 } : BV:32
=input.dst.llvm-%n
1 : 8192 { 0x2000 +1.97656e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 955669663 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 955669664; 955669667 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 955669668; 3795237063 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3795237064; 3795237067 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3795237068; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 955669664 { 0x38f65ca0 +1.92470169e242 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3795237064 { 0xe236b8c8 -499730232 -1.42751407e69 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-0.L3%6%bbentry.0.1
1 : ([ 0; 8191 ] -> true, [ 8192; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 8191 ] -> true, [ 8192; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : Lambda984 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 8191 { 0x1fff +1.97644e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 8192 { 0x2000 +1.97656e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 2, 18) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3795237064 { 0xe236b8c8 -499730232 -1.42751407e69 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3795237067 { 0xe236b8cb -499730229 -1.42751443e69 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 955669664 { 0x38f65ca0 +1.92470169e242 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 955669667 { 0x38f65ca3 +1.92470204e242 } : BV:32
=counter_example.random_seed
4024242022
=counter_example_end
=global nodece 11 num_edges_traversed 0
=global nodece 11 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 12
=global nodece 12 nodece z3v487.ce653.num_edges_traversed0
=global nodece 12 nodece_path
=global nodece 12 nodece_path.graph_edge_composition
(epsilon)
=global nodece 12 nodece_cached_counterexample
=counter_example_begin z3v487.ce653 68c0c737b326936ef288e9962acb4bc
=input.spec-%var-x-1
1 : Lambda1010 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 8388607 { 0x7fffff +1.99999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8388608 { 0x800000 +1.0e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1011 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L3%6%bbentry
1 : Lambda1013 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 8388607 { 0x7fffff +1.99999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8388608 { 0x800000 +1.0e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1014 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 2, 28) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 16777216 { 0x1000000 +1.0e131 } : BV:32
=input.dst.llvm-%n
1 : 8388608 { 0x800000 +1.0e130 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 22394911 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 22394912; 22394915 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 22394916; 1080782915 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1080782916; 1080782919 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1080782920; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1080782916 { 0x406b7044 +1.83936357e1 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 22394912 { 0x155b820 +1.66968154e131 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-0.L3%6%bbentry.0.1
1 : ([ 0; 8388607 ] -> true, [ 8388608; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%6%bbentry.1.1
1 : Lambda989 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 8388607 { 0x7fffff +1.99999988e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 8388608 { 0x800000 +1.0e130 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 2, 18) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 8388607 ] -> true, [ 8388608; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 22394912 { 0x155b820 +1.66968154e131 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 22394915 { 0x155b823 +1.66968190e131 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1080782916 { 0x406b7044 +1.83936357e1 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1080782919 { 0x406b7047 +1.83936393e1 } : BV:32
=counter_example.random_seed
1252010049
=counter_example_end
=global nodece 12 num_edges_traversed 0
=global nodece 12 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 13
=global nodece 13 nodece z3.ce763.num_edges_traversed2
=global nodece 13 nodece_path
=global nodece 13 nodece_path.graph_edge_composition
(epsilon)
=global nodece 13 nodece_cached_counterexample
=counter_example_begin z3.ce763 f41bcfe9a6677929f5a467fc5bd71
=input.spec-%var-x-1
1 : Lambda63 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 65535 { 0xffff +1.781238e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 65536 { 0x10000 +1.781250e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda64 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 4286299904 { 0xff7bbf00 -8667392 -1.96676635e127 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 2930012418 { 0xaea47102 -1364954878 -1.28469872e222 } : BV:32
25 : eq(23, 24) : BOOL
26 : 123 { 0x7b } : BV:8
27 : 2151810054 { 0x80420406 -2143157242 -1.51574778e129 } : BV:32
28 : eq(23, 27) : BOOL
29 : 1 { 0x1 } : BV:8
30 : 2930012417 { 0xaea47101 -1364954879 -1.28469860e222 } : BV:32
31 : eq(23, 30) : BOOL
32 : 191 { 0xbf -65 } : BV:8
33 : 2930012419 { 0xaea47103 -1364954877 -1.28469884e222 } : BV:32
34 : eq(23, 33) : BOOL
35 : 255 { 0xff -1 } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvadd(41, 21, 22) : BV:32
43 : eq(42, 24) : BOOL
44 : eq(42, 27) : BOOL
45 : eq(42, 30) : BOOL
46 : eq(42, 33) : BOOL
47 : ite(46, 35, 36) : BV:8
48 : ite(45, 32, 47) : BV:8
49 : ite(44, 29, 48) : BV:8
50 : ite(43, 26, 49) : BV:8
51 : 1 { 0x1 +1.11e129 } : BV:32
52 : bvadd(51, 21, 22) : BV:32
53 : eq(52, 24) : BOOL
54 : eq(52, 27) : BOOL
55 : eq(52, 30) : BOOL
56 : eq(52, 33) : BOOL
57 : ite(56, 35, 36) : BV:8
58 : ite(55, 32, 57) : BV:8
59 : ite(54, 29, 58) : BV:8
60 : ite(53, 26, 59) : BV:8
61 : bvadd(21, 22) : BV:32
62 : eq(61, 24) : BOOL
63 : eq(61, 27) : BOOL
64 : eq(61, 30) : BOOL
65 : eq(61, 33) : BOOL
66 : ite(65, 35, 36) : BV:8
67 : ite(64, 32, 66) : BV:8
68 : ite(63, 29, 67) : BV:8
69 : ite(62, 26, 68) : BV:8
70 : bvconcat(40, 50, 60, 69) : BV:32
71 : ite(18, 2, 70) : BV:32
72 : lambda(17, 71) : FUNCTION[BV:32 -> BV:32]
73 : map(16, 72) : MAP[BV:32 -> BV:32]
74 : sym_const(73) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L3%6%bbentry
1 : Lambda63 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 65535 { 0xffff +1.781238e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 65536 { 0x10000 +1.781250e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda64 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 4286299904 { 0xff7bbf00 -8667392 -1.96676635e127 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 2930012418 { 0xaea47102 -1364954878 -1.28469872e222 } : BV:32
25 : eq(23, 24) : BOOL
26 : 123 { 0x7b } : BV:8
27 : 2151810054 { 0x80420406 -2143157242 -1.51574778e129 } : BV:32
28 : eq(23, 27) : BOOL
29 : 1 { 0x1 } : BV:8
30 : 2930012417 { 0xaea47101 -1364954879 -1.28469860e222 } : BV:32
31 : eq(23, 30) : BOOL
32 : 191 { 0xbf -65 } : BV:8
33 : 2930012419 { 0xaea47103 -1364954877 -1.28469884e222 } : BV:32
34 : eq(23, 33) : BOOL
35 : 255 { 0xff -1 } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvadd(41, 21, 22) : BV:32
43 : eq(42, 24) : BOOL
44 : eq(42, 27) : BOOL
45 : eq(42, 30) : BOOL
46 : eq(42, 33) : BOOL
47 : ite(46, 35, 36) : BV:8
48 : ite(45, 32, 47) : BV:8
49 : ite(44, 29, 48) : BV:8
50 : ite(43, 26, 49) : BV:8
51 : 1 { 0x1 +1.11e129 } : BV:32
52 : bvadd(51, 21, 22) : BV:32
53 : eq(52, 24) : BOOL
54 : eq(52, 27) : BOOL
55 : eq(52, 30) : BOOL
56 : eq(52, 33) : BOOL
57 : ite(56, 35, 36) : BV:8
58 : ite(55, 32, 57) : BV:8
59 : ite(54, 29, 58) : BV:8
60 : ite(53, 26, 59) : BV:8
61 : bvadd(21, 22) : BV:32
62 : eq(61, 24) : BOOL
63 : eq(61, 27) : BOOL
64 : eq(61, 30) : BOOL
65 : eq(61, 33) : BOOL
66 : ite(65, 35, 36) : BV:8
67 : ite(64, 32, 66) : BV:8
68 : ite(63, 29, 67) : BV:8
69 : ite(62, 26, 68) : BV:8
70 : bvconcat(40, 50, 60, 69) : BV:32
71 : ite(18, 2, 70) : BV:32
72 : lambda(17, 71) : FUNCTION[BV:32 -> BV:32]
73 : map(16, 72) : MAP[BV:32 -> BV:32]
74 : sym_const(73) : MAP[BV:32 -> BV:32]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-ret-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 4286299904 { 0xff7bbf00 -8667392 -1.96676635e127 } : BV:32
=input.dst.llvm-%n
1 : 65536 { 0x10000 +1.781250e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 2151810053 ] -> 0, [ 2151810054; 2151810054 ] -> 1, [ 2151810055; 2930012416 ] -> 0, [ 2930012417; 2930012417 ] -> 191, [ 2930012418; 2930012418 ] -> 123, [ 2930012419; 2930012419 ] -> 255, [ 2930012420; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2151810051 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2151810052; 2151810055 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2151810056; 2930012415 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2930012416; 2930012419 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2930012420; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2930012416 { 0xaea47100 -1364954880 -1.28469848e222 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2151810052 { 0x80420404 -2143157244 -1.51574754e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%6%bbentry.0.1
1 : ([ 0; 65535 ] -> true, [ 65536; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%6%bbentry.1.1
1 : Lambda51 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 4286299904 { 0xff7bbf00 -8667392 -1.96676635e127 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 2930012418 { 0xaea47102 -1364954878 -1.28469872e222 } : BV:32
10 : eq(8, 9) : BOOL
11 : 123 { 0x7b } : BV:8
12 : 2151810054 { 0x80420406 -2143157242 -1.51574778e129 } : BV:32
13 : eq(8, 12) : BOOL
14 : 1 { 0x1 } : BV:8
15 : 2930012417 { 0xaea47101 -1364954879 -1.28469860e222 } : BV:32
16 : eq(8, 15) : BOOL
17 : 191 { 0xbf -65 } : BV:8
18 : 2930012419 { 0xaea47103 -1364954877 -1.28469884e222 } : BV:32
19 : eq(8, 18) : BOOL
20 : 255 { 0xff -1 } : BV:8
21 : 0 { 0x0 } : BV:8
22 : ite(19, 20, 21) : BV:8
23 : ite(16, 17, 22) : BV:8
24 : ite(13, 14, 23) : BV:8
25 : ite(10, 11, 24) : BV:8
26 : 2 { 0x2 +1.23e129 } : BV:32
27 : bvadd(26, 6, 7) : BV:32
28 : eq(27, 9) : BOOL
29 : eq(27, 12) : BOOL
30 : eq(27, 15) : BOOL
31 : eq(27, 18) : BOOL
32 : ite(31, 20, 21) : BV:8
33 : ite(30, 17, 32) : BV:8
34 : ite(29, 14, 33) : BV:8
35 : ite(28, 11, 34) : BV:8
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvadd(36, 6, 7) : BV:32
38 : eq(37, 9) : BOOL
39 : eq(37, 12) : BOOL
40 : eq(37, 15) : BOOL
41 : eq(37, 18) : BOOL
42 : ite(41, 20, 21) : BV:8
43 : ite(40, 17, 42) : BV:8
44 : ite(39, 14, 43) : BV:8
45 : ite(38, 11, 44) : BV:8
46 : bvadd(6, 7) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : eq(46, 15) : BOOL
50 : eq(46, 18) : BOOL
51 : ite(50, 20, 21) : BV:8
52 : ite(49, 17, 51) : BV:8
53 : ite(48, 14, 52) : BV:8
54 : ite(47, 11, 53) : BV:8
55 : bvconcat(25, 35, 45, 54) : BV:32
56 : ite(3, 2, 55) : BV:32
57 : ite(3, 2, 56) : BV:32
58 : lambda(1, 57) : FUNCTION[BV:32 -> BV:32]
59 : sym_const(58) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 65535 ] -> true, [ 65536; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : Lambda52 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 4286299904 { 0xff7bbf00 -8667392 -1.96676635e127 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 2930012418 { 0xaea47102 -1364954878 -1.28469872e222 } : BV:32
10 : eq(8, 9) : BOOL
11 : 123 { 0x7b } : BV:8
12 : 2151810054 { 0x80420406 -2143157242 -1.51574778e129 } : BV:32
13 : eq(8, 12) : BOOL
14 : 1 { 0x1 } : BV:8
15 : 2930012417 { 0xaea47101 -1364954879 -1.28469860e222 } : BV:32
16 : eq(8, 15) : BOOL
17 : 191 { 0xbf -65 } : BV:8
18 : 2930012419 { 0xaea47103 -1364954877 -1.28469884e222 } : BV:32
19 : eq(8, 18) : BOOL
20 : 255 { 0xff -1 } : BV:8
21 : 0 { 0x0 } : BV:8
22 : ite(19, 20, 21) : BV:8
23 : ite(16, 17, 22) : BV:8
24 : ite(13, 14, 23) : BV:8
25 : ite(10, 11, 24) : BV:8
26 : 2 { 0x2 +1.23e129 } : BV:32
27 : bvadd(26, 6, 7) : BV:32
28 : eq(27, 9) : BOOL
29 : eq(27, 12) : BOOL
30 : eq(27, 15) : BOOL
31 : eq(27, 18) : BOOL
32 : ite(31, 20, 21) : BV:8
33 : ite(30, 17, 32) : BV:8
34 : ite(29, 14, 33) : BV:8
35 : ite(28, 11, 34) : BV:8
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvadd(36, 6, 7) : BV:32
38 : eq(37, 9) : BOOL
39 : eq(37, 12) : BOOL
40 : eq(37, 15) : BOOL
41 : eq(37, 18) : BOOL
42 : ite(41, 20, 21) : BV:8
43 : ite(40, 17, 42) : BV:8
44 : ite(39, 14, 43) : BV:8
45 : ite(38, 11, 44) : BV:8
46 : bvadd(6, 7) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : eq(46, 15) : BOOL
50 : eq(46, 18) : BOOL
51 : ite(50, 20, 21) : BV:8
52 : ite(49, 17, 51) : BV:8
53 : ite(48, 14, 52) : BV:8
54 : ite(47, 11, 53) : BV:8
55 : bvconcat(25, 35, 45, 54) : BV:32
56 : ite(3, 2, 55) : BV:32
57 : lambda(1, 56) : FUNCTION[BV:32 -> BV:32]
58 : sym_const(57) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1079274789 { 0x40546d25 +1.65958082e1 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2151810052 { 0x80420404 -2143157244 -1.51574754e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2151810055 { 0x80420407 -2143157241 -1.51574790e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2930012416 { 0xaea47100 -1364954880 -1.28469848e222 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2930012419 { 0xaea47103 -1364954877 -1.28469884e222 } : BV:32
=counter_example.random_seed
2233806052
=counter_example_end
=global nodece 13 num_edges_traversed 2
=global nodece 13 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 14
=global nodece 14 nodece z3.ce780.num_edges_traversed3
=global nodece 14 nodece_path
=global nodece 14 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 14 nodece_cached_counterexample
=counter_example_begin z3.ce780 3955d7f4aec407fef2b901a119d156d
=input.spec-%var-x-1
1 : Lambda63 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 65535 { 0xffff +1.781238e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 65536 { 0x10000 +1.781250e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda64 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 4286299904 { 0xff7bbf00 -8667392 -1.96676635e127 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 2930012418 { 0xaea47102 -1364954878 -1.28469872e222 } : BV:32
25 : eq(23, 24) : BOOL
26 : 123 { 0x7b } : BV:8
27 : 2151810054 { 0x80420406 -2143157242 -1.51574778e129 } : BV:32
28 : eq(23, 27) : BOOL
29 : 1 { 0x1 } : BV:8
30 : 2930012417 { 0xaea47101 -1364954879 -1.28469860e222 } : BV:32
31 : eq(23, 30) : BOOL
32 : 191 { 0xbf -65 } : BV:8
33 : 2930012419 { 0xaea47103 -1364954877 -1.28469884e222 } : BV:32
34 : eq(23, 33) : BOOL
35 : 255 { 0xff -1 } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvadd(41, 21, 22) : BV:32
43 : eq(42, 24) : BOOL
44 : eq(42, 27) : BOOL
45 : eq(42, 30) : BOOL
46 : eq(42, 33) : BOOL
47 : ite(46, 35, 36) : BV:8
48 : ite(45, 32, 47) : BV:8
49 : ite(44, 29, 48) : BV:8
50 : ite(43, 26, 49) : BV:8
51 : 1 { 0x1 +1.11e129 } : BV:32
52 : bvadd(51, 21, 22) : BV:32
53 : eq(52, 24) : BOOL
54 : eq(52, 27) : BOOL
55 : eq(52, 30) : BOOL
56 : eq(52, 33) : BOOL
57 : ite(56, 35, 36) : BV:8
58 : ite(55, 32, 57) : BV:8
59 : ite(54, 29, 58) : BV:8
60 : ite(53, 26, 59) : BV:8
61 : bvadd(21, 22) : BV:32
62 : eq(61, 24) : BOOL
63 : eq(61, 27) : BOOL
64 : eq(61, 30) : BOOL
65 : eq(61, 33) : BOOL
66 : ite(65, 35, 36) : BV:8
67 : ite(64, 32, 66) : BV:8
68 : ite(63, 29, 67) : BV:8
69 : ite(62, 26, 68) : BV:8
70 : bvconcat(40, 50, 60, 69) : BV:32
71 : ite(18, 2, 70) : BV:32
72 : lambda(17, 71) : FUNCTION[BV:32 -> BV:32]
73 : map(16, 72) : MAP[BV:32 -> BV:32]
74 : sym_const(73) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L3%6%bbentry
1 : Lambda63 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 65535 { 0xffff +1.781238e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 65536 { 0x10000 +1.781250e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda64 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 4286299904 { 0xff7bbf00 -8667392 -1.96676635e127 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 2930012418 { 0xaea47102 -1364954878 -1.28469872e222 } : BV:32
25 : eq(23, 24) : BOOL
26 : 123 { 0x7b } : BV:8
27 : 2151810054 { 0x80420406 -2143157242 -1.51574778e129 } : BV:32
28 : eq(23, 27) : BOOL
29 : 1 { 0x1 } : BV:8
30 : 2930012417 { 0xaea47101 -1364954879 -1.28469860e222 } : BV:32
31 : eq(23, 30) : BOOL
32 : 191 { 0xbf -65 } : BV:8
33 : 2930012419 { 0xaea47103 -1364954877 -1.28469884e222 } : BV:32
34 : eq(23, 33) : BOOL
35 : 255 { 0xff -1 } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvadd(41, 21, 22) : BV:32
43 : eq(42, 24) : BOOL
44 : eq(42, 27) : BOOL
45 : eq(42, 30) : BOOL
46 : eq(42, 33) : BOOL
47 : ite(46, 35, 36) : BV:8
48 : ite(45, 32, 47) : BV:8
49 : ite(44, 29, 48) : BV:8
50 : ite(43, 26, 49) : BV:8
51 : 1 { 0x1 +1.11e129 } : BV:32
52 : bvadd(51, 21, 22) : BV:32
53 : eq(52, 24) : BOOL
54 : eq(52, 27) : BOOL
55 : eq(52, 30) : BOOL
56 : eq(52, 33) : BOOL
57 : ite(56, 35, 36) : BV:8
58 : ite(55, 32, 57) : BV:8
59 : ite(54, 29, 58) : BV:8
60 : ite(53, 26, 59) : BV:8
61 : bvadd(21, 22) : BV:32
62 : eq(61, 24) : BOOL
63 : eq(61, 27) : BOOL
64 : eq(61, 30) : BOOL
65 : eq(61, 33) : BOOL
66 : ite(65, 35, 36) : BV:8
67 : ite(64, 32, 66) : BV:8
68 : ite(63, 29, 67) : BV:8
69 : ite(62, 26, 68) : BV:8
70 : bvconcat(40, 50, 60, 69) : BV:32
71 : ite(18, 2, 70) : BV:32
72 : lambda(17, 71) : FUNCTION[BV:32 -> BV:32]
73 : map(16, 72) : MAP[BV:32 -> BV:32]
74 : sym_const(73) : MAP[BV:32 -> BV:32]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%var-ret-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 4286299904 { 0xff7bbf00 -8667392 -1.96676635e127 } : BV:32
=input.dst.llvm-%n
1 : 65536 { 0x10000 +1.781250e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 2151810053 ] -> 0, [ 2151810054; 2151810054 ] -> 1, [ 2151810055; 2930012416 ] -> 0, [ 2930012417; 2930012417 ] -> 191, [ 2930012418; 2930012418 ] -> 123, [ 2930012419; 2930012419 ] -> 255, [ 2930012420; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2151810051 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2151810052; 2151810055 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2151810056; 2930012415 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2930012416; 2930012419 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2930012420; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2930012416 { 0xaea47100 -1364954880 -1.28469848e222 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2151810052 { 0x80420404 -2143157244 -1.51574754e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%6%bbentry.0.1
1 : ([ 0; 65535 ] -> true, [ 65536; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%6%bbentry.1.1
1 : Lambda51 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 4286299904 { 0xff7bbf00 -8667392 -1.96676635e127 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 2930012418 { 0xaea47102 -1364954878 -1.28469872e222 } : BV:32
10 : eq(8, 9) : BOOL
11 : 123 { 0x7b } : BV:8
12 : 2151810054 { 0x80420406 -2143157242 -1.51574778e129 } : BV:32
13 : eq(8, 12) : BOOL
14 : 1 { 0x1 } : BV:8
15 : 2930012417 { 0xaea47101 -1364954879 -1.28469860e222 } : BV:32
16 : eq(8, 15) : BOOL
17 : 191 { 0xbf -65 } : BV:8
18 : 2930012419 { 0xaea47103 -1364954877 -1.28469884e222 } : BV:32
19 : eq(8, 18) : BOOL
20 : 255 { 0xff -1 } : BV:8
21 : 0 { 0x0 } : BV:8
22 : ite(19, 20, 21) : BV:8
23 : ite(16, 17, 22) : BV:8
24 : ite(13, 14, 23) : BV:8
25 : ite(10, 11, 24) : BV:8
26 : 2 { 0x2 +1.23e129 } : BV:32
27 : bvadd(26, 6, 7) : BV:32
28 : eq(27, 9) : BOOL
29 : eq(27, 12) : BOOL
30 : eq(27, 15) : BOOL
31 : eq(27, 18) : BOOL
32 : ite(31, 20, 21) : BV:8
33 : ite(30, 17, 32) : BV:8
34 : ite(29, 14, 33) : BV:8
35 : ite(28, 11, 34) : BV:8
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvadd(36, 6, 7) : BV:32
38 : eq(37, 9) : BOOL
39 : eq(37, 12) : BOOL
40 : eq(37, 15) : BOOL
41 : eq(37, 18) : BOOL
42 : ite(41, 20, 21) : BV:8
43 : ite(40, 17, 42) : BV:8
44 : ite(39, 14, 43) : BV:8
45 : ite(38, 11, 44) : BV:8
46 : bvadd(6, 7) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : eq(46, 15) : BOOL
50 : eq(46, 18) : BOOL
51 : ite(50, 20, 21) : BV:8
52 : ite(49, 17, 51) : BV:8
53 : ite(48, 14, 52) : BV:8
54 : ite(47, 11, 53) : BV:8
55 : bvconcat(25, 35, 45, 54) : BV:32
56 : ite(3, 2, 55) : BV:32
57 : ite(3, 2, 56) : BV:32
58 : lambda(1, 57) : FUNCTION[BV:32 -> BV:32]
59 : sym_const(58) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 65535 ] -> true, [ 65536; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : Lambda52 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 4286299904 { 0xff7bbf00 -8667392 -1.96676635e127 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 2930012418 { 0xaea47102 -1364954878 -1.28469872e222 } : BV:32
10 : eq(8, 9) : BOOL
11 : 123 { 0x7b } : BV:8
12 : 2151810054 { 0x80420406 -2143157242 -1.51574778e129 } : BV:32
13 : eq(8, 12) : BOOL
14 : 1 { 0x1 } : BV:8
15 : 2930012417 { 0xaea47101 -1364954879 -1.28469860e222 } : BV:32
16 : eq(8, 15) : BOOL
17 : 191 { 0xbf -65 } : BV:8
18 : 2930012419 { 0xaea47103 -1364954877 -1.28469884e222 } : BV:32
19 : eq(8, 18) : BOOL
20 : 255 { 0xff -1 } : BV:8
21 : 0 { 0x0 } : BV:8
22 : ite(19, 20, 21) : BV:8
23 : ite(16, 17, 22) : BV:8
24 : ite(13, 14, 23) : BV:8
25 : ite(10, 11, 24) : BV:8
26 : 2 { 0x2 +1.23e129 } : BV:32
27 : bvadd(26, 6, 7) : BV:32
28 : eq(27, 9) : BOOL
29 : eq(27, 12) : BOOL
30 : eq(27, 15) : BOOL
31 : eq(27, 18) : BOOL
32 : ite(31, 20, 21) : BV:8
33 : ite(30, 17, 32) : BV:8
34 : ite(29, 14, 33) : BV:8
35 : ite(28, 11, 34) : BV:8
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvadd(36, 6, 7) : BV:32
38 : eq(37, 9) : BOOL
39 : eq(37, 12) : BOOL
40 : eq(37, 15) : BOOL
41 : eq(37, 18) : BOOL
42 : ite(41, 20, 21) : BV:8
43 : ite(40, 17, 42) : BV:8
44 : ite(39, 14, 43) : BV:8
45 : ite(38, 11, 44) : BV:8
46 : bvadd(6, 7) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : eq(46, 15) : BOOL
50 : eq(46, 18) : BOOL
51 : ite(50, 20, 21) : BV:8
52 : ite(49, 17, 51) : BV:8
53 : ite(48, 14, 52) : BV:8
54 : ite(47, 11, 53) : BV:8
55 : bvconcat(25, 35, 45, 54) : BV:32
56 : ite(3, 2, 55) : BV:32
57 : lambda(1, 56) : FUNCTION[BV:32 -> BV:32]
58 : sym_const(57) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1079274789 { 0x40546d25 +1.65958082e1 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2151810052 { 0x80420404 -2143157244 -1.51574754e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2151810055 { 0x80420407 -2143157241 -1.51574790e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2930012416 { 0xaea47100 -1364954880 -1.28469848e222 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2930012419 { 0xaea47103 -1364954877 -1.28469884e222 } : BV:32
=counter_example.random_seed
2233806052
=counter_example_end
=global nodece 14 num_edges_traversed 3
=global nodece 14 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 15
=global nodece 15 nodece z3.ce799.num_edges_traversed4
=global nodece 15 nodece_path
=global nodece 15 nodece_path.graph_edge_composition
(epsilon)
=global nodece 15 nodece_cached_counterexample
=counter_example_begin z3.ce799 703d9ccaffe88a197f0f99b9f17c1f6
=input.spec-%var-x-1
1 : Lambda63 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 65535 { 0xffff +1.781238e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 65536 { 0x10000 +1.781250e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda64 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 4286299904 { 0xff7bbf00 -8667392 -1.96676635e127 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 2930012418 { 0xaea47102 -1364954878 -1.28469872e222 } : BV:32
25 : eq(23, 24) : BOOL
26 : 123 { 0x7b } : BV:8
27 : 2151810054 { 0x80420406 -2143157242 -1.51574778e129 } : BV:32
28 : eq(23, 27) : BOOL
29 : 1 { 0x1 } : BV:8
30 : 2930012417 { 0xaea47101 -1364954879 -1.28469860e222 } : BV:32
31 : eq(23, 30) : BOOL
32 : 191 { 0xbf -65 } : BV:8
33 : 2930012419 { 0xaea47103 -1364954877 -1.28469884e222 } : BV:32
34 : eq(23, 33) : BOOL
35 : 255 { 0xff -1 } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvadd(41, 21, 22) : BV:32
43 : eq(42, 24) : BOOL
44 : eq(42, 27) : BOOL
45 : eq(42, 30) : BOOL
46 : eq(42, 33) : BOOL
47 : ite(46, 35, 36) : BV:8
48 : ite(45, 32, 47) : BV:8
49 : ite(44, 29, 48) : BV:8
50 : ite(43, 26, 49) : BV:8
51 : 1 { 0x1 +1.11e129 } : BV:32
52 : bvadd(51, 21, 22) : BV:32
53 : eq(52, 24) : BOOL
54 : eq(52, 27) : BOOL
55 : eq(52, 30) : BOOL
56 : eq(52, 33) : BOOL
57 : ite(56, 35, 36) : BV:8
58 : ite(55, 32, 57) : BV:8
59 : ite(54, 29, 58) : BV:8
60 : ite(53, 26, 59) : BV:8
61 : bvadd(21, 22) : BV:32
62 : eq(61, 24) : BOOL
63 : eq(61, 27) : BOOL
64 : eq(61, 30) : BOOL
65 : eq(61, 33) : BOOL
66 : ite(65, 35, 36) : BV:8
67 : ite(64, 32, 66) : BV:8
68 : ite(63, 29, 67) : BV:8
69 : ite(62, 26, 68) : BV:8
70 : bvconcat(40, 50, 60, 69) : BV:32
71 : ite(18, 2, 70) : BV:32
72 : lambda(17, 71) : FUNCTION[BV:32 -> BV:32]
73 : map(16, 72) : MAP[BV:32 -> BV:32]
74 : sym_const(73) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L3%6%bbentry
1 : Lambda63 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 65535 { 0xffff +1.781238e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 65536 { 0x10000 +1.781250e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda64 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 4286299904 { 0xff7bbf00 -8667392 -1.96676635e127 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 2930012418 { 0xaea47102 -1364954878 -1.28469872e222 } : BV:32
25 : eq(23, 24) : BOOL
26 : 123 { 0x7b } : BV:8
27 : 2151810054 { 0x80420406 -2143157242 -1.51574778e129 } : BV:32
28 : eq(23, 27) : BOOL
29 : 1 { 0x1 } : BV:8
30 : 2930012417 { 0xaea47101 -1364954879 -1.28469860e222 } : BV:32
31 : eq(23, 30) : BOOL
32 : 191 { 0xbf -65 } : BV:8
33 : 2930012419 { 0xaea47103 -1364954877 -1.28469884e222 } : BV:32
34 : eq(23, 33) : BOOL
35 : 255 { 0xff -1 } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvadd(41, 21, 22) : BV:32
43 : eq(42, 24) : BOOL
44 : eq(42, 27) : BOOL
45 : eq(42, 30) : BOOL
46 : eq(42, 33) : BOOL
47 : ite(46, 35, 36) : BV:8
48 : ite(45, 32, 47) : BV:8
49 : ite(44, 29, 48) : BV:8
50 : ite(43, 26, 49) : BV:8
51 : 1 { 0x1 +1.11e129 } : BV:32
52 : bvadd(51, 21, 22) : BV:32
53 : eq(52, 24) : BOOL
54 : eq(52, 27) : BOOL
55 : eq(52, 30) : BOOL
56 : eq(52, 33) : BOOL
57 : ite(56, 35, 36) : BV:8
58 : ite(55, 32, 57) : BV:8
59 : ite(54, 29, 58) : BV:8
60 : ite(53, 26, 59) : BV:8
61 : bvadd(21, 22) : BV:32
62 : eq(61, 24) : BOOL
63 : eq(61, 27) : BOOL
64 : eq(61, 30) : BOOL
65 : eq(61, 33) : BOOL
66 : ite(65, 35, 36) : BV:8
67 : ite(64, 32, 66) : BV:8
68 : ite(63, 29, 67) : BV:8
69 : ite(62, 26, 68) : BV:8
70 : bvconcat(40, 50, 60, 69) : BV:32
71 : ite(18, 2, 70) : BV:32
72 : lambda(17, 71) : FUNCTION[BV:32 -> BV:32]
73 : map(16, 72) : MAP[BV:32 -> BV:32]
74 : sym_const(73) : MAP[BV:32 -> BV:32]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-ret-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 4286299904 { 0xff7bbf00 -8667392 -1.96676635e127 } : BV:32
=input.dst.llvm-%n
1 : 65536 { 0x10000 +1.781250e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 2151810053 ] -> 0, [ 2151810054; 2151810054 ] -> 1, [ 2151810055; 2930012416 ] -> 0, [ 2930012417; 2930012417 ] -> 191, [ 2930012418; 2930012418 ] -> 123, [ 2930012419; 2930012419 ] -> 255, [ 2930012420; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2151810051 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2151810052; 2151810055 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2151810056; 2930012415 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2930012416; 2930012419 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2930012420; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2930012416 { 0xaea47100 -1364954880 -1.28469848e222 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2151810052 { 0x80420404 -2143157244 -1.51574754e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%6%bbentry.0.1
1 : ([ 0; 65535 ] -> true, [ 65536; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%6%bbentry.1.1
1 : Lambda51 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 4286299904 { 0xff7bbf00 -8667392 -1.96676635e127 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 2930012418 { 0xaea47102 -1364954878 -1.28469872e222 } : BV:32
10 : eq(8, 9) : BOOL
11 : 123 { 0x7b } : BV:8
12 : 2151810054 { 0x80420406 -2143157242 -1.51574778e129 } : BV:32
13 : eq(8, 12) : BOOL
14 : 1 { 0x1 } : BV:8
15 : 2930012417 { 0xaea47101 -1364954879 -1.28469860e222 } : BV:32
16 : eq(8, 15) : BOOL
17 : 191 { 0xbf -65 } : BV:8
18 : 2930012419 { 0xaea47103 -1364954877 -1.28469884e222 } : BV:32
19 : eq(8, 18) : BOOL
20 : 255 { 0xff -1 } : BV:8
21 : 0 { 0x0 } : BV:8
22 : ite(19, 20, 21) : BV:8
23 : ite(16, 17, 22) : BV:8
24 : ite(13, 14, 23) : BV:8
25 : ite(10, 11, 24) : BV:8
26 : 2 { 0x2 +1.23e129 } : BV:32
27 : bvadd(26, 6, 7) : BV:32
28 : eq(27, 9) : BOOL
29 : eq(27, 12) : BOOL
30 : eq(27, 15) : BOOL
31 : eq(27, 18) : BOOL
32 : ite(31, 20, 21) : BV:8
33 : ite(30, 17, 32) : BV:8
34 : ite(29, 14, 33) : BV:8
35 : ite(28, 11, 34) : BV:8
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvadd(36, 6, 7) : BV:32
38 : eq(37, 9) : BOOL
39 : eq(37, 12) : BOOL
40 : eq(37, 15) : BOOL
41 : eq(37, 18) : BOOL
42 : ite(41, 20, 21) : BV:8
43 : ite(40, 17, 42) : BV:8
44 : ite(39, 14, 43) : BV:8
45 : ite(38, 11, 44) : BV:8
46 : bvadd(6, 7) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : eq(46, 15) : BOOL
50 : eq(46, 18) : BOOL
51 : ite(50, 20, 21) : BV:8
52 : ite(49, 17, 51) : BV:8
53 : ite(48, 14, 52) : BV:8
54 : ite(47, 11, 53) : BV:8
55 : bvconcat(25, 35, 45, 54) : BV:32
56 : ite(3, 2, 55) : BV:32
57 : ite(3, 2, 56) : BV:32
58 : lambda(1, 57) : FUNCTION[BV:32 -> BV:32]
59 : sym_const(58) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 65535 ] -> true, [ 65536; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : Lambda52 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 4286299904 { 0xff7bbf00 -8667392 -1.96676635e127 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 2930012418 { 0xaea47102 -1364954878 -1.28469872e222 } : BV:32
10 : eq(8, 9) : BOOL
11 : 123 { 0x7b } : BV:8
12 : 2151810054 { 0x80420406 -2143157242 -1.51574778e129 } : BV:32
13 : eq(8, 12) : BOOL
14 : 1 { 0x1 } : BV:8
15 : 2930012417 { 0xaea47101 -1364954879 -1.28469860e222 } : BV:32
16 : eq(8, 15) : BOOL
17 : 191 { 0xbf -65 } : BV:8
18 : 2930012419 { 0xaea47103 -1364954877 -1.28469884e222 } : BV:32
19 : eq(8, 18) : BOOL
20 : 255 { 0xff -1 } : BV:8
21 : 0 { 0x0 } : BV:8
22 : ite(19, 20, 21) : BV:8
23 : ite(16, 17, 22) : BV:8
24 : ite(13, 14, 23) : BV:8
25 : ite(10, 11, 24) : BV:8
26 : 2 { 0x2 +1.23e129 } : BV:32
27 : bvadd(26, 6, 7) : BV:32
28 : eq(27, 9) : BOOL
29 : eq(27, 12) : BOOL
30 : eq(27, 15) : BOOL
31 : eq(27, 18) : BOOL
32 : ite(31, 20, 21) : BV:8
33 : ite(30, 17, 32) : BV:8
34 : ite(29, 14, 33) : BV:8
35 : ite(28, 11, 34) : BV:8
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvadd(36, 6, 7) : BV:32
38 : eq(37, 9) : BOOL
39 : eq(37, 12) : BOOL
40 : eq(37, 15) : BOOL
41 : eq(37, 18) : BOOL
42 : ite(41, 20, 21) : BV:8
43 : ite(40, 17, 42) : BV:8
44 : ite(39, 14, 43) : BV:8
45 : ite(38, 11, 44) : BV:8
46 : bvadd(6, 7) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : eq(46, 15) : BOOL
50 : eq(46, 18) : BOOL
51 : ite(50, 20, 21) : BV:8
52 : ite(49, 17, 51) : BV:8
53 : ite(48, 14, 52) : BV:8
54 : ite(47, 11, 53) : BV:8
55 : bvconcat(25, 35, 45, 54) : BV:32
56 : ite(3, 2, 55) : BV:32
57 : lambda(1, 56) : FUNCTION[BV:32 -> BV:32]
58 : sym_const(57) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1079274789 { 0x40546d25 +1.65958082e1 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2151810052 { 0x80420404 -2143157244 -1.51574754e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2151810055 { 0x80420407 -2143157241 -1.51574790e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2930012416 { 0xaea47100 -1364954880 -1.28469848e222 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2930012419 { 0xaea47103 -1364954877 -1.28469884e222 } : BV:32
=counter_example.random_seed
2233806052
=counter_example_end
=global nodece 15 num_edges_traversed 4
=global nodece 15 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 16
=global nodece 16 nodece z3v487.ce753.num_edges_traversed2
=global nodece 16 nodece_path
=global nodece 16 nodece_path.graph_edge_composition
(epsilon)
=global nodece 16 nodece_cached_counterexample
=counter_example_begin z3v487.ce753 5db913b264d1182956d5e7b270c69e17
=input.spec-%var-x-1
1 : Lambda73 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 65535 { 0xffff +1.781238e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 65536 { 0x10000 +1.781250e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda74 : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 17) : BV:32
21 : bvadd(18, 20, 2) : BV:32
22 : 14 { 0xe +1.166e129 } : BV:32
23 : eq(21, 22) : BOOL
24 : 1 { 0x1 } : BV:8
25 : 0 { 0x0 } : BV:8
26 : ite(23, 24, 25) : BV:8
27 : 2 { 0x2 +1.23e129 } : BV:32
28 : bvadd(27, 20, 2) : BV:32
29 : eq(28, 22) : BOOL
30 : ite(29, 24, 25) : BV:8
31 : 1 { 0x1 +1.11e129 } : BV:32
32 : bvadd(31, 20, 2) : BV:32
33 : eq(32, 22) : BOOL
34 : ite(33, 24, 25) : BV:8
35 : bvadd(20, 2) : BV:32
36 : eq(35, 22) : BOOL
37 : ite(36, 24, 25) : BV:8
38 : bvconcat(26, 30, 34, 37) : BV:32
39 : lambda(17, 38) : FUNCTION[BV:32 -> BV:32]
40 : map(16, 39) : MAP[BV:32 -> BV:32]
41 : sym_const(40) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L3%6%bbentry
1 : Lambda73 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 65535 { 0xffff +1.781238e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 65536 { 0x10000 +1.781250e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda74 : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 17) : BV:32
21 : bvadd(18, 20, 2) : BV:32
22 : 14 { 0xe +1.166e129 } : BV:32
23 : eq(21, 22) : BOOL
24 : 1 { 0x1 } : BV:8
25 : 0 { 0x0 } : BV:8
26 : ite(23, 24, 25) : BV:8
27 : 2 { 0x2 +1.23e129 } : BV:32
28 : bvadd(27, 20, 2) : BV:32
29 : eq(28, 22) : BOOL
30 : ite(29, 24, 25) : BV:8
31 : 1 { 0x1 +1.11e129 } : BV:32
32 : bvadd(31, 20, 2) : BV:32
33 : eq(32, 22) : BOOL
34 : ite(33, 24, 25) : BV:8
35 : bvadd(20, 2) : BV:32
36 : eq(35, 22) : BOOL
37 : ite(36, 24, 25) : BV:8
38 : bvconcat(26, 30, 34, 37) : BV:32
39 : lambda(17, 38) : FUNCTION[BV:32 -> BV:32]
40 : map(16, 39) : MAP[BV:32 -> BV:32]
41 : sym_const(40) : MAP[BV:32 -> BV:32]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-ret-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 65536 { 0x10000 +1.781250e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 13 ] -> 0, [ 14; 14 ] -> 1, [ 15; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 7 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 8; 11 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 12; 15 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 16; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 12 { 0xc +1.143e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%6%bbentry.0.1
1 : ([ 0; 65535 ] -> true, [ 65536; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%6%bbentry.1.1
1 : Lambda56 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(3, 1) : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : bvadd(2, 4, 5) : BV:32
7 : 14 { 0xe +1.166e129 } : BV:32
8 : eq(6, 7) : BOOL
9 : 1 { 0x1 } : BV:8
10 : 0 { 0x0 } : BV:8
11 : ite(8, 9, 10) : BV:8
12 : 2 { 0x2 +1.23e129 } : BV:32
13 : bvadd(12, 4, 5) : BV:32
14 : eq(13, 7) : BOOL
15 : ite(14, 9, 10) : BV:8
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : bvadd(16, 4, 5) : BV:32
18 : eq(17, 7) : BOOL
19 : ite(18, 9, 10) : BV:8
20 : bvadd(4, 5) : BV:32
21 : eq(20, 7) : BOOL
22 : ite(21, 9, 10) : BV:8
23 : bvconcat(11, 15, 19, 22) : BV:32
24 : lambda(1, 23) : FUNCTION[BV:32 -> BV:32]
25 : sym_const(24) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 65535 ] -> true, [ 65536; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : Lambda57 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(3, 1) : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : bvadd(2, 4, 5) : BV:32
7 : 14 { 0xe +1.166e129 } : BV:32
8 : eq(6, 7) : BOOL
9 : 1 { 0x1 } : BV:8
10 : 0 { 0x0 } : BV:8
11 : ite(8, 9, 10) : BV:8
12 : 2 { 0x2 +1.23e129 } : BV:32
13 : bvadd(12, 4, 5) : BV:32
14 : eq(13, 7) : BOOL
15 : ite(14, 9, 10) : BV:8
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : bvadd(16, 4, 5) : BV:32
18 : eq(17, 7) : BOOL
19 : ite(18, 9, 10) : BV:8
20 : bvadd(4, 5) : BV:32
21 : eq(20, 7) : BOOL
22 : ite(21, 9, 10) : BV:8
23 : bvconcat(11, 15, 19, 22) : BV:32
24 : lambda(1, 23) : FUNCTION[BV:32 -> BV:32]
25 : sym_const(24) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 578391065 { 0x22798c19 +1.94958794e197 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 12 { 0xc +1.143e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 15 { 0xf +1.178e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 11 { 0xb +1.131e129 } : BV:32
=counter_example.random_seed
404338641
=counter_example_end
=global nodece 16 num_edges_traversed 2
=global nodece 16 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 17
=global nodece 17 nodece z3.ce743.num_edges_traversed2
=global nodece 17 nodece_path
=global nodece 17 nodece_path.graph_edge_composition
(epsilon)
=global nodece 17 nodece_cached_counterexample
=counter_example_begin z3.ce743 dde6a9a25bb7f33c7841cdc47acd904c
=input.spec-%var-x-1
1 : Lambda99 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3082270495 { 0xb7b7b71f -1212696801 -1.43527591e240 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3082270496 { 0xb7b7b720 -1212696800 -1.43527603e240 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda100 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3086833152 { 0xb7fd5600 -1208134144 -1.97918701e240 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 3086833153 { 0xb7fd5601 -1208134143 -1.97918713e240 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 911867418 { 0x3659fe1a +1.70306706e237 } : BV:32
28 : eq(23, 27) : BOOL
29 : 253 { 0xfd -3 } : BV:8
30 : 2392657684 { 0x8e9d0f14 -1902309612 -1.22702264e158 } : BV:32
31 : eq(23, 30) : BOOL
32 : 32 { 0x20 } : BV:8
33 : 3086833155 { 0xb7fd5603 -1208134141 -1.97918736e240 } : BV:32
34 : eq(23, 33) : BOOL
35 : 911867417 { 0x3659fe19 +1.70306694e237 } : BV:32
36 : eq(23, 35) : BOOL
37 : 86 { 0x56 } : BV:8
38 : 3086833154 { 0xb7fd5602 -1208134142 -1.97918725e240 } : BV:32
39 : eq(23, 38) : BOOL
40 : eq(23, 22) : BOOL
41 : 911867416 { 0x3659fe18 +1.70306682e237 } : BV:32
42 : eq(23, 41) : BOOL
43 : 183 { 0xb7 -73 } : BV:8
44 : ite(42, 26, 43) : BV:8
45 : ite(40, 26, 44) : BV:8
46 : ite(39, 26, 45) : BV:8
47 : ite(36, 37, 46) : BV:8
48 : ite(34, 26, 47) : BV:8
49 : ite(31, 32, 48) : BV:8
50 : ite(28, 29, 49) : BV:8
51 : ite(25, 26, 50) : BV:8
52 : 2 { 0x2 +1.23e129 } : BV:32
53 : bvadd(52, 21, 22) : BV:32
54 : eq(53, 24) : BOOL
55 : eq(53, 27) : BOOL
56 : eq(53, 30) : BOOL
57 : eq(53, 33) : BOOL
58 : eq(53, 35) : BOOL
59 : eq(53, 38) : BOOL
60 : eq(53, 22) : BOOL
61 : eq(53, 41) : BOOL
62 : ite(61, 26, 43) : BV:8
63 : ite(60, 26, 62) : BV:8
64 : ite(59, 26, 63) : BV:8
65 : ite(58, 37, 64) : BV:8
66 : ite(57, 26, 65) : BV:8
67 : ite(56, 32, 66) : BV:8
68 : ite(55, 29, 67) : BV:8
69 : ite(54, 26, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 21, 22) : BV:32
72 : eq(71, 24) : BOOL
73 : eq(71, 27) : BOOL
74 : eq(71, 30) : BOOL
75 : eq(71, 33) : BOOL
76 : eq(71, 35) : BOOL
77 : eq(71, 38) : BOOL
78 : eq(71, 22) : BOOL
79 : eq(71, 41) : BOOL
80 : ite(79, 26, 43) : BV:8
81 : ite(78, 26, 80) : BV:8
82 : ite(77, 26, 81) : BV:8
83 : ite(76, 37, 82) : BV:8
84 : ite(75, 26, 83) : BV:8
85 : ite(74, 32, 84) : BV:8
86 : ite(73, 29, 85) : BV:8
87 : ite(72, 26, 86) : BV:8
88 : bvadd(21, 22) : BV:32
89 : eq(88, 24) : BOOL
90 : eq(88, 27) : BOOL
91 : eq(88, 30) : BOOL
92 : eq(88, 33) : BOOL
93 : eq(88, 35) : BOOL
94 : eq(88, 38) : BOOL
95 : eq(88, 22) : BOOL
96 : eq(88, 41) : BOOL
97 : ite(96, 26, 43) : BV:8
98 : ite(95, 26, 97) : BV:8
99 : ite(94, 26, 98) : BV:8
100 : ite(93, 37, 99) : BV:8
101 : ite(92, 26, 100) : BV:8
102 : ite(91, 32, 101) : BV:8
103 : ite(90, 29, 102) : BV:8
104 : ite(89, 26, 103) : BV:8
105 : bvconcat(51, 69, 87, 104) : BV:32
106 : ite(18, 2, 105) : BV:32
107 : lambda(17, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(16, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L3%6%bbentry
1 : Lambda99 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3082270495 { 0xb7b7b71f -1212696801 -1.43527591e240 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3082270496 { 0xb7b7b720 -1212696800 -1.43527603e240 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda100 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3086833152 { 0xb7fd5600 -1208134144 -1.97918701e240 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 3086833153 { 0xb7fd5601 -1208134143 -1.97918713e240 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 911867418 { 0x3659fe1a +1.70306706e237 } : BV:32
28 : eq(23, 27) : BOOL
29 : 253 { 0xfd -3 } : BV:8
30 : 2392657684 { 0x8e9d0f14 -1902309612 -1.22702264e158 } : BV:32
31 : eq(23, 30) : BOOL
32 : 32 { 0x20 } : BV:8
33 : 3086833155 { 0xb7fd5603 -1208134141 -1.97918736e240 } : BV:32
34 : eq(23, 33) : BOOL
35 : 911867417 { 0x3659fe19 +1.70306694e237 } : BV:32
36 : eq(23, 35) : BOOL
37 : 86 { 0x56 } : BV:8
38 : 3086833154 { 0xb7fd5602 -1208134142 -1.97918725e240 } : BV:32
39 : eq(23, 38) : BOOL
40 : eq(23, 22) : BOOL
41 : 911867416 { 0x3659fe18 +1.70306682e237 } : BV:32
42 : eq(23, 41) : BOOL
43 : 183 { 0xb7 -73 } : BV:8
44 : ite(42, 26, 43) : BV:8
45 : ite(40, 26, 44) : BV:8
46 : ite(39, 26, 45) : BV:8
47 : ite(36, 37, 46) : BV:8
48 : ite(34, 26, 47) : BV:8
49 : ite(31, 32, 48) : BV:8
50 : ite(28, 29, 49) : BV:8
51 : ite(25, 26, 50) : BV:8
52 : 2 { 0x2 +1.23e129 } : BV:32
53 : bvadd(52, 21, 22) : BV:32
54 : eq(53, 24) : BOOL
55 : eq(53, 27) : BOOL
56 : eq(53, 30) : BOOL
57 : eq(53, 33) : BOOL
58 : eq(53, 35) : BOOL
59 : eq(53, 38) : BOOL
60 : eq(53, 22) : BOOL
61 : eq(53, 41) : BOOL
62 : ite(61, 26, 43) : BV:8
63 : ite(60, 26, 62) : BV:8
64 : ite(59, 26, 63) : BV:8
65 : ite(58, 37, 64) : BV:8
66 : ite(57, 26, 65) : BV:8
67 : ite(56, 32, 66) : BV:8
68 : ite(55, 29, 67) : BV:8
69 : ite(54, 26, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 21, 22) : BV:32
72 : eq(71, 24) : BOOL
73 : eq(71, 27) : BOOL
74 : eq(71, 30) : BOOL
75 : eq(71, 33) : BOOL
76 : eq(71, 35) : BOOL
77 : eq(71, 38) : BOOL
78 : eq(71, 22) : BOOL
79 : eq(71, 41) : BOOL
80 : ite(79, 26, 43) : BV:8
81 : ite(78, 26, 80) : BV:8
82 : ite(77, 26, 81) : BV:8
83 : ite(76, 37, 82) : BV:8
84 : ite(75, 26, 83) : BV:8
85 : ite(74, 32, 84) : BV:8
86 : ite(73, 29, 85) : BV:8
87 : ite(72, 26, 86) : BV:8
88 : bvadd(21, 22) : BV:32
89 : eq(88, 24) : BOOL
90 : eq(88, 27) : BOOL
91 : eq(88, 30) : BOOL
92 : eq(88, 33) : BOOL
93 : eq(88, 35) : BOOL
94 : eq(88, 38) : BOOL
95 : eq(88, 22) : BOOL
96 : eq(88, 41) : BOOL
97 : ite(96, 26, 43) : BV:8
98 : ite(95, 26, 97) : BV:8
99 : ite(94, 26, 98) : BV:8
100 : ite(93, 37, 99) : BV:8
101 : ite(92, 26, 100) : BV:8
102 : ite(91, 32, 101) : BV:8
103 : ite(90, 29, 102) : BV:8
104 : ite(89, 26, 103) : BV:8
105 : bvconcat(51, 69, 87, 104) : BV:32
106 : ite(18, 2, 105) : BV:32
107 : lambda(17, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(16, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-ret-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 3086833152 { 0xb7fd5600 -1208134144 -1.97918701e240 } : BV:32
=input.dst.llvm-%n
1 : 3082270496 { 0xb7b7b720 -1212696800 -1.43527603e240 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 911867415 ] -> 183, [ 911867416; 911867416 ] -> 0, [ 911867417; 911867417 ] -> 86, [ 911867418; 911867418 ] -> 253, [ 911867419; 2392657683 ] -> 183, [ 2392657684; 2392657684 ] -> 32, [ 2392657685; 3086833151 ] -> 183, [ 3086833152; 3086833155 ] -> 0, [ 3086833156; 4294967295 ] -> 183, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 911867415 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 911867416; 911867419 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 911867420; 2392657683 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2392657684; 2392657687 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2392657688; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 911867416 { 0x3659fe18 +1.70306682e237 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2392657684 { 0x8e9d0f14 -1902309612 -1.22702264e158 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%6%bbentry.0.1
1 : ([ 0; 3082270495 ] -> true, [ 3082270496; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%6%bbentry.1.1
1 : Lambda87 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3086833152 { 0xb7fd5600 -1208134144 -1.97918701e240 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 3086833153 { 0xb7fd5601 -1208134143 -1.97918713e240 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 911867418 { 0x3659fe1a +1.70306706e237 } : BV:32
13 : eq(8, 12) : BOOL
14 : 253 { 0xfd -3 } : BV:8
15 : 2392657684 { 0x8e9d0f14 -1902309612 -1.22702264e158 } : BV:32
16 : eq(8, 15) : BOOL
17 : 32 { 0x20 } : BV:8
18 : 3086833155 { 0xb7fd5603 -1208134141 -1.97918736e240 } : BV:32
19 : eq(8, 18) : BOOL
20 : 911867417 { 0x3659fe19 +1.70306694e237 } : BV:32
21 : eq(8, 20) : BOOL
22 : 86 { 0x56 } : BV:8
23 : 3086833154 { 0xb7fd5602 -1208134142 -1.97918725e240 } : BV:32
24 : eq(8, 23) : BOOL
25 : eq(8, 7) : BOOL
26 : 911867416 { 0x3659fe18 +1.70306682e237 } : BV:32
27 : eq(8, 26) : BOOL
28 : 183 { 0xb7 -73 } : BV:8
29 : ite(27, 11, 28) : BV:8
30 : ite(25, 11, 29) : BV:8
31 : ite(24, 11, 30) : BV:8
32 : ite(21, 22, 31) : BV:8
33 : ite(19, 11, 32) : BV:8
34 : ite(16, 17, 33) : BV:8
35 : ite(13, 14, 34) : BV:8
36 : ite(10, 11, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 6, 7) : BV:32
39 : eq(38, 9) : BOOL
40 : eq(38, 12) : BOOL
41 : eq(38, 15) : BOOL
42 : eq(38, 18) : BOOL
43 : eq(38, 20) : BOOL
44 : eq(38, 23) : BOOL
45 : eq(38, 7) : BOOL
46 : eq(38, 26) : BOOL
47 : ite(46, 11, 28) : BV:8
48 : ite(45, 11, 47) : BV:8
49 : ite(44, 11, 48) : BV:8
50 : ite(43, 22, 49) : BV:8
51 : ite(42, 11, 50) : BV:8
52 : ite(41, 17, 51) : BV:8
53 : ite(40, 14, 52) : BV:8
54 : ite(39, 11, 53) : BV:8
55 : 1 { 0x1 +1.11e129 } : BV:32
56 : bvadd(55, 6, 7) : BV:32
57 : eq(56, 9) : BOOL
58 : eq(56, 12) : BOOL
59 : eq(56, 15) : BOOL
60 : eq(56, 18) : BOOL
61 : eq(56, 20) : BOOL
62 : eq(56, 23) : BOOL
63 : eq(56, 7) : BOOL
64 : eq(56, 26) : BOOL
65 : ite(64, 11, 28) : BV:8
66 : ite(63, 11, 65) : BV:8
67 : ite(62, 11, 66) : BV:8
68 : ite(61, 22, 67) : BV:8
69 : ite(60, 11, 68) : BV:8
70 : ite(59, 17, 69) : BV:8
71 : ite(58, 14, 70) : BV:8
72 : ite(57, 11, 71) : BV:8
73 : bvadd(6, 7) : BV:32
74 : eq(73, 9) : BOOL
75 : eq(73, 12) : BOOL
76 : eq(73, 15) : BOOL
77 : eq(73, 18) : BOOL
78 : eq(73, 20) : BOOL
79 : eq(73, 23) : BOOL
80 : eq(73, 7) : BOOL
81 : eq(73, 26) : BOOL
82 : ite(81, 11, 28) : BV:8
83 : ite(80, 11, 82) : BV:8
84 : ite(79, 11, 83) : BV:8
85 : ite(78, 22, 84) : BV:8
86 : ite(77, 11, 85) : BV:8
87 : ite(76, 17, 86) : BV:8
88 : ite(75, 14, 87) : BV:8
89 : ite(74, 11, 88) : BV:8
90 : bvconcat(36, 54, 72, 89) : BV:32
91 : ite(3, 2, 90) : BV:32
92 : ite(3, 2, 91) : BV:32
93 : lambda(1, 92) : FUNCTION[BV:32 -> BV:32]
94 : sym_const(93) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 3082270495 ] -> true, [ 3082270496; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : Lambda88 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3086833152 { 0xb7fd5600 -1208134144 -1.97918701e240 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 3086833153 { 0xb7fd5601 -1208134143 -1.97918713e240 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 911867418 { 0x3659fe1a +1.70306706e237 } : BV:32
13 : eq(8, 12) : BOOL
14 : 253 { 0xfd -3 } : BV:8
15 : 2392657684 { 0x8e9d0f14 -1902309612 -1.22702264e158 } : BV:32
16 : eq(8, 15) : BOOL
17 : 32 { 0x20 } : BV:8
18 : 3086833155 { 0xb7fd5603 -1208134141 -1.97918736e240 } : BV:32
19 : eq(8, 18) : BOOL
20 : 911867417 { 0x3659fe19 +1.70306694e237 } : BV:32
21 : eq(8, 20) : BOOL
22 : 86 { 0x56 } : BV:8
23 : 3086833154 { 0xb7fd5602 -1208134142 -1.97918725e240 } : BV:32
24 : eq(8, 23) : BOOL
25 : eq(8, 7) : BOOL
26 : 911867416 { 0x3659fe18 +1.70306682e237 } : BV:32
27 : eq(8, 26) : BOOL
28 : 183 { 0xb7 -73 } : BV:8
29 : ite(27, 11, 28) : BV:8
30 : ite(25, 11, 29) : BV:8
31 : ite(24, 11, 30) : BV:8
32 : ite(21, 22, 31) : BV:8
33 : ite(19, 11, 32) : BV:8
34 : ite(16, 17, 33) : BV:8
35 : ite(13, 14, 34) : BV:8
36 : ite(10, 11, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 6, 7) : BV:32
39 : eq(38, 9) : BOOL
40 : eq(38, 12) : BOOL
41 : eq(38, 15) : BOOL
42 : eq(38, 18) : BOOL
43 : eq(38, 20) : BOOL
44 : eq(38, 23) : BOOL
45 : eq(38, 7) : BOOL
46 : eq(38, 26) : BOOL
47 : ite(46, 11, 28) : BV:8
48 : ite(45, 11, 47) : BV:8
49 : ite(44, 11, 48) : BV:8
50 : ite(43, 22, 49) : BV:8
51 : ite(42, 11, 50) : BV:8
52 : ite(41, 17, 51) : BV:8
53 : ite(40, 14, 52) : BV:8
54 : ite(39, 11, 53) : BV:8
55 : 1 { 0x1 +1.11e129 } : BV:32
56 : bvadd(55, 6, 7) : BV:32
57 : eq(56, 9) : BOOL
58 : eq(56, 12) : BOOL
59 : eq(56, 15) : BOOL
60 : eq(56, 18) : BOOL
61 : eq(56, 20) : BOOL
62 : eq(56, 23) : BOOL
63 : eq(56, 7) : BOOL
64 : eq(56, 26) : BOOL
65 : ite(64, 11, 28) : BV:8
66 : ite(63, 11, 65) : BV:8
67 : ite(62, 11, 66) : BV:8
68 : ite(61, 22, 67) : BV:8
69 : ite(60, 11, 68) : BV:8
70 : ite(59, 17, 69) : BV:8
71 : ite(58, 14, 70) : BV:8
72 : ite(57, 11, 71) : BV:8
73 : bvadd(6, 7) : BV:32
74 : eq(73, 9) : BOOL
75 : eq(73, 12) : BOOL
76 : eq(73, 15) : BOOL
77 : eq(73, 18) : BOOL
78 : eq(73, 20) : BOOL
79 : eq(73, 23) : BOOL
80 : eq(73, 7) : BOOL
81 : eq(73, 26) : BOOL
82 : ite(81, 11, 28) : BV:8
83 : ite(80, 11, 82) : BV:8
84 : ite(79, 11, 83) : BV:8
85 : ite(78, 22, 84) : BV:8
86 : ite(77, 11, 85) : BV:8
87 : ite(76, 17, 86) : BV:8
88 : ite(75, 14, 87) : BV:8
89 : ite(74, 11, 88) : BV:8
90 : bvconcat(36, 54, 72, 89) : BV:32
91 : ite(3, 2, 90) : BV:32
92 : lambda(1, 91) : FUNCTION[BV:32 -> BV:32]
93 : sym_const(92) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 193259268 { 0xb84e704 +1.3830003e152 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2392657684 { 0x8e9d0f14 -1902309612 -1.22702264e158 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2392657687 { 0x8e9d0f17 -1902309609 -1.22702300e158 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 911867416 { 0x3659fe18 +1.70306682e237 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 911867419 { 0x3659fe1b +1.70306718e237 } : BV:32
=counter_example.random_seed
1795444310
=counter_example_end
=global nodece 17 num_edges_traversed 2
=global nodece 17 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 18
=global nodece 18 nodece z3.ce837.num_edges_traversed3
=global nodece 18 nodece_path
=global nodece 18 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 18 nodece_cached_counterexample
=counter_example_begin z3.ce837 c9dc7c7b98ad969c35e6b23aff8ce5
=input.spec-%var-x-1
1 : Lambda99 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3082270495 { 0xb7b7b71f -1212696801 -1.43527591e240 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3082270496 { 0xb7b7b720 -1212696800 -1.43527603e240 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda100 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3086833152 { 0xb7fd5600 -1208134144 -1.97918701e240 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 3086833153 { 0xb7fd5601 -1208134143 -1.97918713e240 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 911867418 { 0x3659fe1a +1.70306706e237 } : BV:32
28 : eq(23, 27) : BOOL
29 : 253 { 0xfd -3 } : BV:8
30 : 2392657684 { 0x8e9d0f14 -1902309612 -1.22702264e158 } : BV:32
31 : eq(23, 30) : BOOL
32 : 32 { 0x20 } : BV:8
33 : 3086833155 { 0xb7fd5603 -1208134141 -1.97918736e240 } : BV:32
34 : eq(23, 33) : BOOL
35 : 911867417 { 0x3659fe19 +1.70306694e237 } : BV:32
36 : eq(23, 35) : BOOL
37 : 86 { 0x56 } : BV:8
38 : 3086833154 { 0xb7fd5602 -1208134142 -1.97918725e240 } : BV:32
39 : eq(23, 38) : BOOL
40 : eq(23, 22) : BOOL
41 : 911867416 { 0x3659fe18 +1.70306682e237 } : BV:32
42 : eq(23, 41) : BOOL
43 : 183 { 0xb7 -73 } : BV:8
44 : ite(42, 26, 43) : BV:8
45 : ite(40, 26, 44) : BV:8
46 : ite(39, 26, 45) : BV:8
47 : ite(36, 37, 46) : BV:8
48 : ite(34, 26, 47) : BV:8
49 : ite(31, 32, 48) : BV:8
50 : ite(28, 29, 49) : BV:8
51 : ite(25, 26, 50) : BV:8
52 : 2 { 0x2 +1.23e129 } : BV:32
53 : bvadd(52, 21, 22) : BV:32
54 : eq(53, 24) : BOOL
55 : eq(53, 27) : BOOL
56 : eq(53, 30) : BOOL
57 : eq(53, 33) : BOOL
58 : eq(53, 35) : BOOL
59 : eq(53, 38) : BOOL
60 : eq(53, 22) : BOOL
61 : eq(53, 41) : BOOL
62 : ite(61, 26, 43) : BV:8
63 : ite(60, 26, 62) : BV:8
64 : ite(59, 26, 63) : BV:8
65 : ite(58, 37, 64) : BV:8
66 : ite(57, 26, 65) : BV:8
67 : ite(56, 32, 66) : BV:8
68 : ite(55, 29, 67) : BV:8
69 : ite(54, 26, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 21, 22) : BV:32
72 : eq(71, 24) : BOOL
73 : eq(71, 27) : BOOL
74 : eq(71, 30) : BOOL
75 : eq(71, 33) : BOOL
76 : eq(71, 35) : BOOL
77 : eq(71, 38) : BOOL
78 : eq(71, 22) : BOOL
79 : eq(71, 41) : BOOL
80 : ite(79, 26, 43) : BV:8
81 : ite(78, 26, 80) : BV:8
82 : ite(77, 26, 81) : BV:8
83 : ite(76, 37, 82) : BV:8
84 : ite(75, 26, 83) : BV:8
85 : ite(74, 32, 84) : BV:8
86 : ite(73, 29, 85) : BV:8
87 : ite(72, 26, 86) : BV:8
88 : bvadd(21, 22) : BV:32
89 : eq(88, 24) : BOOL
90 : eq(88, 27) : BOOL
91 : eq(88, 30) : BOOL
92 : eq(88, 33) : BOOL
93 : eq(88, 35) : BOOL
94 : eq(88, 38) : BOOL
95 : eq(88, 22) : BOOL
96 : eq(88, 41) : BOOL
97 : ite(96, 26, 43) : BV:8
98 : ite(95, 26, 97) : BV:8
99 : ite(94, 26, 98) : BV:8
100 : ite(93, 37, 99) : BV:8
101 : ite(92, 26, 100) : BV:8
102 : ite(91, 32, 101) : BV:8
103 : ite(90, 29, 102) : BV:8
104 : ite(89, 26, 103) : BV:8
105 : bvconcat(51, 69, 87, 104) : BV:32
106 : ite(18, 2, 105) : BV:32
107 : lambda(17, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(16, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L3%6%bbentry
1 : Lambda99 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3082270495 { 0xb7b7b71f -1212696801 -1.43527591e240 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3082270496 { 0xb7b7b720 -1212696800 -1.43527603e240 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda100 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3086833152 { 0xb7fd5600 -1208134144 -1.97918701e240 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 3086833153 { 0xb7fd5601 -1208134143 -1.97918713e240 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 911867418 { 0x3659fe1a +1.70306706e237 } : BV:32
28 : eq(23, 27) : BOOL
29 : 253 { 0xfd -3 } : BV:8
30 : 2392657684 { 0x8e9d0f14 -1902309612 -1.22702264e158 } : BV:32
31 : eq(23, 30) : BOOL
32 : 32 { 0x20 } : BV:8
33 : 3086833155 { 0xb7fd5603 -1208134141 -1.97918736e240 } : BV:32
34 : eq(23, 33) : BOOL
35 : 911867417 { 0x3659fe19 +1.70306694e237 } : BV:32
36 : eq(23, 35) : BOOL
37 : 86 { 0x56 } : BV:8
38 : 3086833154 { 0xb7fd5602 -1208134142 -1.97918725e240 } : BV:32
39 : eq(23, 38) : BOOL
40 : eq(23, 22) : BOOL
41 : 911867416 { 0x3659fe18 +1.70306682e237 } : BV:32
42 : eq(23, 41) : BOOL
43 : 183 { 0xb7 -73 } : BV:8
44 : ite(42, 26, 43) : BV:8
45 : ite(40, 26, 44) : BV:8
46 : ite(39, 26, 45) : BV:8
47 : ite(36, 37, 46) : BV:8
48 : ite(34, 26, 47) : BV:8
49 : ite(31, 32, 48) : BV:8
50 : ite(28, 29, 49) : BV:8
51 : ite(25, 26, 50) : BV:8
52 : 2 { 0x2 +1.23e129 } : BV:32
53 : bvadd(52, 21, 22) : BV:32
54 : eq(53, 24) : BOOL
55 : eq(53, 27) : BOOL
56 : eq(53, 30) : BOOL
57 : eq(53, 33) : BOOL
58 : eq(53, 35) : BOOL
59 : eq(53, 38) : BOOL
60 : eq(53, 22) : BOOL
61 : eq(53, 41) : BOOL
62 : ite(61, 26, 43) : BV:8
63 : ite(60, 26, 62) : BV:8
64 : ite(59, 26, 63) : BV:8
65 : ite(58, 37, 64) : BV:8
66 : ite(57, 26, 65) : BV:8
67 : ite(56, 32, 66) : BV:8
68 : ite(55, 29, 67) : BV:8
69 : ite(54, 26, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 21, 22) : BV:32
72 : eq(71, 24) : BOOL
73 : eq(71, 27) : BOOL
74 : eq(71, 30) : BOOL
75 : eq(71, 33) : BOOL
76 : eq(71, 35) : BOOL
77 : eq(71, 38) : BOOL
78 : eq(71, 22) : BOOL
79 : eq(71, 41) : BOOL
80 : ite(79, 26, 43) : BV:8
81 : ite(78, 26, 80) : BV:8
82 : ite(77, 26, 81) : BV:8
83 : ite(76, 37, 82) : BV:8
84 : ite(75, 26, 83) : BV:8
85 : ite(74, 32, 84) : BV:8
86 : ite(73, 29, 85) : BV:8
87 : ite(72, 26, 86) : BV:8
88 : bvadd(21, 22) : BV:32
89 : eq(88, 24) : BOOL
90 : eq(88, 27) : BOOL
91 : eq(88, 30) : BOOL
92 : eq(88, 33) : BOOL
93 : eq(88, 35) : BOOL
94 : eq(88, 38) : BOOL
95 : eq(88, 22) : BOOL
96 : eq(88, 41) : BOOL
97 : ite(96, 26, 43) : BV:8
98 : ite(95, 26, 97) : BV:8
99 : ite(94, 26, 98) : BV:8
100 : ite(93, 37, 99) : BV:8
101 : ite(92, 26, 100) : BV:8
102 : ite(91, 32, 101) : BV:8
103 : ite(90, 29, 102) : BV:8
104 : ite(89, 26, 103) : BV:8
105 : bvconcat(51, 69, 87, 104) : BV:32
106 : ite(18, 2, 105) : BV:32
107 : lambda(17, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(16, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%var-ret-0.L3%6%bbentry
1 : 3082270647 { 0xb7b7b7b7 -1212696649 -1.43529403e240 } : BV:32
=input.dst.llvm-%x
1 : 3086833152 { 0xb7fd5600 -1208134144 -1.97918701e240 } : BV:32
=input.dst.llvm-%n
1 : 3082270496 { 0xb7b7b720 -1212696800 -1.43527603e240 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 911867415 ] -> 183, [ 911867416; 911867416 ] -> 0, [ 911867417; 911867417 ] -> 86, [ 911867418; 911867418 ] -> 253, [ 911867419; 2392657683 ] -> 183, [ 2392657684; 2392657684 ] -> 32, [ 2392657685; 3086833151 ] -> 183, [ 3086833152; 3086833155 ] -> 0, [ 3086833156; 4294967295 ] -> 183, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 911867415 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 911867416; 911867419 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 911867420; 2392657683 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2392657684; 2392657687 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2392657688; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 911867416 { 0x3659fe18 +1.70306682e237 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2392657684 { 0x8e9d0f14 -1902309612 -1.22702264e158 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%6%bbentry.0.1
1 : ([ 0; 3082270495 ] -> true, [ 3082270496; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%6%bbentry.1.1
1 : Lambda87 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3086833152 { 0xb7fd5600 -1208134144 -1.97918701e240 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 3086833153 { 0xb7fd5601 -1208134143 -1.97918713e240 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 911867418 { 0x3659fe1a +1.70306706e237 } : BV:32
13 : eq(8, 12) : BOOL
14 : 253 { 0xfd -3 } : BV:8
15 : 2392657684 { 0x8e9d0f14 -1902309612 -1.22702264e158 } : BV:32
16 : eq(8, 15) : BOOL
17 : 32 { 0x20 } : BV:8
18 : 3086833155 { 0xb7fd5603 -1208134141 -1.97918736e240 } : BV:32
19 : eq(8, 18) : BOOL
20 : 911867417 { 0x3659fe19 +1.70306694e237 } : BV:32
21 : eq(8, 20) : BOOL
22 : 86 { 0x56 } : BV:8
23 : 3086833154 { 0xb7fd5602 -1208134142 -1.97918725e240 } : BV:32
24 : eq(8, 23) : BOOL
25 : eq(8, 7) : BOOL
26 : 911867416 { 0x3659fe18 +1.70306682e237 } : BV:32
27 : eq(8, 26) : BOOL
28 : 183 { 0xb7 -73 } : BV:8
29 : ite(27, 11, 28) : BV:8
30 : ite(25, 11, 29) : BV:8
31 : ite(24, 11, 30) : BV:8
32 : ite(21, 22, 31) : BV:8
33 : ite(19, 11, 32) : BV:8
34 : ite(16, 17, 33) : BV:8
35 : ite(13, 14, 34) : BV:8
36 : ite(10, 11, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 6, 7) : BV:32
39 : eq(38, 9) : BOOL
40 : eq(38, 12) : BOOL
41 : eq(38, 15) : BOOL
42 : eq(38, 18) : BOOL
43 : eq(38, 20) : BOOL
44 : eq(38, 23) : BOOL
45 : eq(38, 7) : BOOL
46 : eq(38, 26) : BOOL
47 : ite(46, 11, 28) : BV:8
48 : ite(45, 11, 47) : BV:8
49 : ite(44, 11, 48) : BV:8
50 : ite(43, 22, 49) : BV:8
51 : ite(42, 11, 50) : BV:8
52 : ite(41, 17, 51) : BV:8
53 : ite(40, 14, 52) : BV:8
54 : ite(39, 11, 53) : BV:8
55 : 1 { 0x1 +1.11e129 } : BV:32
56 : bvadd(55, 6, 7) : BV:32
57 : eq(56, 9) : BOOL
58 : eq(56, 12) : BOOL
59 : eq(56, 15) : BOOL
60 : eq(56, 18) : BOOL
61 : eq(56, 20) : BOOL
62 : eq(56, 23) : BOOL
63 : eq(56, 7) : BOOL
64 : eq(56, 26) : BOOL
65 : ite(64, 11, 28) : BV:8
66 : ite(63, 11, 65) : BV:8
67 : ite(62, 11, 66) : BV:8
68 : ite(61, 22, 67) : BV:8
69 : ite(60, 11, 68) : BV:8
70 : ite(59, 17, 69) : BV:8
71 : ite(58, 14, 70) : BV:8
72 : ite(57, 11, 71) : BV:8
73 : bvadd(6, 7) : BV:32
74 : eq(73, 9) : BOOL
75 : eq(73, 12) : BOOL
76 : eq(73, 15) : BOOL
77 : eq(73, 18) : BOOL
78 : eq(73, 20) : BOOL
79 : eq(73, 23) : BOOL
80 : eq(73, 7) : BOOL
81 : eq(73, 26) : BOOL
82 : ite(81, 11, 28) : BV:8
83 : ite(80, 11, 82) : BV:8
84 : ite(79, 11, 83) : BV:8
85 : ite(78, 22, 84) : BV:8
86 : ite(77, 11, 85) : BV:8
87 : ite(76, 17, 86) : BV:8
88 : ite(75, 14, 87) : BV:8
89 : ite(74, 11, 88) : BV:8
90 : bvconcat(36, 54, 72, 89) : BV:32
91 : ite(3, 2, 90) : BV:32
92 : ite(3, 2, 91) : BV:32
93 : lambda(1, 92) : FUNCTION[BV:32 -> BV:32]
94 : sym_const(93) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 3082270495 ] -> true, [ 3082270496; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : Lambda88 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3086833152 { 0xb7fd5600 -1208134144 -1.97918701e240 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 3086833153 { 0xb7fd5601 -1208134143 -1.97918713e240 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 911867418 { 0x3659fe1a +1.70306706e237 } : BV:32
13 : eq(8, 12) : BOOL
14 : 253 { 0xfd -3 } : BV:8
15 : 2392657684 { 0x8e9d0f14 -1902309612 -1.22702264e158 } : BV:32
16 : eq(8, 15) : BOOL
17 : 32 { 0x20 } : BV:8
18 : 3086833155 { 0xb7fd5603 -1208134141 -1.97918736e240 } : BV:32
19 : eq(8, 18) : BOOL
20 : 911867417 { 0x3659fe19 +1.70306694e237 } : BV:32
21 : eq(8, 20) : BOOL
22 : 86 { 0x56 } : BV:8
23 : 3086833154 { 0xb7fd5602 -1208134142 -1.97918725e240 } : BV:32
24 : eq(8, 23) : BOOL
25 : eq(8, 7) : BOOL
26 : 911867416 { 0x3659fe18 +1.70306682e237 } : BV:32
27 : eq(8, 26) : BOOL
28 : 183 { 0xb7 -73 } : BV:8
29 : ite(27, 11, 28) : BV:8
30 : ite(25, 11, 29) : BV:8
31 : ite(24, 11, 30) : BV:8
32 : ite(21, 22, 31) : BV:8
33 : ite(19, 11, 32) : BV:8
34 : ite(16, 17, 33) : BV:8
35 : ite(13, 14, 34) : BV:8
36 : ite(10, 11, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 6, 7) : BV:32
39 : eq(38, 9) : BOOL
40 : eq(38, 12) : BOOL
41 : eq(38, 15) : BOOL
42 : eq(38, 18) : BOOL
43 : eq(38, 20) : BOOL
44 : eq(38, 23) : BOOL
45 : eq(38, 7) : BOOL
46 : eq(38, 26) : BOOL
47 : ite(46, 11, 28) : BV:8
48 : ite(45, 11, 47) : BV:8
49 : ite(44, 11, 48) : BV:8
50 : ite(43, 22, 49) : BV:8
51 : ite(42, 11, 50) : BV:8
52 : ite(41, 17, 51) : BV:8
53 : ite(40, 14, 52) : BV:8
54 : ite(39, 11, 53) : BV:8
55 : 1 { 0x1 +1.11e129 } : BV:32
56 : bvadd(55, 6, 7) : BV:32
57 : eq(56, 9) : BOOL
58 : eq(56, 12) : BOOL
59 : eq(56, 15) : BOOL
60 : eq(56, 18) : BOOL
61 : eq(56, 20) : BOOL
62 : eq(56, 23) : BOOL
63 : eq(56, 7) : BOOL
64 : eq(56, 26) : BOOL
65 : ite(64, 11, 28) : BV:8
66 : ite(63, 11, 65) : BV:8
67 : ite(62, 11, 66) : BV:8
68 : ite(61, 22, 67) : BV:8
69 : ite(60, 11, 68) : BV:8
70 : ite(59, 17, 69) : BV:8
71 : ite(58, 14, 70) : BV:8
72 : ite(57, 11, 71) : BV:8
73 : bvadd(6, 7) : BV:32
74 : eq(73, 9) : BOOL
75 : eq(73, 12) : BOOL
76 : eq(73, 15) : BOOL
77 : eq(73, 18) : BOOL
78 : eq(73, 20) : BOOL
79 : eq(73, 23) : BOOL
80 : eq(73, 7) : BOOL
81 : eq(73, 26) : BOOL
82 : ite(81, 11, 28) : BV:8
83 : ite(80, 11, 82) : BV:8
84 : ite(79, 11, 83) : BV:8
85 : ite(78, 22, 84) : BV:8
86 : ite(77, 11, 85) : BV:8
87 : ite(76, 17, 86) : BV:8
88 : ite(75, 14, 87) : BV:8
89 : ite(74, 11, 88) : BV:8
90 : bvconcat(36, 54, 72, 89) : BV:32
91 : ite(3, 2, 90) : BV:32
92 : lambda(1, 91) : FUNCTION[BV:32 -> BV:32]
93 : sym_const(92) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 3082270647 { 0xb7b7b7b7 -1212696649 -1.43529403e240 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 193259268 { 0xb84e704 +1.3830003e152 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2392657684 { 0x8e9d0f14 -1902309612 -1.22702264e158 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2392657687 { 0x8e9d0f17 -1902309609 -1.22702300e158 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 911867416 { 0x3659fe18 +1.70306682e237 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 911867419 { 0x3659fe1b +1.70306718e237 } : BV:32
=counter_example.random_seed
1795444310
=counter_example_end
=global nodece 18 num_edges_traversed 3
=global nodece 18 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 19
=global nodece 19 nodece z3.ce856.num_edges_traversed4
=global nodece 19 nodece_path
=global nodece 19 nodece_path.graph_edge_composition
(epsilon)
=global nodece 19 nodece_cached_counterexample
=counter_example_begin z3.ce856 9ce474ecff97d9be29bf177ed67cdc
=input.spec-%var-x-1
1 : Lambda99 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3082270495 { 0xb7b7b71f -1212696801 -1.43527591e240 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3082270496 { 0xb7b7b720 -1212696800 -1.43527603e240 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda100 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3086833152 { 0xb7fd5600 -1208134144 -1.97918701e240 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 3086833153 { 0xb7fd5601 -1208134143 -1.97918713e240 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 911867418 { 0x3659fe1a +1.70306706e237 } : BV:32
28 : eq(23, 27) : BOOL
29 : 253 { 0xfd -3 } : BV:8
30 : 2392657684 { 0x8e9d0f14 -1902309612 -1.22702264e158 } : BV:32
31 : eq(23, 30) : BOOL
32 : 32 { 0x20 } : BV:8
33 : 3086833155 { 0xb7fd5603 -1208134141 -1.97918736e240 } : BV:32
34 : eq(23, 33) : BOOL
35 : 911867417 { 0x3659fe19 +1.70306694e237 } : BV:32
36 : eq(23, 35) : BOOL
37 : 86 { 0x56 } : BV:8
38 : 3086833154 { 0xb7fd5602 -1208134142 -1.97918725e240 } : BV:32
39 : eq(23, 38) : BOOL
40 : eq(23, 22) : BOOL
41 : 911867416 { 0x3659fe18 +1.70306682e237 } : BV:32
42 : eq(23, 41) : BOOL
43 : 183 { 0xb7 -73 } : BV:8
44 : ite(42, 26, 43) : BV:8
45 : ite(40, 26, 44) : BV:8
46 : ite(39, 26, 45) : BV:8
47 : ite(36, 37, 46) : BV:8
48 : ite(34, 26, 47) : BV:8
49 : ite(31, 32, 48) : BV:8
50 : ite(28, 29, 49) : BV:8
51 : ite(25, 26, 50) : BV:8
52 : 2 { 0x2 +1.23e129 } : BV:32
53 : bvadd(52, 21, 22) : BV:32
54 : eq(53, 24) : BOOL
55 : eq(53, 27) : BOOL
56 : eq(53, 30) : BOOL
57 : eq(53, 33) : BOOL
58 : eq(53, 35) : BOOL
59 : eq(53, 38) : BOOL
60 : eq(53, 22) : BOOL
61 : eq(53, 41) : BOOL
62 : ite(61, 26, 43) : BV:8
63 : ite(60, 26, 62) : BV:8
64 : ite(59, 26, 63) : BV:8
65 : ite(58, 37, 64) : BV:8
66 : ite(57, 26, 65) : BV:8
67 : ite(56, 32, 66) : BV:8
68 : ite(55, 29, 67) : BV:8
69 : ite(54, 26, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 21, 22) : BV:32
72 : eq(71, 24) : BOOL
73 : eq(71, 27) : BOOL
74 : eq(71, 30) : BOOL
75 : eq(71, 33) : BOOL
76 : eq(71, 35) : BOOL
77 : eq(71, 38) : BOOL
78 : eq(71, 22) : BOOL
79 : eq(71, 41) : BOOL
80 : ite(79, 26, 43) : BV:8
81 : ite(78, 26, 80) : BV:8
82 : ite(77, 26, 81) : BV:8
83 : ite(76, 37, 82) : BV:8
84 : ite(75, 26, 83) : BV:8
85 : ite(74, 32, 84) : BV:8
86 : ite(73, 29, 85) : BV:8
87 : ite(72, 26, 86) : BV:8
88 : bvadd(21, 22) : BV:32
89 : eq(88, 24) : BOOL
90 : eq(88, 27) : BOOL
91 : eq(88, 30) : BOOL
92 : eq(88, 33) : BOOL
93 : eq(88, 35) : BOOL
94 : eq(88, 38) : BOOL
95 : eq(88, 22) : BOOL
96 : eq(88, 41) : BOOL
97 : ite(96, 26, 43) : BV:8
98 : ite(95, 26, 97) : BV:8
99 : ite(94, 26, 98) : BV:8
100 : ite(93, 37, 99) : BV:8
101 : ite(92, 26, 100) : BV:8
102 : ite(91, 32, 101) : BV:8
103 : ite(90, 29, 102) : BV:8
104 : ite(89, 26, 103) : BV:8
105 : bvconcat(51, 69, 87, 104) : BV:32
106 : ite(18, 2, 105) : BV:32
107 : lambda(17, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(16, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L3%6%bbentry
1 : Lambda99 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3082270495 { 0xb7b7b71f -1212696801 -1.43527591e240 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3082270496 { 0xb7b7b720 -1212696800 -1.43527603e240 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda100 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3086833152 { 0xb7fd5600 -1208134144 -1.97918701e240 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 3086833153 { 0xb7fd5601 -1208134143 -1.97918713e240 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 911867418 { 0x3659fe1a +1.70306706e237 } : BV:32
28 : eq(23, 27) : BOOL
29 : 253 { 0xfd -3 } : BV:8
30 : 2392657684 { 0x8e9d0f14 -1902309612 -1.22702264e158 } : BV:32
31 : eq(23, 30) : BOOL
32 : 32 { 0x20 } : BV:8
33 : 3086833155 { 0xb7fd5603 -1208134141 -1.97918736e240 } : BV:32
34 : eq(23, 33) : BOOL
35 : 911867417 { 0x3659fe19 +1.70306694e237 } : BV:32
36 : eq(23, 35) : BOOL
37 : 86 { 0x56 } : BV:8
38 : 3086833154 { 0xb7fd5602 -1208134142 -1.97918725e240 } : BV:32
39 : eq(23, 38) : BOOL
40 : eq(23, 22) : BOOL
41 : 911867416 { 0x3659fe18 +1.70306682e237 } : BV:32
42 : eq(23, 41) : BOOL
43 : 183 { 0xb7 -73 } : BV:8
44 : ite(42, 26, 43) : BV:8
45 : ite(40, 26, 44) : BV:8
46 : ite(39, 26, 45) : BV:8
47 : ite(36, 37, 46) : BV:8
48 : ite(34, 26, 47) : BV:8
49 : ite(31, 32, 48) : BV:8
50 : ite(28, 29, 49) : BV:8
51 : ite(25, 26, 50) : BV:8
52 : 2 { 0x2 +1.23e129 } : BV:32
53 : bvadd(52, 21, 22) : BV:32
54 : eq(53, 24) : BOOL
55 : eq(53, 27) : BOOL
56 : eq(53, 30) : BOOL
57 : eq(53, 33) : BOOL
58 : eq(53, 35) : BOOL
59 : eq(53, 38) : BOOL
60 : eq(53, 22) : BOOL
61 : eq(53, 41) : BOOL
62 : ite(61, 26, 43) : BV:8
63 : ite(60, 26, 62) : BV:8
64 : ite(59, 26, 63) : BV:8
65 : ite(58, 37, 64) : BV:8
66 : ite(57, 26, 65) : BV:8
67 : ite(56, 32, 66) : BV:8
68 : ite(55, 29, 67) : BV:8
69 : ite(54, 26, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 21, 22) : BV:32
72 : eq(71, 24) : BOOL
73 : eq(71, 27) : BOOL
74 : eq(71, 30) : BOOL
75 : eq(71, 33) : BOOL
76 : eq(71, 35) : BOOL
77 : eq(71, 38) : BOOL
78 : eq(71, 22) : BOOL
79 : eq(71, 41) : BOOL
80 : ite(79, 26, 43) : BV:8
81 : ite(78, 26, 80) : BV:8
82 : ite(77, 26, 81) : BV:8
83 : ite(76, 37, 82) : BV:8
84 : ite(75, 26, 83) : BV:8
85 : ite(74, 32, 84) : BV:8
86 : ite(73, 29, 85) : BV:8
87 : ite(72, 26, 86) : BV:8
88 : bvadd(21, 22) : BV:32
89 : eq(88, 24) : BOOL
90 : eq(88, 27) : BOOL
91 : eq(88, 30) : BOOL
92 : eq(88, 33) : BOOL
93 : eq(88, 35) : BOOL
94 : eq(88, 38) : BOOL
95 : eq(88, 22) : BOOL
96 : eq(88, 41) : BOOL
97 : ite(96, 26, 43) : BV:8
98 : ite(95, 26, 97) : BV:8
99 : ite(94, 26, 98) : BV:8
100 : ite(93, 37, 99) : BV:8
101 : ite(92, 26, 100) : BV:8
102 : ite(91, 32, 101) : BV:8
103 : ite(90, 29, 102) : BV:8
104 : ite(89, 26, 103) : BV:8
105 : bvconcat(51, 69, 87, 104) : BV:32
106 : ite(18, 2, 105) : BV:32
107 : lambda(17, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(16, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-ret-0.L3%6%bbentry
1 : 1869573998 { 0x6f6f6f6e +1.87058806e95 } : BV:32
=input.dst.llvm-%x
1 : 3086833152 { 0xb7fd5600 -1208134144 -1.97918701e240 } : BV:32
=input.dst.llvm-%n
1 : 3082270496 { 0xb7b7b720 -1212696800 -1.43527603e240 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 911867415 ] -> 183, [ 911867416; 911867416 ] -> 0, [ 911867417; 911867417 ] -> 86, [ 911867418; 911867418 ] -> 253, [ 911867419; 2392657683 ] -> 183, [ 2392657684; 2392657684 ] -> 32, [ 2392657685; 3086833151 ] -> 183, [ 3086833152; 3086833155 ] -> 0, [ 3086833156; 4294967295 ] -> 183, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 911867415 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 911867416; 911867419 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 911867420; 2392657683 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2392657684; 2392657687 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2392657688; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 911867416 { 0x3659fe18 +1.70306682e237 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2392657684 { 0x8e9d0f14 -1902309612 -1.22702264e158 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%6%bbentry.0.1
1 : ([ 0; 3082270495 ] -> true, [ 3082270496; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%6%bbentry.1.1
1 : Lambda87 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3086833152 { 0xb7fd5600 -1208134144 -1.97918701e240 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 3086833153 { 0xb7fd5601 -1208134143 -1.97918713e240 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 911867418 { 0x3659fe1a +1.70306706e237 } : BV:32
13 : eq(8, 12) : BOOL
14 : 253 { 0xfd -3 } : BV:8
15 : 2392657684 { 0x8e9d0f14 -1902309612 -1.22702264e158 } : BV:32
16 : eq(8, 15) : BOOL
17 : 32 { 0x20 } : BV:8
18 : 3086833155 { 0xb7fd5603 -1208134141 -1.97918736e240 } : BV:32
19 : eq(8, 18) : BOOL
20 : 911867417 { 0x3659fe19 +1.70306694e237 } : BV:32
21 : eq(8, 20) : BOOL
22 : 86 { 0x56 } : BV:8
23 : 3086833154 { 0xb7fd5602 -1208134142 -1.97918725e240 } : BV:32
24 : eq(8, 23) : BOOL
25 : eq(8, 7) : BOOL
26 : 911867416 { 0x3659fe18 +1.70306682e237 } : BV:32
27 : eq(8, 26) : BOOL
28 : 183 { 0xb7 -73 } : BV:8
29 : ite(27, 11, 28) : BV:8
30 : ite(25, 11, 29) : BV:8
31 : ite(24, 11, 30) : BV:8
32 : ite(21, 22, 31) : BV:8
33 : ite(19, 11, 32) : BV:8
34 : ite(16, 17, 33) : BV:8
35 : ite(13, 14, 34) : BV:8
36 : ite(10, 11, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 6, 7) : BV:32
39 : eq(38, 9) : BOOL
40 : eq(38, 12) : BOOL
41 : eq(38, 15) : BOOL
42 : eq(38, 18) : BOOL
43 : eq(38, 20) : BOOL
44 : eq(38, 23) : BOOL
45 : eq(38, 7) : BOOL
46 : eq(38, 26) : BOOL
47 : ite(46, 11, 28) : BV:8
48 : ite(45, 11, 47) : BV:8
49 : ite(44, 11, 48) : BV:8
50 : ite(43, 22, 49) : BV:8
51 : ite(42, 11, 50) : BV:8
52 : ite(41, 17, 51) : BV:8
53 : ite(40, 14, 52) : BV:8
54 : ite(39, 11, 53) : BV:8
55 : 1 { 0x1 +1.11e129 } : BV:32
56 : bvadd(55, 6, 7) : BV:32
57 : eq(56, 9) : BOOL
58 : eq(56, 12) : BOOL
59 : eq(56, 15) : BOOL
60 : eq(56, 18) : BOOL
61 : eq(56, 20) : BOOL
62 : eq(56, 23) : BOOL
63 : eq(56, 7) : BOOL
64 : eq(56, 26) : BOOL
65 : ite(64, 11, 28) : BV:8
66 : ite(63, 11, 65) : BV:8
67 : ite(62, 11, 66) : BV:8
68 : ite(61, 22, 67) : BV:8
69 : ite(60, 11, 68) : BV:8
70 : ite(59, 17, 69) : BV:8
71 : ite(58, 14, 70) : BV:8
72 : ite(57, 11, 71) : BV:8
73 : bvadd(6, 7) : BV:32
74 : eq(73, 9) : BOOL
75 : eq(73, 12) : BOOL
76 : eq(73, 15) : BOOL
77 : eq(73, 18) : BOOL
78 : eq(73, 20) : BOOL
79 : eq(73, 23) : BOOL
80 : eq(73, 7) : BOOL
81 : eq(73, 26) : BOOL
82 : ite(81, 11, 28) : BV:8
83 : ite(80, 11, 82) : BV:8
84 : ite(79, 11, 83) : BV:8
85 : ite(78, 22, 84) : BV:8
86 : ite(77, 11, 85) : BV:8
87 : ite(76, 17, 86) : BV:8
88 : ite(75, 14, 87) : BV:8
89 : ite(74, 11, 88) : BV:8
90 : bvconcat(36, 54, 72, 89) : BV:32
91 : ite(3, 2, 90) : BV:32
92 : ite(3, 2, 91) : BV:32
93 : lambda(1, 92) : FUNCTION[BV:32 -> BV:32]
94 : sym_const(93) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 3082270495 ] -> true, [ 3082270496; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : Lambda88 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3086833152 { 0xb7fd5600 -1208134144 -1.97918701e240 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 3086833153 { 0xb7fd5601 -1208134143 -1.97918713e240 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 911867418 { 0x3659fe1a +1.70306706e237 } : BV:32
13 : eq(8, 12) : BOOL
14 : 253 { 0xfd -3 } : BV:8
15 : 2392657684 { 0x8e9d0f14 -1902309612 -1.22702264e158 } : BV:32
16 : eq(8, 15) : BOOL
17 : 32 { 0x20 } : BV:8
18 : 3086833155 { 0xb7fd5603 -1208134141 -1.97918736e240 } : BV:32
19 : eq(8, 18) : BOOL
20 : 911867417 { 0x3659fe19 +1.70306694e237 } : BV:32
21 : eq(8, 20) : BOOL
22 : 86 { 0x56 } : BV:8
23 : 3086833154 { 0xb7fd5602 -1208134142 -1.97918725e240 } : BV:32
24 : eq(8, 23) : BOOL
25 : eq(8, 7) : BOOL
26 : 911867416 { 0x3659fe18 +1.70306682e237 } : BV:32
27 : eq(8, 26) : BOOL
28 : 183 { 0xb7 -73 } : BV:8
29 : ite(27, 11, 28) : BV:8
30 : ite(25, 11, 29) : BV:8
31 : ite(24, 11, 30) : BV:8
32 : ite(21, 22, 31) : BV:8
33 : ite(19, 11, 32) : BV:8
34 : ite(16, 17, 33) : BV:8
35 : ite(13, 14, 34) : BV:8
36 : ite(10, 11, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 6, 7) : BV:32
39 : eq(38, 9) : BOOL
40 : eq(38, 12) : BOOL
41 : eq(38, 15) : BOOL
42 : eq(38, 18) : BOOL
43 : eq(38, 20) : BOOL
44 : eq(38, 23) : BOOL
45 : eq(38, 7) : BOOL
46 : eq(38, 26) : BOOL
47 : ite(46, 11, 28) : BV:8
48 : ite(45, 11, 47) : BV:8
49 : ite(44, 11, 48) : BV:8
50 : ite(43, 22, 49) : BV:8
51 : ite(42, 11, 50) : BV:8
52 : ite(41, 17, 51) : BV:8
53 : ite(40, 14, 52) : BV:8
54 : ite(39, 11, 53) : BV:8
55 : 1 { 0x1 +1.11e129 } : BV:32
56 : bvadd(55, 6, 7) : BV:32
57 : eq(56, 9) : BOOL
58 : eq(56, 12) : BOOL
59 : eq(56, 15) : BOOL
60 : eq(56, 18) : BOOL
61 : eq(56, 20) : BOOL
62 : eq(56, 23) : BOOL
63 : eq(56, 7) : BOOL
64 : eq(56, 26) : BOOL
65 : ite(64, 11, 28) : BV:8
66 : ite(63, 11, 65) : BV:8
67 : ite(62, 11, 66) : BV:8
68 : ite(61, 22, 67) : BV:8
69 : ite(60, 11, 68) : BV:8
70 : ite(59, 17, 69) : BV:8
71 : ite(58, 14, 70) : BV:8
72 : ite(57, 11, 71) : BV:8
73 : bvadd(6, 7) : BV:32
74 : eq(73, 9) : BOOL
75 : eq(73, 12) : BOOL
76 : eq(73, 15) : BOOL
77 : eq(73, 18) : BOOL
78 : eq(73, 20) : BOOL
79 : eq(73, 23) : BOOL
80 : eq(73, 7) : BOOL
81 : eq(73, 26) : BOOL
82 : ite(81, 11, 28) : BV:8
83 : ite(80, 11, 82) : BV:8
84 : ite(79, 11, 83) : BV:8
85 : ite(78, 22, 84) : BV:8
86 : ite(77, 11, 85) : BV:8
87 : ite(76, 17, 86) : BV:8
88 : ite(75, 14, 87) : BV:8
89 : ite(74, 11, 88) : BV:8
90 : bvconcat(36, 54, 72, 89) : BV:32
91 : ite(3, 2, 90) : BV:32
92 : lambda(1, 91) : FUNCTION[BV:32 -> BV:32]
93 : sym_const(92) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 1869573998 { 0x6f6f6f6e +1.87058806e95 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 193259268 { 0xb84e704 +1.3830003e152 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2392657684 { 0x8e9d0f14 -1902309612 -1.22702264e158 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2392657687 { 0x8e9d0f17 -1902309609 -1.22702300e158 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 911867416 { 0x3659fe18 +1.70306682e237 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 911867419 { 0x3659fe1b +1.70306718e237 } : BV:32
=counter_example.random_seed
1795444310
=counter_example_end
=global nodece 19 num_edges_traversed 4
=global nodece 19 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 20
=global nodece 20 nodece z3.ce733.num_edges_traversed2
=global nodece 20 nodece_path
=global nodece 20 nodece_path.graph_edge_composition
(epsilon)
=global nodece 20 nodece_cached_counterexample
=counter_example_begin z3.ce733 aa3fc54680b0bf467cfee6424ac0bd
=input.spec-%var-x-1
1 : Lambda135 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 134219783 { 0x8000807 +1.24497e145 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 134219784 { 0x8000808 +1.24509e145 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda136 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3724270080 { 0xddfbda00 -570697216 -1.96759033e60 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 3724270081 { 0xddfbda01 -570697215 -1.96759045e60 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 1671225710 { 0x639ce16e +1.22562956e72 } : BV:32
28 : eq(23, 27) : BOOL
29 : 251 { 0xfb -5 } : BV:8
30 : 3724270083 { 0xddfbda03 -570697213 -1.96759068e60 } : BV:32
31 : eq(23, 30) : BOOL
32 : 4022405450 { 0xefc1094a -272561846 -1.50809597e96 } : BV:32
33 : eq(23, 32) : BOOL
34 : 1671225709 { 0x639ce16d +1.22562944e72 } : BV:32
35 : eq(23, 34) : BOOL
36 : 218 { 0xda -38 } : BV:8
37 : 3724270082 { 0xddfbda02 -570697214 -1.96759057e60 } : BV:32
38 : eq(23, 37) : BOOL
39 : eq(23, 22) : BOOL
40 : 1671225711 { 0x639ce16f +1.22562968e72 } : BV:32
41 : eq(23, 40) : BOOL
42 : 221 { 0xdd -35 } : BV:8
43 : 1671225708 { 0x639ce16c +1.22562932e72 } : BV:32
44 : eq(23, 43) : BOOL
45 : 8 { 0x8 } : BV:8
46 : ite(44, 26, 45) : BV:8
47 : ite(41, 42, 46) : BV:8
48 : ite(39, 26, 47) : BV:8
49 : ite(38, 26, 48) : BV:8
50 : ite(35, 36, 49) : BV:8
51 : ite(33, 26, 50) : BV:8
52 : ite(31, 26, 51) : BV:8
53 : ite(28, 29, 52) : BV:8
54 : ite(25, 26, 53) : BV:8
55 : 2 { 0x2 +1.23e129 } : BV:32
56 : bvadd(55, 21, 22) : BV:32
57 : eq(56, 24) : BOOL
58 : eq(56, 27) : BOOL
59 : eq(56, 30) : BOOL
60 : eq(56, 32) : BOOL
61 : eq(56, 34) : BOOL
62 : eq(56, 37) : BOOL
63 : eq(56, 22) : BOOL
64 : eq(56, 40) : BOOL
65 : eq(56, 43) : BOOL
66 : ite(65, 26, 45) : BV:8
67 : ite(64, 42, 66) : BV:8
68 : ite(63, 26, 67) : BV:8
69 : ite(62, 26, 68) : BV:8
70 : ite(61, 36, 69) : BV:8
71 : ite(60, 26, 70) : BV:8
72 : ite(59, 26, 71) : BV:8
73 : ite(58, 29, 72) : BV:8
74 : ite(57, 26, 73) : BV:8
75 : 1 { 0x1 +1.11e129 } : BV:32
76 : bvadd(75, 21, 22) : BV:32
77 : eq(76, 24) : BOOL
78 : eq(76, 27) : BOOL
79 : eq(76, 30) : BOOL
80 : eq(76, 32) : BOOL
81 : eq(76, 34) : BOOL
82 : eq(76, 37) : BOOL
83 : eq(76, 22) : BOOL
84 : eq(76, 40) : BOOL
85 : eq(76, 43) : BOOL
86 : ite(85, 26, 45) : BV:8
87 : ite(84, 42, 86) : BV:8
88 : ite(83, 26, 87) : BV:8
89 : ite(82, 26, 88) : BV:8
90 : ite(81, 36, 89) : BV:8
91 : ite(80, 26, 90) : BV:8
92 : ite(79, 26, 91) : BV:8
93 : ite(78, 29, 92) : BV:8
94 : ite(77, 26, 93) : BV:8
95 : bvadd(21, 22) : BV:32
96 : eq(95, 24) : BOOL
97 : eq(95, 27) : BOOL
98 : eq(95, 30) : BOOL
99 : eq(95, 32) : BOOL
100 : eq(95, 34) : BOOL
101 : eq(95, 37) : BOOL
102 : eq(95, 22) : BOOL
103 : eq(95, 40) : BOOL
104 : eq(95, 43) : BOOL
105 : ite(104, 26, 45) : BV:8
106 : ite(103, 42, 105) : BV:8
107 : ite(102, 26, 106) : BV:8
108 : ite(101, 26, 107) : BV:8
109 : ite(100, 36, 108) : BV:8
110 : ite(99, 26, 109) : BV:8
111 : ite(98, 26, 110) : BV:8
112 : ite(97, 29, 111) : BV:8
113 : ite(96, 26, 112) : BV:8
114 : bvconcat(54, 74, 94, 113) : BV:32
115 : ite(18, 2, 114) : BV:32
116 : lambda(17, 115) : FUNCTION[BV:32 -> BV:32]
117 : map(16, 116) : MAP[BV:32 -> BV:32]
118 : sym_const(117) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L3%6%bbentry
1 : Lambda135 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 134219783 { 0x8000807 +1.24497e145 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 134219784 { 0x8000808 +1.24509e145 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda136 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3724270080 { 0xddfbda00 -570697216 -1.96759033e60 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 3724270081 { 0xddfbda01 -570697215 -1.96759045e60 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 1671225710 { 0x639ce16e +1.22562956e72 } : BV:32
28 : eq(23, 27) : BOOL
29 : 251 { 0xfb -5 } : BV:8
30 : 3724270083 { 0xddfbda03 -570697213 -1.96759068e60 } : BV:32
31 : eq(23, 30) : BOOL
32 : 4022405450 { 0xefc1094a -272561846 -1.50809597e96 } : BV:32
33 : eq(23, 32) : BOOL
34 : 1671225709 { 0x639ce16d +1.22562944e72 } : BV:32
35 : eq(23, 34) : BOOL
36 : 218 { 0xda -38 } : BV:8
37 : 3724270082 { 0xddfbda02 -570697214 -1.96759057e60 } : BV:32
38 : eq(23, 37) : BOOL
39 : eq(23, 22) : BOOL
40 : 1671225711 { 0x639ce16f +1.22562968e72 } : BV:32
41 : eq(23, 40) : BOOL
42 : 221 { 0xdd -35 } : BV:8
43 : 1671225708 { 0x639ce16c +1.22562932e72 } : BV:32
44 : eq(23, 43) : BOOL
45 : 8 { 0x8 } : BV:8
46 : ite(44, 26, 45) : BV:8
47 : ite(41, 42, 46) : BV:8
48 : ite(39, 26, 47) : BV:8
49 : ite(38, 26, 48) : BV:8
50 : ite(35, 36, 49) : BV:8
51 : ite(33, 26, 50) : BV:8
52 : ite(31, 26, 51) : BV:8
53 : ite(28, 29, 52) : BV:8
54 : ite(25, 26, 53) : BV:8
55 : 2 { 0x2 +1.23e129 } : BV:32
56 : bvadd(55, 21, 22) : BV:32
57 : eq(56, 24) : BOOL
58 : eq(56, 27) : BOOL
59 : eq(56, 30) : BOOL
60 : eq(56, 32) : BOOL
61 : eq(56, 34) : BOOL
62 : eq(56, 37) : BOOL
63 : eq(56, 22) : BOOL
64 : eq(56, 40) : BOOL
65 : eq(56, 43) : BOOL
66 : ite(65, 26, 45) : BV:8
67 : ite(64, 42, 66) : BV:8
68 : ite(63, 26, 67) : BV:8
69 : ite(62, 26, 68) : BV:8
70 : ite(61, 36, 69) : BV:8
71 : ite(60, 26, 70) : BV:8
72 : ite(59, 26, 71) : BV:8
73 : ite(58, 29, 72) : BV:8
74 : ite(57, 26, 73) : BV:8
75 : 1 { 0x1 +1.11e129 } : BV:32
76 : bvadd(75, 21, 22) : BV:32
77 : eq(76, 24) : BOOL
78 : eq(76, 27) : BOOL
79 : eq(76, 30) : BOOL
80 : eq(76, 32) : BOOL
81 : eq(76, 34) : BOOL
82 : eq(76, 37) : BOOL
83 : eq(76, 22) : BOOL
84 : eq(76, 40) : BOOL
85 : eq(76, 43) : BOOL
86 : ite(85, 26, 45) : BV:8
87 : ite(84, 42, 86) : BV:8
88 : ite(83, 26, 87) : BV:8
89 : ite(82, 26, 88) : BV:8
90 : ite(81, 36, 89) : BV:8
91 : ite(80, 26, 90) : BV:8
92 : ite(79, 26, 91) : BV:8
93 : ite(78, 29, 92) : BV:8
94 : ite(77, 26, 93) : BV:8
95 : bvadd(21, 22) : BV:32
96 : eq(95, 24) : BOOL
97 : eq(95, 27) : BOOL
98 : eq(95, 30) : BOOL
99 : eq(95, 32) : BOOL
100 : eq(95, 34) : BOOL
101 : eq(95, 37) : BOOL
102 : eq(95, 22) : BOOL
103 : eq(95, 40) : BOOL
104 : eq(95, 43) : BOOL
105 : ite(104, 26, 45) : BV:8
106 : ite(103, 42, 105) : BV:8
107 : ite(102, 26, 106) : BV:8
108 : ite(101, 26, 107) : BV:8
109 : ite(100, 36, 108) : BV:8
110 : ite(99, 26, 109) : BV:8
111 : ite(98, 26, 110) : BV:8
112 : ite(97, 29, 111) : BV:8
113 : ite(96, 26, 112) : BV:8
114 : bvconcat(54, 74, 94, 113) : BV:32
115 : ite(18, 2, 114) : BV:32
116 : lambda(17, 115) : FUNCTION[BV:32 -> BV:32]
117 : map(16, 116) : MAP[BV:32 -> BV:32]
118 : sym_const(117) : MAP[BV:32 -> BV:32]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-ret-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 3724270080 { 0xddfbda00 -570697216 -1.96759033e60 } : BV:32
=input.dst.llvm-%n
1 : 134219784 { 0x8000808 +1.24509e145 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1671225707 ] -> 8, [ 1671225708; 1671225708 ] -> 0, [ 1671225709; 1671225709 ] -> 218, [ 1671225710; 1671225710 ] -> 251, [ 1671225711; 1671225711 ] -> 221, [ 1671225712; 3724270079 ] -> 8, [ 3724270080; 3724270083 ] -> 0, [ 3724270084; 4022405449 ] -> 8, [ 4022405450; 4022405450 ] -> 0, [ 4022405451; 4294967295 ] -> 8, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1671225707 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1671225708; 1671225711 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1671225712; 4022405447 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4022405448; 4022405451 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 4022405452; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1671225708 { 0x639ce16c +1.22562932e72 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4022405448 { 0xefc10948 -272561848 -1.50809574e96 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%6%bbentry.0.1
1 : ([ 0; 134219783 ] -> true, [ 134219784; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%6%bbentry.1.1
1 : Lambda123 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3724270080 { 0xddfbda00 -570697216 -1.96759033e60 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 3724270081 { 0xddfbda01 -570697215 -1.96759045e60 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 1671225710 { 0x639ce16e +1.22562956e72 } : BV:32
13 : eq(8, 12) : BOOL
14 : 251 { 0xfb -5 } : BV:8
15 : 3724270083 { 0xddfbda03 -570697213 -1.96759068e60 } : BV:32
16 : eq(8, 15) : BOOL
17 : 4022405450 { 0xefc1094a -272561846 -1.50809597e96 } : BV:32
18 : eq(8, 17) : BOOL
19 : 1671225709 { 0x639ce16d +1.22562944e72 } : BV:32
20 : eq(8, 19) : BOOL
21 : 218 { 0xda -38 } : BV:8
22 : 3724270082 { 0xddfbda02 -570697214 -1.96759057e60 } : BV:32
23 : eq(8, 22) : BOOL
24 : eq(8, 7) : BOOL
25 : 1671225711 { 0x639ce16f +1.22562968e72 } : BV:32
26 : eq(8, 25) : BOOL
27 : 221 { 0xdd -35 } : BV:8
28 : 1671225708 { 0x639ce16c +1.22562932e72 } : BV:32
29 : eq(8, 28) : BOOL
30 : 8 { 0x8 } : BV:8
31 : ite(29, 11, 30) : BV:8
32 : ite(26, 27, 31) : BV:8
33 : ite(24, 11, 32) : BV:8
34 : ite(23, 11, 33) : BV:8
35 : ite(20, 21, 34) : BV:8
36 : ite(18, 11, 35) : BV:8
37 : ite(16, 11, 36) : BV:8
38 : ite(13, 14, 37) : BV:8
39 : ite(10, 11, 38) : BV:8
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvadd(40, 6, 7) : BV:32
42 : eq(41, 9) : BOOL
43 : eq(41, 12) : BOOL
44 : eq(41, 15) : BOOL
45 : eq(41, 17) : BOOL
46 : eq(41, 19) : BOOL
47 : eq(41, 22) : BOOL
48 : eq(41, 7) : BOOL
49 : eq(41, 25) : BOOL
50 : eq(41, 28) : BOOL
51 : ite(50, 11, 30) : BV:8
52 : ite(49, 27, 51) : BV:8
53 : ite(48, 11, 52) : BV:8
54 : ite(47, 11, 53) : BV:8
55 : ite(46, 21, 54) : BV:8
56 : ite(45, 11, 55) : BV:8
57 : ite(44, 11, 56) : BV:8
58 : ite(43, 14, 57) : BV:8
59 : ite(42, 11, 58) : BV:8
60 : 1 { 0x1 +1.11e129 } : BV:32
61 : bvadd(60, 6, 7) : BV:32
62 : eq(61, 9) : BOOL
63 : eq(61, 12) : BOOL
64 : eq(61, 15) : BOOL
65 : eq(61, 17) : BOOL
66 : eq(61, 19) : BOOL
67 : eq(61, 22) : BOOL
68 : eq(61, 7) : BOOL
69 : eq(61, 25) : BOOL
70 : eq(61, 28) : BOOL
71 : ite(70, 11, 30) : BV:8
72 : ite(69, 27, 71) : BV:8
73 : ite(68, 11, 72) : BV:8
74 : ite(67, 11, 73) : BV:8
75 : ite(66, 21, 74) : BV:8
76 : ite(65, 11, 75) : BV:8
77 : ite(64, 11, 76) : BV:8
78 : ite(63, 14, 77) : BV:8
79 : ite(62, 11, 78) : BV:8
80 : bvadd(6, 7) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 15) : BOOL
84 : eq(80, 17) : BOOL
85 : eq(80, 19) : BOOL
86 : eq(80, 22) : BOOL
87 : eq(80, 7) : BOOL
88 : eq(80, 25) : BOOL
89 : eq(80, 28) : BOOL
90 : ite(89, 11, 30) : BV:8
91 : ite(88, 27, 90) : BV:8
92 : ite(87, 11, 91) : BV:8
93 : ite(86, 11, 92) : BV:8
94 : ite(85, 21, 93) : BV:8
95 : ite(84, 11, 94) : BV:8
96 : ite(83, 11, 95) : BV:8
97 : ite(82, 14, 96) : BV:8
98 : ite(81, 11, 97) : BV:8
99 : bvconcat(39, 59, 79, 98) : BV:32
100 : ite(3, 2, 99) : BV:32
101 : ite(3, 2, 100) : BV:32
102 : lambda(1, 101) : FUNCTION[BV:32 -> BV:32]
103 : sym_const(102) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 134219783 ] -> true, [ 134219784; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : Lambda124 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3724270080 { 0xddfbda00 -570697216 -1.96759033e60 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 3724270081 { 0xddfbda01 -570697215 -1.96759045e60 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 1671225710 { 0x639ce16e +1.22562956e72 } : BV:32
13 : eq(8, 12) : BOOL
14 : 251 { 0xfb -5 } : BV:8
15 : 3724270083 { 0xddfbda03 -570697213 -1.96759068e60 } : BV:32
16 : eq(8, 15) : BOOL
17 : 4022405450 { 0xefc1094a -272561846 -1.50809597e96 } : BV:32
18 : eq(8, 17) : BOOL
19 : 1671225709 { 0x639ce16d +1.22562944e72 } : BV:32
20 : eq(8, 19) : BOOL
21 : 218 { 0xda -38 } : BV:8
22 : 3724270082 { 0xddfbda02 -570697214 -1.96759057e60 } : BV:32
23 : eq(8, 22) : BOOL
24 : eq(8, 7) : BOOL
25 : 1671225711 { 0x639ce16f +1.22562968e72 } : BV:32
26 : eq(8, 25) : BOOL
27 : 221 { 0xdd -35 } : BV:8
28 : 1671225708 { 0x639ce16c +1.22562932e72 } : BV:32
29 : eq(8, 28) : BOOL
30 : 8 { 0x8 } : BV:8
31 : ite(29, 11, 30) : BV:8
32 : ite(26, 27, 31) : BV:8
33 : ite(24, 11, 32) : BV:8
34 : ite(23, 11, 33) : BV:8
35 : ite(20, 21, 34) : BV:8
36 : ite(18, 11, 35) : BV:8
37 : ite(16, 11, 36) : BV:8
38 : ite(13, 14, 37) : BV:8
39 : ite(10, 11, 38) : BV:8
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvadd(40, 6, 7) : BV:32
42 : eq(41, 9) : BOOL
43 : eq(41, 12) : BOOL
44 : eq(41, 15) : BOOL
45 : eq(41, 17) : BOOL
46 : eq(41, 19) : BOOL
47 : eq(41, 22) : BOOL
48 : eq(41, 7) : BOOL
49 : eq(41, 25) : BOOL
50 : eq(41, 28) : BOOL
51 : ite(50, 11, 30) : BV:8
52 : ite(49, 27, 51) : BV:8
53 : ite(48, 11, 52) : BV:8
54 : ite(47, 11, 53) : BV:8
55 : ite(46, 21, 54) : BV:8
56 : ite(45, 11, 55) : BV:8
57 : ite(44, 11, 56) : BV:8
58 : ite(43, 14, 57) : BV:8
59 : ite(42, 11, 58) : BV:8
60 : 1 { 0x1 +1.11e129 } : BV:32
61 : bvadd(60, 6, 7) : BV:32
62 : eq(61, 9) : BOOL
63 : eq(61, 12) : BOOL
64 : eq(61, 15) : BOOL
65 : eq(61, 17) : BOOL
66 : eq(61, 19) : BOOL
67 : eq(61, 22) : BOOL
68 : eq(61, 7) : BOOL
69 : eq(61, 25) : BOOL
70 : eq(61, 28) : BOOL
71 : ite(70, 11, 30) : BV:8
72 : ite(69, 27, 71) : BV:8
73 : ite(68, 11, 72) : BV:8
74 : ite(67, 11, 73) : BV:8
75 : ite(66, 21, 74) : BV:8
76 : ite(65, 11, 75) : BV:8
77 : ite(64, 11, 76) : BV:8
78 : ite(63, 14, 77) : BV:8
79 : ite(62, 11, 78) : BV:8
80 : bvadd(6, 7) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 15) : BOOL
84 : eq(80, 17) : BOOL
85 : eq(80, 19) : BOOL
86 : eq(80, 22) : BOOL
87 : eq(80, 7) : BOOL
88 : eq(80, 25) : BOOL
89 : eq(80, 28) : BOOL
90 : ite(89, 11, 30) : BV:8
91 : ite(88, 27, 90) : BV:8
92 : ite(87, 11, 91) : BV:8
93 : ite(86, 11, 92) : BV:8
94 : ite(85, 21, 93) : BV:8
95 : ite(84, 11, 94) : BV:8
96 : ite(83, 11, 95) : BV:8
97 : ite(82, 14, 96) : BV:8
98 : ite(81, 11, 97) : BV:8
99 : bvconcat(39, 59, 79, 98) : BV:32
100 : ite(3, 2, 99) : BV:32
101 : lambda(1, 100) : FUNCTION[BV:32 -> BV:32]
102 : sym_const(101) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1407581506 { 0x53e5fd42 +1.79679131e40 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4022405448 { 0xefc10948 -272561848 -1.50809574e96 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 4022405451 { 0xefc1094b -272561845 -1.50809609e96 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1671225708 { 0x639ce16c +1.22562932e72 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1671225711 { 0x639ce16f +1.22562968e72 } : BV:32
=counter_example.random_seed
1027758982
=counter_example_end
=global nodece 20 num_edges_traversed 2
=global nodece 20 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 21
=global nodece 21 nodece z3.ce723.num_edges_traversed2
=global nodece 21 nodece_path
=global nodece 21 nodece_path.graph_edge_composition
(epsilon)
=global nodece 21 nodece_cached_counterexample
=counter_example_begin z3.ce723 a84692be3c45a0a8ebafbbb2152f3546
=input.spec-%var-x-1
1 : Lambda171 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 67109891 { 0x4000403 +1.12242e137 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 67109892 { 0x4000404 +1.12254e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda172 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3724270080 { 0xddfbda00 -570697216 -1.96759033e60 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 3724270081 { 0xddfbda01 -570697215 -1.96759045e60 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 1671225710 { 0x639ce16e +1.22562956e72 } : BV:32
28 : eq(23, 27) : BOOL
29 : 251 { 0xfb -5 } : BV:8
30 : 3724270083 { 0xddfbda03 -570697213 -1.96759068e60 } : BV:32
31 : eq(23, 30) : BOOL
32 : 4022405450 { 0xefc1094a -272561846 -1.50809597e96 } : BV:32
33 : eq(23, 32) : BOOL
34 : 1671225709 { 0x639ce16d +1.22562944e72 } : BV:32
35 : eq(23, 34) : BOOL
36 : 218 { 0xda -38 } : BV:8
37 : 3724270082 { 0xddfbda02 -570697214 -1.96759057e60 } : BV:32
38 : eq(23, 37) : BOOL
39 : eq(23, 22) : BOOL
40 : 1671225711 { 0x639ce16f +1.22562968e72 } : BV:32
41 : eq(23, 40) : BOOL
42 : 221 { 0xdd -35 } : BV:8
43 : 1671225708 { 0x639ce16c +1.22562932e72 } : BV:32
44 : eq(23, 43) : BOOL
45 : 4 { 0x4 } : BV:8
46 : ite(44, 26, 45) : BV:8
47 : ite(41, 42, 46) : BV:8
48 : ite(39, 26, 47) : BV:8
49 : ite(38, 26, 48) : BV:8
50 : ite(35, 36, 49) : BV:8
51 : ite(33, 26, 50) : BV:8
52 : ite(31, 26, 51) : BV:8
53 : ite(28, 29, 52) : BV:8
54 : ite(25, 26, 53) : BV:8
55 : 2 { 0x2 +1.23e129 } : BV:32
56 : bvadd(55, 21, 22) : BV:32
57 : eq(56, 24) : BOOL
58 : eq(56, 27) : BOOL
59 : eq(56, 30) : BOOL
60 : eq(56, 32) : BOOL
61 : eq(56, 34) : BOOL
62 : eq(56, 37) : BOOL
63 : eq(56, 22) : BOOL
64 : eq(56, 40) : BOOL
65 : eq(56, 43) : BOOL
66 : ite(65, 26, 45) : BV:8
67 : ite(64, 42, 66) : BV:8
68 : ite(63, 26, 67) : BV:8
69 : ite(62, 26, 68) : BV:8
70 : ite(61, 36, 69) : BV:8
71 : ite(60, 26, 70) : BV:8
72 : ite(59, 26, 71) : BV:8
73 : ite(58, 29, 72) : BV:8
74 : ite(57, 26, 73) : BV:8
75 : 1 { 0x1 +1.11e129 } : BV:32
76 : bvadd(75, 21, 22) : BV:32
77 : eq(76, 24) : BOOL
78 : eq(76, 27) : BOOL
79 : eq(76, 30) : BOOL
80 : eq(76, 32) : BOOL
81 : eq(76, 34) : BOOL
82 : eq(76, 37) : BOOL
83 : eq(76, 22) : BOOL
84 : eq(76, 40) : BOOL
85 : eq(76, 43) : BOOL
86 : ite(85, 26, 45) : BV:8
87 : ite(84, 42, 86) : BV:8
88 : ite(83, 26, 87) : BV:8
89 : ite(82, 26, 88) : BV:8
90 : ite(81, 36, 89) : BV:8
91 : ite(80, 26, 90) : BV:8
92 : ite(79, 26, 91) : BV:8
93 : ite(78, 29, 92) : BV:8
94 : ite(77, 26, 93) : BV:8
95 : bvadd(21, 22) : BV:32
96 : eq(95, 24) : BOOL
97 : eq(95, 27) : BOOL
98 : eq(95, 30) : BOOL
99 : eq(95, 32) : BOOL
100 : eq(95, 34) : BOOL
101 : eq(95, 37) : BOOL
102 : eq(95, 22) : BOOL
103 : eq(95, 40) : BOOL
104 : eq(95, 43) : BOOL
105 : ite(104, 26, 45) : BV:8
106 : ite(103, 42, 105) : BV:8
107 : ite(102, 26, 106) : BV:8
108 : ite(101, 26, 107) : BV:8
109 : ite(100, 36, 108) : BV:8
110 : ite(99, 26, 109) : BV:8
111 : ite(98, 26, 110) : BV:8
112 : ite(97, 29, 111) : BV:8
113 : ite(96, 26, 112) : BV:8
114 : bvconcat(54, 74, 94, 113) : BV:32
115 : ite(18, 2, 114) : BV:32
116 : lambda(17, 115) : FUNCTION[BV:32 -> BV:32]
117 : map(16, 116) : MAP[BV:32 -> BV:32]
118 : sym_const(117) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L3%6%bbentry
1 : Lambda171 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 67109891 { 0x4000403 +1.12242e137 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 67109892 { 0x4000404 +1.12254e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda172 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3724270080 { 0xddfbda00 -570697216 -1.96759033e60 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 3724270081 { 0xddfbda01 -570697215 -1.96759045e60 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 1671225710 { 0x639ce16e +1.22562956e72 } : BV:32
28 : eq(23, 27) : BOOL
29 : 251 { 0xfb -5 } : BV:8
30 : 3724270083 { 0xddfbda03 -570697213 -1.96759068e60 } : BV:32
31 : eq(23, 30) : BOOL
32 : 4022405450 { 0xefc1094a -272561846 -1.50809597e96 } : BV:32
33 : eq(23, 32) : BOOL
34 : 1671225709 { 0x639ce16d +1.22562944e72 } : BV:32
35 : eq(23, 34) : BOOL
36 : 218 { 0xda -38 } : BV:8
37 : 3724270082 { 0xddfbda02 -570697214 -1.96759057e60 } : BV:32
38 : eq(23, 37) : BOOL
39 : eq(23, 22) : BOOL
40 : 1671225711 { 0x639ce16f +1.22562968e72 } : BV:32
41 : eq(23, 40) : BOOL
42 : 221 { 0xdd -35 } : BV:8
43 : 1671225708 { 0x639ce16c +1.22562932e72 } : BV:32
44 : eq(23, 43) : BOOL
45 : 4 { 0x4 } : BV:8
46 : ite(44, 26, 45) : BV:8
47 : ite(41, 42, 46) : BV:8
48 : ite(39, 26, 47) : BV:8
49 : ite(38, 26, 48) : BV:8
50 : ite(35, 36, 49) : BV:8
51 : ite(33, 26, 50) : BV:8
52 : ite(31, 26, 51) : BV:8
53 : ite(28, 29, 52) : BV:8
54 : ite(25, 26, 53) : BV:8
55 : 2 { 0x2 +1.23e129 } : BV:32
56 : bvadd(55, 21, 22) : BV:32
57 : eq(56, 24) : BOOL
58 : eq(56, 27) : BOOL
59 : eq(56, 30) : BOOL
60 : eq(56, 32) : BOOL
61 : eq(56, 34) : BOOL
62 : eq(56, 37) : BOOL
63 : eq(56, 22) : BOOL
64 : eq(56, 40) : BOOL
65 : eq(56, 43) : BOOL
66 : ite(65, 26, 45) : BV:8
67 : ite(64, 42, 66) : BV:8
68 : ite(63, 26, 67) : BV:8
69 : ite(62, 26, 68) : BV:8
70 : ite(61, 36, 69) : BV:8
71 : ite(60, 26, 70) : BV:8
72 : ite(59, 26, 71) : BV:8
73 : ite(58, 29, 72) : BV:8
74 : ite(57, 26, 73) : BV:8
75 : 1 { 0x1 +1.11e129 } : BV:32
76 : bvadd(75, 21, 22) : BV:32
77 : eq(76, 24) : BOOL
78 : eq(76, 27) : BOOL
79 : eq(76, 30) : BOOL
80 : eq(76, 32) : BOOL
81 : eq(76, 34) : BOOL
82 : eq(76, 37) : BOOL
83 : eq(76, 22) : BOOL
84 : eq(76, 40) : BOOL
85 : eq(76, 43) : BOOL
86 : ite(85, 26, 45) : BV:8
87 : ite(84, 42, 86) : BV:8
88 : ite(83, 26, 87) : BV:8
89 : ite(82, 26, 88) : BV:8
90 : ite(81, 36, 89) : BV:8
91 : ite(80, 26, 90) : BV:8
92 : ite(79, 26, 91) : BV:8
93 : ite(78, 29, 92) : BV:8
94 : ite(77, 26, 93) : BV:8
95 : bvadd(21, 22) : BV:32
96 : eq(95, 24) : BOOL
97 : eq(95, 27) : BOOL
98 : eq(95, 30) : BOOL
99 : eq(95, 32) : BOOL
100 : eq(95, 34) : BOOL
101 : eq(95, 37) : BOOL
102 : eq(95, 22) : BOOL
103 : eq(95, 40) : BOOL
104 : eq(95, 43) : BOOL
105 : ite(104, 26, 45) : BV:8
106 : ite(103, 42, 105) : BV:8
107 : ite(102, 26, 106) : BV:8
108 : ite(101, 26, 107) : BV:8
109 : ite(100, 36, 108) : BV:8
110 : ite(99, 26, 109) : BV:8
111 : ite(98, 26, 110) : BV:8
112 : ite(97, 29, 111) : BV:8
113 : ite(96, 26, 112) : BV:8
114 : bvconcat(54, 74, 94, 113) : BV:32
115 : ite(18, 2, 114) : BV:32
116 : lambda(17, 115) : FUNCTION[BV:32 -> BV:32]
117 : map(16, 116) : MAP[BV:32 -> BV:32]
118 : sym_const(117) : MAP[BV:32 -> BV:32]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-ret-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 3724270080 { 0xddfbda00 -570697216 -1.96759033e60 } : BV:32
=input.dst.llvm-%n
1 : 67109892 { 0x4000404 +1.12254e137 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1671225707 ] -> 4, [ 1671225708; 1671225708 ] -> 0, [ 1671225709; 1671225709 ] -> 218, [ 1671225710; 1671225710 ] -> 251, [ 1671225711; 1671225711 ] -> 221, [ 1671225712; 3724270079 ] -> 4, [ 3724270080; 3724270083 ] -> 0, [ 3724270084; 4022405449 ] -> 4, [ 4022405450; 4022405450 ] -> 0, [ 4022405451; 4294967295 ] -> 4, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1671225707 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1671225708; 1671225711 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1671225712; 4022405447 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4022405448; 4022405451 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 4022405452; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1671225708 { 0x639ce16c +1.22562932e72 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4022405448 { 0xefc10948 -272561848 -1.50809574e96 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%6%bbentry.0.1
1 : ([ 0; 67109891 ] -> true, [ 67109892; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%6%bbentry.1.1
1 : Lambda159 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3724270080 { 0xddfbda00 -570697216 -1.96759033e60 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 3724270081 { 0xddfbda01 -570697215 -1.96759045e60 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 1671225710 { 0x639ce16e +1.22562956e72 } : BV:32
13 : eq(8, 12) : BOOL
14 : 251 { 0xfb -5 } : BV:8
15 : 3724270083 { 0xddfbda03 -570697213 -1.96759068e60 } : BV:32
16 : eq(8, 15) : BOOL
17 : 4022405450 { 0xefc1094a -272561846 -1.50809597e96 } : BV:32
18 : eq(8, 17) : BOOL
19 : 1671225709 { 0x639ce16d +1.22562944e72 } : BV:32
20 : eq(8, 19) : BOOL
21 : 218 { 0xda -38 } : BV:8
22 : 3724270082 { 0xddfbda02 -570697214 -1.96759057e60 } : BV:32
23 : eq(8, 22) : BOOL
24 : eq(8, 7) : BOOL
25 : 1671225711 { 0x639ce16f +1.22562968e72 } : BV:32
26 : eq(8, 25) : BOOL
27 : 221 { 0xdd -35 } : BV:8
28 : 1671225708 { 0x639ce16c +1.22562932e72 } : BV:32
29 : eq(8, 28) : BOOL
30 : 4 { 0x4 } : BV:8
31 : ite(29, 11, 30) : BV:8
32 : ite(26, 27, 31) : BV:8
33 : ite(24, 11, 32) : BV:8
34 : ite(23, 11, 33) : BV:8
35 : ite(20, 21, 34) : BV:8
36 : ite(18, 11, 35) : BV:8
37 : ite(16, 11, 36) : BV:8
38 : ite(13, 14, 37) : BV:8
39 : ite(10, 11, 38) : BV:8
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvadd(40, 6, 7) : BV:32
42 : eq(41, 9) : BOOL
43 : eq(41, 12) : BOOL
44 : eq(41, 15) : BOOL
45 : eq(41, 17) : BOOL
46 : eq(41, 19) : BOOL
47 : eq(41, 22) : BOOL
48 : eq(41, 7) : BOOL
49 : eq(41, 25) : BOOL
50 : eq(41, 28) : BOOL
51 : ite(50, 11, 30) : BV:8
52 : ite(49, 27, 51) : BV:8
53 : ite(48, 11, 52) : BV:8
54 : ite(47, 11, 53) : BV:8
55 : ite(46, 21, 54) : BV:8
56 : ite(45, 11, 55) : BV:8
57 : ite(44, 11, 56) : BV:8
58 : ite(43, 14, 57) : BV:8
59 : ite(42, 11, 58) : BV:8
60 : 1 { 0x1 +1.11e129 } : BV:32
61 : bvadd(60, 6, 7) : BV:32
62 : eq(61, 9) : BOOL
63 : eq(61, 12) : BOOL
64 : eq(61, 15) : BOOL
65 : eq(61, 17) : BOOL
66 : eq(61, 19) : BOOL
67 : eq(61, 22) : BOOL
68 : eq(61, 7) : BOOL
69 : eq(61, 25) : BOOL
70 : eq(61, 28) : BOOL
71 : ite(70, 11, 30) : BV:8
72 : ite(69, 27, 71) : BV:8
73 : ite(68, 11, 72) : BV:8
74 : ite(67, 11, 73) : BV:8
75 : ite(66, 21, 74) : BV:8
76 : ite(65, 11, 75) : BV:8
77 : ite(64, 11, 76) : BV:8
78 : ite(63, 14, 77) : BV:8
79 : ite(62, 11, 78) : BV:8
80 : bvadd(6, 7) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 15) : BOOL
84 : eq(80, 17) : BOOL
85 : eq(80, 19) : BOOL
86 : eq(80, 22) : BOOL
87 : eq(80, 7) : BOOL
88 : eq(80, 25) : BOOL
89 : eq(80, 28) : BOOL
90 : ite(89, 11, 30) : BV:8
91 : ite(88, 27, 90) : BV:8
92 : ite(87, 11, 91) : BV:8
93 : ite(86, 11, 92) : BV:8
94 : ite(85, 21, 93) : BV:8
95 : ite(84, 11, 94) : BV:8
96 : ite(83, 11, 95) : BV:8
97 : ite(82, 14, 96) : BV:8
98 : ite(81, 11, 97) : BV:8
99 : bvconcat(39, 59, 79, 98) : BV:32
100 : ite(3, 2, 99) : BV:32
101 : ite(3, 2, 100) : BV:32
102 : lambda(1, 101) : FUNCTION[BV:32 -> BV:32]
103 : sym_const(102) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 67109891 ] -> true, [ 67109892; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : Lambda160 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3724270080 { 0xddfbda00 -570697216 -1.96759033e60 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 3724270081 { 0xddfbda01 -570697215 -1.96759045e60 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 1671225710 { 0x639ce16e +1.22562956e72 } : BV:32
13 : eq(8, 12) : BOOL
14 : 251 { 0xfb -5 } : BV:8
15 : 3724270083 { 0xddfbda03 -570697213 -1.96759068e60 } : BV:32
16 : eq(8, 15) : BOOL
17 : 4022405450 { 0xefc1094a -272561846 -1.50809597e96 } : BV:32
18 : eq(8, 17) : BOOL
19 : 1671225709 { 0x639ce16d +1.22562944e72 } : BV:32
20 : eq(8, 19) : BOOL
21 : 218 { 0xda -38 } : BV:8
22 : 3724270082 { 0xddfbda02 -570697214 -1.96759057e60 } : BV:32
23 : eq(8, 22) : BOOL
24 : eq(8, 7) : BOOL
25 : 1671225711 { 0x639ce16f +1.22562968e72 } : BV:32
26 : eq(8, 25) : BOOL
27 : 221 { 0xdd -35 } : BV:8
28 : 1671225708 { 0x639ce16c +1.22562932e72 } : BV:32
29 : eq(8, 28) : BOOL
30 : 4 { 0x4 } : BV:8
31 : ite(29, 11, 30) : BV:8
32 : ite(26, 27, 31) : BV:8
33 : ite(24, 11, 32) : BV:8
34 : ite(23, 11, 33) : BV:8
35 : ite(20, 21, 34) : BV:8
36 : ite(18, 11, 35) : BV:8
37 : ite(16, 11, 36) : BV:8
38 : ite(13, 14, 37) : BV:8
39 : ite(10, 11, 38) : BV:8
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvadd(40, 6, 7) : BV:32
42 : eq(41, 9) : BOOL
43 : eq(41, 12) : BOOL
44 : eq(41, 15) : BOOL
45 : eq(41, 17) : BOOL
46 : eq(41, 19) : BOOL
47 : eq(41, 22) : BOOL
48 : eq(41, 7) : BOOL
49 : eq(41, 25) : BOOL
50 : eq(41, 28) : BOOL
51 : ite(50, 11, 30) : BV:8
52 : ite(49, 27, 51) : BV:8
53 : ite(48, 11, 52) : BV:8
54 : ite(47, 11, 53) : BV:8
55 : ite(46, 21, 54) : BV:8
56 : ite(45, 11, 55) : BV:8
57 : ite(44, 11, 56) : BV:8
58 : ite(43, 14, 57) : BV:8
59 : ite(42, 11, 58) : BV:8
60 : 1 { 0x1 +1.11e129 } : BV:32
61 : bvadd(60, 6, 7) : BV:32
62 : eq(61, 9) : BOOL
63 : eq(61, 12) : BOOL
64 : eq(61, 15) : BOOL
65 : eq(61, 17) : BOOL
66 : eq(61, 19) : BOOL
67 : eq(61, 22) : BOOL
68 : eq(61, 7) : BOOL
69 : eq(61, 25) : BOOL
70 : eq(61, 28) : BOOL
71 : ite(70, 11, 30) : BV:8
72 : ite(69, 27, 71) : BV:8
73 : ite(68, 11, 72) : BV:8
74 : ite(67, 11, 73) : BV:8
75 : ite(66, 21, 74) : BV:8
76 : ite(65, 11, 75) : BV:8
77 : ite(64, 11, 76) : BV:8
78 : ite(63, 14, 77) : BV:8
79 : ite(62, 11, 78) : BV:8
80 : bvadd(6, 7) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 15) : BOOL
84 : eq(80, 17) : BOOL
85 : eq(80, 19) : BOOL
86 : eq(80, 22) : BOOL
87 : eq(80, 7) : BOOL
88 : eq(80, 25) : BOOL
89 : eq(80, 28) : BOOL
90 : ite(89, 11, 30) : BV:8
91 : ite(88, 27, 90) : BV:8
92 : ite(87, 11, 91) : BV:8
93 : ite(86, 11, 92) : BV:8
94 : ite(85, 21, 93) : BV:8
95 : ite(84, 11, 94) : BV:8
96 : ite(83, 11, 95) : BV:8
97 : ite(82, 14, 96) : BV:8
98 : ite(81, 11, 97) : BV:8
99 : bvconcat(39, 59, 79, 98) : BV:32
100 : ite(3, 2, 99) : BV:32
101 : lambda(1, 100) : FUNCTION[BV:32 -> BV:32]
102 : sym_const(101) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 308041456 { 0x125c56f0 +1.72140312e165 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4022405448 { 0xefc10948 -272561848 -1.50809574e96 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 4022405451 { 0xefc1094b -272561845 -1.50809609e96 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1671225708 { 0x639ce16c +1.22562932e72 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1671225711 { 0x639ce16f +1.22562968e72 } : BV:32
=counter_example.random_seed
3002094805
=counter_example_end
=global nodece 21 num_edges_traversed 2
=global nodece 21 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 22
=global nodece 22 nodece z3v487.ce713.num_edges_traversed2
=global nodece 22 nodece_path
=global nodece 22 nodece_path.graph_edge_composition
(epsilon)
=global nodece 22 nodece_cached_counterexample
=counter_example_begin z3v487.ce713 617f34e33137a3132e36aacd9a149d
=input.spec-%var-x-1
1 : Lambda181 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2 { 0x2 +1.23e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda182 : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 17) : BV:32
21 : bvadd(18, 20, 2) : BV:32
22 : 211200 { 0x33900 +1.2517700e129 } : BV:32
23 : eq(21, 22) : BOOL
24 : 2 { 0x2 } : BV:8
25 : 0 { 0x0 } : BV:8
26 : ite(23, 24, 25) : BV:8
27 : bvadd(8, 20, 2) : BV:32
28 : eq(27, 22) : BOOL
29 : ite(28, 24, 25) : BV:8
30 : bvadd(4, 20, 2) : BV:32
31 : eq(30, 22) : BOOL
32 : ite(31, 24, 25) : BV:8
33 : bvadd(20, 2) : BV:32
34 : eq(33, 22) : BOOL
35 : ite(34, 24, 25) : BV:8
36 : bvconcat(26, 29, 32, 35) : BV:32
37 : lambda(17, 36) : FUNCTION[BV:32 -> BV:32]
38 : map(16, 37) : MAP[BV:32 -> BV:32]
39 : sym_const(38) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L3%6%bbentry
1 : Lambda181 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2 { 0x2 +1.23e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda182 : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 17) : BV:32
21 : bvadd(18, 20, 2) : BV:32
22 : 211200 { 0x33900 +1.2517700e129 } : BV:32
23 : eq(21, 22) : BOOL
24 : 2 { 0x2 } : BV:8
25 : 0 { 0x0 } : BV:8
26 : ite(23, 24, 25) : BV:8
27 : bvadd(8, 20, 2) : BV:32
28 : eq(27, 22) : BOOL
29 : ite(28, 24, 25) : BV:8
30 : bvadd(4, 20, 2) : BV:32
31 : eq(30, 22) : BOOL
32 : ite(31, 24, 25) : BV:8
33 : bvadd(20, 2) : BV:32
34 : eq(33, 22) : BOOL
35 : ite(34, 24, 25) : BV:8
36 : bvconcat(26, 29, 32, 35) : BV:32
37 : lambda(17, 36) : FUNCTION[BV:32 -> BV:32]
38 : map(16, 37) : MAP[BV:32 -> BV:32]
39 : sym_const(38) : MAP[BV:32 -> BV:32]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-ret-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 211199 ] -> 0, [ 211200; 211200 ] -> 2, [ 211201; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 211199 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 211200; 211203 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 211204; 805200387 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 805200388; 805200391 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 805200392; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 805200388 { 0x2ffe6204 +1.98736619e224 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 211200 { 0x33900 +1.2517700e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%6%bbentry.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%6%bbentry.1.1
1 : Lambda164 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(3, 1) : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : bvadd(2, 4, 5) : BV:32
7 : 211200 { 0x33900 +1.2517700e129 } : BV:32
8 : eq(6, 7) : BOOL
9 : 2 { 0x2 } : BV:8
10 : 0 { 0x0 } : BV:8
11 : ite(8, 9, 10) : BV:8
12 : 2 { 0x2 +1.23e129 } : BV:32
13 : bvadd(12, 4, 5) : BV:32
14 : eq(13, 7) : BOOL
15 : ite(14, 9, 10) : BV:8
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : bvadd(16, 4, 5) : BV:32
18 : eq(17, 7) : BOOL
19 : ite(18, 9, 10) : BV:8
20 : bvadd(4, 5) : BV:32
21 : eq(20, 7) : BOOL
22 : ite(21, 9, 10) : BV:8
23 : bvconcat(11, 15, 19, 22) : BV:32
24 : lambda(1, 23) : FUNCTION[BV:32 -> BV:32]
25 : sym_const(24) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : Lambda165 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(3, 1) : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : bvadd(2, 4, 5) : BV:32
7 : 211200 { 0x33900 +1.2517700e129 } : BV:32
8 : eq(6, 7) : BOOL
9 : 2 { 0x2 } : BV:8
10 : 0 { 0x0 } : BV:8
11 : ite(8, 9, 10) : BV:8
12 : 2 { 0x2 +1.23e129 } : BV:32
13 : bvadd(12, 4, 5) : BV:32
14 : eq(13, 7) : BOOL
15 : ite(14, 9, 10) : BV:8
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : bvadd(16, 4, 5) : BV:32
18 : eq(17, 7) : BOOL
19 : ite(18, 9, 10) : BV:8
20 : bvadd(4, 5) : BV:32
21 : eq(20, 7) : BOOL
22 : ite(21, 9, 10) : BV:8
23 : bvconcat(11, 15, 19, 22) : BV:32
24 : lambda(1, 23) : FUNCTION[BV:32 -> BV:32]
25 : sym_const(24) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 914012779 { 0x367aba6b +1.95881402e237 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 211200 { 0x33900 +1.2517700e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 211203 { 0x33903 +1.2517735e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 805200388 { 0x2ffe6204 +1.98736619e224 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 805200391 { 0x2ffe6207 +1.98736655e224 } : BV:32
=counter_example.random_seed
4268463455
=counter_example_end
=global nodece 22 num_edges_traversed 2
=global nodece 22 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 23
=global nodece 23 nodece z3.ce703.num_edges_traversed2
=global nodece 23 nodece_path
=global nodece 23 nodece_path.graph_edge_composition
(epsilon)
=global nodece 23 nodece_cached_counterexample
=counter_example_begin z3.ce703 f9e54ef267ea99e6fd30718a43a8d7
=input.spec-%var-x-1
1 : Lambda207 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda208 : BV:32
17 : eq(16, 2) : BOOL
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 16) : BV:32
21 : 1761587968 { 0x68ffb300 +1.99765014e82 } : BV:32
22 : bvadd(18, 20, 21) : BV:32
23 : 3047749397 { 0xb5a8f715 -1247217899 -1.32004034e236 } : BV:32
24 : eq(22, 23) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 1863589430 { 0x6f141e36 +1.15717196e95 } : BV:32
27 : eq(22, 26) : BOOL
28 : 255 { 0xff -1 } : BV:8
29 : 3047749396 { 0xb5a8f714 -1247217900 -1.32004022e236 } : BV:32
30 : eq(22, 29) : BOOL
31 : 1 { 0x1 } : BV:8
32 : 1761587971 { 0x68ffb303 +1.99765050e82 } : BV:32
33 : eq(22, 32) : BOOL
34 : 3047749399 { 0xb5a8f717 -1247217897 -1.32004058e236 } : BV:32
35 : eq(22, 34) : BOOL
36 : 1761587969 { 0x68ffb301 +1.99765026e82 } : BV:32
37 : eq(22, 36) : BOOL
38 : 3047749398 { 0xb5a8f716 -1247217898 -1.32004046e236 } : BV:32
39 : eq(22, 38) : BOOL
40 : 1761587970 { 0x68ffb302 +1.99765038e82 } : BV:32
41 : eq(22, 40) : BOOL
42 : eq(22, 21) : BOOL
43 : 1863589431 { 0x6f141e37 +1.15717208e95 } : BV:32
44 : eq(22, 43) : BOOL
45 : 104 { 0x68 } : BV:8
46 : 1863589428 { 0x6f141e34 +1.15717172e95 } : BV:32
47 : eq(22, 46) : BOOL
48 : 179 { 0xb3 -77 } : BV:8
49 : ite(47, 25, 48) : BV:8
50 : ite(44, 45, 49) : BV:8
51 : ite(42, 25, 50) : BV:8
52 : ite(41, 25, 51) : BV:8
53 : ite(39, 25, 52) : BV:8
54 : ite(37, 25, 53) : BV:8
55 : ite(35, 25, 54) : BV:8
56 : ite(33, 25, 55) : BV:8
57 : ite(30, 31, 56) : BV:8
58 : ite(27, 28, 57) : BV:8
59 : ite(24, 25, 58) : BV:8
60 : 2 { 0x2 +1.23e129 } : BV:32
61 : bvadd(60, 20, 21) : BV:32
62 : eq(61, 23) : BOOL
63 : eq(61, 26) : BOOL
64 : eq(61, 29) : BOOL
65 : eq(61, 32) : BOOL
66 : eq(61, 34) : BOOL
67 : eq(61, 36) : BOOL
68 : eq(61, 38) : BOOL
69 : eq(61, 40) : BOOL
70 : eq(61, 21) : BOOL
71 : eq(61, 43) : BOOL
72 : eq(61, 46) : BOOL
73 : ite(72, 25, 48) : BV:8
74 : ite(71, 45, 73) : BV:8
75 : ite(70, 25, 74) : BV:8
76 : ite(69, 25, 75) : BV:8
77 : ite(68, 25, 76) : BV:8
78 : ite(67, 25, 77) : BV:8
79 : ite(66, 25, 78) : BV:8
80 : ite(65, 25, 79) : BV:8
81 : ite(64, 31, 80) : BV:8
82 : ite(63, 28, 81) : BV:8
83 : ite(62, 25, 82) : BV:8
84 : bvadd(7, 20, 21) : BV:32
85 : eq(84, 23) : BOOL
86 : eq(84, 26) : BOOL
87 : eq(84, 29) : BOOL
88 : eq(84, 32) : BOOL
89 : eq(84, 34) : BOOL
90 : eq(84, 36) : BOOL
91 : eq(84, 38) : BOOL
92 : eq(84, 40) : BOOL
93 : eq(84, 21) : BOOL
94 : eq(84, 43) : BOOL
95 : eq(84, 46) : BOOL
96 : ite(95, 25, 48) : BV:8
97 : ite(94, 45, 96) : BV:8
98 : ite(93, 25, 97) : BV:8
99 : ite(92, 25, 98) : BV:8
100 : ite(91, 25, 99) : BV:8
101 : ite(90, 25, 100) : BV:8
102 : ite(89, 25, 101) : BV:8
103 : ite(88, 25, 102) : BV:8
104 : ite(87, 31, 103) : BV:8
105 : ite(86, 28, 104) : BV:8
106 : ite(85, 25, 105) : BV:8
107 : bvadd(20, 21) : BV:32
108 : eq(107, 23) : BOOL
109 : eq(107, 26) : BOOL
110 : eq(107, 29) : BOOL
111 : eq(107, 32) : BOOL
112 : eq(107, 34) : BOOL
113 : eq(107, 36) : BOOL
114 : eq(107, 38) : BOOL
115 : eq(107, 40) : BOOL
116 : eq(107, 21) : BOOL
117 : eq(107, 43) : BOOL
118 : eq(107, 46) : BOOL
119 : ite(118, 25, 48) : BV:8
120 : ite(117, 45, 119) : BV:8
121 : ite(116, 25, 120) : BV:8
122 : ite(115, 25, 121) : BV:8
123 : ite(114, 25, 122) : BV:8
124 : ite(113, 25, 123) : BV:8
125 : ite(112, 25, 124) : BV:8
126 : ite(111, 25, 125) : BV:8
127 : ite(110, 31, 126) : BV:8
128 : ite(109, 28, 127) : BV:8
129 : ite(108, 25, 128) : BV:8
130 : bvconcat(59, 83, 106, 129) : BV:32
131 : ite(17, 2, 130) : BV:32
132 : lambda(16, 131) : FUNCTION[BV:32 -> BV:32]
133 : map(15, 132) : MAP[BV:32 -> BV:32]
134 : sym_const(133) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L3%6%bbentry
1 : Lambda207 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda208 : BV:32
17 : eq(16, 2) : BOOL
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 16) : BV:32
21 : 1761587968 { 0x68ffb300 +1.99765014e82 } : BV:32
22 : bvadd(18, 20, 21) : BV:32
23 : 3047749397 { 0xb5a8f715 -1247217899 -1.32004034e236 } : BV:32
24 : eq(22, 23) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 1863589430 { 0x6f141e36 +1.15717196e95 } : BV:32
27 : eq(22, 26) : BOOL
28 : 255 { 0xff -1 } : BV:8
29 : 3047749396 { 0xb5a8f714 -1247217900 -1.32004022e236 } : BV:32
30 : eq(22, 29) : BOOL
31 : 1 { 0x1 } : BV:8
32 : 1761587971 { 0x68ffb303 +1.99765050e82 } : BV:32
33 : eq(22, 32) : BOOL
34 : 3047749399 { 0xb5a8f717 -1247217897 -1.32004058e236 } : BV:32
35 : eq(22, 34) : BOOL
36 : 1761587969 { 0x68ffb301 +1.99765026e82 } : BV:32
37 : eq(22, 36) : BOOL
38 : 3047749398 { 0xb5a8f716 -1247217898 -1.32004046e236 } : BV:32
39 : eq(22, 38) : BOOL
40 : 1761587970 { 0x68ffb302 +1.99765038e82 } : BV:32
41 : eq(22, 40) : BOOL
42 : eq(22, 21) : BOOL
43 : 1863589431 { 0x6f141e37 +1.15717208e95 } : BV:32
44 : eq(22, 43) : BOOL
45 : 104 { 0x68 } : BV:8
46 : 1863589428 { 0x6f141e34 +1.15717172e95 } : BV:32
47 : eq(22, 46) : BOOL
48 : 179 { 0xb3 -77 } : BV:8
49 : ite(47, 25, 48) : BV:8
50 : ite(44, 45, 49) : BV:8
51 : ite(42, 25, 50) : BV:8
52 : ite(41, 25, 51) : BV:8
53 : ite(39, 25, 52) : BV:8
54 : ite(37, 25, 53) : BV:8
55 : ite(35, 25, 54) : BV:8
56 : ite(33, 25, 55) : BV:8
57 : ite(30, 31, 56) : BV:8
58 : ite(27, 28, 57) : BV:8
59 : ite(24, 25, 58) : BV:8
60 : 2 { 0x2 +1.23e129 } : BV:32
61 : bvadd(60, 20, 21) : BV:32
62 : eq(61, 23) : BOOL
63 : eq(61, 26) : BOOL
64 : eq(61, 29) : BOOL
65 : eq(61, 32) : BOOL
66 : eq(61, 34) : BOOL
67 : eq(61, 36) : BOOL
68 : eq(61, 38) : BOOL
69 : eq(61, 40) : BOOL
70 : eq(61, 21) : BOOL
71 : eq(61, 43) : BOOL
72 : eq(61, 46) : BOOL
73 : ite(72, 25, 48) : BV:8
74 : ite(71, 45, 73) : BV:8
75 : ite(70, 25, 74) : BV:8
76 : ite(69, 25, 75) : BV:8
77 : ite(68, 25, 76) : BV:8
78 : ite(67, 25, 77) : BV:8
79 : ite(66, 25, 78) : BV:8
80 : ite(65, 25, 79) : BV:8
81 : ite(64, 31, 80) : BV:8
82 : ite(63, 28, 81) : BV:8
83 : ite(62, 25, 82) : BV:8
84 : bvadd(7, 20, 21) : BV:32
85 : eq(84, 23) : BOOL
86 : eq(84, 26) : BOOL
87 : eq(84, 29) : BOOL
88 : eq(84, 32) : BOOL
89 : eq(84, 34) : BOOL
90 : eq(84, 36) : BOOL
91 : eq(84, 38) : BOOL
92 : eq(84, 40) : BOOL
93 : eq(84, 21) : BOOL
94 : eq(84, 43) : BOOL
95 : eq(84, 46) : BOOL
96 : ite(95, 25, 48) : BV:8
97 : ite(94, 45, 96) : BV:8
98 : ite(93, 25, 97) : BV:8
99 : ite(92, 25, 98) : BV:8
100 : ite(91, 25, 99) : BV:8
101 : ite(90, 25, 100) : BV:8
102 : ite(89, 25, 101) : BV:8
103 : ite(88, 25, 102) : BV:8
104 : ite(87, 31, 103) : BV:8
105 : ite(86, 28, 104) : BV:8
106 : ite(85, 25, 105) : BV:8
107 : bvadd(20, 21) : BV:32
108 : eq(107, 23) : BOOL
109 : eq(107, 26) : BOOL
110 : eq(107, 29) : BOOL
111 : eq(107, 32) : BOOL
112 : eq(107, 34) : BOOL
113 : eq(107, 36) : BOOL
114 : eq(107, 38) : BOOL
115 : eq(107, 40) : BOOL
116 : eq(107, 21) : BOOL
117 : eq(107, 43) : BOOL
118 : eq(107, 46) : BOOL
119 : ite(118, 25, 48) : BV:8
120 : ite(117, 45, 119) : BV:8
121 : ite(116, 25, 120) : BV:8
122 : ite(115, 25, 121) : BV:8
123 : ite(114, 25, 122) : BV:8
124 : ite(113, 25, 123) : BV:8
125 : ite(112, 25, 124) : BV:8
126 : ite(111, 25, 125) : BV:8
127 : ite(110, 31, 126) : BV:8
128 : ite(109, 28, 127) : BV:8
129 : ite(108, 25, 128) : BV:8
130 : bvconcat(59, 83, 106, 129) : BV:32
131 : ite(17, 2, 130) : BV:32
132 : lambda(16, 131) : FUNCTION[BV:32 -> BV:32]
133 : map(15, 132) : MAP[BV:32 -> BV:32]
134 : sym_const(133) : MAP[BV:32 -> BV:32]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-ret-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 1761587968 { 0x68ffb300 +1.99765014e82 } : BV:32
=input.dst.llvm-%n
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1761587967 ] -> 179, [ 1761587968; 1761587971 ] -> 0, [ 1761587972; 1863589427 ] -> 179, [ 1863589428; 1863589428 ] -> 0, [ 1863589429; 1863589429 ] -> 179, [ 1863589430; 1863589430 ] -> 255, [ 1863589431; 1863589431 ] -> 104, [ 1863589432; 3047749395 ] -> 179, [ 3047749396; 3047749396 ] -> 1, [ 3047749397; 3047749399 ] -> 0, [ 3047749400; 4294967295 ] -> 179, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1863589427 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1863589428; 1863589431 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1863589432; 3047749395 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3047749396; 3047749399 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3047749400; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1863589428 { 0x6f141e34 +1.15717172e95 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3047749396 { 0xb5a8f714 -1247217900 -1.32004022e236 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%6%bbentry.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%6%bbentry.1.1
1 : Lambda195 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 1761587968 { 0x68ffb300 +1.99765014e82 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 3047749397 { 0xb5a8f715 -1247217899 -1.32004034e236 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 1863589430 { 0x6f141e36 +1.15717196e95 } : BV:32
13 : eq(8, 12) : BOOL
14 : 255 { 0xff -1 } : BV:8
15 : 3047749396 { 0xb5a8f714 -1247217900 -1.32004022e236 } : BV:32
16 : eq(8, 15) : BOOL
17 : 1 { 0x1 } : BV:8
18 : 1761587971 { 0x68ffb303 +1.99765050e82 } : BV:32
19 : eq(8, 18) : BOOL
20 : 3047749399 { 0xb5a8f717 -1247217897 -1.32004058e236 } : BV:32
21 : eq(8, 20) : BOOL
22 : 1761587969 { 0x68ffb301 +1.99765026e82 } : BV:32
23 : eq(8, 22) : BOOL
24 : 3047749398 { 0xb5a8f716 -1247217898 -1.32004046e236 } : BV:32
25 : eq(8, 24) : BOOL
26 : 1761587970 { 0x68ffb302 +1.99765038e82 } : BV:32
27 : eq(8, 26) : BOOL
28 : eq(8, 7) : BOOL
29 : 1863589431 { 0x6f141e37 +1.15717208e95 } : BV:32
30 : eq(8, 29) : BOOL
31 : 104 { 0x68 } : BV:8
32 : 1863589428 { 0x6f141e34 +1.15717172e95 } : BV:32
33 : eq(8, 32) : BOOL
34 : 179 { 0xb3 -77 } : BV:8
35 : ite(33, 11, 34) : BV:8
36 : ite(30, 31, 35) : BV:8
37 : ite(28, 11, 36) : BV:8
38 : ite(27, 11, 37) : BV:8
39 : ite(25, 11, 38) : BV:8
40 : ite(23, 11, 39) : BV:8
41 : ite(21, 11, 40) : BV:8
42 : ite(19, 11, 41) : BV:8
43 : ite(16, 17, 42) : BV:8
44 : ite(13, 14, 43) : BV:8
45 : ite(10, 11, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 6, 7) : BV:32
48 : eq(47, 9) : BOOL
49 : eq(47, 12) : BOOL
50 : eq(47, 15) : BOOL
51 : eq(47, 18) : BOOL
52 : eq(47, 20) : BOOL
53 : eq(47, 22) : BOOL
54 : eq(47, 24) : BOOL
55 : eq(47, 26) : BOOL
56 : eq(47, 7) : BOOL
57 : eq(47, 29) : BOOL
58 : eq(47, 32) : BOOL
59 : ite(58, 11, 34) : BV:8
60 : ite(57, 31, 59) : BV:8
61 : ite(56, 11, 60) : BV:8
62 : ite(55, 11, 61) : BV:8
63 : ite(54, 11, 62) : BV:8
64 : ite(53, 11, 63) : BV:8
65 : ite(52, 11, 64) : BV:8
66 : ite(51, 11, 65) : BV:8
67 : ite(50, 17, 66) : BV:8
68 : ite(49, 14, 67) : BV:8
69 : ite(48, 11, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 6, 7) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 15) : BOOL
75 : eq(71, 18) : BOOL
76 : eq(71, 20) : BOOL
77 : eq(71, 22) : BOOL
78 : eq(71, 24) : BOOL
79 : eq(71, 26) : BOOL
80 : eq(71, 7) : BOOL
81 : eq(71, 29) : BOOL
82 : eq(71, 32) : BOOL
83 : ite(82, 11, 34) : BV:8
84 : ite(81, 31, 83) : BV:8
85 : ite(80, 11, 84) : BV:8
86 : ite(79, 11, 85) : BV:8
87 : ite(78, 11, 86) : BV:8
88 : ite(77, 11, 87) : BV:8
89 : ite(76, 11, 88) : BV:8
90 : ite(75, 11, 89) : BV:8
91 : ite(74, 17, 90) : BV:8
92 : ite(73, 14, 91) : BV:8
93 : ite(72, 11, 92) : BV:8
94 : bvadd(6, 7) : BV:32
95 : eq(94, 9) : BOOL
96 : eq(94, 12) : BOOL
97 : eq(94, 15) : BOOL
98 : eq(94, 18) : BOOL
99 : eq(94, 20) : BOOL
100 : eq(94, 22) : BOOL
101 : eq(94, 24) : BOOL
102 : eq(94, 26) : BOOL
103 : eq(94, 7) : BOOL
104 : eq(94, 29) : BOOL
105 : eq(94, 32) : BOOL
106 : ite(105, 11, 34) : BV:8
107 : ite(104, 31, 106) : BV:8
108 : ite(103, 11, 107) : BV:8
109 : ite(102, 11, 108) : BV:8
110 : ite(101, 11, 109) : BV:8
111 : ite(100, 11, 110) : BV:8
112 : ite(99, 11, 111) : BV:8
113 : ite(98, 11, 112) : BV:8
114 : ite(97, 17, 113) : BV:8
115 : ite(96, 14, 114) : BV:8
116 : ite(95, 11, 115) : BV:8
117 : bvconcat(45, 69, 93, 116) : BV:32
118 : ite(3, 2, 117) : BV:32
119 : ite(3, 2, 118) : BV:32
120 : lambda(1, 119) : FUNCTION[BV:32 -> BV:32]
121 : sym_const(120) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : Lambda196 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 1761587968 { 0x68ffb300 +1.99765014e82 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 3047749397 { 0xb5a8f715 -1247217899 -1.32004034e236 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 1863589430 { 0x6f141e36 +1.15717196e95 } : BV:32
13 : eq(8, 12) : BOOL
14 : 255 { 0xff -1 } : BV:8
15 : 3047749396 { 0xb5a8f714 -1247217900 -1.32004022e236 } : BV:32
16 : eq(8, 15) : BOOL
17 : 1 { 0x1 } : BV:8
18 : 1761587971 { 0x68ffb303 +1.99765050e82 } : BV:32
19 : eq(8, 18) : BOOL
20 : 3047749399 { 0xb5a8f717 -1247217897 -1.32004058e236 } : BV:32
21 : eq(8, 20) : BOOL
22 : 1761587969 { 0x68ffb301 +1.99765026e82 } : BV:32
23 : eq(8, 22) : BOOL
24 : 3047749398 { 0xb5a8f716 -1247217898 -1.32004046e236 } : BV:32
25 : eq(8, 24) : BOOL
26 : 1761587970 { 0x68ffb302 +1.99765038e82 } : BV:32
27 : eq(8, 26) : BOOL
28 : eq(8, 7) : BOOL
29 : 1863589431 { 0x6f141e37 +1.15717208e95 } : BV:32
30 : eq(8, 29) : BOOL
31 : 104 { 0x68 } : BV:8
32 : 1863589428 { 0x6f141e34 +1.15717172e95 } : BV:32
33 : eq(8, 32) : BOOL
34 : 179 { 0xb3 -77 } : BV:8
35 : ite(33, 11, 34) : BV:8
36 : ite(30, 31, 35) : BV:8
37 : ite(28, 11, 36) : BV:8
38 : ite(27, 11, 37) : BV:8
39 : ite(25, 11, 38) : BV:8
40 : ite(23, 11, 39) : BV:8
41 : ite(21, 11, 40) : BV:8
42 : ite(19, 11, 41) : BV:8
43 : ite(16, 17, 42) : BV:8
44 : ite(13, 14, 43) : BV:8
45 : ite(10, 11, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 6, 7) : BV:32
48 : eq(47, 9) : BOOL
49 : eq(47, 12) : BOOL
50 : eq(47, 15) : BOOL
51 : eq(47, 18) : BOOL
52 : eq(47, 20) : BOOL
53 : eq(47, 22) : BOOL
54 : eq(47, 24) : BOOL
55 : eq(47, 26) : BOOL
56 : eq(47, 7) : BOOL
57 : eq(47, 29) : BOOL
58 : eq(47, 32) : BOOL
59 : ite(58, 11, 34) : BV:8
60 : ite(57, 31, 59) : BV:8
61 : ite(56, 11, 60) : BV:8
62 : ite(55, 11, 61) : BV:8
63 : ite(54, 11, 62) : BV:8
64 : ite(53, 11, 63) : BV:8
65 : ite(52, 11, 64) : BV:8
66 : ite(51, 11, 65) : BV:8
67 : ite(50, 17, 66) : BV:8
68 : ite(49, 14, 67) : BV:8
69 : ite(48, 11, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 6, 7) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 15) : BOOL
75 : eq(71, 18) : BOOL
76 : eq(71, 20) : BOOL
77 : eq(71, 22) : BOOL
78 : eq(71, 24) : BOOL
79 : eq(71, 26) : BOOL
80 : eq(71, 7) : BOOL
81 : eq(71, 29) : BOOL
82 : eq(71, 32) : BOOL
83 : ite(82, 11, 34) : BV:8
84 : ite(81, 31, 83) : BV:8
85 : ite(80, 11, 84) : BV:8
86 : ite(79, 11, 85) : BV:8
87 : ite(78, 11, 86) : BV:8
88 : ite(77, 11, 87) : BV:8
89 : ite(76, 11, 88) : BV:8
90 : ite(75, 11, 89) : BV:8
91 : ite(74, 17, 90) : BV:8
92 : ite(73, 14, 91) : BV:8
93 : ite(72, 11, 92) : BV:8
94 : bvadd(6, 7) : BV:32
95 : eq(94, 9) : BOOL
96 : eq(94, 12) : BOOL
97 : eq(94, 15) : BOOL
98 : eq(94, 18) : BOOL
99 : eq(94, 20) : BOOL
100 : eq(94, 22) : BOOL
101 : eq(94, 24) : BOOL
102 : eq(94, 26) : BOOL
103 : eq(94, 7) : BOOL
104 : eq(94, 29) : BOOL
105 : eq(94, 32) : BOOL
106 : ite(105, 11, 34) : BV:8
107 : ite(104, 31, 106) : BV:8
108 : ite(103, 11, 107) : BV:8
109 : ite(102, 11, 108) : BV:8
110 : ite(101, 11, 109) : BV:8
111 : ite(100, 11, 110) : BV:8
112 : ite(99, 11, 111) : BV:8
113 : ite(98, 11, 112) : BV:8
114 : ite(97, 17, 113) : BV:8
115 : ite(96, 14, 114) : BV:8
116 : ite(95, 11, 115) : BV:8
117 : bvconcat(45, 69, 93, 116) : BV:32
118 : ite(3, 2, 117) : BV:32
119 : lambda(1, 118) : FUNCTION[BV:32 -> BV:32]
120 : sym_const(119) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1935754076 { 0x7361435c +1.75986814e103 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3047749396 { 0xb5a8f714 -1247217900 -1.32004022e236 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3047749399 { 0xb5a8f717 -1247217897 -1.32004058e236 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1863589428 { 0x6f141e34 +1.15717172e95 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1863589431 { 0x6f141e37 +1.15717208e95 } : BV:32
=counter_example.random_seed
3277587493
=counter_example_end
=global nodece 23 num_edges_traversed 2
=global nodece 23 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 24
=global nodece 24 nodece z3.ce693.num_edges_traversed2
=global nodece 24 nodece_path
=global nodece 24 nodece_path.graph_edge_composition
(epsilon)
=global nodece 24 nodece_cached_counterexample
=counter_example_begin z3.ce693 b47e33f7eeaa3d7a15755cc4fb47dc
=input.spec-%var-x-1
1 : Lambda243 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 94062 { 0x16f6e +1.1121306e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 94063 { 0x16f6f +1.1121318e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda244 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3857542916 { 0xe5ed6f04 -437424380 -1.85495042e76 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 3857542917 { 0xe5ed6f05 -437424379 -1.85495054e76 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 4076267994 { 0xf2f6e9da -218699302 -1.92901158e102 } : BV:32
28 : eq(23, 27) : BOOL
29 : 237 { 0xed -19 } : BV:8
30 : 3857542919 { 0xe5ed6f07 -437424377 -1.85495078e76 } : BV:32
31 : eq(23, 30) : BOOL
32 : 3407283775 { 0xcb17063f -887683521 -1.17987811e23 } : BV:32
33 : eq(23, 32) : BOOL
34 : 3407283774 { 0xcb17063e -887683522 -1.17987799e23 } : BV:32
35 : eq(23, 34) : BOOL
36 : 1 { 0x1 } : BV:8
37 : 3857542918 { 0xe5ed6f06 -437424378 -1.85495066e76 } : BV:32
38 : eq(23, 37) : BOOL
39 : eq(23, 22) : BOOL
40 : 4076267995 { 0xf2f6e9db -218699301 -1.92901170e102 } : BV:32
41 : eq(23, 40) : BOOL
42 : 229 { 0xe5 -27 } : BV:8
43 : 4076267992 { 0xf2f6e9d8 -218699304 -1.92901134e102 } : BV:32
44 : eq(23, 43) : BOOL
45 : 4 { 0x4 } : BV:8
46 : 111 { 0x6f } : BV:8
47 : ite(44, 45, 46) : BV:8
48 : ite(41, 42, 47) : BV:8
49 : ite(39, 26, 48) : BV:8
50 : ite(38, 26, 49) : BV:8
51 : ite(35, 36, 50) : BV:8
52 : ite(33, 26, 51) : BV:8
53 : ite(31, 26, 52) : BV:8
54 : ite(28, 29, 53) : BV:8
55 : ite(25, 26, 54) : BV:8
56 : 2 { 0x2 +1.23e129 } : BV:32
57 : bvadd(56, 21, 22) : BV:32
58 : eq(57, 24) : BOOL
59 : eq(57, 27) : BOOL
60 : eq(57, 30) : BOOL
61 : eq(57, 32) : BOOL
62 : eq(57, 34) : BOOL
63 : eq(57, 37) : BOOL
64 : eq(57, 22) : BOOL
65 : eq(57, 40) : BOOL
66 : eq(57, 43) : BOOL
67 : ite(66, 45, 46) : BV:8
68 : ite(65, 42, 67) : BV:8
69 : ite(64, 26, 68) : BV:8
70 : ite(63, 26, 69) : BV:8
71 : ite(62, 36, 70) : BV:8
72 : ite(61, 26, 71) : BV:8
73 : ite(60, 26, 72) : BV:8
74 : ite(59, 29, 73) : BV:8
75 : ite(58, 26, 74) : BV:8
76 : 1 { 0x1 +1.11e129 } : BV:32
77 : bvadd(76, 21, 22) : BV:32
78 : eq(77, 24) : BOOL
79 : eq(77, 27) : BOOL
80 : eq(77, 30) : BOOL
81 : eq(77, 32) : BOOL
82 : eq(77, 34) : BOOL
83 : eq(77, 37) : BOOL
84 : eq(77, 22) : BOOL
85 : eq(77, 40) : BOOL
86 : eq(77, 43) : BOOL
87 : ite(86, 45, 46) : BV:8
88 : ite(85, 42, 87) : BV:8
89 : ite(84, 26, 88) : BV:8
90 : ite(83, 26, 89) : BV:8
91 : ite(82, 36, 90) : BV:8
92 : ite(81, 26, 91) : BV:8
93 : ite(80, 26, 92) : BV:8
94 : ite(79, 29, 93) : BV:8
95 : ite(78, 26, 94) : BV:8
96 : bvadd(21, 22) : BV:32
97 : eq(96, 24) : BOOL
98 : eq(96, 27) : BOOL
99 : eq(96, 30) : BOOL
100 : eq(96, 32) : BOOL
101 : eq(96, 34) : BOOL
102 : eq(96, 37) : BOOL
103 : eq(96, 22) : BOOL
104 : eq(96, 40) : BOOL
105 : eq(96, 43) : BOOL
106 : ite(105, 45, 46) : BV:8
107 : ite(104, 42, 106) : BV:8
108 : ite(103, 26, 107) : BV:8
109 : ite(102, 26, 108) : BV:8
110 : ite(101, 36, 109) : BV:8
111 : ite(100, 26, 110) : BV:8
112 : ite(99, 26, 111) : BV:8
113 : ite(98, 29, 112) : BV:8
114 : ite(97, 26, 113) : BV:8
115 : bvconcat(55, 75, 95, 114) : BV:32
116 : ite(18, 2, 115) : BV:32
117 : lambda(17, 116) : FUNCTION[BV:32 -> BV:32]
118 : map(16, 117) : MAP[BV:32 -> BV:32]
119 : sym_const(118) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L3%6%bbentry
1 : Lambda243 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 94062 { 0x16f6e +1.1121306e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 94063 { 0x16f6f +1.1121318e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda244 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3857542916 { 0xe5ed6f04 -437424380 -1.85495042e76 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 3857542917 { 0xe5ed6f05 -437424379 -1.85495054e76 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 4076267994 { 0xf2f6e9da -218699302 -1.92901158e102 } : BV:32
28 : eq(23, 27) : BOOL
29 : 237 { 0xed -19 } : BV:8
30 : 3857542919 { 0xe5ed6f07 -437424377 -1.85495078e76 } : BV:32
31 : eq(23, 30) : BOOL
32 : 3407283775 { 0xcb17063f -887683521 -1.17987811e23 } : BV:32
33 : eq(23, 32) : BOOL
34 : 3407283774 { 0xcb17063e -887683522 -1.17987799e23 } : BV:32
35 : eq(23, 34) : BOOL
36 : 1 { 0x1 } : BV:8
37 : 3857542918 { 0xe5ed6f06 -437424378 -1.85495066e76 } : BV:32
38 : eq(23, 37) : BOOL
39 : eq(23, 22) : BOOL
40 : 4076267995 { 0xf2f6e9db -218699301 -1.92901170e102 } : BV:32
41 : eq(23, 40) : BOOL
42 : 229 { 0xe5 -27 } : BV:8
43 : 4076267992 { 0xf2f6e9d8 -218699304 -1.92901134e102 } : BV:32
44 : eq(23, 43) : BOOL
45 : 4 { 0x4 } : BV:8
46 : 111 { 0x6f } : BV:8
47 : ite(44, 45, 46) : BV:8
48 : ite(41, 42, 47) : BV:8
49 : ite(39, 26, 48) : BV:8
50 : ite(38, 26, 49) : BV:8
51 : ite(35, 36, 50) : BV:8
52 : ite(33, 26, 51) : BV:8
53 : ite(31, 26, 52) : BV:8
54 : ite(28, 29, 53) : BV:8
55 : ite(25, 26, 54) : BV:8
56 : 2 { 0x2 +1.23e129 } : BV:32
57 : bvadd(56, 21, 22) : BV:32
58 : eq(57, 24) : BOOL
59 : eq(57, 27) : BOOL
60 : eq(57, 30) : BOOL
61 : eq(57, 32) : BOOL
62 : eq(57, 34) : BOOL
63 : eq(57, 37) : BOOL
64 : eq(57, 22) : BOOL
65 : eq(57, 40) : BOOL
66 : eq(57, 43) : BOOL
67 : ite(66, 45, 46) : BV:8
68 : ite(65, 42, 67) : BV:8
69 : ite(64, 26, 68) : BV:8
70 : ite(63, 26, 69) : BV:8
71 : ite(62, 36, 70) : BV:8
72 : ite(61, 26, 71) : BV:8
73 : ite(60, 26, 72) : BV:8
74 : ite(59, 29, 73) : BV:8
75 : ite(58, 26, 74) : BV:8
76 : 1 { 0x1 +1.11e129 } : BV:32
77 : bvadd(76, 21, 22) : BV:32
78 : eq(77, 24) : BOOL
79 : eq(77, 27) : BOOL
80 : eq(77, 30) : BOOL
81 : eq(77, 32) : BOOL
82 : eq(77, 34) : BOOL
83 : eq(77, 37) : BOOL
84 : eq(77, 22) : BOOL
85 : eq(77, 40) : BOOL
86 : eq(77, 43) : BOOL
87 : ite(86, 45, 46) : BV:8
88 : ite(85, 42, 87) : BV:8
89 : ite(84, 26, 88) : BV:8
90 : ite(83, 26, 89) : BV:8
91 : ite(82, 36, 90) : BV:8
92 : ite(81, 26, 91) : BV:8
93 : ite(80, 26, 92) : BV:8
94 : ite(79, 29, 93) : BV:8
95 : ite(78, 26, 94) : BV:8
96 : bvadd(21, 22) : BV:32
97 : eq(96, 24) : BOOL
98 : eq(96, 27) : BOOL
99 : eq(96, 30) : BOOL
100 : eq(96, 32) : BOOL
101 : eq(96, 34) : BOOL
102 : eq(96, 37) : BOOL
103 : eq(96, 22) : BOOL
104 : eq(96, 40) : BOOL
105 : eq(96, 43) : BOOL
106 : ite(105, 45, 46) : BV:8
107 : ite(104, 42, 106) : BV:8
108 : ite(103, 26, 107) : BV:8
109 : ite(102, 26, 108) : BV:8
110 : ite(101, 36, 109) : BV:8
111 : ite(100, 26, 110) : BV:8
112 : ite(99, 26, 111) : BV:8
113 : ite(98, 29, 112) : BV:8
114 : ite(97, 26, 113) : BV:8
115 : bvconcat(55, 75, 95, 114) : BV:32
116 : ite(18, 2, 115) : BV:32
117 : lambda(17, 116) : FUNCTION[BV:32 -> BV:32]
118 : map(16, 117) : MAP[BV:32 -> BV:32]
119 : sym_const(118) : MAP[BV:32 -> BV:32]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-ret-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 3857542916 { 0xe5ed6f04 -437424380 -1.85495042e76 } : BV:32
=input.dst.llvm-%n
1 : 94063 { 0x16f6f +1.1121318e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3407283773 ] -> 111, [ 3407283774; 3407283774 ] -> 1, [ 3407283775; 3407283775 ] -> 0, [ 3407283776; 3857542915 ] -> 111, [ 3857542916; 3857542919 ] -> 0, [ 3857542920; 4076267991 ] -> 111, [ 4076267992; 4076267992 ] -> 4, [ 4076267993; 4076267993 ] -> 111, [ 4076267994; 4076267994 ] -> 237, [ 4076267995; 4076267995 ] -> 229, [ 4076267996; 4294967295 ] -> 111, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3407283771 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3407283772; 3407283775 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3407283776; 4076267991 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4076267992; 4076267995 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4076267996; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4076267992 { 0xf2f6e9d8 -218699304 -1.92901134e102 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3407283772 { 0xcb17063c -887683524 -1.17987775e23 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%6%bbentry.0.1
1 : ([ 0; 94062 ] -> true, [ 94063; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%6%bbentry.1.1
1 : Lambda231 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3857542916 { 0xe5ed6f04 -437424380 -1.85495042e76 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 3857542917 { 0xe5ed6f05 -437424379 -1.85495054e76 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 4076267994 { 0xf2f6e9da -218699302 -1.92901158e102 } : BV:32
13 : eq(8, 12) : BOOL
14 : 237 { 0xed -19 } : BV:8
15 : 3857542919 { 0xe5ed6f07 -437424377 -1.85495078e76 } : BV:32
16 : eq(8, 15) : BOOL
17 : 3407283775 { 0xcb17063f -887683521 -1.17987811e23 } : BV:32
18 : eq(8, 17) : BOOL
19 : 3407283774 { 0xcb17063e -887683522 -1.17987799e23 } : BV:32
20 : eq(8, 19) : BOOL
21 : 1 { 0x1 } : BV:8
22 : 3857542918 { 0xe5ed6f06 -437424378 -1.85495066e76 } : BV:32
23 : eq(8, 22) : BOOL
24 : eq(8, 7) : BOOL
25 : 4076267995 { 0xf2f6e9db -218699301 -1.92901170e102 } : BV:32
26 : eq(8, 25) : BOOL
27 : 229 { 0xe5 -27 } : BV:8
28 : 4076267992 { 0xf2f6e9d8 -218699304 -1.92901134e102 } : BV:32
29 : eq(8, 28) : BOOL
30 : 4 { 0x4 } : BV:8
31 : 111 { 0x6f } : BV:8
32 : ite(29, 30, 31) : BV:8
33 : ite(26, 27, 32) : BV:8
34 : ite(24, 11, 33) : BV:8
35 : ite(23, 11, 34) : BV:8
36 : ite(20, 21, 35) : BV:8
37 : ite(18, 11, 36) : BV:8
38 : ite(16, 11, 37) : BV:8
39 : ite(13, 14, 38) : BV:8
40 : ite(10, 11, 39) : BV:8
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvadd(41, 6, 7) : BV:32
43 : eq(42, 9) : BOOL
44 : eq(42, 12) : BOOL
45 : eq(42, 15) : BOOL
46 : eq(42, 17) : BOOL
47 : eq(42, 19) : BOOL
48 : eq(42, 22) : BOOL
49 : eq(42, 7) : BOOL
50 : eq(42, 25) : BOOL
51 : eq(42, 28) : BOOL
52 : ite(51, 30, 31) : BV:8
53 : ite(50, 27, 52) : BV:8
54 : ite(49, 11, 53) : BV:8
55 : ite(48, 11, 54) : BV:8
56 : ite(47, 21, 55) : BV:8
57 : ite(46, 11, 56) : BV:8
58 : ite(45, 11, 57) : BV:8
59 : ite(44, 14, 58) : BV:8
60 : ite(43, 11, 59) : BV:8
61 : 1 { 0x1 +1.11e129 } : BV:32
62 : bvadd(61, 6, 7) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 15) : BOOL
66 : eq(62, 17) : BOOL
67 : eq(62, 19) : BOOL
68 : eq(62, 22) : BOOL
69 : eq(62, 7) : BOOL
70 : eq(62, 25) : BOOL
71 : eq(62, 28) : BOOL
72 : ite(71, 30, 31) : BV:8
73 : ite(70, 27, 72) : BV:8
74 : ite(69, 11, 73) : BV:8
75 : ite(68, 11, 74) : BV:8
76 : ite(67, 21, 75) : BV:8
77 : ite(66, 11, 76) : BV:8
78 : ite(65, 11, 77) : BV:8
79 : ite(64, 14, 78) : BV:8
80 : ite(63, 11, 79) : BV:8
81 : bvadd(6, 7) : BV:32
82 : eq(81, 9) : BOOL
83 : eq(81, 12) : BOOL
84 : eq(81, 15) : BOOL
85 : eq(81, 17) : BOOL
86 : eq(81, 19) : BOOL
87 : eq(81, 22) : BOOL
88 : eq(81, 7) : BOOL
89 : eq(81, 25) : BOOL
90 : eq(81, 28) : BOOL
91 : ite(90, 30, 31) : BV:8
92 : ite(89, 27, 91) : BV:8
93 : ite(88, 11, 92) : BV:8
94 : ite(87, 11, 93) : BV:8
95 : ite(86, 21, 94) : BV:8
96 : ite(85, 11, 95) : BV:8
97 : ite(84, 11, 96) : BV:8
98 : ite(83, 14, 97) : BV:8
99 : ite(82, 11, 98) : BV:8
100 : bvconcat(40, 60, 80, 99) : BV:32
101 : ite(3, 2, 100) : BV:32
102 : ite(3, 2, 101) : BV:32
103 : lambda(1, 102) : FUNCTION[BV:32 -> BV:32]
104 : sym_const(103) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 94062 ] -> true, [ 94063; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : Lambda232 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3857542916 { 0xe5ed6f04 -437424380 -1.85495042e76 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 3857542917 { 0xe5ed6f05 -437424379 -1.85495054e76 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 4076267994 { 0xf2f6e9da -218699302 -1.92901158e102 } : BV:32
13 : eq(8, 12) : BOOL
14 : 237 { 0xed -19 } : BV:8
15 : 3857542919 { 0xe5ed6f07 -437424377 -1.85495078e76 } : BV:32
16 : eq(8, 15) : BOOL
17 : 3407283775 { 0xcb17063f -887683521 -1.17987811e23 } : BV:32
18 : eq(8, 17) : BOOL
19 : 3407283774 { 0xcb17063e -887683522 -1.17987799e23 } : BV:32
20 : eq(8, 19) : BOOL
21 : 1 { 0x1 } : BV:8
22 : 3857542918 { 0xe5ed6f06 -437424378 -1.85495066e76 } : BV:32
23 : eq(8, 22) : BOOL
24 : eq(8, 7) : BOOL
25 : 4076267995 { 0xf2f6e9db -218699301 -1.92901170e102 } : BV:32
26 : eq(8, 25) : BOOL
27 : 229 { 0xe5 -27 } : BV:8
28 : 4076267992 { 0xf2f6e9d8 -218699304 -1.92901134e102 } : BV:32
29 : eq(8, 28) : BOOL
30 : 4 { 0x4 } : BV:8
31 : 111 { 0x6f } : BV:8
32 : ite(29, 30, 31) : BV:8
33 : ite(26, 27, 32) : BV:8
34 : ite(24, 11, 33) : BV:8
35 : ite(23, 11, 34) : BV:8
36 : ite(20, 21, 35) : BV:8
37 : ite(18, 11, 36) : BV:8
38 : ite(16, 11, 37) : BV:8
39 : ite(13, 14, 38) : BV:8
40 : ite(10, 11, 39) : BV:8
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvadd(41, 6, 7) : BV:32
43 : eq(42, 9) : BOOL
44 : eq(42, 12) : BOOL
45 : eq(42, 15) : BOOL
46 : eq(42, 17) : BOOL
47 : eq(42, 19) : BOOL
48 : eq(42, 22) : BOOL
49 : eq(42, 7) : BOOL
50 : eq(42, 25) : BOOL
51 : eq(42, 28) : BOOL
52 : ite(51, 30, 31) : BV:8
53 : ite(50, 27, 52) : BV:8
54 : ite(49, 11, 53) : BV:8
55 : ite(48, 11, 54) : BV:8
56 : ite(47, 21, 55) : BV:8
57 : ite(46, 11, 56) : BV:8
58 : ite(45, 11, 57) : BV:8
59 : ite(44, 14, 58) : BV:8
60 : ite(43, 11, 59) : BV:8
61 : 1 { 0x1 +1.11e129 } : BV:32
62 : bvadd(61, 6, 7) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 15) : BOOL
66 : eq(62, 17) : BOOL
67 : eq(62, 19) : BOOL
68 : eq(62, 22) : BOOL
69 : eq(62, 7) : BOOL
70 : eq(62, 25) : BOOL
71 : eq(62, 28) : BOOL
72 : ite(71, 30, 31) : BV:8
73 : ite(70, 27, 72) : BV:8
74 : ite(69, 11, 73) : BV:8
75 : ite(68, 11, 74) : BV:8
76 : ite(67, 21, 75) : BV:8
77 : ite(66, 11, 76) : BV:8
78 : ite(65, 11, 77) : BV:8
79 : ite(64, 14, 78) : BV:8
80 : ite(63, 11, 79) : BV:8
81 : bvadd(6, 7) : BV:32
82 : eq(81, 9) : BOOL
83 : eq(81, 12) : BOOL
84 : eq(81, 15) : BOOL
85 : eq(81, 17) : BOOL
86 : eq(81, 19) : BOOL
87 : eq(81, 22) : BOOL
88 : eq(81, 7) : BOOL
89 : eq(81, 25) : BOOL
90 : eq(81, 28) : BOOL
91 : ite(90, 30, 31) : BV:8
92 : ite(89, 27, 91) : BV:8
93 : ite(88, 11, 92) : BV:8
94 : ite(87, 11, 93) : BV:8
95 : ite(86, 21, 94) : BV:8
96 : ite(85, 11, 95) : BV:8
97 : ite(84, 11, 96) : BV:8
98 : ite(83, 14, 97) : BV:8
99 : ite(82, 11, 98) : BV:8
100 : bvconcat(40, 60, 80, 99) : BV:32
101 : ite(3, 2, 100) : BV:32
102 : lambda(1, 101) : FUNCTION[BV:32 -> BV:32]
103 : sym_const(102) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1115311958 { 0x427a4f56 +1.95554614e5 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3407283772 { 0xcb17063c -887683524 -1.17987775e23 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3407283775 { 0xcb17063f -887683521 -1.17987811e23 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4076267992 { 0xf2f6e9d8 -218699304 -1.92901134e102 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 4076267995 { 0xf2f6e9db -218699301 -1.92901170e102 } : BV:32
=counter_example.random_seed
794214668
=counter_example_end
=global nodece 24 num_edges_traversed 2
=global nodece 24 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 25
=global nodece 25 nodece z3.ce683.num_edges_traversed2
=global nodece 25 nodece_path
=global nodece 25 nodece_path.graph_edge_composition
(epsilon)
=global nodece 25 nodece_cached_counterexample
=counter_example_begin z3.ce683 a23247a0fbfa6e5fb4b9eae5f43ebdf6
=input.spec-%var-x-1
1 : Lambda285 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda286 : BV:32
17 : eq(16, 2) : BOOL
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 16) : BV:32
21 : 4288671232 { 0xff9fee00 -6296064 -1.24945068e128 } : BV:32
22 : bvadd(18, 20, 21) : BV:32
23 : 882445057 { 0x34990b01 +1.19564831e234 } : BV:32
24 : eq(22, 23) : BOOL
25 : 255 { 0xff -1 } : BV:8
26 : 882445056 { 0x34990b00 +1.19564819e234 } : BV:32
27 : eq(22, 26) : BOOL
28 : 4288671235 { 0xff9fee03 -6296061 -1.24945104e128 } : BV:32
29 : eq(22, 28) : BOOL
30 : 0 { 0x0 } : BV:8
31 : 882445059 { 0x34990b03 +1.19564855e234 } : BV:32
32 : eq(22, 31) : BOOL
33 : 4288671233 { 0xff9fee01 -6296063 -1.24945080e128 } : BV:32
34 : eq(22, 33) : BOOL
35 : 882445058 { 0x34990b02 +1.19564843e234 } : BV:32
36 : eq(22, 35) : BOOL
37 : 880872205 { 0x34810b0d +1.814974e234 } : BV:32
38 : eq(22, 37) : BOOL
39 : 238 { 0xee -18 } : BV:8
40 : 4288671234 { 0xff9fee02 -6296062 -1.24945092e128 } : BV:32
41 : eq(22, 40) : BOOL
42 : eq(22, 21) : BOOL
43 : 880872207 { 0x34810b0f +1.814998e234 } : BV:32
44 : eq(22, 43) : BOOL
45 : 880872204 { 0x34810b0c +1.814962e234 } : BV:32
46 : eq(22, 45) : BOOL
47 : 159 { 0x9f -97 } : BV:8
48 : ite(46, 30, 47) : BV:8
49 : ite(44, 25, 48) : BV:8
50 : ite(42, 30, 49) : BV:8
51 : ite(41, 30, 50) : BV:8
52 : ite(38, 39, 51) : BV:8
53 : ite(36, 25, 52) : BV:8
54 : ite(34, 30, 53) : BV:8
55 : ite(32, 25, 54) : BV:8
56 : ite(29, 30, 55) : BV:8
57 : ite(27, 25, 56) : BV:8
58 : ite(24, 25, 57) : BV:8
59 : 2 { 0x2 +1.23e129 } : BV:32
60 : bvadd(59, 20, 21) : BV:32
61 : eq(60, 23) : BOOL
62 : eq(60, 26) : BOOL
63 : eq(60, 28) : BOOL
64 : eq(60, 31) : BOOL
65 : eq(60, 33) : BOOL
66 : eq(60, 35) : BOOL
67 : eq(60, 37) : BOOL
68 : eq(60, 40) : BOOL
69 : eq(60, 21) : BOOL
70 : eq(60, 43) : BOOL
71 : eq(60, 45) : BOOL
72 : ite(71, 30, 47) : BV:8
73 : ite(70, 25, 72) : BV:8
74 : ite(69, 30, 73) : BV:8
75 : ite(68, 30, 74) : BV:8
76 : ite(67, 39, 75) : BV:8
77 : ite(66, 25, 76) : BV:8
78 : ite(65, 30, 77) : BV:8
79 : ite(64, 25, 78) : BV:8
80 : ite(63, 30, 79) : BV:8
81 : ite(62, 25, 80) : BV:8
82 : ite(61, 25, 81) : BV:8
83 : 1 { 0x1 +1.11e129 } : BV:32
84 : bvadd(83, 20, 21) : BV:32
85 : eq(84, 23) : BOOL
86 : eq(84, 26) : BOOL
87 : eq(84, 28) : BOOL
88 : eq(84, 31) : BOOL
89 : eq(84, 33) : BOOL
90 : eq(84, 35) : BOOL
91 : eq(84, 37) : BOOL
92 : eq(84, 40) : BOOL
93 : eq(84, 21) : BOOL
94 : eq(84, 43) : BOOL
95 : eq(84, 45) : BOOL
96 : ite(95, 30, 47) : BV:8
97 : ite(94, 25, 96) : BV:8
98 : ite(93, 30, 97) : BV:8
99 : ite(92, 30, 98) : BV:8
100 : ite(91, 39, 99) : BV:8
101 : ite(90, 25, 100) : BV:8
102 : ite(89, 30, 101) : BV:8
103 : ite(88, 25, 102) : BV:8
104 : ite(87, 30, 103) : BV:8
105 : ite(86, 25, 104) : BV:8
106 : ite(85, 25, 105) : BV:8
107 : bvadd(20, 21) : BV:32
108 : eq(107, 23) : BOOL
109 : eq(107, 26) : BOOL
110 : eq(107, 28) : BOOL
111 : eq(107, 31) : BOOL
112 : eq(107, 33) : BOOL
113 : eq(107, 35) : BOOL
114 : eq(107, 37) : BOOL
115 : eq(107, 40) : BOOL
116 : eq(107, 21) : BOOL
117 : eq(107, 43) : BOOL
118 : eq(107, 45) : BOOL
119 : ite(118, 30, 47) : BV:8
120 : ite(117, 25, 119) : BV:8
121 : ite(116, 30, 120) : BV:8
122 : ite(115, 30, 121) : BV:8
123 : ite(114, 39, 122) : BV:8
124 : ite(113, 25, 123) : BV:8
125 : ite(112, 30, 124) : BV:8
126 : ite(111, 25, 125) : BV:8
127 : ite(110, 30, 126) : BV:8
128 : ite(109, 25, 127) : BV:8
129 : ite(108, 25, 128) : BV:8
130 : bvconcat(58, 82, 106, 129) : BV:32
131 : ite(17, 2, 130) : BV:32
132 : lambda(16, 131) : FUNCTION[BV:32 -> BV:32]
133 : map(15, 132) : MAP[BV:32 -> BV:32]
134 : sym_const(133) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L3%6%bbentry
1 : Lambda285 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda286 : BV:32
17 : eq(16, 2) : BOOL
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 16) : BV:32
21 : 4288671232 { 0xff9fee00 -6296064 -1.24945068e128 } : BV:32
22 : bvadd(18, 20, 21) : BV:32
23 : 882445057 { 0x34990b01 +1.19564831e234 } : BV:32
24 : eq(22, 23) : BOOL
25 : 255 { 0xff -1 } : BV:8
26 : 882445056 { 0x34990b00 +1.19564819e234 } : BV:32
27 : eq(22, 26) : BOOL
28 : 4288671235 { 0xff9fee03 -6296061 -1.24945104e128 } : BV:32
29 : eq(22, 28) : BOOL
30 : 0 { 0x0 } : BV:8
31 : 882445059 { 0x34990b03 +1.19564855e234 } : BV:32
32 : eq(22, 31) : BOOL
33 : 4288671233 { 0xff9fee01 -6296063 -1.24945080e128 } : BV:32
34 : eq(22, 33) : BOOL
35 : 882445058 { 0x34990b02 +1.19564843e234 } : BV:32
36 : eq(22, 35) : BOOL
37 : 880872205 { 0x34810b0d +1.814974e234 } : BV:32
38 : eq(22, 37) : BOOL
39 : 238 { 0xee -18 } : BV:8
40 : 4288671234 { 0xff9fee02 -6296062 -1.24945092e128 } : BV:32
41 : eq(22, 40) : BOOL
42 : eq(22, 21) : BOOL
43 : 880872207 { 0x34810b0f +1.814998e234 } : BV:32
44 : eq(22, 43) : BOOL
45 : 880872204 { 0x34810b0c +1.814962e234 } : BV:32
46 : eq(22, 45) : BOOL
47 : 159 { 0x9f -97 } : BV:8
48 : ite(46, 30, 47) : BV:8
49 : ite(44, 25, 48) : BV:8
50 : ite(42, 30, 49) : BV:8
51 : ite(41, 30, 50) : BV:8
52 : ite(38, 39, 51) : BV:8
53 : ite(36, 25, 52) : BV:8
54 : ite(34, 30, 53) : BV:8
55 : ite(32, 25, 54) : BV:8
56 : ite(29, 30, 55) : BV:8
57 : ite(27, 25, 56) : BV:8
58 : ite(24, 25, 57) : BV:8
59 : 2 { 0x2 +1.23e129 } : BV:32
60 : bvadd(59, 20, 21) : BV:32
61 : eq(60, 23) : BOOL
62 : eq(60, 26) : BOOL
63 : eq(60, 28) : BOOL
64 : eq(60, 31) : BOOL
65 : eq(60, 33) : BOOL
66 : eq(60, 35) : BOOL
67 : eq(60, 37) : BOOL
68 : eq(60, 40) : BOOL
69 : eq(60, 21) : BOOL
70 : eq(60, 43) : BOOL
71 : eq(60, 45) : BOOL
72 : ite(71, 30, 47) : BV:8
73 : ite(70, 25, 72) : BV:8
74 : ite(69, 30, 73) : BV:8
75 : ite(68, 30, 74) : BV:8
76 : ite(67, 39, 75) : BV:8
77 : ite(66, 25, 76) : BV:8
78 : ite(65, 30, 77) : BV:8
79 : ite(64, 25, 78) : BV:8
80 : ite(63, 30, 79) : BV:8
81 : ite(62, 25, 80) : BV:8
82 : ite(61, 25, 81) : BV:8
83 : 1 { 0x1 +1.11e129 } : BV:32
84 : bvadd(83, 20, 21) : BV:32
85 : eq(84, 23) : BOOL
86 : eq(84, 26) : BOOL
87 : eq(84, 28) : BOOL
88 : eq(84, 31) : BOOL
89 : eq(84, 33) : BOOL
90 : eq(84, 35) : BOOL
91 : eq(84, 37) : BOOL
92 : eq(84, 40) : BOOL
93 : eq(84, 21) : BOOL
94 : eq(84, 43) : BOOL
95 : eq(84, 45) : BOOL
96 : ite(95, 30, 47) : BV:8
97 : ite(94, 25, 96) : BV:8
98 : ite(93, 30, 97) : BV:8
99 : ite(92, 30, 98) : BV:8
100 : ite(91, 39, 99) : BV:8
101 : ite(90, 25, 100) : BV:8
102 : ite(89, 30, 101) : BV:8
103 : ite(88, 25, 102) : BV:8
104 : ite(87, 30, 103) : BV:8
105 : ite(86, 25, 104) : BV:8
106 : ite(85, 25, 105) : BV:8
107 : bvadd(20, 21) : BV:32
108 : eq(107, 23) : BOOL
109 : eq(107, 26) : BOOL
110 : eq(107, 28) : BOOL
111 : eq(107, 31) : BOOL
112 : eq(107, 33) : BOOL
113 : eq(107, 35) : BOOL
114 : eq(107, 37) : BOOL
115 : eq(107, 40) : BOOL
116 : eq(107, 21) : BOOL
117 : eq(107, 43) : BOOL
118 : eq(107, 45) : BOOL
119 : ite(118, 30, 47) : BV:8
120 : ite(117, 25, 119) : BV:8
121 : ite(116, 30, 120) : BV:8
122 : ite(115, 30, 121) : BV:8
123 : ite(114, 39, 122) : BV:8
124 : ite(113, 25, 123) : BV:8
125 : ite(112, 30, 124) : BV:8
126 : ite(111, 25, 125) : BV:8
127 : ite(110, 30, 126) : BV:8
128 : ite(109, 25, 127) : BV:8
129 : ite(108, 25, 128) : BV:8
130 : bvconcat(58, 82, 106, 129) : BV:32
131 : ite(17, 2, 130) : BV:32
132 : lambda(16, 131) : FUNCTION[BV:32 -> BV:32]
133 : map(15, 132) : MAP[BV:32 -> BV:32]
134 : sym_const(133) : MAP[BV:32 -> BV:32]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-ret-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 4288671232 { 0xff9fee00 -6296064 -1.24945068e128 } : BV:32
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 880872203 ] -> 159, [ 880872204; 880872204 ] -> 0, [ 880872205; 880872205 ] -> 238, [ 880872206; 880872206 ] -> 159, [ 880872207; 880872207 ] -> 255, [ 880872208; 882445055 ] -> 159, [ 882445056; 882445059 ] -> 255, [ 882445060; 4288671231 ] -> 159, [ 4288671232; 4288671235 ] -> 0, [ 4288671236; 4294967295 ] -> 159, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 880872203 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 880872204; 880872207 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 880872208; 882445055 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 882445056; 882445059 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 882445060; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 880872204 { 0x34810b0c +1.814962e234 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 882445056 { 0x34990b00 +1.19564819e234 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%6%bbentry.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%6%bbentry.1.1
1 : Lambda273 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 4288671232 { 0xff9fee00 -6296064 -1.24945068e128 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 882445057 { 0x34990b01 +1.19564831e234 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 882445056 { 0x34990b00 +1.19564819e234 } : BV:32
13 : eq(8, 12) : BOOL
14 : 4288671235 { 0xff9fee03 -6296061 -1.24945104e128 } : BV:32
15 : eq(8, 14) : BOOL
16 : 0 { 0x0 } : BV:8
17 : 882445059 { 0x34990b03 +1.19564855e234 } : BV:32
18 : eq(8, 17) : BOOL
19 : 4288671233 { 0xff9fee01 -6296063 -1.24945080e128 } : BV:32
20 : eq(8, 19) : BOOL
21 : 882445058 { 0x34990b02 +1.19564843e234 } : BV:32
22 : eq(8, 21) : BOOL
23 : 880872205 { 0x34810b0d +1.814974e234 } : BV:32
24 : eq(8, 23) : BOOL
25 : 238 { 0xee -18 } : BV:8
26 : 4288671234 { 0xff9fee02 -6296062 -1.24945092e128 } : BV:32
27 : eq(8, 26) : BOOL
28 : eq(8, 7) : BOOL
29 : 880872207 { 0x34810b0f +1.814998e234 } : BV:32
30 : eq(8, 29) : BOOL
31 : 880872204 { 0x34810b0c +1.814962e234 } : BV:32
32 : eq(8, 31) : BOOL
33 : 159 { 0x9f -97 } : BV:8
34 : ite(32, 16, 33) : BV:8
35 : ite(30, 11, 34) : BV:8
36 : ite(28, 16, 35) : BV:8
37 : ite(27, 16, 36) : BV:8
38 : ite(24, 25, 37) : BV:8
39 : ite(22, 11, 38) : BV:8
40 : ite(20, 16, 39) : BV:8
41 : ite(18, 11, 40) : BV:8
42 : ite(15, 16, 41) : BV:8
43 : ite(13, 11, 42) : BV:8
44 : ite(10, 11, 43) : BV:8
45 : 2 { 0x2 +1.23e129 } : BV:32
46 : bvadd(45, 6, 7) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : eq(46, 14) : BOOL
50 : eq(46, 17) : BOOL
51 : eq(46, 19) : BOOL
52 : eq(46, 21) : BOOL
53 : eq(46, 23) : BOOL
54 : eq(46, 26) : BOOL
55 : eq(46, 7) : BOOL
56 : eq(46, 29) : BOOL
57 : eq(46, 31) : BOOL
58 : ite(57, 16, 33) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 16, 59) : BV:8
61 : ite(54, 16, 60) : BV:8
62 : ite(53, 25, 61) : BV:8
63 : ite(52, 11, 62) : BV:8
64 : ite(51, 16, 63) : BV:8
65 : ite(50, 11, 64) : BV:8
66 : ite(49, 16, 65) : BV:8
67 : ite(48, 11, 66) : BV:8
68 : ite(47, 11, 67) : BV:8
69 : 1 { 0x1 +1.11e129 } : BV:32
70 : bvadd(69, 6, 7) : BV:32
71 : eq(70, 9) : BOOL
72 : eq(70, 12) : BOOL
73 : eq(70, 14) : BOOL
74 : eq(70, 17) : BOOL
75 : eq(70, 19) : BOOL
76 : eq(70, 21) : BOOL
77 : eq(70, 23) : BOOL
78 : eq(70, 26) : BOOL
79 : eq(70, 7) : BOOL
80 : eq(70, 29) : BOOL
81 : eq(70, 31) : BOOL
82 : ite(81, 16, 33) : BV:8
83 : ite(80, 11, 82) : BV:8
84 : ite(79, 16, 83) : BV:8
85 : ite(78, 16, 84) : BV:8
86 : ite(77, 25, 85) : BV:8
87 : ite(76, 11, 86) : BV:8
88 : ite(75, 16, 87) : BV:8
89 : ite(74, 11, 88) : BV:8
90 : ite(73, 16, 89) : BV:8
91 : ite(72, 11, 90) : BV:8
92 : ite(71, 11, 91) : BV:8
93 : bvadd(6, 7) : BV:32
94 : eq(93, 9) : BOOL
95 : eq(93, 12) : BOOL
96 : eq(93, 14) : BOOL
97 : eq(93, 17) : BOOL
98 : eq(93, 19) : BOOL
99 : eq(93, 21) : BOOL
100 : eq(93, 23) : BOOL
101 : eq(93, 26) : BOOL
102 : eq(93, 7) : BOOL
103 : eq(93, 29) : BOOL
104 : eq(93, 31) : BOOL
105 : ite(104, 16, 33) : BV:8
106 : ite(103, 11, 105) : BV:8
107 : ite(102, 16, 106) : BV:8
108 : ite(101, 16, 107) : BV:8
109 : ite(100, 25, 108) : BV:8
110 : ite(99, 11, 109) : BV:8
111 : ite(98, 16, 110) : BV:8
112 : ite(97, 11, 111) : BV:8
113 : ite(96, 16, 112) : BV:8
114 : ite(95, 11, 113) : BV:8
115 : ite(94, 11, 114) : BV:8
116 : bvconcat(44, 68, 92, 115) : BV:32
117 : ite(3, 2, 116) : BV:32
118 : ite(3, 2, 117) : BV:32
119 : lambda(1, 118) : FUNCTION[BV:32 -> BV:32]
120 : sym_const(119) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : Lambda274 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 4288671232 { 0xff9fee00 -6296064 -1.24945068e128 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 882445057 { 0x34990b01 +1.19564831e234 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 882445056 { 0x34990b00 +1.19564819e234 } : BV:32
13 : eq(8, 12) : BOOL
14 : 4288671235 { 0xff9fee03 -6296061 -1.24945104e128 } : BV:32
15 : eq(8, 14) : BOOL
16 : 0 { 0x0 } : BV:8
17 : 882445059 { 0x34990b03 +1.19564855e234 } : BV:32
18 : eq(8, 17) : BOOL
19 : 4288671233 { 0xff9fee01 -6296063 -1.24945080e128 } : BV:32
20 : eq(8, 19) : BOOL
21 : 882445058 { 0x34990b02 +1.19564843e234 } : BV:32
22 : eq(8, 21) : BOOL
23 : 880872205 { 0x34810b0d +1.814974e234 } : BV:32
24 : eq(8, 23) : BOOL
25 : 238 { 0xee -18 } : BV:8
26 : 4288671234 { 0xff9fee02 -6296062 -1.24945092e128 } : BV:32
27 : eq(8, 26) : BOOL
28 : eq(8, 7) : BOOL
29 : 880872207 { 0x34810b0f +1.814998e234 } : BV:32
30 : eq(8, 29) : BOOL
31 : 880872204 { 0x34810b0c +1.814962e234 } : BV:32
32 : eq(8, 31) : BOOL
33 : 159 { 0x9f -97 } : BV:8
34 : ite(32, 16, 33) : BV:8
35 : ite(30, 11, 34) : BV:8
36 : ite(28, 16, 35) : BV:8
37 : ite(27, 16, 36) : BV:8
38 : ite(24, 25, 37) : BV:8
39 : ite(22, 11, 38) : BV:8
40 : ite(20, 16, 39) : BV:8
41 : ite(18, 11, 40) : BV:8
42 : ite(15, 16, 41) : BV:8
43 : ite(13, 11, 42) : BV:8
44 : ite(10, 11, 43) : BV:8
45 : 2 { 0x2 +1.23e129 } : BV:32
46 : bvadd(45, 6, 7) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : eq(46, 14) : BOOL
50 : eq(46, 17) : BOOL
51 : eq(46, 19) : BOOL
52 : eq(46, 21) : BOOL
53 : eq(46, 23) : BOOL
54 : eq(46, 26) : BOOL
55 : eq(46, 7) : BOOL
56 : eq(46, 29) : BOOL
57 : eq(46, 31) : BOOL
58 : ite(57, 16, 33) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 16, 59) : BV:8
61 : ite(54, 16, 60) : BV:8
62 : ite(53, 25, 61) : BV:8
63 : ite(52, 11, 62) : BV:8
64 : ite(51, 16, 63) : BV:8
65 : ite(50, 11, 64) : BV:8
66 : ite(49, 16, 65) : BV:8
67 : ite(48, 11, 66) : BV:8
68 : ite(47, 11, 67) : BV:8
69 : 1 { 0x1 +1.11e129 } : BV:32
70 : bvadd(69, 6, 7) : BV:32
71 : eq(70, 9) : BOOL
72 : eq(70, 12) : BOOL
73 : eq(70, 14) : BOOL
74 : eq(70, 17) : BOOL
75 : eq(70, 19) : BOOL
76 : eq(70, 21) : BOOL
77 : eq(70, 23) : BOOL
78 : eq(70, 26) : BOOL
79 : eq(70, 7) : BOOL
80 : eq(70, 29) : BOOL
81 : eq(70, 31) : BOOL
82 : ite(81, 16, 33) : BV:8
83 : ite(80, 11, 82) : BV:8
84 : ite(79, 16, 83) : BV:8
85 : ite(78, 16, 84) : BV:8
86 : ite(77, 25, 85) : BV:8
87 : ite(76, 11, 86) : BV:8
88 : ite(75, 16, 87) : BV:8
89 : ite(74, 11, 88) : BV:8
90 : ite(73, 16, 89) : BV:8
91 : ite(72, 11, 90) : BV:8
92 : ite(71, 11, 91) : BV:8
93 : bvadd(6, 7) : BV:32
94 : eq(93, 9) : BOOL
95 : eq(93, 12) : BOOL
96 : eq(93, 14) : BOOL
97 : eq(93, 17) : BOOL
98 : eq(93, 19) : BOOL
99 : eq(93, 21) : BOOL
100 : eq(93, 23) : BOOL
101 : eq(93, 26) : BOOL
102 : eq(93, 7) : BOOL
103 : eq(93, 29) : BOOL
104 : eq(93, 31) : BOOL
105 : ite(104, 16, 33) : BV:8
106 : ite(103, 11, 105) : BV:8
107 : ite(102, 16, 106) : BV:8
108 : ite(101, 16, 107) : BV:8
109 : ite(100, 25, 108) : BV:8
110 : ite(99, 11, 109) : BV:8
111 : ite(98, 16, 110) : BV:8
112 : ite(97, 11, 111) : BV:8
113 : ite(96, 16, 112) : BV:8
114 : ite(95, 11, 113) : BV:8
115 : ite(94, 11, 114) : BV:8
116 : bvconcat(44, 68, 92, 115) : BV:32
117 : ite(3, 2, 116) : BV:32
118 : lambda(1, 117) : FUNCTION[BV:32 -> BV:32]
119 : sym_const(118) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 2033807165 { 0x79396f3d +1.44870722e115 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 882445056 { 0x34990b00 +1.19564819e234 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 882445059 { 0x34990b03 +1.19564855e234 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 880872204 { 0x34810b0c +1.814962e234 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 880872207 { 0x34810b0f +1.814998e234 } : BV:32
=counter_example.random_seed
1128103636
=counter_example_end
=global nodece 25 num_edges_traversed 2
=global nodece 25 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 26
=global nodece 26 nodece z3.ce673.num_edges_traversed1
=global nodece 26 nodece_path
=global nodece 26 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 26 nodece_cached_counterexample
=counter_example_begin z3.ce673 bfc2a788e931c7a3b1dcd7b8e9fa524e
=input.spec-%var-x-1
1 : Lambda998 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 8191 { 0x1fff +1.97644e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8192 { 0x2000 +1.97656e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda999 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 2, 28) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L3%6%bbentry
1 : Lambda1002 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 8191 { 0x1fff +1.97644e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8192 { 0x2000 +1.97656e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1003 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1356762750 { 0x50de8e7e +1.73872351e34 } : BV:32
=input.spec-%var-ret-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 2847819940 { 0xa9be48a4 -1447147356 -1.48659181e212 } : BV:32
=input.dst.llvm-%n
1 : 8192 { 0x2000 +1.97656e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 955669663 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 955669664; 955669667 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 955669668; 3795237063 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3795237064; 3795237067 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3795237068; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 955669664 { 0x38f65ca0 +1.92470169e242 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3795237064 { 0xe236b8c8 -499730232 -1.42751407e69 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%6%bbentry.0.1
1 : ([ 0; 8191 ] -> true, [ 8192; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 8191 ] -> true, [ 8192; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : Lambda984 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 8191 { 0x1fff +1.97644e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 8192 { 0x2000 +1.97656e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 2, 18) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 726489709 { 0x2b4d5a6d +1.60432207e215 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3795237064 { 0xe236b8c8 -499730232 -1.42751407e69 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3795237067 { 0xe236b8cb -499730229 -1.42751443e69 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 955669664 { 0x38f65ca0 +1.92470169e242 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 955669667 { 0x38f65ca3 +1.92470204e242 } : BV:32
=counter_example.random_seed
1448270318
=counter_example_end
=global nodece 26 num_edges_traversed 1
=global nodece 26 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 27
=global nodece 27 nodece z3.ce995.num_edges_traversed2
=global nodece 27 nodece_path
=global nodece 27 nodece_path.graph_edge_composition
(epsilon)
=global nodece 27 nodece_cached_counterexample
=counter_example_begin z3.ce995 a03b1ca49c2968c46cf19b807498c3fc
=input.spec-%var-x-1
1 : Lambda998 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 8191 { 0x1fff +1.97644e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8192 { 0x2000 +1.97656e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda999 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 2, 28) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L3%6%bbentry
1 : Lambda1002 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 8191 { 0x1fff +1.97644e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8192 { 0x2000 +1.97656e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1003 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1356762751 { 0x50de8e7f +1.73872363e34 } : BV:32
=input.spec-%var-ret-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 2847819940 { 0xa9be48a4 -1447147356 -1.48659181e212 } : BV:32
=input.dst.llvm-%n
1 : 8192 { 0x2000 +1.97656e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 955669663 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 955669664; 955669667 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 955669668; 3795237063 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3795237064; 3795237067 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3795237068; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 955669664 { 0x38f65ca0 +1.92470169e242 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3795237064 { 0xe236b8c8 -499730232 -1.42751407e69 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%6%bbentry.0.1
1 : ([ 0; 8191 ] -> true, [ 8192; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 8191 ] -> true, [ 8192; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : Lambda984 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 8191 { 0x1fff +1.97644e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 8192 { 0x2000 +1.97656e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 2, 18) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 726489710 { 0x2b4d5a6e +1.60432219e215 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3795237064 { 0xe236b8c8 -499730232 -1.42751407e69 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3795237067 { 0xe236b8cb -499730229 -1.42751443e69 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 955669664 { 0x38f65ca0 +1.92470169e242 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 955669667 { 0x38f65ca3 +1.92470204e242 } : BV:32
=counter_example.random_seed
1448270318
=counter_example_end
=global nodece 27 num_edges_traversed 2
=global nodece 27 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 28
=global nodece 28 nodece z3v487.ce1008.num_edges_traversed1
=global nodece 28 nodece_path
=global nodece 28 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 28 nodece_cached_counterexample
=counter_example_begin z3v487.ce1008 5a6cb7bad8c4c63dc4d31ece0dc4e6e
=input.spec-%var-x-1
1 : Lambda1053 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2097153 { 0x200001 +1.25000011e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2097154 { 0x200002 +1.25000023e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1054 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-x-0.L3%6%bbentry
1 : Lambda1056 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2097153 { 0x200001 +1.25000011e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2097154 { 0x200002 +1.25000023e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1057 : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : bvule(2, 17) : BOOL
21 : bvule(17, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(8, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : ite(25, 13, 13) : BOOL
27 : ite(22, 7, 26) : BOOL
28 : and(20, 24) : BOOL
29 : ite(28, 2, 2) : BV:32
30 : ite(27, 2, 29) : BV:32
31 : ite(19, 2, 30) : BV:32
32 : lambda(17, 31) : FUNCTION[BV:32 -> BV:32]
33 : map(16, 32) : MAP[BV:32 -> BV:32]
34 : sym_const(33) : MAP[BV:32 -> BV:32]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 488476362 { 0x1d1d8eca +1.23092007e187 } : BV:32
=input.spec-%tmpvar-0.L3%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%var-ret-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 2147483636 { 0x7ffffff4 +1.99999856e128 } : BV:32
=input.dst.llvm-%n
1 : 2097154 { 0x200002 +1.25000023e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 8; 511 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 512; 515 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 516; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 512 { 0x200 +1.6103e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 12 { 0xc +1.143e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-2.L3%6%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%6%bbentry.0.1
1 : ([ 0; 2097153 ] -> true, [ 2097154; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%6%bbentry.1.1
1 : Lambda1035 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 1) : BOOL
6 : 2097153 { 0x200001 +1.25000011e129 } : BV:32
7 : bvule(1, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 2097154 { 0x200002 +1.25000023e129 } : BV:32
11 : bvule(10, 1) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(1, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : and(5, 13) : BOOL
19 : ite(18, 4, 4) : BV:32
20 : ite(17, 4, 19) : BV:32
21 : ite(3, 4, 20) : BV:32
22 : lambda(1, 21) : FUNCTION[BV:32 -> BV:32]
23 : sym_const(22) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2097153 ] -> true, [ 2097154; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 265863719 { 0xfd8c227 +1.69342505e160 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%add.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 12 { 0xc +1.143e129 } : BV:32
=input.dst.llvm-%inc.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 512 { 0x200 +1.6103e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 515 { 0x203 +1.6139e129 } : BV:32
=counter_example.random_seed
2336420591
=counter_example_end
=global nodece 28 num_edges_traversed 1
=global nodece 28 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 29
=global nodece 29 nodece z3v487.ce1037.num_edges_traversed2
=global nodece 29 nodece_path
=global nodece 29 nodece_path.graph_edge_composition
(epsilon)
=global nodece 29 nodece_cached_counterexample
=counter_example_begin z3v487.ce1037 fd1b15bc63ea4bfd83c6ce2f867572
=input.spec-%var-x-1
1 : Lambda1053 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2097153 { 0x200001 +1.25000011e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2097154 { 0x200002 +1.25000023e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1054 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L3%6%bbentry
1 : Lambda1056 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2097153 { 0x200001 +1.25000011e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2097154 { 0x200002 +1.25000023e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1057 : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : bvule(2, 17) : BOOL
21 : bvule(17, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(8, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : ite(25, 13, 13) : BOOL
27 : ite(22, 7, 26) : BOOL
28 : and(20, 24) : BOOL
29 : ite(28, 2, 2) : BV:32
30 : ite(27, 2, 29) : BV:32
31 : ite(19, 2, 30) : BV:32
32 : lambda(17, 31) : FUNCTION[BV:32 -> BV:32]
33 : map(16, 32) : MAP[BV:32 -> BV:32]
34 : sym_const(33) : MAP[BV:32 -> BV:32]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 488476363 { 0x1d1d8ecb +1.23092019e187 } : BV:32
=input.spec-%var-ret-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 2147483636 { 0x7ffffff4 +1.99999856e128 } : BV:32
=input.dst.llvm-%n
1 : 2097154 { 0x200002 +1.25000023e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 8; 511 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 512; 515 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 516; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 512 { 0x200 +1.6103e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%6%bbentry.0.1
1 : ([ 0; 2097153 ] -> true, [ 2097154; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%6%bbentry.1.1
1 : Lambda1035 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 1) : BOOL
6 : 2097153 { 0x200001 +1.25000011e129 } : BV:32
7 : bvule(1, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 2097154 { 0x200002 +1.25000023e129 } : BV:32
11 : bvule(10, 1) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(1, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : and(5, 13) : BOOL
19 : ite(18, 4, 4) : BV:32
20 : ite(17, 4, 19) : BV:32
21 : ite(3, 4, 20) : BV:32
22 : lambda(1, 21) : FUNCTION[BV:32 -> BV:32]
23 : sym_const(22) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2097153 ] -> true, [ 2097154; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 265863720 { 0xfd8c228 +1.69342517e160 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 512 { 0x200 +1.6103e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 515 { 0x203 +1.6139e129 } : BV:32
=counter_example.random_seed
2336420591
=counter_example_end
=global nodece 29 num_edges_traversed 2
=global nodece 29 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 30
=global nodece 30 nodece z3v487.ce1059.num_edges_traversed1
=global nodece 30 nodece_path
=global nodece 30 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 30 nodece_cached_counterexample
=counter_example_begin z3v487.ce1059 c1bafee6453dcb574a6067d2cf9a5d3d
=input.spec-%var-x-1
1 : Lambda1095 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 5 { 0x5 +1.59e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1096 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 3229745152 { 0xc0820000 -1065222144 -1.1562500e2 } : BV:32
=input.spec-%var-x-0.L3%6%bbentry
1 : Lambda1098 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 5 { 0x5 +1.59e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1099 : BV:32
18 : eq(17, 4) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 2, 28) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 836805991 { 0x31e0a567 +1.75504767e228 } : BV:32
=input.spec-%tmpvar-0.L3%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%var-ret-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 3229745136 { 0xc081fff0 -1065222160 -1.1562309e2 } : BV:32
=input.dst.llvm-%n
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1140851199 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1140851200; 1140851203 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1140851204; 1143078915 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1143078916; 1143078919 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1143078920; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1143078916 { 0x44220004 +1.26562547e9 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1140851200 { 0x44000200 +1.6103e9 } : BV:32
=input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%tmpvar-2.L3%6%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%6%bbentry.0.1
1 : ([ 0; 4 ] -> true, [ 5; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%6%bbentry.1.1
1 : Lambda1077 : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 1) : BOOL
6 : bvule(1, 2) : BOOL
7 : and(5, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 5 { 0x5 +1.59e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(5, 12) : BOOL
18 : ite(17, 4, 4) : BV:32
19 : ite(16, 4, 18) : BV:32
20 : ite(3, 4, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4 ] -> true, [ 5; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1097670716 { 0x416d203c +1.85254621e3 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%add.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry
1 : 3229745152 { 0xc0820000 -1065222144 -1.1562500e2 } : BV:32
=input.dst.llvm-%f9857086f688cad98a3e07acb716d2f.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%inc.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1140851200 { 0x44000200 +1.6103e9 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1140851203 { 0x44000203 +1.6139e9 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1143078916 { 0x44220004 +1.26562547e9 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1143078919 { 0x44220007 +1.26562583e9 } : BV:32
=counter_example.random_seed
2635840152
=counter_example_end
=global nodece 30 num_edges_traversed 1
=global nodece 30 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 31
=global nodece 31 nodece z3.ce1101.num_edges_traversed0
=global nodece 31 nodece_path
=global nodece 31 nodece_path.graph_edge_composition
(epsilon)
=global nodece 31 nodece_cached_counterexample
=counter_example_begin z3.ce1101 45718d7f2e25a79501063b3434e269f
=input.spec-%var-x-1
1 : Lambda1216 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2031363911 { 0x79142747 +1.15744864e115 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2031363912 { 0x79142748 +1.15744876e115 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1217 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 2, 28) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L3%6%bbentry
1 : Lambda1220 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2031363911 { 0x79142747 +1.15744864e115 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2031363912 { 0x79142748 +1.15744876e115 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1221 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 2031363912 { 0x79142748 +1.15744876e115 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2284344447 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2284344448; 2284344451 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2284344452; 3591868575 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3591868576; 3591868579 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3591868580; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2284344448 { 0x88285480 -2010622848 -1.31507873e145 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3591868576 { 0xd61790a0 -703098720 -1.18410110e45 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 2031363912 { 0x79142748 +1.15744876e115 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-0.L3%6%bbentry.0.1
1 : ([ 0; 2031363911 ] -> true, [ 2031363912; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2031363911 ] -> true, [ 2031363912; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : Lambda1202 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 2031363911 { 0x79142747 +1.15744864e115 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 2031363912 { 0x79142748 +1.15744876e115 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 2, 18) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2031363912 { 0x79142748 +1.15744876e115 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3591868576 { 0xd61790a0 -703098720 -1.18410110e45 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3591868579 { 0xd61790a3 -703098717 -1.18410146e45 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2284344448 { 0x88285480 -2010622848 -1.31507873e145 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2284344451 { 0x88285483 -2010622845 -1.31507909e145 } : BV:32
=counter_example.random_seed
2898058812
=counter_example_end
=global nodece 31 num_edges_traversed 0
=global nodece 31 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 32
=global nodece 32 nodece z3v487.ce1102.num_edges_traversed0
=global nodece 32 nodece_path
=global nodece 32 nodece_path.graph_edge_composition
(epsilon)
=global nodece 32 nodece_cached_counterexample
=counter_example_begin z3v487.ce1102 87824f441b18ce4f978da3ecba519d14
=input.spec-%var-x-1
1 : Lambda1228 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1917825183 { 0x724fb09f +1.62257754e101 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1917825184 { 0x724fb0a0 +1.62257766e101 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1229 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L3%6%bbentry
1 : Lambda1231 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1917825183 { 0x724fb09f +1.62257754e101 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1917825184 { 0x724fb0a0 +1.62257766e101 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1232 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 2, 28) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 1917825184 { 0x724fb0a0 +1.62257766e101 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 16383 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 16384; 16387 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 16388; 2097123 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2097124; 2097127 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2097128; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 16384 { 0x4000 +1.195312e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2097124 { 0x1fffe4 +1.24999666e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1917825184 { 0x724fb0a0 +1.62257766e101 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-0.L3%6%bbentry.0.1
1 : ([ 0; 1917825183 ] -> true, [ 1917825184; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%6%bbentry.1.1
1 : Lambda1207 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 1917825183 { 0x724fb09f +1.62257754e101 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 1917825184 { 0x724fb0a0 +1.62257766e101 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 2, 18) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 1917825183 ] -> true, [ 1917825184; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1917825184 { 0x724fb0a0 +1.62257766e101 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2097124 { 0x1fffe4 +1.24999666e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2097127 { 0x1fffe7 +1.24999701e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 16384 { 0x4000 +1.195312e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 16387 { 0x4003 +1.195348e129 } : BV:32
=counter_example.random_seed
2562169566
=counter_example_end
=global nodece 32 num_edges_traversed 0
=global nodece 32 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 33
=global nodece 33 nodece z3.ce1368.num_edges_traversed2
=global nodece 33 nodece_path
=global nodece 33 nodece_path.graph_edge_composition
(epsilon)
=global nodece 33 nodece_cached_counterexample
=counter_example_begin z3.ce1368 e2986bb8719aa888f4752ece34c5c7e
=retaddr_const
1 : 571456685 { 0x220fbcad +1.12294542e197 } : BV:32
=input.spec-%var-x-1
1 : Lambda20 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda21 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L3%6%bbentry
1 : Lambda20 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda21 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-5.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-6.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-0.L3%7%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : sum(1, 2, 1) : SUM[UNIT,BV:32]
4 : sym_const(3) : SUM[UNIT,BV:32]
=input.spec-%var-ret-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1102672323 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1102672324; 1102672327 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1102672328; 2277714411 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2277714412; 2277714415 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2277714416; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2277714412 { 0x87c329ec -2017252884 -1.52471685e144 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1102672324 { 0x41b971c4 +1.44878435e4 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-0.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-indir_tgt.E0%0%d
1 : 571456685 { 0x220fbcad +1.12294542e197 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 1015735436 { 0x3c8ae48c +1.8509969e250 } : BV:32
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 924236686 { 0x3716bb8e +1.17759871e239 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1102672324 { 0x41b971c4 +1.44878435e4 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1102672327 { 0x41b971c7 +1.44878470e4 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2277714412 { 0x87c329ec -2017252884 -1.52471685e144 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2277714415 { 0x87c329ef -2017252881 -1.52471721e144 } : BV:32
=counter_example.random_seed
190170042
=counter_example_end
=global nodece 33 num_edges_traversed 2
=global nodece 33 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 34
=global nodece 34 nodece z3v487.ce1170.num_edges_traversed2
=global nodece 34 nodece_path
=global nodece 34 nodece_path.graph_edge_composition
(epsilon)
=global nodece 34 nodece_cached_counterexample
=counter_example_begin z3v487.ce1170 bd64622f91a4cefa6d62f550b8ed91ae
=retaddr_const
1 : 327855326 { 0x138aacde +1.8340048e168 } : BV:32
=input.spec-%var-x-1
1 : Lambda1095 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 5 { 0x5 +1.59e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1096 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L3%6%bbentry
1 : Lambda1098 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 5 { 0x5 +1.59e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1099 : BV:32
18 : eq(17, 4) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 2, 28) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 836805991 { 0x31e0a567 +1.75504767e228 } : BV:32
=input.spec-%tmpvar-5.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-6.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-0.L3%7%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : sum(1, 2, 1) : SUM[UNIT,BV:32]
4 : sym_const(3) : SUM[UNIT,BV:32]
=input.spec-%var-ret-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 3229745136 { 0xc081fff0 -1065222160 -1.1562309e2 } : BV:32
=input.dst.llvm-%n
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1140851199 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1140851200; 1140851203 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1140851204; 1143078915 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1143078916; 1143078919 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1143078920; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1143078916 { 0x44220004 +1.26562547e9 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1140851200 { 0x44000200 +1.6103e9 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%tmpvar-9.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-0.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%6%bbentry.0.1
1 : ([ 0; 4 ] -> true, [ 5; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%6%bbentry.1.1
1 : Lambda1077 : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 1) : BOOL
6 : bvule(1, 2) : BOOL
7 : and(5, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 5 { 0x5 +1.59e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(5, 12) : BOOL
18 : ite(17, 4, 4) : BV:32
19 : ite(16, 4, 18) : BV:32
20 : ite(3, 4, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4 ] -> true, [ 5; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1097670716 { 0x416d203c +1.85254621e3 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-indir_tgt.E0%0%d
1 : 327855326 { 0x138aacde +1.8340048e168 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 95721539 { 0x5b49843 +1.41089665e140 } : BV:32
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1140851200 { 0x44000200 +1.6103e9 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1140851203 { 0x44000203 +1.6139e9 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1143078916 { 0x44220004 +1.26562547e9 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1143078919 { 0x44220007 +1.26562583e9 } : BV:32
=counter_example.random_seed
3000312176
=counter_example_end
=global nodece 34 num_edges_traversed 2
=global nodece 34 nodece_visted_pcs: 
E0%0%d_E0%0%d
=graph_with_ce done
=point_set for reason inductive-invariants
=inductive-invariants point_set global exprs map
=inductive-invariants point_set point_expr 1
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : bvuge(1, 10) : BOOL
18 : bvule(1, 11) : BOOL
19 : and(17, 18) : BOOL
20 : bvuge(2, 10) : BOOL
21 : bvule(2, 11) : BOOL
22 : and(20, 21) : BOOL
23 : not(22) : BOOL
24 : andnot1(19, 23) : BOOL
25 : bvuge(10, 1) : BOOL
26 : bvule(10, 2) : BOOL
27 : and(25, 26) : BOOL
28 : bvuge(11, 1) : BOOL
29 : bvule(11, 2) : BOOL
30 : and(28, 29) : BOOL
31 : not(30) : BOOL
32 : andnot1(27, 31) : BOOL
33 : and(24, 32) : BOOL
34 : and(16, 33) : BOOL
35 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
36 : 3 { 0x3 +1.35e129 } : BV:32
37 : bvand(35, 36) : BV:32
38 : 0 { 0x0 +1.0e129 } : BV:32
39 : eq(37, 38) : BOOL
40 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
41 : bvand(40, 36) : BV:32
42 : eq(41, 38) : BOOL
43 : and(39, 42) : BOOL
44 : and(34, 43) : BOOL
45 : eq(35, 1) : BOOL
46 : eq(40, 10) : BOOL
47 : and(45, 46) : BOOL
48 : and(44, 47) : BOOL
49 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
50 : 1 { 0x1 +1.11e129 } : BV:32
51 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
52 : region_agrees_with_memlabel(49, 38, 50, 51) : BOOL
53 : and(48, 52) : BOOL
=inductive-invariants point_set point_expr 2
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
=inductive-invariants point_set point_expr 3
1 : input.spec-%var-ret-0.L3%6%bbentry : BV:32
=inductive-invariants point_set point_expr 4
1 : input.dst.llvm-%x : BV:32
=inductive-invariants point_set point_expr 5
1 : input.dst.llvm-%n : BV:32
=inductive-invariants point_set point_expr 6
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=inductive-invariants point_set point_expr 7
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=inductive-invariants point_set point_expr 8
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 9
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 10
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 11
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 12
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 13
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 14
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 15
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 16
1 : input.spec-%var-x-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%x : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 17
1 : input.spec-%var-x-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%x : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 18
1 : input.spec-%var-x-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%x : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : bvadd(14, 5) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(10, 11, 12, 15, 16, 17) : BV:32
19 : lambda(9, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(8, 19) : MAP[BV:32 -> BV:32]
21 : eq(1, 20) : BOOL
=inductive-invariants point_set point_expr 19
1 : input.spec-%var-x-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%x : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 20
1 : input.spec-%var-x-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%x : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 21
1 : spec-%var-x-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%x : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set global exprs map done
=inductive-invariants point_set points
=inductive-invariants point_set point z3v487.ce4
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 3 for input.spec-%var-ret-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 done
=inductive-invariants point_set point z3.ce3
=inductive-invariants point_set point z3.ce3 expr point z3.ce3
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 3 for input.spec-%var-ret-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 done
=inductive-invariants point_set point z3.ce23
=inductive-invariants point_set point z3.ce23 expr point z3.ce23
=inductive-invariants point_set point z3.ce23 expr point z3.ce23 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce23 expr point z3.ce23 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce23 expr point z3.ce23 val 3 for input.spec-%var-ret-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce23 expr point z3.ce23 val 4 for input.dst.llvm-%x
4286299904
=inductive-invariants point_set point z3.ce23 expr point z3.ce23 val 5 for input.dst.llvm-%n
65536
=inductive-invariants point_set point z3.ce23 expr point z3.ce23 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce23 expr point z3.ce23 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce23 expr point z3.ce23 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce23 expr point z3.ce23 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce23 expr point z3.ce23 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce23 expr point z3.ce23 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce23 expr point z3.ce23 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce23 expr point z3.ce23 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce23 expr point z3.ce23 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce23 expr point z3.ce23 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce23 expr point z3.ce23 done
=inductive-invariants point_set point z3v487.ce24
=inductive-invariants point_set point z3v487.ce24 expr point z3v487.ce24
=inductive-invariants point_set point z3v487.ce24 expr point z3v487.ce24 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce24 expr point z3v487.ce24 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce24 expr point z3v487.ce24 val 3 for input.spec-%var-ret-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce24 expr point z3v487.ce24 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce24 expr point z3v487.ce24 val 5 for input.dst.llvm-%n
65536
=inductive-invariants point_set point z3v487.ce24 expr point z3v487.ce24 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce24 expr point z3v487.ce24 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce24 expr point z3v487.ce24 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce24 expr point z3v487.ce24 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce24 expr point z3v487.ce24 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce24 expr point z3v487.ce24 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce24 expr point z3v487.ce24 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce24 expr point z3v487.ce24 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce24 expr point z3v487.ce24 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce24 expr point z3v487.ce24 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce24 expr point z3v487.ce24 done
=inductive-invariants point_set point z3.ce243
=inductive-invariants point_set point z3.ce243 expr point z3.ce243
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 3 for input.spec-%var-ret-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 done
=inductive-invariants point_set point z3v487.ce244
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 3 for input.spec-%var-ret-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 done
=inductive-invariants point_set point z3.ce43
=inductive-invariants point_set point z3.ce43 expr point z3.ce43
=inductive-invariants point_set point z3.ce43 expr point z3.ce43 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce43 expr point z3.ce43 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce43 expr point z3.ce43 val 3 for input.spec-%var-ret-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce43 expr point z3.ce43 val 4 for input.dst.llvm-%x
3086833152
=inductive-invariants point_set point z3.ce43 expr point z3.ce43 val 5 for input.dst.llvm-%n
3082270496
=inductive-invariants point_set point z3.ce43 expr point z3.ce43 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce43 expr point z3.ce43 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce43 expr point z3.ce43 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce43 expr point z3.ce43 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce43 expr point z3.ce43 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce43 expr point z3.ce43 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce43 expr point z3.ce43 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce43 expr point z3.ce43 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce43 expr point z3.ce43 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce43 expr point z3.ce43 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce43 expr point z3.ce43 done
=inductive-invariants point_set point z3v487.ce44
=inductive-invariants point_set point z3v487.ce44 expr point z3v487.ce44
=inductive-invariants point_set point z3v487.ce44 expr point z3v487.ce44 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce44 expr point z3v487.ce44 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce44 expr point z3v487.ce44 val 3 for input.spec-%var-ret-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce44 expr point z3v487.ce44 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce44 expr point z3v487.ce44 val 5 for input.dst.llvm-%n
256
=inductive-invariants point_set point z3v487.ce44 expr point z3v487.ce44 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce44 expr point z3v487.ce44 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce44 expr point z3v487.ce44 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce44 expr point z3v487.ce44 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce44 expr point z3v487.ce44 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce44 expr point z3v487.ce44 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce44 expr point z3v487.ce44 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce44 expr point z3v487.ce44 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce44 expr point z3v487.ce44 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce44 expr point z3v487.ce44 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce44 expr point z3v487.ce44 done
=inductive-invariants point_set point z3.ce63
=inductive-invariants point_set point z3.ce63 expr point z3.ce63
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 3 for input.spec-%var-ret-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 4 for input.dst.llvm-%x
3724270080
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 5 for input.dst.llvm-%n
134219784
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 done
=inductive-invariants point_set point z3v487.ce64
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 3 for input.spec-%var-ret-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 5 for input.dst.llvm-%n
8
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 done
=inductive-invariants point_set point z3.ce143
=inductive-invariants point_set point z3.ce143 expr point z3.ce143
=inductive-invariants point_set point z3.ce143 expr point z3.ce143 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce143 expr point z3.ce143 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce143 expr point z3.ce143 val 3 for input.spec-%var-ret-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce143 expr point z3.ce143 val 4 for input.dst.llvm-%x
4288671232
=inductive-invariants point_set point z3.ce143 expr point z3.ce143 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3.ce143 expr point z3.ce143 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce143 expr point z3.ce143 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce143 expr point z3.ce143 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce143 expr point z3.ce143 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce143 expr point z3.ce143 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce143 expr point z3.ce143 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce143 expr point z3.ce143 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce143 expr point z3.ce143 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce143 expr point z3.ce143 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce143 expr point z3.ce143 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce143 expr point z3.ce143 done
=inductive-invariants point_set point z3v487.ce144
=inductive-invariants point_set point z3v487.ce144 expr point z3v487.ce144
=inductive-invariants point_set point z3v487.ce144 expr point z3v487.ce144 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce144 expr point z3v487.ce144 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce144 expr point z3v487.ce144 val 3 for input.spec-%var-ret-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce144 expr point z3v487.ce144 val 4 for input.dst.llvm-%x
4294967040
=inductive-invariants point_set point z3v487.ce144 expr point z3v487.ce144 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3v487.ce144 expr point z3v487.ce144 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce144 expr point z3v487.ce144 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce144 expr point z3v487.ce144 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce144 expr point z3v487.ce144 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce144 expr point z3v487.ce144 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce144 expr point z3v487.ce144 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce144 expr point z3v487.ce144 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce144 expr point z3v487.ce144 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce144 expr point z3v487.ce144 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce144 expr point z3v487.ce144 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce144 expr point z3v487.ce144 done
=inductive-invariants point_set point z3.ce83
=inductive-invariants point_set point z3.ce83 expr point z3.ce83
=inductive-invariants point_set point z3.ce83 expr point z3.ce83 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce83 expr point z3.ce83 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce83 expr point z3.ce83 val 3 for input.spec-%var-ret-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce83 expr point z3.ce83 val 4 for input.dst.llvm-%x
3724270080
=inductive-invariants point_set point z3.ce83 expr point z3.ce83 val 5 for input.dst.llvm-%n
67109892
=inductive-invariants point_set point z3.ce83 expr point z3.ce83 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce83 expr point z3.ce83 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce83 expr point z3.ce83 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce83 expr point z3.ce83 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce83 expr point z3.ce83 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce83 expr point z3.ce83 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce83 expr point z3.ce83 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce83 expr point z3.ce83 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce83 expr point z3.ce83 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce83 expr point z3.ce83 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce83 expr point z3.ce83 done
=inductive-invariants point_set point z3v487.ce84
=inductive-invariants point_set point z3v487.ce84 expr point z3v487.ce84
=inductive-invariants point_set point z3v487.ce84 expr point z3v487.ce84 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce84 expr point z3v487.ce84 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce84 expr point z3v487.ce84 val 3 for input.spec-%var-ret-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce84 expr point z3v487.ce84 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce84 expr point z3v487.ce84 val 5 for input.dst.llvm-%n
2
=inductive-invariants point_set point z3v487.ce84 expr point z3v487.ce84 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce84 expr point z3v487.ce84 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce84 expr point z3v487.ce84 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce84 expr point z3v487.ce84 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce84 expr point z3v487.ce84 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce84 expr point z3v487.ce84 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce84 expr point z3v487.ce84 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce84 expr point z3v487.ce84 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce84 expr point z3v487.ce84 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce84 expr point z3v487.ce84 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce84 expr point z3v487.ce84 done
=inductive-invariants point_set point z3.ce103
=inductive-invariants point_set point z3.ce103 expr point z3.ce103
=inductive-invariants point_set point z3.ce103 expr point z3.ce103 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce103 expr point z3.ce103 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce103 expr point z3.ce103 val 3 for input.spec-%var-ret-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce103 expr point z3.ce103 val 4 for input.dst.llvm-%x
1761587968
=inductive-invariants point_set point z3.ce103 expr point z3.ce103 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3.ce103 expr point z3.ce103 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce103 expr point z3.ce103 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce103 expr point z3.ce103 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce103 expr point z3.ce103 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce103 expr point z3.ce103 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce103 expr point z3.ce103 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce103 expr point z3.ce103 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce103 expr point z3.ce103 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce103 expr point z3.ce103 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce103 expr point z3.ce103 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce103 expr point z3.ce103 done
=inductive-invariants point_set point z3v487.ce104
=inductive-invariants point_set point z3v487.ce104 expr point z3v487.ce104
=inductive-invariants point_set point z3v487.ce104 expr point z3v487.ce104 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce104 expr point z3v487.ce104 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce104 expr point z3v487.ce104 val 3 for input.spec-%var-ret-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce104 expr point z3v487.ce104 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce104 expr point z3v487.ce104 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3v487.ce104 expr point z3v487.ce104 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce104 expr point z3v487.ce104 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce104 expr point z3v487.ce104 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce104 expr point z3v487.ce104 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce104 expr point z3v487.ce104 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce104 expr point z3v487.ce104 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce104 expr point z3v487.ce104 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce104 expr point z3v487.ce104 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce104 expr point z3v487.ce104 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce104 expr point z3v487.ce104 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce104 expr point z3v487.ce104 done
=inductive-invariants point_set point z3.ce123
=inductive-invariants point_set point z3.ce123 expr point z3.ce123
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 3 for input.spec-%var-ret-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 4 for input.dst.llvm-%x
3857542916
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 5 for input.dst.llvm-%n
94063
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 done
=inductive-invariants point_set point z3v487.ce124
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 3 for input.spec-%var-ret-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 4 for input.dst.llvm-%x
2155905152
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 5 for input.dst.llvm-%n
2155905152
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 done
=inductive-invariants point_set point z3.ce163
=inductive-invariants point_set point z3.ce163 expr point z3.ce163
=inductive-invariants point_set point z3.ce163 expr point z3.ce163 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce163 expr point z3.ce163 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce163 expr point z3.ce163 val 3 for input.spec-%var-ret-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce163 expr point z3.ce163 val 4 for input.dst.llvm-%x
5242880
=inductive-invariants point_set point z3.ce163 expr point z3.ce163 val 5 for input.dst.llvm-%n
415285250
=inductive-invariants point_set point z3.ce163 expr point z3.ce163 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce163 expr point z3.ce163 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce163 expr point z3.ce163 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce163 expr point z3.ce163 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce163 expr point z3.ce163 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce163 expr point z3.ce163 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce163 expr point z3.ce163 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce163 expr point z3.ce163 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce163 expr point z3.ce163 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce163 expr point z3.ce163 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce163 expr point z3.ce163 done
=inductive-invariants point_set point z3v487.ce204
=inductive-invariants point_set point z3v487.ce204 expr point z3v487.ce204
=inductive-invariants point_set point z3v487.ce204 expr point z3v487.ce204 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce204 expr point z3v487.ce204 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce204 expr point z3v487.ce204 val 3 for input.spec-%var-ret-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce204 expr point z3v487.ce204 val 4 for input.dst.llvm-%x
252
=inductive-invariants point_set point z3v487.ce204 expr point z3v487.ce204 val 5 for input.dst.llvm-%n
64837577
=inductive-invariants point_set point z3v487.ce204 expr point z3v487.ce204 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce204 expr point z3v487.ce204 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce204 expr point z3v487.ce204 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce204 expr point z3v487.ce204 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce204 expr point z3v487.ce204 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce204 expr point z3v487.ce204 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce204 expr point z3v487.ce204 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce204 expr point z3v487.ce204 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce204 expr point z3v487.ce204 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce204 expr point z3v487.ce204 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce204 expr point z3v487.ce204 done
=inductive-invariants point_set point z3.ce223
=inductive-invariants point_set point z3.ce223 expr point z3.ce223
=inductive-invariants point_set point z3.ce223 expr point z3.ce223 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce223 expr point z3.ce223 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce223 expr point z3.ce223 val 3 for input.spec-%var-ret-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce223 expr point z3.ce223 val 4 for input.dst.llvm-%x
2134417916
=inductive-invariants point_set point z3.ce223 expr point z3.ce223 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce223 expr point z3.ce223 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce223 expr point z3.ce223 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce223 expr point z3.ce223 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce223 expr point z3.ce223 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce223 expr point z3.ce223 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce223 expr point z3.ce223 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce223 expr point z3.ce223 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce223 expr point z3.ce223 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce223 expr point z3.ce223 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce223 expr point z3.ce223 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce223 expr point z3.ce223 done
=inductive-invariants point_set point z3v487.ce224
=inductive-invariants point_set point z3v487.ce224 expr point z3v487.ce224
=inductive-invariants point_set point z3v487.ce224 expr point z3v487.ce224 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce224 expr point z3v487.ce224 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce224 expr point z3v487.ce224 val 3 for input.spec-%var-ret-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce224 expr point z3v487.ce224 val 4 for input.dst.llvm-%x
16777536
=inductive-invariants point_set point z3v487.ce224 expr point z3v487.ce224 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce224 expr point z3v487.ce224 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce224 expr point z3v487.ce224 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce224 expr point z3v487.ce224 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce224 expr point z3v487.ce224 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce224 expr point z3v487.ce224 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce224 expr point z3v487.ce224 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce224 expr point z3v487.ce224 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce224 expr point z3v487.ce224 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce224 expr point z3v487.ce224 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce224 expr point z3v487.ce224 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce224 expr point z3v487.ce224 done
=inductive-invariants point_set point z3v487.ce164
=inductive-invariants point_set point z3v487.ce164 expr point z3v487.ce164
=inductive-invariants point_set point z3v487.ce164 expr point z3v487.ce164 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce164 expr point z3v487.ce164 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce164 expr point z3v487.ce164 val 3 for input.spec-%var-ret-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce164 expr point z3v487.ce164 val 4 for input.dst.llvm-%x
1585487644
=inductive-invariants point_set point z3v487.ce164 expr point z3v487.ce164 val 5 for input.dst.llvm-%n
679481402
=inductive-invariants point_set point z3v487.ce164 expr point z3v487.ce164 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce164 expr point z3v487.ce164 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce164 expr point z3v487.ce164 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce164 expr point z3v487.ce164 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce164 expr point z3v487.ce164 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce164 expr point z3v487.ce164 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce164 expr point z3v487.ce164 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce164 expr point z3v487.ce164 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce164 expr point z3v487.ce164 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce164 expr point z3v487.ce164 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce164 expr point z3v487.ce164 done
=inductive-invariants point_set point z3.ce183
=inductive-invariants point_set point z3.ce183 expr point z3.ce183
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 3 for input.spec-%var-ret-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 4 for input.dst.llvm-%x
747123008
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 5 for input.dst.llvm-%n
270860321
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 done
=inductive-invariants point_set point z3v487.ce184
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 3 for input.spec-%var-ret-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 4 for input.dst.llvm-%x
252
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 5 for input.dst.llvm-%n
64837577
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 done
=inductive-invariants point_set point z3.ce203
=inductive-invariants point_set point z3.ce203 expr point z3.ce203
=inductive-invariants point_set point z3.ce203 expr point z3.ce203 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce203 expr point z3.ce203 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce203 expr point z3.ce203 val 3 for input.spec-%var-ret-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce203 expr point z3.ce203 val 4 for input.dst.llvm-%x
747123008
=inductive-invariants point_set point z3.ce203 expr point z3.ce203 val 5 for input.dst.llvm-%n
270860321
=inductive-invariants point_set point z3.ce203 expr point z3.ce203 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce203 expr point z3.ce203 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce203 expr point z3.ce203 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce203 expr point z3.ce203 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce203 expr point z3.ce203 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce203 expr point z3.ce203 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce203 expr point z3.ce203 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce203 expr point z3.ce203 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce203 expr point z3.ce203 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce203 expr point z3.ce203 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce203 expr point z3.ce203 done
=inductive-invariants point_set point z3v487.ce663
=inductive-invariants point_set point z3v487.ce663 expr point z3v487.ce663
=inductive-invariants point_set point z3v487.ce663 expr point z3v487.ce663 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce663 expr point z3v487.ce663 val 2 for input.spec-%var-i-0.L3%6%bbentry
1
=inductive-invariants point_set point z3v487.ce663 expr point z3v487.ce663 val 3 for input.spec-%var-ret-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce663 expr point z3v487.ce663 val 4 for input.dst.llvm-%x
16777216
=inductive-invariants point_set point z3v487.ce663 expr point z3v487.ce663 val 5 for input.dst.llvm-%n
8388608
=inductive-invariants point_set point z3v487.ce663 expr point z3v487.ce663 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce663 expr point z3v487.ce663 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce663 expr point z3v487.ce663 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce663 expr point z3v487.ce663 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce663 expr point z3v487.ce663 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce663 expr point z3v487.ce663 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce663 expr point z3v487.ce663 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce663 expr point z3v487.ce663 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce663 expr point z3v487.ce663 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce663 expr point z3v487.ce663 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce663 expr point z3v487.ce663 done
=inductive-invariants point_set point z3.ce673
=inductive-invariants point_set point z3.ce673 expr point z3.ce673
=inductive-invariants point_set point z3.ce673 expr point z3.ce673 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce673 expr point z3.ce673 val 2 for input.spec-%var-i-0.L3%6%bbentry
1
=inductive-invariants point_set point z3.ce673 expr point z3.ce673 val 3 for input.spec-%var-ret-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce673 expr point z3.ce673 val 4 for input.dst.llvm-%x
2847819940
=inductive-invariants point_set point z3.ce673 expr point z3.ce673 val 5 for input.dst.llvm-%n
8192
=inductive-invariants point_set point z3.ce673 expr point z3.ce673 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce673 expr point z3.ce673 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce673 expr point z3.ce673 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce673 expr point z3.ce673 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce673 expr point z3.ce673 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce673 expr point z3.ce673 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce673 expr point z3.ce673 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce673 expr point z3.ce673 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce673 expr point z3.ce673 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce673 expr point z3.ce673 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce673 expr point z3.ce673 done
=inductive-invariants point_set point z3.ce780
=inductive-invariants point_set point z3.ce780 expr point z3.ce780
=inductive-invariants point_set point z3.ce780 expr point z3.ce780 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce780 expr point z3.ce780 val 2 for input.spec-%var-i-0.L3%6%bbentry
2
=inductive-invariants point_set point z3.ce780 expr point z3.ce780 val 3 for input.spec-%var-ret-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce780 expr point z3.ce780 val 4 for input.dst.llvm-%x
4286299904
=inductive-invariants point_set point z3.ce780 expr point z3.ce780 val 5 for input.dst.llvm-%n
65536
=inductive-invariants point_set point z3.ce780 expr point z3.ce780 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce780 expr point z3.ce780 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3.ce780 expr point z3.ce780 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce780 expr point z3.ce780 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce780 expr point z3.ce780 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce780 expr point z3.ce780 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce780 expr point z3.ce780 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce780 expr point z3.ce780 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce780 expr point z3.ce780 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce780 expr point z3.ce780 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce780 expr point z3.ce780 done
=inductive-invariants point_set point z3v487.ce815
=inductive-invariants point_set point z3v487.ce815 expr point z3v487.ce815
=inductive-invariants point_set point z3v487.ce815 expr point z3v487.ce815 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce815 expr point z3v487.ce815 val 2 for input.spec-%var-i-0.L3%6%bbentry
2
=inductive-invariants point_set point z3v487.ce815 expr point z3v487.ce815 val 3 for input.spec-%var-ret-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce815 expr point z3v487.ce815 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce815 expr point z3v487.ce815 val 5 for input.dst.llvm-%n
65536
=inductive-invariants point_set point z3v487.ce815 expr point z3v487.ce815 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce815 expr point z3v487.ce815 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3v487.ce815 expr point z3v487.ce815 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce815 expr point z3v487.ce815 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce815 expr point z3v487.ce815 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce815 expr point z3v487.ce815 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce815 expr point z3v487.ce815 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce815 expr point z3v487.ce815 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce815 expr point z3v487.ce815 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce815 expr point z3v487.ce815 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce815 expr point z3v487.ce815 done
=inductive-invariants point_set point z3.ce837
=inductive-invariants point_set point z3.ce837 expr point z3.ce837
=inductive-invariants point_set point z3.ce837 expr point z3.ce837 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce837 expr point z3.ce837 val 2 for input.spec-%var-i-0.L3%6%bbentry
2
=inductive-invariants point_set point z3.ce837 expr point z3.ce837 val 3 for input.spec-%var-ret-0.L3%6%bbentry
3082270647
=inductive-invariants point_set point z3.ce837 expr point z3.ce837 val 4 for input.dst.llvm-%x
3086833152
=inductive-invariants point_set point z3.ce837 expr point z3.ce837 val 5 for input.dst.llvm-%n
3082270496
=inductive-invariants point_set point z3.ce837 expr point z3.ce837 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
3082270647
=inductive-invariants point_set point z3.ce837 expr point z3.ce837 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3.ce837 expr point z3.ce837 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce837 expr point z3.ce837 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce837 expr point z3.ce837 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce837 expr point z3.ce837 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce837 expr point z3.ce837 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce837 expr point z3.ce837 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce837 expr point z3.ce837 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce837 expr point z3.ce837 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce837 expr point z3.ce837 done
=inductive-invariants point_set point z3.ce872
=inductive-invariants point_set point z3.ce872 expr point z3.ce872
=inductive-invariants point_set point z3.ce872 expr point z3.ce872 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce872 expr point z3.ce872 val 2 for input.spec-%var-i-0.L3%6%bbentry
2
=inductive-invariants point_set point z3.ce872 expr point z3.ce872 val 3 for input.spec-%var-ret-0.L3%6%bbentry
134744072
=inductive-invariants point_set point z3.ce872 expr point z3.ce872 val 4 for input.dst.llvm-%x
3724270080
=inductive-invariants point_set point z3.ce872 expr point z3.ce872 val 5 for input.dst.llvm-%n
134219784
=inductive-invariants point_set point z3.ce872 expr point z3.ce872 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
134744072
=inductive-invariants point_set point z3.ce872 expr point z3.ce872 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3.ce872 expr point z3.ce872 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce872 expr point z3.ce872 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce872 expr point z3.ce872 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce872 expr point z3.ce872 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce872 expr point z3.ce872 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce872 expr point z3.ce872 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce872 expr point z3.ce872 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce872 expr point z3.ce872 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce872 expr point z3.ce872 done
=inductive-invariants point_set point z3.ce894
=inductive-invariants point_set point z3.ce894 expr point z3.ce894
=inductive-invariants point_set point z3.ce894 expr point z3.ce894 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce894 expr point z3.ce894 val 2 for input.spec-%var-i-0.L3%6%bbentry
2
=inductive-invariants point_set point z3.ce894 expr point z3.ce894 val 3 for input.spec-%var-ret-0.L3%6%bbentry
67372036
=inductive-invariants point_set point z3.ce894 expr point z3.ce894 val 4 for input.dst.llvm-%x
3724270080
=inductive-invariants point_set point z3.ce894 expr point z3.ce894 val 5 for input.dst.llvm-%n
67109892
=inductive-invariants point_set point z3.ce894 expr point z3.ce894 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
67372036
=inductive-invariants point_set point z3.ce894 expr point z3.ce894 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3.ce894 expr point z3.ce894 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce894 expr point z3.ce894 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce894 expr point z3.ce894 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce894 expr point z3.ce894 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce894 expr point z3.ce894 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce894 expr point z3.ce894 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce894 expr point z3.ce894 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce894 expr point z3.ce894 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce894 expr point z3.ce894 done
=inductive-invariants point_set point z3v487.ce916
=inductive-invariants point_set point z3v487.ce916 expr point z3v487.ce916
=inductive-invariants point_set point z3v487.ce916 expr point z3v487.ce916 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce916 expr point z3v487.ce916 val 2 for input.spec-%var-i-0.L3%6%bbentry
2
=inductive-invariants point_set point z3v487.ce916 expr point z3v487.ce916 val 3 for input.spec-%var-ret-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce916 expr point z3v487.ce916 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce916 expr point z3v487.ce916 val 5 for input.dst.llvm-%n
2
=inductive-invariants point_set point z3v487.ce916 expr point z3v487.ce916 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce916 expr point z3v487.ce916 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3v487.ce916 expr point z3v487.ce916 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce916 expr point z3v487.ce916 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce916 expr point z3v487.ce916 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce916 expr point z3v487.ce916 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce916 expr point z3v487.ce916 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce916 expr point z3v487.ce916 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce916 expr point z3v487.ce916 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce916 expr point z3v487.ce916 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce916 expr point z3v487.ce916 done
=inductive-invariants point_set point z3.ce967
=inductive-invariants point_set point z3.ce967 expr point z3.ce967
=inductive-invariants point_set point z3.ce967 expr point z3.ce967 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce967 expr point z3.ce967 val 2 for input.spec-%var-i-0.L3%6%bbentry
2
=inductive-invariants point_set point z3.ce967 expr point z3.ce967 val 3 for input.spec-%var-ret-0.L3%6%bbentry
2678038431
=inductive-invariants point_set point z3.ce967 expr point z3.ce967 val 4 for input.dst.llvm-%x
4288671232
=inductive-invariants point_set point z3.ce967 expr point z3.ce967 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3.ce967 expr point z3.ce967 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
2678038431
=inductive-invariants point_set point z3.ce967 expr point z3.ce967 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3.ce967 expr point z3.ce967 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce967 expr point z3.ce967 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce967 expr point z3.ce967 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce967 expr point z3.ce967 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce967 expr point z3.ce967 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce967 expr point z3.ce967 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce967 expr point z3.ce967 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce967 expr point z3.ce967 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce967 expr point z3.ce967 done
=inductive-invariants point_set point z3.ce945
=inductive-invariants point_set point z3.ce945 expr point z3.ce945
=inductive-invariants point_set point z3.ce945 expr point z3.ce945 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce945 expr point z3.ce945 val 2 for input.spec-%var-i-0.L3%6%bbentry
2
=inductive-invariants point_set point z3.ce945 expr point z3.ce945 val 3 for input.spec-%var-ret-0.L3%6%bbentry
1869573999
=inductive-invariants point_set point z3.ce945 expr point z3.ce945 val 4 for input.dst.llvm-%x
3857542916
=inductive-invariants point_set point z3.ce945 expr point z3.ce945 val 5 for input.dst.llvm-%n
94063
=inductive-invariants point_set point z3.ce945 expr point z3.ce945 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1869573999
=inductive-invariants point_set point z3.ce945 expr point z3.ce945 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3.ce945 expr point z3.ce945 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce945 expr point z3.ce945 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce945 expr point z3.ce945 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce945 expr point z3.ce945 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce945 expr point z3.ce945 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce945 expr point z3.ce945 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce945 expr point z3.ce945 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce945 expr point z3.ce945 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce945 expr point z3.ce945 done
=inductive-invariants point_set point z3v487.ce1008
=inductive-invariants point_set point z3v487.ce1008 expr point z3v487.ce1008
=inductive-invariants point_set point z3v487.ce1008 expr point z3v487.ce1008 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce1008 expr point z3v487.ce1008 val 2 for input.spec-%var-i-0.L3%6%bbentry
4
=inductive-invariants point_set point z3v487.ce1008 expr point z3v487.ce1008 val 3 for input.spec-%var-ret-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce1008 expr point z3v487.ce1008 val 4 for input.dst.llvm-%x
2147483636
=inductive-invariants point_set point z3v487.ce1008 expr point z3v487.ce1008 val 5 for input.dst.llvm-%n
2097154
=inductive-invariants point_set point z3v487.ce1008 expr point z3v487.ce1008 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1008 expr point z3v487.ce1008 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3v487.ce1008 expr point z3v487.ce1008 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1008 expr point z3v487.ce1008 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1008 expr point z3v487.ce1008 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1008 expr point z3v487.ce1008 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1008 expr point z3v487.ce1008 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1008 expr point z3v487.ce1008 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1008 expr point z3v487.ce1008 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1008 expr point z3v487.ce1008 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1008 expr point z3v487.ce1008 done
=inductive-invariants point_set point z3.ce1009
=inductive-invariants point_set point z3.ce1009 expr point z3.ce1009
=inductive-invariants point_set point z3.ce1009 expr point z3.ce1009 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce1009 expr point z3.ce1009 val 2 for input.spec-%var-i-0.L3%6%bbentry
4
=inductive-invariants point_set point z3.ce1009 expr point z3.ce1009 val 3 for input.spec-%var-ret-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce1009 expr point z3.ce1009 val 4 for input.dst.llvm-%x
577706528
=inductive-invariants point_set point z3.ce1009 expr point z3.ce1009 val 5 for input.dst.llvm-%n
256
=inductive-invariants point_set point z3.ce1009 expr point z3.ce1009 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1009 expr point z3.ce1009 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3.ce1009 expr point z3.ce1009 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1009 expr point z3.ce1009 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1009 expr point z3.ce1009 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1009 expr point z3.ce1009 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1009 expr point z3.ce1009 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1009 expr point z3.ce1009 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1009 expr point z3.ce1009 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1009 expr point z3.ce1009 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1009 expr point z3.ce1009 done
=inductive-invariants point_set point z3v487.ce1059
=inductive-invariants point_set point z3v487.ce1059 expr point z3v487.ce1059
=inductive-invariants point_set point z3v487.ce1059 expr point z3v487.ce1059 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce1059 expr point z3v487.ce1059 val 2 for input.spec-%var-i-0.L3%6%bbentry
5
=inductive-invariants point_set point z3v487.ce1059 expr point z3v487.ce1059 val 3 for input.spec-%var-ret-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce1059 expr point z3v487.ce1059 val 4 for input.dst.llvm-%x
3229745136
=inductive-invariants point_set point z3v487.ce1059 expr point z3v487.ce1059 val 5 for input.dst.llvm-%n
5
=inductive-invariants point_set point z3v487.ce1059 expr point z3v487.ce1059 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1059 expr point z3v487.ce1059 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
5
=inductive-invariants point_set point z3v487.ce1059 expr point z3v487.ce1059 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1059 expr point z3v487.ce1059 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1059 expr point z3v487.ce1059 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce1059 expr point z3v487.ce1059 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce1059 expr point z3v487.ce1059 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1059 expr point z3v487.ce1059 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1059 expr point z3v487.ce1059 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1059 expr point z3v487.ce1059 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1059 expr point z3v487.ce1059 done
=inductive-invariants point_set point z3.ce1060
=inductive-invariants point_set point z3.ce1060 expr point z3.ce1060
=inductive-invariants point_set point z3.ce1060 expr point z3.ce1060 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce1060 expr point z3.ce1060 val 2 for input.spec-%var-i-0.L3%6%bbentry
5
=inductive-invariants point_set point z3.ce1060 expr point z3.ce1060 val 3 for input.spec-%var-ret-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce1060 expr point z3.ce1060 val 4 for input.dst.llvm-%x
2147483636
=inductive-invariants point_set point z3.ce1060 expr point z3.ce1060 val 5 for input.dst.llvm-%n
5
=inductive-invariants point_set point z3.ce1060 expr point z3.ce1060 val 6 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1060 expr point z3.ce1060 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
5
=inductive-invariants point_set point z3.ce1060 expr point z3.ce1060 val 8 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1060 expr point z3.ce1060 val 9 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1060 expr point z3.ce1060 val 10 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce1060 expr point z3.ce1060 val 11 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce1060 expr point z3.ce1060 val 12 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1060 expr point z3.ce1060 val 13 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1060 expr point z3.ce1060 val 14 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1060 expr point z3.ce1060 val 15 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1060 expr point z3.ce1060 done
=inductive-invariants point_set points done
=out-of-bound-exprs for reason inductive-invariants
=out-of-bound-exprs for reason inductive-invariants at L0%0%d_L0%0%d

=out-of-bound-exprs for reason inductive-invariants at L3%6%bbentry_Lfor.cond%1%bbentry

=out-of-bound-exprs for reason inductive-invariants at E0%0%d_E0%0%d

=graph_with_points done
=Invariant state at node L0%0%d_L0%0%d for reason inductive-invariants
=pc L0%0%d_L0%0%d inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond.description

=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond.expr is null
=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond done
=pc L0%0%d_L0%0%d inductive-invariants invariant_state done
=Invariant state at node L3%6%bbentry_Lfor.cond%1%bbentry for reason inductive-invariants
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state failcond.description

=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state failcond.expr is null
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state failcond done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability name abstract-memlabel-asserts
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability expr_group_type HOUDINI_EXPECTS_STABILITY with 1 exprs
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability point_expr 1
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : bvuge(1, 10) : BOOL
18 : bvule(1, 11) : BOOL
19 : and(17, 18) : BOOL
20 : bvuge(2, 10) : BOOL
21 : bvule(2, 11) : BOOL
22 : and(20, 21) : BOOL
23 : not(22) : BOOL
24 : andnot1(19, 23) : BOOL
25 : bvuge(10, 1) : BOOL
26 : bvule(10, 2) : BOOL
27 : and(25, 26) : BOOL
28 : bvuge(11, 1) : BOOL
29 : bvule(11, 2) : BOOL
30 : and(28, 29) : BOOL
31 : not(30) : BOOL
32 : andnot1(27, 31) : BOOL
33 : and(24, 32) : BOOL
34 : and(16, 33) : BOOL
35 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
36 : 3 { 0x3 +1.35e129 } : BV:32
37 : bvand(35, 36) : BV:32
38 : 0 { 0x0 +1.0e129 } : BV:32
39 : eq(37, 38) : BOOL
40 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
41 : bvand(40, 36) : BV:32
42 : eq(41, 38) : BOOL
43 : and(39, 42) : BOOL
44 : and(34, 43) : BOOL
45 : eq(35, 1) : BOOL
46 : eq(40, 10) : BOOL
47 : and(45, 46) : BOOL
48 : and(44, 47) : BOOL
49 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
50 : 1 { 0x1 +1.11e129 } : BV:32
51 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
52 : region_agrees_with_memlabel(49, 38, 50, 51) : BOOL
53 : and(48, 52) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability pred 0
=Comment
abstract-memlabel-asserts-houdini-guess
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : bvuge(1, 10) : BOOL
18 : bvule(1, 11) : BOOL
19 : and(17, 18) : BOOL
20 : bvuge(2, 10) : BOOL
21 : bvule(2, 11) : BOOL
22 : and(20, 21) : BOOL
23 : not(22) : BOOL
24 : andnot1(19, 23) : BOOL
25 : bvuge(10, 1) : BOOL
26 : bvule(10, 2) : BOOL
27 : and(25, 26) : BOOL
28 : bvuge(11, 1) : BOOL
29 : bvule(11, 2) : BOOL
30 : and(28, 29) : BOOL
31 : not(30) : BOOL
32 : andnot1(27, 31) : BOOL
33 : and(24, 32) : BOOL
34 : and(16, 33) : BOOL
35 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
36 : 3 { 0x3 +1.35e129 } : BV:32
37 : bvand(35, 36) : BV:32
38 : 0 { 0x0 +1.0e129 } : BV:32
39 : eq(37, 38) : BOOL
40 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
41 : bvand(40, 36) : BV:32
42 : eq(41, 38) : BOOL
43 : and(39, 42) : BOOL
44 : and(34, 43) : BOOL
45 : eq(35, 1) : BOOL
46 : eq(40, 10) : BOOL
47 : and(45, 46) : BOOL
48 : and(44, 47) : BOOL
49 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
50 : 1 { 0x1 +1.11e129 } : BV:32
51 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
52 : region_agrees_with_memlabel(49, 38, 50, 51) : BOOL
53 : and(48, 52) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability predicate_set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ce 0: z3.ce3
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ces set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability summary: number of exprs=1; number of visited CEs=1; number of preds=1
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv name expr-group-bvs
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv expr_group_type BV_EQ with 6 exprs
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 2
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 3
1 : input.spec-%var-ret-0.L3%6%bbentry : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 4
1 : input.dst.llvm-%x : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 5
1 : input.dst.llvm-%n : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 6
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 7
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 0
=Comment
expr-group-bvs.linear2-32-free_var_idx.7
=LhsExpr
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 1
=Comment
expr-group-bvs.linear2-32-free_var_idx.6
=LhsExpr
1 : input.spec-%var-ret-0.L3%6%bbentry : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 2
=Comment
expr-group-bvs.linear1-2-free_var_idx.4
=LhsExpr
1 : 0 { 0x0 } : BV:2
=RhsExpr
1 : input.dst.llvm-%x : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 0 { 0x0 +1.0e1025 } : INT
4 : bvextract(1, 2, 3) : BV:2
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv predicate_set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 0: z3.ce3
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 1: z3.ce23
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 2: z3v487.ce24
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 3: z3.ce43
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 4: z3.ce63
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 5: z3.ce83
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 6: z3v487.ce84
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 7: z3.ce103
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 8: z3.ce123
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 9: z3.ce673
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 10: z3.ce780
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 11: z3.ce837
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ces set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv summary: number of exprs=6; number of visited CEs=12; number of preds=3
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv output matrix
matrix:
4
-2147483648->0; 2->0; 3->0; 4->1073741824; 5->0; 6->0; 7->0; 
6
-2147483648->0; 2->0; 3->4294967295; 4->0; 5->0; 6->1; 7->0; 
7
-2147483648->0; 2->4294967295; 3->0; 4->0; 5->0; 6->0; 7->1; 
matrix done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv state elems done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const name src-branches-const-ineq
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const point_expr 2
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const pred 0
=Comment
src-branches-const-ineq.ub-unsigned
=LhsExpr
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
2 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const pred 1
=Comment
src-branches-const-ineq.lb-signed
=LhsExpr
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvsge(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const predicate_set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 0: z3.ce3
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 1: z3.ce780
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 2: z3v487.ce1008
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 3: z3v487.ce1059
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ces set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=2
=m_lower_bound_signed_cur 0
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967294
=m_lower_bound_signed_known 0
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967294
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 3
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_exprs done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%n
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const point_expr 5
1 : input.dst.llvm-%n : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const predicate_set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 0: z3.ce3
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 1: z3.ce23
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 2: z3.ce43
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 3: z3.ce143
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ces set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=0
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967295
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 3
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_exprs done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const point_expr 7
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const pred 0
=Comment
dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.ub-unsigned
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const pred 1
=Comment
dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.lb-signed
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvsge(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const predicate_set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 0: z3.ce3
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 1: z3.ce780
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 2: z3v487.ce1008
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 3: z3v487.ce1059
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ces set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=2
=m_lower_bound_signed_cur 0
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967294
=m_lower_bound_signed_known 0
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967294
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 3
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_exprs done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini name dst-ineq
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini expr_group_type HOUDINI with 8 exprs
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini point_expr 8
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini point_expr 9
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini point_expr 10
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini point_expr 11
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini point_expr 12
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini point_expr 13
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini point_expr 14
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini point_expr 15
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini pred 0
=Comment
dst-ineq-houdini-guess
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini predicate_set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini visited ce 0: z3.ce3
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini visited ce 1: z3.ce23
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini visited ce 2: z3.ce43
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini visited ces set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini summary: number of exprs=8; number of visited CEs=3; number of preds=1
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based name spec-coupling-invariants
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based expr_group_type HOUDINI_AXIOM_BASED with 6 exprs
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 16
1 : input.spec-%var-x-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%x : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 17
1 : input.spec-%var-x-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%x : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 18
1 : input.spec-%var-x-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%x : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : bvadd(14, 5) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(10, 11, 12, 15, 16, 17) : BV:32
19 : lambda(9, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(8, 19) : MAP[BV:32 -> BV:32]
21 : eq(1, 20) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 19
1 : input.spec-%var-x-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%x : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 20
1 : input.spec-%var-x-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%x : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 21
1 : spec-%var-x-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%x : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based pred 0
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-x-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%x : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based pred 1
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-x-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%x : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based predicate_set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based visited ce 0: z3.ce3
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based visited ces set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based summary: number of exprs=6; number of visited CEs=1; number of preds=2
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state done
=Invariant state at node E0%0%d_E0%0%d for reason inductive-invariants
=pc E0%0%d_E0%0%d inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond.description

=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond.expr is null
=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond done
=pc E0%0%d_E0%0%d inductive-invariants invariant_state done
=invariant_state_changed_at_pcs for reason inductive-invariants:
=graph_with_guessing done
=graph_with_correctness_covers begin
=graph_with_correctness_covers done
=m_dst_fcall_edges_already_updated_from_pcs:
=m_internal_pcs:
=m_super_edges:
=AllocaPCLocalSprelAssumptionsBegin:
=Local offsets from compile log
=Local offsets from compile log done
=done
=AllocaPCLocalSprelAssumptionsEnd
=DeallocaPCLocalSprelAssumptionsBegin:
=Local offsets from compile log
=Local offsets from compile log done
=done
=DeallocaPCLocalSprelAssumptionsEnd
=src_tfg pcs reaching pcpair L0%0%d_L0%0%d
=src_tfg pc: L0%0%d
=exit_pc_asserts at E0%0%d_E0%0%d
=exit_pc_assert.0 at E0%0%d_E0%0%d
=Comment
equal-regs
=LhsExpr
1 : input.spec-%tmpvar-10.E0%0%d : BV:32
2 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry
=well-formedness-conditions for L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry edge well-formedness condition
=well-formedness-conditions for L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry edge well-formedness condition done
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry edge well-formedness condition
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond cg_path
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond src_path
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond dst_path
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond pred.0
=Comment
wfcond.from_pcL3%6%bbentry_Lfor.cond%1%bbentry.to_pcL3%6%bbentry_Lfor.cond%1%bbentry-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
4 : not(3) : BOOL
5 : input.spec-%var-x-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
6 : input.spec-%var-i-0.L3%6%bbentry : BV:32
7 : map_get(5, 6) : SUM[UNIT,BV:32]
8 : 1 { 0x1 +1.0e1025 } : INT
9 : sum_is(7, 8) : BOOL
10 : or(4, 9) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry edge well-formedness condition done
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge well-formedness condition
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond pred.0
=Comment
wfcond.from_pcL3%6%bbentry_Lfor.cond%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
4 : input.spec-%var-x-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
5 : input.spec-%var-i-0.L3%6%bbentry : BV:32
6 : map_get(4, 5) : SUM[UNIT,BV:32]
7 : 0 { 0x0 +1.0e1025 } : INT
8 : sum_is(6, 7) : BOOL
9 : or(3, 8) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d)
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond pred.0
=Comment
equal-regs
=LhsExpr
1 : input.spec-%tmpvar-10.E0%0%d : BV:32
2 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge well-formedness condition done
=Ranking exprs at node L3%6%bbentry_Lfor.cond%1%bbentry
=SRC Ranking expr 0
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
=SRC Ranking expr 1
1 : input.spec-%var-ret-0.L3%6%bbentry : BV:32
=SRC Tie Breaking expr 0
1 : input.spec-%var-x-1 : MAP[BV:32 -> BV:32]
=SRC Tie Breaking expr 1
1 : input.spec-%var-x-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
=DST Ranking expr 0
1 : input.dst.llvm-%x : BV:32
=DST Ranking expr 1
1 : input.dst.llvm-%n : BV:32
=DST Ranking expr 2
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=DST Ranking expr 3
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=bv_rank_exprs done
=Ranking exprs done
=dst-to-src submaps done
=cg-edge-contains-repeated-src-tfg-edge at edge-id L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry
0
=cg-edge-contains-repeated-src-tfg-edge at edge-id L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry
1
=cg-edge-contains-repeated-src-tfg-edge at edge-id L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d
1
=cg-edge-contains-repeated-src-tfg-edge-map done
=cg.assumes_around_edge
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #0
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #0.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #0.pred
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
140355 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140356 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140409 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
140358 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
140344 : 4 { 0x4 +1.0e1025 } : INT
140345 : 0 { 0x0 } : BOOL
140410 : select(140355, 140356, 140409, 140358, 140344, 140345) : BV:32
=RhsExpr
140354 : input.dst.llvm-%n : BV:32
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #1
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #1.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #1.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #1.pred
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
140355 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140356 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140411 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
140357 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
140344 : 4 { 0x4 +1.0e1025 } : INT
140345 : 0 { 0x0 } : BOOL
140412 : select(140355, 140356, 140411, 140357, 140344, 140345) : BV:32
=RhsExpr
140353 : input.dst.llvm-%x : BV:32
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #2
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #2.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #2.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #2.pred
=Comment
undef-behaviour-align-assume.edge.L0%0%d=>Lfor.cond%1%bbentry
=LhsExpr
140353 : input.dst.llvm-%x : BV:32
140344 : 4 { 0x4 +1.0e1025 } : INT
140364 : islangaligned(140353, 140344) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #3
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #3.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #3.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #3.pred
=Comment
pointer-implements-variable-sized-map
=LhsExpr
140273 : input.spec-%var-x-1 : MAP[BV:32 -> BV:32]
140333 : Lambda0 : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
140335 : bvule(140276, 140333) : BOOL
140354 : input.dst.llvm-%n : BV:32
140683 : bvult(140333, 140354) : BOOL
140684 : and(140335, 140683) : BOOL
140685 : lambda(140333, 140684) : FUNCTION[BV:32 -> BOOL]
140334 : Lambda1 : BV:32
140355 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140356 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140339 : memlabel-top : MEMLABEL
140341 : 4 { 0x4 +1.47e129 } : BV:32
140342 : bvmul(140334, 140341) : BV:32
140353 : input.dst.llvm-%x : BV:32
140709 : bvadd(140342, 140353) : BV:32
140344 : 4 { 0x4 +1.0e1025 } : INT
140345 : 0 { 0x0 } : BOOL
140710 : select(140355, 140356, 140339, 140709, 140344, 140345) : BV:32
140712 : lambda(140334, 140710) : FUNCTION[BV:32 -> BV:32]
140713 : map(140685, 140712) : MAP[BV:32 -> BV:32]
140717 : eq(140273, 140713) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #4
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #4.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #4.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #4.pred
=Comment
precond-mlasserts
=LhsExpr
140638 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
140639 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
140640 : bvule(140638, 140639) : BOOL
140341 : 4 { 0x4 +1.47e129 } : BV:32
140382 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
140641 : bvadd(140341, 140382) : BV:32
140642 : bvadd(140638, 140641) : BV:32
140643 : eq(140639, 140642) : BOOL
140644 : and(140640, 140643) : BOOL
140645 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
140646 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
140647 : bvule(140645, 140646) : BOOL
140648 : and(140644, 140647) : BOOL
140649 : bvadd(140645, 140641) : BV:32
140650 : eq(140646, 140649) : BOOL
140651 : and(140648, 140650) : BOOL
140652 : bvuge(140638, 140645) : BOOL
140653 : bvule(140638, 140646) : BOOL
140654 : and(140652, 140653) : BOOL
140656 : bvuge(140639, 140645) : BOOL
140657 : bvule(140639, 140646) : BOOL
140658 : and(140656, 140657) : BOOL
140659 : not(140658) : BOOL
140660 : andnot1(140654, 140659) : BOOL
140655 : bvuge(140645, 140638) : BOOL
140661 : bvule(140645, 140639) : BOOL
140662 : and(140655, 140661) : BOOL
140664 : bvuge(140646, 140638) : BOOL
140665 : bvule(140646, 140639) : BOOL
140666 : and(140664, 140665) : BOOL
140667 : not(140666) : BOOL
140668 : andnot1(140662, 140667) : BOOL
140663 : and(140660, 140668) : BOOL
140669 : and(140651, 140663) : BOOL
140358 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
140670 : 3 { 0x3 +1.35e129 } : BV:32
140671 : bvand(140358, 140670) : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
140672 : eq(140671, 140276) : BOOL
140357 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
140673 : bvand(140357, 140670) : BV:32
140674 : eq(140673, 140276) : BOOL
140675 : and(140672, 140674) : BOOL
140676 : and(140669, 140675) : BOOL
140677 : eq(140358, 140638) : BOOL
140678 : eq(140357, 140645) : BOOL
140679 : and(140677, 140678) : BOOL
140680 : and(140676, 140679) : BOOL
140356 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140288 : 1 { 0x1 +1.11e129 } : BV:32
140359 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
140681 : region_agrees_with_memlabel(140356, 140276, 140288, 140359) : BOOL
140682 : and(140680, 140681) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry done
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry assume #0
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry assume #0.ec
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry assume #0.pred
=Comment
merged-predicate
=LhsExpr
140510 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
140354 : input.dst.llvm-%n : BV:32
140511 : bvult(140510, 140354) : BOOL
140435 : 4 { 0x4 +1.0e1025 } : BV:64
140376 : 32 { 0x20 +1.0e1025 } : INT
140521 : bvsign_ext(140510, 140376) : BV:64
140586 : bvmul(140435, 140521) : BV:64
140380 : 63 { 0x3f +1.0e1025 } : INT
140587 : bvextract(140586, 140380, 140376) : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
140520 : bvslt(140510, 140276) : BOOL
140382 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
140600 : ite(140520, 140382, 140276) : BV:32
140602 : eq(140587, 140600) : BOOL
140344 : 4 { 0x4 +1.0e1025 } : INT
140604 : isindexforsize(140602, 140344) : BOOL
140353 : input.dst.llvm-%x : BV:32
140341 : 4 { 0x4 +1.47e129 } : BV:32
140556 : bvmul(140341, 140510) : BV:32
140559 : bvadd(140353, 140556) : BV:32
140606 : isgepoffset(140559, 140556) : BOOL
140608 : and(140604, 140606) : BOOL
140577 : islangaligned(140559, 140344) : BOOL
163340 : and(140608, 140577) : BOOL
140275 : 1 { 0x1 } : BOOL
163347 : eq(163340, 140275) : BOOL
163571 : implies(140511, 163347) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry done
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d done
cg.assumes_around_edge done
=corr_graph_done
=bv_rank_map
=bv_rank at L0%0%d_L0%0%d
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=bv_rank at L3%6%bbentry_Lfor.cond%1%bbentry
m_dst_rank: 2, m_src_rank: 0, m_spec_rank: 5
=bv_rank at E0%0%d_E0%0%d
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=cg_with_rank done
=cg_with_backtracker done
=asm filename

=cg_with_asm_annotation done
