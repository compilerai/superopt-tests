argv[0] = /home/indrajit/scratch/repos/superopt-project/usr/local/bin/eq32
argv[1] = --disable-dst-to-src-submap
argv[2] = --smt-query-timeout=5
argv[3] = --tmpdir-path=par_tmpdir
argv[4] = --proof=fcall5.proof
argv[5] = --spec-iospecs=fcall5.iospecs
argv[6] = fcall5.spec
argv[7] = fcall5.c
Query dir: /tmp/smt-solver-tmp-files/indrajit.2710320
argv[0] = /home/indrajit/scratch/repos/superopt-project/usr/local/bin/clang
argv[1] = -Xclang
argv[2] = -disable-llvm-passes
argv[3] = -Xclang
argv[4] = -disable-O0-optnone
argv[5] = -c
argv[6] = -g
argv[7] = -emit-llvm
argv[8] = -O0
argv[9] = /home/indrajit/scratch/repos/superopt-project/superopt-tests/spec-tests/fcall5.c
argv[10] = -o
argv[11] = par_tmpdir/fcall5.c.bc.tmp
argv[12] = -m32

argv[0] = /home/indrajit/scratch/repos/superopt-project/usr/local/bin/llvm2tfg
argv[1] = --xml-output-format
argv[2] = text-color
argv[3] = -f
argv[4] = ALL
argv[5] = --call-context-depth
argv[6] = 0
argv[7] = --always-use-call-context-any
argv[8] = --src-etfg
argv[9] = par_tmpdir/fcall5.spec.etfg
argv[10] = par_tmpdir/fcall5.c.bc
argv[11] = -o
argv[12] = par_tmpdir/fcall5.c.dst.etfg
<MSG>0:00 : Converting LLVM IR bitcode to Transfer Function Graph (TFG) for function foo</MSG>
<MSG>0:00 : Converting LLVM IR bitcode to Transfer Function Graph (TFG) for function bar</MSG>

tfg_get_simplified_edge_cond_for_edge: num_starts 214 time spent: 0:0:0 [0.000363s total; 0.000002 per start]
tfg_get_simplified_assumes_for_edge: num_starts 233 time spent: 0:0:0 [0.000344s total; 0.000001 per start]
expr_label_memlabels_using_memlabel_map: num_starts 2786 time spent: 0:0:0 [0.015947s total; 0.000006 per start]
expr_simplify_solver: num_starts 376 time spent: 0:0:0 [0.031054s total; 0.000083 per start]
expr_simplify_syntactic: num_starts 376 time spent: 0:0:0 [0.167592s total; 0.000446 per start]
expr_simplify_select_on_store: num_starts 8 time spent: 0:0:0 [0.019996s total; 0.002499 per start]
expr_simplify_using_lhs_set_helper: num_starts 243 time spent: 0:0:0 [0.208597s total; 0.000858 per start]
expr_simplify_using_lhs_set_visit_function: num_starts 1585 time spent: 0:0:0 [0.207436s total; 0.000131 per start]
expr_simplify_sort_args_to_canonicalize: num_starts 167 time spent: 0:0:0 [0.000638s total; 0.000004 per start]
expr_simplify_eq: num_starts 12 time spent: 0:0:0 [0.000136s total; 0.000011 per start]
expr_simplify_not: num_starts 2 time spent: 0:0:0 [0.000007s total; 0.000003 per start]
expr_simplify_ite: num_starts 4 time spent: 0:0:0 [0.000502s total; 0.000125 per start]
canonicalize_expr_tree: num_starts 157 time spent: 0:0:0 [0.002803s total; 0.000018 per start]
expr_simplify_memalloc_using_memlabel: num_starts 48 time spent: 0:0:0 [0.000109s total; 0.000002 per start]
expr_simplify_select_on_store_visit_function: num_starts 8 time spent: 0:0:0 [0.019469s total; 0.002434 per start]
get_arithmetic_addsub_atoms: num_starts 138 time spent: 0:0:0 [0.000115s total; 0.000001 per start]
expr_linear_relation_holds_visit: num_starts 303 time spent: 0:0:0 [0.004667s total; 0.000015 per start]
expr_is_consts_struct_constant: num_starts 3391 time spent: 0:0:0 [0.001895s total; 0.000001 per start]
expr_do_simplify_helper: num_starts 6284 time spent: 0:0:0 [0.214443s total; 0.000034 per start]
expr_do_simplify_helper_cache: num_starts 6284 time spent: 0:0:0 [0.004250s total; 0.000001 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor_cache: num_starts 36 time spent: 0:0:0 [0.000009s total; 0.000000 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor: num_starts 36 time spent: 0:0:0 [0.000187s total; 0.000005 per start]
array_constant_equals: num_starts 151 time spent: 0:0:0 [0.000292s total; 0.000002 per start]
combo_dfa_xfer_and_meet: num_starts 238 time spent: 0:0:0 [0.374768s total; 0.001575 per start]
alias_val_xfer_and_meet: num_starts 238 time spent: 0:0:0 [0.123557s total; 0.000519 per start]
get_sprel_map_from_avail_exprs: num_starts 297 time spent: 0:0:0 [0.036927s total; 0.000124 per start]
update_memlabels_for_memslot_locs: num_starts 55 time spent: 0:0:0 [0.000281s total; 0.000005 per start]
populate_gen_and_kill_sets_for_edge: num_starts 472 time spent: 0:0:0 [0.025386s total; 0.000054 per start]
compute_simplified_loc_exprs_for_edge: num_starts 1205 time spent: 0:0:0 [0.228571s total; 0.000190 per start]
compute_locs_definitely_written_on_edge: num_starts 472 time spent: 0:0:0 [0.000205s total; 0.000000 per start]
get_locs_potentially_read_in_expr_using_locs_map: num_starts 128 time spent: 0:0:0 [0.032737s total; 0.000256 per start]
edge_update_memlabel_map_for_mlvars: num_starts 236 time spent: 0:0:0 [0.004565s total; 0.000019 per start]
add_new_locs_based_on_edge: num_starts 236 time spent: 0:0:0 [0.047076s total; 0.000199 per start]
alias_val_meet: num_starts 1 time spent: 0:0:0 [0.000072s total; 0.000072 per start]
expand_locset_to_include_slots_for_memmask: num_starts 171 time spent: 0:0:0 [0.001053s total; 0.000006 per start]
num_syntactic_match_tests = 0.
num_execution_tests = 0.
num_boolean_tests = 0.
fingerprinting rate: -nan per second (total), -nan per second (itable_enumerate_timer), -nan per second (excluding execution/boolean tests).

timers:
graph_with_proofs_constructor.src.spec.bar.: 0s (num_starts 1; 0.0000s/start)
graph_with_ce_constructor.src.spec.foo.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_execution_constructor.src.spec.foo.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_paths_constructor.src.spec.bar.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_paths_constructor.src.spec.foo.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_points_constructor.src.spec.bar.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_points_constructor.src.spec.foo.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_proofs_constructor.src.spec.foo.: 1e-06s (num_starts 1; 0.0000s/start)
tfg_constructor.src.spec.foo.after_populate_assumes_around_edge.: 1e-06s (num_starts 1; 0.0000s/start)
tfg_llvm_interpret_intrinsic_fcalls.: 1e-06s (num_starts 2; 0.0000s/start)
graph_with_ce_constructor.src.spec.bar.: 2e-06s (num_starts 1; 0.0000s/start)
graph_with_execution_constructor.src.spec.bar.: 2e-06s (num_starts 1; 0.0000s/start)
graph_with_guessing_constructor.src.spec.foo.: 2e-06s (num_starts 1; 0.0000s/start)
set_string_contents_for_touched_symbols_at_zero_offset.: 2e-06s (num_starts 2; 0.0000s/start)
tfg_constructor.src.spec.bar.after_populate_assumes_around_edge.: 2e-06s (num_starts 1; 0.0000s/start)
alias_val_t::constructor_with_map_arg.: 3e-06s (num_starts 3; 0.0000s/start)
context_constructor.init.: 3e-06s (num_starts 1; 0.0000s/start)
remove_function_name_from_symbols.: 3e-06s (num_starts 2; 0.0000s/start)
graph_with_guessing_constructor.src.spec.bar.: 8e-06s (num_starts 1; 0.0000s/start)
ftmap_pointsto_analysis_combo_dfa_t.identify_arg_loc_for_arg_expr.: 1.1e-05s (num_starts 6; 0.0000s/start)
context_constructor.solver.: 3.5e-05s (num_starts 1; 0.0000s/start)
add_extra_node_at_start_pc.: 4.2e-05s (num_starts 2; 0.0000s/start)
context_constructor.: 4.2e-05s (num_starts 1; 0.0000s/start)
get_intersected_lr_status.: 4.5e-05s (num_starts 2; 0.0000s/start)
add_assumes_to_start_edge.: 4.6e-05s (num_starts 2; 0.0000s/start)
ftmap_pointsto_analysis_combo_dfa_t.identify_arg_locs_in_fcall_edge.: 8.7e-05s (num_starts 2; 0.0000s/start)
main.3.: 0.000115s (num_starts 1; 0.0001s/start)
expr_is_hidden_reg.: 0.000121s (num_starts 155; 0.0000s/start)
get_memlabel_set_from_mlvarnames.: 0.000154s (num_starts 4; 0.0000s/start)
expr_is_callee_save_const.: 0.000155s (num_starts 163; 0.0000s/start)
populate_lr_status_for_sprel_locs_map.calling.compute_lr_status_for_expr.: 0.000191s (num_starts 9; 0.0000s/start)
tfg::populate_loc_definedness.set_loc_definedness().: 0.000225s (num_starts 4; 0.0001s/start)
identify_farg_memlabels_at_pc.calling.compute_lr_status_for_expr.: 0.000244s (num_starts 6; 0.0000s/start)
compute_sprel_relations.: 0.000248s (num_starts 2; 0.0001s/start)
propagate_sprels.: 0.000261s (num_starts 2; 0.0001s/start)
determinize_value_expr_map.: 0.000276s (num_starts 357; 0.0000s/start)
graph_locs_add_all_specvars.: 0.000285s (num_starts 2; 0.0001s/start)
graph_locs_add_exvregs_for_edge.: 0.000339s (num_starts 88; 0.0000s/start)
graph_locs_add_all_exvregs.: 0.000396s (num_starts 2; 0.0002s/start)
compute_reachable_memlabels_map.: 0.000398s (num_starts 1; 0.0004s/start)
graph_locs_add_local_vars_for_edge.: 0.000402s (num_starts 88; 0.0000s/start)
graph_with_aliasing_constructor.src.spec.bar.: 0.000405s (num_starts 1; 0.0004s/start)
graph_locs_add_all_local_vars.: 0.000459s (num_starts 2; 0.0002s/start)
sp_version_relations_val_t::compute_transitive_closure.: 0.000478s (num_starts 53; 0.0000s/start)
get_lr_status_for_loc_ids.: 0.000527s (num_starts 10; 0.0001s/start)
ftmap_pointsto_analysis_combo_dfa_t.identify_farg_memlabels_at_pc.: 0.000546s (num_starts 2; 0.0003s/start)
populate_locid2expr_map.: 0.000569s (num_starts 4; 0.0001s/start)
populate_memlabel_map.visit1.calling.compute_lr_status_for_expr.: 0.000578s (num_starts 8; 0.0001s/start)
lr_status_meet.: 0.000583s (num_starts 189; 0.0000s/start)
graph_with_edge_structures_constructor.src.spec.bar.: 0.000607s (num_starts 1; 0.0006s/start)
tfg::populate_loc_definedness.post_dfa.: 0.000638s (num_starts 4; 0.0002s/start)
tfg_get_write_memlabels.: 0.000682s (num_starts 2; 0.0003s/start)
expr_represents_llvm_undef.: 0.000861s (num_starts 167; 0.0000s/start)
graph_with_locs_constructor.src.spec.bar.: 0.000884s (num_starts 1; 0.0009s/start)
graph_with_aliasing_constructor.src.spec.foo.: 0.000984s (num_starts 1; 0.0010s/start)
ftmap_pointsto_analysis_combo_dfa_t.ftmap_convert_caller_pointsto_value_to_callee_pointsto_value.: 0.001014s (num_starts 2; 0.0005s/start)
tfg_get_read_memlabels.: 0.001016s (num_starts 2; 0.0005s/start)
graph_locs_add_all_llvmvars.: 0.001064s (num_starts 2; 0.0005s/start)
graph_with_simplified_assets_constructor.src.spec.bar.: 0.00111s (num_starts 1; 0.0011s/start)
canonicalize_llvm_nextpcs.: 0.001211s (num_starts 2; 0.0006s/start)
sp_version_relations_val_t::generate_vals_from_gen_set.: 0.001389s (num_starts 236; 0.0000s/start)
graph_visit_exprs_const.const.: 0.001519s (num_starts 4; 0.0004s/start)
def_analysis::xfer_and_meet.: 0.001588s (num_starts 176; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_varname_lr_status.: 0.001592s (num_starts 2; 0.0008s/start)
ftmap_pointsto_analysis_combo_dfa_t.ftmap_dfa_update_callee_boundary_value.: 0.001634s (num_starts 2; 0.0008s/start)
graph_with_locs_constructor.src.spec.foo.: 0.001724s (num_starts 1; 0.0017s/start)
get_summary_for_calling_functions.: 0.001726s (num_starts 2; 0.0009s/start)
ftmap_pointsto_analysis_combo_dfa_t.compute_summary_function.: 0.00174s (num_starts 2; 0.0009s/start)
tfg_constructor.src.spec.bar.after_transitive_closure.: 0.001771s (num_starts 1; 0.0018s/start)
tfg_constructor.src.spec.bar.post_parsing.: 0.001777s (num_starts 1; 0.0018s/start)
tfg_constructor.src.spec.bar.after_string_contents.: 0.001787s (num_starts 1; 0.0018s/start)
tfg_constructor.src.spec.bar.after_compute_max_memlabel_varnum.: 0.001791s (num_starts 1; 0.0018s/start)
tfg_constructor.src.spec.bar.: 0.001797s (num_starts 1; 0.0018s/start)
sp_version_relations_val_t::meet.: 0.001962s (num_starts 4350; 0.0000s/start)
graph_with_predicates_constructor.src.spec.bar.: 0.002003s (num_starts 1; 0.0020s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.post_dfa.: 0.002305s (num_starts 2; 0.0012s/start)
populate_exit_return_values_for_llvm_method.: 0.002315s (num_starts 2; 0.0012s/start)
tfg_llvm_t::tfg_llvm_fill_remaining_llvm_to_source_mappings_using_avail_exprs.: 0.002323s (num_starts 2; 0.0012s/start)
graph_with_edge_structures_constructor.src.spec.foo.: 0.002342s (num_starts 1; 0.0023s/start)
tfg::collect_assumes_around_edge.: 0.002359s (num_starts 233; 0.0000s/start)
graph_add_location_slots_using_state_mem_acc_map.: 0.002682s (num_starts 236; 0.0000s/start)
expr_linear_relation_holds::visit.var.: 0.00354s (num_starts 167; 0.0000s/start)
tfg_preprocess.dst.llvm.bar.: 0.003932s (num_starts 1; 0.0039s/start)
edge_update_memlabel_map_for_mlvars.populate_memlabel_map.: 0.004309s (num_starts 236; 0.0000s/start)
graph_with_simplified_assets_constructor.src.spec.foo.: 0.004365s (num_starts 1; 0.0044s/start)
expr_substitute_using_available_exprs_submap.: 0.00458s (num_starts 160; 0.0000s/start)
graph_visit_exprs.: 0.00517s (num_starts 8; 0.0006s/start)
compute_z3_expr.: 0.005265s (num_starts 152; 0.0000s/start)
query:convert_from_z3.: 0.005349s (num_starts 152; 0.0000s/start)
populate_transitive_closure.: 0.005437s (num_starts 2; 0.0027s/start)
graph_with_predicates_constructor.src.spec.foo.: 0.005548s (num_starts 1; 0.0055s/start)
tfg_constructor.src.spec.foo.after_transitive_closure.: 0.006965s (num_starts 1; 0.0070s/start)
tfg_constructor.src.spec.foo.post_parsing.: 0.006968s (num_starts 1; 0.0070s/start)
tfg_constructor.src.spec.foo.after_string_contents.: 0.006972s (num_starts 1; 0.0070s/start)
tfg_constructor.src.spec.foo.after_compute_max_memlabel_varnum.: 0.006976s (num_starts 1; 0.0070s/start)
tfg_constructor.src.spec.foo.: 0.006979s (num_starts 1; 0.0070s/start)
tfg_llvm_t::tfg_llvm_compute_pc_to_llvm_to_source_varname_map.: 0.007111s (num_starts 2; 0.0036s/start)
get_function_tfg_map.bar.: 0.007734s (num_starts 1; 0.0077s/start)
populate_dominator_and_postdominator_relations.: 0.008876s (num_starts 4; 0.0022s/start)
compute_lr_status_for_expr.: 0.010273s (num_starts 154; 0.0001s/start)
rdefs_locs_ssa_analysis::xfer_and_meet.: 0.010277s (num_starts 175; 0.0001s/start)
compute_new_lr_status_on_locs.calling.compute_lr_status_for_expr.: 0.010362s (num_starts 131; 0.0001s/start)
compute_new_lr_status_on_locs.loc_lr_status.simplify_and_compute_lr_status.: 0.010569s (num_starts 131; 0.0001s/start)
expr_contains_only_constants_or_sp_versions_or_count_sort_vars.: 0.011247s (num_starts 4377; 0.0000s/start)
query:convert_to_z3.: 0.011328s (num_starts 152; 0.0001s/start)
create_closure_matrix.: 0.012098s (num_starts 291; 0.0000s/start)
graph_identify_back_edges.: 0.013315s (num_starts 10; 0.0013s/start)
graph_identify_natural_loops.: 0.014052s (num_starts 10; 0.0014s/start)
populate_simplified_to_state.: 0.014132s (num_starts 6; 0.0024s/start)
graph_to_stream.: 0.014343s (num_starts 2; 0.0072s/start)
tfg::populate_loc_definedness.before_solve.: 0.014751s (num_starts 4; 0.0037s/start)
tfg::populate_loc_definedness.before_initialize.: 0.015566s (num_starts 4; 0.0039s/start)
tfg::populate_loc_definedness.: 0.016126s (num_starts 4; 0.0040s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.sprel.: 0.020548s (num_starts 2786; 0.0000s/start)
query:simplify-z3.: 0.020838s (num_starts 309; 0.0001s/start)
find_dominators.: 0.02085s (num_starts 18; 0.0012s/start)
populate_branch_affecting_locs.: 0.021218s (num_starts 4; 0.0053s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::sp_version_relations_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.021403s (num_starts 238; 0.0001s/start)
populate_simplified_assets.: 0.021875s (num_starts 12; 0.0018s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_solve.: 0.022796s (num_starts 2; 0.0114s/start)
compute_regions.: 0.022948s (num_starts 10; 0.0023s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_initialize.: 0.023248s (num_starts 2; 0.0116s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.: 0.023843s (num_starts 2; 0.0119s/start)
tfg_preprocess.dst.llvm.foo.: 0.031303s (num_starts 1; 0.0313s/start)
tfg::tfg_preprocess.: 0.035241s (num_starts 2; 0.0176s/start)
get_function_tfg_map.foo.: 0.03916s (num_starts 1; 0.0392s/start)
avail_exprs_val_t::generate_vals_from_gen_set.: 0.04236s (num_starts 236; 0.0002s/start)
get_tfg.: 0.046804s (num_starts 2; 0.0234s/start)
get_function_tfg_map.: 0.046901s (num_starts 2; 0.0235s/start)
create_sp_version_relations_lattice_at_pc.: 0.054942s (num_starts 291; 0.0002s/start)
main.2.: 0.063267s (num_starts 1; 0.0633s/start)
populate_locs_potentially_modified_on_edge.: 0.066079s (num_starts 6; 0.0110s/start)
compute_new_lr_status_on_locs.: 0.069754s (num_starts 236; 0.0003s/start)
graph_per_loc_dfa_val_t<avail_exprs_val_t>::meet.: 0.074117s (num_starts 237; 0.0003s/start)
expr_label_memlabels_using_memlabel_map_visitor.simplify.: 0.084873s (num_starts 2786; 0.0000s/start)
populate_auxilliary_structures_dependent_on_locs.: 0.087987s (num_starts 6; 0.0147s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.model.: 0.08804s (num_starts 2786; 0.0000s/start)
avail_exprs_create_submap.: 0.107294s (num_starts 710; 0.0002s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.: 0.107778s (num_starts 2786; 0.0000s/start)
liveness_analysis_conservative::xfer_and_meet.: 0.111341s (num_starts 264; 0.0004s/start)
ftmap_pointsto_analysis_combo_dfa_t.alias_val_xfer_and_meet.: 0.123927s (num_starts 238; 0.0005s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::avail_exprs_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.132278s (num_starts 238; 0.0006s/start)
populate_loc_liveness.: 0.138883s (num_starts 4; 0.0347s/start)
expr_do_simplify_using_lhs_set_and_precond.: 0.208856s (num_starts 243; 0.0009s/start)
tfg_postprocess_after_pointsto_analysis.: 0.285343s (num_starts 2; 0.1427s/start)
ftmap_pointsto_analysis_combo_dfa_t.ftmap_dfa_flow_insensitive_xfer_and_meet.: 0.32138s (num_starts 234; 0.0014s/start)
tfg_llvm_t::tfg_postprocess_after_pointsto_analysis.: 0.326491s (num_starts 2; 0.1632s/start)
ftmap_run_pointsto_analysis.: 0.747571s (num_starts 1; 0.7476s/start)
parse_consts_db.: 6.1642s (num_starts 1; 6.1642s/start)
main.: 7.07523s (num_starts 1; 7.0752s/start)

counters:

flags:

info:


<MSG>0:00 : Converting Spec to Transfer Function Graph (TFG)...</MSG>
<MSG>0:07 : Converting C source code to LLVM IR bitcode...</MSG>
<MSG>0:13 : Converting LLVM IR bitcode to Transfer Function Graph (TFG)...</MSG>
<MSG>0:20 : Searching for equivalence at unroll factor 1</MSG>
<MSG>0:20 : Reading in SPEC-LLVM I/O specification from file fcall5.iospecs...</MSG>
<MSG>0:21 : Computing equivalence for function: bar...</MSG>
<MSG>0:21 : Constructing SSA for SPEC TFG...</MSG>
<MSG>0:21 : Constructing SSA for LLVM TFG...</MSG>
<MSG>0:21 : Finished SSA construction for both TFGs...</MSG>
<MSG>0:21 : Computing equivalence of the two TFGs ( SPEC and LLVM )...</MSG>
<MSG>0:21 : Chose (after CE propagation) product-TFG bar (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: nullptr
  src-full-pathset: nullptr
<MSG>0:22 : product-TFG bar: Enumerating correlations for L0%0%d=>Lentry%1%fcallStart[mu 1, delta {1,0}] starting at L0%0%d_L0%0%d
</MSG>
<MSG>0:22 : Considering 1 paths to src pc L4%1%fcallStart as correlation candidates for L0%0%d=>Lentry%1%fcallStart[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:22 : Attempting correlation of src pathset L0%0%d=>L4%1%fcallStart[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lentry%1%fcallStart[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:22 : Found 1 feasible correlations for paths to src pc L4%1%fcallStart as correlation candidates for L0%0%d=>Lentry%1%fcallStart[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:22 : product-TFG bar: Found 1 correlations for L0%0%d=>Lentry%1%fcallStart[mu 1, delta {1,0}] starting at L0%0%d_L0%0%d
</MSG>
<MSG>0:22 : product-TFG bar created 1 possibilities in group bar.A...</MSG>
<MSG>0:22 : Chose (for CE propagation) product-TFG bar.A1 (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lentry%1%fcallStart[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L4%1%fcallStart[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:22 : Finished adding lsprel-assumes for allocation to the product-TFG bar.A1...</MSG>
<MSG>0:22 : Finished adding lsprel-assumes for deallocation to the product-TFG bar.A1...</MSG>
<MSG>0:22 : Creating ssa-path for the src-tfg path L0%0%d --> L4%1%fcallStart ending at L4%1%fcallStart_Lentry%1%fcallStart
</MSG>
<MSG>0:22 : Adding a CG edge composition using the src path L0%0%d --> L4%1%fcallStart and dst path L0%0%d --> Lentry%1%fcallStart</MSG>
<MSG>0:22 : Identifying common alloc-deallocs in the src path L0%0%d --> L4%1%fcallStart and dst path L0%0%d --> Lentry%1%fcallStart
</MSG>
<MSG>0:22 : Identified no common alloc-deallocs in the src path L0%0%d --> L4%1%fcallStart and dst path L0%0%d --> Lentry%1%fcallStart</MSG>
<MSG>0:22 : Adding new edge to the product-TFG bar.A1 for fromPC L0%0%d_L0%0%d and toPC L4%1%fcallStart_Lentry%1%fcallStart, src path L0%0%d --> L4%1%fcallStart and dst path L0%0%d --> Lentry%1%fcallStart...</MSG>
<MSG>0:22 : bar.A1: Updating dst fcall edge using src fcall edge for toPC L4%1%fcallStart_Lentry%1%fcallStart...</MSG>
<MSG>0:22 : bar.A1: Computing loop hoisting select expressions at toPC L4%1%fcallStart_Lentry%1%fcallStart...</MSG>
<MSG>0:22 : bar.A1: Computing loop hoisting non-linear expressions at toPC L4%1%fcallStart_Lentry%1%fcallStart...</MSG>
<MSG>0:22 : bar.A1: Adding node L4%1%fcallStart_Lentry%1%fcallStart to the product-TFG...</MSG>
<MSG>0:22 : bar.A1: Getting alloca-ptrs on edge L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart...</MSG>
<MSG>0:22 : bar.A1: Found no alloca-ptrs on edge L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart...</MSG>
<MSG>0:22 : bar.A1: Adding edge L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart...</MSG>
<MSG>0:22 : bar.A1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:22 : bar.A1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:22 : bar.A1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:22 : bar.A1: Propagated 2 out of 2 counter-examples across edge L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart</MSG>
<MSG>0:22 : bar.A1: Added the 2 propagated CEs at PC L4%1%fcallStart_Lentry%1%fcallStart and propagated further.
</MSG>
<MSG>0:22 : bar.A1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:22 : bar.A1: Finished executing CG's add edge function...</MSG>
<MSG>0:22 : bar.A1: Computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart...</MSG>
<MSG>0:22 : bar.A1: Done computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart...</MSG>
<MSG>0:22 : Done adding new edge to the product-TFG bar.A1 for fromPC L0%0%d_L0%0%d and toPC L4%1%fcallStart_Lentry%1%fcallStart, src path L0%0%d --> L4%1%fcallStart and dst path L0%0%d --> Lentry%1%fcallStart...</MSG>
<MSG>0:22 : Done adding a CG edge composition using the src path L0%0%d --> L4%1%fcallStart and dst path L0%0%d --> Lentry%1%fcallStart</MSG>
<MSG>0:22 : Added correlation to the product-TFG bar.A1 (d:0, s:0, sp: 0) and created a correlation entry...</MSG>
<MSG>0:22 : Chose (after CE propagation) product-TFG bar.A1 (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart (C L0%0%d => C L4%1%fcallStart at mu 1 delta {1,0}, A L0%0%d => A (line 12 at column 10) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L4%1%fcallStart_Lentry%1%fcallStart (C L4%1%fcallStart, A (line 12 at column 10))
                L4%1%fcallStart_Lentry%1%fcallStart [inductive-invariants] contains 1 counterexamples (for correlating 4 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lentry%1%fcallStart[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L4%1%fcallStart[mu 1, delta {1,0}]
<MSG>0:22 : bar.A1: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart and other downstream edges that change due to it...</MSG>
<MSG>0:22 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart...</MSG>
<MSG>0:22 : bar.A1: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart) ...</MSG>
<MSG>0:22 : bar.A1: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart), result: unchanged</MSG>
<MSG>0:22 : bar.A1: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>0:22 : bar.A1: Relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart) ...</MSG>
<MSG>0:22 : bar.A1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart)...</MSG>
<MSG>0:22 : bar.A1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:22 : bar.A1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 4 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart)...</MSG>
<MSG>0:29 : bar.A1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart). changed = 1 proof-stats=dht15-prove_trivial0-prove15...</MSG>
<MSG>0:29 : bar.A1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 10 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart)...</MSG>
<MSG>0:51 : bar.A1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart). changed = 1 proof-stats=dht11-prove_trivial0-prove11...</MSG>
<MSG>0:51 : bar.A1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart)...</MSG>
<MSG>0:51 : bar.A1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:51 : bar.A1: Done relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart), result: changed ...</MSG>
<MSG>0:51 : bar.A1: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart), result: changed( 0, 1 ) ...</MSG>
<MSG>0:51 : bar.A1 (d:0, s:0, sp: 0): checked newly added edge and inferred invariants...</MSG>
<MSG>0:51 : bar.A1 (d:0, s:0, sp: 0): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:51 : product-TFG bar.A1: Enumerating correlations for Lentry%1%fcallStart=>Lentry%1%fcallEnd[mu 1, delta {1,0}] starting at L4%1%fcallStart_Lentry%1%fcallStart
</MSG>
<MSG>0:51 : Considering 1 paths to src pc L4%1%fcallEnd as correlation candidates for Lentry%1%fcallStart=>Lentry%1%fcallEnd[mu 1, delta {1,0}] at L4%1%fcallStart_Lentry%1%fcallStart
</MSG>
<MSG>0:51 : Attempting correlation of src pathset L4%1%fcallStart=>L4%1%fcallEnd[mu 1, delta {1,0}] as correlation candidate for Lentry%1%fcallStart=>Lentry%1%fcallEnd[mu 1, delta {1,0}] at L4%1%fcallStart_Lentry%1%fcallStart
</MSG>
<MSG>0:51 : Found 1 feasible correlations for paths to src pc L4%1%fcallEnd as correlation candidates for Lentry%1%fcallStart=>Lentry%1%fcallEnd[mu 1, delta {1,0}] at L4%1%fcallStart_Lentry%1%fcallStart
</MSG>
<MSG>0:51 : product-TFG bar.A1: Found 1 correlations for Lentry%1%fcallStart=>Lentry%1%fcallEnd[mu 1, delta {1,0}] starting at L4%1%fcallStart_Lentry%1%fcallStart
</MSG>
<MSG>0:51 : product-TFG bar.A1 created 1 possibilities in group bar.A1.B...</MSG>
<MSG>0:51 : Chose (for CE propagation) product-TFG bar.A1.B1 (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart (C L0%0%d => C L4%1%fcallStart at mu 1 delta {1,0}, A L0%0%d => A (line 12 at column 10) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L4%1%fcallStart_Lentry%1%fcallStart (C L4%1%fcallStart, A (line 12 at column 10))
                L4%1%fcallStart_Lentry%1%fcallStart [inductive-invariants] contains 22 counterexamples (for correlating 4 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lentry%1%fcallStart=>Lentry%1%fcallEnd[mu 1, delta {1,0}]
  src-full-pathset: L4%1%fcallStart=>L4%1%fcallEnd[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:51 : Finished adding lsprel-assumes for allocation to the product-TFG bar.A1.B1...</MSG>
<MSG>0:51 : Finished adding lsprel-assumes for deallocation to the product-TFG bar.A1.B1...</MSG>
<MSG>0:51 : Creating ssa-path for the src-tfg path L4%1%fcallStart --> L4%1%fcallEnd ending at L4%1%fcallEnd_Lentry%1%fcallEnd
</MSG>
<MSG>0:51 : Adding a CG edge composition using the src path L4%1%fcallStart --> L4%1%fcallEnd and dst path Lentry%1%fcallStart --> Lentry%1%fcallEnd</MSG>
<MSG>0:51 : Identifying common alloc-deallocs in the src path L4%1%fcallStart --> L4%1%fcallEnd and dst path Lentry%1%fcallStart --> Lentry%1%fcallEnd
</MSG>
<MSG>0:51 : Identified no common alloc-deallocs in the src path L4%1%fcallStart --> L4%1%fcallEnd and dst path Lentry%1%fcallStart --> Lentry%1%fcallEnd</MSG>
<MSG>0:51 : Adding new edge to the product-TFG bar.A1.B1 for fromPC L4%1%fcallStart_Lentry%1%fcallStart and toPC L4%1%fcallEnd_Lentry%1%fcallEnd, src path L4%1%fcallStart --> L4%1%fcallEnd and dst path Lentry%1%fcallStart --> Lentry%1%fcallEnd...</MSG>
<MSG>0:51 : bar.A1.B1: Computing loop hoisting select expressions at toPC L4%1%fcallEnd_Lentry%1%fcallEnd...</MSG>
<MSG>0:51 : bar.A1.B1: Computing loop hoisting non-linear expressions at toPC L4%1%fcallEnd_Lentry%1%fcallEnd...</MSG>
<MSG>0:51 : bar.A1.B1: Adding node L4%1%fcallEnd_Lentry%1%fcallEnd to the product-TFG...</MSG>
<MSG>0:51 : bar.A1.B1: Getting alloca-ptrs on edge L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd...</MSG>
<MSG>0:51 : bar.A1.B1: Found no alloca-ptrs on edge L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd...</MSG>
<MSG>0:51 : bar.A1.B1: Adding edge L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd...</MSG>
<MSG>0:51 : bar.A1.B1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:51 : bar.A1.B1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:51 : bar.A1.B1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:51 : bar.A1.B1: Propagated 22 out of 22 counter-examples across edge L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd</MSG>
<MSG>0:51 : bar.A1.B1: Added the 22 propagated CEs at PC L4%1%fcallEnd_Lentry%1%fcallEnd and propagated further.
</MSG>
<MSG>0:51 : bar.A1.B1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:51 : bar.A1.B1: Finished executing CG's add edge function...</MSG>
<MSG>0:51 : bar.A1.B1: Computing CG regions after the addition of the edge L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd...</MSG>
<MSG>0:51 : bar.A1.B1: Done computing CG regions after the addition of the edge L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd...</MSG>
<MSG>0:51 : Done adding new edge to the product-TFG bar.A1.B1 for fromPC L4%1%fcallStart_Lentry%1%fcallStart and toPC L4%1%fcallEnd_Lentry%1%fcallEnd, src path L4%1%fcallStart --> L4%1%fcallEnd and dst path Lentry%1%fcallStart --> Lentry%1%fcallEnd...</MSG>
<MSG>0:51 : Done adding a CG edge composition using the src path L4%1%fcallStart --> L4%1%fcallEnd and dst path Lentry%1%fcallStart --> Lentry%1%fcallEnd</MSG>
<MSG>0:51 : Added correlation to the product-TFG bar.A1.B1 (d:0, s:0, sp: 0) and created a correlation entry...</MSG>
<MSG>0:51 : Chose (after CE propagation) product-TFG bar.A1.B1 (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart (C L0%0%d => C L4%1%fcallStart at mu 1 delta {1,0}, A L0%0%d => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd (C L4%1%fcallStart => C L4%1%fcallEnd at mu 1 delta {1,0}, A (line 12 at column 10) => A (line 12 at column 10) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L4%1%fcallStart_Lentry%1%fcallStart (C L4%1%fcallStart, A (line 12 at column 10))
                L4%1%fcallStart_Lentry%1%fcallStart [inductive-invariants] contains 22 counterexamples (for correlating 4 bv exprs)
            L4%1%fcallEnd_Lentry%1%fcallEnd (C L4%1%fcallEnd, A (line 12 at column 10))
                L4%1%fcallEnd_Lentry%1%fcallEnd [inductive-invariants] contains 16 counterexamples (for correlating 5 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lentry%1%fcallStart=>Lentry%1%fcallEnd[mu 1, delta {1,0}]
  src-full-pathset: L4%1%fcallStart=>L4%1%fcallEnd[mu 1, delta {1,0}]
<MSG>0:51 : bar.A1.B1: Updating invariants over the newly added edges in edge composition L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd and other downstream edges that change due to it...</MSG>
<MSG>0:51 : Constructed infer_invariants_dfa with initial worklist L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd...</MSG>
<MSG>0:51 : bar.A1.B1: Relaxing dst graph's memlabels for edge composition (L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd) ...</MSG>
<MSG>0:51 : bar.A1.B1: Done relaxing dst graph's memlabels for edge composition (L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd), result: unchanged</MSG>
<MSG>0:51 : bar.A1.B1: Checking well-formedness assertions on outgoing edges from L4%1%fcallStart_Lentry%1%fcallStart ...</MSG>
<MSG>0:51 : bar.A1.B1: Relaxing invariants across the edge composition (L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd) ...</MSG>
<MSG>0:51 : bar.A1.B1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd)...</MSG>
<MSG>0:51 : bar.A1.B1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:51 : bar.A1.B1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 5 exprs and 16 CEs across the edge composition (L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd)...</MSG>
<MSG>0:51 : bar.A1.B1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:51 : bar.A1.B1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 30 exprs and 1 CEs across the edge composition (L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd)...</MSG>
<MSG>1:21 : bar.A1.B1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd). changed = 1 proof-stats=dht31-prove_trivial9-prove22...</MSG>
<MSG>1:21 : bar.A1.B1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd)...</MSG>
<MSG>1:21 : bar.A1.B1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:21 : bar.A1.B1: Done relaxing invariants across the edge composition (L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd), result: changed ...</MSG>
<MSG>1:21 : bar.A1.B1: Done relaxing memlabels and invariants across the edge composition (L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd), result: changed( 0, 1 ) ...</MSG>
<MSG>1:21 : bar.A1.B1 (d:0, s:0, sp: 0): checked newly added edge and inferred invariants...</MSG>
<MSG>1:21 : bar.A1.B1 (d:0, s:0, sp: 0): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>1:21 : product-TFG bar.A1.B1: Enumerating correlations for Lentry%1%fcallEnd=>Lentry%2%fcallStart[mu 1, delta {1,0}] starting at L4%1%fcallEnd_Lentry%1%fcallEnd
</MSG>
<MSG>1:21 : Considering 1 paths to src pc L4%2%fcallStart as correlation candidates for Lentry%1%fcallEnd=>Lentry%2%fcallStart[mu 1, delta {1,0}] at L4%1%fcallEnd_Lentry%1%fcallEnd
</MSG>
<MSG>1:21 : Attempting correlation of src pathset L4%1%fcallEnd=>L4%2%fcallStart[mu 1, delta {1,0}] as correlation candidate for Lentry%1%fcallEnd=>Lentry%2%fcallStart[mu 1, delta {1,0}] at L4%1%fcallEnd_Lentry%1%fcallEnd
</MSG>
<MSG>1:21 : Found 1 feasible correlations for paths to src pc L4%2%fcallStart as correlation candidates for Lentry%1%fcallEnd=>Lentry%2%fcallStart[mu 1, delta {1,0}] at L4%1%fcallEnd_Lentry%1%fcallEnd
</MSG>
<MSG>1:21 : product-TFG bar.A1.B1: Found 1 correlations for Lentry%1%fcallEnd=>Lentry%2%fcallStart[mu 1, delta {1,0}] starting at L4%1%fcallEnd_Lentry%1%fcallEnd
</MSG>
<MSG>1:21 : product-TFG bar.A1.B1 created 1 possibilities in group bar.A1.B1.C...</MSG>
<MSG>1:21 : Chose (for CE propagation) product-TFG bar.A1.B1.C1 (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart (C L0%0%d => C L4%1%fcallStart at mu 1 delta {1,0}, A L0%0%d => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd (C L4%1%fcallStart => C L4%1%fcallEnd at mu 1 delta {1,0}, A (line 12 at column 10) => A (line 12 at column 10) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L4%1%fcallStart_Lentry%1%fcallStart (C L4%1%fcallStart, A (line 12 at column 10))
                L4%1%fcallStart_Lentry%1%fcallStart [inductive-invariants] contains 22 counterexamples (for correlating 4 bv exprs)
            L4%1%fcallEnd_Lentry%1%fcallEnd (C L4%1%fcallEnd, A (line 12 at column 10))
                L4%1%fcallEnd_Lentry%1%fcallEnd [inductive-invariants] contains 17 counterexamples (for correlating 5 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lentry%1%fcallEnd=>Lentry%2%fcallStart[mu 1, delta {1,0}]
  src-full-pathset: L4%1%fcallEnd=>L4%2%fcallStart[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>1:21 : Finished adding lsprel-assumes for allocation to the product-TFG bar.A1.B1.C1...</MSG>
<MSG>1:21 : Finished adding lsprel-assumes for deallocation to the product-TFG bar.A1.B1.C1...</MSG>
<MSG>1:21 : Creating ssa-path for the src-tfg path L4%1%fcallEnd --> L4%2%fcallStart ending at L4%2%fcallStart_Lentry%2%fcallStart
</MSG>
<MSG>1:21 : Adding a CG edge composition using the src path L4%1%fcallEnd --> L4%2%fcallStart and dst path Lentry%1%fcallEnd --> Lentry%2%fcallStart</MSG>
<MSG>1:21 : Identifying common alloc-deallocs in the src path L4%1%fcallEnd --> L4%2%fcallStart and dst path Lentry%1%fcallEnd --> Lentry%2%fcallStart
</MSG>
<MSG>1:21 : Identified no common alloc-deallocs in the src path L4%1%fcallEnd --> L4%2%fcallStart and dst path Lentry%1%fcallEnd --> Lentry%2%fcallStart</MSG>
<MSG>1:21 : Adding new edge to the product-TFG bar.A1.B1.C1 for fromPC L4%1%fcallEnd_Lentry%1%fcallEnd and toPC L4%2%fcallStart_Lentry%2%fcallStart, src path L4%1%fcallEnd --> L4%2%fcallStart and dst path Lentry%1%fcallEnd --> Lentry%2%fcallStart...</MSG>
<MSG>1:21 : bar.A1.B1.C1: Updating dst fcall edge using src fcall edge for toPC L4%2%fcallStart_Lentry%2%fcallStart...</MSG>
<MSG>1:21 : bar.A1.B1.C1: Computing loop hoisting select expressions at toPC L4%2%fcallStart_Lentry%2%fcallStart...</MSG>
<MSG>1:21 : bar.A1.B1.C1: Computing loop hoisting non-linear expressions at toPC L4%2%fcallStart_Lentry%2%fcallStart...</MSG>
<MSG>1:21 : bar.A1.B1.C1: Adding node L4%2%fcallStart_Lentry%2%fcallStart to the product-TFG...</MSG>
<MSG>1:21 : bar.A1.B1.C1: Getting alloca-ptrs on edge L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart...</MSG>
<MSG>1:21 : bar.A1.B1.C1: Found no alloca-ptrs on edge L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart...</MSG>
<MSG>1:21 : bar.A1.B1.C1: Adding edge L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart...</MSG>
<MSG>1:21 : bar.A1.B1.C1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>1:21 : bar.A1.B1.C1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>1:21 : bar.A1.B1.C1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>1:21 : bar.A1.B1.C1: Propagated 0 out of 17 counter-examples across edge L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart</MSG>
<MSG>1:21 : bar.A1.B1.C1: Added the 0 propagated CEs at PC L4%2%fcallStart_Lentry%2%fcallStart and propagated further.
</MSG>
<MSG>1:21 : bar.A1.B1.C1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>1:21 : bar.A1.B1.C1: Finished executing CG's add edge function...</MSG>
<MSG>1:21 : bar.A1.B1.C1: Computing CG regions after the addition of the edge L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart...</MSG>
<MSG>1:21 : bar.A1.B1.C1: Done computing CG regions after the addition of the edge L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart...</MSG>
<MSG>1:21 : Done adding new edge to the product-TFG bar.A1.B1.C1 for fromPC L4%1%fcallEnd_Lentry%1%fcallEnd and toPC L4%2%fcallStart_Lentry%2%fcallStart, src path L4%1%fcallEnd --> L4%2%fcallStart and dst path Lentry%1%fcallEnd --> Lentry%2%fcallStart...</MSG>
<MSG>1:21 : Done adding a CG edge composition using the src path L4%1%fcallEnd --> L4%2%fcallStart and dst path Lentry%1%fcallEnd --> Lentry%2%fcallStart</MSG>
<MSG>1:21 : Added correlation to the product-TFG bar.A1.B1.C1 (d:0, s:0, sp: 0) and created a correlation entry...</MSG>
<MSG>1:21 : Chose (after CE propagation) product-TFG bar.A1.B1.C1 (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart (C L0%0%d => C L4%1%fcallStart at mu 1 delta {1,0}, A L0%0%d => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd (C L4%1%fcallStart => C L4%1%fcallEnd at mu 1 delta {1,0}, A (line 12 at column 10) => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart (C L4%1%fcallEnd => C L4%2%fcallStart at mu 1 delta {1,0}, A (line 12 at column 10) => A (line 12 at column 10) at mu 1 delta {1,0})
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L4%1%fcallStart_Lentry%1%fcallStart (C L4%1%fcallStart, A (line 12 at column 10))
                L4%1%fcallStart_Lentry%1%fcallStart [inductive-invariants] contains 22 counterexamples (for correlating 4 bv exprs)
            L4%1%fcallEnd_Lentry%1%fcallEnd (C L4%1%fcallEnd, A (line 12 at column 10))
                L4%1%fcallEnd_Lentry%1%fcallEnd [inductive-invariants] contains 17 counterexamples (for correlating 5 bv exprs)
            L4%2%fcallStart_Lentry%2%fcallStart (C L4%2%fcallStart, A (line 12 at column 10))
                L4%2%fcallStart_Lentry%2%fcallStart [inductive-invariants] contains 0 counterexamples (for correlating 5 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lentry%1%fcallEnd=>Lentry%2%fcallStart[mu 1, delta {1,0}]
  src-full-pathset: L4%1%fcallEnd=>L4%2%fcallStart[mu 1, delta {1,0}]
<MSG>1:21 : bar.A1.B1.C1: Updating invariants over the newly added edges in edge composition L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart and other downstream edges that change due to it...</MSG>
<MSG>1:21 : Constructed infer_invariants_dfa with initial worklist L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart...</MSG>
<MSG>1:21 : bar.A1.B1.C1: Relaxing dst graph's memlabels for edge composition (L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart) ...</MSG>
<MSG>1:21 : bar.A1.B1.C1: Done relaxing dst graph's memlabels for edge composition (L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart), result: unchanged</MSG>
<MSG>1:21 : bar.A1.B1.C1: Checking well-formedness assertions on outgoing edges from L4%1%fcallEnd_Lentry%1%fcallEnd ...</MSG>
<MSG>1:22 : bar.A1.B1.C1: Relaxing invariants across the edge composition (L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart) ...</MSG>
<MSG>1:22 : bar.A1.B1.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart)...</MSG>
<MSG>1:22 : bar.A1.B1.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart). changed = 1 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>1:22 : bar.A1.B1.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 5 exprs and 1 CEs across the edge composition (L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart)...</MSG>
<MSG>1:25 : bar.A1.B1.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart). changed = 1 proof-stats=dht8-prove_trivial1-prove7...</MSG>
<MSG>1:25 : bar.A1.B1.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 39 exprs and 1 CEs across the edge composition (L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart)...</MSG>
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710320/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.0.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710320/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.0.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710320/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.1.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710320/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.1.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710320/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.4.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710320/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.2.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710320/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.8.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710320/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.3.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710320/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.11.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710320/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.4.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710320/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.14.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710320/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.5.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710320/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.16.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710320/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.6.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710320/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.19.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710320/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.7.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710320/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.20.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710320/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.8.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710320/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.26.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710320/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.9.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710320/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.27.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710320/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.10.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710320/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.28.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710320/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.11.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710320/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.30.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710320/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.12.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710320/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.31.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710320/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.13.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710320/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.32.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710320/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.14.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710320/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.33.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710320/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.15.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710320/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.34.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710320/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.16.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710320/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.35.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710320/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.17.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710320/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.36.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710320/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.18.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710320/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.37.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710320/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.19.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710320/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.38.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710320/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.20.gz
<MSG>2:49 : bar.A1.B1.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart). changed = 1 proof-stats=dht40-prove_trivial9-prove31...</MSG>
<MSG>2:49 : bar.A1.B1.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart)...</MSG>
<MSG>2:49 : bar.A1.B1.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:49 : bar.A1.B1.C1: Done relaxing invariants across the edge composition (L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart), result: changed ...</MSG>
<MSG>2:49 : bar.A1.B1.C1: Done relaxing memlabels and invariants across the edge composition (L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart), result: changed( 0, 1 ) ...</MSG>
<MSG>2:49 : bar.A1.B1.C1 (d:0, s:0, sp: 0): checked newly added edge and inferred invariants...</MSG>
<MSG>2:49 : bar.A1.B1.C1 (d:0, s:0, sp: 0): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>2:49 : product-TFG bar.A1.B1.C1: Enumerating correlations for Lentry%2%fcallStart=>Lentry%2%fcallEnd[mu 1, delta {1,0}] starting at L4%2%fcallStart_Lentry%2%fcallStart
</MSG>
<MSG>2:49 : Considering 1 paths to src pc L4%2%fcallEnd as correlation candidates for Lentry%2%fcallStart=>Lentry%2%fcallEnd[mu 1, delta {1,0}] at L4%2%fcallStart_Lentry%2%fcallStart
</MSG>
<MSG>2:49 : Attempting correlation of src pathset L4%2%fcallStart=>L4%2%fcallEnd[mu 1, delta {1,0}] as correlation candidate for Lentry%2%fcallStart=>Lentry%2%fcallEnd[mu 1, delta {1,0}] at L4%2%fcallStart_Lentry%2%fcallStart
</MSG>
<MSG>2:49 : Found 1 feasible correlations for paths to src pc L4%2%fcallEnd as correlation candidates for Lentry%2%fcallStart=>Lentry%2%fcallEnd[mu 1, delta {1,0}] at L4%2%fcallStart_Lentry%2%fcallStart
</MSG>
<MSG>2:49 : product-TFG bar.A1.B1.C1: Found 1 correlations for Lentry%2%fcallStart=>Lentry%2%fcallEnd[mu 1, delta {1,0}] starting at L4%2%fcallStart_Lentry%2%fcallStart
</MSG>
<MSG>2:49 : product-TFG bar.A1.B1.C1 created 1 possibilities in group bar.A1.B1.C1.D...</MSG>
<MSG>2:49 : Chose (for CE propagation) product-TFG bar.A1.B1.C1.D1 (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart (C L0%0%d => C L4%1%fcallStart at mu 1 delta {1,0}, A L0%0%d => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd (C L4%1%fcallStart => C L4%1%fcallEnd at mu 1 delta {1,0}, A (line 12 at column 10) => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart (C L4%1%fcallEnd => C L4%2%fcallStart at mu 1 delta {1,0}, A (line 12 at column 10) => A (line 12 at column 10) at mu 1 delta {1,0})
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L4%1%fcallStart_Lentry%1%fcallStart (C L4%1%fcallStart, A (line 12 at column 10))
                L4%1%fcallStart_Lentry%1%fcallStart [inductive-invariants] contains 22 counterexamples (for correlating 4 bv exprs)
            L4%1%fcallEnd_Lentry%1%fcallEnd (C L4%1%fcallEnd, A (line 12 at column 10))
                L4%1%fcallEnd_Lentry%1%fcallEnd [inductive-invariants] contains 17 counterexamples (for correlating 5 bv exprs)
            L4%2%fcallStart_Lentry%2%fcallStart (C L4%2%fcallStart, A (line 12 at column 10))
                L4%2%fcallStart_Lentry%2%fcallStart [inductive-invariants] contains 10 counterexamples (for correlating 5 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lentry%2%fcallStart=>Lentry%2%fcallEnd[mu 1, delta {1,0}]
  src-full-pathset: L4%2%fcallStart=>L4%2%fcallEnd[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>2:49 : Finished adding lsprel-assumes for allocation to the product-TFG bar.A1.B1.C1.D1...</MSG>
<MSG>2:49 : Finished adding lsprel-assumes for deallocation to the product-TFG bar.A1.B1.C1.D1...</MSG>
<MSG>2:49 : Creating ssa-path for the src-tfg path L4%2%fcallStart --> L4%2%fcallEnd ending at L4%2%fcallEnd_Lentry%2%fcallEnd
</MSG>
<MSG>2:49 : Adding a CG edge composition using the src path L4%2%fcallStart --> L4%2%fcallEnd and dst path Lentry%2%fcallStart --> Lentry%2%fcallEnd</MSG>
<MSG>2:49 : Identifying common alloc-deallocs in the src path L4%2%fcallStart --> L4%2%fcallEnd and dst path Lentry%2%fcallStart --> Lentry%2%fcallEnd
</MSG>
<MSG>2:49 : Identified no common alloc-deallocs in the src path L4%2%fcallStart --> L4%2%fcallEnd and dst path Lentry%2%fcallStart --> Lentry%2%fcallEnd</MSG>
<MSG>2:49 : Adding new edge to the product-TFG bar.A1.B1.C1.D1 for fromPC L4%2%fcallStart_Lentry%2%fcallStart and toPC L4%2%fcallEnd_Lentry%2%fcallEnd, src path L4%2%fcallStart --> L4%2%fcallEnd and dst path Lentry%2%fcallStart --> Lentry%2%fcallEnd...</MSG>
<MSG>2:49 : bar.A1.B1.C1.D1: Computing loop hoisting select expressions at toPC L4%2%fcallEnd_Lentry%2%fcallEnd...</MSG>
<MSG>2:49 : bar.A1.B1.C1.D1: Computing loop hoisting non-linear expressions at toPC L4%2%fcallEnd_Lentry%2%fcallEnd...</MSG>
<MSG>2:49 : bar.A1.B1.C1.D1: Adding node L4%2%fcallEnd_Lentry%2%fcallEnd to the product-TFG...</MSG>
<MSG>2:49 : bar.A1.B1.C1.D1: Getting alloca-ptrs on edge L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd...</MSG>
<MSG>2:49 : bar.A1.B1.C1.D1: Found no alloca-ptrs on edge L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd...</MSG>
<MSG>2:49 : bar.A1.B1.C1.D1: Adding edge L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd...</MSG>
<MSG>2:49 : bar.A1.B1.C1.D1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>2:49 : bar.A1.B1.C1.D1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>2:49 : bar.A1.B1.C1.D1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>2:49 : bar.A1.B1.C1.D1: Propagated 10 out of 10 counter-examples across edge L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd</MSG>
<MSG>2:49 : bar.A1.B1.C1.D1: Added the 10 propagated CEs at PC L4%2%fcallEnd_Lentry%2%fcallEnd and propagated further.
</MSG>
<MSG>2:49 : bar.A1.B1.C1.D1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>2:49 : bar.A1.B1.C1.D1: Finished executing CG's add edge function...</MSG>
<MSG>2:49 : bar.A1.B1.C1.D1: Computing CG regions after the addition of the edge L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd...</MSG>
<MSG>2:49 : bar.A1.B1.C1.D1: Done computing CG regions after the addition of the edge L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd...</MSG>
<MSG>2:49 : Done adding new edge to the product-TFG bar.A1.B1.C1.D1 for fromPC L4%2%fcallStart_Lentry%2%fcallStart and toPC L4%2%fcallEnd_Lentry%2%fcallEnd, src path L4%2%fcallStart --> L4%2%fcallEnd and dst path Lentry%2%fcallStart --> Lentry%2%fcallEnd...</MSG>
<MSG>2:49 : Done adding a CG edge composition using the src path L4%2%fcallStart --> L4%2%fcallEnd and dst path Lentry%2%fcallStart --> Lentry%2%fcallEnd</MSG>
<MSG>2:49 : Added correlation to the product-TFG bar.A1.B1.C1.D1 (d:0, s:0, sp: 0) and created a correlation entry...</MSG>
<MSG>2:49 : Chose (after CE propagation) product-TFG bar.A1.B1.C1.D1 (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart (C L0%0%d => C L4%1%fcallStart at mu 1 delta {1,0}, A L0%0%d => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd (C L4%1%fcallStart => C L4%1%fcallEnd at mu 1 delta {1,0}, A (line 12 at column 10) => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart (C L4%1%fcallEnd => C L4%2%fcallStart at mu 1 delta {1,0}, A (line 12 at column 10) => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd (C L4%2%fcallStart => C L4%2%fcallEnd at mu 1 delta {1,0}, A (line 12 at column 10) => A (line 12 at column 10) at mu 1 delta {1,0})
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L4%1%fcallStart_Lentry%1%fcallStart (C L4%1%fcallStart, A (line 12 at column 10))
                L4%1%fcallStart_Lentry%1%fcallStart [inductive-invariants] contains 22 counterexamples (for correlating 4 bv exprs)
            L4%1%fcallEnd_Lentry%1%fcallEnd (C L4%1%fcallEnd, A (line 12 at column 10))
                L4%1%fcallEnd_Lentry%1%fcallEnd [inductive-invariants] contains 17 counterexamples (for correlating 5 bv exprs)
            L4%2%fcallStart_Lentry%2%fcallStart (C L4%2%fcallStart, A (line 12 at column 10))
                L4%2%fcallStart_Lentry%2%fcallStart [inductive-invariants] contains 10 counterexamples (for correlating 5 bv exprs)
            L4%2%fcallEnd_Lentry%2%fcallEnd (C L4%2%fcallEnd, A (line 12 at column 10))
                L4%2%fcallEnd_Lentry%2%fcallEnd [inductive-invariants] contains 5 counterexamples (for correlating 4 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lentry%2%fcallStart=>Lentry%2%fcallEnd[mu 1, delta {1,0}]
  src-full-pathset: L4%2%fcallStart=>L4%2%fcallEnd[mu 1, delta {1,0}]
<MSG>2:49 : bar.A1.B1.C1.D1: Updating invariants over the newly added edges in edge composition L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd and other downstream edges that change due to it...</MSG>
<MSG>2:49 : Constructed infer_invariants_dfa with initial worklist L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd...</MSG>
<MSG>2:49 : bar.A1.B1.C1.D1: Relaxing dst graph's memlabels for edge composition (L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd) ...</MSG>
<MSG>2:49 : bar.A1.B1.C1.D1: Done relaxing dst graph's memlabels for edge composition (L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd), result: unchanged</MSG>
<MSG>2:49 : bar.A1.B1.C1.D1: Checking well-formedness assertions on outgoing edges from L4%2%fcallStart_Lentry%2%fcallStart ...</MSG>
<MSG>2:49 : bar.A1.B1.C1.D1: Relaxing invariants across the edge composition (L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd) ...</MSG>
<MSG>2:49 : bar.A1.B1.C1.D1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd)...</MSG>
<MSG>2:49 : bar.A1.B1.C1.D1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:49 : bar.A1.B1.C1.D1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 4 exprs and 5 CEs across the edge composition (L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd)...</MSG>
<MSG>2:49 : bar.A1.B1.C1.D1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:49 : bar.A1.B1.C1.D1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 53 exprs and 1 CEs across the edge composition (L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd)...</MSG>
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710320/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.6.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710320/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.path_hashdcd4e23dd6884c66d0d19d178d94b555.pre0.0.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710320/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.7.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710320/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.path_hashdcd4e23dd6884c66d0d19d178d94b555.pre0.1.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710320/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.8.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710320/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.path_hashdcd4e23dd6884c66d0d19d178d94b555.pre0.2.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710320/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.11.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710320/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.path_hashdcd4e23dd6884c66d0d19d178d94b555.pre0.3.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710320/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.19.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710320/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.path_hashdcd4e23dd6884c66d0d19d178d94b555.pre0.4.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710320/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.24.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710320/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.path_hashdcd4e23dd6884c66d0d19d178d94b555.pre0.5.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710320/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.26.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710320/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.path_hashdcd4e23dd6884c66d0d19d178d94b555.pre0.6.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710320/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.29.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710320/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.path_hashdcd4e23dd6884c66d0d19d178d94b555.pre0.7.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710320/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.31.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710320/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.path_hashdcd4e23dd6884c66d0d19d178d94b555.pre0.8.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710320/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.32.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710320/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.path_hashdcd4e23dd6884c66d0d19d178d94b555.pre0.9.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710320/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.35.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710320/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.path_hashdcd4e23dd6884c66d0d19d178d94b555.pre0.10.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710320/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.36.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710320/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.path_hashdcd4e23dd6884c66d0d19d178d94b555.pre0.11.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710320/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.37.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710320/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.path_hashdcd4e23dd6884c66d0d19d178d94b555.pre0.12.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710320/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.41.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710320/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.path_hashdcd4e23dd6884c66d0d19d178d94b555.pre0.13.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710320/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.47.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710320/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.path_hashdcd4e23dd6884c66d0d19d178d94b555.pre0.14.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710320/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.48.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710320/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.path_hashdcd4e23dd6884c66d0d19d178d94b555.pre0.15.gz
<MSG>3:51 : bar.A1.B1.C1.D1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd). changed = 1 proof-stats=dht54-prove_trivial15-prove39...</MSG>
<MSG>3:51 : bar.A1.B1.C1.D1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd)...</MSG>
<MSG>3:51 : bar.A1.B1.C1.D1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:51 : bar.A1.B1.C1.D1: Done relaxing invariants across the edge composition (L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd), result: changed ...</MSG>
<MSG>3:51 : bar.A1.B1.C1.D1: Done relaxing memlabels and invariants across the edge composition (L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd), result: changed( 0, 1 ) ...</MSG>
<MSG>3:51 : bar.A1.B1.C1.D1 (d:0, s:0, sp: 0): checked newly added edge and inferred invariants...</MSG>
<MSG>3:51 : bar.A1.B1.C1.D1 (d:0, s:0, sp: 0): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>3:51 : product-TFG bar.A1.B1.C1.D1: Enumerating correlations for Lentry%2%fcallEnd=>E0%0%d[mu 1, delta {1,0}] starting at L4%2%fcallEnd_Lentry%2%fcallEnd
</MSG>
<MSG>3:51 : Considering 1 paths to src pc E0%0%d as correlation candidates for Lentry%2%fcallEnd=>E0%0%d[mu 1, delta {1,0}] at L4%2%fcallEnd_Lentry%2%fcallEnd
</MSG>
<MSG>3:51 : Attempting correlation of src pathset L4%2%fcallEnd=>E0%0%d[mu 1, delta {1,0}] as correlation candidate for Lentry%2%fcallEnd=>E0%0%d[mu 1, delta {1,0}] at L4%2%fcallEnd_Lentry%2%fcallEnd
</MSG>
<MSG>3:51 : Found 1 feasible correlations for paths to src pc E0%0%d as correlation candidates for Lentry%2%fcallEnd=>E0%0%d[mu 1, delta {1,0}] at L4%2%fcallEnd_Lentry%2%fcallEnd
</MSG>
<MSG>3:51 : product-TFG bar.A1.B1.C1.D1: Found 1 correlations for Lentry%2%fcallEnd=>E0%0%d[mu 1, delta {1,0}] starting at L4%2%fcallEnd_Lentry%2%fcallEnd
</MSG>
<MSG>3:51 : product-TFG bar.A1.B1.C1.D1 created 1 possibilities in group bar.A1.B1.C1.D1.E...</MSG>
<MSG>3:51 : Chose (for CE propagation) product-TFG bar.A1.B1.C1.D1.E1 (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart (C L0%0%d => C L4%1%fcallStart at mu 1 delta {1,0}, A L0%0%d => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd (C L4%1%fcallStart => C L4%1%fcallEnd at mu 1 delta {1,0}, A (line 12 at column 10) => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart (C L4%1%fcallEnd => C L4%2%fcallStart at mu 1 delta {1,0}, A (line 12 at column 10) => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd (C L4%2%fcallStart => C L4%2%fcallEnd at mu 1 delta {1,0}, A (line 12 at column 10) => A (line 12 at column 10) at mu 1 delta {1,0})
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L4%1%fcallStart_Lentry%1%fcallStart (C L4%1%fcallStart, A (line 12 at column 10))
                L4%1%fcallStart_Lentry%1%fcallStart [inductive-invariants] contains 22 counterexamples (for correlating 4 bv exprs)
            L4%1%fcallEnd_Lentry%1%fcallEnd (C L4%1%fcallEnd, A (line 12 at column 10))
                L4%1%fcallEnd_Lentry%1%fcallEnd [inductive-invariants] contains 17 counterexamples (for correlating 5 bv exprs)
            L4%2%fcallStart_Lentry%2%fcallStart (C L4%2%fcallStart, A (line 12 at column 10))
                L4%2%fcallStart_Lentry%2%fcallStart [inductive-invariants] contains 10 counterexamples (for correlating 5 bv exprs)
            L4%2%fcallEnd_Lentry%2%fcallEnd (C L4%2%fcallEnd, A (line 12 at column 10))
                L4%2%fcallEnd_Lentry%2%fcallEnd [inductive-invariants] contains 10 counterexamples (for correlating 4 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lentry%2%fcallEnd=>E0%0%d[mu 1, delta {1,0}]
  src-full-pathset: L4%2%fcallEnd=>E0%0%d[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>3:51 : Finished adding lsprel-assumes for allocation to the product-TFG bar.A1.B1.C1.D1.E1...</MSG>
<MSG>3:51 : Finished adding lsprel-assumes for deallocation to the product-TFG bar.A1.B1.C1.D1.E1...</MSG>
<MSG>3:51 : Creating ssa-path for the src-tfg path L4%2%fcallEnd --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>3:51 : Adding a CG edge composition using the src path L4%2%fcallEnd --> E0%0%d and dst path Lentry%2%fcallEnd --> E0%0%d</MSG>
<MSG>3:51 : Identifying common alloc-deallocs in the src path L4%2%fcallEnd --> E0%0%d and dst path Lentry%2%fcallEnd --> E0%0%d
</MSG>
<MSG>3:51 : Identified no common alloc-deallocs in the src path L4%2%fcallEnd --> E0%0%d and dst path Lentry%2%fcallEnd --> E0%0%d</MSG>
<MSG>3:51 : Adding new edge to the product-TFG bar.A1.B1.C1.D1.E1 for fromPC L4%2%fcallEnd_Lentry%2%fcallEnd and toPC E0%0%d_E0%0%d, src path L4%2%fcallEnd --> E0%0%d and dst path Lentry%2%fcallEnd --> E0%0%d...</MSG>
<MSG>3:51 : bar.A1.B1.C1.D1.E1: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>3:51 : bar.A1.B1.C1.D1.E1: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>3:51 : bar.A1.B1.C1.D1.E1: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>3:51 : bar.A1.B1.C1.D1.E1: Getting alloca-ptrs on edge L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d...</MSG>
<MSG>3:51 : bar.A1.B1.C1.D1.E1: Found no alloca-ptrs on edge L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d...</MSG>
<MSG>3:51 : bar.A1.B1.C1.D1.E1: Adding edge L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d...</MSG>
<MSG>3:51 : bar.A1.B1.C1.D1.E1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>3:51 : bar.A1.B1.C1.D1.E1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>3:51 : bar.A1.B1.C1.D1.E1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>3:51 : bar.A1.B1.C1.D1.E1: Propagated 0 out of 10 counter-examples across edge L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d</MSG>
<MSG>3:51 : bar.A1.B1.C1.D1.E1: Added the 0 propagated CEs at PC E0%0%d_E0%0%d and propagated further.
</MSG>
<MSG>3:51 : bar.A1.B1.C1.D1.E1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>3:51 : bar.A1.B1.C1.D1.E1: Finished executing CG's add edge function...</MSG>
<MSG>3:51 : bar.A1.B1.C1.D1.E1: Computing CG regions after the addition of the edge L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d...</MSG>
<MSG>3:51 : bar.A1.B1.C1.D1.E1: Done computing CG regions after the addition of the edge L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d...</MSG>
<MSG>3:51 : Done adding new edge to the product-TFG bar.A1.B1.C1.D1.E1 for fromPC L4%2%fcallEnd_Lentry%2%fcallEnd and toPC E0%0%d_E0%0%d, src path L4%2%fcallEnd --> E0%0%d and dst path Lentry%2%fcallEnd --> E0%0%d...</MSG>
<MSG>3:51 : Done adding a CG edge composition using the src path L4%2%fcallEnd --> E0%0%d and dst path Lentry%2%fcallEnd --> E0%0%d</MSG>
<MSG>3:51 : Added correlation to the product-TFG bar.A1.B1.C1.D1.E1 (d:0, s:0, sp: 0) and created a correlation entry...</MSG>
<MSG>3:51 : Chose (after CE propagation) product-TFG bar.A1.B1.C1.D1.E1 (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Edges[5]: L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart (C L0%0%d => C L4%1%fcallStart at mu 1 delta {1,0}, A L0%0%d => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd (C L4%1%fcallStart => C L4%1%fcallEnd at mu 1 delta {1,0}, A (line 12 at column 10) => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart (C L4%1%fcallEnd => C L4%2%fcallStart at mu 1 delta {1,0}, A (line 12 at column 10) => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd (C L4%2%fcallStart => C L4%2%fcallEnd at mu 1 delta {1,0}, A (line 12 at column 10) => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d (C L4%2%fcallEnd => C E0%0%d at mu 1 delta {1,0}, A (line 12 at column 10) => A E0%0%d at mu 1 delta {1,0})
  Nodes[6]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L4%1%fcallStart_Lentry%1%fcallStart (C L4%1%fcallStart, A (line 12 at column 10))
                L4%1%fcallStart_Lentry%1%fcallStart [inductive-invariants] contains 22 counterexamples (for correlating 4 bv exprs)
            L4%1%fcallEnd_Lentry%1%fcallEnd (C L4%1%fcallEnd, A (line 12 at column 10))
                L4%1%fcallEnd_Lentry%1%fcallEnd [inductive-invariants] contains 17 counterexamples (for correlating 5 bv exprs)
            L4%2%fcallStart_Lentry%2%fcallStart (C L4%2%fcallStart, A (line 12 at column 10))
                L4%2%fcallStart_Lentry%2%fcallStart [inductive-invariants] contains 10 counterexamples (for correlating 5 bv exprs)
            L4%2%fcallEnd_Lentry%2%fcallEnd (C L4%2%fcallEnd, A (line 12 at column 10))
                L4%2%fcallEnd_Lentry%2%fcallEnd [inductive-invariants] contains 10 counterexamples (for correlating 4 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lentry%2%fcallEnd=>E0%0%d[mu 1, delta {1,0}]
  src-full-pathset: L4%2%fcallEnd=>E0%0%d[mu 1, delta {1,0}]
<MSG>3:51 : bar.A1.B1.C1.D1.E1: Updating invariants over the newly added edges in edge composition L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d and other downstream edges that change due to it...</MSG>
<MSG>3:51 : Constructed infer_invariants_dfa with initial worklist L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d...</MSG>
<MSG>3:51 : bar.A1.B1.C1.D1.E1: Relaxing dst graph's memlabels for edge composition (L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d) ...</MSG>
<MSG>3:51 : bar.A1.B1.C1.D1.E1: Done relaxing dst graph's memlabels for edge composition (L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d), result: unchanged</MSG>
<MSG>3:51 : bar.A1.B1.C1.D1.E1: Checking well-formedness assertions on outgoing edges from L4%2%fcallEnd_Lentry%2%fcallEnd ...</MSG>
<MSG>3:52 : bar.A1.B1.C1.D1.E1: Done relaxing memlabels and invariants across the edge composition (L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d), result: unchanged( 0, 0 ) ...</MSG>
<MSG>3:52 : bar.A1.B1.C1.D1.E1 (d:0, s:0, sp: 0): checked newly added edge and inferred invariants...</MSG>
<MSG>3:52 : bar.A1.B1.C1.D1.E1 (d:0, s:0, sp: 0): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>3:52 : Chosen product-TFG represents our required correlation graph...</MSG>
<MSG>3:52 : Checking equivalence proof...</MSG>
<MSG>3:53 : Equivalence check passed: product CFG has strong enough inductive invariants...</MSG>
CG invariants =
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L4%1%fcallStart_Lentry%1%fcallStart: (d:0, s:0, sp: 0)
  Invariant state (4 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(and(and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)))))), and(and(and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum3=/, 3), 0)), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum2=/, 3), 0)), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(and(and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum3=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin)), eq(input.dst.local./*___y___bar__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin)), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin))) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(and(and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)))))), and(and(and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum3=/, 3), 0)), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum2=/, 3), 0)), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(and(and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum3=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin)), eq(input.dst.local./*___y___bar__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin)), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.dst.llvm-%arr1 ; 3-->input.dst.llvm-%n ; 4-->input.dst.llvm-%arr2 ; 5-->input.dst.llvm-%m ; 
    2 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%arr2, 1, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr1, 1, 0)
     is_assumed_eqclass : 0
    20 visited ces:
      0.:z3v487.ce3      1.:z3v487.ce32      2.:z3v487.ce18      3.:z3.ce45      4.:z3.ce17      5.:z3.ce59      6.:z3v487.ce150      7.:z3.ce31      8.:z3.ce102      9.:z3v487.ce60      10.:z3.ce73      11.:z3.ce87      12.:z3v487.ce101      13.:z3v487.ce136      14.:z3v487.ce123      15.:z3.ce122      16.:z3v487.ce115      17.:z3v487.ce165      18.:z3.ce178      19.:z3.ce164
    eqclass 2:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [10]: 6-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141010](input.spec-%var-a2-0, map[141009](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141008](Lambda3Var, map[141007](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141006](Lambda2Var, select[141005](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141004](select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 7-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141045](input.spec-%var-a1-0, map[141044](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141043](Lambda3Var, map[141042](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141041](Lambda2Var, select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141039](bvmul(Lambda2Var, 4), select[141038](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 8-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141067](input.spec-%var-a2-0, map[141064](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141063](Lambda3Var, map[141060](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141059](Lambda2Var, select[141057](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141055](bvmul(Lambda2Var, 4), select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 9-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141956](input.spec-%var-a1-0, map[141835](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%arr1))), lambda[141008](Lambda3Var, map[141007](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141006](Lambda2Var, select[141005](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141004](select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 10-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142052](input.spec-%var-a1-0, map[142051](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%m))), lambda[141008](Lambda3Var, map[141007](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141006](Lambda2Var, select[141005](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141004](select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 11-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142047](input.spec-%var-a1-0, map[142046](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%arr2))), lambda[141008](Lambda3Var, map[141007](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141006](Lambda2Var, select[141005](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141004](select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 12-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142102](input.spec-%var-a1-0, map[142101](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142100](Lambda3Var, map[142099](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142098](Lambda2Var, select[142097](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[142096](select[141038](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 13-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142111](input.spec-%var-a2-0, map[142110](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142109](Lambda3Var, map[142108](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142107](Lambda2Var, select[142106](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[142105](bvmul(Lambda2Var, 4), select[142104](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%n, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 14-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142120](input.spec-%var-a2-0, map[142119](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142118](Lambda3Var, map[142117](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142116](Lambda2Var, select[142115](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[142114](bvmul(Lambda2Var, 4), select[142113](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%m, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 15-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142122](input.spec-%var-a2-0, map[142121](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%arr1))), lambda[141043](Lambda3Var, map[141042](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141041](Lambda2Var, select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141039](bvmul(Lambda2Var, 4), select[141038](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 
    4 preds:
      0.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142102](input.spec-%var-a1-0, map[142101](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142100](Lambda3Var, map[142099](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142098](Lambda2Var, select[142097](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[142096](select[141038](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false))))))  ==  true
      1.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141067](input.spec-%var-a2-0, map[141064](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141063](Lambda3Var, map[141060](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141059](Lambda2Var, select[141057](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141055](bvmul(Lambda2Var, 4), select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      2.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141045](input.spec-%var-a1-0, map[141044](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141043](Lambda3Var, map[141042](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141041](Lambda2Var, select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141039](bvmul(Lambda2Var, 4), select[141038](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      3.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141010](input.spec-%var-a2-0, map[141009](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141008](Lambda3Var, map[141007](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141006](Lambda2Var, select[141005](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141004](select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false))))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 3:
    smallest point cover name local-sizes-are-equal, type HOUDINI, exprs [0]: 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3

L4%1%fcallEnd_Lentry%1%fcallEnd: (d:0, s:0, sp: 0)
  Invariant state (4 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(and(and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)))))), and(and(and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum3=/, 3), 0)), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum2=/, 3), 0)), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(and(and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum3=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin)), eq(input.dst.local./*___y___bar__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin)), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin))) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(and(and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)))))), and(and(and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum3=/, 3), 0)), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum2=/, 3), 0)), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(and(and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum3=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin)), eq(input.dst.local./*___y___bar__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin)), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 3-->input.dst.llvm-%n ; 4-->input.dst.llvm-%arr2 ; 5-->input.dst.llvm-%m ; 16-->input.spec-%tmpvar-19.L4%1%fcallEnd ; 17-->input.dst.llvm-%call.Lentry%1%fcallEnd ; 
    1 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%arr2, 1, 0)
     is_assumed_eqclass : 0
    16 visited ces:
      0.:z3v487.ce3      1.:z3v487.ce32      2.:z3v487.ce18      3.:z3.ce45      4.:z3.ce17      5.:z3.ce59      6.:z3v487.ce150      7.:z3.ce31      8.:z3.ce73      9.:z3.ce87      10.:z3v487.ce101      11.:z3v487.ce136      12.:z3v487.ce123      13.:z3.ce122      14.:z3v487.ce115      15.:z3.ce178
    eqclass 2:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [30]: 6-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141010](input.spec-%var-a2-0, map[141009](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141008](Lambda3Var, map[141007](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141006](Lambda2Var, select[141005](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141004](select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 7-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141045](input.spec-%var-a1-0, map[141044](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141043](Lambda3Var, map[141042](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141041](Lambda2Var, select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141039](bvmul(Lambda2Var, 4), select[141038](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 8-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141067](input.spec-%var-a2-0, map[141064](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141063](Lambda3Var, map[141060](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141059](Lambda2Var, select[141057](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141055](bvmul(Lambda2Var, 4), select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 10-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142052](input.spec-%var-a1-0, map[142051](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%m))), lambda[141008](Lambda3Var, map[141007](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141006](Lambda2Var, select[141005](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141004](select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 11-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142047](input.spec-%var-a1-0, map[142046](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%arr2))), lambda[141008](Lambda3Var, map[141007](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141006](Lambda2Var, select[141005](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141004](select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 12-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142102](input.spec-%var-a1-0, map[142101](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142100](Lambda3Var, map[142099](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142098](Lambda2Var, select[142097](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[142096](select[141038](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 13-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142111](input.spec-%var-a2-0, map[142110](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142109](Lambda3Var, map[142108](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142107](Lambda2Var, select[142106](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[142105](bvmul(Lambda2Var, 4), select[142104](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%n, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 14-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142120](input.spec-%var-a2-0, map[142119](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142118](Lambda3Var, map[142117](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142116](Lambda2Var, select[142115](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[142114](bvmul(Lambda2Var, 4), select[142113](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%m, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 18-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[175209](input.spec-%var-a1-0, map[175206](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%arr2))), lambda[141063](Lambda3Var, map[141060](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141059](Lambda2Var, select[141057](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141055](bvmul(Lambda2Var, 4), select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 19-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[183890](input.spec-%var-a1-0, map[183635](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%m))), lambda[141063](Lambda3Var, map[141060](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141059](Lambda2Var, select[141057](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141055](bvmul(Lambda2Var, 4), select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 20-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[201279](input.spec-%var-a2-0, map[201278](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[201277](Lambda3Var, map[201276](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[201275](Lambda2Var, select[201274](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[201273](bvmul(Lambda2Var, 4), select[201272](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 21-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[201312](input.spec-%var-a1-0, map[201311](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[201310](Lambda3Var, map[201309](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[201308](Lambda2Var, select[201307](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[201306](bvmul(Lambda2Var, 4), select[201305](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 22-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[201317](input.spec-%var-a1-0, map[201316](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call.Lentry%1%fcallEnd))), lambda[141008](Lambda3Var, map[141007](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141006](Lambda2Var, select[141005](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141004](select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 23-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[201324](input.spec-%var-a1-0, map[201323](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[201322](Lambda3Var, map[201321](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[201320](Lambda2Var, select[201319](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[201318](select[142104](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%n, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 24-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[201325](input.spec-fcall_arg_copy.0.spec-%var-a1-0.L4%1%fcallEnd, map[141044](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141043](Lambda3Var, map[141042](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141041](Lambda2Var, select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141039](bvmul(Lambda2Var, 4), select[141038](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 25-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[201334](input.spec-%var-a2-0, map[201333](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[201332](Lambda3Var, map[201331](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[201330](Lambda2Var, select[201329](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[201328](bvmul(Lambda2Var, 4), select[201327](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%call.Lentry%1%fcallEnd, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 26-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[201336](input.spec-%var-a1-0, map[201335](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call.Lentry%1%fcallEnd))), lambda[141063](Lambda3Var, map[141060](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141059](Lambda2Var, select[141057](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141055](bvmul(Lambda2Var, 4), select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 27-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[201337](input.spec-%var-a1-0, map[142110](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142109](Lambda3Var, map[142108](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142107](Lambda2Var, select[142106](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[142105](bvmul(Lambda2Var, 4), select[142104](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%n, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 28-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[201338](input.spec-fcall_arg_copy.0.spec-%var-a1-0.L4%1%fcallEnd, map[142101](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142100](Lambda3Var, map[142099](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142098](Lambda2Var, select[142097](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[142096](select[141038](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 29-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[201339](input.spec-%var-a2-0, map[201323](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[201322](Lambda3Var, map[201321](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[201320](Lambda2Var, select[201319](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[201318](select[142104](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%n, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 30-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[201346](input.spec-%var-a2-0, map[201345](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[201344](Lambda3Var, map[201343](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[201342](Lambda2Var, select[201341](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[201340](select[142113](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%m, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 31-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[201353](input.spec-%var-a2-0, map[201352](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[201351](Lambda3Var, map[201350](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[201349](Lambda2Var, select[201348](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[201347](select[201327](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%call.Lentry%1%fcallEnd, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 32-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[201355](input.spec-%var-a1-0, map[201354](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%arr2))), lambda[201277](Lambda3Var, map[201276](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[201275](Lambda2Var, select[201274](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[201273](bvmul(Lambda2Var, 4), select[201272](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 33-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[201357](input.spec-%var-a1-0, map[201356](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%m))), lambda[201277](Lambda3Var, map[201276](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[201275](Lambda2Var, select[201274](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[201273](bvmul(Lambda2Var, 4), select[201272](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 34-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[201359](input.spec-%var-a1-0, map[201358](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call.Lentry%1%fcallEnd))), lambda[201277](Lambda3Var, map[201276](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[201275](Lambda2Var, select[201274](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[201273](bvmul(Lambda2Var, 4), select[201272](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 35-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[201367](input.spec-%var-a1-0, map[201366](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[201365](Lambda3Var, map[201364](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[201363](Lambda2Var, select[201362](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[201361](bvmul(Lambda2Var, 4), select[201360](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%n, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 36-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[201368](input.spec-fcall_arg_copy.0.spec-%var-a1-0.L4%1%fcallEnd, map[201311](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[201310](Lambda3Var, map[201309](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[201308](Lambda2Var, select[201307](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[201306](bvmul(Lambda2Var, 4), select[201305](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 37-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[201369](input.spec-%var-a2-0, map[201366](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[201365](Lambda3Var, map[201364](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[201363](Lambda2Var, select[201362](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[201361](bvmul(Lambda2Var, 4), select[201360](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%n, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 38-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[201377](input.spec-%var-a2-0, map[201376](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[201375](Lambda3Var, map[201374](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[201373](Lambda2Var, select[201372](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[201371](bvmul(Lambda2Var, 4), select[201370](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%m, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 39-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[201385](input.spec-%var-a2-0, map[201384](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[201383](Lambda3Var, map[201382](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[201381](Lambda2Var, select[201380](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[201379](bvmul(Lambda2Var, 4), select[201378](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%call.Lentry%1%fcallEnd, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 
    9 preds:
      0.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[201312](input.spec-%var-a1-0, map[201311](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[201310](Lambda3Var, map[201309](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[201308](Lambda2Var, select[201307](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[201306](bvmul(Lambda2Var, 4), select[201305](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      1.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142102](input.spec-%var-a1-0, map[142101](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142100](Lambda3Var, map[142099](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142098](Lambda2Var, select[142097](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[142096](select[141038](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false))))))  ==  true
      2.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141067](input.spec-%var-a2-0, map[141064](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141063](Lambda3Var, map[141060](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141059](Lambda2Var, select[141057](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141055](bvmul(Lambda2Var, 4), select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      3.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141010](input.spec-%var-a2-0, map[141009](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141008](Lambda3Var, map[141007](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141006](Lambda2Var, select[141005](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141004](select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false))))))  ==  true
      4.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[201325](input.spec-fcall_arg_copy.0.spec-%var-a1-0.L4%1%fcallEnd, map[141044](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141043](Lambda3Var, map[141042](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141041](Lambda2Var, select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141039](bvmul(Lambda2Var, 4), select[141038](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      5.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141045](input.spec-%var-a1-0, map[141044](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141043](Lambda3Var, map[141042](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141041](Lambda2Var, select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141039](bvmul(Lambda2Var, 4), select[141038](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      6.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[201368](input.spec-fcall_arg_copy.0.spec-%var-a1-0.L4%1%fcallEnd, map[201311](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[201310](Lambda3Var, map[201309](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[201308](Lambda2Var, select[201307](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[201306](bvmul(Lambda2Var, 4), select[201305](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      7.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[201279](input.spec-%var-a2-0, map[201278](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[201277](Lambda3Var, map[201276](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[201275](Lambda2Var, select[201274](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[201273](bvmul(Lambda2Var, 4), select[201272](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      8.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[201338](input.spec-fcall_arg_copy.0.spec-%var-a1-0.L4%1%fcallEnd, map[142101](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142100](Lambda3Var, map[142099](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142098](Lambda2Var, select[142097](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[142096](select[141038](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false))))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 3:
    smallest point cover name local-sizes-are-equal, type HOUDINI, exprs [0]: 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3

L4%2%fcallStart_Lentry%2%fcallStart: (d:0, s:0, sp: 0)
  Invariant state (4 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(and(and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)))))), and(and(and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum3=/, 3), 0)), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum2=/, 3), 0)), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(and(and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum3=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin)), eq(input.dst.local./*___y___bar__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin)), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin))) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(and(and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)))))), and(and(and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum3=/, 3), 0)), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum2=/, 3), 0)), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(and(and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum3=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin)), eq(input.dst.local./*___y___bar__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin)), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce753
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 3-->input.dst.llvm-%n ; 4-->input.dst.llvm-%arr2 ; 5-->input.dst.llvm-%m ; 16-->input.spec-%tmpvar-19.L4%1%fcallEnd ; 17-->input.dst.llvm-%call.Lentry%1%fcallEnd ; 
    2 preds:
      0.: bvneg(bvmul(input.spec-%tmpvar-19.L4%1%fcallEnd, 4294967295))  ==  input.dst.llvm-%call.Lentry%1%fcallEnd
      1.: 0                     ==  bvextract(input.dst.llvm-%arr2, 1, 0)
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3.ce753      1.:z3.ce762      2.:z3.ce780      3.:z3v487.ce763      4.:z3.ce816      5.:z3.ce834      6.:z3v487.ce817      7.:z3v487.ce852      8.:z3.ce798
    eqclass 2:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [39]: 6-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141010](input.spec-%var-a2-0, map[141009](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141008](Lambda3Var, map[141007](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141006](Lambda2Var, select[141005](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141004](select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 7-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141045](input.spec-%var-a1-0, map[141044](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141043](Lambda3Var, map[141042](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141041](Lambda2Var, select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141039](bvmul(Lambda2Var, 4), select[141038](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 8-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141067](input.spec-%var-a2-0, map[141064](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141063](Lambda3Var, map[141060](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141059](Lambda2Var, select[141057](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141055](bvmul(Lambda2Var, 4), select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 10-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142052](input.spec-%var-a1-0, map[142051](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%m))), lambda[141008](Lambda3Var, map[141007](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141006](Lambda2Var, select[141005](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141004](select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 11-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142047](input.spec-%var-a1-0, map[142046](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%arr2))), lambda[141008](Lambda3Var, map[141007](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141006](Lambda2Var, select[141005](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141004](select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 12-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142102](input.spec-%var-a1-0, map[142101](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142100](Lambda3Var, map[142099](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142098](Lambda2Var, select[142097](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[142096](select[141038](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 13-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142111](input.spec-%var-a2-0, map[142110](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142109](Lambda3Var, map[142108](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142107](Lambda2Var, select[142106](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[142105](bvmul(Lambda2Var, 4), select[142104](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%n, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 14-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142120](input.spec-%var-a2-0, map[142119](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142118](Lambda3Var, map[142117](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142116](Lambda2Var, select[142115](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[142114](bvmul(Lambda2Var, 4), select[142113](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%m, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 18-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[175209](input.spec-%var-a1-0, map[175206](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%arr2))), lambda[141063](Lambda3Var, map[141060](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141059](Lambda2Var, select[141057](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141055](bvmul(Lambda2Var, 4), select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 19-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[183890](input.spec-%var-a1-0, map[183635](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%m))), lambda[141063](Lambda3Var, map[141060](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141059](Lambda2Var, select[141057](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141055](bvmul(Lambda2Var, 4), select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 20-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[201279](input.spec-%var-a2-0, map[201278](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[201277](Lambda3Var, map[201276](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[201275](Lambda2Var, select[201274](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[201273](bvmul(Lambda2Var, 4), select[201272](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 21-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[201312](input.spec-%var-a1-0, map[201311](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[201310](Lambda3Var, map[201309](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[201308](Lambda2Var, select[201307](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[201306](bvmul(Lambda2Var, 4), select[201305](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 22-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[201317](input.spec-%var-a1-0, map[201316](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call.Lentry%1%fcallEnd))), lambda[141008](Lambda3Var, map[141007](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141006](Lambda2Var, select[141005](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141004](select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 23-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[201324](input.spec-%var-a1-0, map[201323](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[201322](Lambda3Var, map[201321](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[201320](Lambda2Var, select[201319](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[201318](select[142104](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%n, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 24-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[201325](input.spec-fcall_arg_copy.0.spec-%var-a1-0.L4%1%fcallEnd, map[141044](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141043](Lambda3Var, map[141042](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141041](Lambda2Var, select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141039](bvmul(Lambda2Var, 4), select[141038](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 25-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[201334](input.spec-%var-a2-0, map[201333](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[201332](Lambda3Var, map[201331](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[201330](Lambda2Var, select[201329](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[201328](bvmul(Lambda2Var, 4), select[201327](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%call.Lentry%1%fcallEnd, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 26-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[201336](input.spec-%var-a1-0, map[201335](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call.Lentry%1%fcallEnd))), lambda[141063](Lambda3Var, map[141060](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141059](Lambda2Var, select[141057](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141055](bvmul(Lambda2Var, 4), select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 27-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[201337](input.spec-%var-a1-0, map[142110](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142109](Lambda3Var, map[142108](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142107](Lambda2Var, select[142106](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[142105](bvmul(Lambda2Var, 4), select[142104](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%n, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 28-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[201338](input.spec-fcall_arg_copy.0.spec-%var-a1-0.L4%1%fcallEnd, map[142101](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142100](Lambda3Var, map[142099](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142098](Lambda2Var, select[142097](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[142096](select[141038](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 29-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[201339](input.spec-%var-a2-0, map[201323](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[201322](Lambda3Var, map[201321](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[201320](Lambda2Var, select[201319](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[201318](select[142104](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%n, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 30-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[201346](input.spec-%var-a2-0, map[201345](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[201344](Lambda3Var, map[201343](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[201342](Lambda2Var, select[201341](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[201340](select[142113](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%m, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 31-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[201353](input.spec-%var-a2-0, map[201352](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[201351](Lambda3Var, map[201350](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[201349](Lambda2Var, select[201348](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[201347](select[201327](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%call.Lentry%1%fcallEnd, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 32-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[201355](input.spec-%var-a1-0, map[201354](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%arr2))), lambda[201277](Lambda3Var, map[201276](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[201275](Lambda2Var, select[201274](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[201273](bvmul(Lambda2Var, 4), select[201272](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 33-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[201357](input.spec-%var-a1-0, map[201356](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%m))), lambda[201277](Lambda3Var, map[201276](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[201275](Lambda2Var, select[201274](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[201273](bvmul(Lambda2Var, 4), select[201272](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 34-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[201359](input.spec-%var-a1-0, map[201358](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call.Lentry%1%fcallEnd))), lambda[201277](Lambda3Var, map[201276](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[201275](Lambda2Var, select[201274](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[201273](bvmul(Lambda2Var, 4), select[201272](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 35-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[201367](input.spec-%var-a1-0, map[201366](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[201365](Lambda3Var, map[201364](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[201363](Lambda2Var, select[201362](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[201361](bvmul(Lambda2Var, 4), select[201360](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%n, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 36-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[201368](input.spec-fcall_arg_copy.0.spec-%var-a1-0.L4%1%fcallEnd, map[201311](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[201310](Lambda3Var, map[201309](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[201308](Lambda2Var, select[201307](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[201306](bvmul(Lambda2Var, 4), select[201305](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 37-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[201369](input.spec-%var-a2-0, map[201366](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[201365](Lambda3Var, map[201364](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[201363](Lambda2Var, select[201362](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[201361](bvmul(Lambda2Var, 4), select[201360](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%n, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 38-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[201377](input.spec-%var-a2-0, map[201376](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[201375](Lambda3Var, map[201374](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[201373](Lambda2Var, select[201372](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[201371](bvmul(Lambda2Var, 4), select[201370](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%m, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 39-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[201385](input.spec-%var-a2-0, map[201384](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[201383](Lambda3Var, map[201382](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[201381](Lambda2Var, select[201380](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[201379](bvmul(Lambda2Var, 4), select[201378](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%call.Lentry%1%fcallEnd, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 40-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[239969](input.spec-%var-a1-0, map[141064](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141063](Lambda3Var, map[141060](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141059](Lambda2Var, select[141057](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141055](bvmul(Lambda2Var, 4), select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 41-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[240007](input.spec-%var-a1-0, map[142119](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142118](Lambda3Var, map[142117](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142116](Lambda2Var, select[142115](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[142114](bvmul(Lambda2Var, 4), select[142113](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%m, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 42-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[240013](input.spec-%var-a1-0, map[201376](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[201375](Lambda3Var, map[201374](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[201373](Lambda2Var, select[201372](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[201371](bvmul(Lambda2Var, 4), select[201370](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%m, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 43-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[240012](input.spec-%var-a1-0, map[201278](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[201277](Lambda3Var, map[201276](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[201275](Lambda2Var, select[201274](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[201273](bvmul(Lambda2Var, 4), select[201272](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 44-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[240014](input.spec-%var-a1-0, map[201384](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[201383](Lambda3Var, map[201382](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[201381](Lambda2Var, select[201380](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[201379](bvmul(Lambda2Var, 4), select[201378](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%call.Lentry%1%fcallEnd, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 45-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[240011](input.spec-%var-a1-0, map[201352](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[201351](Lambda3Var, map[201350](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[201349](Lambda2Var, select[201348](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[201347](select[201327](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%call.Lentry%1%fcallEnd, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 46-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[240010](input.spec-%var-a1-0, map[201345](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[201344](Lambda3Var, map[201343](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[201342](Lambda2Var, select[201341](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[201340](select[142113](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%m, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 47-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[240009](input.spec-%var-a1-0, map[141009](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141008](Lambda3Var, map[141007](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141006](Lambda2Var, select[141005](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141004](select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 48-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[240008](input.spec-%var-a1-0, map[201333](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[201332](Lambda3Var, map[201331](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[201330](Lambda2Var, select[201329](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[201328](bvmul(Lambda2Var, 4), select[201327](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%call.Lentry%1%fcallEnd, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 
    9 preds:
      0.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142102](input.spec-%var-a1-0, map[142101](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142100](Lambda3Var, map[142099](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142098](Lambda2Var, select[142097](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[142096](select[141038](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false))))))  ==  true
      1.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[201312](input.spec-%var-a1-0, map[201311](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[201310](Lambda3Var, map[201309](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[201308](Lambda2Var, select[201307](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[201306](bvmul(Lambda2Var, 4), select[201305](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      2.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[201368](input.spec-fcall_arg_copy.0.spec-%var-a1-0.L4%1%fcallEnd, map[201311](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[201310](Lambda3Var, map[201309](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[201308](Lambda2Var, select[201307](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[201306](bvmul(Lambda2Var, 4), select[201305](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      3.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141045](input.spec-%var-a1-0, map[141044](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141043](Lambda3Var, map[141042](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141041](Lambda2Var, select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141039](bvmul(Lambda2Var, 4), select[141038](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      4.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[201325](input.spec-fcall_arg_copy.0.spec-%var-a1-0.L4%1%fcallEnd, map[141044](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141043](Lambda3Var, map[141042](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141041](Lambda2Var, select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141039](bvmul(Lambda2Var, 4), select[141038](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      5.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141067](input.spec-%var-a2-0, map[141064](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141063](Lambda3Var, map[141060](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141059](Lambda2Var, select[141057](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141055](bvmul(Lambda2Var, 4), select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      6.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141010](input.spec-%var-a2-0, map[141009](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141008](Lambda3Var, map[141007](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141006](Lambda2Var, select[141005](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141004](select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false))))))  ==  true
      7.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[201279](input.spec-%var-a2-0, map[201278](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[201277](Lambda3Var, map[201276](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[201275](Lambda2Var, select[201274](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[201273](bvmul(Lambda2Var, 4), select[201272](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      8.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[201338](input.spec-fcall_arg_copy.0.spec-%var-a1-0.L4%1%fcallEnd, map[142101](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142100](Lambda3Var, map[142099](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142098](Lambda2Var, select[142097](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[142096](select[141038](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false))))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce753
    eqclass 3:
    smallest point cover name local-sizes-are-equal, type HOUDINI, exprs [0]: 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce753

L4%2%fcallEnd_Lentry%2%fcallEnd: (d:0, s:0, sp: 0)
  Invariant state (4 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(and(and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)))))), and(and(and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum3=/, 3), 0)), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum2=/, 3), 0)), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(and(and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum3=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin)), eq(input.dst.local./*___y___bar__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin)), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin))) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(and(and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)))))), and(and(and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum3=/, 3), 0)), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum2=/, 3), 0)), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(and(and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum3=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin)), eq(input.dst.local./*___y___bar__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin)), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce753
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 16-->input.spec-%tmpvar-19.L4%1%fcallEnd ; 17-->input.dst.llvm-%call.Lentry%1%fcallEnd ; 49-->input.spec-%tmpvar-20.L4%2%fcallEnd ; 50-->input.dst.llvm-%call1.Lentry%2%fcallEnd ; 
    1 preds:
      0.: bvneg(bvmul(input.spec-%tmpvar-19.L4%1%fcallEnd, 4294967295))  ==  input.dst.llvm-%call.Lentry%1%fcallEnd
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3v487.ce1194      1.:z3v487.ce1203      2.:z3.ce753      3.:z3.ce762      4.:z3.ce780      5.:z3v487.ce763      6.:z3.ce798      7.:z3v487.ce1212
    eqclass 2:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [53]: 6-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141010](input.spec-%var-a2-0, map[141009](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141008](Lambda3Var, map[141007](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141006](Lambda2Var, select[141005](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141004](select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 7-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141045](input.spec-%var-a1-0, map[141044](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141043](Lambda3Var, map[141042](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141041](Lambda2Var, select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141039](bvmul(Lambda2Var, 4), select[141038](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 8-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141067](input.spec-%var-a2-0, map[141064](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141063](Lambda3Var, map[141060](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141059](Lambda2Var, select[141057](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141055](bvmul(Lambda2Var, 4), select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 12-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142102](input.spec-%var-a1-0, map[142101](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142100](Lambda3Var, map[142099](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142098](Lambda2Var, select[142097](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[142096](select[141038](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 20-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[201279](input.spec-%var-a2-0, map[201278](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[201277](Lambda3Var, map[201276](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[201275](Lambda2Var, select[201274](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[201273](bvmul(Lambda2Var, 4), select[201272](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 21-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[201312](input.spec-%var-a1-0, map[201311](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[201310](Lambda3Var, map[201309](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[201308](Lambda2Var, select[201307](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[201306](bvmul(Lambda2Var, 4), select[201305](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 22-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[201317](input.spec-%var-a1-0, map[201316](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call.Lentry%1%fcallEnd))), lambda[141008](Lambda3Var, map[141007](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141006](Lambda2Var, select[141005](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141004](select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 24-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[201325](input.spec-fcall_arg_copy.0.spec-%var-a1-0.L4%1%fcallEnd, map[141044](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141043](Lambda3Var, map[141042](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141041](Lambda2Var, select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141039](bvmul(Lambda2Var, 4), select[141038](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 25-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[201334](input.spec-%var-a2-0, map[201333](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[201332](Lambda3Var, map[201331](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[201330](Lambda2Var, select[201329](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[201328](bvmul(Lambda2Var, 4), select[201327](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%call.Lentry%1%fcallEnd, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 26-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[201336](input.spec-%var-a1-0, map[201335](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call.Lentry%1%fcallEnd))), lambda[141063](Lambda3Var, map[141060](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141059](Lambda2Var, select[141057](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141055](bvmul(Lambda2Var, 4), select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 28-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[201338](input.spec-fcall_arg_copy.0.spec-%var-a1-0.L4%1%fcallEnd, map[142101](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142100](Lambda3Var, map[142099](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142098](Lambda2Var, select[142097](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[142096](select[141038](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 31-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[201353](input.spec-%var-a2-0, map[201352](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[201351](Lambda3Var, map[201350](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[201349](Lambda2Var, select[201348](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[201347](select[201327](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%call.Lentry%1%fcallEnd, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 34-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[201359](input.spec-%var-a1-0, map[201358](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call.Lentry%1%fcallEnd))), lambda[201277](Lambda3Var, map[201276](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[201275](Lambda2Var, select[201274](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[201273](bvmul(Lambda2Var, 4), select[201272](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 36-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[201368](input.spec-fcall_arg_copy.0.spec-%var-a1-0.L4%1%fcallEnd, map[201311](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[201310](Lambda3Var, map[201309](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[201308](Lambda2Var, select[201307](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[201306](bvmul(Lambda2Var, 4), select[201305](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 39-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[201385](input.spec-%var-a2-0, map[201384](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[201383](Lambda3Var, map[201382](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[201381](Lambda2Var, select[201380](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[201379](bvmul(Lambda2Var, 4), select[201378](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%call.Lentry%1%fcallEnd, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 44-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[240014](input.spec-%var-a1-0, map[201384](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[201383](Lambda3Var, map[201382](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[201381](Lambda2Var, select[201380](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[201379](bvmul(Lambda2Var, 4), select[201378](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%call.Lentry%1%fcallEnd, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 45-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[240011](input.spec-%var-a1-0, map[201352](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[201351](Lambda3Var, map[201350](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[201349](Lambda2Var, select[201348](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[201347](select[201327](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%call.Lentry%1%fcallEnd, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 48-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[240008](input.spec-%var-a1-0, map[201333](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[201332](Lambda3Var, map[201331](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[201330](Lambda2Var, select[201329](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[201328](bvmul(Lambda2Var, 4), select[201327](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%call.Lentry%1%fcallEnd, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 51-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[252165](input.spec-%var-a2-0, map[252164](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[252163](Lambda3Var, map[252162](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[252161](Lambda2Var, select[252160](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[252159](bvmul(Lambda2Var, 4), select[252158](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 52-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[252198](input.spec-%var-a1-0, map[252197](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[252196](Lambda3Var, map[252195](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[252194](Lambda2Var, select[252193](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[252192](bvmul(Lambda2Var, 4), select[252191](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 53-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[252199](input.spec-fcall_arg_copy.0.spec-%var-a2-0.L4%2%fcallEnd, map[141009](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141008](Lambda3Var, map[141007](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141006](Lambda2Var, select[141005](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141004](select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 54-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[252204](input.spec-%var-a1-0, map[252203](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call1.Lentry%2%fcallEnd))), lambda[141008](Lambda3Var, map[141007](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141006](Lambda2Var, select[141005](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141004](select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 55-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[252213](input.spec-%var-a1-0, map[252212](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[252211](Lambda3Var, map[252210](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[252209](Lambda2Var, select[252208](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[252207](select[252206](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%call1.Lentry%2%fcallEnd, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 56-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[252220](input.spec-%var-a2-0, map[252219](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[252218](Lambda3Var, map[252217](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[252216](Lambda2Var, select[252215](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[252214](bvmul(Lambda2Var, 4), select[252206](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%call1.Lentry%2%fcallEnd, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 57-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[252222](input.spec-%var-a2-0, map[252221](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call.Lentry%1%fcallEnd))), lambda[141043](Lambda3Var, map[141042](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141041](Lambda2Var, select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141039](bvmul(Lambda2Var, 4), select[141038](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 58-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[252224](input.spec-%var-a2-0, map[252223](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call1.Lentry%2%fcallEnd))), lambda[141043](Lambda3Var, map[141042](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141041](Lambda2Var, select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141039](bvmul(Lambda2Var, 4), select[141038](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 59-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[252225](input.spec-fcall_arg_copy.0.spec-%var-a2-0.L4%2%fcallEnd, map[141064](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141063](Lambda3Var, map[141060](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141059](Lambda2Var, select[141057](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141055](bvmul(Lambda2Var, 4), select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 60-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[252227](input.spec-%var-a1-0, map[252226](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call1.Lentry%2%fcallEnd))), lambda[141063](Lambda3Var, map[141060](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141059](Lambda2Var, select[141057](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141055](bvmul(Lambda2Var, 4), select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 61-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[252228](input.spec-%var-a1-0, map[252219](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[252218](Lambda3Var, map[252217](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[252216](Lambda2Var, select[252215](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[252214](bvmul(Lambda2Var, 4), select[252206](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%call1.Lentry%2%fcallEnd, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 62-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[252229](input.spec-%var-a2-0, map[252212](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[252211](Lambda3Var, map[252210](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[252209](Lambda2Var, select[252208](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[252207](select[252206](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%call1.Lentry%2%fcallEnd, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 63-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[252231](input.spec-%var-a2-0, map[252230](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call.Lentry%1%fcallEnd))), lambda[142100](Lambda3Var, map[142099](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142098](Lambda2Var, select[142097](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[142096](select[141038](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 64-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[252233](input.spec-%var-a2-0, map[252232](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call1.Lentry%2%fcallEnd))), lambda[142100](Lambda3Var, map[142099](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142098](Lambda2Var, select[142097](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[142096](select[141038](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 65-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[252234](input.spec-fcall_arg_copy.0.spec-%var-a2-0.L4%2%fcallEnd, map[201278](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[201277](Lambda3Var, map[201276](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[201275](Lambda2Var, select[201274](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[201273](bvmul(Lambda2Var, 4), select[201272](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 66-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[252236](input.spec-%var-a1-0, map[252235](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call1.Lentry%2%fcallEnd))), lambda[201277](Lambda3Var, map[201276](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[201275](Lambda2Var, select[201274](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[201273](bvmul(Lambda2Var, 4), select[201272](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 67-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[252244](input.spec-%var-a1-0, map[252243](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[252242](Lambda3Var, map[252241](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[252240](Lambda2Var, select[252239](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[252238](bvmul(Lambda2Var, 4), select[252237](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%call1.Lentry%2%fcallEnd, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 68-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[252245](input.spec-%var-a2-0, map[252243](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[252242](Lambda3Var, map[252241](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[252240](Lambda2Var, select[252239](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[252238](bvmul(Lambda2Var, 4), select[252237](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%call1.Lentry%2%fcallEnd, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 69-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[252247](input.spec-%var-a2-0, map[252246](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call.Lentry%1%fcallEnd))), lambda[201310](Lambda3Var, map[201309](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[201308](Lambda2Var, select[201307](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[201306](bvmul(Lambda2Var, 4), select[201305](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 70-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[252249](input.spec-%var-a2-0, map[252248](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call1.Lentry%2%fcallEnd))), lambda[201310](Lambda3Var, map[201309](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[201308](Lambda2Var, select[201307](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[201306](bvmul(Lambda2Var, 4), select[201305](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 71-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[252250](input.spec-%var-a1-0, map[252221](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call.Lentry%1%fcallEnd))), lambda[141043](Lambda3Var, map[141042](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141041](Lambda2Var, select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141039](bvmul(Lambda2Var, 4), select[141038](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 72-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[252251](input.spec-%var-a1-0, map[252223](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call1.Lentry%2%fcallEnd))), lambda[141043](Lambda3Var, map[141042](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141041](Lambda2Var, select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141039](bvmul(Lambda2Var, 4), select[141038](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 73-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[252252](input.spec-%var-a1-0, map[252230](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call.Lentry%1%fcallEnd))), lambda[142100](Lambda3Var, map[142099](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142098](Lambda2Var, select[142097](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[142096](select[141038](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 74-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[252253](input.spec-%var-a1-0, map[252232](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call1.Lentry%2%fcallEnd))), lambda[142100](Lambda3Var, map[142099](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142098](Lambda2Var, select[142097](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[142096](select[141038](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 75-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[252254](input.spec-%var-a1-0, map[252246](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call.Lentry%1%fcallEnd))), lambda[201310](Lambda3Var, map[201309](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[201308](Lambda2Var, select[201307](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[201306](bvmul(Lambda2Var, 4), select[201305](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 76-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[252255](input.spec-%var-a1-0, map[252248](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call1.Lentry%2%fcallEnd))), lambda[201310](Lambda3Var, map[201309](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[201308](Lambda2Var, select[201307](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[201306](bvmul(Lambda2Var, 4), select[201305](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 77-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[252256](input.spec-fcall_arg_copy.0.spec-%var-a2-0.L4%2%fcallEnd, map[252164](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[252163](Lambda3Var, map[252162](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[252161](Lambda2Var, select[252160](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[252159](bvmul(Lambda2Var, 4), select[252158](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 78-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[252258](input.spec-%var-a1-0, map[252257](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call.Lentry%1%fcallEnd))), lambda[252163](Lambda3Var, map[252162](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[252161](Lambda2Var, select[252160](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[252159](bvmul(Lambda2Var, 4), select[252158](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 79-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[252260](input.spec-%var-a1-0, map[252259](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call1.Lentry%2%fcallEnd))), lambda[252163](Lambda3Var, map[252162](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[252161](Lambda2Var, select[252160](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[252159](bvmul(Lambda2Var, 4), select[252158](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 80-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[252268](input.spec-%var-a1-0, map[252267](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[252266](Lambda3Var, map[252265](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[252264](Lambda2Var, select[252263](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[252262](bvmul(Lambda2Var, 4), select[252261](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%call.Lentry%1%fcallEnd, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 81-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[252276](input.spec-%var-a1-0, map[252275](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[252274](Lambda3Var, map[252273](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[252272](Lambda2Var, select[252271](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[252270](bvmul(Lambda2Var, 4), select[252269](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%call1.Lentry%2%fcallEnd, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 82-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[252277](input.spec-%var-a2-0, map[252267](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[252266](Lambda3Var, map[252265](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[252264](Lambda2Var, select[252263](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[252262](bvmul(Lambda2Var, 4), select[252261](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%call.Lentry%1%fcallEnd, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 83-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[252278](input.spec-%var-a2-0, map[252275](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[252274](Lambda3Var, map[252273](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[252272](Lambda2Var, select[252271](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[252270](bvmul(Lambda2Var, 4), select[252269](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%call1.Lentry%2%fcallEnd, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 84-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[252280](input.spec-%var-a2-0, map[252279](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call.Lentry%1%fcallEnd))), lambda[252196](Lambda3Var, map[252195](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[252194](Lambda2Var, select[252193](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[252192](bvmul(Lambda2Var, 4), select[252191](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 85-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[252282](input.spec-%var-a2-0, map[252281](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call1.Lentry%2%fcallEnd))), lambda[252196](Lambda3Var, map[252195](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[252194](Lambda2Var, select[252193](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[252192](bvmul(Lambda2Var, 4), select[252191](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 
    15 preds:
      0.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[252256](input.spec-fcall_arg_copy.0.spec-%var-a2-0.L4%2%fcallEnd, map[252164](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[252163](Lambda3Var, map[252162](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[252161](Lambda2Var, select[252160](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[252159](bvmul(Lambda2Var, 4), select[252158](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      1.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[252234](input.spec-fcall_arg_copy.0.spec-%var-a2-0.L4%2%fcallEnd, map[201278](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[201277](Lambda3Var, map[201276](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[201275](Lambda2Var, select[201274](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[201273](bvmul(Lambda2Var, 4), select[201272](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      2.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[201325](input.spec-fcall_arg_copy.0.spec-%var-a1-0.L4%1%fcallEnd, map[141044](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141043](Lambda3Var, map[141042](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141041](Lambda2Var, select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141039](bvmul(Lambda2Var, 4), select[141038](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      3.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[252225](input.spec-fcall_arg_copy.0.spec-%var-a2-0.L4%2%fcallEnd, map[141064](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141063](Lambda3Var, map[141060](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141059](Lambda2Var, select[141057](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141055](bvmul(Lambda2Var, 4), select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      4.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[201312](input.spec-%var-a1-0, map[201311](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[201310](Lambda3Var, map[201309](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[201308](Lambda2Var, select[201307](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[201306](bvmul(Lambda2Var, 4), select[201305](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      5.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[201338](input.spec-fcall_arg_copy.0.spec-%var-a1-0.L4%1%fcallEnd, map[142101](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142100](Lambda3Var, map[142099](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142098](Lambda2Var, select[142097](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[142096](select[141038](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false))))))  ==  true
      6.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142102](input.spec-%var-a1-0, map[142101](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142100](Lambda3Var, map[142099](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142098](Lambda2Var, select[142097](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[142096](select[141038](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false))))))  ==  true
      7.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[252199](input.spec-fcall_arg_copy.0.spec-%var-a2-0.L4%2%fcallEnd, map[141009](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141008](Lambda3Var, map[141007](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141006](Lambda2Var, select[141005](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141004](select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false))))))  ==  true
      8.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[201279](input.spec-%var-a2-0, map[201278](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[201277](Lambda3Var, map[201276](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[201275](Lambda2Var, select[201274](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[201273](bvmul(Lambda2Var, 4), select[201272](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      9.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141067](input.spec-%var-a2-0, map[141064](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141063](Lambda3Var, map[141060](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141059](Lambda2Var, select[141057](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141055](bvmul(Lambda2Var, 4), select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      10.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141010](input.spec-%var-a2-0, map[141009](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141008](Lambda3Var, map[141007](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141006](Lambda2Var, select[141005](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141004](select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false))))))  ==  true
      11.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141045](input.spec-%var-a1-0, map[141044](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141043](Lambda3Var, map[141042](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141041](Lambda2Var, select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141039](bvmul(Lambda2Var, 4), select[141038](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      12.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[201368](input.spec-fcall_arg_copy.0.spec-%var-a1-0.L4%1%fcallEnd, map[201311](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[201310](Lambda3Var, map[201309](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[201308](Lambda2Var, select[201307](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[201306](bvmul(Lambda2Var, 4), select[201305](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      13.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[252165](input.spec-%var-a2-0, map[252164](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[252163](Lambda3Var, map[252162](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[252161](Lambda2Var, select[252160](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[252159](bvmul(Lambda2Var, 4), select[252158](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      14.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[252198](input.spec-%var-a1-0, map[252197](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[252196](Lambda3Var, map[252195](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[252194](Lambda2Var, select[252193](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[252192](bvmul(Lambda2Var, 4), select[252191](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce753
    eqclass 3:
    smallest point cover name local-sizes-are-equal, type HOUDINI, exprs [0]: 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce753

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


Found equivalence proof. Final CG:
<cg>
  Edges[5]: L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart (C L0%0%d => C L4%1%fcallStart at mu 1 delta {1,0}, A L0%0%d => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd (C L4%1%fcallStart => C L4%1%fcallEnd at mu 1 delta {1,0}, A (line 12 at column 10) => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart (C L4%1%fcallEnd => C L4%2%fcallStart at mu 1 delta {1,0}, A (line 12 at column 10) => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd (C L4%2%fcallStart => C L4%2%fcallEnd at mu 1 delta {1,0}, A (line 12 at column 10) => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d (C L4%2%fcallEnd => C E0%0%d at mu 1 delta {1,0}, A (line 12 at column 10) => A E0%0%d at mu 1 delta {1,0})
  Nodes[6]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L4%1%fcallStart_Lentry%1%fcallStart (C L4%1%fcallStart, A (line 12 at column 10))
                L4%1%fcallStart_Lentry%1%fcallStart [inductive-invariants] contains 22 counterexamples (for correlating 4 bv exprs)
            L4%1%fcallEnd_Lentry%1%fcallEnd (C L4%1%fcallEnd, A (line 12 at column 10))
                L4%1%fcallEnd_Lentry%1%fcallEnd [inductive-invariants] contains 17 counterexamples (for correlating 5 bv exprs)
            L4%2%fcallStart_Lentry%2%fcallStart (C L4%2%fcallStart, A (line 12 at column 10))
                L4%2%fcallStart_Lentry%2%fcallStart [inductive-invariants] contains 10 counterexamples (for correlating 5 bv exprs)
            L4%2%fcallEnd_Lentry%2%fcallEnd (C L4%2%fcallEnd, A (line 12 at column 10))
                L4%2%fcallEnd_Lentry%2%fcallEnd [inductive-invariants] contains 10 counterexamples (for correlating 4 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
EQUIV equivalence check for function bar. 212.55s, query:smt.: 147.594s (num_starts 97; 1.5216s/start), decide_hoare_triple.ce.: 0s (num_starts 0; -nans/start), decide_hoare_triple_helper.: 210.025s (num_starts 233; 0.9014s/start)ftmap_run_pointsto_analysis.: 0.277205s (num_starts 2; 0.1386s/start)

Printing statistics:

timers:
decide_hoare_triple.ce.: 0s (num_starts 0; -nans/start)
corr_graph_update_dst_to_src_submaps_for_cg_edge.: 4e-06s (num_starts 4; 0.0000s/start)
update_dst_edge_for_local_allocations_and_deallocations.: 4e-06s (num_starts 5; 0.0000s/start)
compute_loop_hoisting_non_linear_exprs_at_pcpair.: 5e-06s (num_starts 5; 0.0000s/start)
cg_compute_well_formedness_conditions_for_stack_pointer.: 6e-06s (num_starts 5; 0.0000s/start)
alias_val_t::constructor_with_map_arg.: 8e-06s (num_starts 12; 0.0000s/start)
invariant_inference_xfer.local-sizes-are-equal.from.L0%0%d_L0%0%d.: 9e-06s (num_starts 1; 0.0000s/start)
invariant_inference_xfer.local-sizes-are-equal.from.L4%2%fcallStart_Lentry%2%fcallStart.: 9e-06s (num_starts 1; 0.0000s/start)
compute_tfg_pred_eqclass.: 1e-05s (num_starts 4; 0.0000s/start)
invariant_inference_xfer.local-sizes-are-equal.from.L4%1%fcallEnd_Lentry%1%fcallEnd.: 1e-05s (num_starts 1; 0.0000s/start)
invariant_inference_xfer.local-sizes-are-equal.from.L4%1%fcallStart_Lentry%1%fcallStart.: 1e-05s (num_starts 1; 0.0000s/start)
get_paths_with_matching_to_pc.: 1.2e-05s (num_starts 5; 0.0000s/start)
prune_dst_memslots.: 1.2e-05s (num_starts 4; 0.0000s/start)
aliasing_constraints.get_region_agrees_with_memlabel_exprs.: 1.6e-05s (num_starts 27; 0.0000s/start)
aliasing_constraints.get_region_agrees_with_memlabel_preds.: 2e-05s (num_starts 5; 0.0000s/start)
determinize_value_expr_map.: 3.2e-05s (num_starts 15; 0.0000s/start)
corr_graph_add_correlation_and_create_new_correl_entry.after_corr_graph_add_correlation.: 3.4e-05s (num_starts 5; 0.0000s/start)
get_intersected_lr_status.: 3.8e-05s (num_starts 2; 0.0000s/start)
lr_status_meet.: 5.7e-05s (num_starts 102; 0.0000s/start)
prove_trivial.: 6e-05s (num_starts 87; 0.0000s/start)
remove_complex_bv_exprs.: 6.3e-05s (num_starts 4; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.post_dfa.: 7.2e-05s (num_starts 1; 0.0001s/start)
sp_version_relations_val_t::meet.: 7.5e-05s (num_starts 164; 0.0000s/start)
tfg::populate_loc_definedness.set_loc_definedness().: 8e-05s (num_starts 3; 0.0000s/start)
corr_graph_generate_local_sprel_expr_guesses_for_locals.: 8.2e-05s (num_starts 5; 0.0000s/start)
populate_lr_status_for_sprel_locs_map.calling.compute_lr_status_for_expr.: 8.6e-05s (num_starts 3; 0.0000s/start)
select_llvmvars_not_defined_on_from_pc_and_add_to_dst.: 8.6e-05s (num_starts 4; 0.0000s/start)
get_lr_status_for_loc_ids.: 9.7e-05s (num_starts 30; 0.0000s/start)
expr_is_hidden_reg.: 0.000104s (num_starts 135; 0.0000s/start)
graph_locs_add_exvregs_for_edge.: 0.000106s (num_starts 10; 0.0000s/start)
check_wfconds_on_edge.L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart.: 0.000107s (num_starts 2; 0.0001s/start)
graph_locs_add_all_exvregs.: 0.000115s (num_starts 2; 0.0001s/start)
graph_add_location_slots_using_state_mem_acc_map.: 0.00012s (num_starts 10; 0.0000s/start)
ce_perform_memory_fuzzing.: 0.000123s (num_starts 133; 0.0000s/start)
expr_is_callee_save_const.: 0.000131s (num_starts 147; 0.0000s/start)
rdefs_locs_ssa_analysis::xfer_and_meet.: 0.000146s (num_starts 5; 0.0000s/start)
sp_version_relations_val_t::compute_transitive_closure.: 0.000157s (num_starts 21; 0.0000s/start)
tfg::populate_loc_definedness.post_dfa.: 0.000158s (num_starts 3; 0.0001s/start)
graph_locs_add_local_vars_for_edge.: 0.000176s (num_starts 10; 0.0000s/start)
graph_locs_add_all_local_vars.: 0.000187s (num_starts 2; 0.0001s/start)
select_llvmvars_live_at_pc_and_add_to_dst.: 0.000197s (num_starts 4; 0.0000s/start)
def_analysis::xfer_and_meet.: 0.000241s (num_starts 15; 0.0000s/start)
pred_lhs_rhs_convert_memmask_to_select_for_symbols_and_locals.: 0.000245s (num_starts 233; 0.0000s/start)
populate_dominator_and_postdominator_relations.: 0.000251s (num_starts 2; 0.0001s/start)
compute_sprel_relations.: 0.000288s (num_starts 2; 0.0001s/start)
propagate_sprels.: 0.000296s (num_starts 2; 0.0001s/start)
collect_dst_to_src_submap_preds.: 0.000308s (num_starts 233; 0.0000s/start)
removeMostPromising.: 0.000309s (num_starts 16; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_solve.: 0.000317s (num_starts 1; 0.0003s/start)
add_fresh_counterexample_at_pc_and_propagate.L4%2%fcallEnd_Lentry%2%fcallEnd.inductive-invariants.: 0.000321s (num_starts 2; 0.0002s/start)
tfg::collect_assumes_around_edge.: 0.000331s (num_starts 25; 0.0000s/start)
ssa_vars_renaming_analysis::xfer_and_meet.: 0.000334s (num_starts 10; 0.0000s/start)
pth_collect_preds_using_atom_func.: 0.000337s (num_starts 16; 0.0000s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.bvcover_weaken_till_arity_within_bound.: 0.000357s (num_starts 159; 0.0000s/start)
collect_aliasing_constaints_starting_at_pc_till_maximal_bbs.: 0.000364s (num_starts 11; 0.0000s/start)
tfg_edge_composition_get_assumes.: 0.000389s (num_starts 16; 0.0000s/start)
rdefs_vars_ssa_analysis::xfer_and_meet.: 0.000421s (num_starts 10; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.000422s (num_starts 1; 0.0004s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon);-trivial.: 0.000422s (num_starts 1; 0.0004s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.000423s (num_starts 1; 0.0004s/start)
graph_locs_add_all_llvmvars.: 0.000425s (num_starts 2; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities..: 0.000426s (num_starts 1; 0.0004s/start)
expr_represents_llvm_undef.: 0.000427s (num_starts 151; 0.0000s/start)
sort_exprs_and_compute_bv_eqclass.: 0.000429s (num_starts 4; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities..: 0.000438s (num_starts 1; 0.0004s/start)
sp_version_relations_val_t::generate_vals_from_gen_set.: 0.000443s (num_starts 20; 0.0000s/start)
compute_bv_bool_eqclass.: 0.000456s (num_starts 4; 0.0001s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_initialize.: 0.000476s (num_starts 1; 0.0005s/start)
graph_locs_add_all_specvars.: 0.000482s (num_starts 2; 0.0002s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.: 0.000506s (num_starts 1; 0.0005s/start)
populate_locid2expr_map.: 0.000575s (num_starts 2; 0.0003s/start)
aliasing_constraints.convert_to_expr.: 0.0006s (num_starts 146; 0.0000s/start)
tfg_llvm_t::tfg_llvm_fill_remaining_llvm_to_source_mappings_using_avail_exprs.: 0.00061s (num_starts 1; 0.0006s/start)
proof_query_is_trivial_helper.: 0.000623s (num_starts 233; 0.0000s/start)
expr_contains_only_constants_or_sp_versions_or_count_sort_vars.: 0.000658s (num_starts 169; 0.0000s/start)
generate_region_agrees_with_memlabel_constraints_from_expr.: 0.000662s (num_starts 22; 0.0000s/start)
populate_branch_affecting_locs.: 0.000669s (num_starts 3; 0.0002s/start)
compute_ssa_vars_renaming_map.: 0.000686s (num_starts 2; 0.0003s/start)
tfg::populate_loc_definedness.before_solve.: 0.000698s (num_starts 3; 0.0002s/start)
get_uapprox_predicate_list_from_guarded_preds_and_graph_ec.: 0.000704s (num_starts 146; 0.0000s/start)
compute_vars_reaching_definitions.: 0.000792s (num_starts 2; 0.0004s/start)
create_closure_matrix.: 0.000814s (num_starts 27; 0.0000s/start)
tfg_edge_composition_get_edge_cond_using_econd_fn.: 0.000841s (num_starts 17; 0.0000s/start)
expr_simplify_using_sprel_and_memlabel_maps.sprel.: 0.00085s (num_starts 192; 0.0000s/start)
tfg_suffixpath_get_expr_helper.: 0.000874s (num_starts 24; 0.0000s/start)
graph_ec_apply_trans_funs_helper.1.: 0.000875s (num_starts 10; 0.0001s/start)
tfg_llvm_t::tfg_llvm_populate_varname_lr_status.: 0.000875s (num_starts 1; 0.0009s/start)
compute_region_agrees_with_memlabel_eqclass.: 0.000898s (num_starts 4; 0.0002s/start)
graph_visit_exprs_and_keys.: 0.000922s (num_starts 2; 0.0005s/start)
collect_assumes_around_edge.: 0.000936s (num_starts 5; 0.0002s/start)
get_unrolled_loop_paths_from.: 0.000951s (num_starts 4; 0.0002s/start)
edge_update_memlabel_map_for_mlvars.populate_memlabel_map.: 0.000955s (num_starts 20; 0.0000s/start)
graph_visit_exprs.: 0.000973s (num_starts 3; 0.0003s/start)
generate_aliasing_constraints_from_expr.: 0.001003s (num_starts 211; 0.0000s/start)
get_maximal_basic_block_edge_list_starting_at_pc.: 0.00102s (num_starts 278; 0.0000s/start)
tfg::populate_loc_definedness.before_initialize.: 0.001047s (num_starts 3; 0.0003s/start)
tfg::populate_loc_definedness.: 0.001122s (num_starts 3; 0.0004s/start)
get_path_wp_exprs_for_cg_invariant_inference.computeWP_for_pred_across_ec.: 0.001144s (num_starts 10; 0.0001s/start)
populate_transitive_closure.: 0.001163s (num_starts 17; 0.0001s/start)
interesting_wp_exprs_apply_trans_funs.: 0.001188s (num_starts 10; 0.0001s/start)
graph_get_reduced_graph_with_anchor_nodes_only.: 0.001232s (num_starts 5; 0.0002s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_expr_is_provable.: 0.001288s (num_starts 146; 0.0000s/start)
tfg::get_aliasing_constraints_for_edge.: 0.00145s (num_starts 57; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallStart_Lentry%1%fcallStart;(epsilon);pred-type-unknown;-trivial.: 0.001569s (num_starts 1; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallStart_Lentry%1%fcallStart;(epsilon);pred-type-unknown.: 0.001572s (num_starts 1; 0.0016s/start)
tfg_expr_contains_fcall_mem_on_incoming_edge.tfg.computeWP_for_pred_across_ec.: 0.001619s (num_starts 16; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L4%1%fcallStart_Lentry%1%fcallStart;(epsilon);pred-type-unknown;-trivial.: 0.001629s (num_starts 1; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L4%1%fcallStart_Lentry%1%fcallStart;(epsilon);pred-type-unknown.: 0.001631s (num_starts 1; 0.0016s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallStart_Lentry%1%fcallStart;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.001679s (num_starts 1; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallStart_Lentry%1%fcallStart;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.001682s (num_starts 1; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallStart_Lentry%1%fcallStart;(epsilon);outgoing_edges_cover_all_possibilities..: 0.001684s (num_starts 1; 0.0017s/start)
find_dominators.: 0.001688s (num_starts 29; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallStart_Lentry%1%fcallStart;(epsilon);outgoing_edges_cover_all_possibilities..: 0.001692s (num_starts 1; 0.0017s/start)
identify_address_taken_local_variables.: 0.001757s (num_starts 3; 0.0006s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1;linear;-trivial.: 0.00182s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);linear;-trivial.: 0.001821s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);linear.: 0.001824s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1;linear.: 0.001827s (num_starts 1; 0.0018s/start)
corr_graph::get_aliasing_constraints_for_edge_helper.: 0.001831s (num_starts 24; 0.0001s/start)
tfg_llvm_t::tfg_llvm_compute_pc_to_llvm_to_source_varname_map.: 0.001835s (num_starts 4; 0.0005s/start)
graph_identify_back_edges.: 0.001867s (num_starts 25; 0.0001s/start)
graph_edge_composition_get_to_state_using_to_state_fn.: 0.001869s (num_starts 174; 0.0000s/start)
corr_graph::get_aliasing_constraints_for_edge.: 0.001901s (num_starts 24; 0.0001s/start)
graph_identify_natural_loops.: 0.001928s (num_starts 25; 0.0001s/start)
invariant_inference_xfer.expr-group-bvs.from.L4%1%fcallStart_Lentry%1%fcallStart.: 0.001931s (num_starts 1; 0.0019s/start)
proof_query_is_trivial.: 0.00196s (num_starts 233; 0.0000s/start)
parse_yices_model.: 0.002176s (num_starts 1; 0.0022s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallStart_Lentry%2%fcallStart;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.002279s (num_starts 1; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%2%fcallStart_Lentry%2%fcallStart;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.002283s (num_starts 1; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%2%fcallStart_Lentry%2%fcallStart;(epsilon);outgoing_edges_cover_all_possibilities..: 0.002286s (num_starts 1; 0.0023s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallStart_Lentry%2%fcallStart;(epsilon);outgoing_edges_cover_all_possibilities..: 0.002293s (num_starts 1; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%2%fcallStart_Lentry%2%fcallStart;(epsilon);pred-type-unknown;-trivial.: 0.002314s (num_starts 1; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%2%fcallStart_Lentry%2%fcallStart;(epsilon);pred-type-unknown.: 0.002317s (num_starts 1; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);linear;-trivial.: 0.002354s (num_starts 1; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.002367s (num_starts 1; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);abstract-memlabel-asserts-houdini-guess.: 0.002372s (num_starts 1; 0.0024s/start)
get_maximal_basic_block_edge_list_ending_at_pc.: 0.002389s (num_starts 278; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L4%2%fcallStart_Lentry%2%fcallStart;(epsilon);pred-type-unknown;-trivial.: 0.002411s (num_starts 1; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L4%2%fcallStart_Lentry%2%fcallStart;(epsilon);pred-type-unknown.: 0.002414s (num_starts 1; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);linear;-trivial.: 0.002463s (num_starts 1; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1;linear;-trivial.: 0.002465s (num_starts 1; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);linear.: 0.002466s (num_starts 1; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);linear;-trivial.: 0.002467s (num_starts 1; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);linear.: 0.00247s (num_starts 1; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1;linear.: 0.002473s (num_starts 1; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;linear;-trivial.: 0.002513s (num_starts 1; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);linear;-trivial.: 0.002515s (num_starts 1; 0.0025s/start)
invariant_inference_xfer.expr-group-bvs.from.L4%2%fcallStart_Lentry%2%fcallStart.: 0.002577s (num_starts 1; 0.0026s/start)
set_result_and_counter_example.: 0.002615s (num_starts 97; 0.0000s/start)
corr_graph_enumerate_correlations.: 0.002632s (num_starts 5; 0.0005s/start)
collect_aliasing_constraints_around_path_helper.: 0.002653s (num_starts 134; 0.0000s/start)
populate_locs_potentially_modified_on_edge.: 0.002716s (num_starts 3; 0.0009s/start)
decide_hoare_triple_helper_get_aliasing_cons.: 0.002953s (num_starts 29; 0.0001s/start)
get_path_wp_exprs_for_cg_invariant_inference.: 0.002955s (num_starts 4; 0.0007s/start)
graph_with_guessing_sync_preds.: 0.002968s (num_starts 233; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);linear;-trivial.: 0.003033s (num_starts 1; 0.0030s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);linear.: 0.003037s (num_starts 1; 0.0030s/start)
collect_aliasing_constraints_around_path.: 0.003088s (num_starts 86; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallEnd_Lentry%2%fcallEnd;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.003095s (num_starts 1; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%2%fcallEnd_Lentry%2%fcallEnd;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.003098s (num_starts 1; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%2%fcallEnd_Lentry%2%fcallEnd;(epsilon);outgoing_edges_cover_all_possibilities..: 0.003102s (num_starts 1; 0.0031s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallEnd_Lentry%2%fcallEnd;(epsilon);outgoing_edges_cover_all_possibilities..: 0.003109s (num_starts 1; 0.0031s/start)
do_ssa_transformation.: 0.003183s (num_starts 2; 0.0016s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallStart_Lentry%1%fcallStart;(epsilon);pred-type-unknown;-trivial.: 0.003193s (num_starts 2; 0.0016s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallStart_Lentry%1%fcallStart;(epsilon);pred-type-unknown.: 0.003219s (num_starts 2; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.003269s (num_starts 1; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.00327s (num_starts 1; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);abstract-memlabel-asserts-houdini-guess.: 0.003272s (num_starts 1; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1;abstract-memlabel-asserts-houdini-guess.: 0.003275s (num_starts 1; 0.0033s/start)
segment_memory_and_perform_commonMEM_optimization.: 0.003428s (num_starts 146; 0.0000s/start)
expr_linear_relation_holds::visit.var.: 0.003556s (num_starts 175; 0.0000s/start)
check_node_stability_after_CE_addition.: 0.003775s (num_starts 167; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.003851s (num_starts 1; 0.0039s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.003856s (num_starts 1; 0.0039s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);outgoing_edges_cover_all_possibilities..: 0.00386s (num_starts 1; 0.0039s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);outgoing_edges_cover_all_possibilities..: 0.003872s (num_starts 1; 0.0039s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.004006s (num_starts 1; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.004007s (num_starts 1; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);abstract-memlabel-asserts-houdini-guess.: 0.004015s (num_starts 1; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;abstract-memlabel-asserts-houdini-guess.: 0.004021s (num_starts 1; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.004039s (num_starts 1; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);abstract-memlabel-asserts-houdini-guess.: 0.004042s (num_starts 1; 0.0040s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L4%1%fcallStart_Lentry%1%fcallStart.: 0.004061s (num_starts 1; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.004068s (num_starts 1; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.004069s (num_starts 1; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);abstract-memlabel-asserts-houdini-guess.: 0.004072s (num_starts 1; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1;abstract-memlabel-asserts-houdini-guess.: 0.004076s (num_starts 1; 0.0041s/start)
compute_loop_hoisting_select_exprs_at_pcpair.: 0.004127s (num_starts 5; 0.0008s/start)
eqspace::smallest_point_cover_houdini_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.004348s (num_starts 159; 0.0000s/start)
check_wfconds_on_edge.L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd.: 0.004431s (num_starts 2; 0.0022s/start)
compute_regions.: 0.004594s (num_starts 25; 0.0002s/start)
cg_src_dst_tfg_copy.: 0.004714s (num_starts 2; 0.0024s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallStart_Lentry%2%fcallStart;(epsilon);pred-type-unknown;-trivial.: 0.00472s (num_starts 2; 0.0024s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallStart_Lentry%2%fcallStart;(epsilon);pred-type-unknown.: 0.004748s (num_starts 2; 0.0024s/start)
get_next_potential_correlations.: 0.004774s (num_starts 5; 0.0010s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);linear;-trivial.: 0.004841s (num_starts 2; 0.0024s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);linear;-trivial.: 0.004858s (num_starts 2; 0.0024s/start)
decide_hoare_triple_helper;per-path;L4%1%fcallStart_Lentry%1%fcallStart;(epsilon);-trivial.: 0.00487s (num_starts 3; 0.0016s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L4%2%fcallStart_Lentry%2%fcallStart.: 0.004873s (num_starts 1; 0.0049s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);linear.: 0.004881s (num_starts 2; 0.0024s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::sp_version_relations_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.004912s (num_starts 20; 0.0002s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);linear;-trivial.: 0.004922s (num_starts 2; 0.0025s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);linear.: 0.004952s (num_starts 2; 0.0025s/start)
expr_simplify_using_sprel_and_memlabel_maps.model.: 0.00501s (num_starts 192; 0.0000s/start)
update_dst_fcall_edge_using_src_fcall_edge.: 0.005012s (num_starts 2; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.005412s (num_starts 1; 0.0054s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);abstract-memlabel-asserts-houdini-guess.: 0.005416s (num_starts 1; 0.0054s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.sprel.: 0.005742s (num_starts 414; 0.0000s/start)
construct_linear_combination_exprs.: 0.00576s (num_starts 202; 0.0000s/start)
check_wfconds_on_edge.L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd.: 0.005919s (num_starts 2; 0.0030s/start)
create_sp_version_relations_lattice_at_pc.: 0.006062s (num_starts 27; 0.0002s/start)
bv_const_ref_map2expr_map.: 0.006162s (num_starts 202; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.006366s (num_starts 2; 0.0032s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);abstract-memlabel-asserts-houdini-guess.: 0.006411s (num_starts 2; 0.0032s/start)
compute_interesting_exprs_for_invariant_inference_for_pc.: 0.006611s (num_starts 8; 0.0008s/start)
decide_hoare_triple_helper;per-path;L4%2%fcallStart_Lentry%2%fcallStart;(epsilon);-trivial.: 0.007002s (num_starts 3; 0.0023s/start)
expr_simplify_using_sprel_and_memlabel_maps.: 0.007331s (num_starts 192; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;linear;-trivial.: 0.007843s (num_starts 3; 0.0026s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.008101s (num_starts 2; 0.0041s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);abstract-memlabel-asserts-houdini-guess.: 0.008133s (num_starts 2; 0.0041s/start)
eqspace::smallest_point_cover_houdini_expects_stability_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.008309s (num_starts 164; 0.0001s/start)
get_unrolled_paths_from.: 0.008562s (num_starts 36; 0.0002s/start)
corr_graph::get_simplified_non_mem_assumes_helper.: 0.00857s (num_starts 566; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.008671s (num_starts 2; 0.0043s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);abstract-memlabel-asserts-houdini-guess.: 0.00871s (num_starts 2; 0.0044s/start)
get_sprel_map_pair_at_pc.: 0.008929s (num_starts 146; 0.0001s/start)
populate_simplified_to_state.: 0.00952s (num_starts 3; 0.0032s/start)
corr_graph::get_simplified_non_mem_assumes.: 0.00967s (num_starts 566; 0.0000s/start)
populate_simplified_assets.: 0.010079s (num_starts 6; 0.0017s/start)
graph_per_loc_dfa_val_t<avail_exprs_val_t>::meet.: 0.010223s (num_starts 20; 0.0005s/start)
bv_expr_pair_ranges_merge_adjacent.: 0.010283s (num_starts 196; 0.0001s/start)
expr_substitute_using_available_exprs_submap.: 0.011168s (num_starts 102; 0.0001s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities.;-trivial.: 0.011335s (num_starts 5; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;outgoing_edges_cover_all_possibilities.;-trivial.: 0.011339s (num_starts 5; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;outgoing_edges_cover_all_possibilities..: 0.011378s (num_starts 5; 0.0023s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities..: 0.011393s (num_starts 5; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.011814s (num_starts 3; 0.0039s/start)
populate_auxilliary_structures_dependent_on_locs.: 0.012807s (num_starts 3; 0.0043s/start)
decide_hoare_triple_helper;per-query-type;linear;-trivial.: 0.014632s (num_starts 6; 0.0024s/start)
avail_exprs_create_submap.: 0.015062s (num_starts 60; 0.0003s/start)
pth_collect_preds_using_atom_func_and_wp_fn.operator().: 0.015428s (num_starts 828; 0.0000s/start)
ldr_decomposition.: 0.016038s (num_starts 159; 0.0001s/start)
avail_exprs_val_t::generate_vals_from_gen_set.: 0.017036s (num_starts 20; 0.0009s/start)
recomputed_preds_would_be_different_from_current_preds.: 0.018026s (num_starts 477; 0.0000s/start)
get_mask_ranges_for_memlabel.: 0.018287s (num_starts 98; 0.0002s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.model.: 0.019954s (num_starts 414; 0.0000s/start)
src_tfg_counter_example_translate_on_edge_composition.delta{1,0}.: 0.020072s (num_starts 159; 0.0001s/start)
pth_collect_preds_using_atom_func_and_wp_fn.: 0.020203s (num_starts 812; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);pred-type-unknown;-trivial.: 0.020427s (num_starts 9; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);pred-type-unknown.: 0.020451s (num_starts 9; 0.0023s/start)
src_tfg_counter_example_translate_on_edge_composition.: 0.020998s (num_starts 159; 0.0001s/start)
pth_collect_simplified_preds_using_atom_func.: 0.022282s (num_starts 796; 0.0000s/start)
counter_example_satisfies_preds.: 0.022301s (num_starts 504; 0.0000s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.023149s (num_starts 6; 0.0039s/start)
expr_label_memlabels_using_memlabel_map_visitor.simplify.: 0.024212s (num_starts 606; 0.0000s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.: 0.024965s (num_starts 414; 0.0001s/start)
predicate_canonicalized.: 0.026736s (num_starts 202; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);pred-type-unknown;-trivial.: 0.027307s (num_starts 9; 0.0030s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);pred-type-unknown.: 0.027357s (num_starts 9; 0.0030s/start)
graph_edge_composition_get_simplified_edge_cond.: 0.028716s (num_starts 2098; 0.0000s/start)
graph_with_guessing_relax_dst_memlabels_on_ec_for_corr_graph.: 0.029392s (num_starts 5; 0.0059s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::avail_exprs_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.031894s (num_starts 20; 0.0016s/start)
collect_assumes_around_path_helper.: 0.035558s (num_starts 278; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);false-predicate;-trivial.: 0.036024s (num_starts 1; 0.0360s/start)
decide_hoare_triple_helper;per-query-type;false-predicate;-trivial.: 0.036039s (num_starts 1; 0.0360s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;false-predicate;-trivial.: 0.036041s (num_starts 1; 0.0360s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);false-predicate;-trivial.: 0.036043s (num_starts 1; 0.0360s/start)
graph_with_paths::collect_assumes_around_path.: 0.036282s (num_starts 278; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.036535s (num_starts 1; 0.0365s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.036541s (num_starts 1; 0.0365s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.036544s (num_starts 1; 0.0365s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.src_tfg.computeWP_for_pred_across_ec.: 0.038791s (num_starts 290; 0.0001s/start)
decide_hoare_triple_helper;per-path;L4%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);-trivial.: 0.040384s (num_starts 2; 0.0202s/start)
gen_pred_from_coeff_row.simplify.: 0.040885s (num_starts 202; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);pred-type-unknown;-trivial.: 0.041685s (num_starts 15; 0.0028s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);pred-type-unknown.: 0.041732s (num_starts 15; 0.0028s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.dst_tfg.computeWP_for_pred_across_ec.: 0.046625s (num_starts 290; 0.0002s/start)
ldr_decompose_and_linear_solve.: 0.050848s (num_starts 159; 0.0003s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallEnd_Lentry%2%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.05417s (num_starts 1; 0.0542s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%2%fcallEnd_Lentry%2%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.054173s (num_starts 1; 0.0542s/start)
liveness_analysis_conservative::xfer_and_meet.: 0.054849s (num_starts 15; 0.0037s/start)
query:convert_from_z3.: 0.054877s (num_starts 823; 0.0001s/start)
decide_hoare_triple_helper;per-path;L4%2%fcallEnd_Lentry%2%fcallEnd;(L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d);-trivial.: 0.054965s (num_starts 1; 0.0550s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallEnd_Lentry%2%fcallEnd;(L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d);pred-type-unknown;-trivial.: 0.054968s (num_starts 1; 0.0550s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%2%fcallEnd_Lentry%2%fcallEnd;(L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d);pred-type-unknown;-trivial.: 0.054973s (num_starts 1; 0.0550s/start)
decide_hoare_triple_helper;per-path;L4%2%fcallEnd_Lentry%2%fcallEnd;(epsilon);-trivial.: 0.057262s (num_starts 2; 0.0286s/start)
bv_linear_solve.: 0.058113s (num_starts 159; 0.0004s/start)
query:bv_solve.: 0.058987s (num_starts 159; 0.0004s/start)
tfg_relax_pointsto_vals_on_edge.: 0.059811s (num_starts 10; 0.0060s/start)
populate_loc_liveness.: 0.059977s (num_starts 3; 0.0200s/start)
compute_expr_eqclasses_at_pc.: 0.073312s (num_starts 4; 0.0183s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1;pred-type-unknown;-trivial.: 0.073572s (num_starts 2; 0.0368s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);pred-type-unknown;-trivial.: 0.073575s (num_starts 2; 0.0368s/start)
graph_with_guessing_add_node_invariants_top_or_boundary.: 0.074634s (num_starts 6; 0.0124s/start)
cg_add_node.: 0.074985s (num_starts 6; 0.0125s/start)
bv_solve_returning_intermediate_structures.: 0.076017s (num_starts 159; 0.0005s/start)
tfg_postprocess_after_pointsto_analysis.: 0.07619s (num_starts 2; 0.0381s/start)
expr_try_breaking_bvextracts_to_fresh_vars.: 0.07693s (num_starts 146; 0.0005s/start)
tfg_llvm_t::tfg_postprocess_after_pointsto_analysis.: 0.077116s (num_starts 1; 0.0771s/start)
graph_ec_apply_trans_funs_helper.0.: 0.079445s (num_starts 596; 0.0001s/start)
graph_ec_apply_trans_funs_helper.: 0.081979s (num_starts 606; 0.0001s/start)
graph_ec_apply_trans_funs_using_wp_fn.: 0.083235s (num_starts 606; 0.0001s/start)
create_new_corr_graph_edge.new_node.: 0.084178s (num_starts 5; 0.0168s/start)
computeWP_for_pred_across_ec.graph_ec_apply_trans_funs_using_wp_fn.: 0.084944s (num_starts 606; 0.0001s/start)
create_new_corr_graph_edge.: 0.085824s (num_starts 5; 0.0172s/start)
gen_pred_from_coeff_row.: 0.085828s (num_starts 202; 0.0004s/start)
computeWP_for_pred_across_ec.: 0.086407s (num_starts 606; 0.0001s/start)
query:convert_to_z3.: 0.086999s (num_starts 823; 0.0001s/start)
compute_preds_for_bv_points.: 0.087089s (num_starts 72; 0.0012s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.087388s (num_starts 76; 0.0011s/start)
bvsolve_cache_query.miss1.: 0.088715s (num_starts 159; 0.0006s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond;-trivial.: 0.090709s (num_starts 2; 0.0454s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;-dst-edgecond-implies-src-edgecond;-trivial.: 0.090712s (num_starts 2; 0.0454s/start)
bvsolve_cache_query.: 0.095019s (num_starts 159; 0.0006s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.103218s (num_starts 1; 0.1032s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.103226s (num_starts 1; 0.1032s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);abstract-memlabel-asserts-houdini-guess.: 0.103236s (num_starts 1; 0.1032s/start)
edge_composition_apply_trans_funs_on_pred.: 0.103349s (num_starts 233; 0.0004s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.104192s (num_starts 1; 0.1042s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.: 0.104597s (num_starts 290; 0.0004s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);linear.: 0.106566s (num_starts 2; 0.0533s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);pred-type-unknown;-trivial.: 0.113644s (num_starts 2; 0.0568s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;abstract-memlabel-asserts-houdini-guess.: 0.115085s (num_starts 4; 0.0288s/start)
add_fresh_counterexample_at_pc_and_propagate.L4%1%fcallEnd_Lentry%1%fcallEnd.inductive-invariants.: 0.116546s (num_starts 24; 0.0049s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.122309s (num_starts 1; 0.1223s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.122344s (num_starts 1; 0.1223s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L4%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.122353s (num_starts 1; 0.1224s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L4%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.122364s (num_starts 1; 0.1224s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;-dst-edgecond-implies-src-edgecond.: 0.12237s (num_starts 1; 0.1224s/start)
solve_for_bv_points.: 0.127757s (num_starts 159; 0.0008s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallEnd_Lentry%2%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.131589s (num_starts 1; 0.1316s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.131601s (num_starts 1; 0.1316s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%2%fcallEnd_Lentry%2%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.131608s (num_starts 1; 0.1316s/start)
expr_try_converting_unaliased_memslots_to_fresh_vars.: 0.139605s (num_starts 146; 0.0010s/start)
compute_lr_status_for_expr.: 0.142507s (num_starts 105; 0.0014s/start)
compute_new_lr_status_on_locs.calling.compute_lr_status_for_expr.: 0.142898s (num_starts 102; 0.0014s/start)
compute_new_lr_status_on_locs.loc_lr_status.simplify_and_compute_lr_status.: 0.14306s (num_starts 102; 0.0014s/start)
decide_hoare_triple_helper;per-path;L4%2%fcallEnd_Lentry%2%fcallEnd;(L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.146831s (num_starts 1; 0.1468s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallEnd_Lentry%2%fcallEnd;(L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.146834s (num_starts 1; 0.1468s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%2%fcallEnd_Lentry%2%fcallEnd;(L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.146849s (num_starts 1; 0.1468s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recomputed_preds_would_be_different_from_current_preds.: 0.151431s (num_starts 159; 0.0010s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.158937s (num_starts 2; 0.0795s/start)
check_wfconds_on_edge.L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart.: 0.159975s (num_starts 2; 0.0800s/start)
../../include/graph/smallest_point_cover.h.smallest_point_cover_add_point_using_CE.: 0.172231s (num_starts 636; 0.0003s/start)
ftmap_pointsto_analysis_combo_dfa_t.alias_val_xfer_and_meet.: 0.174671s (num_starts 10; 0.0175s/start)
counter_example_falsifies_preds.: 0.17499s (num_starts 121; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%2%fcallEnd_Lentry%2%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.185798s (num_starts 2; 0.0929s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallEnd_Lentry%2%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.185822s (num_starts 2; 0.0929s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);-trivial.: 0.187175s (num_starts 4; 0.0468s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);pred-type-unknown;-trivial.: 0.187192s (num_starts 4; 0.0468s/start)
add_fresh_counterexample_at_pc_and_propagate.L0%0%d_L0%0%d.inductive-invariants.: 0.190945s (num_starts 38; 0.0050s/start)
query:simplify-z3.: 0.191621s (num_starts 1834; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.193216s (num_starts 2; 0.0966s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);linear.: 0.193232s (num_starts 2; 0.0966s/start)
ftmap_pointsto_analysis_combo_dfa_t.ftmap_dfa_flow_insensitive_xfer_and_meet.: 0.193767s (num_starts 10; 0.0194s/start)
counter_example_evaluate_preds.: 0.195827s (num_starts 625; 0.0003s/start)
compute_new_lr_status_on_locs.: 0.199712s (num_starts 20; 0.0100s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%2%fcallEnd_Lentry%2%fcallEnd;(L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d);pred-type-unknown.: 0.201846s (num_starts 2; 0.1009s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallEnd_Lentry%2%fcallEnd;(L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d);pred-type-unknown.: 0.201875s (num_starts 2; 0.1009s/start)
decide_hoare_triple_helper;per-path;L4%2%fcallEnd_Lentry%2%fcallEnd;(L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d).: 0.201888s (num_starts 2; 0.1009s/start)
lhs_set_sort.: 0.201992s (num_starts 146; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.205255s (num_starts 1; 0.2053s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.205257s (num_starts 1; 0.2053s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.205265s (num_starts 1; 0.2053s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);false-predicate.: 0.205267s (num_starts 1; 0.2053s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1;false-predicate.: 0.205271s (num_starts 1; 0.2053s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);false-predicate.: 0.205292s (num_starts 1; 0.2053s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;-dst-edgecond-implies-src-edgecond.: 0.222354s (num_starts 3; 0.0741s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.224025s (num_starts 1; 0.2240s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.224033s (num_starts 1; 0.2240s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.224036s (num_starts 1; 0.2240s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);false-predicate.: 0.22405s (num_starts 1; 0.2240s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1;false-predicate.: 0.224053s (num_starts 1; 0.2241s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);false-predicate.: 0.224057s (num_starts 1; 0.2241s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.235291s (num_starts 1; 0.2353s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.235297s (num_starts 1; 0.2353s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);abstract-memlabel-asserts-houdini-guess.: 0.235305s (num_starts 1; 0.2353s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1;abstract-memlabel-asserts-houdini-guess.: 0.235308s (num_starts 1; 0.2353s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.: 0.236202s (num_starts 1; 0.2362s/start)
decide_hoare_triple_helper;per-path;L4%1%fcallStart_Lentry%1%fcallStart;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.244957s (num_starts 1; 0.2450s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallStart_Lentry%1%fcallStart;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.24496s (num_starts 1; 0.2450s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.244964s (num_starts 1; 0.2450s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1;L4%1%fcallStart_Lentry%1%fcallStart;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.244965s (num_starts 1; 0.2450s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1;L4%1%fcallStart_Lentry%1%fcallStart;(epsilon);dst_edge_composition_proves_false.: 0.244975s (num_starts 1; 0.2450s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1;dst_edge_composition_proves_false.: 0.244979s (num_starts 1; 0.2450s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallStart_Lentry%1%fcallStart;(epsilon);dst_edge_composition_proves_false.: 0.244985s (num_starts 1; 0.2450s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.245328s (num_starts 2; 0.1227s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.248786s (num_starts 1; 0.2488s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.248791s (num_starts 1; 0.2488s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.248795s (num_starts 1; 0.2488s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);false-predicate.: 0.248805s (num_starts 1; 0.2488s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1;false-predicate.: 0.248807s (num_starts 1; 0.2488s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);false-predicate.: 0.248814s (num_starts 1; 0.2488s/start)
decide_hoare_triple_helper;per-path;L4%1%fcallStart_Lentry%1%fcallStart;(epsilon).: 0.24991s (num_starts 4; 0.0625s/start)
get_masked_array_constant.: 0.252772s (num_starts 98; 0.0026s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.253934s (num_starts 2; 0.1270s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;pred-type-unknown;-trivial.: 0.261829s (num_starts 38; 0.0069s/start)
put_smtlib_string_in_file.: 0.26321s (num_starts 194; 0.0014s/start)
evaluate_memmask.: 0.276181s (num_starts 98; 0.0028s/start)
ftmap_run_pointsto_analysis.: 0.277205s (num_starts 2; 0.1386s/start)
tfg_run_pointsto_analysis.: 0.277408s (num_starts 2; 0.1387s/start)
tfg_populate_structs_after_ssa_construction.: 0.281614s (num_starts 2; 0.1408s/start)
tfg_ssa_construct_from_non_ssa_tfg.: 0.286145s (num_starts 2; 0.1431s/start)
corr_graph::add_edge().: 0.290233s (num_starts 5; 0.0580s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.297387s (num_starts 3; 0.0991s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;linear.: 0.305332s (num_starts 6; 0.0509s/start)
add_fresh_counterexample_at_pc_and_propagate.L4%2%fcallStart_Lentry%2%fcallStart.inductive-invariants.: 0.329079s (num_starts 35; 0.0094s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.338481s (num_starts 2; 0.1692s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.338493s (num_starts 2; 0.1692s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);abstract-memlabel-asserts-houdini-guess.: 0.338565s (num_starts 2; 0.1693s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond.: 0.344745s (num_starts 4; 0.0862s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);pred-type-unknown.: 0.359007s (num_starts 4; 0.0898s/start)
add_fresh_counterexample_at_pc_and_propagate.L4%1%fcallStart_Lentry%1%fcallStart.inductive-invariants.: 0.361038s (num_starts 34; 0.0106s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess.: 0.361797s (num_starts 8; 0.0452s/start)
corr_graph_create_and_add_cg_edge_composition_using_src_and_dst_fp.: 0.377259s (num_starts 5; 0.0755s/start)
corr_graph_add_correlation.: 0.377403s (num_starts 5; 0.0755s/start)
corr_graph_add_correlation_and_create_new_correl_entry.: 0.377479s (num_starts 5; 0.0755s/start)
output_lhs_set_guard_etc_and_src_dst_to_file.: 0.380189s (num_starts 37; 0.0103s/start)
evaluate_function_call.: 0.388686s (num_starts 98; 0.0040s/start)
check_wfconds_on_edge.L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d.: 0.39034s (num_starts 2; 0.1952s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.39216s (num_starts 3; 0.1307s/start)
prove_dump_to_file.: 0.400376s (num_starts 37; 0.0108s/start)
collect_inductive_preds_around_path.: 0.402098s (num_starts 233; 0.0017s/start)
graph_to_stream.: 0.406341s (num_starts 115; 0.0035s/start)
dst_tfg_counter_example_translate_on_edge_composition.: 0.418435s (num_starts 159; 0.0026s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.434384s (num_starts 1; 0.4344s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.434385s (num_starts 1; 0.4344s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.434386s (num_starts 1; 0.4344s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.434387s (num_starts 1; 0.4344s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false.: 0.434398s (num_starts 1; 0.4344s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar;dst_edge_composition_proves_false.: 0.4344s (num_starts 1; 0.4344s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false.: 0.434406s (num_starts 1; 0.4344s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon).: 0.434852s (num_starts 2; 0.2174s/start)
decide_hoare_triple_helper;per-path;L4%2%fcallStart_Lentry%2%fcallStart;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.441401s (num_starts 1; 0.4414s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallStart_Lentry%2%fcallStart;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.441403s (num_starts 1; 0.4414s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.441409s (num_starts 1; 0.4414s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L4%2%fcallStart_Lentry%2%fcallStart;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.441411s (num_starts 1; 0.4414s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L4%2%fcallStart_Lentry%2%fcallStart;(epsilon);dst_edge_composition_proves_false.: 0.441419s (num_starts 1; 0.4414s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;dst_edge_composition_proves_false.: 0.441424s (num_starts 1; 0.4414s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallStart_Lentry%2%fcallStart;(epsilon);dst_edge_composition_proves_false.: 0.44143s (num_starts 1; 0.4414s/start)
decide_hoare_triple_helper;per-path;L4%2%fcallStart_Lentry%2%fcallStart;(epsilon).: 0.448491s (num_starts 4; 0.1121s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);pred-type-unknown;-trivial.: 0.461324s (num_starts 23; 0.0201s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1;pred-type-unknown;-trivial.: 0.462929s (num_starts 24; 0.0193s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallEnd_Lentry%2%fcallEnd;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.464427s (num_starts 1; 0.4644s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.464432s (num_starts 1; 0.4644s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L4%2%fcallEnd_Lentry%2%fcallEnd;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.464436s (num_starts 1; 0.4644s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L4%2%fcallEnd_Lentry%2%fcallEnd;(epsilon);dst_edge_composition_proves_false.: 0.464451s (num_starts 1; 0.4645s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1;dst_edge_composition_proves_false.: 0.464454s (num_starts 1; 0.4645s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallEnd_Lentry%2%fcallEnd;(epsilon);dst_edge_composition_proves_false.: 0.464461s (num_starts 1; 0.4645s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);pred-type-unknown;-trivial.: 0.481611s (num_starts 32; 0.0151s/start)
decide_hoare_triple_helper;per-path;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);-trivial.: 0.495072s (num_starts 36; 0.0138s/start)
guarded_predicate_set_and.: 0.510973s (num_starts 146; 0.0035s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.519143s (num_starts 1; 0.5191s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.519144s (num_starts 1; 0.5191s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.519145s (num_starts 1; 0.5191s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;pred-type-unknown;-trivial.: 0.52144s (num_starts 19; 0.0274s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);pred-type-unknown;-trivial.: 0.52147s (num_starts 19; 0.0274s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L4%1%fcallEnd_Lentry%1%fcallEnd.: 0.53435s (num_starts 1; 0.5343s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);pred-type-unknown;-trivial.: 0.54862s (num_starts 28; 0.0196s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);false-predicate.: 0.555212s (num_starts 2; 0.2776s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;false-predicate.: 0.555224s (num_starts 2; 0.2776s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);false-predicate.: 0.555239s (num_starts 2; 0.2776s/start)
check_wfconds_on_edge.: 0.560861s (num_starts 10; 0.0561s/start)
counter_example_translate_on_edge_composition_helper.: 0.581532s (num_starts 806; 0.0007s/start)
apply_mask_and_overlay_array_constant.mk_array_constant.: 0.583527s (num_starts 478; 0.0012s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.584101s (num_starts 1; 0.5841s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.584107s (num_starts 1; 0.5841s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L4%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.584111s (num_starts 1; 0.5841s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L4%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);dst_edge_composition_proves_false.: 0.58412s (num_starts 1; 0.5841s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1;dst_edge_composition_proves_false.: 0.584123s (num_starts 1; 0.5841s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);dst_edge_composition_proves_false.: 0.584129s (num_starts 1; 0.5841s/start)
decide_hoare_triple_helper;per-path;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);-trivial.: 0.595843s (num_starts 33; 0.0181s/start)
decide_hoare_triple_helper;per-path;L4%2%fcallEnd_Lentry%2%fcallEnd;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.596002s (num_starts 2; 0.2980s/start)
apply_mask_and_overlay_array_constant.: 0.634098s (num_starts 478; 0.0013s/start)
decide_hoare_triple_helper;per-path;L4%2%fcallEnd_Lentry%2%fcallEnd;(epsilon).: 0.65341s (num_starts 4; 0.1634s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;pred-type-unknown.: 0.654407s (num_starts 41; 0.0160s/start)
decide_hoare_triple_helper;per-path;L4%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.70638s (num_starts 2; 0.3532s/start)
decide_hoare_triple_helper;per-path;L4%1%fcallEnd_Lentry%1%fcallEnd;(epsilon).: 0.746959s (num_starts 4; 0.1867s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);pred-type-unknown;-trivial.: 0.907597s (num_starts 33; 0.0275s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1;pred-type-unknown;-trivial.: 0.90997s (num_starts 34; 0.0268s/start)
lhs_set_eliminate_constructs_that_the_solver_cannot_handle.: 0.939129s (num_starts 146; 0.0064s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);pred-type-unknown;-trivial.: 0.949081s (num_starts 48; 0.0198s/start)
decide_hoare_triple_helper;per-path;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);-trivial.: 0.962026s (num_starts 52; 0.0185s/start)
add_fresh_counterexample_at_pc_and_propagate.: 0.99887s (num_starts 133; 0.0075s/start)
decide_hoare_triple_with_alias_cons.ce.: 1.00203s (num_starts 171; 0.0059s/start)
prove_spawn_and_join.eliminate_constructs_that_the_solver_cannot_handle1.: 1.03043s (num_starts 146; 0.0071s/start)
check_equivalence_proof.: 1.10369s (num_starts 1; 1.1037s/start)
decide_hoare_triple_helper;per-query-type;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.19721s (num_starts 4; 0.2993s/start)
decide_hoare_triple_helper;per-query-type;false-predicate.: 1.23337s (num_starts 5; 0.2467s/start)
check_preds_on_edge_compositions.dhd_with_ce_propagation.: 1.44004s (num_starts 57; 0.0253s/start)
check_preds_on_edge_compositions.: 1.45306s (num_starts 15; 0.0969s/start)
compute_z3_expr.: 1.63472s (num_starts 920; 0.0018s/start)
expr_do_simplify_using_lhs_set_and_precond.: 1.86407s (num_starts 657; 0.0028s/start)
decide_hoare_triple_helper;per-query-type;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.16929s (num_starts 5; 0.4339s/start)
decide_hoare_triple_helper;per-query-type;dst_edge_composition_proves_false.: 2.1694s (num_starts 5; 0.4339s/start)
decide_hoare_triple.: 2.18345s (num_starts 10; 0.2183s/start)
dst_edge_composition_proves_false.: 2.20254s (num_starts 5; 0.4405s/start)
get_next_dst_edge_composition_to_correlate.: 2.20941s (num_starts 6; 0.3682s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown;-trivial.: 2.22959s (num_starts 117; 0.0191s/start)
decide_hoare_triple_helper;-trivial.: 2.4109s (num_starts 137; 0.0176s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.8599s (num_starts 7; 0.4086s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.85992s (num_starts 7; 0.4086s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);linear.: 2.86254s (num_starts 8; 0.3578s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;linear.: 2.86257s (num_starts 8; 0.3578s/start)
invariant_inference_xfer.expr-group-bvs.from.L4%1%fcallEnd_Lentry%1%fcallEnd.: 2.93025s (num_starts 1; 2.9303s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.964s (num_starts 8; 0.3705s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);linear.: 2.96921s (num_starts 10; 0.2969s/start)
parse_z3_model.: 3.61836s (num_starts 97; 0.0373s/start)
read_counter_examples_from_channel.: 3.64432s (num_starts 60; 0.0607s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 7.22034s (num_starts 15; 0.4814s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 7.22037s (num_starts 15; 0.4814s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);linear.: 7.22055s (num_starts 15; 0.4814s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1;linear.: 7.22059s (num_starts 15; 0.4814s/start)
invariant_inference_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.: 7.36086s (num_starts 1; 7.3609s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 7.41346s (num_starts 17; 0.4361s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);linear.: 7.41394s (num_starts 17; 0.4361s/start)
decide_hoare_triple_helper;per-query-type;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 10.3775s (num_starts 25; 0.4151s/start)
decide_hoare_triple_helper;per-query-type;linear.: 10.3929s (num_starts 31; 0.3353s/start)
decide_hoare_triple_dump_to_file.: 14.5263s (num_starts 37; 0.3926s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 21.0749s (num_starts 8; 2.6344s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 21.0749s (num_starts 8; 2.6344s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);pred-type-unknown.: 21.1485s (num_starts 10; 2.1149s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1;pred-type-unknown.: 21.1486s (num_starts 10; 2.1149s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 21.3201s (num_starts 10; 2.1320s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L0%0%d_L0%0%d.: 21.4612s (num_starts 1; 21.4612s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);pred-type-unknown.: 21.5077s (num_starts 14; 1.5363s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 28.6618s (num_starts 7; 4.0945s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 28.6619s (num_starts 7; 4.0946s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 28.662s (num_starts 7; 4.0946s/start)
decide_hoare_triple_helper;per-path;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 28.867s (num_starts 8; 3.6084s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);pred-type-unknown.: 29.1235s (num_starts 30; 0.9708s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1;pred-type-unknown.: 29.1252s (num_starts 31; 0.9395s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);pred-type-unknown.: 29.1442s (num_starts 39; 0.7473s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 29.3207s (num_starts 30; 0.9774s/start)
decide_hoare_triple_helper;per-path;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd).: 29.3632s (num_starts 44; 0.6673s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart).: 29.5092s (num_starts 34; 0.8679s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L4%1%fcallStart_Lentry%1%fcallStart.: 29.6993s (num_starts 1; 29.6993s/start)
ce_reconcile_sorts.: 34.7684s (num_starts 98; 0.3548s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 53.3298s (num_starts 20; 2.6665s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 53.33s (num_starts 20; 2.6665s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 53.3301s (num_starts 20; 2.6665s/start)
decide_hoare_triple_helper;per-path;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 53.5537s (num_starts 21; 2.5502s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);pred-type-unknown.: 61.0406s (num_starts 53; 1.1517s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1;pred-type-unknown.: 61.0432s (num_starts 54; 1.1304s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);pred-type-unknown.: 61.0829s (num_starts 68; 0.8983s/start)
decide_hoare_triple_helper;per-path;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd).: 61.3202s (num_starts 73; 0.8400s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L4%2%fcallStart_Lentry%2%fcallStart.: 61.6104s (num_starts 1; 61.6104s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 75.2811s (num_starts 20; 3.7641s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 75.2813s (num_starts 20; 3.7641s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 75.2814s (num_starts 20; 3.7641s/start)
decide_hoare_triple_helper;per-path;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 78.7641s (num_starts 29; 2.7160s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);pred-type-unknown.: 83.5271s (num_starts 39; 2.1417s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;pred-type-unknown.: 83.5272s (num_starts 39; 2.1417s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);pred-type-unknown.: 83.5549s (num_starts 48; 1.7407s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L4%1%fcallEnd_Lentry%1%fcallEnd.: 83.6189s (num_starts 1; 83.6189s/start)
decide_hoare_triple_helper;per-path;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart).: 87.086s (num_starts 62; 1.4046s/start)
query:smt.: 147.594s (num_starts 97; 1.5216s/start)
spawn_smt_query.: 151.239s (num_starts 97; 1.5592s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 178.74s (num_starts 58; 3.0817s/start)
solver_provable.: 188.099s (num_starts 146; 1.2883s/start)
solver_satisfiable-cache-miss.: 188.172s (num_starts 97; 1.9399s/start)
solver_satisfiable.: 188.175s (num_starts 147; 1.2801s/start)
expr_is_provable.: 188.32s (num_starts 146; 1.2899s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_commonMEM_optimization.: 188.324s (num_starts 146; 1.2899s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_aliasing_constraints_generation.: 188.331s (num_starts 146; 1.2899s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_simplify_and_add_auxiliary_structures.: 188.335s (num_starts 146; 1.2900s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_precond_is_false.: 188.852s (num_starts 146; 1.2935s/start)
is_expr_equal_using_lhs_set_and_precond_helper.syntactic_check_failed.: 188.861s (num_starts 146; 1.2936s/start)
is_expr_equal_using_lhs_set_and_precond_helper.: 188.864s (num_starts 146; 1.2936s/start)
is_expr_equal_using_lhs_set_and_precond.: 192.385s (num_starts 146; 1.3177s/start)
prove.: 192.386s (num_starts 146; 1.3177s/start)
prove_spawn_and_join_helper.: 192.387s (num_starts 146; 1.3177s/start)
decide_hoare_triple_helper;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 193.08s (num_starts 96; 2.0112s/start)
prove_spawn_and_join.: 194.162s (num_starts 146; 1.3299s/start)
prove_wrapper.proof_query_not_trivial.: 194.581s (num_starts 146; 1.3327s/start)
prove_wrapper.: 194.911s (num_starts 233; 0.8365s/start)
decide_hoare_triple_check_ub.: 195.028s (num_starts 233; 0.8370s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown.: 195.499s (num_starts 175; 1.1171s/start)
update_invariant_state_for_edges.: 207.908s (num_starts 5; 41.5815s/start)
cg_check_new_cg_ec.: 207.908s (num_starts 5; 41.5815s/start)
correl_entry_apply.: 207.908s (num_starts 5; 41.5816s/start)
decide_hoare_triple_helper.: 210.025s (num_starts 233; 0.9014s/start)
expandProductCFG.: 210.122s (num_starts 6; 35.0204s/start)
bestFirstSearch.: 210.607s (num_starts 1; 210.6073s/start)
decide_hoare_triple_with_alias_cons.: 211.03s (num_starts 233; 0.9057s/start)
Time taken for equivalence check.: 211.778s (num_starts 1; 211.7781s/start)

counters:
# of assume sat failures for cg-edge-assume-unknown.: 27
# of paths enumerated.: 5
# of paths expanded.: 5
# of queries to linear solver.: 159
# of smt-solver-queries.: 97
L0%0%d=>Lentry%1%fcallStart-src_ecs.: 1
L0%0%d=>Lentry%1%fcallStart-src_to_pcs.: 1
Lentry%1%fcallEnd=>Lentry%2%fcallStart-src_ecs.: 1
Lentry%1%fcallEnd=>Lentry%2%fcallStart-src_to_pcs.: 1
Lentry%1%fcallStart=>Lentry%1%fcallEnd-src_ecs.: 1
Lentry%1%fcallStart=>Lentry%1%fcallEnd-src_to_pcs.: 1
Lentry%2%fcallEnd=>E0%0%d-src_ecs.: 1
Lentry%2%fcallEnd=>E0%0%d-src_to_pcs.: 1
Lentry%2%fcallStart=>Lentry%2%fcallEnd-src_ecs.: 1
Lentry%2%fcallStart=>Lentry%2%fcallEnd-src_to_pcs.: 1
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.iters.: 1
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.prove_queries.: 1
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L4%1%fcallEnd_Lentry%1%fcallEnd.iters.: 2
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L4%1%fcallEnd_Lentry%1%fcallEnd.prove_queries.: 1
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L4%1%fcallStart_Lentry%1%fcallStart.iters.: 1
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L4%1%fcallStart_Lentry%1%fcallStart.prove_queries.: 0
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L4%2%fcallStart_Lentry%2%fcallStart.iters.: 1
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L4%2%fcallStart_Lentry%2%fcallStart.prove_queries.: 0
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.iters.: 14
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.prove_queries.: 15
smallest_point_cover_xfer.expr-group-bvs.from.L4%1%fcallEnd_Lentry%1%fcallEnd.iters.: 7
smallest_point_cover_xfer.expr-group-bvs.from.L4%1%fcallEnd_Lentry%1%fcallEnd.prove_queries.: 7
smallest_point_cover_xfer.expr-group-bvs.from.L4%1%fcallStart_Lentry%1%fcallStart.iters.: 1
smallest_point_cover_xfer.expr-group-bvs.from.L4%1%fcallStart_Lentry%1%fcallStart.prove_queries.: 0
smallest_point_cover_xfer.expr-group-bvs.from.L4%2%fcallStart_Lentry%2%fcallStart.iters.: 1
smallest_point_cover_xfer.expr-group-bvs.from.L4%2%fcallStart_Lentry%2%fcallStart.prove_queries.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L0%0%d_L0%0%d.iters.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L4%1%fcallEnd_Lentry%1%fcallEnd.iters.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L4%1%fcallEnd_Lentry%1%fcallEnd.prove_queries.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L4%1%fcallStart_Lentry%1%fcallStart.iters.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L4%1%fcallStart_Lentry%1%fcallStart.prove_queries.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L4%2%fcallStart_Lentry%2%fcallStart.iters.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L4%2%fcallStart_Lentry%2%fcallStart.prove_queries.: 0
smallest_point_cover_xfer.spec-coupling-invariants.from.L0%0%d_L0%0%d.iters.: 8
smallest_point_cover_xfer.spec-coupling-invariants.from.L0%0%d_L0%0%d.prove_queries.: 11
smallest_point_cover_xfer.spec-coupling-invariants.from.L4%1%fcallEnd_Lentry%1%fcallEnd.iters.: 32
smallest_point_cover_xfer.spec-coupling-invariants.from.L4%1%fcallEnd_Lentry%1%fcallEnd.prove_queries.: 31
smallest_point_cover_xfer.spec-coupling-invariants.from.L4%1%fcallStart_Lentry%1%fcallStart.iters.: 23
smallest_point_cover_xfer.spec-coupling-invariants.from.L4%1%fcallStart_Lentry%1%fcallStart.prove_queries.: 22
smallest_point_cover_xfer.spec-coupling-invariants.from.L4%2%fcallStart_Lentry%2%fcallStart.iters.: 40
smallest_point_cover_xfer.spec-coupling-invariants.from.L4%2%fcallStart_Lentry%2%fcallStart.prove_queries.: 39
smt-queries-cache-hits.: 50
smt-queries-yices-sat.: 1
smt-queries-z3-sat.: 97
total-correlation-possibilities.: 6
total-correlation-possibilities-mod-lsprels.: 6
total-correlations-explored.: 6

flags:
dst-aloc.: 0
dst-edges.: 5
dst-nodes.: 6
dst-sp-updates.: 0
final-CG-alloc-correlations.: 0
final-CG-counterexamples-generated-at-L4%1%fcallEnd_Lentry%1%fcallEnd.: 0
final-CG-counterexamples-generated-at-L4%1%fcallStart_Lentry%1%fcallStart.: 19
final-CG-counterexamples-generated-at-L4%2%fcallEnd_Lentry%2%fcallEnd.: 3
final-CG-counterexamples-generated-at-L4%2%fcallStart_Lentry%2%fcallStart.: 9
final-CG-counterexamples-total-at-L4%1%fcallEnd_Lentry%1%fcallEnd.: 17
final-CG-counterexamples-total-at-L4%1%fcallStart_Lentry%1%fcallStart.: 22
final-CG-counterexamples-total-at-L4%2%fcallEnd_Lentry%2%fcallEnd.: 10
final-CG-counterexamples-total-at-L4%2%fcallStart_Lentry%2%fcallStart.: 10
final-CG-dealloc-correlations.: 0
final-CG-dht-queries.: 5
final-CG-edges.: 5
final-CG-nodes.: 6
final-CG-num-invariants.: 47
final-CG-super-edges.: 0
src-edges.: 5
src-nodes.: 6
timeout-occured.: 1

info:
eq-state.: find_correlation
final-CG-time-secs.: 208.29
final-CG-time-to-total-time-ratio.: 0.99
query-time-to-total-time-ratio.: 0.70

Context stats:
exprs: count: 268776
sorts: count: 172
num_proof_queries: 146
num_proof_queries_answered_by_syntactic_check: 0
cache_stats:
m_simplify:
	----------- total:	10794
	        hit ratio:	0.966185
m_simplify_solver:
	----------- total:	5419
	        hit ratio:	0.813434
m_z3_solver_substitution:
	----------- total:	1011
	        hit ratio:	0
m_replace_donotsimplify_using_solver_expressions_by_free_vars:
	----------- total:	1011
	        hit ratio:	0
m_expr_size:
	----------- total:	12661
	        hit ratio:	0.911223
m_expr_evaluates_to_constant_visitor:
	----------- total:	273439
	        hit ratio:	0.451362

z3_solver expr_query_cache entry size: 97
	----------- total:	147
	             hits:	50
	        hit ratio:	0.340136
histogram (time taken by solver in ms):
[  37.8900,   61.7969) (avg.   47.7318)  : 15
[  61.7969,  100.7879) (avg.   81.6340)  : 4
[ 100.7879,  164.3805) (avg.  131.8303)  : 27
[ 164.3805,  268.0972) (avg.  195.6120)  : 1
[ 268.0972,  437.2544) (avg.  341.3352)  : 12
[ 437.2544,  713.1421) (avg.  552.1542)  : 5
[ 713.1421, 1163.1025) (avg.  956.0164)  : 5
[1163.1025, 1896.9675) (avg. 1291.0150)  : 1
[1896.9675, 3093.8682) (avg. 2328.5400)  : 2
[3093.8682, 5045.9590) (avg. 5008.3880)  : 25
histogram (number of quantifiers in query)
[ 0,  6) (avg.  0)                       : 1
[ 6, 11) (avg.  0)                       : 0
[11, 17) (avg.  0)                       : 0
[17, 22) (avg.  0)                       : 0
[22, 28) (avg. 25)                       : 39
[28, 33) (avg. 28)                       : 1
[33, 39) (avg. 36)                       : 53
[39, 44) (avg.  0)                       : 0
[44, 50) (avg. 45)                       : 3
[50, 55) (avg.  0)                       : 0
histogram (number of nodes in z3 ast)
[176, 223) (avg. 176)                    : 1
[223, 269) (avg.   0)                    : 0
[269, 316) (avg.   0)                    : 0
[316, 362) (avg.   0)                    : 0
[362, 408) (avg. 405)                    : 1
[408, 455) (avg. 441)                    : 26
[455, 501) (avg. 467)                    : 14
[501, 548) (avg. 529)                    : 42
[548, 594) (avg. 576)                    : 10
[594, 640) (avg. 620)                    : 3
Top 10 highest time taking queries:
1. [5.045s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallStart_Lentry%1%fcallStart.cond_apply_set_elem0_of_1.2
2. [5.040s] SOLVER_RES_TIMEOUT decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.6
3. [5.040s] SOLVER_RES_TIMEOUT decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.35
4. [5.040s] SOLVER_RES_TIMEOUT decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.8
5. [5.040s] SOLVER_RES_TIMEOUT decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.30
6. [5.038s] SOLVER_RES_TIMEOUT decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.1
7. [5.038s] SOLVER_RES_TIMEOUT decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.41
8. [5.037s] SOLVER_RES_TIMEOUT decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.16
9. [5.037s] SOLVER_RES_TIMEOUT decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.8
10. [5.036s] SOLVER_RES_TIMEOUT decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.14

<MSG>3:53 : Successfully computed equivalence for function: bar.</MSG>
<MSG>3:54 : Computing equivalence for function: foo...</MSG>
<MSG>3:54 : Constructing SSA for SPEC TFG...</MSG>
<MSG>3:54 : Constructing SSA for LLVM TFG...</MSG>
<MSG>3:54 : Finished SSA construction for both TFGs...</MSG>
<MSG>3:54 : Computing equivalence of the two TFGs ( SPEC and LLVM )...</MSG>
<MSG>3:54 : Chose (after CE propagation) product-TFG foo (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: nullptr
  src-full-pathset: nullptr
<MSG>3:54 : product-TFG foo: Enumerating correlations for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L0%0%d_L0%0%d
</MSG>
<MSG>3:54 : Considering 1 paths to src pc L3%7%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>3:54 : Attempting correlation of src pathset L0%0%d=>L3%7%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>3:54 : Found 1 feasible correlations for paths to src pc L3%7%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>3:54 : Considering 1 paths to src pc L3%11%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>3:54 : Attempting correlation of src pathset L0%0%d=>L3%11%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>3:54 : Found 1 feasible correlations for paths to src pc L3%11%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>3:54 : Considering 1 paths to src pc L3%19%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>3:54 : Attempting correlation of src pathset L0%0%d=>L3%19%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>3:54 : Found 1 feasible correlations for paths to src pc L3%19%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>3:54 : Considering 1 paths to src pc L3%23%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>3:54 : Attempting correlation of src pathset L0%0%d=>L3%23%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>3:54 : Found 1 feasible correlations for paths to src pc L3%23%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>3:54 : product-TFG foo: Found 4 correlations for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L0%0%d_L0%0%d
</MSG>
<MSG>3:54 : product-TFG foo created 4 possibilities in group foo.A...</MSG>
<MSG>3:54 : Chose (for CE propagation) product-TFG foo.A1 (d:0, s:0, sp: 0) from a frontier of size 4...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%7%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>3:54 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1...</MSG>
<MSG>3:54 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1...</MSG>
<MSG>3:54 : Creating ssa-path for the src-tfg path L0%0%d --> L3%7%bbentry ending at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>3:54 : Adding a CG edge composition using the src path L0%0%d --> L3%7%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>3:54 : Identifying common alloc-deallocs in the src path L0%0%d --> L3%7%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry
</MSG>
<MSG>3:54 : Identified no common alloc-deallocs in the src path L0%0%d --> L3%7%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>3:54 : Adding new edge to the product-TFG foo.A1 for fromPC L0%0%d_L0%0%d and toPC L3%7%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%7%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>3:54 : foo.A1: Computing loop hoisting select expressions at toPC L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>3:54 : foo.A1: Computing loop hoisting non-linear expressions at toPC L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>3:54 : foo.A1: Adding node L3%7%bbentry_Lfor.cond%1%bbentry to the product-TFG...</MSG>
<MSG>3:54 : foo.A1: Getting alloca-ptrs on edge L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>3:54 : foo.A1: Found no alloca-ptrs on edge L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>3:54 : foo.A1: Adding edge L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>3:54 : foo.A1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>3:54 : foo.A1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>3:54 : foo.A1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>3:54 : foo.A1: Propagated 2 out of 2 counter-examples across edge L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry</MSG>
<MSG>3:54 : foo.A1: Added the 2 propagated CEs at PC L3%7%bbentry_Lfor.cond%1%bbentry and propagated further.
</MSG>
<MSG>3:54 : foo.A1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>3:54 : foo.A1: Finished executing CG's add edge function...</MSG>
<MSG>3:54 : foo.A1: Computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>3:54 : foo.A1: Done computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>3:54 : Done adding new edge to the product-TFG foo.A1 for fromPC L0%0%d_L0%0%d and toPC L3%7%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%7%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>3:54 : Done adding a CG edge composition using the src path L0%0%d --> L3%7%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>3:54 : Added correlation to the product-TFG foo.A1 (d:0, s:0, sp: 0) and created a correlation entry...</MSG>
<MSG>3:54 : Chose (after CE propagation) product-TFG foo.A1 (d:0, s:0, sp: 0) from a frontier of size 4...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 1 counterexamples (for correlating 7 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%7%bbentry[mu 1, delta {1,0}]
<MSG>3:54 : foo.A1: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>3:54 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>3:54 : foo.A1: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>3:54 : foo.A1: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>3:54 : foo.A1: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>3:54 : foo.A1: Relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>3:54 : foo.A1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:55 : foo.A1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>3:55 : foo.A1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:55 : foo.A1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht9-prove_trivial4-prove5...</MSG>
<MSG>3:55 : foo.A1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:55 : foo.A1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>3:55 : foo.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:56 : foo.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>3:56 : foo.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:57 : foo.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>3:57 : foo.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:57 : foo.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>3:57 : foo.A1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 5 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:57 : foo.A1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>3:57 : foo.A1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:58 : foo.A1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht7-prove_trivial0-prove7...</MSG>
<MSG>3:58 : foo.A1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:58 : foo.A1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:58 : foo.A1: Done relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>3:58 : foo.A1: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>3:58 : foo.A1 (d:3, s:0, sp: 0): checked newly added edge and inferred invariants...</MSG>
<MSG>3:58 : foo.A1 (d:3, s:0, sp: 5): Chosen CG is no longer the most promising correlation entry; returning delayed-exploration...</MSG>
<MSG>3:58 : Chosen product-TFG foo.A1 will be explored later...</MSG>
<MSG>3:58 : Decided to explore product-TFG later after re-evaluating its best-first-search rank...</MSG>
<MSG>3:58 : Chose (for CE propagation) product-TFG foo.A2 (d:0, s:0, sp: 0) from a frontier of size 4...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%11%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>3:58 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A2...</MSG>
<MSG>3:58 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A2...</MSG>
<MSG>3:58 : Creating ssa-path for the src-tfg path L0%0%d --> L3%11%bbentry ending at L3%11%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>3:58 : Adding a CG edge composition using the src path L0%0%d --> L3%11%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>3:58 : Identifying common alloc-deallocs in the src path L0%0%d --> L3%11%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry
</MSG>
<MSG>3:58 : Identified no common alloc-deallocs in the src path L0%0%d --> L3%11%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>3:58 : Adding new edge to the product-TFG foo.A2 for fromPC L0%0%d_L0%0%d and toPC L3%11%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%11%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>3:58 : foo.A2: Computing loop hoisting select expressions at toPC L3%11%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>3:58 : foo.A2: Computing loop hoisting non-linear expressions at toPC L3%11%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>3:58 : foo.A2: Adding node L3%11%bbentry_Lfor.cond%1%bbentry to the product-TFG...</MSG>
<MSG>3:58 : foo.A2: Getting alloca-ptrs on edge L0%0%d_L0%0%d=>L3%11%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>3:58 : foo.A2: Found no alloca-ptrs on edge L0%0%d_L0%0%d=>L3%11%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>3:58 : foo.A2: Adding edge L0%0%d_L0%0%d=>L3%11%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>3:58 : foo.A2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>3:58 : foo.A2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>3:58 : foo.A2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>3:58 : foo.A2: marking unstable at L0%0%d_L0%0%d due to failing condition:
wfcond.from_pcL0%0%d_L0%0%d.to_pcL3%11%bbentry_Lfor.cond%1%bbentry-dst-edgecond-implies-src-edgecond
140276 : 1 { 0x1 } : BOOL                          : true
161722 : not(140276) : BOOL                        : false
140295 : input.spec-%var-a-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]] : ( map(lambda(Lambda39434Var, ite(and(bvule(0, Lambda39434Var), bvule(Lambda39434Var, 4294967295)), false, false)), lambda(Lambda39435Var, map(lambda(Lambda39436Var, false), lambda(Lambda39437Var, 0)))) )
140286 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140701 : map_get(140295, 140286) : SUM[UNIT,MAP[BV:32 -> BV:32]] : ( sum(ite(ite(and(bvule(0, 0), bvule(0, 4294967295)), false, false), 1, 0), unit, map(lambda(Lambda42798Var, false), lambda(Lambda42799Var, 0))) )
140303 : 1 { 0x1 +1.0e1025 } : INT                 : 1
161720 : sum_is(140701, 140303) : BOOL             : false
161723 : or(161722, 161720) : BOOL                 : false

ce =
=counter_example_begin z3v487.ce1363 20622984789c65b727c8a88ac859bc75
=input.spec-%var-a-1
1 : Lambda39434Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda39435Var : BV:32
11 : Lambda39436Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda39437Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-a-0.L3%7%bbentry
1 : Lambda39451Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda39452Var : BV:32
11 : Lambda39453Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda39454Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 55 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 56; 59 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 60; 403 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 404; 407 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 408; 275251587 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 275251588; 275251591 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 275251592; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 56 { 0x38 +1.667e129 } : BV:32
=input.dst.llvm-%arr
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 275251588 { 0x10680184 +1.81254625e161 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 404 { 0x194 +1.4816e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 56 { 0x38 +1.667e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 59 { 0x3b +1.703e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 275251588 { 0x10680184 +1.81254625e161 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 275251591 { 0x10680187 +1.81254661e161 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 404 { 0x194 +1.4816e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 407 { 0x197 +1.4851e129 } : BV:32
=input.spec-%var-a-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-a-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-a-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-a-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-a-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-a-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=counter_example.random_seed
1792223968
=counter_example_end


failcond-expr = or(not(true), sum_is(map_get(input.spec-%var-a-1, 0), 1)):
1 : 1 { 0x1 } : BOOL
2 : not(1) : BOOL
3 : input.spec-%var-a-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : map_get(3, 4) : SUM[UNIT,MAP[BV:32 -> BV:32]]
6 : 1 { 0x1 +1.0e1025 } : INT
7 : sum_is(5, 6) : BOOL
8 : or(2, 7) : BOOL
</MSG>
<MSG>3:58 : foo.A2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>3:58 : foo.A2: Finished executing CG's add edge function...</MSG>
<MSG>3:58 : foo.A2: Computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%11%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>3:58 : foo.A2: Done computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%11%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>3:58 : Done adding new edge to the product-TFG foo.A2 for fromPC L0%0%d_L0%0%d and toPC L3%11%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%11%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>3:58 : Done adding a CG edge composition using the src path L0%0%d --> L3%11%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>3:58 : Failed correlation of src pathset L0%0%d=>L3%11%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d: failcond = wfcond.from_pcL0%0%d_L0%0%d.to_pcL3%11%bbentry_Lfor.cond%1%bbentry-dst-edgecond-implies-src-edgecond
140276 : 1 { 0x1 } : BOOL                          : true
161722 : not(140276) : BOOL                        : false
140295 : input.spec-%var-a-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]] : ( map(lambda(Lambda39434Var, ite(and(bvule(0, Lambda39434Var), bvule(Lambda39434Var, 4294967295)), false, false)), lambda(Lambda39435Var, map(lambda(Lambda39436Var, false), lambda(Lambda39437Var, 0)))) )
140286 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140701 : map_get(140295, 140286) : SUM[UNIT,MAP[BV:32 -> BV:32]] : ( sum(ite(ite(and(bvule(0, 0), bvule(0, 4294967295)), false, false), 1, 0), unit, map(lambda(Lambda42798Var, false), lambda(Lambda42799Var, 0))) )
140303 : 1 { 0x1 +1.0e1025 } : INT                 : 1
161720 : sum_is(140701, 140303) : BOOL             : false
161723 : or(161722, 161720) : BOOL                 : false

ce =
=counter_example_begin z3v487.ce1363 20622984789c65b727c8a88ac859bc75
=input.spec-%var-a-1
1 : Lambda39434Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda39435Var : BV:32
11 : Lambda39436Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda39437Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-a-0.L3%7%bbentry
1 : Lambda39451Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda39452Var : BV:32
11 : Lambda39453Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda39454Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 55 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 56; 59 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 60; 403 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 404; 407 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 408; 275251587 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 275251588; 275251591 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 275251592; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 56 { 0x38 +1.667e129 } : BV:32
=input.dst.llvm-%arr
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 275251588 { 0x10680184 +1.81254625e161 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 404 { 0x194 +1.4816e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 56 { 0x38 +1.667e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 59 { 0x3b +1.703e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 275251588 { 0x10680184 +1.81254625e161 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 275251591 { 0x10680187 +1.81254661e161 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 404 { 0x194 +1.4816e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 407 { 0x197 +1.4851e129 } : BV:32
=input.spec-%var-a-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-a-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-a-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-a-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-a-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-a-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=counter_example.random_seed
1792223968
=counter_example_end


</MSG>
<MSG>3:58 : Discovered that the correlation was useless for the product-TFG foo.A2 (d:0, s:0, sp: 0)...</MSG>
<MSG>3:58 : Chose (after CE propagation) product-TFG foo.A1 (d:3, s:0, sp: 5) from a frontier of size 1...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 12 counterexamples (for correlating 7 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%7%bbentry[mu 1, delta {1,0}]
<MSG>3:58 : foo.A1: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>3:58 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>3:58 : foo.A1: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>3:58 : foo.A1: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>3:58 : foo.A1: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>3:58 : foo.A1: Relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>3:58 : foo.A1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:58 : foo.A1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>3:58 : foo.A1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 7 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:58 : foo.A1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht5-prove_trivial4-prove1...</MSG>
<MSG>3:58 : foo.A1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:58 : foo.A1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>3:58 : foo.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:58 : foo.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:58 : foo.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:58 : foo.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:58 : foo.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:58 : foo.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>3:58 : foo.A1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 5 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:58 : foo.A1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>3:58 : foo.A1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:58 : foo.A1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>3:58 : foo.A1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:58 : foo.A1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:58 : foo.A1: Done relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged ...</MSG>
<MSG>3:58 : foo.A1: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>3:58 : foo.A1 (d:3, s:0, sp: 5): checked newly added edge and inferred invariants...</MSG>
<MSG>3:58 : foo.A1 (d:3, s:0, sp: 5): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>3:58 : product-TFG foo.A1: Enumerating correlations for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] starting at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>3:58 : Considering 2 paths to src pc L3%7%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>3:58 : Attempting correlation of src pathset L3%7%bbentry=>L3%7%bbentry[mu 0, delta {0,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>3:58 : Attempting correlation of src pathset L3%7%bbentry=>L3%7%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>3:58 : Found 2 feasible correlations for paths to src pc L3%7%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>3:58 : Considering 1 paths to src pc L3%11%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>3:58 : Attempting correlation of src pathset L3%7%bbentry=>L3%11%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>3:58 : Found 1 feasible correlations for paths to src pc L3%11%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>3:58 : Considering 1 paths to src pc L3%19%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>3:58 : Attempting correlation of src pathset L3%7%bbentry=>L3%19%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>3:58 : Found 1 feasible correlations for paths to src pc L3%19%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>3:58 : Considering 1 paths to src pc L3%23%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>3:58 : Attempting correlation of src pathset L3%7%bbentry=>L3%23%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>3:58 : Found 1 feasible correlations for paths to src pc L3%23%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>3:58 : product-TFG foo.A1: Found 5 correlations for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] starting at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>3:58 : product-TFG foo.A1 created 5 possibilities in group foo.A1.B...</MSG>
<MSG>3:58 : Chose (for CE propagation) product-TFG foo.A1.B3 (d:3, s:0, sp: 5) from a frontier of size 5...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 14 counterexamples (for correlating 7 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%11%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>3:58 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B3...</MSG>
<MSG>3:58 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B3...</MSG>
<MSG>3:58 : Creating ssa-path for the src-tfg path L3%7%bbentry --> L3%11%bbentry ending at L3%11%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>3:58 : Adding a CG edge composition using the src path L3%7%bbentry --> L3%11%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>3:58 : Identifying common alloc-deallocs in the src path L3%7%bbentry --> L3%11%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry
</MSG>
<MSG>3:58 : Identified no common alloc-deallocs in the src path L3%7%bbentry --> L3%11%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>3:58 : Adding new edge to the product-TFG foo.A1.B3 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%11%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%11%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>3:58 : foo.A1.B3: Computing loop hoisting select expressions at toPC L3%11%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>3:58 : foo.A1.B3: Computing loop hoisting non-linear expressions at toPC L3%11%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>3:58 : foo.A1.B3: Adding node L3%11%bbentry_Lfor.cond1%1%bbentry to the product-TFG...</MSG>
<MSG>3:59 : foo.A1.B3: Getting alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>3:59 : foo.A1.B3: Found no alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>3:59 : foo.A1.B3: Adding edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>3:59 : foo.A1.B3: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>3:59 : foo.A1.B3: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>3:59 : foo.A1.B3: Propagating counter-examples across the newly added edge...</MSG>
<MSG>4:00 : foo.A1.B3: Propagated 8 out of 14 counter-examples across edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry</MSG>
<MSG>4:00 : foo.A1.B3: Added the 8 propagated CEs at PC L3%11%bbentry_Lfor.cond1%1%bbentry and propagated further.
</MSG>
<MSG>4:00 : foo.A1.B3: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>4:00 : foo.A1.B3: Finished executing CG's add edge function...</MSG>
<MSG>4:00 : foo.A1.B3: Computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:00 : foo.A1.B3: Done computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:00 : Done adding new edge to the product-TFG foo.A1.B3 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%11%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%11%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>4:00 : Done adding a CG edge composition using the src path L3%7%bbentry --> L3%11%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:00 : Added correlation to the product-TFG foo.A1.B3 (d:5, s:0, sp: 5) and created a correlation entry...</MSG>
<MSG>4:00 : Chose (for CE propagation) product-TFG foo.A1.B4 (d:3, s:0, sp: 5) from a frontier of size 5...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 14 counterexamples (for correlating 7 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%19%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>4:00 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B4...</MSG>
<MSG>4:00 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B4...</MSG>
<MSG>4:00 : Creating ssa-path for the src-tfg path L3%7%bbentry --> L3%19%bbentry ending at L3%19%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:00 : Adding a CG edge composition using the src path L3%7%bbentry --> L3%19%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:00 : Identifying common alloc-deallocs in the src path L3%7%bbentry --> L3%19%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry
</MSG>
<MSG>4:00 : Identified no common alloc-deallocs in the src path L3%7%bbentry --> L3%19%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:00 : Adding new edge to the product-TFG foo.A1.B4 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%19%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%19%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>4:00 : foo.A1.B4: Computing loop hoisting select expressions at toPC L3%19%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:00 : foo.A1.B4: Computing loop hoisting non-linear expressions at toPC L3%19%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:00 : foo.A1.B4: Adding node L3%19%bbentry_Lfor.cond1%1%bbentry to the product-TFG...</MSG>
<MSG>4:00 : foo.A1.B4: Getting alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:00 : foo.A1.B4: Found no alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:00 : foo.A1.B4: Adding edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:00 : foo.A1.B4: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>4:00 : foo.A1.B4: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>4:00 : foo.A1.B4: Propagating counter-examples across the newly added edge...</MSG>
<MSG>4:02 : foo.A1.B4: Propagated 8 out of 14 counter-examples across edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry</MSG>
<MSG>4:02 : foo.A1.B4: Added the 8 propagated CEs at PC L3%19%bbentry_Lfor.cond1%1%bbentry and propagated further.
</MSG>
<MSG>4:02 : foo.A1.B4: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>4:02 : foo.A1.B4: Finished executing CG's add edge function...</MSG>
<MSG>4:02 : foo.A1.B4: Computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:02 : foo.A1.B4: Done computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:02 : Done adding new edge to the product-TFG foo.A1.B4 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%19%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%19%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>4:02 : Done adding a CG edge composition using the src path L3%7%bbentry --> L3%19%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:02 : Added correlation to the product-TFG foo.A1.B4 (d:5, s:0, sp: 5) and created a correlation entry...</MSG>
<MSG>4:02 : Chose (for CE propagation) product-TFG foo.A1.B5 (d:3, s:0, sp: 5) from a frontier of size 5...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 14 counterexamples (for correlating 7 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%23%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>4:02 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B5...</MSG>
<MSG>4:02 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B5...</MSG>
<MSG>4:02 : Creating ssa-path for the src-tfg path L3%7%bbentry --> L3%23%bbentry ending at L3%23%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:02 : Adding a CG edge composition using the src path L3%7%bbentry --> L3%23%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:02 : Identifying common alloc-deallocs in the src path L3%7%bbentry --> L3%23%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry
</MSG>
<MSG>4:02 : Identified no common alloc-deallocs in the src path L3%7%bbentry --> L3%23%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:02 : Adding new edge to the product-TFG foo.A1.B5 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%23%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%23%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>4:02 : foo.A1.B5: Computing loop hoisting select expressions at toPC L3%23%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:02 : foo.A1.B5: Computing loop hoisting non-linear expressions at toPC L3%23%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:02 : foo.A1.B5: Adding node L3%23%bbentry_Lfor.cond1%1%bbentry to the product-TFG...</MSG>
<MSG>4:02 : foo.A1.B5: Getting alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%23%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:02 : foo.A1.B5: Found no alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%23%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:02 : foo.A1.B5: Adding edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%23%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:02 : foo.A1.B5: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>4:02 : foo.A1.B5: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>4:02 : foo.A1.B5: Propagating counter-examples across the newly added edge...</MSG>
<MSG>4:02 : foo.A1.B5: marking unstable at L3%7%bbentry_Lfor.cond%1%bbentry due to failing condition:
wfcond.from_pcL3%7%bbentry_Lfor.cond%1%bbentry.to_pcL3%23%bbentry_Lfor.cond1%1%bbentry-dst-edgecond-implies-src-edgecond
140743 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32 : 0
140422 : input.dst.llvm-%n : BV:32                 : 536870912
140744 : bvult(140743, 140422) : BOOL              : true
141222 : not(140744) : BOOL                        : false
140655 : input.spec-%var-a-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]] : ( map(lambda(Lambda43097Var, ite(and(bvule(0, Lambda43097Var), bvule(Lambda43097Var, 536870911)), true, ite(and(bvule(536870912, Lambda43097Var), bvule(Lambda43097Var, 4294967295)), false, false))), lambda(Lambda43098Var, map(lambda(Lambda43099Var, false), lambda(Lambda43100Var, 0)))) )
140656 : input.spec-%var-i-0.L3%7%bbentry : BV:32  : 0
140657 : map_get(140655, 140656) : SUM[UNIT,MAP[BV:32 -> BV:32]] : ( sum(ite(ite(and(bvule(0, 0), bvule(0, 536870911)), true, ite(and(bvule(536870912, 0), bvule(0, 4294967295)), false, false)), 1, 0), unit, map(lambda(Lambda44029Var, false), lambda(Lambda44030Var, 0))) )
140303 : 1 { 0x1 +1.0e1025 } : INT                 : 1
161718 : sum_is(140657, 140303) : BOOL             : true
163177 : sum_get(140657, 140303) : MAP[BV:32 -> BV:32] : ( map(lambda(Lambda44067Var, false), lambda(Lambda44068Var, 0)) )
140286 : 0 { 0x0 +1.0e129 } : BV:32                : 0
163180 : map_get(163177, 140286) : SUM[UNIT,BV:32] : ( sum(ite(false, 1, 0), unit, 0) )
163181 : sum_is(163180, 140303) : BOOL             : false
163182 : and(161718, 163181) : BOOL                : false
163187 : or(141222, 163182) : BOOL                 : false

ce =
=counter_example_begin z3v487.ce1710 582bc43e9bb5e25648db57ba0ccc232
=input.spec-%var-a-1
1 : Lambda43080Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 536870912 { 0x20000000 +1.0e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda43081Var : BV:32
18 : Lambda43082Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda43083Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-a-0.L3%7%bbentry
1 : Lambda43097Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 536870912 { 0x20000000 +1.0e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda43098Var : BV:32
18 : Lambda43099Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda43100Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 239493131 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 239493132; 239493135 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 239493136; 253407235 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 253407236; 253407239 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 253407240; 2151199215 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 2151199216; 2151199219 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2151199220; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%n
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2151199216 { 0x8038b1f0 -2143768080 -1.44293022e129 } : BV:32
=input.dst.llvm-%arr
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 253407236 { 0xf1ab004 +1.20849657e159 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 239493132 { 0xe46600c +1.54980611e157 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2151199216 { 0x8038b1f0 -2143768080 -1.44293022e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2151199219 { 0x8038b1f3 -2143768077 -1.44293057e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 253407236 { 0xf1ab004 +1.20849657e159 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 253407239 { 0xf1ab007 +1.20849692e159 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 239493132 { 0xe46600c +1.54980611e157 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 239493135 { 0xe46600f +1.54980647e157 } : BV:32
=input.spec-%var-a-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-a-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-a-1.0.1
1 : ([ 0; 536870911 ] -> true, [ 536870912; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-a-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-a-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-a-0.L3%7%bbentry.0.1
1 : ([ 0; 536870911 ] -> true, [ 536870912; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=counter_example.random_seed
833071634
=counter_example_end


failcond-expr = or(not(bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)), and(sum_is(map_get(input.spec-%var-a-0.L3%7%bbentry, input.spec-%var-i-0.L3%7%bbentry), 1), sum_is(map_get(sum_get(map_get(input.spec-%var-a-0.L3%7%bbentry, input.spec-%var-i-0.L3%7%bbentry), 1), 0), 1))):
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
4 : not(3) : BOOL
5 : input.spec-%var-a-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
6 : input.spec-%var-i-0.L3%7%bbentry : BV:32
7 : map_get(5, 6) : SUM[UNIT,MAP[BV:32 -> BV:32]]
8 : 1 { 0x1 +1.0e1025 } : INT
9 : sum_is(7, 8) : BOOL
10 : sum_get(7, 8) : MAP[BV:32 -> BV:32]
11 : 0 { 0x0 +1.0e129 } : BV:32
12 : map_get(10, 11) : SUM[UNIT,BV:32]
13 : sum_is(12, 8) : BOOL
14 : and(9, 13) : BOOL
15 : or(4, 14) : BOOL
</MSG>
<MSG>4:02 : foo.A1.B5: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>4:02 : foo.A1.B5: Finished executing CG's add edge function...</MSG>
<MSG>4:02 : foo.A1.B5: Computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%23%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:02 : foo.A1.B5: Done computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%23%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:02 : Done adding new edge to the product-TFG foo.A1.B5 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%23%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%23%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>4:02 : Done adding a CG edge composition using the src path L3%7%bbentry --> L3%23%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:02 : Failed correlation of src pathset L3%7%bbentry=>L3%23%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry: failcond = wfcond.from_pcL3%7%bbentry_Lfor.cond%1%bbentry.to_pcL3%23%bbentry_Lfor.cond1%1%bbentry-dst-edgecond-implies-src-edgecond
140743 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32 : 0
140422 : input.dst.llvm-%n : BV:32                 : 536870912
140744 : bvult(140743, 140422) : BOOL              : true
141222 : not(140744) : BOOL                        : false
140655 : input.spec-%var-a-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]] : ( map(lambda(Lambda43097Var, ite(and(bvule(0, Lambda43097Var), bvule(Lambda43097Var, 536870911)), true, ite(and(bvule(536870912, Lambda43097Var), bvule(Lambda43097Var, 4294967295)), false, false))), lambda(Lambda43098Var, map(lambda(Lambda43099Var, false), lambda(Lambda43100Var, 0)))) )
140656 : input.spec-%var-i-0.L3%7%bbentry : BV:32  : 0
140657 : map_get(140655, 140656) : SUM[UNIT,MAP[BV:32 -> BV:32]] : ( sum(ite(ite(and(bvule(0, 0), bvule(0, 536870911)), true, ite(and(bvule(536870912, 0), bvule(0, 4294967295)), false, false)), 1, 0), unit, map(lambda(Lambda44029Var, false), lambda(Lambda44030Var, 0))) )
140303 : 1 { 0x1 +1.0e1025 } : INT                 : 1
161718 : sum_is(140657, 140303) : BOOL             : true
163177 : sum_get(140657, 140303) : MAP[BV:32 -> BV:32] : ( map(lambda(Lambda44067Var, false), lambda(Lambda44068Var, 0)) )
140286 : 0 { 0x0 +1.0e129 } : BV:32                : 0
163180 : map_get(163177, 140286) : SUM[UNIT,BV:32] : ( sum(ite(false, 1, 0), unit, 0) )
163181 : sum_is(163180, 140303) : BOOL             : false
163182 : and(161718, 163181) : BOOL                : false
163187 : or(141222, 163182) : BOOL                 : false

ce =
=counter_example_begin z3v487.ce1710 582bc43e9bb5e25648db57ba0ccc232
=input.spec-%var-a-1
1 : Lambda43080Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 536870912 { 0x20000000 +1.0e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda43081Var : BV:32
18 : Lambda43082Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda43083Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-a-0.L3%7%bbentry
1 : Lambda43097Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 536870912 { 0x20000000 +1.0e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda43098Var : BV:32
18 : Lambda43099Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda43100Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 239493131 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 239493132; 239493135 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 239493136; 253407235 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 253407236; 253407239 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 253407240; 2151199215 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 2151199216; 2151199219 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2151199220; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%n
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2151199216 { 0x8038b1f0 -2143768080 -1.44293022e129 } : BV:32
=input.dst.llvm-%arr
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 253407236 { 0xf1ab004 +1.20849657e159 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 239493132 { 0xe46600c +1.54980611e157 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2151199216 { 0x8038b1f0 -2143768080 -1.44293022e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2151199219 { 0x8038b1f3 -2143768077 -1.44293057e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 253407236 { 0xf1ab004 +1.20849657e159 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 253407239 { 0xf1ab007 +1.20849692e159 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 239493132 { 0xe46600c +1.54980611e157 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 239493135 { 0xe46600f +1.54980647e157 } : BV:32
=input.spec-%var-a-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-a-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-a-1.0.1
1 : ([ 0; 536870911 ] -> true, [ 536870912; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-a-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-a-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-a-0.L3%7%bbentry.0.1
1 : ([ 0; 536870911 ] -> true, [ 536870912; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=counter_example.random_seed
833071634
=counter_example_end


</MSG>
<MSG>4:02 : Discovered that the correlation was useless for the product-TFG foo.A1.B5 (d:3, s:0, sp: 5)...</MSG>
<MSG>4:02 : Chose (for CE propagation) product-TFG foo.A1.B2 (d:3, s:0, sp: 5) from a frontier of size 4...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 14 counterexamples (for correlating 7 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%7%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>4:02 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B2...</MSG>
<MSG>4:02 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B2...</MSG>
<MSG>4:02 : Creating ssa-path for the src-tfg path L3%7%bbentry --> L3%7%bbentry ending at L3%7%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:02 : Adding a CG edge composition using the src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:02 : Identifying common alloc-deallocs in the src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry
</MSG>
<MSG>4:02 : Identified no common alloc-deallocs in the src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:02 : Adding new edge to the product-TFG foo.A1.B2 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%7%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>4:02 : foo.A1.B2: Computing loop hoisting select expressions at toPC L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:02 : foo.A1.B2: Computing loop hoisting non-linear expressions at toPC L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:02 : foo.A1.B2: Adding node L3%7%bbentry_Lfor.cond1%1%bbentry to the product-TFG...</MSG>
<MSG>4:02 : foo.A1.B2: Getting alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:02 : foo.A1.B2: Found no alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:02 : foo.A1.B2: Adding edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:02 : foo.A1.B2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>4:02 : foo.A1.B2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>4:02 : foo.A1.B2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>4:08 : foo.A1.B2: marking unstable at L3%7%bbentry_Lfor.cond%1%bbentry due to failing condition:
wfcond.from_pcL3%7%bbentry_Lfor.cond%1%bbentry.to_pcL3%7%bbentry_Lfor.cond1%1%bbentry-dst-edgecond-implies-src-edgecond
140743 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32 : 0
140422 : input.dst.llvm-%n : BV:32                 : 2155905040
140744 : bvult(140743, 140422) : BOOL              : true
141222 : not(140744) : BOOL                        : false
140655 : input.spec-%var-a-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]] : ( 156566 = bvconcat(ite(eq(bvadd(3, bvmul(4, Lambda41394Var), 0), 14), 0, ite(eq(bvadd(3, bvmul(4, Lambda41394Var), 0), 2147483648), 0, ite(eq(bvadd(3, bvmul(4, Lambda41394Var), 0), 16), 0, ite(eq(bvadd(3, bvmul(4, Lambda41394Var), 0), 2147483649), 0, ite(eq(bvadd(3, bvmul(4, Lambda41394Var), 0), 13), 0, ite(eq(bvadd(3, bvmul(4, Lambda41394Var), 0), 4194314), 0, ite(eq(bvadd(3, bvmul(4, Lambda41394Var), 0), 4194313), 0, ite(eq(bvadd(3, bvmul(4, Lambda41394Var), 0), 65540), 16, ite(eq(bvadd(3, bvmul(4, Lambda41394Var), 0), 1), 0, ite(eq(bvadd(3, bvmul(4, Lambda41394Var), 0), 2147483651), 0, ite(eq(bvadd(3, bvmul(4, Lambda41394Var), 0), 0), 13, ite(eq(bvadd(3, bvmul(4, Lambda41394Var), 0), 2147483650), 0, ite(eq(bvadd(3, bvmul(4, Lambda41394Var), 0), 15), 0, ite(eq(bvadd(3, bvmul(4, Lambda41394Var), 0), 3), 0, ite(eq(bvadd(3, bvmul(4, Lambda41394Var), 0), 4194312), 0, ite(eq(bvadd(3, bvmul(4, Lambda41394Var), 0), 2), 0, 128)))))))))))))))), ite(eq(bvadd(2, bvmul(4, Lambda41394Var), 0), 14), 0, ite(eq(bvadd(2, bvmul(4, Lambda41394Var), 0), 2147483648), 0, ite(eq(bvadd(2, bvmul(4, Lambda41394Var), 0), 16), 0, ite(eq(bvadd(2, bvmul(4, Lambda41394Var), 0), 2147483649), 0, ite(eq(bvadd(2, bvmul(4, Lambda41394Var), 0), 13), 0, ite(eq(bvadd(2, bvmul(4, Lambda41394Var), 0), 4194314), 0, ite(eq(bvadd(2, bvmul(4, Lambda41394Var), 0), 4194313), 0, ite(eq(bvadd(2, bvmul(4, Lambda41394Var), 0), 65540), 16, ite(eq(bvadd(2, bvmul(4, Lambda41394Var), 0), 1), 0, ite(eq(bvadd(2, bvmul(4, Lambda41394Var), 0), 2147483651), 0, ite(eq(bvadd(2, bvmul(4, Lambda41394Var), 0), 0), 13, ite(eq(bvadd(2, bvmul(4, Lambda41394Var), 0), 2147483650), 0, ite(eq(bvadd(2, bvmul(4, Lambda41394Var), 0), 15), 0, ite(eq(bvadd(2, bvmul(4, Lambda41394Var), 0), 3), 0, ite(eq(bvadd(2, bvmul(4, Lambda41394Var), 0), 4194312), 0, ite(eq(bvadd(2, bvmul(4, Lambda41394Var), 0), 2), 0, 128)))))))))))))))), ite(eq(bvadd(1, bvmul(4, Lambda41394Var), 0), 14), 0, ite(eq(bvadd(1, bvmul(4, Lambda41394Var), 0), 2147483648), 0, ite(eq(bvadd(1, bvmul(4, Lambda41394Var), 0), 16), 0, ite(eq(bvadd(1, bvmul(4, Lambda41394Var), 0), 2147483649), 0, ite(eq(bvadd(1, bvmul(4, Lambda41394Var), 0), 13), 0, ite(eq(bvadd(1, bvmul(4, Lambda41394Var), 0), 4194314), 0, ite(eq(bvadd(1, bvmul(4, Lambda41394Var), 0), 4194313), 0, ite(eq(bvadd(1, bvmul(4, Lambda41394Var), 0), 65540), 16, ite(eq(bvadd(1, bvmul(4, Lambda41394Var), 0), 1), 0, ite(eq(bvadd(1, bvmul(4, Lambda41394Var), 0), 2147483651), 0, ite(eq(bvadd(1, bvmul(4, Lambda41394Var), 0), 0), 13, ite(eq(bvadd(1, bvmul(4, Lambda41394Var), 0), 2147483650), 0, ite(eq(bvadd(1, bvmul(4, Lambda41394Var), 0), 15), 0, ite(eq(bvadd(1, bvmul(4, Lambda41394Var), 0), 3), 0, ite(eq(bvadd(1, bvmul(4, Lambda41394Var), 0), 4194312), 0, ite(eq(bvadd(1, bvmul(4, Lambda41394Var), 0), 2), 0, 128)))))))))))))))), ite(eq(bvadd(bvmul(4, Lambda41394Var), 0), 14), 0, ite(eq(bvadd(bvmul(4, Lambda41394Var), 0), 2147483648), 0, ite(eq(bvadd(bvmul(4, Lambda41394Var), 0), 16), 0, ite(eq(bvadd(bvmul(4, Lambda41394Var), 0), 2147483649), 0, ite(eq(bvadd(bvmul(4, Lambda41394Var), 0), 13), 0, ite(eq(bvadd(bvmul(4, Lambda41394Var), 0), 4194314), 0, ite(eq(bvadd(bvmul(4, Lambda41394Var), 0), 4194313), 0, ite(eq(bvadd(bvmul(4, Lambda41394Var), 0), 65540), 16, ite(eq(bvadd(bvmul(4, Lambda41394Var), 0), 1), 0, ite(eq(bvadd(bvmul(4, Lambda41394Var), 0), 2147483651), 0, ite(eq(bvadd(bvmul(4, Lambda41394Var), 0), 0), 13, ite(eq(bvadd(bvmul(4, Lambda41394Var), 0), 2147483650), 0, ite(eq(bvadd(bvmul(4, Lambda41394Var), 0), 15), 0, ite(eq(bvadd(bvmul(4, Lambda41394Var), 0), 3), 0, ite(eq(bvadd(bvmul(4, Lambda41394Var), 0), 4194312), 0, ite(eq(bvadd(bvmul(4, Lambda41394Var), 0), 2), 0, 128)))))))))))))))));map[156395](lambda(Lambda41393Var, ite(and(bvule(0, Lambda41393Var), bvule(Lambda41393Var, 2155905039)), true, ite(and(bvule(2155905040, Lambda41393Var), bvule(Lambda41393Var, 4294967295)), false, false))), lambda[156394](Lambda41394Var, map[156393](lambda(Lambda41395Var, ite(and(eq(ite(and(bvule(0, Lambda41394Var), bvule(Lambda41394Var, 2155905039)), 0, ite(and(bvule(2155905041, Lambda41394Var), bvule(Lambda41394Var, 4294967295)), 2155905041, ite(and(bvule(2155905040, Lambda41394Var), bvule(Lambda41394Var, 2155905040)), 2155905040, 2155905040))), 0), eq(ite(and(bvule(0, Lambda41395Var), bvule(Lambda41395Var, 2147483647)), 0, ite(and(bvule(2147483648, Lambda41395Var), bvule(Lambda41395Var, 2147483648)), 2147483648, ite(and(bvule(2147483649, Lambda41395Var), bvule(Lambda41395Var, 4294967295)), 2147483649, 2147483649))), 0)), true, false)), lambda[156392](Lambda41396Var, ite[156837](and(eq(Lambda41394Var, 0), eq(Lambda41396Var, 0)), 0, bvconcat[156836](ite[156736](eq[156705](bvadd[156704](3, bvmul(4, Lambda41396Var), 156566), 14), 0, ite[156735](eq[156706](bvadd[156704](3, bvmul(4, Lambda41396Var), 156566), 2147483648), 0, ite[156734](eq[156707](bvadd[156704](3, bvmul(4, Lambda41396Var), 156566), 16), 0, ite[156733](eq[156708](bvadd[156704](3, bvmul(4, Lambda41396Var), 156566), 2147483649), 0, ite[156732](eq[156709](bvadd[156704](3, bvmul(4, Lambda41396Var), 156566), 13), 0, ite[156731](eq[156710](bvadd[156704](3, bvmul(4, Lambda41396Var), 156566), 4194314), 0, ite[156730](eq[156711](bvadd[156704](3, bvmul(4, Lambda41396Var), 156566), 4194313), 0, ite[156729](eq[156712](bvadd[156704](3, bvmul(4, Lambda41396Var), 156566), 65540), 16, ite[156728](eq[156713](bvadd[156704](3, bvmul(4, Lambda41396Var), 156566), 1), 0, ite[156727](eq[156714](bvadd[156704](3, bvmul(4, Lambda41396Var), 156566), 2147483651), 0, ite[156726](eq[156715](bvadd[156704](3, bvmul(4, Lambda41396Var), 156566), 0), 13, ite[156725](eq[156716](bvadd[156704](3, bvmul(4, Lambda41396Var), 156566), 2147483650), 0, ite[156724](eq[156717](bvadd[156704](3, bvmul(4, Lambda41396Var), 156566), 15), 0, ite[156723](eq[156718](bvadd[156704](3, bvmul(4, Lambda41396Var), 156566), 3), 0, ite[156722](eq[156719](bvadd[156704](3, bvmul(4, Lambda41396Var), 156566), 4194312), 0, ite[156721](eq[156720](bvadd[156704](3, bvmul(4, Lambda41396Var), 156566), 2), 0, 128)))))))))))))))), ite[156769](eq[156738](bvadd[156737](2, bvmul(4, Lambda41396Var), 156566), 14), 0, ite[156768](eq[156739](bvadd[156737](2, bvmul(4, Lambda41396Var), 156566), 2147483648), 0, ite[156767](eq[156740](bvadd[156737](2, bvmul(4, Lambda41396Var), 156566), 16), 0, ite[156766](eq[156741](bvadd[156737](2, bvmul(4, Lambda41396Var), 156566), 2147483649), 0, ite[156765](eq[156742](bvadd[156737](2, bvmul(4, Lambda41396Var), 156566), 13), 0, ite[156764](eq[156743](bvadd[156737](2, bvmul(4, Lambda41396Var), 156566), 4194314), 0, ite[156763](eq[156744](bvadd[156737](2, bvmul(4, Lambda41396Var), 156566), 4194313), 0, ite[156762](eq[156745](bvadd[156737](2, bvmul(4, Lambda41396Var), 156566), 65540), 16, ite[156761](eq[156746](bvadd[156737](2, bvmul(4, Lambda41396Var), 156566), 1), 0, ite[156760](eq[156747](bvadd[156737](2, bvmul(4, Lambda41396Var), 156566), 2147483651), 0, ite[156759](eq[156748](bvadd[156737](2, bvmul(4, Lambda41396Var), 156566), 0), 13, ite[156758](eq[156749](bvadd[156737](2, bvmul(4, Lambda41396Var), 156566), 2147483650), 0, ite[156757](eq[156750](bvadd[156737](2, bvmul(4, Lambda41396Var), 156566), 15), 0, ite[156756](eq[156751](bvadd[156737](2, bvmul(4, Lambda41396Var), 156566), 3), 0, ite[156755](eq[156752](bvadd[156737](2, bvmul(4, Lambda41396Var), 156566), 4194312), 0, ite[156754](eq[156753](bvadd[156737](2, bvmul(4, Lambda41396Var), 156566), 2), 0, 128)))))))))))))))), ite[156802](eq[156771](bvadd[156770](1, bvmul(4, Lambda41396Var), 156566), 14), 0, ite[156801](eq[156772](bvadd[156770](1, bvmul(4, Lambda41396Var), 156566), 2147483648), 0, ite[156800](eq[156773](bvadd[156770](1, bvmul(4, Lambda41396Var), 156566), 16), 0, ite[156799](eq[156774](bvadd[156770](1, bvmul(4, Lambda41396Var), 156566), 2147483649), 0, ite[156798](eq[156775](bvadd[156770](1, bvmul(4, Lambda41396Var), 156566), 13), 0, ite[156797](eq[156776](bvadd[156770](1, bvmul(4, Lambda41396Var), 156566), 4194314), 0, ite[156796](eq[156777](bvadd[156770](1, bvmul(4, Lambda41396Var), 156566), 4194313), 0, ite[156795](eq[156778](bvadd[156770](1, bvmul(4, Lambda41396Var), 156566), 65540), 16, ite[156794](eq[156779](bvadd[156770](1, bvmul(4, Lambda41396Var), 156566), 1), 0, ite[156793](eq[156780](bvadd[156770](1, bvmul(4, Lambda41396Var), 156566), 2147483651), 0, ite[156792](eq[156781](bvadd[156770](1, bvmul(4, Lambda41396Var), 156566), 0), 13, ite[156791](eq[156782](bvadd[156770](1, bvmul(4, Lambda41396Var), 156566), 2147483650), 0, ite[156790](eq[156783](bvadd[156770](1, bvmul(4, Lambda41396Var), 156566), 15), 0, ite[156789](eq[156784](bvadd[156770](1, bvmul(4, Lambda41396Var), 156566), 3), 0, ite[156788](eq[156785](bvadd[156770](1, bvmul(4, Lambda41396Var), 156566), 4194312), 0, ite[156787](eq[156786](bvadd[156770](1, bvmul(4, Lambda41396Var), 156566), 2), 0, 128)))))))))))))))), ite[156835](eq[156804](bvadd[156803](bvmul(4, Lambda41396Var), 156566), 14), 0, ite[156834](eq[156805](bvadd[156803](bvmul(4, Lambda41396Var), 156566), 2147483648), 0, ite[156833](eq[156806](bvadd[156803](bvmul(4, Lambda41396Var), 156566), 16), 0, ite[156832](eq[156807](bvadd[156803](bvmul(4, Lambda41396Var), 156566), 2147483649), 0, ite[156831](eq[156808](bvadd[156803](bvmul(4, Lambda41396Var), 156566), 13), 0, ite[156830](eq[156809](bvadd[156803](bvmul(4, Lambda41396Var), 156566), 4194314), 0, ite[156829](eq[156810](bvadd[156803](bvmul(4, Lambda41396Var), 156566), 4194313), 0, ite[156828](eq[156811](bvadd[156803](bvmul(4, Lambda41396Var), 156566), 65540), 16, ite[156827](eq[156812](bvadd[156803](bvmul(4, Lambda41396Var), 156566), 1), 0, ite[156826](eq[156813](bvadd[156803](bvmul(4, Lambda41396Var), 156566), 2147483651), 0, ite[156825](eq[156814](bvadd[156803](bvmul(4, Lambda41396Var), 156566), 0), 13, ite[156824](eq[156815](bvadd[156803](bvmul(4, Lambda41396Var), 156566), 2147483650), 0, ite[156823](eq[156816](bvadd[156803](bvmul(4, Lambda41396Var), 156566), 15), 0, ite[156822](eq[156817](bvadd[156803](bvmul(4, Lambda41396Var), 156566), 3), 0, ite[156821](eq[156818](bvadd[156803](bvmul(4, Lambda41396Var), 156566), 4194312), 0, ite[156820](eq[156819](bvadd[156803](bvmul(4, Lambda41396Var), 156566), 2), 0, 128)))))))))))))))))))))) )
140656 : input.spec-%var-i-0.L3%7%bbentry : BV:32  : 0
140657 : map_get(140655, 140656) : SUM[UNIT,MAP[BV:32 -> BV:32]] : ( 163585 = bvconcat(ite(eq(bvadd(3, bvmul(4, 0), 0), 14), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 2147483648), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 16), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 2147483649), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 13), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 4194314), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 4194313), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 65540), 16, ite(eq(bvadd(3, bvmul(4, 0), 0), 1), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 2147483651), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 0), 13, ite(eq(bvadd(3, bvmul(4, 0), 0), 2147483650), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 15), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 3), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 4194312), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 2), 0, 128)))))))))))))))), ite(eq(bvadd(2, bvmul(4, 0), 0), 14), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 2147483648), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 16), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 2147483649), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 13), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 4194314), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 4194313), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 65540), 16, ite(eq(bvadd(2, bvmul(4, 0), 0), 1), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 2147483651), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 0), 13, ite(eq(bvadd(2, bvmul(4, 0), 0), 2147483650), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 15), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 3), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 4194312), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 2), 0, 128)))))))))))))))), ite(eq(bvadd(1, bvmul(4, 0), 0), 14), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 2147483648), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 16), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 2147483649), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 13), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 4194314), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 4194313), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 65540), 16, ite(eq(bvadd(1, bvmul(4, 0), 0), 1), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 2147483651), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 0), 13, ite(eq(bvadd(1, bvmul(4, 0), 0), 2147483650), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 15), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 3), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 4194312), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 2), 0, 128)))))))))))))))), ite(eq(bvadd(bvmul(4, 0), 0), 14), 0, ite(eq(bvadd(bvmul(4, 0), 0), 2147483648), 0, ite(eq(bvadd(bvmul(4, 0), 0), 16), 0, ite(eq(bvadd(bvmul(4, 0), 0), 2147483649), 0, ite(eq(bvadd(bvmul(4, 0), 0), 13), 0, ite(eq(bvadd(bvmul(4, 0), 0), 4194314), 0, ite(eq(bvadd(bvmul(4, 0), 0), 4194313), 0, ite(eq(bvadd(bvmul(4, 0), 0), 65540), 16, ite(eq(bvadd(bvmul(4, 0), 0), 1), 0, ite(eq(bvadd(bvmul(4, 0), 0), 2147483651), 0, ite(eq(bvadd(bvmul(4, 0), 0), 0), 13, ite(eq(bvadd(bvmul(4, 0), 0), 2147483650), 0, ite(eq(bvadd(bvmul(4, 0), 0), 15), 0, ite(eq(bvadd(bvmul(4, 0), 0), 3), 0, ite(eq(bvadd(bvmul(4, 0), 0), 4194312), 0, ite(eq(bvadd(bvmul(4, 0), 0), 2), 0, 128)))))))))))))))));sum[166562](ite(ite(and(bvule(0, 0), bvule(0, 2155905039)), true, ite(and(bvule(2155905040, 0), bvule(0, 4294967295)), false, false)), 1, 0), unit, map[166561](lambda(Lambda44337Var, ite(and(eq(ite(and(bvule(0, 0), bvule(0, 2155905039)), 0, ite(and(bvule(2155905041, 0), bvule(0, 4294967295)), 2155905041, ite(and(bvule(2155905040, 0), bvule(0, 2155905040)), 2155905040, 2155905040))), 0), eq(ite(and(bvule(0, Lambda44337Var), bvule(Lambda44337Var, 2147483647)), 0, ite(and(bvule(2147483648, Lambda44337Var), bvule(Lambda44337Var, 2147483648)), 2147483648, ite(and(bvule(2147483649, Lambda44337Var), bvule(Lambda44337Var, 4294967295)), 2147483649, 2147483649))), 0)), true, false)), lambda[166560](Lambda44338Var, ite[166559](and(eq(0, 0), eq(Lambda44338Var, 0)), 0, bvconcat[166558](ite[164673](eq[164577](bvadd[164576](3, bvmul(4, Lambda44338Var), 163585), 14), 0, ite[164672](eq[164578](bvadd[164576](3, bvmul(4, Lambda44338Var), 163585), 2147483648), 0, ite[164671](eq[164579](bvadd[164576](3, bvmul(4, Lambda44338Var), 163585), 16), 0, ite[164670](eq[164580](bvadd[164576](3, bvmul(4, Lambda44338Var), 163585), 2147483649), 0, ite[164669](eq[164581](bvadd[164576](3, bvmul(4, Lambda44338Var), 163585), 13), 0, ite[164668](eq[164582](bvadd[164576](3, bvmul(4, Lambda44338Var), 163585), 4194314), 0, ite[164657](eq[164605](bvadd[164576](3, bvmul(4, Lambda44338Var), 163585), 4194313), 0, ite[164656](eq[164606](bvadd[164576](3, bvmul(4, Lambda44338Var), 163585), 65540), 16, ite[164655](eq[164608](bvadd[164576](3, bvmul(4, Lambda44338Var), 163585), 1), 0, ite[164654](eq[164609](bvadd[164576](3, bvmul(4, Lambda44338Var), 163585), 2147483651), 0, ite[164653](eq[164640](bvadd[164576](3, bvmul(4, Lambda44338Var), 163585), 0), 13, ite[164651](eq[164641](bvadd[164576](3, bvmul(4, Lambda44338Var), 163585), 2147483650), 0, ite[164650](eq[164642](bvadd[164576](3, bvmul(4, Lambda44338Var), 163585), 15), 0, ite[164649](eq[164643](bvadd[164576](3, bvmul(4, Lambda44338Var), 163585), 3), 0, ite[164648](eq[164645](bvadd[164576](3, bvmul(4, Lambda44338Var), 163585), 4194312), 0, ite[164647](eq[164646](bvadd[164576](3, bvmul(4, Lambda44338Var), 163585), 2), 0, 128)))))))))))))))), ite[166444](eq[164675](bvadd[164674](2, bvmul(4, Lambda44338Var), 163585), 14), 0, ite[166443](eq[164676](bvadd[164674](2, bvmul(4, Lambda44338Var), 163585), 2147483648), 0, ite[166442](eq[164677](bvadd[164674](2, bvmul(4, Lambda44338Var), 163585), 16), 0, ite[166441](eq[164678](bvadd[164674](2, bvmul(4, Lambda44338Var), 163585), 2147483649), 0, ite[166440](eq[164679](bvadd[164674](2, bvmul(4, Lambda44338Var), 163585), 13), 0, ite[166439](eq[164680](bvadd[164674](2, bvmul(4, Lambda44338Var), 163585), 4194314), 0, ite[166438](eq[164681](bvadd[164674](2, bvmul(4, Lambda44338Var), 163585), 4194313), 0, ite[166437](eq[164682](bvadd[164674](2, bvmul(4, Lambda44338Var), 163585), 65540), 16, ite[166436](eq[164683](bvadd[164674](2, bvmul(4, Lambda44338Var), 163585), 1), 0, ite[166435](eq[164684](bvadd[164674](2, bvmul(4, Lambda44338Var), 163585), 2147483651), 0, ite[166428](eq[166417](bvadd[164674](2, bvmul(4, Lambda44338Var), 163585), 0), 13, ite[166427](eq[166418](bvadd[164674](2, bvmul(4, Lambda44338Var), 163585), 2147483650), 0, ite[166426](eq[166419](bvadd[164674](2, bvmul(4, Lambda44338Var), 163585), 15), 0, ite[166425](eq[166420](bvadd[164674](2, bvmul(4, Lambda44338Var), 163585), 3), 0, ite[166424](eq[166421](bvadd[164674](2, bvmul(4, Lambda44338Var), 163585), 4194312), 0, ite[166423](eq[166422](bvadd[164674](2, bvmul(4, Lambda44338Var), 163585), 2), 0, 128)))))))))))))))), ite[166478](eq[166446](bvadd[166445](1, bvmul(4, Lambda44338Var), 163585), 14), 0, ite[166477](eq[166447](bvadd[166445](1, bvmul(4, Lambda44338Var), 163585), 2147483648), 0, ite[166476](eq[166448](bvadd[166445](1, bvmul(4, Lambda44338Var), 163585), 16), 0, ite[166475](eq[166449](bvadd[166445](1, bvmul(4, Lambda44338Var), 163585), 2147483649), 0, ite[166474](eq[166450](bvadd[166445](1, bvmul(4, Lambda44338Var), 163585), 13), 0, ite[166473](eq[166451](bvadd[166445](1, bvmul(4, Lambda44338Var), 163585), 4194314), 0, ite[166472](eq[166452](bvadd[166445](1, bvmul(4, Lambda44338Var), 163585), 4194313), 0, ite[166471](eq[166453](bvadd[166445](1, bvmul(4, Lambda44338Var), 163585), 65540), 16, ite[166470](eq[166454](bvadd[166445](1, bvmul(4, Lambda44338Var), 163585), 1), 0, ite[166469](eq[166455](bvadd[166445](1, bvmul(4, Lambda44338Var), 163585), 2147483651), 0, ite[166468](eq[166456](bvadd[166445](1, bvmul(4, Lambda44338Var), 163585), 0), 13, ite[166467](eq[166457](bvadd[166445](1, bvmul(4, Lambda44338Var), 163585), 2147483650), 0, ite[166466](eq[166458](bvadd[166445](1, bvmul(4, Lambda44338Var), 163585), 15), 0, ite[166465](eq[166459](bvadd[166445](1, bvmul(4, Lambda44338Var), 163585), 3), 0, ite[166464](eq[166460](bvadd[166445](1, bvmul(4, Lambda44338Var), 163585), 4194312), 0, ite[166463](eq[166461](bvadd[166445](1, bvmul(4, Lambda44338Var), 163585), 2), 0, 128)))))))))))))))), ite[166557](eq[166526](bvadd[166479](bvmul(4, Lambda44338Var), 163585), 14), 0, ite[166556](eq[166527](bvadd[166479](bvmul(4, Lambda44338Var), 163585), 2147483648), 0, ite[166555](eq[166528](bvadd[166479](bvmul(4, Lambda44338Var), 163585), 16), 0, ite[166554](eq[166529](bvadd[166479](bvmul(4, Lambda44338Var), 163585), 2147483649), 0, ite[166553](eq[166530](bvadd[166479](bvmul(4, Lambda44338Var), 163585), 13), 0, ite[166552](eq[166531](bvadd[166479](bvmul(4, Lambda44338Var), 163585), 4194314), 0, ite[166551](eq[166532](bvadd[166479](bvmul(4, Lambda44338Var), 163585), 4194313), 0, ite[166550](eq[166533](bvadd[166479](bvmul(4, Lambda44338Var), 163585), 65540), 16, ite[166549](eq[166534](bvadd[166479](bvmul(4, Lambda44338Var), 163585), 1), 0, ite[166548](eq[166535](bvadd[166479](bvmul(4, Lambda44338Var), 163585), 2147483651), 0, ite[166547](eq[166536](bvadd[166479](bvmul(4, Lambda44338Var), 163585), 0), 13, ite[166546](eq[166537](bvadd[166479](bvmul(4, Lambda44338Var), 163585), 2147483650), 0, ite[166545](eq[166538](bvadd[166479](bvmul(4, Lambda44338Var), 163585), 15), 0, ite[166544](eq[166539](bvadd[166479](bvmul(4, Lambda44338Var), 163585), 3), 0, ite[166543](eq[166540](bvadd[166479](bvmul(4, Lambda44338Var), 163585), 4194312), 0, ite[166542](eq[166541](bvadd[166479](bvmul(4, Lambda44338Var), 163585), 2), 0, 128))))))))))))))))))))) )
140303 : 1 { 0x1 +1.0e1025 } : INT                 : 1
161718 : sum_is(140657, 140303) : BOOL             : true
163177 : sum_get(140657, 140303) : MAP[BV:32 -> BV:32] : ( 163585 = bvconcat(ite(eq(bvadd(3, bvmul(4, 0), 0), 14), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 2147483648), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 16), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 2147483649), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 13), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 4194314), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 4194313), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 65540), 16, ite(eq(bvadd(3, bvmul(4, 0), 0), 1), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 2147483651), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 0), 13, ite(eq(bvadd(3, bvmul(4, 0), 0), 2147483650), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 15), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 3), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 4194312), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 2), 0, 128)))))))))))))))), ite(eq(bvadd(2, bvmul(4, 0), 0), 14), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 2147483648), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 16), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 2147483649), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 13), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 4194314), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 4194313), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 65540), 16, ite(eq(bvadd(2, bvmul(4, 0), 0), 1), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 2147483651), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 0), 13, ite(eq(bvadd(2, bvmul(4, 0), 0), 2147483650), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 15), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 3), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 4194312), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 2), 0, 128)))))))))))))))), ite(eq(bvadd(1, bvmul(4, 0), 0), 14), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 2147483648), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 16), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 2147483649), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 13), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 4194314), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 4194313), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 65540), 16, ite(eq(bvadd(1, bvmul(4, 0), 0), 1), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 2147483651), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 0), 13, ite(eq(bvadd(1, bvmul(4, 0), 0), 2147483650), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 15), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 3), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 4194312), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 2), 0, 128)))))))))))))))), ite(eq(bvadd(bvmul(4, 0), 0), 14), 0, ite(eq(bvadd(bvmul(4, 0), 0), 2147483648), 0, ite(eq(bvadd(bvmul(4, 0), 0), 16), 0, ite(eq(bvadd(bvmul(4, 0), 0), 2147483649), 0, ite(eq(bvadd(bvmul(4, 0), 0), 13), 0, ite(eq(bvadd(bvmul(4, 0), 0), 4194314), 0, ite(eq(bvadd(bvmul(4, 0), 0), 4194313), 0, ite(eq(bvadd(bvmul(4, 0), 0), 65540), 16, ite(eq(bvadd(bvmul(4, 0), 0), 1), 0, ite(eq(bvadd(bvmul(4, 0), 0), 2147483651), 0, ite(eq(bvadd(bvmul(4, 0), 0), 0), 13, ite(eq(bvadd(bvmul(4, 0), 0), 2147483650), 0, ite(eq(bvadd(bvmul(4, 0), 0), 15), 0, ite(eq(bvadd(bvmul(4, 0), 0), 3), 0, ite(eq(bvadd(bvmul(4, 0), 0), 4194312), 0, ite(eq(bvadd(bvmul(4, 0), 0), 2), 0, 128)))))))))))))))));map[166891](lambda(Lambda44375Var, ite(and(eq(ite(and(bvule(0, 0), bvule(0, 2155905039)), 0, ite(and(bvule(2155905041, 0), bvule(0, 4294967295)), 2155905041, ite(and(bvule(2155905040, 0), bvule(0, 2155905040)), 2155905040, 2155905040))), 0), eq(ite(and(bvule(0, Lambda44375Var), bvule(Lambda44375Var, 2147483647)), 0, ite(and(bvule(2147483648, Lambda44375Var), bvule(Lambda44375Var, 2147483648)), 2147483648, ite(and(bvule(2147483649, Lambda44375Var), bvule(Lambda44375Var, 4294967295)), 2147483649, 2147483649))), 0)), true, false)), lambda[166890](Lambda44376Var, ite[166888](and(eq(0, 0), eq(Lambda44376Var, 0)), 0, bvconcat[166887](ite[166770](eq[166738](bvadd[166737](3, bvmul(4, Lambda44376Var), 163585), 14), 0, ite[166769](eq[166739](bvadd[166737](3, bvmul(4, Lambda44376Var), 163585), 2147483648), 0, ite[166768](eq[166740](bvadd[166737](3, bvmul(4, Lambda44376Var), 163585), 16), 0, ite[166767](eq[166741](bvadd[166737](3, bvmul(4, Lambda44376Var), 163585), 2147483649), 0, ite[166766](eq[166742](bvadd[166737](3, bvmul(4, Lambda44376Var), 163585), 13), 0, ite[166765](eq[166743](bvadd[166737](3, bvmul(4, Lambda44376Var), 163585), 4194314), 0, ite[166764](eq[166744](bvadd[166737](3, bvmul(4, Lambda44376Var), 163585), 4194313), 0, ite[166763](eq[166745](bvadd[166737](3, bvmul(4, Lambda44376Var), 163585), 65540), 16, ite[166762](eq[166746](bvadd[166737](3, bvmul(4, Lambda44376Var), 163585), 1), 0, ite[166761](eq[166747](bvadd[166737](3, bvmul(4, Lambda44376Var), 163585), 2147483651), 0, ite[166760](eq[166748](bvadd[166737](3, bvmul(4, Lambda44376Var), 163585), 0), 13, ite[166759](eq[166749](bvadd[166737](3, bvmul(4, Lambda44376Var), 163585), 2147483650), 0, ite[166758](eq[166750](bvadd[166737](3, bvmul(4, Lambda44376Var), 163585), 15), 0, ite[166757](eq[166751](bvadd[166737](3, bvmul(4, Lambda44376Var), 163585), 3), 0, ite[166756](eq[166752](bvadd[166737](3, bvmul(4, Lambda44376Var), 163585), 4194312), 0, ite[166754](eq[166753](bvadd[166737](3, bvmul(4, Lambda44376Var), 163585), 2), 0, 128)))))))))))))))), ite[166819](eq[166772](bvadd[166771](2, bvmul(4, Lambda44376Var), 163585), 14), 0, ite[166818](eq[166773](bvadd[166771](2, bvmul(4, Lambda44376Var), 163585), 2147483648), 0, ite[166817](eq[166774](bvadd[166771](2, bvmul(4, Lambda44376Var), 163585), 16), 0, ite[166816](eq[166775](bvadd[166771](2, bvmul(4, Lambda44376Var), 163585), 2147483649), 0, ite[166815](eq[166776](bvadd[166771](2, bvmul(4, Lambda44376Var), 163585), 13), 0, ite[166814](eq[166777](bvadd[166771](2, bvmul(4, Lambda44376Var), 163585), 4194314), 0, ite[166813](eq[166778](bvadd[166771](2, bvmul(4, Lambda44376Var), 163585), 4194313), 0, ite[166812](eq[166779](bvadd[166771](2, bvmul(4, Lambda44376Var), 163585), 65540), 16, ite[166811](eq[166780](bvadd[166771](2, bvmul(4, Lambda44376Var), 163585), 1), 0, ite[166810](eq[166781](bvadd[166771](2, bvmul(4, Lambda44376Var), 163585), 2147483651), 0, ite[166809](eq[166782](bvadd[166771](2, bvmul(4, Lambda44376Var), 163585), 0), 13, ite[166808](eq[166783](bvadd[166771](2, bvmul(4, Lambda44376Var), 163585), 2147483650), 0, ite[166807](eq[166798](bvadd[166771](2, bvmul(4, Lambda44376Var), 163585), 15), 0, ite[166806](eq[166799](bvadd[166771](2, bvmul(4, Lambda44376Var), 163585), 3), 0, ite[166805](eq[166801](bvadd[166771](2, bvmul(4, Lambda44376Var), 163585), 4194312), 0, ite[166804](eq[166803](bvadd[166771](2, bvmul(4, Lambda44376Var), 163585), 2), 0, 128)))))))))))))))), ite[166852](eq[166821](bvadd[166820](1, bvmul(4, Lambda44376Var), 163585), 14), 0, ite[166851](eq[166822](bvadd[166820](1, bvmul(4, Lambda44376Var), 163585), 2147483648), 0, ite[166850](eq[166823](bvadd[166820](1, bvmul(4, Lambda44376Var), 163585), 16), 0, ite[166849](eq[166824](bvadd[166820](1, bvmul(4, Lambda44376Var), 163585), 2147483649), 0, ite[166848](eq[166825](bvadd[166820](1, bvmul(4, Lambda44376Var), 163585), 13), 0, ite[166847](eq[166826](bvadd[166820](1, bvmul(4, Lambda44376Var), 163585), 4194314), 0, ite[166846](eq[166827](bvadd[166820](1, bvmul(4, Lambda44376Var), 163585), 4194313), 0, ite[166845](eq[166828](bvadd[166820](1, bvmul(4, Lambda44376Var), 163585), 65540), 16, ite[166844](eq[166829](bvadd[166820](1, bvmul(4, Lambda44376Var), 163585), 1), 0, ite[166843](eq[166830](bvadd[166820](1, bvmul(4, Lambda44376Var), 163585), 2147483651), 0, ite[166842](eq[166831](bvadd[166820](1, bvmul(4, Lambda44376Var), 163585), 0), 13, ite[166841](eq[166832](bvadd[166820](1, bvmul(4, Lambda44376Var), 163585), 2147483650), 0, ite[166840](eq[166833](bvadd[166820](1, bvmul(4, Lambda44376Var), 163585), 15), 0, ite[166839](eq[166834](bvadd[166820](1, bvmul(4, Lambda44376Var), 163585), 3), 0, ite[166838](eq[166835](bvadd[166820](1, bvmul(4, Lambda44376Var), 163585), 4194312), 0, ite[166837](eq[166836](bvadd[166820](1, bvmul(4, Lambda44376Var), 163585), 2), 0, 128)))))))))))))))), ite[166885](eq[166854](bvadd[166853](bvmul(4, Lambda44376Var), 163585), 14), 0, ite[166884](eq[166855](bvadd[166853](bvmul(4, Lambda44376Var), 163585), 2147483648), 0, ite[166883](eq[166856](bvadd[166853](bvmul(4, Lambda44376Var), 163585), 16), 0, ite[166882](eq[166857](bvadd[166853](bvmul(4, Lambda44376Var), 163585), 2147483649), 0, ite[166881](eq[166858](bvadd[166853](bvmul(4, Lambda44376Var), 163585), 13), 0, ite[166880](eq[166859](bvadd[166853](bvmul(4, Lambda44376Var), 163585), 4194314), 0, ite[166879](eq[166860](bvadd[166853](bvmul(4, Lambda44376Var), 163585), 4194313), 0, ite[166878](eq[166861](bvadd[166853](bvmul(4, Lambda44376Var), 163585), 65540), 16, ite[166877](eq[166862](bvadd[166853](bvmul(4, Lambda44376Var), 163585), 1), 0, ite[166876](eq[166863](bvadd[166853](bvmul(4, Lambda44376Var), 163585), 2147483651), 0, ite[166875](eq[166864](bvadd[166853](bvmul(4, Lambda44376Var), 163585), 0), 13, ite[166874](eq[166865](bvadd[166853](bvmul(4, Lambda44376Var), 163585), 2147483650), 0, ite[166873](eq[166866](bvadd[166853](bvmul(4, Lambda44376Var), 163585), 15), 0, ite[166872](eq[166867](bvadd[166853](bvmul(4, Lambda44376Var), 163585), 3), 0, ite[166871](eq[166868](bvadd[166853](bvmul(4, Lambda44376Var), 163585), 4194312), 0, ite[166870](eq[166869](bvadd[166853](bvmul(4, Lambda44376Var), 163585), 2), 0, 128)))))))))))))))))))) )
140286 : 0 { 0x0 +1.0e129 } : BV:32                : 0
163180 : map_get(163177, 140286) : SUM[UNIT,BV:32] : ( 163585 = bvconcat(ite(eq(bvadd(3, bvmul(4, 0), 0), 14), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 2147483648), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 16), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 2147483649), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 13), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 4194314), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 4194313), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 65540), 16, ite(eq(bvadd(3, bvmul(4, 0), 0), 1), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 2147483651), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 0), 13, ite(eq(bvadd(3, bvmul(4, 0), 0), 2147483650), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 15), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 3), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 4194312), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 2), 0, 128)))))))))))))))), ite(eq(bvadd(2, bvmul(4, 0), 0), 14), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 2147483648), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 16), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 2147483649), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 13), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 4194314), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 4194313), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 65540), 16, ite(eq(bvadd(2, bvmul(4, 0), 0), 1), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 2147483651), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 0), 13, ite(eq(bvadd(2, bvmul(4, 0), 0), 2147483650), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 15), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 3), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 4194312), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 2), 0, 128)))))))))))))))), ite(eq(bvadd(1, bvmul(4, 0), 0), 14), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 2147483648), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 16), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 2147483649), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 13), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 4194314), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 4194313), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 65540), 16, ite(eq(bvadd(1, bvmul(4, 0), 0), 1), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 2147483651), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 0), 13, ite(eq(bvadd(1, bvmul(4, 0), 0), 2147483650), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 15), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 3), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 4194312), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 2), 0, 128)))))))))))))))), ite(eq(bvadd(bvmul(4, 0), 0), 14), 0, ite(eq(bvadd(bvmul(4, 0), 0), 2147483648), 0, ite(eq(bvadd(bvmul(4, 0), 0), 16), 0, ite(eq(bvadd(bvmul(4, 0), 0), 2147483649), 0, ite(eq(bvadd(bvmul(4, 0), 0), 13), 0, ite(eq(bvadd(bvmul(4, 0), 0), 4194314), 0, ite(eq(bvadd(bvmul(4, 0), 0), 4194313), 0, ite(eq(bvadd(bvmul(4, 0), 0), 65540), 16, ite(eq(bvadd(bvmul(4, 0), 0), 1), 0, ite(eq(bvadd(bvmul(4, 0), 0), 2147483651), 0, ite(eq(bvadd(bvmul(4, 0), 0), 0), 13, ite(eq(bvadd(bvmul(4, 0), 0), 2147483650), 0, ite(eq(bvadd(bvmul(4, 0), 0), 15), 0, ite(eq(bvadd(bvmul(4, 0), 0), 3), 0, ite(eq(bvadd(bvmul(4, 0), 0), 4194312), 0, ite(eq(bvadd(bvmul(4, 0), 0), 2), 0, 128)))))))))))))))));sum[167202](ite(ite(and(eq(ite(and(bvule(0, 0), bvule(0, 2155905039)), 0, ite(and(bvule(2155905041, 0), bvule(0, 4294967295)), 2155905041, ite(and(bvule(2155905040, 0), bvule(0, 2155905040)), 2155905040, 2155905040))), 0), eq(ite(and(bvule(0, 0), bvule(0, 2147483647)), 0, ite(and(bvule(2147483648, 0), bvule(0, 2147483648)), 2147483648, ite(and(bvule(2147483649, 0), bvule(0, 4294967295)), 2147483649, 2147483649))), 0)), true, false), 1, 0), unit, ite[167201](and(eq(0, 0), eq(0, 0)), 0, bvconcat[167200](ite[167084](eq[167053](bvadd[167052](3, bvmul(4, 0), 163585), 14), 0, ite[167083](eq[167054](bvadd[167052](3, bvmul(4, 0), 163585), 2147483648), 0, ite[167082](eq[167055](bvadd[167052](3, bvmul(4, 0), 163585), 16), 0, ite[167081](eq[167056](bvadd[167052](3, bvmul(4, 0), 163585), 2147483649), 0, ite[167080](eq[167057](bvadd[167052](3, bvmul(4, 0), 163585), 13), 0, ite[167079](eq[167058](bvadd[167052](3, bvmul(4, 0), 163585), 4194314), 0, ite[167078](eq[167059](bvadd[167052](3, bvmul(4, 0), 163585), 4194313), 0, ite[167077](eq[167060](bvadd[167052](3, bvmul(4, 0), 163585), 65540), 16, ite[167076](eq[167061](bvadd[167052](3, bvmul(4, 0), 163585), 1), 0, ite[167075](eq[167062](bvadd[167052](3, bvmul(4, 0), 163585), 2147483651), 0, ite[167074](eq[167063](bvadd[167052](3, bvmul(4, 0), 163585), 0), 13, ite[167073](eq[167064](bvadd[167052](3, bvmul(4, 0), 163585), 2147483650), 0, ite[167072](eq[167065](bvadd[167052](3, bvmul(4, 0), 163585), 15), 0, ite[167071](eq[167066](bvadd[167052](3, bvmul(4, 0), 163585), 3), 0, ite[167070](eq[167067](bvadd[167052](3, bvmul(4, 0), 163585), 4194312), 0, ite[167069](eq[167068](bvadd[167052](3, bvmul(4, 0), 163585), 2), 0, 128)))))))))))))))), ite[167133](eq[167086](bvadd[167085](2, bvmul(4, 0), 163585), 14), 0, ite[167132](eq[167087](bvadd[167085](2, bvmul(4, 0), 163585), 2147483648), 0, ite[167131](eq[167088](bvadd[167085](2, bvmul(4, 0), 163585), 16), 0, ite[167130](eq[167089](bvadd[167085](2, bvmul(4, 0), 163585), 2147483649), 0, ite[167129](eq[167090](bvadd[167085](2, bvmul(4, 0), 163585), 13), 0, ite[167128](eq[167091](bvadd[167085](2, bvmul(4, 0), 163585), 4194314), 0, ite[167127](eq[167092](bvadd[167085](2, bvmul(4, 0), 163585), 4194313), 0, ite[167126](eq[167093](bvadd[167085](2, bvmul(4, 0), 163585), 65540), 16, ite[167125](eq[167094](bvadd[167085](2, bvmul(4, 0), 163585), 1), 0, ite[167124](eq[167095](bvadd[167085](2, bvmul(4, 0), 163585), 2147483651), 0, ite[167123](eq[167096](bvadd[167085](2, bvmul(4, 0), 163585), 0), 13, ite[167122](eq[167097](bvadd[167085](2, bvmul(4, 0), 163585), 2147483650), 0, ite[167121](eq[167098](bvadd[167085](2, bvmul(4, 0), 163585), 15), 0, ite[167119](eq[167099](bvadd[167085](2, bvmul(4, 0), 163585), 3), 0, ite[167117](eq[167100](bvadd[167085](2, bvmul(4, 0), 163585), 4194312), 0, ite[167116](eq[167101](bvadd[167085](2, bvmul(4, 0), 163585), 2), 0, 128)))))))))))))))), ite[167166](eq[167135](bvadd[167134](1, bvmul(4, 0), 163585), 14), 0, ite[167165](eq[167136](bvadd[167134](1, bvmul(4, 0), 163585), 2147483648), 0, ite[167164](eq[167137](bvadd[167134](1, bvmul(4, 0), 163585), 16), 0, ite[167163](eq[167138](bvadd[167134](1, bvmul(4, 0), 163585), 2147483649), 0, ite[167162](eq[167139](bvadd[167134](1, bvmul(4, 0), 163585), 13), 0, ite[167161](eq[167140](bvadd[167134](1, bvmul(4, 0), 163585), 4194314), 0, ite[167160](eq[167141](bvadd[167134](1, bvmul(4, 0), 163585), 4194313), 0, ite[167159](eq[167142](bvadd[167134](1, bvmul(4, 0), 163585), 65540), 16, ite[167158](eq[167143](bvadd[167134](1, bvmul(4, 0), 163585), 1), 0, ite[167157](eq[167144](bvadd[167134](1, bvmul(4, 0), 163585), 2147483651), 0, ite[167156](eq[167145](bvadd[167134](1, bvmul(4, 0), 163585), 0), 13, ite[167155](eq[167146](bvadd[167134](1, bvmul(4, 0), 163585), 2147483650), 0, ite[167154](eq[167147](bvadd[167134](1, bvmul(4, 0), 163585), 15), 0, ite[167153](eq[167148](bvadd[167134](1, bvmul(4, 0), 163585), 3), 0, ite[167152](eq[167149](bvadd[167134](1, bvmul(4, 0), 163585), 4194312), 0, ite[167151](eq[167150](bvadd[167134](1, bvmul(4, 0), 163585), 2), 0, 128)))))))))))))))), ite[167199](eq[167168](bvadd[167167](bvmul(4, 0), 163585), 14), 0, ite[167198](eq[167169](bvadd[167167](bvmul(4, 0), 163585), 2147483648), 0, ite[167197](eq[167170](bvadd[167167](bvmul(4, 0), 163585), 16), 0, ite[167196](eq[167171](bvadd[167167](bvmul(4, 0), 163585), 2147483649), 0, ite[167195](eq[167172](bvadd[167167](bvmul(4, 0), 163585), 13), 0, ite[167194](eq[167173](bvadd[167167](bvmul(4, 0), 163585), 4194314), 0, ite[167193](eq[167174](bvadd[167167](bvmul(4, 0), 163585), 4194313), 0, ite[167192](eq[167175](bvadd[167167](bvmul(4, 0), 163585), 65540), 16, ite[167191](eq[167176](bvadd[167167](bvmul(4, 0), 163585), 1), 0, ite[167190](eq[167177](bvadd[167167](bvmul(4, 0), 163585), 2147483651), 0, ite[167189](eq[167178](bvadd[167167](bvmul(4, 0), 163585), 0), 13, ite[167188](eq[167179](bvadd[167167](bvmul(4, 0), 163585), 2147483650), 0, ite[167187](eq[167180](bvadd[167167](bvmul(4, 0), 163585), 15), 0, ite[167186](eq[167181](bvadd[167167](bvmul(4, 0), 163585), 3), 0, ite[167185](eq[167182](bvadd[167167](bvmul(4, 0), 163585), 4194312), 0, ite[167184](eq[167183](bvadd[167167](bvmul(4, 0), 163585), 2), 0, 128))))))))))))))))))) )
140305 : 0 { 0x0 +1.0e1025 } : INT                 : 0
163211 : sum_is(163180, 140305) : BOOL             : false
163212 : and(161718, 163211) : BOOL                : false
163225 : or(141222, 163212) : BOOL                 : false

ce =
=counter_example_begin z3v487.ce1554 7ae2a6aadb66ddb8daf16b0283575
=input.spec-%var-a-1
1 : Lambda41393Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2155905039 { 0x8080800f -2139062257 -1.390803e130 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2155905040 { 0x80808010 -2139062256 -1.390815e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda41394Var : BV:32
18 : Lambda41395Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 2155905041 { 0x80808011 -2139062255 -1.390827e130 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda41396Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 14 { 0xe +1.166e129 } : BV:32
62 : eq(60, 61) : BOOL
63 : 0 { 0x0 } : BV:8
64 : eq(60, 37) : BOOL
65 : 16 { 0x10 +1.190e129 } : BV:32
66 : eq(60, 65) : BOOL
67 : eq(60, 41) : BOOL
68 : 13 { 0xd +1.154e129 } : BV:32
69 : eq(60, 68) : BOOL
70 : 4194314 { 0x40000a +1.50000119e129 } : BV:32
71 : eq(60, 70) : BOOL
72 : 4194313 { 0x400009 +1.50000107e129 } : BV:32
73 : eq(60, 72) : BOOL
74 : 65540 { 0x10004 +1.781297e129 } : BV:32
75 : eq(60, 74) : BOOL
76 : 16 { 0x10 } : BV:8
77 : 1 { 0x1 +1.11e129 } : BV:32
78 : eq(60, 77) : BOOL
79 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
80 : eq(60, 79) : BOOL
81 : eq(60, 2) : BOOL
82 : 13 { 0xd } : BV:8
83 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
84 : eq(60, 83) : BOOL
85 : 15 { 0xf +1.178e129 } : BV:32
86 : eq(60, 85) : BOOL
87 : eq(60, 56) : BOOL
88 : 4194312 { 0x400008 +1.50000095e129 } : BV:32
89 : eq(60, 88) : BOOL
90 : 2 { 0x2 +1.23e129 } : BV:32
91 : eq(60, 90) : BOOL
92 : 128 { 0x80 -128 } : BV:8
93 : ite(91, 63, 92) : BV:8
94 : ite(89, 63, 93) : BV:8
95 : ite(87, 63, 94) : BV:8
96 : ite(86, 63, 95) : BV:8
97 : ite(84, 63, 96) : BV:8
98 : ite(81, 82, 97) : BV:8
99 : ite(80, 63, 98) : BV:8
100 : ite(78, 63, 99) : BV:8
101 : ite(75, 76, 100) : BV:8
102 : ite(73, 63, 101) : BV:8
103 : ite(71, 63, 102) : BV:8
104 : ite(69, 63, 103) : BV:8
105 : ite(67, 63, 104) : BV:8
106 : ite(66, 63, 105) : BV:8
107 : ite(64, 63, 106) : BV:8
108 : ite(62, 63, 107) : BV:8
109 : bvadd(90, 59, 2) : BV:32
110 : eq(109, 61) : BOOL
111 : eq(109, 37) : BOOL
112 : eq(109, 65) : BOOL
113 : eq(109, 41) : BOOL
114 : eq(109, 68) : BOOL
115 : eq(109, 70) : BOOL
116 : eq(109, 72) : BOOL
117 : eq(109, 74) : BOOL
118 : eq(109, 77) : BOOL
119 : eq(109, 79) : BOOL
120 : eq(109, 2) : BOOL
121 : eq(109, 83) : BOOL
122 : eq(109, 85) : BOOL
123 : eq(109, 56) : BOOL
124 : eq(109, 88) : BOOL
125 : eq(109, 90) : BOOL
126 : ite(125, 63, 92) : BV:8
127 : ite(124, 63, 126) : BV:8
128 : ite(123, 63, 127) : BV:8
129 : ite(122, 63, 128) : BV:8
130 : ite(121, 63, 129) : BV:8
131 : ite(120, 82, 130) : BV:8
132 : ite(119, 63, 131) : BV:8
133 : ite(118, 63, 132) : BV:8
134 : ite(117, 76, 133) : BV:8
135 : ite(116, 63, 134) : BV:8
136 : ite(115, 63, 135) : BV:8
137 : ite(114, 63, 136) : BV:8
138 : ite(113, 63, 137) : BV:8
139 : ite(112, 63, 138) : BV:8
140 : ite(111, 63, 139) : BV:8
141 : ite(110, 63, 140) : BV:8
142 : bvadd(77, 59, 2) : BV:32
143 : eq(142, 61) : BOOL
144 : eq(142, 37) : BOOL
145 : eq(142, 65) : BOOL
146 : eq(142, 41) : BOOL
147 : eq(142, 68) : BOOL
148 : eq(142, 70) : BOOL
149 : eq(142, 72) : BOOL
150 : eq(142, 74) : BOOL
151 : eq(142, 77) : BOOL
152 : eq(142, 79) : BOOL
153 : eq(142, 2) : BOOL
154 : eq(142, 83) : BOOL
155 : eq(142, 85) : BOOL
156 : eq(142, 56) : BOOL
157 : eq(142, 88) : BOOL
158 : eq(142, 90) : BOOL
159 : ite(158, 63, 92) : BV:8
160 : ite(157, 63, 159) : BV:8
161 : ite(156, 63, 160) : BV:8
162 : ite(155, 63, 161) : BV:8
163 : ite(154, 63, 162) : BV:8
164 : ite(153, 82, 163) : BV:8
165 : ite(152, 63, 164) : BV:8
166 : ite(151, 63, 165) : BV:8
167 : ite(150, 76, 166) : BV:8
168 : ite(149, 63, 167) : BV:8
169 : ite(148, 63, 168) : BV:8
170 : ite(147, 63, 169) : BV:8
171 : ite(146, 63, 170) : BV:8
172 : ite(145, 63, 171) : BV:8
173 : ite(144, 63, 172) : BV:8
174 : ite(143, 63, 173) : BV:8
175 : bvadd(59, 2) : BV:32
176 : eq(175, 61) : BOOL
177 : eq(175, 37) : BOOL
178 : eq(175, 65) : BOOL
179 : eq(175, 41) : BOOL
180 : eq(175, 68) : BOOL
181 : eq(175, 70) : BOOL
182 : eq(175, 72) : BOOL
183 : eq(175, 74) : BOOL
184 : eq(175, 77) : BOOL
185 : eq(175, 79) : BOOL
186 : eq(175, 2) : BOOL
187 : eq(175, 83) : BOOL
188 : eq(175, 85) : BOOL
189 : eq(175, 56) : BOOL
190 : eq(175, 88) : BOOL
191 : eq(175, 90) : BOOL
192 : ite(191, 63, 92) : BV:8
193 : ite(190, 63, 192) : BV:8
194 : ite(189, 63, 193) : BV:8
195 : ite(188, 63, 194) : BV:8
196 : ite(187, 63, 195) : BV:8
197 : ite(186, 82, 196) : BV:8
198 : ite(185, 63, 197) : BV:8
199 : ite(184, 63, 198) : BV:8
200 : ite(183, 76, 199) : BV:8
201 : ite(182, 63, 200) : BV:8
202 : ite(181, 63, 201) : BV:8
203 : ite(180, 63, 202) : BV:8
204 : ite(179, 63, 203) : BV:8
205 : ite(178, 63, 204) : BV:8
206 : ite(177, 63, 205) : BV:8
207 : ite(176, 63, 206) : BV:8
208 : bvconcat(108, 141, 174, 207) : BV:32
209 : bvadd(56, 58, 208) : BV:32
210 : eq(209, 61) : BOOL
211 : eq(209, 37) : BOOL
212 : eq(209, 65) : BOOL
213 : eq(209, 41) : BOOL
214 : eq(209, 68) : BOOL
215 : eq(209, 70) : BOOL
216 : eq(209, 72) : BOOL
217 : eq(209, 74) : BOOL
218 : eq(209, 77) : BOOL
219 : eq(209, 79) : BOOL
220 : eq(209, 2) : BOOL
221 : eq(209, 83) : BOOL
222 : eq(209, 85) : BOOL
223 : eq(209, 56) : BOOL
224 : eq(209, 88) : BOOL
225 : eq(209, 90) : BOOL
226 : ite(225, 63, 92) : BV:8
227 : ite(224, 63, 226) : BV:8
228 : ite(223, 63, 227) : BV:8
229 : ite(222, 63, 228) : BV:8
230 : ite(221, 63, 229) : BV:8
231 : ite(220, 82, 230) : BV:8
232 : ite(219, 63, 231) : BV:8
233 : ite(218, 63, 232) : BV:8
234 : ite(217, 76, 233) : BV:8
235 : ite(216, 63, 234) : BV:8
236 : ite(215, 63, 235) : BV:8
237 : ite(214, 63, 236) : BV:8
238 : ite(213, 63, 237) : BV:8
239 : ite(212, 63, 238) : BV:8
240 : ite(211, 63, 239) : BV:8
241 : ite(210, 63, 240) : BV:8
242 : bvadd(90, 58, 208) : BV:32
243 : eq(242, 61) : BOOL
244 : eq(242, 37) : BOOL
245 : eq(242, 65) : BOOL
246 : eq(242, 41) : BOOL
247 : eq(242, 68) : BOOL
248 : eq(242, 70) : BOOL
249 : eq(242, 72) : BOOL
250 : eq(242, 74) : BOOL
251 : eq(242, 77) : BOOL
252 : eq(242, 79) : BOOL
253 : eq(242, 2) : BOOL
254 : eq(242, 83) : BOOL
255 : eq(242, 85) : BOOL
256 : eq(242, 56) : BOOL
257 : eq(242, 88) : BOOL
258 : eq(242, 90) : BOOL
259 : ite(258, 63, 92) : BV:8
260 : ite(257, 63, 259) : BV:8
261 : ite(256, 63, 260) : BV:8
262 : ite(255, 63, 261) : BV:8
263 : ite(254, 63, 262) : BV:8
264 : ite(253, 82, 263) : BV:8
265 : ite(252, 63, 264) : BV:8
266 : ite(251, 63, 265) : BV:8
267 : ite(250, 76, 266) : BV:8
268 : ite(249, 63, 267) : BV:8
269 : ite(248, 63, 268) : BV:8
270 : ite(247, 63, 269) : BV:8
271 : ite(246, 63, 270) : BV:8
272 : ite(245, 63, 271) : BV:8
273 : ite(244, 63, 272) : BV:8
274 : ite(243, 63, 273) : BV:8
275 : bvadd(77, 58, 208) : BV:32
276 : eq(275, 61) : BOOL
277 : eq(275, 37) : BOOL
278 : eq(275, 65) : BOOL
279 : eq(275, 41) : BOOL
280 : eq(275, 68) : BOOL
281 : eq(275, 70) : BOOL
282 : eq(275, 72) : BOOL
283 : eq(275, 74) : BOOL
284 : eq(275, 77) : BOOL
285 : eq(275, 79) : BOOL
286 : eq(275, 2) : BOOL
287 : eq(275, 83) : BOOL
288 : eq(275, 85) : BOOL
289 : eq(275, 56) : BOOL
290 : eq(275, 88) : BOOL
291 : eq(275, 90) : BOOL
292 : ite(291, 63, 92) : BV:8
293 : ite(290, 63, 292) : BV:8
294 : ite(289, 63, 293) : BV:8
295 : ite(288, 63, 294) : BV:8
296 : ite(287, 63, 295) : BV:8
297 : ite(286, 82, 296) : BV:8
298 : ite(285, 63, 297) : BV:8
299 : ite(284, 63, 298) : BV:8
300 : ite(283, 76, 299) : BV:8
301 : ite(282, 63, 300) : BV:8
302 : ite(281, 63, 301) : BV:8
303 : ite(280, 63, 302) : BV:8
304 : ite(279, 63, 303) : BV:8
305 : ite(278, 63, 304) : BV:8
306 : ite(277, 63, 305) : BV:8
307 : ite(276, 63, 306) : BV:8
308 : bvadd(58, 208) : BV:32
309 : eq(308, 61) : BOOL
310 : eq(308, 37) : BOOL
311 : eq(308, 65) : BOOL
312 : eq(308, 41) : BOOL
313 : eq(308, 68) : BOOL
314 : eq(308, 70) : BOOL
315 : eq(308, 72) : BOOL
316 : eq(308, 74) : BOOL
317 : eq(308, 77) : BOOL
318 : eq(308, 79) : BOOL
319 : eq(308, 2) : BOOL
320 : eq(308, 83) : BOOL
321 : eq(308, 85) : BOOL
322 : eq(308, 56) : BOOL
323 : eq(308, 88) : BOOL
324 : eq(308, 90) : BOOL
325 : ite(324, 63, 92) : BV:8
326 : ite(323, 63, 325) : BV:8
327 : ite(322, 63, 326) : BV:8
328 : ite(321, 63, 327) : BV:8
329 : ite(320, 63, 328) : BV:8
330 : ite(319, 82, 329) : BV:8
331 : ite(318, 63, 330) : BV:8
332 : ite(317, 63, 331) : BV:8
333 : ite(316, 76, 332) : BV:8
334 : ite(315, 63, 333) : BV:8
335 : ite(314, 63, 334) : BV:8
336 : ite(313, 63, 335) : BV:8
337 : ite(312, 63, 336) : BV:8
338 : ite(311, 63, 337) : BV:8
339 : ite(310, 63, 338) : BV:8
340 : ite(309, 63, 339) : BV:8
341 : bvconcat(241, 274, 307, 340) : BV:32
342 : ite(55, 2, 341) : BV:32
343 : lambda(52, 342) : FUNCTION[BV:32 -> BV:32]
344 : map(51, 343) : MAP[BV:32 -> BV:32]
345 : lambda(17, 344) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
346 : map(16, 345) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
347 : sym_const(346) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-a-0.L3%7%bbentry
1 : Lambda41393Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2155905039 { 0x8080800f -2139062257 -1.390803e130 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2155905040 { 0x80808010 -2139062256 -1.390815e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda41394Var : BV:32
18 : Lambda41395Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 2155905041 { 0x80808011 -2139062255 -1.390827e130 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda41396Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 14 { 0xe +1.166e129 } : BV:32
62 : eq(60, 61) : BOOL
63 : 0 { 0x0 } : BV:8
64 : eq(60, 37) : BOOL
65 : 16 { 0x10 +1.190e129 } : BV:32
66 : eq(60, 65) : BOOL
67 : eq(60, 41) : BOOL
68 : 13 { 0xd +1.154e129 } : BV:32
69 : eq(60, 68) : BOOL
70 : 4194314 { 0x40000a +1.50000119e129 } : BV:32
71 : eq(60, 70) : BOOL
72 : 4194313 { 0x400009 +1.50000107e129 } : BV:32
73 : eq(60, 72) : BOOL
74 : 65540 { 0x10004 +1.781297e129 } : BV:32
75 : eq(60, 74) : BOOL
76 : 16 { 0x10 } : BV:8
77 : 1 { 0x1 +1.11e129 } : BV:32
78 : eq(60, 77) : BOOL
79 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
80 : eq(60, 79) : BOOL
81 : eq(60, 2) : BOOL
82 : 13 { 0xd } : BV:8
83 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
84 : eq(60, 83) : BOOL
85 : 15 { 0xf +1.178e129 } : BV:32
86 : eq(60, 85) : BOOL
87 : eq(60, 56) : BOOL
88 : 4194312 { 0x400008 +1.50000095e129 } : BV:32
89 : eq(60, 88) : BOOL
90 : 2 { 0x2 +1.23e129 } : BV:32
91 : eq(60, 90) : BOOL
92 : 128 { 0x80 -128 } : BV:8
93 : ite(91, 63, 92) : BV:8
94 : ite(89, 63, 93) : BV:8
95 : ite(87, 63, 94) : BV:8
96 : ite(86, 63, 95) : BV:8
97 : ite(84, 63, 96) : BV:8
98 : ite(81, 82, 97) : BV:8
99 : ite(80, 63, 98) : BV:8
100 : ite(78, 63, 99) : BV:8
101 : ite(75, 76, 100) : BV:8
102 : ite(73, 63, 101) : BV:8
103 : ite(71, 63, 102) : BV:8
104 : ite(69, 63, 103) : BV:8
105 : ite(67, 63, 104) : BV:8
106 : ite(66, 63, 105) : BV:8
107 : ite(64, 63, 106) : BV:8
108 : ite(62, 63, 107) : BV:8
109 : bvadd(90, 59, 2) : BV:32
110 : eq(109, 61) : BOOL
111 : eq(109, 37) : BOOL
112 : eq(109, 65) : BOOL
113 : eq(109, 41) : BOOL
114 : eq(109, 68) : BOOL
115 : eq(109, 70) : BOOL
116 : eq(109, 72) : BOOL
117 : eq(109, 74) : BOOL
118 : eq(109, 77) : BOOL
119 : eq(109, 79) : BOOL
120 : eq(109, 2) : BOOL
121 : eq(109, 83) : BOOL
122 : eq(109, 85) : BOOL
123 : eq(109, 56) : BOOL
124 : eq(109, 88) : BOOL
125 : eq(109, 90) : BOOL
126 : ite(125, 63, 92) : BV:8
127 : ite(124, 63, 126) : BV:8
128 : ite(123, 63, 127) : BV:8
129 : ite(122, 63, 128) : BV:8
130 : ite(121, 63, 129) : BV:8
131 : ite(120, 82, 130) : BV:8
132 : ite(119, 63, 131) : BV:8
133 : ite(118, 63, 132) : BV:8
134 : ite(117, 76, 133) : BV:8
135 : ite(116, 63, 134) : BV:8
136 : ite(115, 63, 135) : BV:8
137 : ite(114, 63, 136) : BV:8
138 : ite(113, 63, 137) : BV:8
139 : ite(112, 63, 138) : BV:8
140 : ite(111, 63, 139) : BV:8
141 : ite(110, 63, 140) : BV:8
142 : bvadd(77, 59, 2) : BV:32
143 : eq(142, 61) : BOOL
144 : eq(142, 37) : BOOL
145 : eq(142, 65) : BOOL
146 : eq(142, 41) : BOOL
147 : eq(142, 68) : BOOL
148 : eq(142, 70) : BOOL
149 : eq(142, 72) : BOOL
150 : eq(142, 74) : BOOL
151 : eq(142, 77) : BOOL
152 : eq(142, 79) : BOOL
153 : eq(142, 2) : BOOL
154 : eq(142, 83) : BOOL
155 : eq(142, 85) : BOOL
156 : eq(142, 56) : BOOL
157 : eq(142, 88) : BOOL
158 : eq(142, 90) : BOOL
159 : ite(158, 63, 92) : BV:8
160 : ite(157, 63, 159) : BV:8
161 : ite(156, 63, 160) : BV:8
162 : ite(155, 63, 161) : BV:8
163 : ite(154, 63, 162) : BV:8
164 : ite(153, 82, 163) : BV:8
165 : ite(152, 63, 164) : BV:8
166 : ite(151, 63, 165) : BV:8
167 : ite(150, 76, 166) : BV:8
168 : ite(149, 63, 167) : BV:8
169 : ite(148, 63, 168) : BV:8
170 : ite(147, 63, 169) : BV:8
171 : ite(146, 63, 170) : BV:8
172 : ite(145, 63, 171) : BV:8
173 : ite(144, 63, 172) : BV:8
174 : ite(143, 63, 173) : BV:8
175 : bvadd(59, 2) : BV:32
176 : eq(175, 61) : BOOL
177 : eq(175, 37) : BOOL
178 : eq(175, 65) : BOOL
179 : eq(175, 41) : BOOL
180 : eq(175, 68) : BOOL
181 : eq(175, 70) : BOOL
182 : eq(175, 72) : BOOL
183 : eq(175, 74) : BOOL
184 : eq(175, 77) : BOOL
185 : eq(175, 79) : BOOL
186 : eq(175, 2) : BOOL
187 : eq(175, 83) : BOOL
188 : eq(175, 85) : BOOL
189 : eq(175, 56) : BOOL
190 : eq(175, 88) : BOOL
191 : eq(175, 90) : BOOL
192 : ite(191, 63, 92) : BV:8
193 : ite(190, 63, 192) : BV:8
194 : ite(189, 63, 193) : BV:8
195 : ite(188, 63, 194) : BV:8
196 : ite(187, 63, 195) : BV:8
197 : ite(186, 82, 196) : BV:8
198 : ite(185, 63, 197) : BV:8
199 : ite(184, 63, 198) : BV:8
200 : ite(183, 76, 199) : BV:8
201 : ite(182, 63, 200) : BV:8
202 : ite(181, 63, 201) : BV:8
203 : ite(180, 63, 202) : BV:8
204 : ite(179, 63, 203) : BV:8
205 : ite(178, 63, 204) : BV:8
206 : ite(177, 63, 205) : BV:8
207 : ite(176, 63, 206) : BV:8
208 : bvconcat(108, 141, 174, 207) : BV:32
209 : bvadd(56, 58, 208) : BV:32
210 : eq(209, 61) : BOOL
211 : eq(209, 37) : BOOL
212 : eq(209, 65) : BOOL
213 : eq(209, 41) : BOOL
214 : eq(209, 68) : BOOL
215 : eq(209, 70) : BOOL
216 : eq(209, 72) : BOOL
217 : eq(209, 74) : BOOL
218 : eq(209, 77) : BOOL
219 : eq(209, 79) : BOOL
220 : eq(209, 2) : BOOL
221 : eq(209, 83) : BOOL
222 : eq(209, 85) : BOOL
223 : eq(209, 56) : BOOL
224 : eq(209, 88) : BOOL
225 : eq(209, 90) : BOOL
226 : ite(225, 63, 92) : BV:8
227 : ite(224, 63, 226) : BV:8
228 : ite(223, 63, 227) : BV:8
229 : ite(222, 63, 228) : BV:8
230 : ite(221, 63, 229) : BV:8
231 : ite(220, 82, 230) : BV:8
232 : ite(219, 63, 231) : BV:8
233 : ite(218, 63, 232) : BV:8
234 : ite(217, 76, 233) : BV:8
235 : ite(216, 63, 234) : BV:8
236 : ite(215, 63, 235) : BV:8
237 : ite(214, 63, 236) : BV:8
238 : ite(213, 63, 237) : BV:8
239 : ite(212, 63, 238) : BV:8
240 : ite(211, 63, 239) : BV:8
241 : ite(210, 63, 240) : BV:8
242 : bvadd(90, 58, 208) : BV:32
243 : eq(242, 61) : BOOL
244 : eq(242, 37) : BOOL
245 : eq(242, 65) : BOOL
246 : eq(242, 41) : BOOL
247 : eq(242, 68) : BOOL
248 : eq(242, 70) : BOOL
249 : eq(242, 72) : BOOL
250 : eq(242, 74) : BOOL
251 : eq(242, 77) : BOOL
252 : eq(242, 79) : BOOL
253 : eq(242, 2) : BOOL
254 : eq(242, 83) : BOOL
255 : eq(242, 85) : BOOL
256 : eq(242, 56) : BOOL
257 : eq(242, 88) : BOOL
258 : eq(242, 90) : BOOL
259 : ite(258, 63, 92) : BV:8
260 : ite(257, 63, 259) : BV:8
261 : ite(256, 63, 260) : BV:8
262 : ite(255, 63, 261) : BV:8
263 : ite(254, 63, 262) : BV:8
264 : ite(253, 82, 263) : BV:8
265 : ite(252, 63, 264) : BV:8
266 : ite(251, 63, 265) : BV:8
267 : ite(250, 76, 266) : BV:8
268 : ite(249, 63, 267) : BV:8
269 : ite(248, 63, 268) : BV:8
270 : ite(247, 63, 269) : BV:8
271 : ite(246, 63, 270) : BV:8
272 : ite(245, 63, 271) : BV:8
273 : ite(244, 63, 272) : BV:8
274 : ite(243, 63, 273) : BV:8
275 : bvadd(77, 58, 208) : BV:32
276 : eq(275, 61) : BOOL
277 : eq(275, 37) : BOOL
278 : eq(275, 65) : BOOL
279 : eq(275, 41) : BOOL
280 : eq(275, 68) : BOOL
281 : eq(275, 70) : BOOL
282 : eq(275, 72) : BOOL
283 : eq(275, 74) : BOOL
284 : eq(275, 77) : BOOL
285 : eq(275, 79) : BOOL
286 : eq(275, 2) : BOOL
287 : eq(275, 83) : BOOL
288 : eq(275, 85) : BOOL
289 : eq(275, 56) : BOOL
290 : eq(275, 88) : BOOL
291 : eq(275, 90) : BOOL
292 : ite(291, 63, 92) : BV:8
293 : ite(290, 63, 292) : BV:8
294 : ite(289, 63, 293) : BV:8
295 : ite(288, 63, 294) : BV:8
296 : ite(287, 63, 295) : BV:8
297 : ite(286, 82, 296) : BV:8
298 : ite(285, 63, 297) : BV:8
299 : ite(284, 63, 298) : BV:8
300 : ite(283, 76, 299) : BV:8
301 : ite(282, 63, 300) : BV:8
302 : ite(281, 63, 301) : BV:8
303 : ite(280, 63, 302) : BV:8
304 : ite(279, 63, 303) : BV:8
305 : ite(278, 63, 304) : BV:8
306 : ite(277, 63, 305) : BV:8
307 : ite(276, 63, 306) : BV:8
308 : bvadd(58, 208) : BV:32
309 : eq(308, 61) : BOOL
310 : eq(308, 37) : BOOL
311 : eq(308, 65) : BOOL
312 : eq(308, 41) : BOOL
313 : eq(308, 68) : BOOL
314 : eq(308, 70) : BOOL
315 : eq(308, 72) : BOOL
316 : eq(308, 74) : BOOL
317 : eq(308, 77) : BOOL
318 : eq(308, 79) : BOOL
319 : eq(308, 2) : BOOL
320 : eq(308, 83) : BOOL
321 : eq(308, 85) : BOOL
322 : eq(308, 56) : BOOL
323 : eq(308, 88) : BOOL
324 : eq(308, 90) : BOOL
325 : ite(324, 63, 92) : BV:8
326 : ite(323, 63, 325) : BV:8
327 : ite(322, 63, 326) : BV:8
328 : ite(321, 63, 327) : BV:8
329 : ite(320, 63, 328) : BV:8
330 : ite(319, 82, 329) : BV:8
331 : ite(318, 63, 330) : BV:8
332 : ite(317, 63, 331) : BV:8
333 : ite(316, 76, 332) : BV:8
334 : ite(315, 63, 333) : BV:8
335 : ite(314, 63, 334) : BV:8
336 : ite(313, 63, 335) : BV:8
337 : ite(312, 63, 336) : BV:8
338 : ite(311, 63, 337) : BV:8
339 : ite(310, 63, 338) : BV:8
340 : ite(309, 63, 339) : BV:8
341 : bvconcat(241, 274, 307, 340) : BV:32
342 : ite(55, 2, 341) : BV:32
343 : lambda(52, 342) : FUNCTION[BV:32 -> BV:32]
344 : map(51, 343) : MAP[BV:32 -> BV:32]
345 : lambda(17, 344) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
346 : map(16, 345) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
347 : sym_const(346) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 13, [ 1; 3 ] -> 0, [ 4; 12 ] -> 128, [ 13; 16 ] -> 0, [ 17; 65539 ] -> 128, [ 65540; 65540 ] -> 16, [ 65541; 4194311 ] -> 128, [ 4194312; 4194314 ] -> 0, [ 4194315; 2147483647 ] -> 128, [ 2147483648; 2147483651 ] -> 0, [ 2147483652; 4294967295 ] -> 128, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 65539 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 65540; 65543 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 65544; 4194311 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 4194312; 4194315 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 4194316; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2147483652; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%n
1 : 2155905040 { 0x80808010 -2139062256 -1.390815e130 } : BV:32
=input.dst.llvm-%m
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1236928623 { 0x49ba086f +1.45338237e20 } : COUNT
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%arr
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 4194312 { 0x400008 +1.50000095e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 65540 { 0x10004 +1.781297e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1236928623 { 0x49ba086f +1.45338237e20 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 4194312 { 0x400008 +1.50000095e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 4194315 { 0x40000b +1.50000131e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 65540 { 0x10004 +1.781297e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 65543 { 0x10007 +1.781333e129 } : BV:32
=input.spec-%var-a-0.L3%7%bbentry.1.1.0.1
1 : Lambda41332Var : BV:32
2 : Lambda41333Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2155905039 { 0x8080800f -2139062257 -1.390803e130 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2155905041 { 0x80808011 -2139062255 -1.390827e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2155905040 { 0x80808010 -2139062256 -1.390815e130 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-a-1.1.1.0.1
1 : Lambda41338Var : BV:32
2 : Lambda41339Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2155905039 { 0x8080800f -2139062257 -1.390803e130 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2155905041 { 0x80808011 -2139062255 -1.390827e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2155905040 { 0x80808010 -2139062256 -1.390815e130 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-a-1.0.1
1 : ([ 0; 2155905039 ] -> true, [ 2155905040; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-a-1.1.1.1.1
1 : Lambda41344Var : BV:32
2 : Lambda41345Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 14 { 0xe +1.166e129 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
16 : eq(11, 15) : BOOL
17 : 16 { 0x10 +1.190e129 } : BV:32
18 : eq(11, 17) : BOOL
19 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
20 : eq(11, 19) : BOOL
21 : 13 { 0xd +1.154e129 } : BV:32
22 : eq(11, 21) : BOOL
23 : 4194314 { 0x40000a +1.50000119e129 } : BV:32
24 : eq(11, 23) : BOOL
25 : 4194313 { 0x400009 +1.50000107e129 } : BV:32
26 : eq(11, 25) : BOOL
27 : 65540 { 0x10004 +1.781297e129 } : BV:32
28 : eq(11, 27) : BOOL
29 : 16 { 0x10 } : BV:8
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : eq(11, 30) : BOOL
32 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
33 : eq(11, 32) : BOOL
34 : eq(11, 3) : BOOL
35 : 13 { 0xd } : BV:8
36 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
37 : eq(11, 36) : BOOL
38 : 15 { 0xf +1.178e129 } : BV:32
39 : eq(11, 38) : BOOL
40 : eq(11, 7) : BOOL
41 : 4194312 { 0x400008 +1.50000095e129 } : BV:32
42 : eq(11, 41) : BOOL
43 : 2 { 0x2 +1.23e129 } : BV:32
44 : eq(11, 43) : BOOL
45 : 128 { 0x80 -128 } : BV:8
46 : ite(44, 14, 45) : BV:8
47 : ite(42, 14, 46) : BV:8
48 : ite(40, 14, 47) : BV:8
49 : ite(39, 14, 48) : BV:8
50 : ite(37, 14, 49) : BV:8
51 : ite(34, 35, 50) : BV:8
52 : ite(33, 14, 51) : BV:8
53 : ite(31, 14, 52) : BV:8
54 : ite(28, 29, 53) : BV:8
55 : ite(26, 14, 54) : BV:8
56 : ite(24, 14, 55) : BV:8
57 : ite(22, 14, 56) : BV:8
58 : ite(20, 14, 57) : BV:8
59 : ite(18, 14, 58) : BV:8
60 : ite(16, 14, 59) : BV:8
61 : ite(13, 14, 60) : BV:8
62 : bvadd(43, 10, 3) : BV:32
63 : eq(62, 12) : BOOL
64 : eq(62, 15) : BOOL
65 : eq(62, 17) : BOOL
66 : eq(62, 19) : BOOL
67 : eq(62, 21) : BOOL
68 : eq(62, 23) : BOOL
69 : eq(62, 25) : BOOL
70 : eq(62, 27) : BOOL
71 : eq(62, 30) : BOOL
72 : eq(62, 32) : BOOL
73 : eq(62, 3) : BOOL
74 : eq(62, 36) : BOOL
75 : eq(62, 38) : BOOL
76 : eq(62, 7) : BOOL
77 : eq(62, 41) : BOOL
78 : eq(62, 43) : BOOL
79 : ite(78, 14, 45) : BV:8
80 : ite(77, 14, 79) : BV:8
81 : ite(76, 14, 80) : BV:8
82 : ite(75, 14, 81) : BV:8
83 : ite(74, 14, 82) : BV:8
84 : ite(73, 35, 83) : BV:8
85 : ite(72, 14, 84) : BV:8
86 : ite(71, 14, 85) : BV:8
87 : ite(70, 29, 86) : BV:8
88 : ite(69, 14, 87) : BV:8
89 : ite(68, 14, 88) : BV:8
90 : ite(67, 14, 89) : BV:8
91 : ite(66, 14, 90) : BV:8
92 : ite(65, 14, 91) : BV:8
93 : ite(64, 14, 92) : BV:8
94 : ite(63, 14, 93) : BV:8
95 : bvadd(30, 10, 3) : BV:32
96 : eq(95, 12) : BOOL
97 : eq(95, 15) : BOOL
98 : eq(95, 17) : BOOL
99 : eq(95, 19) : BOOL
100 : eq(95, 21) : BOOL
101 : eq(95, 23) : BOOL
102 : eq(95, 25) : BOOL
103 : eq(95, 27) : BOOL
104 : eq(95, 30) : BOOL
105 : eq(95, 32) : BOOL
106 : eq(95, 3) : BOOL
107 : eq(95, 36) : BOOL
108 : eq(95, 38) : BOOL
109 : eq(95, 7) : BOOL
110 : eq(95, 41) : BOOL
111 : eq(95, 43) : BOOL
112 : ite(111, 14, 45) : BV:8
113 : ite(110, 14, 112) : BV:8
114 : ite(109, 14, 113) : BV:8
115 : ite(108, 14, 114) : BV:8
116 : ite(107, 14, 115) : BV:8
117 : ite(106, 35, 116) : BV:8
118 : ite(105, 14, 117) : BV:8
119 : ite(104, 14, 118) : BV:8
120 : ite(103, 29, 119) : BV:8
121 : ite(102, 14, 120) : BV:8
122 : ite(101, 14, 121) : BV:8
123 : ite(100, 14, 122) : BV:8
124 : ite(99, 14, 123) : BV:8
125 : ite(98, 14, 124) : BV:8
126 : ite(97, 14, 125) : BV:8
127 : ite(96, 14, 126) : BV:8
128 : bvadd(10, 3) : BV:32
129 : eq(128, 12) : BOOL
130 : eq(128, 15) : BOOL
131 : eq(128, 17) : BOOL
132 : eq(128, 19) : BOOL
133 : eq(128, 21) : BOOL
134 : eq(128, 23) : BOOL
135 : eq(128, 25) : BOOL
136 : eq(128, 27) : BOOL
137 : eq(128, 30) : BOOL
138 : eq(128, 32) : BOOL
139 : eq(128, 3) : BOOL
140 : eq(128, 36) : BOOL
141 : eq(128, 38) : BOOL
142 : eq(128, 7) : BOOL
143 : eq(128, 41) : BOOL
144 : eq(128, 43) : BOOL
145 : ite(144, 14, 45) : BV:8
146 : ite(143, 14, 145) : BV:8
147 : ite(142, 14, 146) : BV:8
148 : ite(141, 14, 147) : BV:8
149 : ite(140, 14, 148) : BV:8
150 : ite(139, 35, 149) : BV:8
151 : ite(138, 14, 150) : BV:8
152 : ite(137, 14, 151) : BV:8
153 : ite(136, 29, 152) : BV:8
154 : ite(135, 14, 153) : BV:8
155 : ite(134, 14, 154) : BV:8
156 : ite(133, 14, 155) : BV:8
157 : ite(132, 14, 156) : BV:8
158 : ite(131, 14, 157) : BV:8
159 : ite(130, 14, 158) : BV:8
160 : ite(129, 14, 159) : BV:8
161 : bvconcat(61, 94, 127, 160) : BV:32
162 : bvadd(7, 9, 161) : BV:32
163 : eq(162, 12) : BOOL
164 : eq(162, 15) : BOOL
165 : eq(162, 17) : BOOL
166 : eq(162, 19) : BOOL
167 : eq(162, 21) : BOOL
168 : eq(162, 23) : BOOL
169 : eq(162, 25) : BOOL
170 : eq(162, 27) : BOOL
171 : eq(162, 30) : BOOL
172 : eq(162, 32) : BOOL
173 : eq(162, 3) : BOOL
174 : eq(162, 36) : BOOL
175 : eq(162, 38) : BOOL
176 : eq(162, 7) : BOOL
177 : eq(162, 41) : BOOL
178 : eq(162, 43) : BOOL
179 : ite(178, 14, 45) : BV:8
180 : ite(177, 14, 179) : BV:8
181 : ite(176, 14, 180) : BV:8
182 : ite(175, 14, 181) : BV:8
183 : ite(174, 14, 182) : BV:8
184 : ite(173, 35, 183) : BV:8
185 : ite(172, 14, 184) : BV:8
186 : ite(171, 14, 185) : BV:8
187 : ite(170, 29, 186) : BV:8
188 : ite(169, 14, 187) : BV:8
189 : ite(168, 14, 188) : BV:8
190 : ite(167, 14, 189) : BV:8
191 : ite(166, 14, 190) : BV:8
192 : ite(165, 14, 191) : BV:8
193 : ite(164, 14, 192) : BV:8
194 : ite(163, 14, 193) : BV:8
195 : bvadd(43, 9, 161) : BV:32
196 : eq(195, 12) : BOOL
197 : eq(195, 15) : BOOL
198 : eq(195, 17) : BOOL
199 : eq(195, 19) : BOOL
200 : eq(195, 21) : BOOL
201 : eq(195, 23) : BOOL
202 : eq(195, 25) : BOOL
203 : eq(195, 27) : BOOL
204 : eq(195, 30) : BOOL
205 : eq(195, 32) : BOOL
206 : eq(195, 3) : BOOL
207 : eq(195, 36) : BOOL
208 : eq(195, 38) : BOOL
209 : eq(195, 7) : BOOL
210 : eq(195, 41) : BOOL
211 : eq(195, 43) : BOOL
212 : ite(211, 14, 45) : BV:8
213 : ite(210, 14, 212) : BV:8
214 : ite(209, 14, 213) : BV:8
215 : ite(208, 14, 214) : BV:8
216 : ite(207, 14, 215) : BV:8
217 : ite(206, 35, 216) : BV:8
218 : ite(205, 14, 217) : BV:8
219 : ite(204, 14, 218) : BV:8
220 : ite(203, 29, 219) : BV:8
221 : ite(202, 14, 220) : BV:8
222 : ite(201, 14, 221) : BV:8
223 : ite(200, 14, 222) : BV:8
224 : ite(199, 14, 223) : BV:8
225 : ite(198, 14, 224) : BV:8
226 : ite(197, 14, 225) : BV:8
227 : ite(196, 14, 226) : BV:8
228 : bvadd(30, 9, 161) : BV:32
229 : eq(228, 12) : BOOL
230 : eq(228, 15) : BOOL
231 : eq(228, 17) : BOOL
232 : eq(228, 19) : BOOL
233 : eq(228, 21) : BOOL
234 : eq(228, 23) : BOOL
235 : eq(228, 25) : BOOL
236 : eq(228, 27) : BOOL
237 : eq(228, 30) : BOOL
238 : eq(228, 32) : BOOL
239 : eq(228, 3) : BOOL
240 : eq(228, 36) : BOOL
241 : eq(228, 38) : BOOL
242 : eq(228, 7) : BOOL
243 : eq(228, 41) : BOOL
244 : eq(228, 43) : BOOL
245 : ite(244, 14, 45) : BV:8
246 : ite(243, 14, 245) : BV:8
247 : ite(242, 14, 246) : BV:8
248 : ite(241, 14, 247) : BV:8
249 : ite(240, 14, 248) : BV:8
250 : ite(239, 35, 249) : BV:8
251 : ite(238, 14, 250) : BV:8
252 : ite(237, 14, 251) : BV:8
253 : ite(236, 29, 252) : BV:8
254 : ite(235, 14, 253) : BV:8
255 : ite(234, 14, 254) : BV:8
256 : ite(233, 14, 255) : BV:8
257 : ite(232, 14, 256) : BV:8
258 : ite(231, 14, 257) : BV:8
259 : ite(230, 14, 258) : BV:8
260 : ite(229, 14, 259) : BV:8
261 : bvadd(9, 161) : BV:32
262 : eq(261, 12) : BOOL
263 : eq(261, 15) : BOOL
264 : eq(261, 17) : BOOL
265 : eq(261, 19) : BOOL
266 : eq(261, 21) : BOOL
267 : eq(261, 23) : BOOL
268 : eq(261, 25) : BOOL
269 : eq(261, 27) : BOOL
270 : eq(261, 30) : BOOL
271 : eq(261, 32) : BOOL
272 : eq(261, 3) : BOOL
273 : eq(261, 36) : BOOL
274 : eq(261, 38) : BOOL
275 : eq(261, 7) : BOOL
276 : eq(261, 41) : BOOL
277 : eq(261, 43) : BOOL
278 : ite(277, 14, 45) : BV:8
279 : ite(276, 14, 278) : BV:8
280 : ite(275, 14, 279) : BV:8
281 : ite(274, 14, 280) : BV:8
282 : ite(273, 14, 281) : BV:8
283 : ite(272, 35, 282) : BV:8
284 : ite(271, 14, 283) : BV:8
285 : ite(270, 14, 284) : BV:8
286 : ite(269, 29, 285) : BV:8
287 : ite(268, 14, 286) : BV:8
288 : ite(267, 14, 287) : BV:8
289 : ite(266, 14, 288) : BV:8
290 : ite(265, 14, 289) : BV:8
291 : ite(264, 14, 290) : BV:8
292 : ite(263, 14, 291) : BV:8
293 : ite(262, 14, 292) : BV:8
294 : bvconcat(194, 227, 260, 293) : BV:32
295 : ite(6, 3, 294) : BV:32
296 : lambda(1, 2, 295) : FUNCTION[BV:32,BV:32 -> BV:32]
297 : sym_const(296) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-a-0.L3%7%bbentry.1.1.1.1
1 : Lambda41346Var : BV:32
2 : Lambda41347Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 14 { 0xe +1.166e129 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
16 : eq(11, 15) : BOOL
17 : 16 { 0x10 +1.190e129 } : BV:32
18 : eq(11, 17) : BOOL
19 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
20 : eq(11, 19) : BOOL
21 : 13 { 0xd +1.154e129 } : BV:32
22 : eq(11, 21) : BOOL
23 : 4194314 { 0x40000a +1.50000119e129 } : BV:32
24 : eq(11, 23) : BOOL
25 : 4194313 { 0x400009 +1.50000107e129 } : BV:32
26 : eq(11, 25) : BOOL
27 : 65540 { 0x10004 +1.781297e129 } : BV:32
28 : eq(11, 27) : BOOL
29 : 16 { 0x10 } : BV:8
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : eq(11, 30) : BOOL
32 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
33 : eq(11, 32) : BOOL
34 : eq(11, 3) : BOOL
35 : 13 { 0xd } : BV:8
36 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
37 : eq(11, 36) : BOOL
38 : 15 { 0xf +1.178e129 } : BV:32
39 : eq(11, 38) : BOOL
40 : eq(11, 7) : BOOL
41 : 4194312 { 0x400008 +1.50000095e129 } : BV:32
42 : eq(11, 41) : BOOL
43 : 2 { 0x2 +1.23e129 } : BV:32
44 : eq(11, 43) : BOOL
45 : 128 { 0x80 -128 } : BV:8
46 : ite(44, 14, 45) : BV:8
47 : ite(42, 14, 46) : BV:8
48 : ite(40, 14, 47) : BV:8
49 : ite(39, 14, 48) : BV:8
50 : ite(37, 14, 49) : BV:8
51 : ite(34, 35, 50) : BV:8
52 : ite(33, 14, 51) : BV:8
53 : ite(31, 14, 52) : BV:8
54 : ite(28, 29, 53) : BV:8
55 : ite(26, 14, 54) : BV:8
56 : ite(24, 14, 55) : BV:8
57 : ite(22, 14, 56) : BV:8
58 : ite(20, 14, 57) : BV:8
59 : ite(18, 14, 58) : BV:8
60 : ite(16, 14, 59) : BV:8
61 : ite(13, 14, 60) : BV:8
62 : bvadd(43, 10, 3) : BV:32
63 : eq(62, 12) : BOOL
64 : eq(62, 15) : BOOL
65 : eq(62, 17) : BOOL
66 : eq(62, 19) : BOOL
67 : eq(62, 21) : BOOL
68 : eq(62, 23) : BOOL
69 : eq(62, 25) : BOOL
70 : eq(62, 27) : BOOL
71 : eq(62, 30) : BOOL
72 : eq(62, 32) : BOOL
73 : eq(62, 3) : BOOL
74 : eq(62, 36) : BOOL
75 : eq(62, 38) : BOOL
76 : eq(62, 7) : BOOL
77 : eq(62, 41) : BOOL
78 : eq(62, 43) : BOOL
79 : ite(78, 14, 45) : BV:8
80 : ite(77, 14, 79) : BV:8
81 : ite(76, 14, 80) : BV:8
82 : ite(75, 14, 81) : BV:8
83 : ite(74, 14, 82) : BV:8
84 : ite(73, 35, 83) : BV:8
85 : ite(72, 14, 84) : BV:8
86 : ite(71, 14, 85) : BV:8
87 : ite(70, 29, 86) : BV:8
88 : ite(69, 14, 87) : BV:8
89 : ite(68, 14, 88) : BV:8
90 : ite(67, 14, 89) : BV:8
91 : ite(66, 14, 90) : BV:8
92 : ite(65, 14, 91) : BV:8
93 : ite(64, 14, 92) : BV:8
94 : ite(63, 14, 93) : BV:8
95 : bvadd(30, 10, 3) : BV:32
96 : eq(95, 12) : BOOL
97 : eq(95, 15) : BOOL
98 : eq(95, 17) : BOOL
99 : eq(95, 19) : BOOL
100 : eq(95, 21) : BOOL
101 : eq(95, 23) : BOOL
102 : eq(95, 25) : BOOL
103 : eq(95, 27) : BOOL
104 : eq(95, 30) : BOOL
105 : eq(95, 32) : BOOL
106 : eq(95, 3) : BOOL
107 : eq(95, 36) : BOOL
108 : eq(95, 38) : BOOL
109 : eq(95, 7) : BOOL
110 : eq(95, 41) : BOOL
111 : eq(95, 43) : BOOL
112 : ite(111, 14, 45) : BV:8
113 : ite(110, 14, 112) : BV:8
114 : ite(109, 14, 113) : BV:8
115 : ite(108, 14, 114) : BV:8
116 : ite(107, 14, 115) : BV:8
117 : ite(106, 35, 116) : BV:8
118 : ite(105, 14, 117) : BV:8
119 : ite(104, 14, 118) : BV:8
120 : ite(103, 29, 119) : BV:8
121 : ite(102, 14, 120) : BV:8
122 : ite(101, 14, 121) : BV:8
123 : ite(100, 14, 122) : BV:8
124 : ite(99, 14, 123) : BV:8
125 : ite(98, 14, 124) : BV:8
126 : ite(97, 14, 125) : BV:8
127 : ite(96, 14, 126) : BV:8
128 : bvadd(10, 3) : BV:32
129 : eq(128, 12) : BOOL
130 : eq(128, 15) : BOOL
131 : eq(128, 17) : BOOL
132 : eq(128, 19) : BOOL
133 : eq(128, 21) : BOOL
134 : eq(128, 23) : BOOL
135 : eq(128, 25) : BOOL
136 : eq(128, 27) : BOOL
137 : eq(128, 30) : BOOL
138 : eq(128, 32) : BOOL
139 : eq(128, 3) : BOOL
140 : eq(128, 36) : BOOL
141 : eq(128, 38) : BOOL
142 : eq(128, 7) : BOOL
143 : eq(128, 41) : BOOL
144 : eq(128, 43) : BOOL
145 : ite(144, 14, 45) : BV:8
146 : ite(143, 14, 145) : BV:8
147 : ite(142, 14, 146) : BV:8
148 : ite(141, 14, 147) : BV:8
149 : ite(140, 14, 148) : BV:8
150 : ite(139, 35, 149) : BV:8
151 : ite(138, 14, 150) : BV:8
152 : ite(137, 14, 151) : BV:8
153 : ite(136, 29, 152) : BV:8
154 : ite(135, 14, 153) : BV:8
155 : ite(134, 14, 154) : BV:8
156 : ite(133, 14, 155) : BV:8
157 : ite(132, 14, 156) : BV:8
158 : ite(131, 14, 157) : BV:8
159 : ite(130, 14, 158) : BV:8
160 : ite(129, 14, 159) : BV:8
161 : bvconcat(61, 94, 127, 160) : BV:32
162 : bvadd(7, 9, 161) : BV:32
163 : eq(162, 12) : BOOL
164 : eq(162, 15) : BOOL
165 : eq(162, 17) : BOOL
166 : eq(162, 19) : BOOL
167 : eq(162, 21) : BOOL
168 : eq(162, 23) : BOOL
169 : eq(162, 25) : BOOL
170 : eq(162, 27) : BOOL
171 : eq(162, 30) : BOOL
172 : eq(162, 32) : BOOL
173 : eq(162, 3) : BOOL
174 : eq(162, 36) : BOOL
175 : eq(162, 38) : BOOL
176 : eq(162, 7) : BOOL
177 : eq(162, 41) : BOOL
178 : eq(162, 43) : BOOL
179 : ite(178, 14, 45) : BV:8
180 : ite(177, 14, 179) : BV:8
181 : ite(176, 14, 180) : BV:8
182 : ite(175, 14, 181) : BV:8
183 : ite(174, 14, 182) : BV:8
184 : ite(173, 35, 183) : BV:8
185 : ite(172, 14, 184) : BV:8
186 : ite(171, 14, 185) : BV:8
187 : ite(170, 29, 186) : BV:8
188 : ite(169, 14, 187) : BV:8
189 : ite(168, 14, 188) : BV:8
190 : ite(167, 14, 189) : BV:8
191 : ite(166, 14, 190) : BV:8
192 : ite(165, 14, 191) : BV:8
193 : ite(164, 14, 192) : BV:8
194 : ite(163, 14, 193) : BV:8
195 : bvadd(43, 9, 161) : BV:32
196 : eq(195, 12) : BOOL
197 : eq(195, 15) : BOOL
198 : eq(195, 17) : BOOL
199 : eq(195, 19) : BOOL
200 : eq(195, 21) : BOOL
201 : eq(195, 23) : BOOL
202 : eq(195, 25) : BOOL
203 : eq(195, 27) : BOOL
204 : eq(195, 30) : BOOL
205 : eq(195, 32) : BOOL
206 : eq(195, 3) : BOOL
207 : eq(195, 36) : BOOL
208 : eq(195, 38) : BOOL
209 : eq(195, 7) : BOOL
210 : eq(195, 41) : BOOL
211 : eq(195, 43) : BOOL
212 : ite(211, 14, 45) : BV:8
213 : ite(210, 14, 212) : BV:8
214 : ite(209, 14, 213) : BV:8
215 : ite(208, 14, 214) : BV:8
216 : ite(207, 14, 215) : BV:8
217 : ite(206, 35, 216) : BV:8
218 : ite(205, 14, 217) : BV:8
219 : ite(204, 14, 218) : BV:8
220 : ite(203, 29, 219) : BV:8
221 : ite(202, 14, 220) : BV:8
222 : ite(201, 14, 221) : BV:8
223 : ite(200, 14, 222) : BV:8
224 : ite(199, 14, 223) : BV:8
225 : ite(198, 14, 224) : BV:8
226 : ite(197, 14, 225) : BV:8
227 : ite(196, 14, 226) : BV:8
228 : bvadd(30, 9, 161) : BV:32
229 : eq(228, 12) : BOOL
230 : eq(228, 15) : BOOL
231 : eq(228, 17) : BOOL
232 : eq(228, 19) : BOOL
233 : eq(228, 21) : BOOL
234 : eq(228, 23) : BOOL
235 : eq(228, 25) : BOOL
236 : eq(228, 27) : BOOL
237 : eq(228, 30) : BOOL
238 : eq(228, 32) : BOOL
239 : eq(228, 3) : BOOL
240 : eq(228, 36) : BOOL
241 : eq(228, 38) : BOOL
242 : eq(228, 7) : BOOL
243 : eq(228, 41) : BOOL
244 : eq(228, 43) : BOOL
245 : ite(244, 14, 45) : BV:8
246 : ite(243, 14, 245) : BV:8
247 : ite(242, 14, 246) : BV:8
248 : ite(241, 14, 247) : BV:8
249 : ite(240, 14, 248) : BV:8
250 : ite(239, 35, 249) : BV:8
251 : ite(238, 14, 250) : BV:8
252 : ite(237, 14, 251) : BV:8
253 : ite(236, 29, 252) : BV:8
254 : ite(235, 14, 253) : BV:8
255 : ite(234, 14, 254) : BV:8
256 : ite(233, 14, 255) : BV:8
257 : ite(232, 14, 256) : BV:8
258 : ite(231, 14, 257) : BV:8
259 : ite(230, 14, 258) : BV:8
260 : ite(229, 14, 259) : BV:8
261 : bvadd(9, 161) : BV:32
262 : eq(261, 12) : BOOL
263 : eq(261, 15) : BOOL
264 : eq(261, 17) : BOOL
265 : eq(261, 19) : BOOL
266 : eq(261, 21) : BOOL
267 : eq(261, 23) : BOOL
268 : eq(261, 25) : BOOL
269 : eq(261, 27) : BOOL
270 : eq(261, 30) : BOOL
271 : eq(261, 32) : BOOL
272 : eq(261, 3) : BOOL
273 : eq(261, 36) : BOOL
274 : eq(261, 38) : BOOL
275 : eq(261, 7) : BOOL
276 : eq(261, 41) : BOOL
277 : eq(261, 43) : BOOL
278 : ite(277, 14, 45) : BV:8
279 : ite(276, 14, 278) : BV:8
280 : ite(275, 14, 279) : BV:8
281 : ite(274, 14, 280) : BV:8
282 : ite(273, 14, 281) : BV:8
283 : ite(272, 35, 282) : BV:8
284 : ite(271, 14, 283) : BV:8
285 : ite(270, 14, 284) : BV:8
286 : ite(269, 29, 285) : BV:8
287 : ite(268, 14, 286) : BV:8
288 : ite(267, 14, 287) : BV:8
289 : ite(266, 14, 288) : BV:8
290 : ite(265, 14, 289) : BV:8
291 : ite(264, 14, 290) : BV:8
292 : ite(263, 14, 291) : BV:8
293 : ite(262, 14, 292) : BV:8
294 : bvconcat(194, 227, 260, 293) : BV:32
295 : ite(6, 3, 294) : BV:32
296 : ite(6, 3, 295) : BV:32
297 : lambda(1, 2, 296) : FUNCTION[BV:32,BV:32 -> BV:32]
298 : sym_const(297) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-a-0.L3%7%bbentry.0.1
1 : ([ 0; 2155905039 ] -> true, [ 2155905040; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=counter_example.random_seed
2758773254
=counter_example_end


failcond-expr = or(not(bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)), and(sum_is(map_get(input.spec-%var-a-0.L3%7%bbentry, input.spec-%var-i-0.L3%7%bbentry), 1), sum_is(map_get(sum_get(map_get(input.spec-%var-a-0.L3%7%bbentry, input.spec-%var-i-0.L3%7%bbentry), 1), 0), 0))):
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
4 : not(3) : BOOL
5 : input.spec-%var-a-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
6 : input.spec-%var-i-0.L3%7%bbentry : BV:32
7 : map_get(5, 6) : SUM[UNIT,MAP[BV:32 -> BV:32]]
8 : 1 { 0x1 +1.0e1025 } : INT
9 : sum_is(7, 8) : BOOL
10 : sum_get(7, 8) : MAP[BV:32 -> BV:32]
11 : 0 { 0x0 +1.0e129 } : BV:32
12 : map_get(10, 11) : SUM[UNIT,BV:32]
13 : 0 { 0x0 +1.0e1025 } : INT
14 : sum_is(12, 13) : BOOL
15 : and(9, 14) : BOOL
16 : or(4, 15) : BOOL
</MSG>
<MSG>4:08 : foo.A1.B2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>4:08 : foo.A1.B2: Finished executing CG's add edge function...</MSG>
<MSG>4:08 : foo.A1.B2: Computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:08 : foo.A1.B2: Done computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:08 : Done adding new edge to the product-TFG foo.A1.B2 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%7%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>4:08 : Done adding a CG edge composition using the src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:08 : Failed correlation of src pathset L3%7%bbentry=>L3%7%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry: failcond = wfcond.from_pcL3%7%bbentry_Lfor.cond%1%bbentry.to_pcL3%7%bbentry_Lfor.cond1%1%bbentry-dst-edgecond-implies-src-edgecond
140743 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32 : 0
140422 : input.dst.llvm-%n : BV:32                 : 2155905040
140744 : bvult(140743, 140422) : BOOL              : true
141222 : not(140744) : BOOL                        : false
140655 : input.spec-%var-a-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]] : ( 156566 = bvconcat(ite(eq(bvadd(3, bvmul(4, Lambda41394Var), 0), 14), 0, ite(eq(bvadd(3, bvmul(4, Lambda41394Var), 0), 2147483648), 0, ite(eq(bvadd(3, bvmul(4, Lambda41394Var), 0), 16), 0, ite(eq(bvadd(3, bvmul(4, Lambda41394Var), 0), 2147483649), 0, ite(eq(bvadd(3, bvmul(4, Lambda41394Var), 0), 13), 0, ite(eq(bvadd(3, bvmul(4, Lambda41394Var), 0), 4194314), 0, ite(eq(bvadd(3, bvmul(4, Lambda41394Var), 0), 4194313), 0, ite(eq(bvadd(3, bvmul(4, Lambda41394Var), 0), 65540), 16, ite(eq(bvadd(3, bvmul(4, Lambda41394Var), 0), 1), 0, ite(eq(bvadd(3, bvmul(4, Lambda41394Var), 0), 2147483651), 0, ite(eq(bvadd(3, bvmul(4, Lambda41394Var), 0), 0), 13, ite(eq(bvadd(3, bvmul(4, Lambda41394Var), 0), 2147483650), 0, ite(eq(bvadd(3, bvmul(4, Lambda41394Var), 0), 15), 0, ite(eq(bvadd(3, bvmul(4, Lambda41394Var), 0), 3), 0, ite(eq(bvadd(3, bvmul(4, Lambda41394Var), 0), 4194312), 0, ite(eq(bvadd(3, bvmul(4, Lambda41394Var), 0), 2), 0, 128)))))))))))))))), ite(eq(bvadd(2, bvmul(4, Lambda41394Var), 0), 14), 0, ite(eq(bvadd(2, bvmul(4, Lambda41394Var), 0), 2147483648), 0, ite(eq(bvadd(2, bvmul(4, Lambda41394Var), 0), 16), 0, ite(eq(bvadd(2, bvmul(4, Lambda41394Var), 0), 2147483649), 0, ite(eq(bvadd(2, bvmul(4, Lambda41394Var), 0), 13), 0, ite(eq(bvadd(2, bvmul(4, Lambda41394Var), 0), 4194314), 0, ite(eq(bvadd(2, bvmul(4, Lambda41394Var), 0), 4194313), 0, ite(eq(bvadd(2, bvmul(4, Lambda41394Var), 0), 65540), 16, ite(eq(bvadd(2, bvmul(4, Lambda41394Var), 0), 1), 0, ite(eq(bvadd(2, bvmul(4, Lambda41394Var), 0), 2147483651), 0, ite(eq(bvadd(2, bvmul(4, Lambda41394Var), 0), 0), 13, ite(eq(bvadd(2, bvmul(4, Lambda41394Var), 0), 2147483650), 0, ite(eq(bvadd(2, bvmul(4, Lambda41394Var), 0), 15), 0, ite(eq(bvadd(2, bvmul(4, Lambda41394Var), 0), 3), 0, ite(eq(bvadd(2, bvmul(4, Lambda41394Var), 0), 4194312), 0, ite(eq(bvadd(2, bvmul(4, Lambda41394Var), 0), 2), 0, 128)))))))))))))))), ite(eq(bvadd(1, bvmul(4, Lambda41394Var), 0), 14), 0, ite(eq(bvadd(1, bvmul(4, Lambda41394Var), 0), 2147483648), 0, ite(eq(bvadd(1, bvmul(4, Lambda41394Var), 0), 16), 0, ite(eq(bvadd(1, bvmul(4, Lambda41394Var), 0), 2147483649), 0, ite(eq(bvadd(1, bvmul(4, Lambda41394Var), 0), 13), 0, ite(eq(bvadd(1, bvmul(4, Lambda41394Var), 0), 4194314), 0, ite(eq(bvadd(1, bvmul(4, Lambda41394Var), 0), 4194313), 0, ite(eq(bvadd(1, bvmul(4, Lambda41394Var), 0), 65540), 16, ite(eq(bvadd(1, bvmul(4, Lambda41394Var), 0), 1), 0, ite(eq(bvadd(1, bvmul(4, Lambda41394Var), 0), 2147483651), 0, ite(eq(bvadd(1, bvmul(4, Lambda41394Var), 0), 0), 13, ite(eq(bvadd(1, bvmul(4, Lambda41394Var), 0), 2147483650), 0, ite(eq(bvadd(1, bvmul(4, Lambda41394Var), 0), 15), 0, ite(eq(bvadd(1, bvmul(4, Lambda41394Var), 0), 3), 0, ite(eq(bvadd(1, bvmul(4, Lambda41394Var), 0), 4194312), 0, ite(eq(bvadd(1, bvmul(4, Lambda41394Var), 0), 2), 0, 128)))))))))))))))), ite(eq(bvadd(bvmul(4, Lambda41394Var), 0), 14), 0, ite(eq(bvadd(bvmul(4, Lambda41394Var), 0), 2147483648), 0, ite(eq(bvadd(bvmul(4, Lambda41394Var), 0), 16), 0, ite(eq(bvadd(bvmul(4, Lambda41394Var), 0), 2147483649), 0, ite(eq(bvadd(bvmul(4, Lambda41394Var), 0), 13), 0, ite(eq(bvadd(bvmul(4, Lambda41394Var), 0), 4194314), 0, ite(eq(bvadd(bvmul(4, Lambda41394Var), 0), 4194313), 0, ite(eq(bvadd(bvmul(4, Lambda41394Var), 0), 65540), 16, ite(eq(bvadd(bvmul(4, Lambda41394Var), 0), 1), 0, ite(eq(bvadd(bvmul(4, Lambda41394Var), 0), 2147483651), 0, ite(eq(bvadd(bvmul(4, Lambda41394Var), 0), 0), 13, ite(eq(bvadd(bvmul(4, Lambda41394Var), 0), 2147483650), 0, ite(eq(bvadd(bvmul(4, Lambda41394Var), 0), 15), 0, ite(eq(bvadd(bvmul(4, Lambda41394Var), 0), 3), 0, ite(eq(bvadd(bvmul(4, Lambda41394Var), 0), 4194312), 0, ite(eq(bvadd(bvmul(4, Lambda41394Var), 0), 2), 0, 128)))))))))))))))));map[156395](lambda(Lambda41393Var, ite(and(bvule(0, Lambda41393Var), bvule(Lambda41393Var, 2155905039)), true, ite(and(bvule(2155905040, Lambda41393Var), bvule(Lambda41393Var, 4294967295)), false, false))), lambda[156394](Lambda41394Var, map[156393](lambda(Lambda41395Var, ite(and(eq(ite(and(bvule(0, Lambda41394Var), bvule(Lambda41394Var, 2155905039)), 0, ite(and(bvule(2155905041, Lambda41394Var), bvule(Lambda41394Var, 4294967295)), 2155905041, ite(and(bvule(2155905040, Lambda41394Var), bvule(Lambda41394Var, 2155905040)), 2155905040, 2155905040))), 0), eq(ite(and(bvule(0, Lambda41395Var), bvule(Lambda41395Var, 2147483647)), 0, ite(and(bvule(2147483648, Lambda41395Var), bvule(Lambda41395Var, 2147483648)), 2147483648, ite(and(bvule(2147483649, Lambda41395Var), bvule(Lambda41395Var, 4294967295)), 2147483649, 2147483649))), 0)), true, false)), lambda[156392](Lambda41396Var, ite[156837](and(eq(Lambda41394Var, 0), eq(Lambda41396Var, 0)), 0, bvconcat[156836](ite[156736](eq[156705](bvadd[156704](3, bvmul(4, Lambda41396Var), 156566), 14), 0, ite[156735](eq[156706](bvadd[156704](3, bvmul(4, Lambda41396Var), 156566), 2147483648), 0, ite[156734](eq[156707](bvadd[156704](3, bvmul(4, Lambda41396Var), 156566), 16), 0, ite[156733](eq[156708](bvadd[156704](3, bvmul(4, Lambda41396Var), 156566), 2147483649), 0, ite[156732](eq[156709](bvadd[156704](3, bvmul(4, Lambda41396Var), 156566), 13), 0, ite[156731](eq[156710](bvadd[156704](3, bvmul(4, Lambda41396Var), 156566), 4194314), 0, ite[156730](eq[156711](bvadd[156704](3, bvmul(4, Lambda41396Var), 156566), 4194313), 0, ite[156729](eq[156712](bvadd[156704](3, bvmul(4, Lambda41396Var), 156566), 65540), 16, ite[156728](eq[156713](bvadd[156704](3, bvmul(4, Lambda41396Var), 156566), 1), 0, ite[156727](eq[156714](bvadd[156704](3, bvmul(4, Lambda41396Var), 156566), 2147483651), 0, ite[156726](eq[156715](bvadd[156704](3, bvmul(4, Lambda41396Var), 156566), 0), 13, ite[156725](eq[156716](bvadd[156704](3, bvmul(4, Lambda41396Var), 156566), 2147483650), 0, ite[156724](eq[156717](bvadd[156704](3, bvmul(4, Lambda41396Var), 156566), 15), 0, ite[156723](eq[156718](bvadd[156704](3, bvmul(4, Lambda41396Var), 156566), 3), 0, ite[156722](eq[156719](bvadd[156704](3, bvmul(4, Lambda41396Var), 156566), 4194312), 0, ite[156721](eq[156720](bvadd[156704](3, bvmul(4, Lambda41396Var), 156566), 2), 0, 128)))))))))))))))), ite[156769](eq[156738](bvadd[156737](2, bvmul(4, Lambda41396Var), 156566), 14), 0, ite[156768](eq[156739](bvadd[156737](2, bvmul(4, Lambda41396Var), 156566), 2147483648), 0, ite[156767](eq[156740](bvadd[156737](2, bvmul(4, Lambda41396Var), 156566), 16), 0, ite[156766](eq[156741](bvadd[156737](2, bvmul(4, Lambda41396Var), 156566), 2147483649), 0, ite[156765](eq[156742](bvadd[156737](2, bvmul(4, Lambda41396Var), 156566), 13), 0, ite[156764](eq[156743](bvadd[156737](2, bvmul(4, Lambda41396Var), 156566), 4194314), 0, ite[156763](eq[156744](bvadd[156737](2, bvmul(4, Lambda41396Var), 156566), 4194313), 0, ite[156762](eq[156745](bvadd[156737](2, bvmul(4, Lambda41396Var), 156566), 65540), 16, ite[156761](eq[156746](bvadd[156737](2, bvmul(4, Lambda41396Var), 156566), 1), 0, ite[156760](eq[156747](bvadd[156737](2, bvmul(4, Lambda41396Var), 156566), 2147483651), 0, ite[156759](eq[156748](bvadd[156737](2, bvmul(4, Lambda41396Var), 156566), 0), 13, ite[156758](eq[156749](bvadd[156737](2, bvmul(4, Lambda41396Var), 156566), 2147483650), 0, ite[156757](eq[156750](bvadd[156737](2, bvmul(4, Lambda41396Var), 156566), 15), 0, ite[156756](eq[156751](bvadd[156737](2, bvmul(4, Lambda41396Var), 156566), 3), 0, ite[156755](eq[156752](bvadd[156737](2, bvmul(4, Lambda41396Var), 156566), 4194312), 0, ite[156754](eq[156753](bvadd[156737](2, bvmul(4, Lambda41396Var), 156566), 2), 0, 128)))))))))))))))), ite[156802](eq[156771](bvadd[156770](1, bvmul(4, Lambda41396Var), 156566), 14), 0, ite[156801](eq[156772](bvadd[156770](1, bvmul(4, Lambda41396Var), 156566), 2147483648), 0, ite[156800](eq[156773](bvadd[156770](1, bvmul(4, Lambda41396Var), 156566), 16), 0, ite[156799](eq[156774](bvadd[156770](1, bvmul(4, Lambda41396Var), 156566), 2147483649), 0, ite[156798](eq[156775](bvadd[156770](1, bvmul(4, Lambda41396Var), 156566), 13), 0, ite[156797](eq[156776](bvadd[156770](1, bvmul(4, Lambda41396Var), 156566), 4194314), 0, ite[156796](eq[156777](bvadd[156770](1, bvmul(4, Lambda41396Var), 156566), 4194313), 0, ite[156795](eq[156778](bvadd[156770](1, bvmul(4, Lambda41396Var), 156566), 65540), 16, ite[156794](eq[156779](bvadd[156770](1, bvmul(4, Lambda41396Var), 156566), 1), 0, ite[156793](eq[156780](bvadd[156770](1, bvmul(4, Lambda41396Var), 156566), 2147483651), 0, ite[156792](eq[156781](bvadd[156770](1, bvmul(4, Lambda41396Var), 156566), 0), 13, ite[156791](eq[156782](bvadd[156770](1, bvmul(4, Lambda41396Var), 156566), 2147483650), 0, ite[156790](eq[156783](bvadd[156770](1, bvmul(4, Lambda41396Var), 156566), 15), 0, ite[156789](eq[156784](bvadd[156770](1, bvmul(4, Lambda41396Var), 156566), 3), 0, ite[156788](eq[156785](bvadd[156770](1, bvmul(4, Lambda41396Var), 156566), 4194312), 0, ite[156787](eq[156786](bvadd[156770](1, bvmul(4, Lambda41396Var), 156566), 2), 0, 128)))))))))))))))), ite[156835](eq[156804](bvadd[156803](bvmul(4, Lambda41396Var), 156566), 14), 0, ite[156834](eq[156805](bvadd[156803](bvmul(4, Lambda41396Var), 156566), 2147483648), 0, ite[156833](eq[156806](bvadd[156803](bvmul(4, Lambda41396Var), 156566), 16), 0, ite[156832](eq[156807](bvadd[156803](bvmul(4, Lambda41396Var), 156566), 2147483649), 0, ite[156831](eq[156808](bvadd[156803](bvmul(4, Lambda41396Var), 156566), 13), 0, ite[156830](eq[156809](bvadd[156803](bvmul(4, Lambda41396Var), 156566), 4194314), 0, ite[156829](eq[156810](bvadd[156803](bvmul(4, Lambda41396Var), 156566), 4194313), 0, ite[156828](eq[156811](bvadd[156803](bvmul(4, Lambda41396Var), 156566), 65540), 16, ite[156827](eq[156812](bvadd[156803](bvmul(4, Lambda41396Var), 156566), 1), 0, ite[156826](eq[156813](bvadd[156803](bvmul(4, Lambda41396Var), 156566), 2147483651), 0, ite[156825](eq[156814](bvadd[156803](bvmul(4, Lambda41396Var), 156566), 0), 13, ite[156824](eq[156815](bvadd[156803](bvmul(4, Lambda41396Var), 156566), 2147483650), 0, ite[156823](eq[156816](bvadd[156803](bvmul(4, Lambda41396Var), 156566), 15), 0, ite[156822](eq[156817](bvadd[156803](bvmul(4, Lambda41396Var), 156566), 3), 0, ite[156821](eq[156818](bvadd[156803](bvmul(4, Lambda41396Var), 156566), 4194312), 0, ite[156820](eq[156819](bvadd[156803](bvmul(4, Lambda41396Var), 156566), 2), 0, 128)))))))))))))))))))))) )
140656 : input.spec-%var-i-0.L3%7%bbentry : BV:32  : 0
140657 : map_get(140655, 140656) : SUM[UNIT,MAP[BV:32 -> BV:32]] : ( 163585 = bvconcat(ite(eq(bvadd(3, bvmul(4, 0), 0), 14), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 2147483648), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 16), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 2147483649), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 13), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 4194314), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 4194313), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 65540), 16, ite(eq(bvadd(3, bvmul(4, 0), 0), 1), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 2147483651), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 0), 13, ite(eq(bvadd(3, bvmul(4, 0), 0), 2147483650), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 15), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 3), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 4194312), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 2), 0, 128)))))))))))))))), ite(eq(bvadd(2, bvmul(4, 0), 0), 14), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 2147483648), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 16), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 2147483649), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 13), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 4194314), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 4194313), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 65540), 16, ite(eq(bvadd(2, bvmul(4, 0), 0), 1), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 2147483651), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 0), 13, ite(eq(bvadd(2, bvmul(4, 0), 0), 2147483650), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 15), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 3), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 4194312), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 2), 0, 128)))))))))))))))), ite(eq(bvadd(1, bvmul(4, 0), 0), 14), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 2147483648), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 16), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 2147483649), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 13), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 4194314), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 4194313), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 65540), 16, ite(eq(bvadd(1, bvmul(4, 0), 0), 1), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 2147483651), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 0), 13, ite(eq(bvadd(1, bvmul(4, 0), 0), 2147483650), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 15), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 3), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 4194312), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 2), 0, 128)))))))))))))))), ite(eq(bvadd(bvmul(4, 0), 0), 14), 0, ite(eq(bvadd(bvmul(4, 0), 0), 2147483648), 0, ite(eq(bvadd(bvmul(4, 0), 0), 16), 0, ite(eq(bvadd(bvmul(4, 0), 0), 2147483649), 0, ite(eq(bvadd(bvmul(4, 0), 0), 13), 0, ite(eq(bvadd(bvmul(4, 0), 0), 4194314), 0, ite(eq(bvadd(bvmul(4, 0), 0), 4194313), 0, ite(eq(bvadd(bvmul(4, 0), 0), 65540), 16, ite(eq(bvadd(bvmul(4, 0), 0), 1), 0, ite(eq(bvadd(bvmul(4, 0), 0), 2147483651), 0, ite(eq(bvadd(bvmul(4, 0), 0), 0), 13, ite(eq(bvadd(bvmul(4, 0), 0), 2147483650), 0, ite(eq(bvadd(bvmul(4, 0), 0), 15), 0, ite(eq(bvadd(bvmul(4, 0), 0), 3), 0, ite(eq(bvadd(bvmul(4, 0), 0), 4194312), 0, ite(eq(bvadd(bvmul(4, 0), 0), 2), 0, 128)))))))))))))))));sum[166562](ite(ite(and(bvule(0, 0), bvule(0, 2155905039)), true, ite(and(bvule(2155905040, 0), bvule(0, 4294967295)), false, false)), 1, 0), unit, map[166561](lambda(Lambda44337Var, ite(and(eq(ite(and(bvule(0, 0), bvule(0, 2155905039)), 0, ite(and(bvule(2155905041, 0), bvule(0, 4294967295)), 2155905041, ite(and(bvule(2155905040, 0), bvule(0, 2155905040)), 2155905040, 2155905040))), 0), eq(ite(and(bvule(0, Lambda44337Var), bvule(Lambda44337Var, 2147483647)), 0, ite(and(bvule(2147483648, Lambda44337Var), bvule(Lambda44337Var, 2147483648)), 2147483648, ite(and(bvule(2147483649, Lambda44337Var), bvule(Lambda44337Var, 4294967295)), 2147483649, 2147483649))), 0)), true, false)), lambda[166560](Lambda44338Var, ite[166559](and(eq(0, 0), eq(Lambda44338Var, 0)), 0, bvconcat[166558](ite[164673](eq[164577](bvadd[164576](3, bvmul(4, Lambda44338Var), 163585), 14), 0, ite[164672](eq[164578](bvadd[164576](3, bvmul(4, Lambda44338Var), 163585), 2147483648), 0, ite[164671](eq[164579](bvadd[164576](3, bvmul(4, Lambda44338Var), 163585), 16), 0, ite[164670](eq[164580](bvadd[164576](3, bvmul(4, Lambda44338Var), 163585), 2147483649), 0, ite[164669](eq[164581](bvadd[164576](3, bvmul(4, Lambda44338Var), 163585), 13), 0, ite[164668](eq[164582](bvadd[164576](3, bvmul(4, Lambda44338Var), 163585), 4194314), 0, ite[164657](eq[164605](bvadd[164576](3, bvmul(4, Lambda44338Var), 163585), 4194313), 0, ite[164656](eq[164606](bvadd[164576](3, bvmul(4, Lambda44338Var), 163585), 65540), 16, ite[164655](eq[164608](bvadd[164576](3, bvmul(4, Lambda44338Var), 163585), 1), 0, ite[164654](eq[164609](bvadd[164576](3, bvmul(4, Lambda44338Var), 163585), 2147483651), 0, ite[164653](eq[164640](bvadd[164576](3, bvmul(4, Lambda44338Var), 163585), 0), 13, ite[164651](eq[164641](bvadd[164576](3, bvmul(4, Lambda44338Var), 163585), 2147483650), 0, ite[164650](eq[164642](bvadd[164576](3, bvmul(4, Lambda44338Var), 163585), 15), 0, ite[164649](eq[164643](bvadd[164576](3, bvmul(4, Lambda44338Var), 163585), 3), 0, ite[164648](eq[164645](bvadd[164576](3, bvmul(4, Lambda44338Var), 163585), 4194312), 0, ite[164647](eq[164646](bvadd[164576](3, bvmul(4, Lambda44338Var), 163585), 2), 0, 128)))))))))))))))), ite[166444](eq[164675](bvadd[164674](2, bvmul(4, Lambda44338Var), 163585), 14), 0, ite[166443](eq[164676](bvadd[164674](2, bvmul(4, Lambda44338Var), 163585), 2147483648), 0, ite[166442](eq[164677](bvadd[164674](2, bvmul(4, Lambda44338Var), 163585), 16), 0, ite[166441](eq[164678](bvadd[164674](2, bvmul(4, Lambda44338Var), 163585), 2147483649), 0, ite[166440](eq[164679](bvadd[164674](2, bvmul(4, Lambda44338Var), 163585), 13), 0, ite[166439](eq[164680](bvadd[164674](2, bvmul(4, Lambda44338Var), 163585), 4194314), 0, ite[166438](eq[164681](bvadd[164674](2, bvmul(4, Lambda44338Var), 163585), 4194313), 0, ite[166437](eq[164682](bvadd[164674](2, bvmul(4, Lambda44338Var), 163585), 65540), 16, ite[166436](eq[164683](bvadd[164674](2, bvmul(4, Lambda44338Var), 163585), 1), 0, ite[166435](eq[164684](bvadd[164674](2, bvmul(4, Lambda44338Var), 163585), 2147483651), 0, ite[166428](eq[166417](bvadd[164674](2, bvmul(4, Lambda44338Var), 163585), 0), 13, ite[166427](eq[166418](bvadd[164674](2, bvmul(4, Lambda44338Var), 163585), 2147483650), 0, ite[166426](eq[166419](bvadd[164674](2, bvmul(4, Lambda44338Var), 163585), 15), 0, ite[166425](eq[166420](bvadd[164674](2, bvmul(4, Lambda44338Var), 163585), 3), 0, ite[166424](eq[166421](bvadd[164674](2, bvmul(4, Lambda44338Var), 163585), 4194312), 0, ite[166423](eq[166422](bvadd[164674](2, bvmul(4, Lambda44338Var), 163585), 2), 0, 128)))))))))))))))), ite[166478](eq[166446](bvadd[166445](1, bvmul(4, Lambda44338Var), 163585), 14), 0, ite[166477](eq[166447](bvadd[166445](1, bvmul(4, Lambda44338Var), 163585), 2147483648), 0, ite[166476](eq[166448](bvadd[166445](1, bvmul(4, Lambda44338Var), 163585), 16), 0, ite[166475](eq[166449](bvadd[166445](1, bvmul(4, Lambda44338Var), 163585), 2147483649), 0, ite[166474](eq[166450](bvadd[166445](1, bvmul(4, Lambda44338Var), 163585), 13), 0, ite[166473](eq[166451](bvadd[166445](1, bvmul(4, Lambda44338Var), 163585), 4194314), 0, ite[166472](eq[166452](bvadd[166445](1, bvmul(4, Lambda44338Var), 163585), 4194313), 0, ite[166471](eq[166453](bvadd[166445](1, bvmul(4, Lambda44338Var), 163585), 65540), 16, ite[166470](eq[166454](bvadd[166445](1, bvmul(4, Lambda44338Var), 163585), 1), 0, ite[166469](eq[166455](bvadd[166445](1, bvmul(4, Lambda44338Var), 163585), 2147483651), 0, ite[166468](eq[166456](bvadd[166445](1, bvmul(4, Lambda44338Var), 163585), 0), 13, ite[166467](eq[166457](bvadd[166445](1, bvmul(4, Lambda44338Var), 163585), 2147483650), 0, ite[166466](eq[166458](bvadd[166445](1, bvmul(4, Lambda44338Var), 163585), 15), 0, ite[166465](eq[166459](bvadd[166445](1, bvmul(4, Lambda44338Var), 163585), 3), 0, ite[166464](eq[166460](bvadd[166445](1, bvmul(4, Lambda44338Var), 163585), 4194312), 0, ite[166463](eq[166461](bvadd[166445](1, bvmul(4, Lambda44338Var), 163585), 2), 0, 128)))))))))))))))), ite[166557](eq[166526](bvadd[166479](bvmul(4, Lambda44338Var), 163585), 14), 0, ite[166556](eq[166527](bvadd[166479](bvmul(4, Lambda44338Var), 163585), 2147483648), 0, ite[166555](eq[166528](bvadd[166479](bvmul(4, Lambda44338Var), 163585), 16), 0, ite[166554](eq[166529](bvadd[166479](bvmul(4, Lambda44338Var), 163585), 2147483649), 0, ite[166553](eq[166530](bvadd[166479](bvmul(4, Lambda44338Var), 163585), 13), 0, ite[166552](eq[166531](bvadd[166479](bvmul(4, Lambda44338Var), 163585), 4194314), 0, ite[166551](eq[166532](bvadd[166479](bvmul(4, Lambda44338Var), 163585), 4194313), 0, ite[166550](eq[166533](bvadd[166479](bvmul(4, Lambda44338Var), 163585), 65540), 16, ite[166549](eq[166534](bvadd[166479](bvmul(4, Lambda44338Var), 163585), 1), 0, ite[166548](eq[166535](bvadd[166479](bvmul(4, Lambda44338Var), 163585), 2147483651), 0, ite[166547](eq[166536](bvadd[166479](bvmul(4, Lambda44338Var), 163585), 0), 13, ite[166546](eq[166537](bvadd[166479](bvmul(4, Lambda44338Var), 163585), 2147483650), 0, ite[166545](eq[166538](bvadd[166479](bvmul(4, Lambda44338Var), 163585), 15), 0, ite[166544](eq[166539](bvadd[166479](bvmul(4, Lambda44338Var), 163585), 3), 0, ite[166543](eq[166540](bvadd[166479](bvmul(4, Lambda44338Var), 163585), 4194312), 0, ite[166542](eq[166541](bvadd[166479](bvmul(4, Lambda44338Var), 163585), 2), 0, 128))))))))))))))))))))) )
140303 : 1 { 0x1 +1.0e1025 } : INT                 : 1
161718 : sum_is(140657, 140303) : BOOL             : true
163177 : sum_get(140657, 140303) : MAP[BV:32 -> BV:32] : ( 163585 = bvconcat(ite(eq(bvadd(3, bvmul(4, 0), 0), 14), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 2147483648), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 16), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 2147483649), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 13), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 4194314), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 4194313), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 65540), 16, ite(eq(bvadd(3, bvmul(4, 0), 0), 1), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 2147483651), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 0), 13, ite(eq(bvadd(3, bvmul(4, 0), 0), 2147483650), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 15), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 3), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 4194312), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 2), 0, 128)))))))))))))))), ite(eq(bvadd(2, bvmul(4, 0), 0), 14), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 2147483648), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 16), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 2147483649), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 13), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 4194314), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 4194313), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 65540), 16, ite(eq(bvadd(2, bvmul(4, 0), 0), 1), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 2147483651), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 0), 13, ite(eq(bvadd(2, bvmul(4, 0), 0), 2147483650), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 15), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 3), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 4194312), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 2), 0, 128)))))))))))))))), ite(eq(bvadd(1, bvmul(4, 0), 0), 14), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 2147483648), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 16), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 2147483649), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 13), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 4194314), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 4194313), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 65540), 16, ite(eq(bvadd(1, bvmul(4, 0), 0), 1), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 2147483651), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 0), 13, ite(eq(bvadd(1, bvmul(4, 0), 0), 2147483650), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 15), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 3), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 4194312), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 2), 0, 128)))))))))))))))), ite(eq(bvadd(bvmul(4, 0), 0), 14), 0, ite(eq(bvadd(bvmul(4, 0), 0), 2147483648), 0, ite(eq(bvadd(bvmul(4, 0), 0), 16), 0, ite(eq(bvadd(bvmul(4, 0), 0), 2147483649), 0, ite(eq(bvadd(bvmul(4, 0), 0), 13), 0, ite(eq(bvadd(bvmul(4, 0), 0), 4194314), 0, ite(eq(bvadd(bvmul(4, 0), 0), 4194313), 0, ite(eq(bvadd(bvmul(4, 0), 0), 65540), 16, ite(eq(bvadd(bvmul(4, 0), 0), 1), 0, ite(eq(bvadd(bvmul(4, 0), 0), 2147483651), 0, ite(eq(bvadd(bvmul(4, 0), 0), 0), 13, ite(eq(bvadd(bvmul(4, 0), 0), 2147483650), 0, ite(eq(bvadd(bvmul(4, 0), 0), 15), 0, ite(eq(bvadd(bvmul(4, 0), 0), 3), 0, ite(eq(bvadd(bvmul(4, 0), 0), 4194312), 0, ite(eq(bvadd(bvmul(4, 0), 0), 2), 0, 128)))))))))))))))));map[166891](lambda(Lambda44375Var, ite(and(eq(ite(and(bvule(0, 0), bvule(0, 2155905039)), 0, ite(and(bvule(2155905041, 0), bvule(0, 4294967295)), 2155905041, ite(and(bvule(2155905040, 0), bvule(0, 2155905040)), 2155905040, 2155905040))), 0), eq(ite(and(bvule(0, Lambda44375Var), bvule(Lambda44375Var, 2147483647)), 0, ite(and(bvule(2147483648, Lambda44375Var), bvule(Lambda44375Var, 2147483648)), 2147483648, ite(and(bvule(2147483649, Lambda44375Var), bvule(Lambda44375Var, 4294967295)), 2147483649, 2147483649))), 0)), true, false)), lambda[166890](Lambda44376Var, ite[166888](and(eq(0, 0), eq(Lambda44376Var, 0)), 0, bvconcat[166887](ite[166770](eq[166738](bvadd[166737](3, bvmul(4, Lambda44376Var), 163585), 14), 0, ite[166769](eq[166739](bvadd[166737](3, bvmul(4, Lambda44376Var), 163585), 2147483648), 0, ite[166768](eq[166740](bvadd[166737](3, bvmul(4, Lambda44376Var), 163585), 16), 0, ite[166767](eq[166741](bvadd[166737](3, bvmul(4, Lambda44376Var), 163585), 2147483649), 0, ite[166766](eq[166742](bvadd[166737](3, bvmul(4, Lambda44376Var), 163585), 13), 0, ite[166765](eq[166743](bvadd[166737](3, bvmul(4, Lambda44376Var), 163585), 4194314), 0, ite[166764](eq[166744](bvadd[166737](3, bvmul(4, Lambda44376Var), 163585), 4194313), 0, ite[166763](eq[166745](bvadd[166737](3, bvmul(4, Lambda44376Var), 163585), 65540), 16, ite[166762](eq[166746](bvadd[166737](3, bvmul(4, Lambda44376Var), 163585), 1), 0, ite[166761](eq[166747](bvadd[166737](3, bvmul(4, Lambda44376Var), 163585), 2147483651), 0, ite[166760](eq[166748](bvadd[166737](3, bvmul(4, Lambda44376Var), 163585), 0), 13, ite[166759](eq[166749](bvadd[166737](3, bvmul(4, Lambda44376Var), 163585), 2147483650), 0, ite[166758](eq[166750](bvadd[166737](3, bvmul(4, Lambda44376Var), 163585), 15), 0, ite[166757](eq[166751](bvadd[166737](3, bvmul(4, Lambda44376Var), 163585), 3), 0, ite[166756](eq[166752](bvadd[166737](3, bvmul(4, Lambda44376Var), 163585), 4194312), 0, ite[166754](eq[166753](bvadd[166737](3, bvmul(4, Lambda44376Var), 163585), 2), 0, 128)))))))))))))))), ite[166819](eq[166772](bvadd[166771](2, bvmul(4, Lambda44376Var), 163585), 14), 0, ite[166818](eq[166773](bvadd[166771](2, bvmul(4, Lambda44376Var), 163585), 2147483648), 0, ite[166817](eq[166774](bvadd[166771](2, bvmul(4, Lambda44376Var), 163585), 16), 0, ite[166816](eq[166775](bvadd[166771](2, bvmul(4, Lambda44376Var), 163585), 2147483649), 0, ite[166815](eq[166776](bvadd[166771](2, bvmul(4, Lambda44376Var), 163585), 13), 0, ite[166814](eq[166777](bvadd[166771](2, bvmul(4, Lambda44376Var), 163585), 4194314), 0, ite[166813](eq[166778](bvadd[166771](2, bvmul(4, Lambda44376Var), 163585), 4194313), 0, ite[166812](eq[166779](bvadd[166771](2, bvmul(4, Lambda44376Var), 163585), 65540), 16, ite[166811](eq[166780](bvadd[166771](2, bvmul(4, Lambda44376Var), 163585), 1), 0, ite[166810](eq[166781](bvadd[166771](2, bvmul(4, Lambda44376Var), 163585), 2147483651), 0, ite[166809](eq[166782](bvadd[166771](2, bvmul(4, Lambda44376Var), 163585), 0), 13, ite[166808](eq[166783](bvadd[166771](2, bvmul(4, Lambda44376Var), 163585), 2147483650), 0, ite[166807](eq[166798](bvadd[166771](2, bvmul(4, Lambda44376Var), 163585), 15), 0, ite[166806](eq[166799](bvadd[166771](2, bvmul(4, Lambda44376Var), 163585), 3), 0, ite[166805](eq[166801](bvadd[166771](2, bvmul(4, Lambda44376Var), 163585), 4194312), 0, ite[166804](eq[166803](bvadd[166771](2, bvmul(4, Lambda44376Var), 163585), 2), 0, 128)))))))))))))))), ite[166852](eq[166821](bvadd[166820](1, bvmul(4, Lambda44376Var), 163585), 14), 0, ite[166851](eq[166822](bvadd[166820](1, bvmul(4, Lambda44376Var), 163585), 2147483648), 0, ite[166850](eq[166823](bvadd[166820](1, bvmul(4, Lambda44376Var), 163585), 16), 0, ite[166849](eq[166824](bvadd[166820](1, bvmul(4, Lambda44376Var), 163585), 2147483649), 0, ite[166848](eq[166825](bvadd[166820](1, bvmul(4, Lambda44376Var), 163585), 13), 0, ite[166847](eq[166826](bvadd[166820](1, bvmul(4, Lambda44376Var), 163585), 4194314), 0, ite[166846](eq[166827](bvadd[166820](1, bvmul(4, Lambda44376Var), 163585), 4194313), 0, ite[166845](eq[166828](bvadd[166820](1, bvmul(4, Lambda44376Var), 163585), 65540), 16, ite[166844](eq[166829](bvadd[166820](1, bvmul(4, Lambda44376Var), 163585), 1), 0, ite[166843](eq[166830](bvadd[166820](1, bvmul(4, Lambda44376Var), 163585), 2147483651), 0, ite[166842](eq[166831](bvadd[166820](1, bvmul(4, Lambda44376Var), 163585), 0), 13, ite[166841](eq[166832](bvadd[166820](1, bvmul(4, Lambda44376Var), 163585), 2147483650), 0, ite[166840](eq[166833](bvadd[166820](1, bvmul(4, Lambda44376Var), 163585), 15), 0, ite[166839](eq[166834](bvadd[166820](1, bvmul(4, Lambda44376Var), 163585), 3), 0, ite[166838](eq[166835](bvadd[166820](1, bvmul(4, Lambda44376Var), 163585), 4194312), 0, ite[166837](eq[166836](bvadd[166820](1, bvmul(4, Lambda44376Var), 163585), 2), 0, 128)))))))))))))))), ite[166885](eq[166854](bvadd[166853](bvmul(4, Lambda44376Var), 163585), 14), 0, ite[166884](eq[166855](bvadd[166853](bvmul(4, Lambda44376Var), 163585), 2147483648), 0, ite[166883](eq[166856](bvadd[166853](bvmul(4, Lambda44376Var), 163585), 16), 0, ite[166882](eq[166857](bvadd[166853](bvmul(4, Lambda44376Var), 163585), 2147483649), 0, ite[166881](eq[166858](bvadd[166853](bvmul(4, Lambda44376Var), 163585), 13), 0, ite[166880](eq[166859](bvadd[166853](bvmul(4, Lambda44376Var), 163585), 4194314), 0, ite[166879](eq[166860](bvadd[166853](bvmul(4, Lambda44376Var), 163585), 4194313), 0, ite[166878](eq[166861](bvadd[166853](bvmul(4, Lambda44376Var), 163585), 65540), 16, ite[166877](eq[166862](bvadd[166853](bvmul(4, Lambda44376Var), 163585), 1), 0, ite[166876](eq[166863](bvadd[166853](bvmul(4, Lambda44376Var), 163585), 2147483651), 0, ite[166875](eq[166864](bvadd[166853](bvmul(4, Lambda44376Var), 163585), 0), 13, ite[166874](eq[166865](bvadd[166853](bvmul(4, Lambda44376Var), 163585), 2147483650), 0, ite[166873](eq[166866](bvadd[166853](bvmul(4, Lambda44376Var), 163585), 15), 0, ite[166872](eq[166867](bvadd[166853](bvmul(4, Lambda44376Var), 163585), 3), 0, ite[166871](eq[166868](bvadd[166853](bvmul(4, Lambda44376Var), 163585), 4194312), 0, ite[166870](eq[166869](bvadd[166853](bvmul(4, Lambda44376Var), 163585), 2), 0, 128)))))))))))))))))))) )
140286 : 0 { 0x0 +1.0e129 } : BV:32                : 0
163180 : map_get(163177, 140286) : SUM[UNIT,BV:32] : ( 163585 = bvconcat(ite(eq(bvadd(3, bvmul(4, 0), 0), 14), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 2147483648), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 16), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 2147483649), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 13), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 4194314), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 4194313), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 65540), 16, ite(eq(bvadd(3, bvmul(4, 0), 0), 1), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 2147483651), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 0), 13, ite(eq(bvadd(3, bvmul(4, 0), 0), 2147483650), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 15), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 3), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 4194312), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 2), 0, 128)))))))))))))))), ite(eq(bvadd(2, bvmul(4, 0), 0), 14), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 2147483648), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 16), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 2147483649), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 13), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 4194314), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 4194313), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 65540), 16, ite(eq(bvadd(2, bvmul(4, 0), 0), 1), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 2147483651), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 0), 13, ite(eq(bvadd(2, bvmul(4, 0), 0), 2147483650), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 15), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 3), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 4194312), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 2), 0, 128)))))))))))))))), ite(eq(bvadd(1, bvmul(4, 0), 0), 14), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 2147483648), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 16), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 2147483649), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 13), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 4194314), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 4194313), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 65540), 16, ite(eq(bvadd(1, bvmul(4, 0), 0), 1), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 2147483651), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 0), 13, ite(eq(bvadd(1, bvmul(4, 0), 0), 2147483650), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 15), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 3), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 4194312), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 2), 0, 128)))))))))))))))), ite(eq(bvadd(bvmul(4, 0), 0), 14), 0, ite(eq(bvadd(bvmul(4, 0), 0), 2147483648), 0, ite(eq(bvadd(bvmul(4, 0), 0), 16), 0, ite(eq(bvadd(bvmul(4, 0), 0), 2147483649), 0, ite(eq(bvadd(bvmul(4, 0), 0), 13), 0, ite(eq(bvadd(bvmul(4, 0), 0), 4194314), 0, ite(eq(bvadd(bvmul(4, 0), 0), 4194313), 0, ite(eq(bvadd(bvmul(4, 0), 0), 65540), 16, ite(eq(bvadd(bvmul(4, 0), 0), 1), 0, ite(eq(bvadd(bvmul(4, 0), 0), 2147483651), 0, ite(eq(bvadd(bvmul(4, 0), 0), 0), 13, ite(eq(bvadd(bvmul(4, 0), 0), 2147483650), 0, ite(eq(bvadd(bvmul(4, 0), 0), 15), 0, ite(eq(bvadd(bvmul(4, 0), 0), 3), 0, ite(eq(bvadd(bvmul(4, 0), 0), 4194312), 0, ite(eq(bvadd(bvmul(4, 0), 0), 2), 0, 128)))))))))))))))));sum[167202](ite(ite(and(eq(ite(and(bvule(0, 0), bvule(0, 2155905039)), 0, ite(and(bvule(2155905041, 0), bvule(0, 4294967295)), 2155905041, ite(and(bvule(2155905040, 0), bvule(0, 2155905040)), 2155905040, 2155905040))), 0), eq(ite(and(bvule(0, 0), bvule(0, 2147483647)), 0, ite(and(bvule(2147483648, 0), bvule(0, 2147483648)), 2147483648, ite(and(bvule(2147483649, 0), bvule(0, 4294967295)), 2147483649, 2147483649))), 0)), true, false), 1, 0), unit, ite[167201](and(eq(0, 0), eq(0, 0)), 0, bvconcat[167200](ite[167084](eq[167053](bvadd[167052](3, bvmul(4, 0), 163585), 14), 0, ite[167083](eq[167054](bvadd[167052](3, bvmul(4, 0), 163585), 2147483648), 0, ite[167082](eq[167055](bvadd[167052](3, bvmul(4, 0), 163585), 16), 0, ite[167081](eq[167056](bvadd[167052](3, bvmul(4, 0), 163585), 2147483649), 0, ite[167080](eq[167057](bvadd[167052](3, bvmul(4, 0), 163585), 13), 0, ite[167079](eq[167058](bvadd[167052](3, bvmul(4, 0), 163585), 4194314), 0, ite[167078](eq[167059](bvadd[167052](3, bvmul(4, 0), 163585), 4194313), 0, ite[167077](eq[167060](bvadd[167052](3, bvmul(4, 0), 163585), 65540), 16, ite[167076](eq[167061](bvadd[167052](3, bvmul(4, 0), 163585), 1), 0, ite[167075](eq[167062](bvadd[167052](3, bvmul(4, 0), 163585), 2147483651), 0, ite[167074](eq[167063](bvadd[167052](3, bvmul(4, 0), 163585), 0), 13, ite[167073](eq[167064](bvadd[167052](3, bvmul(4, 0), 163585), 2147483650), 0, ite[167072](eq[167065](bvadd[167052](3, bvmul(4, 0), 163585), 15), 0, ite[167071](eq[167066](bvadd[167052](3, bvmul(4, 0), 163585), 3), 0, ite[167070](eq[167067](bvadd[167052](3, bvmul(4, 0), 163585), 4194312), 0, ite[167069](eq[167068](bvadd[167052](3, bvmul(4, 0), 163585), 2), 0, 128)))))))))))))))), ite[167133](eq[167086](bvadd[167085](2, bvmul(4, 0), 163585), 14), 0, ite[167132](eq[167087](bvadd[167085](2, bvmul(4, 0), 163585), 2147483648), 0, ite[167131](eq[167088](bvadd[167085](2, bvmul(4, 0), 163585), 16), 0, ite[167130](eq[167089](bvadd[167085](2, bvmul(4, 0), 163585), 2147483649), 0, ite[167129](eq[167090](bvadd[167085](2, bvmul(4, 0), 163585), 13), 0, ite[167128](eq[167091](bvadd[167085](2, bvmul(4, 0), 163585), 4194314), 0, ite[167127](eq[167092](bvadd[167085](2, bvmul(4, 0), 163585), 4194313), 0, ite[167126](eq[167093](bvadd[167085](2, bvmul(4, 0), 163585), 65540), 16, ite[167125](eq[167094](bvadd[167085](2, bvmul(4, 0), 163585), 1), 0, ite[167124](eq[167095](bvadd[167085](2, bvmul(4, 0), 163585), 2147483651), 0, ite[167123](eq[167096](bvadd[167085](2, bvmul(4, 0), 163585), 0), 13, ite[167122](eq[167097](bvadd[167085](2, bvmul(4, 0), 163585), 2147483650), 0, ite[167121](eq[167098](bvadd[167085](2, bvmul(4, 0), 163585), 15), 0, ite[167119](eq[167099](bvadd[167085](2, bvmul(4, 0), 163585), 3), 0, ite[167117](eq[167100](bvadd[167085](2, bvmul(4, 0), 163585), 4194312), 0, ite[167116](eq[167101](bvadd[167085](2, bvmul(4, 0), 163585), 2), 0, 128)))))))))))))))), ite[167166](eq[167135](bvadd[167134](1, bvmul(4, 0), 163585), 14), 0, ite[167165](eq[167136](bvadd[167134](1, bvmul(4, 0), 163585), 2147483648), 0, ite[167164](eq[167137](bvadd[167134](1, bvmul(4, 0), 163585), 16), 0, ite[167163](eq[167138](bvadd[167134](1, bvmul(4, 0), 163585), 2147483649), 0, ite[167162](eq[167139](bvadd[167134](1, bvmul(4, 0), 163585), 13), 0, ite[167161](eq[167140](bvadd[167134](1, bvmul(4, 0), 163585), 4194314), 0, ite[167160](eq[167141](bvadd[167134](1, bvmul(4, 0), 163585), 4194313), 0, ite[167159](eq[167142](bvadd[167134](1, bvmul(4, 0), 163585), 65540), 16, ite[167158](eq[167143](bvadd[167134](1, bvmul(4, 0), 163585), 1), 0, ite[167157](eq[167144](bvadd[167134](1, bvmul(4, 0), 163585), 2147483651), 0, ite[167156](eq[167145](bvadd[167134](1, bvmul(4, 0), 163585), 0), 13, ite[167155](eq[167146](bvadd[167134](1, bvmul(4, 0), 163585), 2147483650), 0, ite[167154](eq[167147](bvadd[167134](1, bvmul(4, 0), 163585), 15), 0, ite[167153](eq[167148](bvadd[167134](1, bvmul(4, 0), 163585), 3), 0, ite[167152](eq[167149](bvadd[167134](1, bvmul(4, 0), 163585), 4194312), 0, ite[167151](eq[167150](bvadd[167134](1, bvmul(4, 0), 163585), 2), 0, 128)))))))))))))))), ite[167199](eq[167168](bvadd[167167](bvmul(4, 0), 163585), 14), 0, ite[167198](eq[167169](bvadd[167167](bvmul(4, 0), 163585), 2147483648), 0, ite[167197](eq[167170](bvadd[167167](bvmul(4, 0), 163585), 16), 0, ite[167196](eq[167171](bvadd[167167](bvmul(4, 0), 163585), 2147483649), 0, ite[167195](eq[167172](bvadd[167167](bvmul(4, 0), 163585), 13), 0, ite[167194](eq[167173](bvadd[167167](bvmul(4, 0), 163585), 4194314), 0, ite[167193](eq[167174](bvadd[167167](bvmul(4, 0), 163585), 4194313), 0, ite[167192](eq[167175](bvadd[167167](bvmul(4, 0), 163585), 65540), 16, ite[167191](eq[167176](bvadd[167167](bvmul(4, 0), 163585), 1), 0, ite[167190](eq[167177](bvadd[167167](bvmul(4, 0), 163585), 2147483651), 0, ite[167189](eq[167178](bvadd[167167](bvmul(4, 0), 163585), 0), 13, ite[167188](eq[167179](bvadd[167167](bvmul(4, 0), 163585), 2147483650), 0, ite[167187](eq[167180](bvadd[167167](bvmul(4, 0), 163585), 15), 0, ite[167186](eq[167181](bvadd[167167](bvmul(4, 0), 163585), 3), 0, ite[167185](eq[167182](bvadd[167167](bvmul(4, 0), 163585), 4194312), 0, ite[167184](eq[167183](bvadd[167167](bvmul(4, 0), 163585), 2), 0, 128))))))))))))))))))) )
140305 : 0 { 0x0 +1.0e1025 } : INT                 : 0
163211 : sum_is(163180, 140305) : BOOL             : false
163212 : and(161718, 163211) : BOOL                : false
163225 : or(141222, 163212) : BOOL                 : false

ce =
=counter_example_begin z3v487.ce1554 7ae2a6aadb66ddb8daf16b0283575
=input.spec-%var-a-1
1 : Lambda41393Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2155905039 { 0x8080800f -2139062257 -1.390803e130 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2155905040 { 0x80808010 -2139062256 -1.390815e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda41394Var : BV:32
18 : Lambda41395Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 2155905041 { 0x80808011 -2139062255 -1.390827e130 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda41396Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 14 { 0xe +1.166e129 } : BV:32
62 : eq(60, 61) : BOOL
63 : 0 { 0x0 } : BV:8
64 : eq(60, 37) : BOOL
65 : 16 { 0x10 +1.190e129 } : BV:32
66 : eq(60, 65) : BOOL
67 : eq(60, 41) : BOOL
68 : 13 { 0xd +1.154e129 } : BV:32
69 : eq(60, 68) : BOOL
70 : 4194314 { 0x40000a +1.50000119e129 } : BV:32
71 : eq(60, 70) : BOOL
72 : 4194313 { 0x400009 +1.50000107e129 } : BV:32
73 : eq(60, 72) : BOOL
74 : 65540 { 0x10004 +1.781297e129 } : BV:32
75 : eq(60, 74) : BOOL
76 : 16 { 0x10 } : BV:8
77 : 1 { 0x1 +1.11e129 } : BV:32
78 : eq(60, 77) : BOOL
79 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
80 : eq(60, 79) : BOOL
81 : eq(60, 2) : BOOL
82 : 13 { 0xd } : BV:8
83 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
84 : eq(60, 83) : BOOL
85 : 15 { 0xf +1.178e129 } : BV:32
86 : eq(60, 85) : BOOL
87 : eq(60, 56) : BOOL
88 : 4194312 { 0x400008 +1.50000095e129 } : BV:32
89 : eq(60, 88) : BOOL
90 : 2 { 0x2 +1.23e129 } : BV:32
91 : eq(60, 90) : BOOL
92 : 128 { 0x80 -128 } : BV:8
93 : ite(91, 63, 92) : BV:8
94 : ite(89, 63, 93) : BV:8
95 : ite(87, 63, 94) : BV:8
96 : ite(86, 63, 95) : BV:8
97 : ite(84, 63, 96) : BV:8
98 : ite(81, 82, 97) : BV:8
99 : ite(80, 63, 98) : BV:8
100 : ite(78, 63, 99) : BV:8
101 : ite(75, 76, 100) : BV:8
102 : ite(73, 63, 101) : BV:8
103 : ite(71, 63, 102) : BV:8
104 : ite(69, 63, 103) : BV:8
105 : ite(67, 63, 104) : BV:8
106 : ite(66, 63, 105) : BV:8
107 : ite(64, 63, 106) : BV:8
108 : ite(62, 63, 107) : BV:8
109 : bvadd(90, 59, 2) : BV:32
110 : eq(109, 61) : BOOL
111 : eq(109, 37) : BOOL
112 : eq(109, 65) : BOOL
113 : eq(109, 41) : BOOL
114 : eq(109, 68) : BOOL
115 : eq(109, 70) : BOOL
116 : eq(109, 72) : BOOL
117 : eq(109, 74) : BOOL
118 : eq(109, 77) : BOOL
119 : eq(109, 79) : BOOL
120 : eq(109, 2) : BOOL
121 : eq(109, 83) : BOOL
122 : eq(109, 85) : BOOL
123 : eq(109, 56) : BOOL
124 : eq(109, 88) : BOOL
125 : eq(109, 90) : BOOL
126 : ite(125, 63, 92) : BV:8
127 : ite(124, 63, 126) : BV:8
128 : ite(123, 63, 127) : BV:8
129 : ite(122, 63, 128) : BV:8
130 : ite(121, 63, 129) : BV:8
131 : ite(120, 82, 130) : BV:8
132 : ite(119, 63, 131) : BV:8
133 : ite(118, 63, 132) : BV:8
134 : ite(117, 76, 133) : BV:8
135 : ite(116, 63, 134) : BV:8
136 : ite(115, 63, 135) : BV:8
137 : ite(114, 63, 136) : BV:8
138 : ite(113, 63, 137) : BV:8
139 : ite(112, 63, 138) : BV:8
140 : ite(111, 63, 139) : BV:8
141 : ite(110, 63, 140) : BV:8
142 : bvadd(77, 59, 2) : BV:32
143 : eq(142, 61) : BOOL
144 : eq(142, 37) : BOOL
145 : eq(142, 65) : BOOL
146 : eq(142, 41) : BOOL
147 : eq(142, 68) : BOOL
148 : eq(142, 70) : BOOL
149 : eq(142, 72) : BOOL
150 : eq(142, 74) : BOOL
151 : eq(142, 77) : BOOL
152 : eq(142, 79) : BOOL
153 : eq(142, 2) : BOOL
154 : eq(142, 83) : BOOL
155 : eq(142, 85) : BOOL
156 : eq(142, 56) : BOOL
157 : eq(142, 88) : BOOL
158 : eq(142, 90) : BOOL
159 : ite(158, 63, 92) : BV:8
160 : ite(157, 63, 159) : BV:8
161 : ite(156, 63, 160) : BV:8
162 : ite(155, 63, 161) : BV:8
163 : ite(154, 63, 162) : BV:8
164 : ite(153, 82, 163) : BV:8
165 : ite(152, 63, 164) : BV:8
166 : ite(151, 63, 165) : BV:8
167 : ite(150, 76, 166) : BV:8
168 : ite(149, 63, 167) : BV:8
169 : ite(148, 63, 168) : BV:8
170 : ite(147, 63, 169) : BV:8
171 : ite(146, 63, 170) : BV:8
172 : ite(145, 63, 171) : BV:8
173 : ite(144, 63, 172) : BV:8
174 : ite(143, 63, 173) : BV:8
175 : bvadd(59, 2) : BV:32
176 : eq(175, 61) : BOOL
177 : eq(175, 37) : BOOL
178 : eq(175, 65) : BOOL
179 : eq(175, 41) : BOOL
180 : eq(175, 68) : BOOL
181 : eq(175, 70) : BOOL
182 : eq(175, 72) : BOOL
183 : eq(175, 74) : BOOL
184 : eq(175, 77) : BOOL
185 : eq(175, 79) : BOOL
186 : eq(175, 2) : BOOL
187 : eq(175, 83) : BOOL
188 : eq(175, 85) : BOOL
189 : eq(175, 56) : BOOL
190 : eq(175, 88) : BOOL
191 : eq(175, 90) : BOOL
192 : ite(191, 63, 92) : BV:8
193 : ite(190, 63, 192) : BV:8
194 : ite(189, 63, 193) : BV:8
195 : ite(188, 63, 194) : BV:8
196 : ite(187, 63, 195) : BV:8
197 : ite(186, 82, 196) : BV:8
198 : ite(185, 63, 197) : BV:8
199 : ite(184, 63, 198) : BV:8
200 : ite(183, 76, 199) : BV:8
201 : ite(182, 63, 200) : BV:8
202 : ite(181, 63, 201) : BV:8
203 : ite(180, 63, 202) : BV:8
204 : ite(179, 63, 203) : BV:8
205 : ite(178, 63, 204) : BV:8
206 : ite(177, 63, 205) : BV:8
207 : ite(176, 63, 206) : BV:8
208 : bvconcat(108, 141, 174, 207) : BV:32
209 : bvadd(56, 58, 208) : BV:32
210 : eq(209, 61) : BOOL
211 : eq(209, 37) : BOOL
212 : eq(209, 65) : BOOL
213 : eq(209, 41) : BOOL
214 : eq(209, 68) : BOOL
215 : eq(209, 70) : BOOL
216 : eq(209, 72) : BOOL
217 : eq(209, 74) : BOOL
218 : eq(209, 77) : BOOL
219 : eq(209, 79) : BOOL
220 : eq(209, 2) : BOOL
221 : eq(209, 83) : BOOL
222 : eq(209, 85) : BOOL
223 : eq(209, 56) : BOOL
224 : eq(209, 88) : BOOL
225 : eq(209, 90) : BOOL
226 : ite(225, 63, 92) : BV:8
227 : ite(224, 63, 226) : BV:8
228 : ite(223, 63, 227) : BV:8
229 : ite(222, 63, 228) : BV:8
230 : ite(221, 63, 229) : BV:8
231 : ite(220, 82, 230) : BV:8
232 : ite(219, 63, 231) : BV:8
233 : ite(218, 63, 232) : BV:8
234 : ite(217, 76, 233) : BV:8
235 : ite(216, 63, 234) : BV:8
236 : ite(215, 63, 235) : BV:8
237 : ite(214, 63, 236) : BV:8
238 : ite(213, 63, 237) : BV:8
239 : ite(212, 63, 238) : BV:8
240 : ite(211, 63, 239) : BV:8
241 : ite(210, 63, 240) : BV:8
242 : bvadd(90, 58, 208) : BV:32
243 : eq(242, 61) : BOOL
244 : eq(242, 37) : BOOL
245 : eq(242, 65) : BOOL
246 : eq(242, 41) : BOOL
247 : eq(242, 68) : BOOL
248 : eq(242, 70) : BOOL
249 : eq(242, 72) : BOOL
250 : eq(242, 74) : BOOL
251 : eq(242, 77) : BOOL
252 : eq(242, 79) : BOOL
253 : eq(242, 2) : BOOL
254 : eq(242, 83) : BOOL
255 : eq(242, 85) : BOOL
256 : eq(242, 56) : BOOL
257 : eq(242, 88) : BOOL
258 : eq(242, 90) : BOOL
259 : ite(258, 63, 92) : BV:8
260 : ite(257, 63, 259) : BV:8
261 : ite(256, 63, 260) : BV:8
262 : ite(255, 63, 261) : BV:8
263 : ite(254, 63, 262) : BV:8
264 : ite(253, 82, 263) : BV:8
265 : ite(252, 63, 264) : BV:8
266 : ite(251, 63, 265) : BV:8
267 : ite(250, 76, 266) : BV:8
268 : ite(249, 63, 267) : BV:8
269 : ite(248, 63, 268) : BV:8
270 : ite(247, 63, 269) : BV:8
271 : ite(246, 63, 270) : BV:8
272 : ite(245, 63, 271) : BV:8
273 : ite(244, 63, 272) : BV:8
274 : ite(243, 63, 273) : BV:8
275 : bvadd(77, 58, 208) : BV:32
276 : eq(275, 61) : BOOL
277 : eq(275, 37) : BOOL
278 : eq(275, 65) : BOOL
279 : eq(275, 41) : BOOL
280 : eq(275, 68) : BOOL
281 : eq(275, 70) : BOOL
282 : eq(275, 72) : BOOL
283 : eq(275, 74) : BOOL
284 : eq(275, 77) : BOOL
285 : eq(275, 79) : BOOL
286 : eq(275, 2) : BOOL
287 : eq(275, 83) : BOOL
288 : eq(275, 85) : BOOL
289 : eq(275, 56) : BOOL
290 : eq(275, 88) : BOOL
291 : eq(275, 90) : BOOL
292 : ite(291, 63, 92) : BV:8
293 : ite(290, 63, 292) : BV:8
294 : ite(289, 63, 293) : BV:8
295 : ite(288, 63, 294) : BV:8
296 : ite(287, 63, 295) : BV:8
297 : ite(286, 82, 296) : BV:8
298 : ite(285, 63, 297) : BV:8
299 : ite(284, 63, 298) : BV:8
300 : ite(283, 76, 299) : BV:8
301 : ite(282, 63, 300) : BV:8
302 : ite(281, 63, 301) : BV:8
303 : ite(280, 63, 302) : BV:8
304 : ite(279, 63, 303) : BV:8
305 : ite(278, 63, 304) : BV:8
306 : ite(277, 63, 305) : BV:8
307 : ite(276, 63, 306) : BV:8
308 : bvadd(58, 208) : BV:32
309 : eq(308, 61) : BOOL
310 : eq(308, 37) : BOOL
311 : eq(308, 65) : BOOL
312 : eq(308, 41) : BOOL
313 : eq(308, 68) : BOOL
314 : eq(308, 70) : BOOL
315 : eq(308, 72) : BOOL
316 : eq(308, 74) : BOOL
317 : eq(308, 77) : BOOL
318 : eq(308, 79) : BOOL
319 : eq(308, 2) : BOOL
320 : eq(308, 83) : BOOL
321 : eq(308, 85) : BOOL
322 : eq(308, 56) : BOOL
323 : eq(308, 88) : BOOL
324 : eq(308, 90) : BOOL
325 : ite(324, 63, 92) : BV:8
326 : ite(323, 63, 325) : BV:8
327 : ite(322, 63, 326) : BV:8
328 : ite(321, 63, 327) : BV:8
329 : ite(320, 63, 328) : BV:8
330 : ite(319, 82, 329) : BV:8
331 : ite(318, 63, 330) : BV:8
332 : ite(317, 63, 331) : BV:8
333 : ite(316, 76, 332) : BV:8
334 : ite(315, 63, 333) : BV:8
335 : ite(314, 63, 334) : BV:8
336 : ite(313, 63, 335) : BV:8
337 : ite(312, 63, 336) : BV:8
338 : ite(311, 63, 337) : BV:8
339 : ite(310, 63, 338) : BV:8
340 : ite(309, 63, 339) : BV:8
341 : bvconcat(241, 274, 307, 340) : BV:32
342 : ite(55, 2, 341) : BV:32
343 : lambda(52, 342) : FUNCTION[BV:32 -> BV:32]
344 : map(51, 343) : MAP[BV:32 -> BV:32]
345 : lambda(17, 344) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
346 : map(16, 345) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
347 : sym_const(346) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-a-0.L3%7%bbentry
1 : Lambda41393Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2155905039 { 0x8080800f -2139062257 -1.390803e130 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2155905040 { 0x80808010 -2139062256 -1.390815e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda41394Var : BV:32
18 : Lambda41395Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 2155905041 { 0x80808011 -2139062255 -1.390827e130 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda41396Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 14 { 0xe +1.166e129 } : BV:32
62 : eq(60, 61) : BOOL
63 : 0 { 0x0 } : BV:8
64 : eq(60, 37) : BOOL
65 : 16 { 0x10 +1.190e129 } : BV:32
66 : eq(60, 65) : BOOL
67 : eq(60, 41) : BOOL
68 : 13 { 0xd +1.154e129 } : BV:32
69 : eq(60, 68) : BOOL
70 : 4194314 { 0x40000a +1.50000119e129 } : BV:32
71 : eq(60, 70) : BOOL
72 : 4194313 { 0x400009 +1.50000107e129 } : BV:32
73 : eq(60, 72) : BOOL
74 : 65540 { 0x10004 +1.781297e129 } : BV:32
75 : eq(60, 74) : BOOL
76 : 16 { 0x10 } : BV:8
77 : 1 { 0x1 +1.11e129 } : BV:32
78 : eq(60, 77) : BOOL
79 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
80 : eq(60, 79) : BOOL
81 : eq(60, 2) : BOOL
82 : 13 { 0xd } : BV:8
83 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
84 : eq(60, 83) : BOOL
85 : 15 { 0xf +1.178e129 } : BV:32
86 : eq(60, 85) : BOOL
87 : eq(60, 56) : BOOL
88 : 4194312 { 0x400008 +1.50000095e129 } : BV:32
89 : eq(60, 88) : BOOL
90 : 2 { 0x2 +1.23e129 } : BV:32
91 : eq(60, 90) : BOOL
92 : 128 { 0x80 -128 } : BV:8
93 : ite(91, 63, 92) : BV:8
94 : ite(89, 63, 93) : BV:8
95 : ite(87, 63, 94) : BV:8
96 : ite(86, 63, 95) : BV:8
97 : ite(84, 63, 96) : BV:8
98 : ite(81, 82, 97) : BV:8
99 : ite(80, 63, 98) : BV:8
100 : ite(78, 63, 99) : BV:8
101 : ite(75, 76, 100) : BV:8
102 : ite(73, 63, 101) : BV:8
103 : ite(71, 63, 102) : BV:8
104 : ite(69, 63, 103) : BV:8
105 : ite(67, 63, 104) : BV:8
106 : ite(66, 63, 105) : BV:8
107 : ite(64, 63, 106) : BV:8
108 : ite(62, 63, 107) : BV:8
109 : bvadd(90, 59, 2) : BV:32
110 : eq(109, 61) : BOOL
111 : eq(109, 37) : BOOL
112 : eq(109, 65) : BOOL
113 : eq(109, 41) : BOOL
114 : eq(109, 68) : BOOL
115 : eq(109, 70) : BOOL
116 : eq(109, 72) : BOOL
117 : eq(109, 74) : BOOL
118 : eq(109, 77) : BOOL
119 : eq(109, 79) : BOOL
120 : eq(109, 2) : BOOL
121 : eq(109, 83) : BOOL
122 : eq(109, 85) : BOOL
123 : eq(109, 56) : BOOL
124 : eq(109, 88) : BOOL
125 : eq(109, 90) : BOOL
126 : ite(125, 63, 92) : BV:8
127 : ite(124, 63, 126) : BV:8
128 : ite(123, 63, 127) : BV:8
129 : ite(122, 63, 128) : BV:8
130 : ite(121, 63, 129) : BV:8
131 : ite(120, 82, 130) : BV:8
132 : ite(119, 63, 131) : BV:8
133 : ite(118, 63, 132) : BV:8
134 : ite(117, 76, 133) : BV:8
135 : ite(116, 63, 134) : BV:8
136 : ite(115, 63, 135) : BV:8
137 : ite(114, 63, 136) : BV:8
138 : ite(113, 63, 137) : BV:8
139 : ite(112, 63, 138) : BV:8
140 : ite(111, 63, 139) : BV:8
141 : ite(110, 63, 140) : BV:8
142 : bvadd(77, 59, 2) : BV:32
143 : eq(142, 61) : BOOL
144 : eq(142, 37) : BOOL
145 : eq(142, 65) : BOOL
146 : eq(142, 41) : BOOL
147 : eq(142, 68) : BOOL
148 : eq(142, 70) : BOOL
149 : eq(142, 72) : BOOL
150 : eq(142, 74) : BOOL
151 : eq(142, 77) : BOOL
152 : eq(142, 79) : BOOL
153 : eq(142, 2) : BOOL
154 : eq(142, 83) : BOOL
155 : eq(142, 85) : BOOL
156 : eq(142, 56) : BOOL
157 : eq(142, 88) : BOOL
158 : eq(142, 90) : BOOL
159 : ite(158, 63, 92) : BV:8
160 : ite(157, 63, 159) : BV:8
161 : ite(156, 63, 160) : BV:8
162 : ite(155, 63, 161) : BV:8
163 : ite(154, 63, 162) : BV:8
164 : ite(153, 82, 163) : BV:8
165 : ite(152, 63, 164) : BV:8
166 : ite(151, 63, 165) : BV:8
167 : ite(150, 76, 166) : BV:8
168 : ite(149, 63, 167) : BV:8
169 : ite(148, 63, 168) : BV:8
170 : ite(147, 63, 169) : BV:8
171 : ite(146, 63, 170) : BV:8
172 : ite(145, 63, 171) : BV:8
173 : ite(144, 63, 172) : BV:8
174 : ite(143, 63, 173) : BV:8
175 : bvadd(59, 2) : BV:32
176 : eq(175, 61) : BOOL
177 : eq(175, 37) : BOOL
178 : eq(175, 65) : BOOL
179 : eq(175, 41) : BOOL
180 : eq(175, 68) : BOOL
181 : eq(175, 70) : BOOL
182 : eq(175, 72) : BOOL
183 : eq(175, 74) : BOOL
184 : eq(175, 77) : BOOL
185 : eq(175, 79) : BOOL
186 : eq(175, 2) : BOOL
187 : eq(175, 83) : BOOL
188 : eq(175, 85) : BOOL
189 : eq(175, 56) : BOOL
190 : eq(175, 88) : BOOL
191 : eq(175, 90) : BOOL
192 : ite(191, 63, 92) : BV:8
193 : ite(190, 63, 192) : BV:8
194 : ite(189, 63, 193) : BV:8
195 : ite(188, 63, 194) : BV:8
196 : ite(187, 63, 195) : BV:8
197 : ite(186, 82, 196) : BV:8
198 : ite(185, 63, 197) : BV:8
199 : ite(184, 63, 198) : BV:8
200 : ite(183, 76, 199) : BV:8
201 : ite(182, 63, 200) : BV:8
202 : ite(181, 63, 201) : BV:8
203 : ite(180, 63, 202) : BV:8
204 : ite(179, 63, 203) : BV:8
205 : ite(178, 63, 204) : BV:8
206 : ite(177, 63, 205) : BV:8
207 : ite(176, 63, 206) : BV:8
208 : bvconcat(108, 141, 174, 207) : BV:32
209 : bvadd(56, 58, 208) : BV:32
210 : eq(209, 61) : BOOL
211 : eq(209, 37) : BOOL
212 : eq(209, 65) : BOOL
213 : eq(209, 41) : BOOL
214 : eq(209, 68) : BOOL
215 : eq(209, 70) : BOOL
216 : eq(209, 72) : BOOL
217 : eq(209, 74) : BOOL
218 : eq(209, 77) : BOOL
219 : eq(209, 79) : BOOL
220 : eq(209, 2) : BOOL
221 : eq(209, 83) : BOOL
222 : eq(209, 85) : BOOL
223 : eq(209, 56) : BOOL
224 : eq(209, 88) : BOOL
225 : eq(209, 90) : BOOL
226 : ite(225, 63, 92) : BV:8
227 : ite(224, 63, 226) : BV:8
228 : ite(223, 63, 227) : BV:8
229 : ite(222, 63, 228) : BV:8
230 : ite(221, 63, 229) : BV:8
231 : ite(220, 82, 230) : BV:8
232 : ite(219, 63, 231) : BV:8
233 : ite(218, 63, 232) : BV:8
234 : ite(217, 76, 233) : BV:8
235 : ite(216, 63, 234) : BV:8
236 : ite(215, 63, 235) : BV:8
237 : ite(214, 63, 236) : BV:8
238 : ite(213, 63, 237) : BV:8
239 : ite(212, 63, 238) : BV:8
240 : ite(211, 63, 239) : BV:8
241 : ite(210, 63, 240) : BV:8
242 : bvadd(90, 58, 208) : BV:32
243 : eq(242, 61) : BOOL
244 : eq(242, 37) : BOOL
245 : eq(242, 65) : BOOL
246 : eq(242, 41) : BOOL
247 : eq(242, 68) : BOOL
248 : eq(242, 70) : BOOL
249 : eq(242, 72) : BOOL
250 : eq(242, 74) : BOOL
251 : eq(242, 77) : BOOL
252 : eq(242, 79) : BOOL
253 : eq(242, 2) : BOOL
254 : eq(242, 83) : BOOL
255 : eq(242, 85) : BOOL
256 : eq(242, 56) : BOOL
257 : eq(242, 88) : BOOL
258 : eq(242, 90) : BOOL
259 : ite(258, 63, 92) : BV:8
260 : ite(257, 63, 259) : BV:8
261 : ite(256, 63, 260) : BV:8
262 : ite(255, 63, 261) : BV:8
263 : ite(254, 63, 262) : BV:8
264 : ite(253, 82, 263) : BV:8
265 : ite(252, 63, 264) : BV:8
266 : ite(251, 63, 265) : BV:8
267 : ite(250, 76, 266) : BV:8
268 : ite(249, 63, 267) : BV:8
269 : ite(248, 63, 268) : BV:8
270 : ite(247, 63, 269) : BV:8
271 : ite(246, 63, 270) : BV:8
272 : ite(245, 63, 271) : BV:8
273 : ite(244, 63, 272) : BV:8
274 : ite(243, 63, 273) : BV:8
275 : bvadd(77, 58, 208) : BV:32
276 : eq(275, 61) : BOOL
277 : eq(275, 37) : BOOL
278 : eq(275, 65) : BOOL
279 : eq(275, 41) : BOOL
280 : eq(275, 68) : BOOL
281 : eq(275, 70) : BOOL
282 : eq(275, 72) : BOOL
283 : eq(275, 74) : BOOL
284 : eq(275, 77) : BOOL
285 : eq(275, 79) : BOOL
286 : eq(275, 2) : BOOL
287 : eq(275, 83) : BOOL
288 : eq(275, 85) : BOOL
289 : eq(275, 56) : BOOL
290 : eq(275, 88) : BOOL
291 : eq(275, 90) : BOOL
292 : ite(291, 63, 92) : BV:8
293 : ite(290, 63, 292) : BV:8
294 : ite(289, 63, 293) : BV:8
295 : ite(288, 63, 294) : BV:8
296 : ite(287, 63, 295) : BV:8
297 : ite(286, 82, 296) : BV:8
298 : ite(285, 63, 297) : BV:8
299 : ite(284, 63, 298) : BV:8
300 : ite(283, 76, 299) : BV:8
301 : ite(282, 63, 300) : BV:8
302 : ite(281, 63, 301) : BV:8
303 : ite(280, 63, 302) : BV:8
304 : ite(279, 63, 303) : BV:8
305 : ite(278, 63, 304) : BV:8
306 : ite(277, 63, 305) : BV:8
307 : ite(276, 63, 306) : BV:8
308 : bvadd(58, 208) : BV:32
309 : eq(308, 61) : BOOL
310 : eq(308, 37) : BOOL
311 : eq(308, 65) : BOOL
312 : eq(308, 41) : BOOL
313 : eq(308, 68) : BOOL
314 : eq(308, 70) : BOOL
315 : eq(308, 72) : BOOL
316 : eq(308, 74) : BOOL
317 : eq(308, 77) : BOOL
318 : eq(308, 79) : BOOL
319 : eq(308, 2) : BOOL
320 : eq(308, 83) : BOOL
321 : eq(308, 85) : BOOL
322 : eq(308, 56) : BOOL
323 : eq(308, 88) : BOOL
324 : eq(308, 90) : BOOL
325 : ite(324, 63, 92) : BV:8
326 : ite(323, 63, 325) : BV:8
327 : ite(322, 63, 326) : BV:8
328 : ite(321, 63, 327) : BV:8
329 : ite(320, 63, 328) : BV:8
330 : ite(319, 82, 329) : BV:8
331 : ite(318, 63, 330) : BV:8
332 : ite(317, 63, 331) : BV:8
333 : ite(316, 76, 332) : BV:8
334 : ite(315, 63, 333) : BV:8
335 : ite(314, 63, 334) : BV:8
336 : ite(313, 63, 335) : BV:8
337 : ite(312, 63, 336) : BV:8
338 : ite(311, 63, 337) : BV:8
339 : ite(310, 63, 338) : BV:8
340 : ite(309, 63, 339) : BV:8
341 : bvconcat(241, 274, 307, 340) : BV:32
342 : ite(55, 2, 341) : BV:32
343 : lambda(52, 342) : FUNCTION[BV:32 -> BV:32]
344 : map(51, 343) : MAP[BV:32 -> BV:32]
345 : lambda(17, 344) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
346 : map(16, 345) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
347 : sym_const(346) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 13, [ 1; 3 ] -> 0, [ 4; 12 ] -> 128, [ 13; 16 ] -> 0, [ 17; 65539 ] -> 128, [ 65540; 65540 ] -> 16, [ 65541; 4194311 ] -> 128, [ 4194312; 4194314 ] -> 0, [ 4194315; 2147483647 ] -> 128, [ 2147483648; 2147483651 ] -> 0, [ 2147483652; 4294967295 ] -> 128, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 65539 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 65540; 65543 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 65544; 4194311 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 4194312; 4194315 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 4194316; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2147483652; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%n
1 : 2155905040 { 0x80808010 -2139062256 -1.390815e130 } : BV:32
=input.dst.llvm-%m
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1236928623 { 0x49ba086f +1.45338237e20 } : COUNT
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%arr
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 4194312 { 0x400008 +1.50000095e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 65540 { 0x10004 +1.781297e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1236928623 { 0x49ba086f +1.45338237e20 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 4194312 { 0x400008 +1.50000095e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 4194315 { 0x40000b +1.50000131e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 65540 { 0x10004 +1.781297e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 65543 { 0x10007 +1.781333e129 } : BV:32
=input.spec-%var-a-0.L3%7%bbentry.1.1.0.1
1 : Lambda41332Var : BV:32
2 : Lambda41333Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2155905039 { 0x8080800f -2139062257 -1.390803e130 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2155905041 { 0x80808011 -2139062255 -1.390827e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2155905040 { 0x80808010 -2139062256 -1.390815e130 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-a-1.1.1.0.1
1 : Lambda41338Var : BV:32
2 : Lambda41339Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2155905039 { 0x8080800f -2139062257 -1.390803e130 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2155905041 { 0x80808011 -2139062255 -1.390827e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2155905040 { 0x80808010 -2139062256 -1.390815e130 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-a-1.0.1
1 : ([ 0; 2155905039 ] -> true, [ 2155905040; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-a-1.1.1.1.1
1 : Lambda41344Var : BV:32
2 : Lambda41345Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 14 { 0xe +1.166e129 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
16 : eq(11, 15) : BOOL
17 : 16 { 0x10 +1.190e129 } : BV:32
18 : eq(11, 17) : BOOL
19 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
20 : eq(11, 19) : BOOL
21 : 13 { 0xd +1.154e129 } : BV:32
22 : eq(11, 21) : BOOL
23 : 4194314 { 0x40000a +1.50000119e129 } : BV:32
24 : eq(11, 23) : BOOL
25 : 4194313 { 0x400009 +1.50000107e129 } : BV:32
26 : eq(11, 25) : BOOL
27 : 65540 { 0x10004 +1.781297e129 } : BV:32
28 : eq(11, 27) : BOOL
29 : 16 { 0x10 } : BV:8
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : eq(11, 30) : BOOL
32 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
33 : eq(11, 32) : BOOL
34 : eq(11, 3) : BOOL
35 : 13 { 0xd } : BV:8
36 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
37 : eq(11, 36) : BOOL
38 : 15 { 0xf +1.178e129 } : BV:32
39 : eq(11, 38) : BOOL
40 : eq(11, 7) : BOOL
41 : 4194312 { 0x400008 +1.50000095e129 } : BV:32
42 : eq(11, 41) : BOOL
43 : 2 { 0x2 +1.23e129 } : BV:32
44 : eq(11, 43) : BOOL
45 : 128 { 0x80 -128 } : BV:8
46 : ite(44, 14, 45) : BV:8
47 : ite(42, 14, 46) : BV:8
48 : ite(40, 14, 47) : BV:8
49 : ite(39, 14, 48) : BV:8
50 : ite(37, 14, 49) : BV:8
51 : ite(34, 35, 50) : BV:8
52 : ite(33, 14, 51) : BV:8
53 : ite(31, 14, 52) : BV:8
54 : ite(28, 29, 53) : BV:8
55 : ite(26, 14, 54) : BV:8
56 : ite(24, 14, 55) : BV:8
57 : ite(22, 14, 56) : BV:8
58 : ite(20, 14, 57) : BV:8
59 : ite(18, 14, 58) : BV:8
60 : ite(16, 14, 59) : BV:8
61 : ite(13, 14, 60) : BV:8
62 : bvadd(43, 10, 3) : BV:32
63 : eq(62, 12) : BOOL
64 : eq(62, 15) : BOOL
65 : eq(62, 17) : BOOL
66 : eq(62, 19) : BOOL
67 : eq(62, 21) : BOOL
68 : eq(62, 23) : BOOL
69 : eq(62, 25) : BOOL
70 : eq(62, 27) : BOOL
71 : eq(62, 30) : BOOL
72 : eq(62, 32) : BOOL
73 : eq(62, 3) : BOOL
74 : eq(62, 36) : BOOL
75 : eq(62, 38) : BOOL
76 : eq(62, 7) : BOOL
77 : eq(62, 41) : BOOL
78 : eq(62, 43) : BOOL
79 : ite(78, 14, 45) : BV:8
80 : ite(77, 14, 79) : BV:8
81 : ite(76, 14, 80) : BV:8
82 : ite(75, 14, 81) : BV:8
83 : ite(74, 14, 82) : BV:8
84 : ite(73, 35, 83) : BV:8
85 : ite(72, 14, 84) : BV:8
86 : ite(71, 14, 85) : BV:8
87 : ite(70, 29, 86) : BV:8
88 : ite(69, 14, 87) : BV:8
89 : ite(68, 14, 88) : BV:8
90 : ite(67, 14, 89) : BV:8
91 : ite(66, 14, 90) : BV:8
92 : ite(65, 14, 91) : BV:8
93 : ite(64, 14, 92) : BV:8
94 : ite(63, 14, 93) : BV:8
95 : bvadd(30, 10, 3) : BV:32
96 : eq(95, 12) : BOOL
97 : eq(95, 15) : BOOL
98 : eq(95, 17) : BOOL
99 : eq(95, 19) : BOOL
100 : eq(95, 21) : BOOL
101 : eq(95, 23) : BOOL
102 : eq(95, 25) : BOOL
103 : eq(95, 27) : BOOL
104 : eq(95, 30) : BOOL
105 : eq(95, 32) : BOOL
106 : eq(95, 3) : BOOL
107 : eq(95, 36) : BOOL
108 : eq(95, 38) : BOOL
109 : eq(95, 7) : BOOL
110 : eq(95, 41) : BOOL
111 : eq(95, 43) : BOOL
112 : ite(111, 14, 45) : BV:8
113 : ite(110, 14, 112) : BV:8
114 : ite(109, 14, 113) : BV:8
115 : ite(108, 14, 114) : BV:8
116 : ite(107, 14, 115) : BV:8
117 : ite(106, 35, 116) : BV:8
118 : ite(105, 14, 117) : BV:8
119 : ite(104, 14, 118) : BV:8
120 : ite(103, 29, 119) : BV:8
121 : ite(102, 14, 120) : BV:8
122 : ite(101, 14, 121) : BV:8
123 : ite(100, 14, 122) : BV:8
124 : ite(99, 14, 123) : BV:8
125 : ite(98, 14, 124) : BV:8
126 : ite(97, 14, 125) : BV:8
127 : ite(96, 14, 126) : BV:8
128 : bvadd(10, 3) : BV:32
129 : eq(128, 12) : BOOL
130 : eq(128, 15) : BOOL
131 : eq(128, 17) : BOOL
132 : eq(128, 19) : BOOL
133 : eq(128, 21) : BOOL
134 : eq(128, 23) : BOOL
135 : eq(128, 25) : BOOL
136 : eq(128, 27) : BOOL
137 : eq(128, 30) : BOOL
138 : eq(128, 32) : BOOL
139 : eq(128, 3) : BOOL
140 : eq(128, 36) : BOOL
141 : eq(128, 38) : BOOL
142 : eq(128, 7) : BOOL
143 : eq(128, 41) : BOOL
144 : eq(128, 43) : BOOL
145 : ite(144, 14, 45) : BV:8
146 : ite(143, 14, 145) : BV:8
147 : ite(142, 14, 146) : BV:8
148 : ite(141, 14, 147) : BV:8
149 : ite(140, 14, 148) : BV:8
150 : ite(139, 35, 149) : BV:8
151 : ite(138, 14, 150) : BV:8
152 : ite(137, 14, 151) : BV:8
153 : ite(136, 29, 152) : BV:8
154 : ite(135, 14, 153) : BV:8
155 : ite(134, 14, 154) : BV:8
156 : ite(133, 14, 155) : BV:8
157 : ite(132, 14, 156) : BV:8
158 : ite(131, 14, 157) : BV:8
159 : ite(130, 14, 158) : BV:8
160 : ite(129, 14, 159) : BV:8
161 : bvconcat(61, 94, 127, 160) : BV:32
162 : bvadd(7, 9, 161) : BV:32
163 : eq(162, 12) : BOOL
164 : eq(162, 15) : BOOL
165 : eq(162, 17) : BOOL
166 : eq(162, 19) : BOOL
167 : eq(162, 21) : BOOL
168 : eq(162, 23) : BOOL
169 : eq(162, 25) : BOOL
170 : eq(162, 27) : BOOL
171 : eq(162, 30) : BOOL
172 : eq(162, 32) : BOOL
173 : eq(162, 3) : BOOL
174 : eq(162, 36) : BOOL
175 : eq(162, 38) : BOOL
176 : eq(162, 7) : BOOL
177 : eq(162, 41) : BOOL
178 : eq(162, 43) : BOOL
179 : ite(178, 14, 45) : BV:8
180 : ite(177, 14, 179) : BV:8
181 : ite(176, 14, 180) : BV:8
182 : ite(175, 14, 181) : BV:8
183 : ite(174, 14, 182) : BV:8
184 : ite(173, 35, 183) : BV:8
185 : ite(172, 14, 184) : BV:8
186 : ite(171, 14, 185) : BV:8
187 : ite(170, 29, 186) : BV:8
188 : ite(169, 14, 187) : BV:8
189 : ite(168, 14, 188) : BV:8
190 : ite(167, 14, 189) : BV:8
191 : ite(166, 14, 190) : BV:8
192 : ite(165, 14, 191) : BV:8
193 : ite(164, 14, 192) : BV:8
194 : ite(163, 14, 193) : BV:8
195 : bvadd(43, 9, 161) : BV:32
196 : eq(195, 12) : BOOL
197 : eq(195, 15) : BOOL
198 : eq(195, 17) : BOOL
199 : eq(195, 19) : BOOL
200 : eq(195, 21) : BOOL
201 : eq(195, 23) : BOOL
202 : eq(195, 25) : BOOL
203 : eq(195, 27) : BOOL
204 : eq(195, 30) : BOOL
205 : eq(195, 32) : BOOL
206 : eq(195, 3) : BOOL
207 : eq(195, 36) : BOOL
208 : eq(195, 38) : BOOL
209 : eq(195, 7) : BOOL
210 : eq(195, 41) : BOOL
211 : eq(195, 43) : BOOL
212 : ite(211, 14, 45) : BV:8
213 : ite(210, 14, 212) : BV:8
214 : ite(209, 14, 213) : BV:8
215 : ite(208, 14, 214) : BV:8
216 : ite(207, 14, 215) : BV:8
217 : ite(206, 35, 216) : BV:8
218 : ite(205, 14, 217) : BV:8
219 : ite(204, 14, 218) : BV:8
220 : ite(203, 29, 219) : BV:8
221 : ite(202, 14, 220) : BV:8
222 : ite(201, 14, 221) : BV:8
223 : ite(200, 14, 222) : BV:8
224 : ite(199, 14, 223) : BV:8
225 : ite(198, 14, 224) : BV:8
226 : ite(197, 14, 225) : BV:8
227 : ite(196, 14, 226) : BV:8
228 : bvadd(30, 9, 161) : BV:32
229 : eq(228, 12) : BOOL
230 : eq(228, 15) : BOOL
231 : eq(228, 17) : BOOL
232 : eq(228, 19) : BOOL
233 : eq(228, 21) : BOOL
234 : eq(228, 23) : BOOL
235 : eq(228, 25) : BOOL
236 : eq(228, 27) : BOOL
237 : eq(228, 30) : BOOL
238 : eq(228, 32) : BOOL
239 : eq(228, 3) : BOOL
240 : eq(228, 36) : BOOL
241 : eq(228, 38) : BOOL
242 : eq(228, 7) : BOOL
243 : eq(228, 41) : BOOL
244 : eq(228, 43) : BOOL
245 : ite(244, 14, 45) : BV:8
246 : ite(243, 14, 245) : BV:8
247 : ite(242, 14, 246) : BV:8
248 : ite(241, 14, 247) : BV:8
249 : ite(240, 14, 248) : BV:8
250 : ite(239, 35, 249) : BV:8
251 : ite(238, 14, 250) : BV:8
252 : ite(237, 14, 251) : BV:8
253 : ite(236, 29, 252) : BV:8
254 : ite(235, 14, 253) : BV:8
255 : ite(234, 14, 254) : BV:8
256 : ite(233, 14, 255) : BV:8
257 : ite(232, 14, 256) : BV:8
258 : ite(231, 14, 257) : BV:8
259 : ite(230, 14, 258) : BV:8
260 : ite(229, 14, 259) : BV:8
261 : bvadd(9, 161) : BV:32
262 : eq(261, 12) : BOOL
263 : eq(261, 15) : BOOL
264 : eq(261, 17) : BOOL
265 : eq(261, 19) : BOOL
266 : eq(261, 21) : BOOL
267 : eq(261, 23) : BOOL
268 : eq(261, 25) : BOOL
269 : eq(261, 27) : BOOL
270 : eq(261, 30) : BOOL
271 : eq(261, 32) : BOOL
272 : eq(261, 3) : BOOL
273 : eq(261, 36) : BOOL
274 : eq(261, 38) : BOOL
275 : eq(261, 7) : BOOL
276 : eq(261, 41) : BOOL
277 : eq(261, 43) : BOOL
278 : ite(277, 14, 45) : BV:8
279 : ite(276, 14, 278) : BV:8
280 : ite(275, 14, 279) : BV:8
281 : ite(274, 14, 280) : BV:8
282 : ite(273, 14, 281) : BV:8
283 : ite(272, 35, 282) : BV:8
284 : ite(271, 14, 283) : BV:8
285 : ite(270, 14, 284) : BV:8
286 : ite(269, 29, 285) : BV:8
287 : ite(268, 14, 286) : BV:8
288 : ite(267, 14, 287) : BV:8
289 : ite(266, 14, 288) : BV:8
290 : ite(265, 14, 289) : BV:8
291 : ite(264, 14, 290) : BV:8
292 : ite(263, 14, 291) : BV:8
293 : ite(262, 14, 292) : BV:8
294 : bvconcat(194, 227, 260, 293) : BV:32
295 : ite(6, 3, 294) : BV:32
296 : lambda(1, 2, 295) : FUNCTION[BV:32,BV:32 -> BV:32]
297 : sym_const(296) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-a-0.L3%7%bbentry.1.1.1.1
1 : Lambda41346Var : BV:32
2 : Lambda41347Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 14 { 0xe +1.166e129 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
16 : eq(11, 15) : BOOL
17 : 16 { 0x10 +1.190e129 } : BV:32
18 : eq(11, 17) : BOOL
19 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
20 : eq(11, 19) : BOOL
21 : 13 { 0xd +1.154e129 } : BV:32
22 : eq(11, 21) : BOOL
23 : 4194314 { 0x40000a +1.50000119e129 } : BV:32
24 : eq(11, 23) : BOOL
25 : 4194313 { 0x400009 +1.50000107e129 } : BV:32
26 : eq(11, 25) : BOOL
27 : 65540 { 0x10004 +1.781297e129 } : BV:32
28 : eq(11, 27) : BOOL
29 : 16 { 0x10 } : BV:8
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : eq(11, 30) : BOOL
32 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
33 : eq(11, 32) : BOOL
34 : eq(11, 3) : BOOL
35 : 13 { 0xd } : BV:8
36 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
37 : eq(11, 36) : BOOL
38 : 15 { 0xf +1.178e129 } : BV:32
39 : eq(11, 38) : BOOL
40 : eq(11, 7) : BOOL
41 : 4194312 { 0x400008 +1.50000095e129 } : BV:32
42 : eq(11, 41) : BOOL
43 : 2 { 0x2 +1.23e129 } : BV:32
44 : eq(11, 43) : BOOL
45 : 128 { 0x80 -128 } : BV:8
46 : ite(44, 14, 45) : BV:8
47 : ite(42, 14, 46) : BV:8
48 : ite(40, 14, 47) : BV:8
49 : ite(39, 14, 48) : BV:8
50 : ite(37, 14, 49) : BV:8
51 : ite(34, 35, 50) : BV:8
52 : ite(33, 14, 51) : BV:8
53 : ite(31, 14, 52) : BV:8
54 : ite(28, 29, 53) : BV:8
55 : ite(26, 14, 54) : BV:8
56 : ite(24, 14, 55) : BV:8
57 : ite(22, 14, 56) : BV:8
58 : ite(20, 14, 57) : BV:8
59 : ite(18, 14, 58) : BV:8
60 : ite(16, 14, 59) : BV:8
61 : ite(13, 14, 60) : BV:8
62 : bvadd(43, 10, 3) : BV:32
63 : eq(62, 12) : BOOL
64 : eq(62, 15) : BOOL
65 : eq(62, 17) : BOOL
66 : eq(62, 19) : BOOL
67 : eq(62, 21) : BOOL
68 : eq(62, 23) : BOOL
69 : eq(62, 25) : BOOL
70 : eq(62, 27) : BOOL
71 : eq(62, 30) : BOOL
72 : eq(62, 32) : BOOL
73 : eq(62, 3) : BOOL
74 : eq(62, 36) : BOOL
75 : eq(62, 38) : BOOL
76 : eq(62, 7) : BOOL
77 : eq(62, 41) : BOOL
78 : eq(62, 43) : BOOL
79 : ite(78, 14, 45) : BV:8
80 : ite(77, 14, 79) : BV:8
81 : ite(76, 14, 80) : BV:8
82 : ite(75, 14, 81) : BV:8
83 : ite(74, 14, 82) : BV:8
84 : ite(73, 35, 83) : BV:8
85 : ite(72, 14, 84) : BV:8
86 : ite(71, 14, 85) : BV:8
87 : ite(70, 29, 86) : BV:8
88 : ite(69, 14, 87) : BV:8
89 : ite(68, 14, 88) : BV:8
90 : ite(67, 14, 89) : BV:8
91 : ite(66, 14, 90) : BV:8
92 : ite(65, 14, 91) : BV:8
93 : ite(64, 14, 92) : BV:8
94 : ite(63, 14, 93) : BV:8
95 : bvadd(30, 10, 3) : BV:32
96 : eq(95, 12) : BOOL
97 : eq(95, 15) : BOOL
98 : eq(95, 17) : BOOL
99 : eq(95, 19) : BOOL
100 : eq(95, 21) : BOOL
101 : eq(95, 23) : BOOL
102 : eq(95, 25) : BOOL
103 : eq(95, 27) : BOOL
104 : eq(95, 30) : BOOL
105 : eq(95, 32) : BOOL
106 : eq(95, 3) : BOOL
107 : eq(95, 36) : BOOL
108 : eq(95, 38) : BOOL
109 : eq(95, 7) : BOOL
110 : eq(95, 41) : BOOL
111 : eq(95, 43) : BOOL
112 : ite(111, 14, 45) : BV:8
113 : ite(110, 14, 112) : BV:8
114 : ite(109, 14, 113) : BV:8
115 : ite(108, 14, 114) : BV:8
116 : ite(107, 14, 115) : BV:8
117 : ite(106, 35, 116) : BV:8
118 : ite(105, 14, 117) : BV:8
119 : ite(104, 14, 118) : BV:8
120 : ite(103, 29, 119) : BV:8
121 : ite(102, 14, 120) : BV:8
122 : ite(101, 14, 121) : BV:8
123 : ite(100, 14, 122) : BV:8
124 : ite(99, 14, 123) : BV:8
125 : ite(98, 14, 124) : BV:8
126 : ite(97, 14, 125) : BV:8
127 : ite(96, 14, 126) : BV:8
128 : bvadd(10, 3) : BV:32
129 : eq(128, 12) : BOOL
130 : eq(128, 15) : BOOL
131 : eq(128, 17) : BOOL
132 : eq(128, 19) : BOOL
133 : eq(128, 21) : BOOL
134 : eq(128, 23) : BOOL
135 : eq(128, 25) : BOOL
136 : eq(128, 27) : BOOL
137 : eq(128, 30) : BOOL
138 : eq(128, 32) : BOOL
139 : eq(128, 3) : BOOL
140 : eq(128, 36) : BOOL
141 : eq(128, 38) : BOOL
142 : eq(128, 7) : BOOL
143 : eq(128, 41) : BOOL
144 : eq(128, 43) : BOOL
145 : ite(144, 14, 45) : BV:8
146 : ite(143, 14, 145) : BV:8
147 : ite(142, 14, 146) : BV:8
148 : ite(141, 14, 147) : BV:8
149 : ite(140, 14, 148) : BV:8
150 : ite(139, 35, 149) : BV:8
151 : ite(138, 14, 150) : BV:8
152 : ite(137, 14, 151) : BV:8
153 : ite(136, 29, 152) : BV:8
154 : ite(135, 14, 153) : BV:8
155 : ite(134, 14, 154) : BV:8
156 : ite(133, 14, 155) : BV:8
157 : ite(132, 14, 156) : BV:8
158 : ite(131, 14, 157) : BV:8
159 : ite(130, 14, 158) : BV:8
160 : ite(129, 14, 159) : BV:8
161 : bvconcat(61, 94, 127, 160) : BV:32
162 : bvadd(7, 9, 161) : BV:32
163 : eq(162, 12) : BOOL
164 : eq(162, 15) : BOOL
165 : eq(162, 17) : BOOL
166 : eq(162, 19) : BOOL
167 : eq(162, 21) : BOOL
168 : eq(162, 23) : BOOL
169 : eq(162, 25) : BOOL
170 : eq(162, 27) : BOOL
171 : eq(162, 30) : BOOL
172 : eq(162, 32) : BOOL
173 : eq(162, 3) : BOOL
174 : eq(162, 36) : BOOL
175 : eq(162, 38) : BOOL
176 : eq(162, 7) : BOOL
177 : eq(162, 41) : BOOL
178 : eq(162, 43) : BOOL
179 : ite(178, 14, 45) : BV:8
180 : ite(177, 14, 179) : BV:8
181 : ite(176, 14, 180) : BV:8
182 : ite(175, 14, 181) : BV:8
183 : ite(174, 14, 182) : BV:8
184 : ite(173, 35, 183) : BV:8
185 : ite(172, 14, 184) : BV:8
186 : ite(171, 14, 185) : BV:8
187 : ite(170, 29, 186) : BV:8
188 : ite(169, 14, 187) : BV:8
189 : ite(168, 14, 188) : BV:8
190 : ite(167, 14, 189) : BV:8
191 : ite(166, 14, 190) : BV:8
192 : ite(165, 14, 191) : BV:8
193 : ite(164, 14, 192) : BV:8
194 : ite(163, 14, 193) : BV:8
195 : bvadd(43, 9, 161) : BV:32
196 : eq(195, 12) : BOOL
197 : eq(195, 15) : BOOL
198 : eq(195, 17) : BOOL
199 : eq(195, 19) : BOOL
200 : eq(195, 21) : BOOL
201 : eq(195, 23) : BOOL
202 : eq(195, 25) : BOOL
203 : eq(195, 27) : BOOL
204 : eq(195, 30) : BOOL
205 : eq(195, 32) : BOOL
206 : eq(195, 3) : BOOL
207 : eq(195, 36) : BOOL
208 : eq(195, 38) : BOOL
209 : eq(195, 7) : BOOL
210 : eq(195, 41) : BOOL
211 : eq(195, 43) : BOOL
212 : ite(211, 14, 45) : BV:8
213 : ite(210, 14, 212) : BV:8
214 : ite(209, 14, 213) : BV:8
215 : ite(208, 14, 214) : BV:8
216 : ite(207, 14, 215) : BV:8
217 : ite(206, 35, 216) : BV:8
218 : ite(205, 14, 217) : BV:8
219 : ite(204, 14, 218) : BV:8
220 : ite(203, 29, 219) : BV:8
221 : ite(202, 14, 220) : BV:8
222 : ite(201, 14, 221) : BV:8
223 : ite(200, 14, 222) : BV:8
224 : ite(199, 14, 223) : BV:8
225 : ite(198, 14, 224) : BV:8
226 : ite(197, 14, 225) : BV:8
227 : ite(196, 14, 226) : BV:8
228 : bvadd(30, 9, 161) : BV:32
229 : eq(228, 12) : BOOL
230 : eq(228, 15) : BOOL
231 : eq(228, 17) : BOOL
232 : eq(228, 19) : BOOL
233 : eq(228, 21) : BOOL
234 : eq(228, 23) : BOOL
235 : eq(228, 25) : BOOL
236 : eq(228, 27) : BOOL
237 : eq(228, 30) : BOOL
238 : eq(228, 32) : BOOL
239 : eq(228, 3) : BOOL
240 : eq(228, 36) : BOOL
241 : eq(228, 38) : BOOL
242 : eq(228, 7) : BOOL
243 : eq(228, 41) : BOOL
244 : eq(228, 43) : BOOL
245 : ite(244, 14, 45) : BV:8
246 : ite(243, 14, 245) : BV:8
247 : ite(242, 14, 246) : BV:8
248 : ite(241, 14, 247) : BV:8
249 : ite(240, 14, 248) : BV:8
250 : ite(239, 35, 249) : BV:8
251 : ite(238, 14, 250) : BV:8
252 : ite(237, 14, 251) : BV:8
253 : ite(236, 29, 252) : BV:8
254 : ite(235, 14, 253) : BV:8
255 : ite(234, 14, 254) : BV:8
256 : ite(233, 14, 255) : BV:8
257 : ite(232, 14, 256) : BV:8
258 : ite(231, 14, 257) : BV:8
259 : ite(230, 14, 258) : BV:8
260 : ite(229, 14, 259) : BV:8
261 : bvadd(9, 161) : BV:32
262 : eq(261, 12) : BOOL
263 : eq(261, 15) : BOOL
264 : eq(261, 17) : BOOL
265 : eq(261, 19) : BOOL
266 : eq(261, 21) : BOOL
267 : eq(261, 23) : BOOL
268 : eq(261, 25) : BOOL
269 : eq(261, 27) : BOOL
270 : eq(261, 30) : BOOL
271 : eq(261, 32) : BOOL
272 : eq(261, 3) : BOOL
273 : eq(261, 36) : BOOL
274 : eq(261, 38) : BOOL
275 : eq(261, 7) : BOOL
276 : eq(261, 41) : BOOL
277 : eq(261, 43) : BOOL
278 : ite(277, 14, 45) : BV:8
279 : ite(276, 14, 278) : BV:8
280 : ite(275, 14, 279) : BV:8
281 : ite(274, 14, 280) : BV:8
282 : ite(273, 14, 281) : BV:8
283 : ite(272, 35, 282) : BV:8
284 : ite(271, 14, 283) : BV:8
285 : ite(270, 14, 284) : BV:8
286 : ite(269, 29, 285) : BV:8
287 : ite(268, 14, 286) : BV:8
288 : ite(267, 14, 287) : BV:8
289 : ite(266, 14, 288) : BV:8
290 : ite(265, 14, 289) : BV:8
291 : ite(264, 14, 290) : BV:8
292 : ite(263, 14, 291) : BV:8
293 : ite(262, 14, 292) : BV:8
294 : bvconcat(194, 227, 260, 293) : BV:32
295 : ite(6, 3, 294) : BV:32
296 : ite(6, 3, 295) : BV:32
297 : lambda(1, 2, 296) : FUNCTION[BV:32,BV:32 -> BV:32]
298 : sym_const(297) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-a-0.L3%7%bbentry.0.1
1 : ([ 0; 2155905039 ] -> true, [ 2155905040; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=counter_example.random_seed
2758773254
=counter_example_end


</MSG>
<MSG>4:08 : Discovered that the correlation was useless for the product-TFG foo.A1.B2 (d:3, s:0, sp: 5)...</MSG>
<MSG>4:08 : Chose (for CE propagation) product-TFG foo.A1.B1 (d:3, s:0, sp: 5) from a frontier of size 3...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 14 counterexamples (for correlating 7 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%7%bbentry[mu 0, delta {0,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>4:08 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B1...</MSG>
<MSG>4:08 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B1...</MSG>
<MSG>4:08 : Creating ssa-path for the src-tfg path L3%7%bbentry --> L3%7%bbentry ending at L3%7%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:08 : Adding a CG edge composition using the src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:08 : Identifying common alloc-deallocs in the src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry
</MSG>
<MSG>4:08 : Identified no common alloc-deallocs in the src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:08 : Adding new edge to the product-TFG foo.A1.B1 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%7%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>4:08 : foo.A1.B1: Computing loop hoisting select expressions at toPC L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:08 : foo.A1.B1: Computing loop hoisting non-linear expressions at toPC L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:08 : foo.A1.B1: Adding node L3%7%bbentry_Lfor.cond1%1%bbentry to the product-TFG...</MSG>
<MSG>4:08 : foo.A1.B1: Getting alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:08 : foo.A1.B1: Found no alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:08 : foo.A1.B1: Adding edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:08 : foo.A1.B1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>4:08 : foo.A1.B1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>4:08 : foo.A1.B1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>4:08 : foo.A1.B1: Propagated 8 out of 14 counter-examples across edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry</MSG>
<MSG>4:08 : foo.A1.B1: Added the 8 propagated CEs at PC L3%7%bbentry_Lfor.cond1%1%bbentry and propagated further.
</MSG>
<MSG>4:08 : foo.A1.B1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>4:08 : foo.A1.B1: Finished executing CG's add edge function...</MSG>
<MSG>4:08 : foo.A1.B1: Computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:08 : foo.A1.B1: Done computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:08 : Done adding new edge to the product-TFG foo.A1.B1 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%7%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>4:08 : Done adding a CG edge composition using the src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:08 : Added correlation to the product-TFG foo.A1.B1 (d:4, s:0, sp: 5) and created a correlation entry...</MSG>
<MSG>4:08 : Chose (after CE propagation) product-TFG foo.A1.B1 (d:4, s:0, sp: 5) from a frontier of size 3...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%7%bbentry at mu 0 delta {0,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 14 counterexamples (for correlating 7 bv exprs)
            L3%7%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry, A (line 4 at column 28))
                L3%7%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 8 counterexamples (for correlating 9 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%7%bbentry[mu 0, delta {0,0}]
<MSG>4:08 : foo.A1.B1: Updating invariants over the newly added edges in edge composition L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>4:08 : Constructed infer_invariants_dfa with initial worklist L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:08 : foo.A1.B1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:08 : foo.A1.B1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>4:08 : foo.A1.B1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>4:08 : foo.A1.B1: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:08 : foo.A1.B1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:08 : foo.A1.B1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:08 : foo.A1.B1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 9 exprs and 2 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:10 : foo.A1.B1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht14-prove_trivial6-prove8...</MSG>
<MSG>4:10 : foo.A1.B1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:10 : foo.A1.B1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:10 : foo.A1.B1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:11 : foo.A1.B1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>4:11 : foo.A1.B1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:11 : foo.A1.B1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>4:11 : foo.A1.B1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:11 : foo.A1.B1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:11 : foo.A1.B1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:11 : foo.A1.B1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:11 : foo.A1.B1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:12 : foo.A1.B1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht10-prove_trivial5-prove5...</MSG>
<MSG>4:12 : foo.A1.B1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 14 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:16 : foo.A1.B1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht15-prove_trivial2-prove13...</MSG>
<MSG>4:16 : foo.A1.B1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:16 : foo.A1.B1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:16 : foo.A1.B1: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry), result: changed ...</MSG>
<MSG>4:16 : foo.A1.B1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>4:16 : foo.A1.B1 (d:6, s:0, sp: 5): checked newly added edge and inferred invariants...</MSG>
<MSG>4:16 : foo.A1.B1 (d:6, s:0, sp: 18): Chosen CG is no longer the most promising correlation entry; returning delayed-exploration...</MSG>
<MSG>4:16 : Chosen product-TFG foo.A1.B1 will be explored later...</MSG>
<MSG>4:16 : Decided to explore product-TFG later after re-evaluating its best-first-search rank...</MSG>
<MSG>4:16 : Chose (after CE propagation) product-TFG foo.A1.B3 (d:5, s:0, sp: 5) from a frontier of size 3...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%11%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 14 counterexamples (for correlating 7 bv exprs)
            L3%11%bbentry_Lfor.cond1%1%bbentry (C L3%11%bbentry, A (line 4 at column 28))
                L3%11%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 6 counterexamples (for correlating 9 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%11%bbentry[mu 1, delta {1,0}]
<MSG>4:16 : foo.A1.B3: Updating invariants over the newly added edges in edge composition L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>4:16 : Constructed infer_invariants_dfa with initial worklist L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:16 : foo.A1.B3: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:16 : foo.A1.B3: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>4:16 : foo.A1.B3: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>4:16 : foo.A1.B3: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:16 : foo.A1.B3: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:16 : foo.A1.B3: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:16 : foo.A1.B3: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 9 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:18 : foo.A1.B3: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht12-prove_trivial6-prove6...</MSG>
<MSG>4:18 : foo.A1.B3: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:18 : foo.A1.B3: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:18 : foo.A1.B3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:18 : foo.A1.B3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:18 : foo.A1.B3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:18 : foo.A1.B3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:18 : foo.A1.B3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:18 : foo.A1.B3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:18 : foo.A1.B3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:18 : foo.A1.B3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:18 : foo.A1.B3: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:19 : foo.A1.B3: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht10-prove_trivial5-prove5...</MSG>
<MSG>4:19 : foo.A1.B3: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:23 : foo.A1.B3: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht12-prove_trivial2-prove10...</MSG>
<MSG>4:23 : foo.A1.B3: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:23 : foo.A1.B3: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:23 : foo.A1.B3: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry), result: changed ...</MSG>
<MSG>4:23 : foo.A1.B3: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>4:23 : foo.A1.B3 (d:6, s:0, sp: 5): checked newly added edge and inferred invariants...</MSG>
<MSG>4:23 : foo.A1.B3 (d:6, s:0, sp: 14): Chosen CG is no longer the most promising correlation entry; returning delayed-exploration...</MSG>
<MSG>4:23 : Chosen product-TFG foo.A1.B3 will be explored later...</MSG>
<MSG>4:23 : Decided to explore product-TFG later after re-evaluating its best-first-search rank...</MSG>
<MSG>4:23 : Chose (after CE propagation) product-TFG foo.A1.B4 (d:5, s:0, sp: 5) from a frontier of size 3...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%19%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 14 counterexamples (for correlating 7 bv exprs)
            L3%19%bbentry_Lfor.cond1%1%bbentry (C L3%19%bbentry, A (line 4 at column 28))
                L3%19%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 6 counterexamples (for correlating 12 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%19%bbentry[mu 1, delta {1,0}]
<MSG>4:23 : foo.A1.B4: Updating invariants over the newly added edges in edge composition L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>4:23 : Constructed infer_invariants_dfa with initial worklist L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:23 : foo.A1.B4: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:23 : foo.A1.B4: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>4:23 : foo.A1.B4: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>4:23 : foo.A1.B4: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:23 : foo.A1.B4: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:23 : foo.A1.B4: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:23 : foo.A1.B4: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 12 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:24 : foo.A1.B4: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht15-prove_trivial8-prove7...</MSG>
<MSG>4:24 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:24 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:24 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:24 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial0-prove4...</MSG>
<MSG>4:24 : foo.A1.B4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:24 : foo.A1.B4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:24 : foo.A1.B4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:24 : foo.A1.B4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:24 : foo.A1.B4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:24 : foo.A1.B4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:24 : foo.A1.B4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:24 : foo.A1.B4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:24 : foo.A1.B4: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:24 : foo.A1.B4: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht10-prove_trivial5-prove5...</MSG>
<MSG>4:24 : foo.A1.B4: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 13 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:26 : foo.A1.B4: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht14-prove_trivial2-prove12...</MSG>
<MSG>4:26 : foo.A1.B4: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:26 : foo.A1.B4: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:26 : foo.A1.B4: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: changed ...</MSG>
<MSG>4:26 : foo.A1.B4: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>4:26 : foo.A1.B4 (d:6, s:0, sp: 5): checked newly added edge and inferred invariants...</MSG>
<MSG>4:26 : foo.A1.B4 (d:6, s:0, sp: 14): Chosen CG is no longer the most promising correlation entry; returning delayed-exploration...</MSG>
<MSG>4:26 : Chosen product-TFG foo.A1.B4 will be explored later...</MSG>
<MSG>4:26 : Decided to explore product-TFG later after re-evaluating its best-first-search rank...</MSG>
<MSG>4:26 : Chose (after CE propagation) product-TFG foo.A1.B3 (d:6, s:0, sp: 14) from a frontier of size 3...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%11%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 14 counterexamples (for correlating 7 bv exprs)
            L3%11%bbentry_Lfor.cond1%1%bbentry (C L3%11%bbentry, A (line 4 at column 28))
                L3%11%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 14 counterexamples (for correlating 9 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%11%bbentry[mu 1, delta {1,0}]
<MSG>4:26 : foo.A1.B3: Updating invariants over the newly added edges in edge composition L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>4:26 : Constructed infer_invariants_dfa with initial worklist L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:26 : foo.A1.B3: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:26 : foo.A1.B3: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>4:26 : foo.A1.B3: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>4:26 : foo.A1.B3: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:26 : foo.A1.B3: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:26 : foo.A1.B3: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:26 : foo.A1.B3: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 9 exprs and 11 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:26 : foo.A1.B3: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial6-prove1...</MSG>
<MSG>4:26 : foo.A1.B3: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:26 : foo.A1.B3: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:26 : foo.A1.B3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:27 : foo.A1.B3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:27 : foo.A1.B3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:27 : foo.A1.B3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:27 : foo.A1.B3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:27 : foo.A1.B3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:27 : foo.A1.B3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:27 : foo.A1.B3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:27 : foo.A1.B3: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:27 : foo.A1.B3: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht10-prove_trivial5-prove5...</MSG>
<MSG>4:27 : foo.A1.B3: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:27 : foo.A1.B3: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial2-prove1...</MSG>
<MSG>4:27 : foo.A1.B3: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:27 : foo.A1.B3: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:27 : foo.A1.B3: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>4:27 : foo.A1.B3: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>4:27 : foo.A1.B3 (d:6, s:0, sp: 14): checked newly added edge and inferred invariants...</MSG>
<MSG>4:27 : foo.A1.B3 (d:6, s:0, sp: 14): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>4:27 : product-TFG foo.A1.B3: Enumerating correlations for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L3%11%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:27 : Considering 1 paths to src pc L3%7%bbentry as correlation candidates for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%11%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:27 : Attempting correlation of src pathset L3%11%bbentry=>L3%7%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%11%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:27 : Found 1 feasible correlations for paths to src pc L3%7%bbentry as correlation candidates for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%11%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:27 : product-TFG foo.A1.B3: Found 1 correlations for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L3%11%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:27 : product-TFG foo.A1.B3 created 1 possibilities in group foo.A1.B3.C...</MSG>
<MSG>4:27 : Chose (for CE propagation) product-TFG foo.A1.B3.C1 (d:6, s:0, sp: 14) from a frontier of size 3...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%11%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 14 counterexamples (for correlating 7 bv exprs)
            L3%11%bbentry_Lfor.cond1%1%bbentry (C L3%11%bbentry, A (line 4 at column 28))
                L3%11%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 16 counterexamples (for correlating 9 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%11%bbentry=>L3%7%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>4:27 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B3.C1...</MSG>
<MSG>4:27 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B3.C1...</MSG>
<MSG>4:27 : Creating ssa-path for the src-tfg path L3%11%bbentry --> L3%7%bbentry ending at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>4:27 : Adding a CG edge composition using the src path L3%11%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry</MSG>
<MSG>4:27 : Identifying common alloc-deallocs in the src path L3%11%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry
</MSG>
<MSG>4:27 : Identified no common alloc-deallocs in the src path L3%11%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry</MSG>
<MSG>4:27 : Adding new edge to the product-TFG foo.A1.B3.C1 for fromPC L3%11%bbentry_Lfor.cond1%1%bbentry and toPC L3%7%bbentry_Lfor.cond%1%bbentry, src path L3%11%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry...</MSG>
<MSG>4:27 : foo.A1.B3.C1: Getting alloca-ptrs on edge L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>4:27 : foo.A1.B3.C1: Found no alloca-ptrs on edge L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>4:27 : foo.A1.B3.C1: Adding edge L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>4:27 : foo.A1.B3.C1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>4:27 : foo.A1.B3.C1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>4:27 : foo.A1.B3.C1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>4:28 : foo.A1.B3.C1: Propagated 10 out of 16 counter-examples across edge L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry</MSG>
<MSG>4:29 : foo.A1.B3.C1: Added the 10 propagated CEs at PC L3%7%bbentry_Lfor.cond%1%bbentry and propagated further.
</MSG>
<MSG>4:29 : foo.A1.B3.C1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>4:29 : foo.A1.B3.C1: Finished executing CG's add edge function...</MSG>
<MSG>4:29 : foo.A1.B3.C1: Computing CG regions after the addition of the edge L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>4:29 : foo.A1.B3.C1: Done computing CG regions after the addition of the edge L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>4:29 : Done adding new edge to the product-TFG foo.A1.B3.C1 for fromPC L3%11%bbentry_Lfor.cond1%1%bbentry and toPC L3%7%bbentry_Lfor.cond%1%bbentry, src path L3%11%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry...</MSG>
<MSG>4:29 : Done adding a CG edge composition using the src path L3%11%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry</MSG>
<MSG>4:29 : Added correlation to the product-TFG foo.A1.B3.C1 (d:6, s:0, sp: 14) and created a correlation entry...</MSG>
<MSG>4:29 : Chose (after CE propagation) product-TFG foo.A1.B3.C1 (d:6, s:0, sp: 14) from a frontier of size 3...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%11%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%11%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 25 counterexamples (for correlating 7 bv exprs)
            L3%11%bbentry_Lfor.cond1%1%bbentry (C L3%11%bbentry, A (line 4 at column 28))
                L3%11%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 18 counterexamples (for correlating 9 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%11%bbentry=>L3%7%bbentry[mu 1, delta {1,0}]
<MSG>4:29 : foo.A1.B3.C1: Updating invariants over the newly added edges in edge composition L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>4:29 : Constructed infer_invariants_dfa with initial worklist L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>4:29 : foo.A1.B3.C1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:29 : foo.A1.B3.C1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>4:29 : foo.A1.B3.C1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>4:29 : foo.A1.B3.C1: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:29 : foo.A1.B3.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:29 : foo.A1.B3.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:29 : foo.A1.B3.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 9 exprs and 12 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:29 : foo.A1.B3.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht6-prove_trivial5-prove1...</MSG>
<MSG>4:29 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:29 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial1-prove2...</MSG>
<MSG>4:29 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:29 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:29 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:29 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:29 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:30 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial1-prove2...</MSG>
<MSG>4:30 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:30 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:30 : foo.A1.B3.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:30 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial2-prove5...</MSG>
<MSG>4:30 : foo.A1.B3.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:30 : foo.A1.B3.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial2-prove1...</MSG>
<MSG>4:30 : foo.A1.B3.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:30 : foo.A1.B3.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:30 : foo.A1.B3.C1: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>4:30 : foo.A1.B3.C1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>4:30 : foo.A1.B3.C1: Relaxing dst graph's memlabels for edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>4:30 : foo.A1.B3.C1: Done relaxing dst graph's memlabels for edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>4:30 : foo.A1.B3.C1: Checking well-formedness assertions on outgoing edges from L3%11%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>4:30 : foo.A1.B3.C1: Relaxing invariants across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>4:30 : foo.A1.B3.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:30 : foo.A1.B3.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:30 : foo.A1.B3.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 8 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:30 : foo.A1.B3.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial3-prove1...</MSG>
<MSG>4:30 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:31 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht5-prove_trivial0-prove5...</MSG>
<MSG>4:31 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:31 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:31 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:31 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:31 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:32 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>4:32 : foo.A1.B3.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:32 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:32 : foo.A1.B3.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:32 : foo.A1.B3.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>4:32 : foo.A1.B3.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:32 : foo.A1.B3.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:32 : foo.A1.B3.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:32 : foo.A1.B3.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:32 : foo.A1.B3.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 8 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:32 : foo.A1.B3.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial3-prove1...</MSG>
<MSG>4:32 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:32 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>4:32 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:32 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:32 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:32 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:32 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:32 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>4:32 : foo.A1.B3.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:32 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:32 : foo.A1.B3.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:32 : foo.A1.B3.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>4:32 : foo.A1.B3.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:32 : foo.A1.B3.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:32 : foo.A1.B3.C1: Done relaxing invariants across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>4:32 : foo.A1.B3.C1: Done relaxing memlabels and invariants across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>4:32 : foo.A1.B3.C1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:32 : foo.A1.B3.C1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>4:32 : foo.A1.B3.C1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>4:32 : foo.A1.B3.C1: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:32 : foo.A1.B3.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:32 : foo.A1.B3.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:32 : foo.A1.B3.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 9 exprs and 12 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:32 : foo.A1.B3.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht6-prove_trivial5-prove1...</MSG>
<MSG>4:32 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:33 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht3-prove_trivial1-prove2...</MSG>
<MSG>4:33 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:33 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:33 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:33 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:33 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:33 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>4:33 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:33 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:33 : foo.A1.B3.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:33 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial2-prove5...</MSG>
<MSG>4:33 : foo.A1.B3.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:33 : foo.A1.B3.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial2-prove1...</MSG>
<MSG>4:33 : foo.A1.B3.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:33 : foo.A1.B3.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:33 : foo.A1.B3.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:33 : foo.A1.B3.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:33 : foo.A1.B3.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 9 exprs and 12 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:33 : foo.A1.B3.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht6-prove_trivial5-prove1...</MSG>
<MSG>4:33 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:33 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>4:33 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:33 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:33 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:33 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:33 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:33 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>4:33 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:33 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:33 : foo.A1.B3.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:34 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial2-prove5...</MSG>
<MSG>4:34 : foo.A1.B3.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:34 : foo.A1.B3.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial2-prove1...</MSG>
<MSG>4:34 : foo.A1.B3.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:34 : foo.A1.B3.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:34 : foo.A1.B3.C1: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry), result: changed ...</MSG>
<MSG>4:34 : foo.A1.B3.C1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>4:34 : foo.A1.B3.C1: Relaxing dst graph's memlabels for edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>4:34 : foo.A1.B3.C1: Done relaxing dst graph's memlabels for edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>4:34 : foo.A1.B3.C1: Checking well-formedness assertions on outgoing edges from L3%11%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>4:34 : foo.A1.B3.C1: Relaxing invariants across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>4:34 : foo.A1.B3.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:34 : foo.A1.B3.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:34 : foo.A1.B3.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 8 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:34 : foo.A1.B3.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial3-prove1...</MSG>
<MSG>4:34 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:34 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>4:34 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:34 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:34 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:34 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:34 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:35 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:35 : foo.A1.B3.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:35 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:35 : foo.A1.B3.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:35 : foo.A1.B3.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>4:35 : foo.A1.B3.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:35 : foo.A1.B3.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:35 : foo.A1.B3.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:35 : foo.A1.B3.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:35 : foo.A1.B3.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 8 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:35 : foo.A1.B3.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial3-prove1...</MSG>
<MSG>4:35 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:35 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:35 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:35 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:35 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:35 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:35 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:35 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:35 : foo.A1.B3.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:35 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:35 : foo.A1.B3.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:35 : foo.A1.B3.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>4:35 : foo.A1.B3.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:35 : foo.A1.B3.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:35 : foo.A1.B3.C1: Done relaxing invariants across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>4:35 : foo.A1.B3.C1: Done relaxing memlabels and invariants across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>4:35 : foo.A1.B3.C1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:35 : foo.A1.B3.C1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>4:35 : foo.A1.B3.C1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>4:35 : foo.A1.B3.C1: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:35 : foo.A1.B3.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:35 : foo.A1.B3.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:35 : foo.A1.B3.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 9 exprs and 12 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:35 : foo.A1.B3.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht6-prove_trivial5-prove1...</MSG>
<MSG>4:35 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:35 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:35 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:35 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:35 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:35 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:35 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:35 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:35 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:35 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:35 : foo.A1.B3.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:36 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht6-prove_trivial2-prove4...</MSG>
<MSG>4:36 : foo.A1.B3.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:36 : foo.A1.B3.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial2-prove1...</MSG>
<MSG>4:36 : foo.A1.B3.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:36 : foo.A1.B3.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:36 : foo.A1.B3.C1: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>4:36 : foo.A1.B3.C1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>4:36 : foo.A1.B3.C1: Relaxing dst graph's memlabels for edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>4:36 : foo.A1.B3.C1: Done relaxing dst graph's memlabels for edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>4:36 : foo.A1.B3.C1: Checking well-formedness assertions on outgoing edges from L3%11%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>4:36 : foo.A1.B3.C1: Relaxing invariants across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>4:36 : foo.A1.B3.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:36 : foo.A1.B3.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:36 : foo.A1.B3.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 8 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:36 : foo.A1.B3.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial3-prove1...</MSG>
<MSG>4:36 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:36 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:36 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:36 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:36 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:36 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:36 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:36 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:36 : foo.A1.B3.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:36 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:36 : foo.A1.B3.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:36 : foo.A1.B3.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>4:36 : foo.A1.B3.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:36 : foo.A1.B3.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:36 : foo.A1.B3.C1: Done relaxing invariants across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged ...</MSG>
<MSG>4:36 : foo.A1.B3.C1: Done relaxing memlabels and invariants across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>4:36 : foo.A1.B3.C1 (d:6, s:0, sp: 14): checked newly added edge and inferred invariants...</MSG>
<MSG>4:36 : foo.A1.B3.C1 (d:6, s:0, sp: 14): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>4:37 : product-TFG foo.A1.B3.C1: Enumerating correlations for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] starting at L3%11%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:37 : Considering 2 paths to src pc L3%11%bbentry as correlation candidates for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%11%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:37 : Attempting correlation of src pathset L3%11%bbentry=>L3%11%bbentry[mu 0, delta {0,0}] as correlation candidate for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%11%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:37 : Attempting correlation of src pathset L3%11%bbentry=>L3%11%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%11%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:37 : Found 2 feasible correlations for paths to src pc L3%11%bbentry as correlation candidates for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%11%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:37 : product-TFG foo.A1.B3.C1: Found 2 correlations for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] starting at L3%11%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:37 : product-TFG foo.A1.B3.C1 created 2 possibilities in group foo.A1.B3.C1.D...</MSG>
<MSG>4:37 : Chose (for CE propagation) product-TFG foo.A1.B3.C1.D2 (d:6, s:0, sp: 14) from a frontier of size 4...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%11%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%11%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 33 counterexamples (for correlating 7 bv exprs)
            L3%11%bbentry_Lfor.cond1%1%bbentry (C L3%11%bbentry, A (line 4 at column 28))
                L3%11%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 23 counterexamples (for correlating 9 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%11%bbentry=>L3%11%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>4:37 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B3.C1.D2...</MSG>
<MSG>4:37 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B3.C1.D2...</MSG>
<MSG>4:37 : Creating ssa-path for the src-tfg path L3%11%bbentry --> L3%11%bbentry ending at L3%11%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:37 : Adding a CG edge composition using the src path L3%11%bbentry --> L3%11%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:37 : Identifying common alloc-deallocs in the src path L3%11%bbentry --> L3%11%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry
</MSG>
<MSG>4:37 : Identified no common alloc-deallocs in the src path L3%11%bbentry --> L3%11%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:37 : Adding new edge to the product-TFG foo.A1.B3.C1.D2 for fromPC L3%11%bbentry_Lfor.cond1%1%bbentry and toPC L3%11%bbentry_Lfor.cond1%1%bbentry, src path L3%11%bbentry --> L3%11%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>4:37 : foo.A1.B3.C1.D2: Getting alloca-ptrs on edge L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:37 : foo.A1.B3.C1.D2: Found no alloca-ptrs on edge L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:37 : foo.A1.B3.C1.D2: Adding edge L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:37 : foo.A1.B3.C1.D2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>4:37 : foo.A1.B3.C1.D2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>4:37 : foo.A1.B3.C1.D2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>4:37 : foo.A1.B3.C1.D2: marking unstable at L3%11%bbentry_Lfor.cond1%1%bbentry due to failing condition:
wfcond.from_pcL3%11%bbentry_Lfor.cond1%1%bbentry.to_pcL3%11%bbentry_Lfor.cond1%1%bbentry-dst-edgecond-implies-src-edgecond
140745 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32 : 0
140426 : input.dst.llvm-%m : BV:32                 : 32
140746 : bvult(140745, 140426) : BOOL              : true
207707 : not(140746) : BOOL                        : false
140647 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]] : ( sum(2147483648, unit, map(lambda(Lambda69522Var, ite(and(bvule(0, Lambda69522Var), bvule(Lambda69522Var, 31)), true, ite(and(bvule(32, Lambda69522Var), bvule(Lambda69522Var, 4294967295)), false, false))), lambda(Lambda69523Var, ite(eq(Lambda69523Var, 0), 0, bvconcat(ite(eq(bvadd(3, bvmul(4, Lambda69523Var), 536870912), 1937758495), 32, 0), ite(eq(bvadd(2, bvmul(4, Lambda69523Var), 536870912), 1937758495), 32, 0), ite(eq(bvadd(1, bvmul(4, Lambda69523Var), 536870912), 1937758495), 32, 0), ite(eq(bvadd(bvmul(4, Lambda69523Var), 536870912), 1937758495), 32, 0)))))) )
140303 : 1 { 0x1 +1.0e1025 } : INT                 : 1
140669 : sum_get(140647, 140303) : MAP[BV:32 -> BV:32] : ( map(lambda(Lambda69609Var, ite(and(bvule(0, Lambda69609Var), bvule(Lambda69609Var, 31)), true, ite(and(bvule(32, Lambda69609Var), bvule(Lambda69609Var, 4294967295)), false, false))), lambda(Lambda69610Var, ite(eq(Lambda69610Var, 0), 0, bvconcat(ite(eq(bvadd(3, bvmul(4, Lambda69610Var), 536870912), 1937758495), 32, 0), ite(eq(bvadd(2, bvmul(4, Lambda69610Var), 536870912), 1937758495), 32, 0), ite(eq(bvadd(1, bvmul(4, Lambda69610Var), 536870912), 1937758495), 32, 0), ite(eq(bvadd(bvmul(4, Lambda69610Var), 536870912), 1937758495), 32, 0))))) )
140286 : 0 { 0x0 +1.0e129 } : BV:32                : 0
163171 : map_get(140669, 140286) : SUM[UNIT,BV:32] : ( sum(ite(ite(and(bvule(0, 0), bvule(0, 31)), true, ite(and(bvule(32, 0), bvule(0, 4294967295)), false, false)), 1, 0), unit, ite(eq(0, 0), 0, bvconcat(ite(eq(bvadd(3, bvmul(4, 0), 536870912), 1937758495), 32, 0), ite(eq(bvadd(2, bvmul(4, 0), 536870912), 1937758495), 32, 0), ite(eq(bvadd(1, bvmul(4, 0), 536870912), 1937758495), 32, 0), ite(eq(bvadd(bvmul(4, 0), 536870912), 1937758495), 32, 0)))) )
140305 : 0 { 0x0 +1.0e1025 } : INT                 : 0
163207 : sum_is(163171, 140305) : BOOL             : false
140655 : input.spec-%var-a-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]] : ( 214194 = bvconcat(ite(eq(bvadd(1618465011, bvmul(4, Lambda69534Var)), 1937758495), 32, 0), ite(eq(bvadd(1618465010, bvmul(4, Lambda69534Var)), 1937758495), 32, 0), ite(eq(bvadd(1618465009, bvmul(4, Lambda69534Var)), 1937758495), 32, 0), ite(eq(bvadd(1618465008, bvmul(4, Lambda69534Var)), 1937758495), 32, 0));map[214143](lambda(Lambda69533Var, ite(and(bvule(0, Lambda69533Var), bvule(Lambda69533Var, 3288336393)), true, ite(and(bvule(3288336394, Lambda69533Var), bvule(Lambda69533Var, 4294967295)), false, false))), lambda[214142](Lambda69534Var, map[214141](lambda(Lambda69535Var, ite(and(eq(ite(and(bvule(0, Lambda69534Var), bvule(Lambda69534Var, 3288336393)), 0, ite(and(bvule(3288336394, Lambda69534Var), bvule(Lambda69534Var, 3288336394)), 3288336394, ite(and(bvule(3288336395, Lambda69534Var), bvule(Lambda69534Var, 4294967295)), 3288336395, 3288336395))), 0), eq(ite(and(bvule(0, Lambda69535Var), bvule(Lambda69535Var, 31)), 0, ite(and(bvule(32, Lambda69535Var), bvule(Lambda69535Var, 32)), 32, ite(and(bvule(33, Lambda69535Var), bvule(Lambda69535Var, 4294967295)), 33, 33))), 0)), true, false)), lambda[214140](Lambda69536Var, ite[214225](and(eq(Lambda69534Var, 0), eq(Lambda69536Var, 0)), 0, bvconcat[214224](ite[214214](eq[214213](bvadd[214212](3, bvmul(4, Lambda69536Var), 214194), 1937758495), 32, 0), ite[214217](eq[214216](bvadd[214215](2, bvmul(4, Lambda69536Var), 214194), 1937758495), 32, 0), ite[214220](eq[214219](bvadd[214218](1, bvmul(4, Lambda69536Var), 214194), 1937758495), 32, 0), ite[214223](eq[214222](bvadd[214221](bvmul(4, Lambda69536Var), 214194), 1937758495), 32, 0))))))) )
140308 : 1 { 0x1 +1.11e129 } : BV:32               : 1
140656 : input.spec-%var-i-0.L3%7%bbentry : BV:32  : 2227307019
140704 : bvadd(140308, 140656) : BV:32             : 2227307020
213689 : map_get(140655, 140704) : SUM[UNIT,MAP[BV:32 -> BV:32]] : ( 214257 = bvconcat(ite(eq(bvadd(1618465011, bvmul(4, 2227307020)), 1937758495), 32, 0), ite(eq(bvadd(1618465010, bvmul(4, 2227307020)), 1937758495), 32, 0), ite(eq(bvadd(1618465009, bvmul(4, 2227307020)), 1937758495), 32, 0), ite(eq(bvadd(1618465008, bvmul(4, 2227307020)), 1937758495), 32, 0));sum[214316](ite(ite(and(bvule(0, 2227307020), bvule(2227307020, 3288336393)), true, ite(and(bvule(3288336394, 2227307020), bvule(2227307020, 4294967295)), false, false)), 1, 0), unit, map[214315](lambda(Lambda69643Var, ite(and(eq(ite(and(bvule(0, 2227307020), bvule(2227307020, 3288336393)), 0, ite(and(bvule(3288336394, 2227307020), bvule(2227307020, 3288336394)), 3288336394, ite(and(bvule(3288336395, 2227307020), bvule(2227307020, 4294967295)), 3288336395, 3288336395))), 0), eq(ite(and(bvule(0, Lambda69643Var), bvule(Lambda69643Var, 31)), 0, ite(and(bvule(32, Lambda69643Var), bvule(Lambda69643Var, 32)), 32, ite(and(bvule(33, Lambda69643Var), bvule(Lambda69643Var, 4294967295)), 33, 33))), 0)), true, false)), lambda[214314](Lambda69644Var, ite[214313](and(eq(2227307020, 0), eq(Lambda69644Var, 0)), 0, bvconcat[214312](ite[214277](eq[214259](bvadd[214258](3, bvmul(4, Lambda69644Var), 214257), 1937758495), 32, 0), ite[214280](eq[214279](bvadd[214278](2, bvmul(4, Lambda69644Var), 214257), 1937758495), 32, 0), ite[214308](eq[214292](bvadd[214291](1, bvmul(4, Lambda69644Var), 214257), 1937758495), 32, 0), ite[214311](eq[214310](bvadd[214309](bvmul(4, Lambda69644Var), 214257), 1937758495), 32, 0)))))) )
214100 : sum_is(213689, 140303) : BOOL             : true
214101 : and(163207, 214100) : BOOL                : false
214144 : or(207707, 214101) : BOOL                 : false

ce =
=counter_example_begin z3v487.ce4775 b8c75f75bbb56056a0727a2eaec0a3
=input.spec-%var-a-1
1 : Lambda69513Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3288336393 { 0xc4000809 -1006630903 -1.24521e9 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3288336394 { 0xc400080a -1006630902 -1.24533e9 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda69514Var : BV:32
18 : Lambda69515Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 3288336395 { 0xc400080b -1006630901 -1.24545e9 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 31 { 0x1f +1.369e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 32 { 0x20 +1.381e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 33 { 0x21 +1.393e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda69516Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 1618465011 { 0x6077d0f3 +1.93606412e65 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 1937758495 { 0x737fd91f +1.99881350e103 } : BV:32
82 : eq(80, 81) : BOOL
83 : 32 { 0x20 } : BV:8
84 : 0 { 0x0 } : BV:8
85 : ite(82, 83, 84) : BV:8
86 : 1618465010 { 0x6077d0f2 +1.93606400e65 } : BV:32
87 : bvadd(86, 79) : BV:32
88 : eq(87, 81) : BOOL
89 : ite(88, 83, 84) : BV:8
90 : 1618465009 { 0x6077d0f1 +1.93606388e65 } : BV:32
91 : bvadd(90, 79) : BV:32
92 : eq(91, 81) : BOOL
93 : ite(92, 83, 84) : BV:8
94 : 1618465008 { 0x6077d0f0 +1.93606376e65 } : BV:32
95 : bvadd(94, 79) : BV:32
96 : eq(95, 81) : BOOL
97 : ite(96, 83, 84) : BV:8
98 : bvconcat(85, 89, 93, 97) : BV:32
99 : bvadd(75, 77, 98) : BV:32
100 : eq(99, 81) : BOOL
101 : ite(100, 83, 84) : BV:8
102 : 2 { 0x2 +1.23e129 } : BV:32
103 : bvadd(102, 77, 98) : BV:32
104 : eq(103, 81) : BOOL
105 : ite(104, 83, 84) : BV:8
106 : 1 { 0x1 +1.11e129 } : BV:32
107 : bvadd(106, 77, 98) : BV:32
108 : eq(107, 81) : BOOL
109 : ite(108, 83, 84) : BV:8
110 : bvadd(77, 98) : BV:32
111 : eq(110, 81) : BOOL
112 : ite(111, 83, 84) : BV:8
113 : bvconcat(101, 105, 109, 112) : BV:32
114 : ite(55, 2, 113) : BV:32
115 : ite(74, 113, 114) : BV:32
116 : ite(55, 2, 115) : BV:32
117 : lambda(52, 116) : FUNCTION[BV:32 -> BV:32]
118 : map(51, 117) : MAP[BV:32 -> BV:32]
119 : lambda(17, 118) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
120 : map(16, 119) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
121 : sym_const(120) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-a-0.L3%7%bbentry
1 : Lambda69533Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3288336393 { 0xc4000809 -1006630903 -1.24521e9 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3288336394 { 0xc400080a -1006630902 -1.24533e9 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda69534Var : BV:32
18 : Lambda69535Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 3288336395 { 0xc400080b -1006630901 -1.24545e9 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 31 { 0x1f +1.369e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 32 { 0x20 +1.381e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 33 { 0x21 +1.393e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda69536Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 1618465011 { 0x6077d0f3 +1.93606412e65 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 1937758495 { 0x737fd91f +1.99881350e103 } : BV:32
63 : eq(61, 62) : BOOL
64 : 32 { 0x20 } : BV:8
65 : 0 { 0x0 } : BV:8
66 : ite(63, 64, 65) : BV:8
67 : 1618465010 { 0x6077d0f2 +1.93606400e65 } : BV:32
68 : bvadd(67, 60) : BV:32
69 : eq(68, 62) : BOOL
70 : ite(69, 64, 65) : BV:8
71 : 1618465009 { 0x6077d0f1 +1.93606388e65 } : BV:32
72 : bvadd(71, 60) : BV:32
73 : eq(72, 62) : BOOL
74 : ite(73, 64, 65) : BV:8
75 : 1618465008 { 0x6077d0f0 +1.93606376e65 } : BV:32
76 : bvadd(75, 60) : BV:32
77 : eq(76, 62) : BOOL
78 : ite(77, 64, 65) : BV:8
79 : bvconcat(66, 70, 74, 78) : BV:32
80 : bvadd(56, 58, 79) : BV:32
81 : eq(80, 62) : BOOL
82 : ite(81, 64, 65) : BV:8
83 : 2 { 0x2 +1.23e129 } : BV:32
84 : bvadd(83, 58, 79) : BV:32
85 : eq(84, 62) : BOOL
86 : ite(85, 64, 65) : BV:8
87 : 1 { 0x1 +1.11e129 } : BV:32
88 : bvadd(87, 58, 79) : BV:32
89 : eq(88, 62) : BOOL
90 : ite(89, 64, 65) : BV:8
91 : bvadd(58, 79) : BV:32
92 : eq(91, 62) : BOOL
93 : ite(92, 64, 65) : BV:8
94 : bvconcat(82, 86, 90, 93) : BV:32
95 : ite(55, 2, 94) : BV:32
96 : lambda(52, 95) : FUNCTION[BV:32 -> BV:32]
97 : map(51, 96) : MAP[BV:32 -> BV:32]
98 : lambda(17, 97) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
99 : map(16, 98) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
100 : sym_const(99) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 1937758494 ] -> 0, [ 1937758495; 1937758495 ] -> 32, [ 1937758496; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 117393703 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 117393704; 117393707 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 117393708; 126833423 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 126833424; 126833427 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 126833428; 3289269123 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 3289269124; 3289269127 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3289269128; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%n
1 : 3288336394 { 0xc400080a -1006630902 -1.24533e9 } : BV:32
=input.dst.llvm-%m
1 : 32 { 0x20 +1.381e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3289269124 { 0xc40e4384 -1005698172 -1.11143541e9 } : BV:32
=input.dst.llvm-%arr
1 : 1618465008 { 0x6077d0f0 +1.93606376e65 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 117393704 { 0x6ff4928 +1.99442005e142 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 126833424 { 0x78f5310 +1.11972236e144 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 2227307019 { 0x84c2020b -2067660277 -1.51568734e138 } : BV:32
=input.spec-%var-x-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2227307019 { 0x84c2020b -2067660277 -1.51568734e138 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3289269124 { 0xc40e4384 -1005698172 -1.11143541e9 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3289269127 { 0xc40e4387 -1005698169 -1.11143577e9 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 117393704 { 0x6ff4928 +1.99442005e142 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 117393707 { 0x6ff492b +1.99442040e142 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 126833424 { 0x78f5310 +1.11972236e144 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 126833427 { 0x78f5313 +1.11972272e144 } : BV:32
=input.spec-%var-a-0.L3%7%bbentry.1.1.0.1
1 : Lambda69389Var : BV:32
2 : Lambda69390Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 3288336393 { 0xc4000809 -1006630903 -1.24521e9 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 3288336394 { 0xc400080a -1006630902 -1.24533e9 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 3288336395 { 0xc400080b -1006630901 -1.24545e9 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 31 { 0x1f +1.369e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 32 { 0x20 +1.381e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 33 { 0x21 +1.393e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-a-1.1.1.0.1
1 : Lambda69395Var : BV:32
2 : Lambda69396Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 3288336393 { 0xc4000809 -1006630903 -1.24521e9 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 3288336394 { 0xc400080a -1006630902 -1.24533e9 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 3288336395 { 0xc400080b -1006630901 -1.24545e9 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 31 { 0x1f +1.369e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 32 { 0x20 +1.381e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 33 { 0x21 +1.393e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-a-1.0.1
1 : ([ 0; 3288336393 ] -> true, [ 3288336394; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-a-1.1.1.1.1
1 : Lambda69401Var : BV:32
2 : Lambda69402Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 3288336393 { 0xc4000809 -1006630903 -1.24521e9 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 3288336394 { 0xc400080a -1006630902 -1.24533e9 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 3288336395 { 0xc400080b -1006630901 -1.24545e9 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 31 { 0x1f +1.369e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 32 { 0x20 +1.381e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 33 { 0x21 +1.393e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 1618465011 { 0x6077d0f3 +1.93606412e65 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 1937758495 { 0x737fd91f +1.99881350e103 } : BV:32
55 : eq(53, 54) : BOOL
56 : 32 { 0x20 } : BV:8
57 : 0 { 0x0 } : BV:8
58 : ite(55, 56, 57) : BV:8
59 : 1618465010 { 0x6077d0f2 +1.93606400e65 } : BV:32
60 : bvadd(59, 52) : BV:32
61 : eq(60, 54) : BOOL
62 : ite(61, 56, 57) : BV:8
63 : 1618465009 { 0x6077d0f1 +1.93606388e65 } : BV:32
64 : bvadd(63, 52) : BV:32
65 : eq(64, 54) : BOOL
66 : ite(65, 56, 57) : BV:8
67 : 1618465008 { 0x6077d0f0 +1.93606376e65 } : BV:32
68 : bvadd(67, 52) : BV:32
69 : eq(68, 54) : BOOL
70 : ite(69, 56, 57) : BV:8
71 : bvconcat(58, 62, 66, 70) : BV:32
72 : bvadd(48, 50, 71) : BV:32
73 : eq(72, 54) : BOOL
74 : ite(73, 56, 57) : BV:8
75 : 2 { 0x2 +1.23e129 } : BV:32
76 : bvadd(75, 50, 71) : BV:32
77 : eq(76, 54) : BOOL
78 : ite(77, 56, 57) : BV:8
79 : 1 { 0x1 +1.11e129 } : BV:32
80 : bvadd(79, 50, 71) : BV:32
81 : eq(80, 54) : BOOL
82 : ite(81, 56, 57) : BV:8
83 : bvadd(50, 71) : BV:32
84 : eq(83, 54) : BOOL
85 : ite(84, 56, 57) : BV:8
86 : bvconcat(74, 78, 82, 85) : BV:32
87 : ite(6, 3, 86) : BV:32
88 : ite(47, 86, 87) : BV:32
89 : ite(6, 3, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-a-0.L3%7%bbentry.1.1.1.1
1 : Lambda69403Var : BV:32
2 : Lambda69404Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 1618465011 { 0x6077d0f3 +1.93606412e65 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 1937758495 { 0x737fd91f +1.99881350e103 } : BV:32
14 : eq(12, 13) : BOOL
15 : 32 { 0x20 } : BV:8
16 : 0 { 0x0 } : BV:8
17 : ite(14, 15, 16) : BV:8
18 : 1618465010 { 0x6077d0f2 +1.93606400e65 } : BV:32
19 : bvadd(18, 11) : BV:32
20 : eq(19, 13) : BOOL
21 : ite(20, 15, 16) : BV:8
22 : 1618465009 { 0x6077d0f1 +1.93606388e65 } : BV:32
23 : bvadd(22, 11) : BV:32
24 : eq(23, 13) : BOOL
25 : ite(24, 15, 16) : BV:8
26 : 1618465008 { 0x6077d0f0 +1.93606376e65 } : BV:32
27 : bvadd(26, 11) : BV:32
28 : eq(27, 13) : BOOL
29 : ite(28, 15, 16) : BV:8
30 : bvconcat(17, 21, 25, 29) : BV:32
31 : bvadd(7, 9, 30) : BV:32
32 : eq(31, 13) : BOOL
33 : ite(32, 15, 16) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 9, 30) : BV:32
36 : eq(35, 13) : BOOL
37 : ite(36, 15, 16) : BV:8
38 : 1 { 0x1 +1.11e129 } : BV:32
39 : bvadd(38, 9, 30) : BV:32
40 : eq(39, 13) : BOOL
41 : ite(40, 15, 16) : BV:8
42 : bvadd(9, 30) : BV:32
43 : eq(42, 13) : BOOL
44 : ite(43, 15, 16) : BV:8
45 : bvconcat(33, 37, 41, 44) : BV:32
46 : ite(6, 3, 45) : BV:32
47 : lambda(1, 2, 46) : FUNCTION[BV:32,BV:32 -> BV:32]
48 : sym_const(47) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-a-0.L3%7%bbentry.0.1
1 : ([ 0; 3288336393 ] -> true, [ 3288336394; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda69522Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 31 { 0x1f +1.369e129 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 32 { 0x20 +1.381e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda69523Var : BV:32
20 : eq(19, 4) : BOOL
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 19) : BV:32
24 : 536870912 { 0x20000000 +1.0e193 } : BV:32
25 : bvadd(21, 23, 24) : BV:32
26 : 1937758495 { 0x737fd91f +1.99881350e103 } : BV:32
27 : eq(25, 26) : BOOL
28 : 32 { 0x20 } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : 2 { 0x2 +1.23e129 } : BV:32
32 : bvadd(31, 23, 24) : BV:32
33 : eq(32, 26) : BOOL
34 : ite(33, 28, 29) : BV:8
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : bvadd(35, 23, 24) : BV:32
37 : eq(36, 26) : BOOL
38 : ite(37, 28, 29) : BV:8
39 : bvadd(23, 24) : BV:32
40 : eq(39, 26) : BOOL
41 : ite(40, 28, 29) : BV:8
42 : bvconcat(30, 34, 38, 41) : BV:32
43 : ite(20, 4, 42) : BV:32
44 : lambda(19, 43) : FUNCTION[BV:32 -> BV:32]
45 : map(18, 44) : MAP[BV:32 -> BV:32]
46 : sum(1, 2, 45) : SUM[UNIT,MAP[BV:32 -> BV:32]]
47 : sym_const(46) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 31 ] -> true, [ 32; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda69410Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 536870912 { 0x20000000 +1.0e193 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 1937758495 { 0x737fd91f +1.99881350e103 } : BV:32
10 : eq(8, 9) : BOOL
11 : 32 { 0x20 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : ite(3, 2, 25) : BV:32
27 : lambda(1, 26) : FUNCTION[BV:32 -> BV:32]
28 : sym_const(27) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
652299590
=counter_example_end


failcond-expr = or(not(bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)), and(sum_is(map_get(sum_get(input.spec-%tmpvar-7.L3%8%d, 1), 0), 0), sum_is(map_get(input.spec-%var-a-0.L3%7%bbentry, bvadd(1, input.spec-%var-i-0.L3%7%bbentry)), 1))):
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
4 : not(3) : BOOL
5 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
6 : 1 { 0x1 +1.0e1025 } : INT
7 : sum_get(5, 6) : MAP[BV:32 -> BV:32]
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : map_get(7, 8) : SUM[UNIT,BV:32]
10 : 0 { 0x0 +1.0e1025 } : INT
11 : sum_is(9, 10) : BOOL
12 : input.spec-%var-a-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
13 : 1 { 0x1 +1.11e129 } : BV:32
14 : input.spec-%var-i-0.L3%7%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : map_get(12, 15) : SUM[UNIT,MAP[BV:32 -> BV:32]]
17 : sum_is(16, 6) : BOOL
18 : and(11, 17) : BOOL
19 : or(4, 18) : BOOL
</MSG>
<MSG>4:37 : foo.A1.B3.C1.D2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>4:37 : foo.A1.B3.C1.D2: Finished executing CG's add edge function...</MSG>
<MSG>4:37 : foo.A1.B3.C1.D2: Computing CG regions after the addition of the edge L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:37 : foo.A1.B3.C1.D2: Done computing CG regions after the addition of the edge L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:37 : Done adding new edge to the product-TFG foo.A1.B3.C1.D2 for fromPC L3%11%bbentry_Lfor.cond1%1%bbentry and toPC L3%11%bbentry_Lfor.cond1%1%bbentry, src path L3%11%bbentry --> L3%11%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>4:37 : Done adding a CG edge composition using the src path L3%11%bbentry --> L3%11%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:37 : Failed correlation of src pathset L3%11%bbentry=>L3%11%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%11%bbentry_Lfor.cond1%1%bbentry: failcond = wfcond.from_pcL3%11%bbentry_Lfor.cond1%1%bbentry.to_pcL3%11%bbentry_Lfor.cond1%1%bbentry-dst-edgecond-implies-src-edgecond
140745 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32 : 0
140426 : input.dst.llvm-%m : BV:32                 : 32
140746 : bvult(140745, 140426) : BOOL              : true
207707 : not(140746) : BOOL                        : false
140647 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]] : ( sum(2147483648, unit, map(lambda(Lambda69522Var, ite(and(bvule(0, Lambda69522Var), bvule(Lambda69522Var, 31)), true, ite(and(bvule(32, Lambda69522Var), bvule(Lambda69522Var, 4294967295)), false, false))), lambda(Lambda69523Var, ite(eq(Lambda69523Var, 0), 0, bvconcat(ite(eq(bvadd(3, bvmul(4, Lambda69523Var), 536870912), 1937758495), 32, 0), ite(eq(bvadd(2, bvmul(4, Lambda69523Var), 536870912), 1937758495), 32, 0), ite(eq(bvadd(1, bvmul(4, Lambda69523Var), 536870912), 1937758495), 32, 0), ite(eq(bvadd(bvmul(4, Lambda69523Var), 536870912), 1937758495), 32, 0)))))) )
140303 : 1 { 0x1 +1.0e1025 } : INT                 : 1
140669 : sum_get(140647, 140303) : MAP[BV:32 -> BV:32] : ( map(lambda(Lambda69609Var, ite(and(bvule(0, Lambda69609Var), bvule(Lambda69609Var, 31)), true, ite(and(bvule(32, Lambda69609Var), bvule(Lambda69609Var, 4294967295)), false, false))), lambda(Lambda69610Var, ite(eq(Lambda69610Var, 0), 0, bvconcat(ite(eq(bvadd(3, bvmul(4, Lambda69610Var), 536870912), 1937758495), 32, 0), ite(eq(bvadd(2, bvmul(4, Lambda69610Var), 536870912), 1937758495), 32, 0), ite(eq(bvadd(1, bvmul(4, Lambda69610Var), 536870912), 1937758495), 32, 0), ite(eq(bvadd(bvmul(4, Lambda69610Var), 536870912), 1937758495), 32, 0))))) )
140286 : 0 { 0x0 +1.0e129 } : BV:32                : 0
163171 : map_get(140669, 140286) : SUM[UNIT,BV:32] : ( sum(ite(ite(and(bvule(0, 0), bvule(0, 31)), true, ite(and(bvule(32, 0), bvule(0, 4294967295)), false, false)), 1, 0), unit, ite(eq(0, 0), 0, bvconcat(ite(eq(bvadd(3, bvmul(4, 0), 536870912), 1937758495), 32, 0), ite(eq(bvadd(2, bvmul(4, 0), 536870912), 1937758495), 32, 0), ite(eq(bvadd(1, bvmul(4, 0), 536870912), 1937758495), 32, 0), ite(eq(bvadd(bvmul(4, 0), 536870912), 1937758495), 32, 0)))) )
140305 : 0 { 0x0 +1.0e1025 } : INT                 : 0
163207 : sum_is(163171, 140305) : BOOL             : false
140655 : input.spec-%var-a-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]] : ( 214194 = bvconcat(ite(eq(bvadd(1618465011, bvmul(4, Lambda69534Var)), 1937758495), 32, 0), ite(eq(bvadd(1618465010, bvmul(4, Lambda69534Var)), 1937758495), 32, 0), ite(eq(bvadd(1618465009, bvmul(4, Lambda69534Var)), 1937758495), 32, 0), ite(eq(bvadd(1618465008, bvmul(4, Lambda69534Var)), 1937758495), 32, 0));map[214143](lambda(Lambda69533Var, ite(and(bvule(0, Lambda69533Var), bvule(Lambda69533Var, 3288336393)), true, ite(and(bvule(3288336394, Lambda69533Var), bvule(Lambda69533Var, 4294967295)), false, false))), lambda[214142](Lambda69534Var, map[214141](lambda(Lambda69535Var, ite(and(eq(ite(and(bvule(0, Lambda69534Var), bvule(Lambda69534Var, 3288336393)), 0, ite(and(bvule(3288336394, Lambda69534Var), bvule(Lambda69534Var, 3288336394)), 3288336394, ite(and(bvule(3288336395, Lambda69534Var), bvule(Lambda69534Var, 4294967295)), 3288336395, 3288336395))), 0), eq(ite(and(bvule(0, Lambda69535Var), bvule(Lambda69535Var, 31)), 0, ite(and(bvule(32, Lambda69535Var), bvule(Lambda69535Var, 32)), 32, ite(and(bvule(33, Lambda69535Var), bvule(Lambda69535Var, 4294967295)), 33, 33))), 0)), true, false)), lambda[214140](Lambda69536Var, ite[214225](and(eq(Lambda69534Var, 0), eq(Lambda69536Var, 0)), 0, bvconcat[214224](ite[214214](eq[214213](bvadd[214212](3, bvmul(4, Lambda69536Var), 214194), 1937758495), 32, 0), ite[214217](eq[214216](bvadd[214215](2, bvmul(4, Lambda69536Var), 214194), 1937758495), 32, 0), ite[214220](eq[214219](bvadd[214218](1, bvmul(4, Lambda69536Var), 214194), 1937758495), 32, 0), ite[214223](eq[214222](bvadd[214221](bvmul(4, Lambda69536Var), 214194), 1937758495), 32, 0))))))) )
140308 : 1 { 0x1 +1.11e129 } : BV:32               : 1
140656 : input.spec-%var-i-0.L3%7%bbentry : BV:32  : 2227307019
140704 : bvadd(140308, 140656) : BV:32             : 2227307020
213689 : map_get(140655, 140704) : SUM[UNIT,MAP[BV:32 -> BV:32]] : ( 214257 = bvconcat(ite(eq(bvadd(1618465011, bvmul(4, 2227307020)), 1937758495), 32, 0), ite(eq(bvadd(1618465010, bvmul(4, 2227307020)), 1937758495), 32, 0), ite(eq(bvadd(1618465009, bvmul(4, 2227307020)), 1937758495), 32, 0), ite(eq(bvadd(1618465008, bvmul(4, 2227307020)), 1937758495), 32, 0));sum[214316](ite(ite(and(bvule(0, 2227307020), bvule(2227307020, 3288336393)), true, ite(and(bvule(3288336394, 2227307020), bvule(2227307020, 4294967295)), false, false)), 1, 0), unit, map[214315](lambda(Lambda69643Var, ite(and(eq(ite(and(bvule(0, 2227307020), bvule(2227307020, 3288336393)), 0, ite(and(bvule(3288336394, 2227307020), bvule(2227307020, 3288336394)), 3288336394, ite(and(bvule(3288336395, 2227307020), bvule(2227307020, 4294967295)), 3288336395, 3288336395))), 0), eq(ite(and(bvule(0, Lambda69643Var), bvule(Lambda69643Var, 31)), 0, ite(and(bvule(32, Lambda69643Var), bvule(Lambda69643Var, 32)), 32, ite(and(bvule(33, Lambda69643Var), bvule(Lambda69643Var, 4294967295)), 33, 33))), 0)), true, false)), lambda[214314](Lambda69644Var, ite[214313](and(eq(2227307020, 0), eq(Lambda69644Var, 0)), 0, bvconcat[214312](ite[214277](eq[214259](bvadd[214258](3, bvmul(4, Lambda69644Var), 214257), 1937758495), 32, 0), ite[214280](eq[214279](bvadd[214278](2, bvmul(4, Lambda69644Var), 214257), 1937758495), 32, 0), ite[214308](eq[214292](bvadd[214291](1, bvmul(4, Lambda69644Var), 214257), 1937758495), 32, 0), ite[214311](eq[214310](bvadd[214309](bvmul(4, Lambda69644Var), 214257), 1937758495), 32, 0)))))) )
214100 : sum_is(213689, 140303) : BOOL             : true
214101 : and(163207, 214100) : BOOL                : false
214144 : or(207707, 214101) : BOOL                 : false

ce =
=counter_example_begin z3v487.ce4775 b8c75f75bbb56056a0727a2eaec0a3
=input.spec-%var-a-1
1 : Lambda69513Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3288336393 { 0xc4000809 -1006630903 -1.24521e9 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3288336394 { 0xc400080a -1006630902 -1.24533e9 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda69514Var : BV:32
18 : Lambda69515Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 3288336395 { 0xc400080b -1006630901 -1.24545e9 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 31 { 0x1f +1.369e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 32 { 0x20 +1.381e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 33 { 0x21 +1.393e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda69516Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 1618465011 { 0x6077d0f3 +1.93606412e65 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 1937758495 { 0x737fd91f +1.99881350e103 } : BV:32
82 : eq(80, 81) : BOOL
83 : 32 { 0x20 } : BV:8
84 : 0 { 0x0 } : BV:8
85 : ite(82, 83, 84) : BV:8
86 : 1618465010 { 0x6077d0f2 +1.93606400e65 } : BV:32
87 : bvadd(86, 79) : BV:32
88 : eq(87, 81) : BOOL
89 : ite(88, 83, 84) : BV:8
90 : 1618465009 { 0x6077d0f1 +1.93606388e65 } : BV:32
91 : bvadd(90, 79) : BV:32
92 : eq(91, 81) : BOOL
93 : ite(92, 83, 84) : BV:8
94 : 1618465008 { 0x6077d0f0 +1.93606376e65 } : BV:32
95 : bvadd(94, 79) : BV:32
96 : eq(95, 81) : BOOL
97 : ite(96, 83, 84) : BV:8
98 : bvconcat(85, 89, 93, 97) : BV:32
99 : bvadd(75, 77, 98) : BV:32
100 : eq(99, 81) : BOOL
101 : ite(100, 83, 84) : BV:8
102 : 2 { 0x2 +1.23e129 } : BV:32
103 : bvadd(102, 77, 98) : BV:32
104 : eq(103, 81) : BOOL
105 : ite(104, 83, 84) : BV:8
106 : 1 { 0x1 +1.11e129 } : BV:32
107 : bvadd(106, 77, 98) : BV:32
108 : eq(107, 81) : BOOL
109 : ite(108, 83, 84) : BV:8
110 : bvadd(77, 98) : BV:32
111 : eq(110, 81) : BOOL
112 : ite(111, 83, 84) : BV:8
113 : bvconcat(101, 105, 109, 112) : BV:32
114 : ite(55, 2, 113) : BV:32
115 : ite(74, 113, 114) : BV:32
116 : ite(55, 2, 115) : BV:32
117 : lambda(52, 116) : FUNCTION[BV:32 -> BV:32]
118 : map(51, 117) : MAP[BV:32 -> BV:32]
119 : lambda(17, 118) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
120 : map(16, 119) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
121 : sym_const(120) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-a-0.L3%7%bbentry
1 : Lambda69533Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3288336393 { 0xc4000809 -1006630903 -1.24521e9 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3288336394 { 0xc400080a -1006630902 -1.24533e9 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda69534Var : BV:32
18 : Lambda69535Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 3288336395 { 0xc400080b -1006630901 -1.24545e9 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 31 { 0x1f +1.369e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 32 { 0x20 +1.381e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 33 { 0x21 +1.393e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda69536Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 1618465011 { 0x6077d0f3 +1.93606412e65 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 1937758495 { 0x737fd91f +1.99881350e103 } : BV:32
63 : eq(61, 62) : BOOL
64 : 32 { 0x20 } : BV:8
65 : 0 { 0x0 } : BV:8
66 : ite(63, 64, 65) : BV:8
67 : 1618465010 { 0x6077d0f2 +1.93606400e65 } : BV:32
68 : bvadd(67, 60) : BV:32
69 : eq(68, 62) : BOOL
70 : ite(69, 64, 65) : BV:8
71 : 1618465009 { 0x6077d0f1 +1.93606388e65 } : BV:32
72 : bvadd(71, 60) : BV:32
73 : eq(72, 62) : BOOL
74 : ite(73, 64, 65) : BV:8
75 : 1618465008 { 0x6077d0f0 +1.93606376e65 } : BV:32
76 : bvadd(75, 60) : BV:32
77 : eq(76, 62) : BOOL
78 : ite(77, 64, 65) : BV:8
79 : bvconcat(66, 70, 74, 78) : BV:32
80 : bvadd(56, 58, 79) : BV:32
81 : eq(80, 62) : BOOL
82 : ite(81, 64, 65) : BV:8
83 : 2 { 0x2 +1.23e129 } : BV:32
84 : bvadd(83, 58, 79) : BV:32
85 : eq(84, 62) : BOOL
86 : ite(85, 64, 65) : BV:8
87 : 1 { 0x1 +1.11e129 } : BV:32
88 : bvadd(87, 58, 79) : BV:32
89 : eq(88, 62) : BOOL
90 : ite(89, 64, 65) : BV:8
91 : bvadd(58, 79) : BV:32
92 : eq(91, 62) : BOOL
93 : ite(92, 64, 65) : BV:8
94 : bvconcat(82, 86, 90, 93) : BV:32
95 : ite(55, 2, 94) : BV:32
96 : lambda(52, 95) : FUNCTION[BV:32 -> BV:32]
97 : map(51, 96) : MAP[BV:32 -> BV:32]
98 : lambda(17, 97) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
99 : map(16, 98) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
100 : sym_const(99) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 1937758494 ] -> 0, [ 1937758495; 1937758495 ] -> 32, [ 1937758496; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 117393703 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 117393704; 117393707 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 117393708; 126833423 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 126833424; 126833427 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 126833428; 3289269123 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 3289269124; 3289269127 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3289269128; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%n
1 : 3288336394 { 0xc400080a -1006630902 -1.24533e9 } : BV:32
=input.dst.llvm-%m
1 : 32 { 0x20 +1.381e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3289269124 { 0xc40e4384 -1005698172 -1.11143541e9 } : BV:32
=input.dst.llvm-%arr
1 : 1618465008 { 0x6077d0f0 +1.93606376e65 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 117393704 { 0x6ff4928 +1.99442005e142 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 126833424 { 0x78f5310 +1.11972236e144 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 2227307019 { 0x84c2020b -2067660277 -1.51568734e138 } : BV:32
=input.spec-%var-x-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2227307019 { 0x84c2020b -2067660277 -1.51568734e138 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3289269124 { 0xc40e4384 -1005698172 -1.11143541e9 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3289269127 { 0xc40e4387 -1005698169 -1.11143577e9 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 117393704 { 0x6ff4928 +1.99442005e142 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 117393707 { 0x6ff492b +1.99442040e142 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 126833424 { 0x78f5310 +1.11972236e144 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 126833427 { 0x78f5313 +1.11972272e144 } : BV:32
=input.spec-%var-a-0.L3%7%bbentry.1.1.0.1
1 : Lambda69389Var : BV:32
2 : Lambda69390Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 3288336393 { 0xc4000809 -1006630903 -1.24521e9 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 3288336394 { 0xc400080a -1006630902 -1.24533e9 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 3288336395 { 0xc400080b -1006630901 -1.24545e9 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 31 { 0x1f +1.369e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 32 { 0x20 +1.381e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 33 { 0x21 +1.393e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-a-1.1.1.0.1
1 : Lambda69395Var : BV:32
2 : Lambda69396Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 3288336393 { 0xc4000809 -1006630903 -1.24521e9 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 3288336394 { 0xc400080a -1006630902 -1.24533e9 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 3288336395 { 0xc400080b -1006630901 -1.24545e9 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 31 { 0x1f +1.369e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 32 { 0x20 +1.381e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 33 { 0x21 +1.393e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-a-1.0.1
1 : ([ 0; 3288336393 ] -> true, [ 3288336394; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-a-1.1.1.1.1
1 : Lambda69401Var : BV:32
2 : Lambda69402Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 3288336393 { 0xc4000809 -1006630903 -1.24521e9 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 3288336394 { 0xc400080a -1006630902 -1.24533e9 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 3288336395 { 0xc400080b -1006630901 -1.24545e9 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 31 { 0x1f +1.369e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 32 { 0x20 +1.381e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 33 { 0x21 +1.393e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 1618465011 { 0x6077d0f3 +1.93606412e65 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 1937758495 { 0x737fd91f +1.99881350e103 } : BV:32
55 : eq(53, 54) : BOOL
56 : 32 { 0x20 } : BV:8
57 : 0 { 0x0 } : BV:8
58 : ite(55, 56, 57) : BV:8
59 : 1618465010 { 0x6077d0f2 +1.93606400e65 } : BV:32
60 : bvadd(59, 52) : BV:32
61 : eq(60, 54) : BOOL
62 : ite(61, 56, 57) : BV:8
63 : 1618465009 { 0x6077d0f1 +1.93606388e65 } : BV:32
64 : bvadd(63, 52) : BV:32
65 : eq(64, 54) : BOOL
66 : ite(65, 56, 57) : BV:8
67 : 1618465008 { 0x6077d0f0 +1.93606376e65 } : BV:32
68 : bvadd(67, 52) : BV:32
69 : eq(68, 54) : BOOL
70 : ite(69, 56, 57) : BV:8
71 : bvconcat(58, 62, 66, 70) : BV:32
72 : bvadd(48, 50, 71) : BV:32
73 : eq(72, 54) : BOOL
74 : ite(73, 56, 57) : BV:8
75 : 2 { 0x2 +1.23e129 } : BV:32
76 : bvadd(75, 50, 71) : BV:32
77 : eq(76, 54) : BOOL
78 : ite(77, 56, 57) : BV:8
79 : 1 { 0x1 +1.11e129 } : BV:32
80 : bvadd(79, 50, 71) : BV:32
81 : eq(80, 54) : BOOL
82 : ite(81, 56, 57) : BV:8
83 : bvadd(50, 71) : BV:32
84 : eq(83, 54) : BOOL
85 : ite(84, 56, 57) : BV:8
86 : bvconcat(74, 78, 82, 85) : BV:32
87 : ite(6, 3, 86) : BV:32
88 : ite(47, 86, 87) : BV:32
89 : ite(6, 3, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-a-0.L3%7%bbentry.1.1.1.1
1 : Lambda69403Var : BV:32
2 : Lambda69404Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 1618465011 { 0x6077d0f3 +1.93606412e65 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 1937758495 { 0x737fd91f +1.99881350e103 } : BV:32
14 : eq(12, 13) : BOOL
15 : 32 { 0x20 } : BV:8
16 : 0 { 0x0 } : BV:8
17 : ite(14, 15, 16) : BV:8
18 : 1618465010 { 0x6077d0f2 +1.93606400e65 } : BV:32
19 : bvadd(18, 11) : BV:32
20 : eq(19, 13) : BOOL
21 : ite(20, 15, 16) : BV:8
22 : 1618465009 { 0x6077d0f1 +1.93606388e65 } : BV:32
23 : bvadd(22, 11) : BV:32
24 : eq(23, 13) : BOOL
25 : ite(24, 15, 16) : BV:8
26 : 1618465008 { 0x6077d0f0 +1.93606376e65 } : BV:32
27 : bvadd(26, 11) : BV:32
28 : eq(27, 13) : BOOL
29 : ite(28, 15, 16) : BV:8
30 : bvconcat(17, 21, 25, 29) : BV:32
31 : bvadd(7, 9, 30) : BV:32
32 : eq(31, 13) : BOOL
33 : ite(32, 15, 16) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 9, 30) : BV:32
36 : eq(35, 13) : BOOL
37 : ite(36, 15, 16) : BV:8
38 : 1 { 0x1 +1.11e129 } : BV:32
39 : bvadd(38, 9, 30) : BV:32
40 : eq(39, 13) : BOOL
41 : ite(40, 15, 16) : BV:8
42 : bvadd(9, 30) : BV:32
43 : eq(42, 13) : BOOL
44 : ite(43, 15, 16) : BV:8
45 : bvconcat(33, 37, 41, 44) : BV:32
46 : ite(6, 3, 45) : BV:32
47 : lambda(1, 2, 46) : FUNCTION[BV:32,BV:32 -> BV:32]
48 : sym_const(47) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-a-0.L3%7%bbentry.0.1
1 : ([ 0; 3288336393 ] -> true, [ 3288336394; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda69522Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 31 { 0x1f +1.369e129 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 32 { 0x20 +1.381e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda69523Var : BV:32
20 : eq(19, 4) : BOOL
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 19) : BV:32
24 : 536870912 { 0x20000000 +1.0e193 } : BV:32
25 : bvadd(21, 23, 24) : BV:32
26 : 1937758495 { 0x737fd91f +1.99881350e103 } : BV:32
27 : eq(25, 26) : BOOL
28 : 32 { 0x20 } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : 2 { 0x2 +1.23e129 } : BV:32
32 : bvadd(31, 23, 24) : BV:32
33 : eq(32, 26) : BOOL
34 : ite(33, 28, 29) : BV:8
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : bvadd(35, 23, 24) : BV:32
37 : eq(36, 26) : BOOL
38 : ite(37, 28, 29) : BV:8
39 : bvadd(23, 24) : BV:32
40 : eq(39, 26) : BOOL
41 : ite(40, 28, 29) : BV:8
42 : bvconcat(30, 34, 38, 41) : BV:32
43 : ite(20, 4, 42) : BV:32
44 : lambda(19, 43) : FUNCTION[BV:32 -> BV:32]
45 : map(18, 44) : MAP[BV:32 -> BV:32]
46 : sum(1, 2, 45) : SUM[UNIT,MAP[BV:32 -> BV:32]]
47 : sym_const(46) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 31 ] -> true, [ 32; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda69410Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 536870912 { 0x20000000 +1.0e193 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 1937758495 { 0x737fd91f +1.99881350e103 } : BV:32
10 : eq(8, 9) : BOOL
11 : 32 { 0x20 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : ite(3, 2, 25) : BV:32
27 : lambda(1, 26) : FUNCTION[BV:32 -> BV:32]
28 : sym_const(27) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
652299590
=counter_example_end


</MSG>
<MSG>4:37 : Discovered that the correlation was useless for the product-TFG foo.A1.B3.C1.D2 (d:6, s:0, sp: 14)...</MSG>
<MSG>4:37 : Chose (for CE propagation) product-TFG foo.A1.B3.C1.D1 (d:6, s:0, sp: 14) from a frontier of size 3...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%11%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%11%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 33 counterexamples (for correlating 7 bv exprs)
            L3%11%bbentry_Lfor.cond1%1%bbentry (C L3%11%bbentry, A (line 4 at column 28))
                L3%11%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 23 counterexamples (for correlating 9 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%11%bbentry=>L3%11%bbentry[mu 0, delta {0,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>4:37 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B3.C1.D1...</MSG>
<MSG>4:37 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B3.C1.D1...</MSG>
<MSG>4:37 : Creating ssa-path for the src-tfg path L3%11%bbentry --> L3%11%bbentry ending at L3%11%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:37 : Adding a CG edge composition using the src path L3%11%bbentry --> L3%11%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:37 : Identifying common alloc-deallocs in the src path L3%11%bbentry --> L3%11%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry
</MSG>
<MSG>4:37 : Identified no common alloc-deallocs in the src path L3%11%bbentry --> L3%11%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:37 : Adding new edge to the product-TFG foo.A1.B3.C1.D1 for fromPC L3%11%bbentry_Lfor.cond1%1%bbentry and toPC L3%11%bbentry_Lfor.cond1%1%bbentry, src path L3%11%bbentry --> L3%11%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>4:37 : foo.A1.B3.C1.D1: Getting alloca-ptrs on edge L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:37 : foo.A1.B3.C1.D1: Found no alloca-ptrs on edge L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:37 : foo.A1.B3.C1.D1: Adding edge L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:37 : foo.A1.B3.C1.D1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>4:37 : foo.A1.B3.C1.D1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>4:37 : foo.A1.B3.C1.D1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>4:37 : foo.A1.B3.C1.D1: Propagated 1 out of 23 counter-examples across edge L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry</MSG>
<MSG>4:37 : foo.A1.B3.C1.D1: Added the 1 propagated CEs at PC L3%11%bbentry_Lfor.cond1%1%bbentry and propagated further.
</MSG>
<MSG>4:37 : foo.A1.B3.C1.D1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>4:37 : foo.A1.B3.C1.D1: Finished executing CG's add edge function...</MSG>
<MSG>4:37 : foo.A1.B3.C1.D1: Computing CG regions after the addition of the edge L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:37 : foo.A1.B3.C1.D1: Done computing CG regions after the addition of the edge L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:37 : Done adding new edge to the product-TFG foo.A1.B3.C1.D1 for fromPC L3%11%bbentry_Lfor.cond1%1%bbentry and toPC L3%11%bbentry_Lfor.cond1%1%bbentry, src path L3%11%bbentry --> L3%11%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>4:37 : Done adding a CG edge composition using the src path L3%11%bbentry --> L3%11%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:37 : Added correlation to the product-TFG foo.A1.B3.C1.D1 (d:7, s:0, sp: 14) and created a correlation entry...</MSG>
<MSG>4:37 : Chose (after CE propagation) product-TFG foo.A1.B4 (d:6, s:0, sp: 14) from a frontier of size 3...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%19%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 14 counterexamples (for correlating 7 bv exprs)
            L3%19%bbentry_Lfor.cond1%1%bbentry (C L3%19%bbentry, A (line 4 at column 28))
                L3%19%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 14 counterexamples (for correlating 12 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%19%bbentry[mu 1, delta {1,0}]
<MSG>4:37 : foo.A1.B4: Updating invariants over the newly added edges in edge composition L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>4:37 : Constructed infer_invariants_dfa with initial worklist L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:37 : foo.A1.B4: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:37 : foo.A1.B4: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>4:37 : foo.A1.B4: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>4:37 : foo.A1.B4: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:37 : foo.A1.B4: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:37 : foo.A1.B4: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:37 : foo.A1.B4: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 12 exprs and 11 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:38 : foo.A1.B4: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht10-prove_trivial8-prove2...</MSG>
<MSG>4:38 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:38 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:38 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:38 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial0-prove4...</MSG>
<MSG>4:38 : foo.A1.B4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:38 : foo.A1.B4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:38 : foo.A1.B4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:38 : foo.A1.B4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:38 : foo.A1.B4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:38 : foo.A1.B4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:38 : foo.A1.B4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:38 : foo.A1.B4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:38 : foo.A1.B4: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:38 : foo.A1.B4: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht10-prove_trivial5-prove5...</MSG>
<MSG>4:38 : foo.A1.B4: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 13 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:38 : foo.A1.B4: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht5-prove_trivial2-prove3...</MSG>
<MSG>4:38 : foo.A1.B4: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:38 : foo.A1.B4: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:38 : foo.A1.B4: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>4:38 : foo.A1.B4: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>4:38 : foo.A1.B4 (d:6, s:0, sp: 14): checked newly added edge and inferred invariants...</MSG>
<MSG>4:38 : foo.A1.B4 (d:6, s:0, sp: 14): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>4:38 : product-TFG foo.A1.B4: Enumerating correlations for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L3%19%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:38 : Considering 1 paths to src pc L3%7%bbentry as correlation candidates for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%19%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:38 : Attempting correlation of src pathset L3%19%bbentry=>L3%7%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%19%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:38 : Found 1 feasible correlations for paths to src pc L3%7%bbentry as correlation candidates for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%19%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:38 : product-TFG foo.A1.B4: Found 1 correlations for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L3%19%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:38 : product-TFG foo.A1.B4 created 1 possibilities in group foo.A1.B4.C...</MSG>
<MSG>4:38 : Chose (for CE propagation) product-TFG foo.A1.B4.C1 (d:6, s:0, sp: 14) from a frontier of size 3...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%19%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 14 counterexamples (for correlating 7 bv exprs)
            L3%19%bbentry_Lfor.cond1%1%bbentry (C L3%19%bbentry, A (line 4 at column 28))
                L3%19%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 16 counterexamples (for correlating 12 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%19%bbentry=>L3%7%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>4:38 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B4.C1...</MSG>
<MSG>4:38 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B4.C1...</MSG>
<MSG>4:38 : Creating ssa-path for the src-tfg path L3%19%bbentry --> L3%7%bbentry ending at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>4:38 : Adding a CG edge composition using the src path L3%19%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry</MSG>
<MSG>4:38 : Identifying common alloc-deallocs in the src path L3%19%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry
</MSG>
<MSG>4:38 : Identified no common alloc-deallocs in the src path L3%19%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry</MSG>
<MSG>4:38 : Adding new edge to the product-TFG foo.A1.B4.C1 for fromPC L3%19%bbentry_Lfor.cond1%1%bbentry and toPC L3%7%bbentry_Lfor.cond%1%bbentry, src path L3%19%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry...</MSG>
<MSG>4:38 : foo.A1.B4.C1: Getting alloca-ptrs on edge L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>4:38 : foo.A1.B4.C1: Found no alloca-ptrs on edge L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>4:38 : foo.A1.B4.C1: Adding edge L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>4:38 : foo.A1.B4.C1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>4:38 : foo.A1.B4.C1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>4:38 : foo.A1.B4.C1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>4:39 : foo.A1.B4.C1: Propagated 10 out of 16 counter-examples across edge L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry</MSG>
<MSG>4:40 : foo.A1.B4.C1: Added the 10 propagated CEs at PC L3%7%bbentry_Lfor.cond%1%bbentry and propagated further.
</MSG>
<MSG>4:40 : foo.A1.B4.C1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>4:40 : foo.A1.B4.C1: Finished executing CG's add edge function...</MSG>
<MSG>4:40 : foo.A1.B4.C1: Computing CG regions after the addition of the edge L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>4:40 : foo.A1.B4.C1: Done computing CG regions after the addition of the edge L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>4:40 : Done adding new edge to the product-TFG foo.A1.B4.C1 for fromPC L3%19%bbentry_Lfor.cond1%1%bbentry and toPC L3%7%bbentry_Lfor.cond%1%bbentry, src path L3%19%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry...</MSG>
<MSG>4:40 : Done adding a CG edge composition using the src path L3%19%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry</MSG>
<MSG>4:40 : Added correlation to the product-TFG foo.A1.B4.C1 (d:6, s:0, sp: 14) and created a correlation entry...</MSG>
<MSG>4:40 : Chose (after CE propagation) product-TFG foo.A1.B4.C1 (d:6, s:0, sp: 14) from a frontier of size 3...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%19%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%19%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 25 counterexamples (for correlating 7 bv exprs)
            L3%19%bbentry_Lfor.cond1%1%bbentry (C L3%19%bbentry, A (line 4 at column 28))
                L3%19%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 18 counterexamples (for correlating 12 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%19%bbentry=>L3%7%bbentry[mu 1, delta {1,0}]
<MSG>4:40 : foo.A1.B4.C1: Updating invariants over the newly added edges in edge composition L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>4:40 : Constructed infer_invariants_dfa with initial worklist L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>4:40 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:40 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>4:40 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>4:40 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:40 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:40 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:40 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 12 exprs and 12 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:40 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht9-prove_trivial7-prove2...</MSG>
<MSG>4:40 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:40 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:40 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:40 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial0-prove4...</MSG>
<MSG>4:40 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:40 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:40 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:40 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:40 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:41 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial1-prove2...</MSG>
<MSG>4:41 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:41 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:41 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:41 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial2-prove5...</MSG>
<MSG>4:41 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 13 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:41 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht5-prove_trivial2-prove3...</MSG>
<MSG>4:41 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:41 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:41 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>4:41 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>4:41 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>4:41 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>4:41 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%19%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>4:41 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>4:41 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:41 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:41 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 8 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:41 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial3-prove1...</MSG>
<MSG>4:41 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:42 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht4-prove_trivial2-prove2...</MSG>
<MSG>4:42 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:42 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:42 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:42 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:42 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:42 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>4:42 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:42 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:42 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:42 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>4:42 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:42 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:42 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:42 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:42 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 8 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:42 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial3-prove1...</MSG>
<MSG>4:42 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:42 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial2-prove1...</MSG>
<MSG>4:42 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:42 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:42 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:42 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:42 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:42 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>4:42 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:42 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:42 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:43 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>4:43 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:43 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:43 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>4:43 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>4:43 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:43 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>4:43 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>4:43 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:43 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:43 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:43 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 12 exprs and 12 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:43 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht9-prove_trivial7-prove2...</MSG>
<MSG>4:43 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:43 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:43 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:44 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht5-prove_trivial0-prove5...</MSG>
<MSG>4:44 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:44 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:44 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:44 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:44 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:44 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:44 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:44 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:44 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:44 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial2-prove5...</MSG>
<MSG>4:44 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 13 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:44 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht5-prove_trivial2-prove3...</MSG>
<MSG>4:44 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:44 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:44 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:44 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:44 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 12 exprs and 12 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:44 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht9-prove_trivial7-prove2...</MSG>
<MSG>4:44 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:44 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:44 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:45 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial0-prove4...</MSG>
<MSG>4:45 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:45 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:45 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:45 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:45 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:45 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:45 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:45 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:45 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:45 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial2-prove5...</MSG>
<MSG>4:45 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 13 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:45 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht5-prove_trivial2-prove3...</MSG>
<MSG>4:45 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:45 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:45 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: changed ...</MSG>
<MSG>4:45 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>4:45 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>4:45 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>4:45 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%19%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>4:45 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>4:45 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:45 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:45 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 8 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:45 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial3-prove1...</MSG>
<MSG>4:45 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:46 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht4-prove_trivial1-prove3...</MSG>
<MSG>4:46 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:46 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:46 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:46 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:46 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:46 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>4:46 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:46 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:46 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:46 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>4:46 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:46 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:46 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:46 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:46 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 8 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:46 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial3-prove1...</MSG>
<MSG>4:46 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:46 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>4:46 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:46 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:46 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:46 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:46 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:46 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>4:46 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:46 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:46 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:46 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>4:46 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:46 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:46 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>4:46 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>4:46 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:46 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>4:46 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>4:46 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:46 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:46 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:46 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 12 exprs and 12 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:47 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht9-prove_trivial7-prove2...</MSG>
<MSG>4:47 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:47 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:47 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:47 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>4:47 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:47 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:47 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:47 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:47 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:47 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:47 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:47 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:47 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:47 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht6-prove_trivial2-prove4...</MSG>
<MSG>4:47 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 13 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:48 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht5-prove_trivial2-prove3...</MSG>
<MSG>4:48 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:48 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:48 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:48 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:48 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 12 exprs and 12 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:48 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht9-prove_trivial7-prove2...</MSG>
<MSG>4:48 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:48 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:48 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:48 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>4:48 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:48 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:48 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:48 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:48 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:48 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:48 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:48 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:48 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:48 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht6-prove_trivial2-prove4...</MSG>
<MSG>4:48 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 13 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:48 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht5-prove_trivial2-prove3...</MSG>
<MSG>4:48 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:48 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:48 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: changed ...</MSG>
<MSG>4:48 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>4:48 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>4:48 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>4:48 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%19%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>4:48 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>4:48 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:48 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:48 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 8 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:48 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial3-prove1...</MSG>
<MSG>4:48 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:48 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>4:48 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:48 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:48 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:48 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:48 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:49 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:49 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:49 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:49 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:49 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>4:49 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:49 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:49 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:49 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:49 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 8 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:49 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial3-prove1...</MSG>
<MSG>4:49 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:49 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:49 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:49 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:49 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:49 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:49 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:49 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:49 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:49 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:49 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:49 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>4:49 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:49 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:49 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>4:49 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>4:49 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:49 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>4:49 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>4:49 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:49 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:49 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:49 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 12 exprs and 12 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:49 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht9-prove_trivial7-prove2...</MSG>
<MSG>4:49 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:49 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:49 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:52 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>4:52 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:52 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:52 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:52 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:52 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:52 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:52 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:52 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:52 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:52 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht6-prove_trivial2-prove4...</MSG>
<MSG>4:52 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 13 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:52 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht5-prove_trivial2-prove3...</MSG>
<MSG>4:52 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:52 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:52 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:52 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:52 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 12 exprs and 12 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:52 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht9-prove_trivial7-prove2...</MSG>
<MSG>4:52 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:52 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:52 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:52 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:52 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:52 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:52 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:52 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:52 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:52 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:52 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:52 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:52 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht6-prove_trivial2-prove4...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 13 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht5-prove_trivial2-prove3...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: changed ...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>4:53 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%19%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 8 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial3-prove1...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 8 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial3-prove1...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>4:53 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 12 exprs and 12 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht9-prove_trivial7-prove2...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:54 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:54 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:54 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:54 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:54 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:54 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:54 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:54 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:54 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht6-prove_trivial2-prove4...</MSG>
<MSG>4:54 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 13 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:54 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht5-prove_trivial2-prove3...</MSG>
<MSG>4:54 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:54 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:54 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>4:54 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>4:54 : foo.A1.B4.C1 (d:6, s:0, sp: 14): checked newly added edge and inferred invariants...</MSG>
<MSG>4:54 : foo.A1.B4.C1 (d:6, s:0, sp: 14): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>4:55 : product-TFG foo.A1.B4.C1: Enumerating correlations for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] starting at L3%19%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:55 : Considering 2 paths to src pc L3%19%bbentry as correlation candidates for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%19%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:55 : Attempting correlation of src pathset L3%19%bbentry=>L3%19%bbentry[mu 0, delta {0,0}] as correlation candidate for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%19%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:55 : Attempting correlation of src pathset L3%19%bbentry=>L3%19%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%19%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:55 : Found 2 feasible correlations for paths to src pc L3%19%bbentry as correlation candidates for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%19%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:55 : product-TFG foo.A1.B4.C1: Found 2 correlations for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] starting at L3%19%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:55 : product-TFG foo.A1.B4.C1 created 2 possibilities in group foo.A1.B4.C1.D...</MSG>
<MSG>4:55 : Chose (for CE propagation) product-TFG foo.A1.B4.C1.D2 (d:6, s:0, sp: 14) from a frontier of size 4...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%19%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%19%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 33 counterexamples (for correlating 7 bv exprs)
            L3%19%bbentry_Lfor.cond1%1%bbentry (C L3%19%bbentry, A (line 4 at column 28))
                L3%19%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 26 counterexamples (for correlating 12 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%19%bbentry=>L3%19%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>4:55 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B4.C1.D2...</MSG>
<MSG>4:55 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B4.C1.D2...</MSG>
<MSG>4:55 : Creating ssa-path for the src-tfg path L3%19%bbentry --> L3%19%bbentry ending at L3%19%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:55 : Adding a CG edge composition using the src path L3%19%bbentry --> L3%19%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:55 : Identifying common alloc-deallocs in the src path L3%19%bbentry --> L3%19%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry
</MSG>
<MSG>4:55 : Identified no common alloc-deallocs in the src path L3%19%bbentry --> L3%19%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:55 : Adding new edge to the product-TFG foo.A1.B4.C1.D2 for fromPC L3%19%bbentry_Lfor.cond1%1%bbentry and toPC L3%19%bbentry_Lfor.cond1%1%bbentry, src path L3%19%bbentry --> L3%19%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>4:55 : foo.A1.B4.C1.D2: Getting alloca-ptrs on edge L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:55 : foo.A1.B4.C1.D2: Found no alloca-ptrs on edge L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:55 : foo.A1.B4.C1.D2: Adding edge L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:55 : foo.A1.B4.C1.D2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>4:55 : foo.A1.B4.C1.D2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>4:55 : foo.A1.B4.C1.D2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>4:58 : foo.A1.B4.C1.D2: Propagated 2 out of 26 counter-examples across edge L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry</MSG>
<MSG>4:59 : foo.A1.B4.C1.D2: Added the 2 propagated CEs at PC L3%19%bbentry_Lfor.cond1%1%bbentry and propagated further.
</MSG>
<MSG>4:59 : foo.A1.B4.C1.D2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>4:59 : foo.A1.B4.C1.D2: Finished executing CG's add edge function...</MSG>
<MSG>4:59 : foo.A1.B4.C1.D2: Computing CG regions after the addition of the edge L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:59 : foo.A1.B4.C1.D2: Done computing CG regions after the addition of the edge L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:59 : Done adding new edge to the product-TFG foo.A1.B4.C1.D2 for fromPC L3%19%bbentry_Lfor.cond1%1%bbentry and toPC L3%19%bbentry_Lfor.cond1%1%bbentry, src path L3%19%bbentry --> L3%19%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>4:59 : Done adding a CG edge composition using the src path L3%19%bbentry --> L3%19%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:59 : Added correlation to the product-TFG foo.A1.B4.C1.D2 (d:6, s:0, sp: 14) and created a correlation entry...</MSG>
<MSG>4:59 : Chose (after CE propagation) product-TFG foo.A1.B4.C1.D2 (d:6, s:0, sp: 14) from a frontier of size 4...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%19%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%19%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry (C L3%19%bbentry => C L3%19%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 33 counterexamples (for correlating 7 bv exprs)
            L3%19%bbentry_Lfor.cond1%1%bbentry (C L3%19%bbentry, A (line 4 at column 28))
                L3%19%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 30 counterexamples (for correlating 12 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%19%bbentry=>L3%19%bbentry[mu 1, delta {1,0}]
<MSG>4:59 : foo.A1.B4.C1.D2: Updating invariants over the newly added edges in edge composition L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>4:59 : Constructed infer_invariants_dfa with initial worklist L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:59 : foo.A1.B4.C1.D2: Relaxing dst graph's memlabels for edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:59 : foo.A1.B4.C1.D2: Done relaxing dst graph's memlabels for edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>4:59 : foo.A1.B4.C1.D2: Checking well-formedness assertions on outgoing edges from L3%19%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>5:00 : foo.A1.B4.C1.D2: Relaxing invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>5:00 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:00 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:00 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 12 exprs and 13 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:21 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht10-prove_trivial4-prove10...</MSG>
<MSG>5:21 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:24 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht3-prove_trivial2-prove3...</MSG>
<MSG>5:24 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:24 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove1...</MSG>
<MSG>5:24 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:24 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:24 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:24 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:24 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:24 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:24 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:24 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>5:24 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 7 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:26 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht5-prove_trivial2-prove3...</MSG>
<MSG>5:26 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 13 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:26 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht5-prove_trivial5-prove3...</MSG>
<MSG>5:26 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:26 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:26 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:26 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:26 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 12 exprs and 21 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:27 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht6-prove_trivial4-prove6...</MSG>
<MSG>5:27 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:27 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove2...</MSG>
<MSG>5:27 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:28 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove1...</MSG>
<MSG>5:28 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:28 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:28 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:28 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:28 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:28 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:28 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:28 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>5:28 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 8 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:30 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht4-prove_trivial2-prove2...</MSG>
<MSG>5:30 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 13 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:31 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht5-prove_trivial5-prove3...</MSG>
<MSG>5:31 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:31 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:31 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:31 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:31 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 12 exprs and 21 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:31 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht6-prove_trivial4-prove6...</MSG>
<MSG>5:31 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:32 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove2...</MSG>
<MSG>5:32 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:32 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove1...</MSG>
<MSG>5:32 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:32 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:32 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:32 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:32 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:32 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:32 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:32 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>5:32 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 9 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:32 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial2-prove1...</MSG>
<MSG>5:32 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 13 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:32 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht5-prove_trivial5-prove3...</MSG>
<MSG>5:32 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:32 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:32 : foo.A1.B4.C1.D2: Done relaxing invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: changed ...</MSG>
<MSG>5:32 : foo.A1.B4.C1.D2: Done relaxing memlabels and invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>5:32 : foo.A1.B4.C1.D2: Relaxing dst graph's memlabels for edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>5:32 : foo.A1.B4.C1.D2: Done relaxing dst graph's memlabels for edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>5:32 : foo.A1.B4.C1.D2: Checking well-formedness assertions on outgoing edges from L3%19%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>5:33 : foo.A1.B4.C1.D2: Relaxing invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>5:33 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:33 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:33 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 12 exprs and 21 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:33 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht6-prove_trivial4-prove6...</MSG>
<MSG>5:33 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:33 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove2...</MSG>
<MSG>5:33 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:33 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove1...</MSG>
<MSG>5:33 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:33 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:33 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:33 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:33 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:33 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:33 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:33 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>5:33 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 9 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:33 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial2-prove1...</MSG>
<MSG>5:33 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 13 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:33 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht5-prove_trivial5-prove3...</MSG>
<MSG>5:33 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:33 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:33 : foo.A1.B4.C1.D2: Done relaxing invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>5:33 : foo.A1.B4.C1.D2: Done relaxing memlabels and invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>5:33 : foo.A1.B4.C1.D2: Relaxing dst graph's memlabels for edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>5:33 : foo.A1.B4.C1.D2: Done relaxing dst graph's memlabels for edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>5:33 : foo.A1.B4.C1.D2: Checking well-formedness assertions on outgoing edges from L3%19%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>5:33 : foo.A1.B4.C1.D2: Relaxing invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>5:33 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:33 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:33 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 10 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:33 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial2-prove1...</MSG>
<MSG>5:33 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:33 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:33 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:33 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:33 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:33 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:33 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:33 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:33 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:33 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>5:33 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:33 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>5:33 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:33 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:33 : foo.A1.B4.C1.D2: Done relaxing invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged ...</MSG>
<MSG>5:33 : foo.A1.B4.C1.D2: Done relaxing memlabels and invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>5:33 : foo.A1.B4.C1.D2: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>5:33 : foo.A1.B4.C1.D2: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>5:33 : foo.A1.B4.C1.D2: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>5:33 : foo.A1.B4.C1.D2: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>5:33 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:33 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:33 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 12 exprs and 21 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:34 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht6-prove_trivial4-prove2...</MSG>
<MSG>5:34 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:34 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>5:34 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:34 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>5:34 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:34 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>5:34 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:34 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:34 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:34 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>5:34 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:34 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>5:34 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 9 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:34 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial2-prove1...</MSG>
<MSG>5:34 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 13 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:34 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht5-prove_trivial2-prove3...</MSG>
<MSG>5:34 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:34 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:34 : foo.A1.B4.C1.D2: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>5:34 : foo.A1.B4.C1.D2: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>5:34 : foo.A1.B4.C1.D2: Relaxing dst graph's memlabels for edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>5:34 : foo.A1.B4.C1.D2: Done relaxing dst graph's memlabels for edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>5:34 : foo.A1.B4.C1.D2: Checking well-formedness assertions on outgoing edges from L3%19%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>5:34 : foo.A1.B4.C1.D2: Relaxing invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>5:34 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:34 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:34 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 10 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:34 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial2-prove1...</MSG>
<MSG>5:34 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:34 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:34 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:34 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:34 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:34 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:34 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:34 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:34 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:34 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>5:34 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:34 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>5:34 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:34 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:34 : foo.A1.B4.C1.D2: Done relaxing invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged ...</MSG>
<MSG>5:34 : foo.A1.B4.C1.D2: Done relaxing memlabels and invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>5:34 : foo.A1.B4.C1.D2 (d:6, s:0, sp: 14): checked newly added edge and inferred invariants...</MSG>
<MSG>5:34 : foo.A1.B4.C1.D2 (d:6, s:0, sp: 14): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>5:35 : product-TFG foo.A1.B4.C1.D2: Enumerating correlations for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] starting at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>5:35 : Considering 1 paths to src pc E0%0%d as correlation candidates for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>5:35 : Attempting correlation of src pathset L3%7%bbentry=>E0%0%d[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>5:35 : Found 1 feasible correlations for paths to src pc E0%0%d as correlation candidates for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>5:35 : product-TFG foo.A1.B4.C1.D2: Found 1 correlations for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] starting at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>5:35 : product-TFG foo.A1.B4.C1.D2 created 1 possibilities in group foo.A1.B4.C1.D2.E...</MSG>
<MSG>5:35 : Chose (for CE propagation) product-TFG foo.A1.B4.C1.D2.E1 (d:6, s:0, sp: 14) from a frontier of size 4...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%19%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%19%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry (C L3%19%bbentry => C L3%19%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 40 counterexamples (for correlating 7 bv exprs)
            L3%19%bbentry_Lfor.cond1%1%bbentry (C L3%19%bbentry, A (line 4 at column 28))
                L3%19%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 49 counterexamples (for correlating 12 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>E0%0%d[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>5:35 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B4.C1.D2.E1...</MSG>
<MSG>5:35 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B4.C1.D2.E1...</MSG>
<MSG>5:35 : Creating ssa-path for the src-tfg path L3%7%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>5:35 : Adding a CG edge composition using the src path L3%7%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
<MSG>5:35 : Identifying common alloc-deallocs in the src path L3%7%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d
</MSG>
<MSG>5:35 : Identified no common alloc-deallocs in the src path L3%7%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
<MSG>5:35 : Adding new edge to the product-TFG foo.A1.B4.C1.D2.E1 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC E0%0%d_E0%0%d, src path L3%7%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d...</MSG>
<MSG>5:35 : foo.A1.B4.C1.D2.E1: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>5:35 : foo.A1.B4.C1.D2.E1: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>5:35 : foo.A1.B4.C1.D2.E1: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>5:35 : foo.A1.B4.C1.D2.E1: Getting alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>5:35 : foo.A1.B4.C1.D2.E1: Found no alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>5:35 : foo.A1.B4.C1.D2.E1: Adding edge L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>5:35 : foo.A1.B4.C1.D2.E1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>5:35 : foo.A1.B4.C1.D2.E1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>5:35 : foo.A1.B4.C1.D2.E1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>5:37 : foo.A1.B4.C1.D2.E1: Propagated 10 out of 28 counter-examples across edge L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d</MSG>
<MSG>5:37 : foo.A1.B4.C1.D2.E1: Added the 10 propagated CEs at PC E0%0%d_E0%0%d and propagated further.
</MSG>
<MSG>5:37 : foo.A1.B4.C1.D2.E1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>5:37 : foo.A1.B4.C1.D2.E1: Finished executing CG's add edge function...</MSG>
<MSG>5:37 : foo.A1.B4.C1.D2.E1: Computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>5:37 : foo.A1.B4.C1.D2.E1: Done computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>5:37 : Done adding new edge to the product-TFG foo.A1.B4.C1.D2.E1 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC E0%0%d_E0%0%d, src path L3%7%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d...</MSG>
<MSG>5:37 : Done adding a CG edge composition using the src path L3%7%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
<MSG>5:37 : Added correlation to the product-TFG foo.A1.B4.C1.D2.E1 (d:6, s:0, sp: 14) and created a correlation entry...</MSG>
<MSG>5:37 : Chose (after CE propagation) product-TFG foo.A1.B4.C1.D2.E1 (d:6, s:0, sp: 14) from a frontier of size 4...</MSG>
<cg>
  Edges[5]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%19%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%19%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry (C L3%19%bbentry => C L3%19%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%7%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 3 at column 26) => A E0%0%d at mu 1 delta {1,0})
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 40 counterexamples (for correlating 7 bv exprs)
            L3%19%bbentry_Lfor.cond1%1%bbentry (C L3%19%bbentry, A (line 4 at column 28))
                L3%19%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 49 counterexamples (for correlating 12 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 7 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>E0%0%d[mu 1, delta {1,0}]
<MSG>5:37 : foo.A1.B4.C1.D2.E1: Updating invariants over the newly added edges in edge composition L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d and other downstream edges that change due to it...</MSG>
<MSG>5:37 : Constructed infer_invariants_dfa with initial worklist L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>5:37 : foo.A1.B4.C1.D2.E1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d) ...</MSG>
<MSG>5:37 : foo.A1.B4.C1.D2.E1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d), result: unchanged</MSG>
<MSG>5:37 : foo.A1.B4.C1.D2.E1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>5:37 : foo.A1.B4.C1.D2.E1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d), result: unchanged( 0, 0 ) ...</MSG>
<MSG>5:37 : foo.A1.B4.C1.D2.E1 (d:6, s:0, sp: 14): checked newly added edge and inferred invariants...</MSG>
<MSG>5:37 : foo.A1.B4.C1.D2.E1 (d:6, s:0, sp: 14): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>5:37 : Chosen product-TFG represents our required correlation graph...</MSG>
<MSG>5:37 : Checking equivalence proof...</MSG>
<MSG>5:38 : Equivalence check passed: product CFG has strong enough inductive invariants...</MSG>
CG invariants =
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%7%bbentry_Lfor.cond%1%bbentry: (d:3, s:0, sp: 5)
  Invariant state (9 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin))) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1362
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-i-0.L3%7%bbentry ; 3-->input.spec-%var-x-1.L3%7%bbentry ; 4-->input.dst.llvm-%n ; 5-->input.dst.llvm-%m ; 6-->input.dst.llvm-%arr ; 7-->input.dst.llvm-%x.0.Lfor.cond%1%bbentry ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvneg(bvmul(4294967295, input.spec-%var-i-0.L3%7%bbentry))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(4294967295, input.spec-%var-x-1.L3%7%bbentry))  ==  input.dst.llvm-%x.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr, 1, 0)
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3.ce1362      1.:z3.ce1410      2.:z3v487.ce1387      3.:z3.ce1386      4.:z3v487.ce1411      5.:z3v487.ce1434      6.:z3v487.ce1458      7.:z3v487.ce4932      8.:z3.ce6303      9.:z3.ce6514
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%7%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce1362      1.:z3v487.ce4932      2.:z3v487.ce5312      3.:z3v487.ce5427      4.:z3v487.ce5527      5.:z3v487.ce5686      6.:z3v487.ce5801
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce1362      1.:z3v487.ce1482      2.:z3.ce1435      3.:z3v487.ce1434      4.:z3v487.ce1506
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%m, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%m ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1362      1.:z3.ce1386      2.:z3.ce1530      3.:z3v487.ce1554
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce1362      1.:z3v487.ce4932      2.:z3v487.ce5312      3.:z3v487.ce5427      4.:z3v487.ce5527      5.:z3v487.ce5686      6.:z3v487.ce5801
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [24]: 9-->bvslt(input.dst.llvm-%n, input.dst.llvm-%m) ; 10-->bvult(input.dst.llvm-%n, input.dst.llvm-%m) ; 11-->bvslt(input.dst.llvm-%m, input.dst.llvm-%n) ; 12-->bvult(input.dst.llvm-%m, input.dst.llvm-%n) ; 13-->bvsle(input.dst.llvm-%n, input.dst.llvm-%m) ; 14-->bvule(input.dst.llvm-%n, input.dst.llvm-%m) ; 15-->bvsle(input.dst.llvm-%m, input.dst.llvm-%n) ; 16-->bvule(input.dst.llvm-%m, input.dst.llvm-%n) ; 17-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 18-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 19-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 20-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 21-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 22-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 23-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 24-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 25-->bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 26-->bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 27-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m) ; 28-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m) ; 29-->bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 30-->bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 31-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m) ; 32-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3.ce1362      1.:z3.ce1386      2.:z3v487.ce1482      3.:z3v487.ce1434      4.:z3.ce1530      5.:z3v487.ce4932
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [6]: 33-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141382](input.spec-%var-a-1, map[141381](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141380](Lambda3Var, map[141379](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141378](Lambda2Var, select[141377](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141376](bvmul(Lambda2Var, 4), select[141375](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 34-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142309](input.spec-%var-a-0.L3%7%bbentry, map[141381](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141380](Lambda3Var, map[141379](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141378](Lambda2Var, select[141377](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141376](bvmul(Lambda2Var, 4), select[141375](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 35-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142314](input.spec-%var-a-0.L3%7%bbentry, map[142313](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%x.0.Lfor.cond%1%bbentry))), lambda[141380](Lambda3Var, map[141379](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141378](Lambda2Var, select[141377](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141376](bvmul(Lambda2Var, 4), select[141375](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 36-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142316](input.spec-%var-a-0.L3%7%bbentry, map[142315](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%m))), lambda[141380](Lambda3Var, map[141379](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141378](Lambda2Var, select[141377](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141376](bvmul(Lambda2Var, 4), select[141375](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 37-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142321](input.spec-%var-a-0.L3%7%bbentry, map[142320](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%arr))), lambda[141380](Lambda3Var, map[141379](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141378](Lambda2Var, select[141377](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141376](bvmul(Lambda2Var, 4), select[141375](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 38-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142326](input.spec-%var-a-0.L3%7%bbentry, map[142325](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda[141380](Lambda3Var, map[141379](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141378](Lambda2Var, select[141377](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141376](bvmul(Lambda2Var, 4), select[141375](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 
    2 preds:
      0.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142309](input.spec-%var-a-0.L3%7%bbentry, map[141381](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141380](Lambda3Var, map[141379](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141378](Lambda2Var, select[141377](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141376](bvmul(Lambda2Var, 4), select[141375](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      1.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141382](input.spec-%var-a-1, map[141381](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141380](Lambda3Var, map[141379](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141378](Lambda2Var, select[141377](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141376](bvmul(Lambda2Var, 4), select[141375](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1362
    eqclass 8:
    smallest point cover name local-sizes-are-equal, type HOUDINI, exprs [0]: 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1362

L3%19%bbentry_Lfor.cond1%1%bbentry: (d:3, s:0, sp: 9)
  Invariant state (11 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin))) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce1434
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [12]: 2-->input.spec-%var-i-0.L3%7%bbentry ; 3-->input.spec-%var-x-1.L3%7%bbentry ; 4-->input.dst.llvm-%n ; 5-->input.dst.llvm-%m ; 6-->input.dst.llvm-%arr ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 39-->input.spec-%var-j-0.L3%19%bbentry ; 40-->input.spec-%var-x-0.L3%19%bbentry ; 41-->input.spec-%tmpvar-9.L3%19%bbentry ; 42-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 43-->input.dst.llvm-%j.0.Lfor.cond1%1%bbentry ; 44-->input.dst.llvm-%x.1.Lfor.cond1%1%bbentry ; 
    6 preds:
      0.: bvneg(bvmul(4294967295, input.spec-%var-x-0.L3%19%bbentry))  ==  input.dst.llvm-%x.1.Lfor.cond1%1%bbentry
      1.: bvneg(bvmul(4294967295, input.spec-%var-j-0.L3%19%bbentry))  ==  input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
      2.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      3.: bvadd(1, bvneg(bvmul(4294967295, input.spec-%var-i-0.L3%7%bbentry)))  ==  input.spec-%tmpvar-9.L3%19%bbentry
      4.: bvneg(bvmul(4294967295, input.spec-%var-i-0.L3%7%bbentry))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      5.: 0                     ==  bvextract(input.dst.llvm-%arr, 1, 0)
     is_assumed_eqclass : 0
    21 visited ces:
      0.:z3.ce1435      1.:z3v487.ce1434      2.:z3v487.ce1458      3.:z3v487.ce1554      4.:z3v487.ce3484      5.:z3.ce3444      6.:z3v487.ce3364      7.:z3.ce3524      8.:z3.ce3485      9.:z3.ce3365      10.:z3v487.ce3404      11.:z3v487.ce5036      12.:z3.ce6006      13.:z3v487.ce6083      14.:z3.ce6133      15.:z3.ce6247      16.:z3v487.ce6248      17.:z3.ce6324      18.:z3v487.ce6379      19.:z3.ce6418      20.:z3.ce6456
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 39-->input.spec-%var-j-0.L3%19%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-j-0.L3%19%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-j-0.L3%19%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce1434      1.:z3.ce6006      2.:z3v487.ce6134      3.:z3.ce6577
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 41-->input.spec-%tmpvar-9.L3%19%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%tmpvar-9.L3%19%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3v487.ce1434      1.:z3v487.ce5036      2.:z3v487.ce5377      3.:z3v487.ce5458      4.:z3v487.ce5592      5.:z3.ce5751
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%n ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3v487.ce1482      1.:z3.ce1435      2.:z3v487.ce1434      3.:z3v487.ce1458      4.:z3v487.ce1506
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%m, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%m ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce1434      1.:z3v487.ce1554      2.:z3.ce3564      3.:z3v487.ce3404
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3v487.ce1434      1.:z3v487.ce5036      2.:z3v487.ce5071      3.:z3v487.ce5458      4.:z3v487.ce5481      5.:z3v487.ce5625
    eqclass 7:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, type BV_CONST_INEQ, exprs [1]: 43-->input.dst.llvm-%j.0.Lfor.cond1%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce1434      1.:z3.ce6006      2.:z3v487.ce6134      3.:z3.ce6577
    eqclass 8:
    smallest point cover name dst-ineq, type HOUDINI, exprs [48]: 9-->bvslt(input.dst.llvm-%n, input.dst.llvm-%m) ; 10-->bvult(input.dst.llvm-%n, input.dst.llvm-%m) ; 11-->bvslt(input.dst.llvm-%m, input.dst.llvm-%n) ; 12-->bvult(input.dst.llvm-%m, input.dst.llvm-%n) ; 13-->bvsle(input.dst.llvm-%n, input.dst.llvm-%m) ; 14-->bvule(input.dst.llvm-%n, input.dst.llvm-%m) ; 15-->bvsle(input.dst.llvm-%m, input.dst.llvm-%n) ; 16-->bvule(input.dst.llvm-%m, input.dst.llvm-%n) ; 17-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 18-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 19-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 20-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 21-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 22-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 23-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 24-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 25-->bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 26-->bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 27-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m) ; 28-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m) ; 29-->bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 30-->bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 31-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m) ; 32-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m) ; 45-->bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 46-->bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 47-->bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n) ; 48-->bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n) ; 49-->bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 50-->bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 51-->bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n) ; 52-->bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n) ; 53-->bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 54-->bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 55-->bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m) ; 56-->bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m) ; 57-->bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 58-->bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 59-->bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m) ; 60-->bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m) ; 61-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 62-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 63-->bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 64-->bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 65-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 66-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 67-->bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 68-->bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    3 preds:
      0.: bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)  ==  true
      1.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
      2.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3v487.ce1482      1.:z3v487.ce1434      2.:z3v487.ce1554      3.:z3v487.ce3404      4.:z3v487.ce5036      5.:z3v487.ce5625      6.:z3.ce6006      7.:z3.ce6653      8.:z3.ce6729
    eqclass 9:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 33-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141382](input.spec-%var-a-1, map[141381](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141380](Lambda3Var, map[141379](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141378](Lambda2Var, select[141377](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141376](bvmul(Lambda2Var, 4), select[141375](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 34-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142309](input.spec-%var-a-0.L3%7%bbentry, map[141381](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141380](Lambda3Var, map[141379](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141378](Lambda2Var, select[141377](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141376](bvmul(Lambda2Var, 4), select[141375](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 36-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142316](input.spec-%var-a-0.L3%7%bbentry, map[142315](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%m))), lambda[141380](Lambda3Var, map[141379](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141378](Lambda2Var, select[141377](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141376](bvmul(Lambda2Var, 4), select[141375](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 37-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142321](input.spec-%var-a-0.L3%7%bbentry, map[142320](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%arr))), lambda[141380](Lambda3Var, map[141379](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141378](Lambda2Var, select[141377](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141376](bvmul(Lambda2Var, 4), select[141375](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 38-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142326](input.spec-%var-a-0.L3%7%bbentry, map[142325](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda[141380](Lambda3Var, map[141379](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141378](Lambda2Var, select[141377](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141376](bvmul(Lambda2Var, 4), select[141375](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 69-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[157169](input.spec-%var-a-1, map[142320](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%arr))), lambda[141380](Lambda3Var, map[141379](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141378](Lambda2Var, select[141377](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141376](bvmul(Lambda2Var, 4), select[141375](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 70-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[157791](input.spec-%var-a-1, map[142315](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%m))), lambda[141380](Lambda3Var, map[141379](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141378](Lambda2Var, select[141377](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141376](bvmul(Lambda2Var, 4), select[141375](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 71-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[163135](input.spec-%var-a-0.L3%7%bbentry, map[163134](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry))), lambda[141380](Lambda3Var, map[141379](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141378](Lambda2Var, select[141377](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141376](bvmul(Lambda2Var, 4), select[141375](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 72-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[163137](input.spec-%tmpvar-7.L3%8%d, map_get[163136](map[141381](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141380](Lambda3Var, map[141379](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141378](Lambda2Var, select[141377](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141376](bvmul(Lambda2Var, 4), select[141375](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))), input.spec-%var-i-0.L3%7%bbentry)) ; 73-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[163138](input.spec-%var-a-1, map[142325](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda[141380](Lambda3Var, map[141379](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141378](Lambda2Var, select[141377](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141376](bvmul(Lambda2Var, 4), select[141375](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 74-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[163139](input.spec-%var-a-1, map[163134](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry))), lambda[141380](Lambda3Var, map[141379](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141378](Lambda2Var, select[141377](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141376](bvmul(Lambda2Var, 4), select[141375](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 75-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[163158](input.spec-%var-a_i-0.L3%19%bbentry, sum_get[163157](map_get[163136](map[141381](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141380](Lambda3Var, map[141379](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141378](Lambda2Var, select[141377](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141376](bvmul(Lambda2Var, 4), select[141375](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))), input.spec-%var-i-0.L3%7%bbentry), 1)) ; 76-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[163160](input.spec-%var-a_i-1.L3%19%bbentry, sum_get[163157](map_get[163136](map[141381](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141380](Lambda3Var, map[141379](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141378](Lambda2Var, select[141377](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141376](bvmul(Lambda2Var, 4), select[141375](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))), input.spec-%var-i-0.L3%7%bbentry), 1)) ; 
    5 preds:
      0.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[163160](input.spec-%var-a_i-1.L3%19%bbentry, sum_get[163157](map_get[163136](map[141381](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141380](Lambda3Var, map[141379](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141378](Lambda2Var, select[141377](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141376](bvmul(Lambda2Var, 4), select[141375](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))), input.spec-%var-i-0.L3%7%bbentry), 1))  ==  true
      1.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142309](input.spec-%var-a-0.L3%7%bbentry, map[141381](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141380](Lambda3Var, map[141379](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141378](Lambda2Var, select[141377](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141376](bvmul(Lambda2Var, 4), select[141375](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      2.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141382](input.spec-%var-a-1, map[141381](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141380](Lambda3Var, map[141379](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141378](Lambda2Var, select[141377](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141376](bvmul(Lambda2Var, 4), select[141375](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      3.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[163137](input.spec-%tmpvar-7.L3%8%d, map_get[163136](map[141381](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141380](Lambda3Var, map[141379](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141378](Lambda2Var, select[141377](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141376](bvmul(Lambda2Var, 4), select[141375](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))), input.spec-%var-i-0.L3%7%bbentry))  ==  true
      4.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[163158](input.spec-%var-a_i-0.L3%19%bbentry, sum_get[163157](map_get[163136](map[141381](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141380](Lambda3Var, map[141379](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141378](Lambda2Var, select[141377](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141376](bvmul(Lambda2Var, 4), select[141375](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))), input.spec-%var-i-0.L3%7%bbentry), 1))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce1434
    eqclass 10:
    smallest point cover name local-sizes-are-equal, type HOUDINI, exprs [0]: 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce1434

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


Found equivalence proof. Final CG:
<cg>
  Edges[5]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%19%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%19%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry (C L3%19%bbentry => C L3%19%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%7%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 3 at column 26) => A E0%0%d at mu 1 delta {1,0})
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 40 counterexamples (for correlating 7 bv exprs)
            L3%19%bbentry_Lfor.cond1%1%bbentry (C L3%19%bbentry, A (line 4 at column 28))
                L3%19%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 49 counterexamples (for correlating 12 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 7 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
EQUIV equivalence check for function foo. 105.56s, query:smt.: 24.1376s (num_starts 297; 0.0813s/start), decide_hoare_triple.ce.: 0s (num_starts 0; -nans/start), decide_hoare_triple_helper.: 53.7801s (num_starts 1015; 0.0530s/start)ftmap_run_pointsto_analysis.: 0.39459s (num_starts 2; 0.1973s/start)

Printing statistics:

timers:
decide_hoare_triple.ce.: 0s (num_starts 0; -nans/start)
compute_loop_hoisting_non_linear_exprs_at_pcpair.: 8e-06s (num_starts 8; 0.0000s/start)
update_dst_edge_for_local_allocations_and_deallocations.: 1.6e-05s (num_starts 13; 0.0000s/start)
compute_tfg_pred_eqclass.: 1.7e-05s (num_starts 7; 0.0000s/start)
invariant_inference_xfer.local-sizes-are-equal.from.L0%0%d_L0%0%d.: 1.7e-05s (num_starts 2; 0.0000s/start)
cg_compute_well_formedness_conditions_for_stack_pointer.: 2.4e-05s (num_starts 13; 0.0000s/start)
get_paths_with_matching_to_pc.: 3.1e-05s (num_starts 13; 0.0000s/start)
prune_dst_memslots.: 3.1e-05s (num_starts 7; 0.0000s/start)
check_wfconds_on_edge.L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry.: 3.9e-05s (num_starts 1; 0.0000s/start)
get_intersected_lr_status.: 4e-05s (num_starts 2; 0.0000s/start)
invariant_inference_xfer.local-sizes-are-equal.from.L3%11%bbentry_Lfor.cond1%1%bbentry.: 4.6e-05s (num_starts 5; 0.0000s/start)
corr_graph_update_dst_to_src_submaps_for_cg_edge.: 5.7e-05s (num_starts 52; 0.0000s/start)
alias_val_t::constructor_with_map_arg.: 6.3e-05s (num_starts 101; 0.0000s/start)
determinize_value_expr_map.: 7.5e-05s (num_starts 33; 0.0000s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%11%bbentry_Lfor.cond1%1%bbentry.: 7.7e-05s (num_starts 5; 0.0000s/start)
tfg::populate_loc_definedness.set_loc_definedness().: 7.8e-05s (num_starts 3; 0.0000s/start)
corr_graph_add_correlation_and_create_new_correl_entry.after_corr_graph_add_correlation.: 8e-05s (num_starts 9; 0.0000s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%11%bbentry_Lfor.cond1%1%bbentry.: 8.4e-05s (num_starts 5; 0.0000s/start)
graph_edge_contains_unknown_function_call.: 9.8e-05s (num_starts 109; 0.0000s/start)
check_wfconds_on_edge.L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry.: 0.000123s (num_starts 3; 0.0000s/start)
ce_perform_memory_fuzzing.: 0.00013s (num_starts 187; 0.0000s/start)
remove_complex_bv_exprs.: 0.000132s (num_starts 7; 0.0000s/start)
populate_lr_status_for_sprel_locs_map.calling.compute_lr_status_for_expr.: 0.000143s (num_starts 11; 0.0000s/start)
get_lr_status_for_loc_ids.: 0.000146s (num_starts 60; 0.0000s/start)
select_llvmvars_not_defined_on_from_pc_and_add_to_dst.: 0.000146s (num_starts 7; 0.0000s/start)
invariant_inference_xfer.local-sizes-are-equal.from.L3%19%bbentry_Lfor.cond1%1%bbentry.: 0.000171s (num_starts 14; 0.0000s/start)
src_tfg_counter_example_translate_on_edge_composition.delta{0,0}.: 0.000171s (num_starts 57; 0.0000s/start)
compute_sprel_relations.: 0.000178s (num_starts 2; 0.0001s/start)
propagate_sprels.: 0.000188s (num_starts 2; 0.0001s/start)
tfg::populate_loc_definedness.post_dfa.: 0.000188s (num_starts 3; 0.0001s/start)
invariant_inference_xfer.local-sizes-are-equal.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 0.000218s (num_starts 18; 0.0000s/start)
populate_locid2expr_map.: 0.000223s (num_starts 2; 0.0001s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%19%bbentry_Lfor.cond1%1%bbentry.: 0.000252s (num_starts 14; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.post_dfa.: 0.000277s (num_starts 1; 0.0003s/start)
graph_locs_add_exvregs_for_edge.: 0.0003s (num_starts 22; 0.0000s/start)
graph_locs_add_all_exvregs.: 0.000313s (num_starts 2; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.00032s (num_starts 1; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;outgoing_edges_cover_all_possibilities.;-trivial.: 0.00032s (num_starts 1; 0.0003s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.00032s (num_starts 1; 0.0003s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities.;-trivial.: 0.00032s (num_starts 1; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities..: 0.000322s (num_starts 1; 0.0003s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon);-trivial.: 0.00033s (num_starts 1; 0.0003s/start)
lr_status_meet.: 0.000333s (num_starts 506; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities..: 0.000338s (num_starts 1; 0.0003s/start)
graph_locs_add_local_vars_for_edge.: 0.000368s (num_starts 22; 0.0000s/start)
tfg_llvm_t::tfg_llvm_fill_remaining_llvm_to_source_mappings_using_avail_exprs.: 0.000368s (num_starts 1; 0.0004s/start)
expr_is_hidden_reg.: 0.000381s (num_starts 569; 0.0000s/start)
graph_locs_add_all_local_vars.: 0.000384s (num_starts 2; 0.0002s/start)
sp_version_relations_val_t::meet.: 0.0004s (num_starts 1044; 0.0000s/start)
select_llvmvars_live_at_pc_and_add_to_dst.: 0.000447s (num_starts 7; 0.0001s/start)
def_analysis::xfer_and_meet.: 0.000464s (num_starts 33; 0.0000s/start)
expr_is_callee_save_const.: 0.000478s (num_starts 581; 0.0000s/start)
populate_dominator_and_postdominator_relations.: 0.000511s (num_starts 2; 0.0003s/start)
prove_trivial.: 0.000512s (num_starts 567; 0.0000s/start)
corr_graph_generate_local_sprel_expr_guesses_for_locals.: 0.000518s (num_starts 16; 0.0000s/start)
tfg::collect_assumes_around_edge.: 0.00052s (num_starts 55; 0.0000s/start)
get_sprel_map_pair.: 0.00055s (num_starts 60; 0.0000s/start)
expr_simplify_using_sprel_and_memlabel_maps.sprel.: 0.000901s (num_starts 137; 0.0000s/start)
populate_simplified_to_state.: 0.000936s (num_starts 3; 0.0003s/start)
graph_locs_add_all_llvmvars.: 0.000978s (num_starts 2; 0.0005s/start)
sort_exprs_and_compute_bv_eqclass.: 0.001027s (num_starts 7; 0.0001s/start)
graph_locs_add_all_specvars.: 0.001045s (num_starts 2; 0.0005s/start)
tfg_llvm_t::tfg_llvm_populate_varname_lr_status.: 0.001068s (num_starts 1; 0.0011s/start)
compute_bv_bool_eqclass.: 0.001085s (num_starts 7; 0.0002s/start)
sp_version_relations_val_t::compute_transitive_closure.: 0.001154s (num_starts 138; 0.0000s/start)
graph_ec_apply_trans_funs_helper.1.: 0.001213s (num_starts 9; 0.0001s/start)
rdefs_locs_ssa_analysis::xfer_and_meet.: 0.001435s (num_starts 23; 0.0001s/start)
get_path_wp_exprs_for_cg_invariant_inference.computeWP_for_pred_across_ec.: 0.00144s (num_starts 9; 0.0002s/start)
interesting_wp_exprs_apply_trans_funs.: 0.001478s (num_starts 9; 0.0002s/start)
pred_lhs_rhs_convert_memmask_to_select_for_symbols_and_locals.: 0.001518s (num_starts 1065; 0.0000s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.bvcover_weaken_till_arity_within_bound.: 0.001538s (num_starts 236; 0.0000s/start)
tfg::populate_loc_definedness.before_solve.: 0.001657s (num_starts 3; 0.0006s/start)
pth_collect_preds_using_atom_func_and_wp_fn.operator().graph_ec_apply_trans_funs_using_wp_fn.: 0.001698s (num_starts 11; 0.0002s/start)
parse_yices_model.: 0.001787s (num_starts 1; 0.0018s/start)
identify_address_taken_local_variables.: 0.001892s (num_starts 1; 0.0019s/start)
tfg::populate_loc_definedness.before_initialize.: 0.001987s (num_starts 3; 0.0007s/start)
generate_region_agrees_with_memlabel_constraints_from_expr.: 0.001989s (num_starts 360; 0.0000s/start)
get_path_wp_exprs_for_cg_invariant_inference.: 0.001995s (num_starts 7; 0.0003s/start)
collect_dst_to_src_submap_preds.: 0.00208s (num_starts 1015; 0.0000s/start)
tfg::populate_loc_definedness.: 0.002094s (num_starts 3; 0.0007s/start)
ssa_vars_renaming_analysis::xfer_and_meet.: 0.002166s (num_starts 46; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.002207s (num_starts 1; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.00221s (num_starts 1; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.002212s (num_starts 1; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.002216s (num_starts 1; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;abstract-memlabel-asserts-houdini-guess.: 0.002218s (num_starts 1; 0.0022s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.002224s (num_starts 1; 0.0022s/start)
expr_contains_only_constants_or_sp_versions_or_count_sort_vars.: 0.002228s (num_starts 1053; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_solve.: 0.002249s (num_starts 1; 0.0022s/start)
tfg_suffixpath_get_expr_helper.: 0.002273s (num_starts 20; 0.0001s/start)
pth_collect_preds_using_atom_func.: 0.002316s (num_starts 97; 0.0000s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_expr_is_provable.: 0.002348s (num_starts 498; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_initialize.: 0.002381s (num_starts 1; 0.0024s/start)
graph_get_reduced_graph_with_anchor_nodes_only.: 0.002415s (num_starts 11; 0.0002s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.002425s (num_starts 4; 0.0006s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;lb-signed;-trivial.: 0.002434s (num_starts 4; 0.0006s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.002436s (num_starts 4; 0.0006s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.: 0.002451s (num_starts 1; 0.0025s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.002503s (num_starts 4; 0.0006s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;ub-signed;-trivial.: 0.002511s (num_starts 4; 0.0006s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.002517s (num_starts 4; 0.0006s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed.: 0.002529s (num_starts 4; 0.0006s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;ub-signed.: 0.002536s (num_starts 4; 0.0006s/start)
tfg_llvm_t::tfg_llvm_compute_pc_to_llvm_to_source_varname_map.: 0.002546s (num_starts 2; 0.0013s/start)
create_closure_matrix.: 0.00255s (num_starts 192; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed.: 0.002552s (num_starts 4; 0.0006s/start)
graph_add_location_slots_using_state_mem_acc_map.: 0.002634s (num_starts 69; 0.0000s/start)
cg_with_asm_annotation::mark_graph_unstable.: 0.002693s (num_starts 4; 0.0007s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.002759s (num_starts 4; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;ub-unsigned;-trivial.: 0.002773s (num_starts 4; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.002776s (num_starts 4; 0.0007s/start)
sp_version_relations_val_t::generate_vals_from_gen_set.: 0.002827s (num_starts 168; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.002907s (num_starts 2; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.002911s (num_starts 2; 0.0015s/start)
tfg_edge_composition_get_assumes.: 0.002929s (num_starts 97; 0.0000s/start)
collect_assumes_around_edge.: 0.002939s (num_starts 13; 0.0002s/start)
populate_simplified_assets.: 0.002952s (num_starts 6; 0.0005s/start)
expr_represents_llvm_undef.: 0.002954s (num_starts 585; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.003032s (num_starts 1; 0.0030s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.003034s (num_starts 1; 0.0030s/start)
removeMostPromising.: 0.003082s (num_starts 36; 0.0001s/start)
graph_apply_trans_funs_on_aliasing_constraints.mem_alloc.computeWP_for_pred_across_ec.: 0.003084s (num_starts 48; 0.0001s/start)
graph_visit_exprs.: 0.003101s (num_starts 3; 0.0010s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.003364s (num_starts 2; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;pred-type-unknown;-trivial.: 0.00337s (num_starts 2; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.003371s (num_starts 2; 0.0017s/start)
find_dominators.: 0.003434s (num_starts 47; 0.0001s/start)
graph_apply_trans_funs_on_aliasing_constraints.guard_pred.computeWP_for_pred_across_ec.: 0.003615s (num_starts 48; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.003628s (num_starts 2; 0.0018s/start)
compute_ssa_vars_renaming_map.: 0.003636s (num_starts 2; 0.0018s/start)
graph_identify_back_edges.: 0.003687s (num_starts 43; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.003905s (num_starts 3; 0.0013s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;lb-signed;-trivial.: 0.003912s (num_starts 3; 0.0013s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.003917s (num_starts 3; 0.0013s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.003923s (num_starts 1; 0.0039s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.003927s (num_starts 1; 0.0039s/start)
get_uapprox_predicate_list_from_guarded_preds_and_graph_ec.: 0.003964s (num_starts 498; 0.0000s/start)
populate_branch_affecting_locs.: 0.003965s (num_starts 3; 0.0013s/start)
graph_apply_trans_funs_on_aliasing_constraints.addr_pred.computeWP_for_pred_across_ec.: 0.003996s (num_starts 48; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-signed;-trivial.: 0.004048s (num_starts 3; 0.0013s/start)
graph_visit_exprs_and_keys.: 0.004054s (num_starts 2; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;ub-signed;-trivial.: 0.004058s (num_starts 3; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-signed;-trivial.: 0.004061s (num_starts 3; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 0.004071s (num_starts 3; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;ub-signed.: 0.004077s (num_starts 3; 0.0014s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 0.004089s (num_starts 3; 0.0014s/start)
proof_query_is_trivial_helper.: 0.004096s (num_starts 1127; 0.0000s/start)
graph_identify_natural_loops.: 0.004136s (num_starts 43; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.004247s (num_starts 3; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;ub-unsigned;-trivial.: 0.004257s (num_starts 3; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.004261s (num_starts 3; 0.0014s/start)
aliasing_constraints.get_region_agrees_with_memlabel_preds.: 0.004371s (num_starts 7; 0.0006s/start)
compute_region_agrees_with_memlabel_eqclass.: 0.004418s (num_starts 7; 0.0006s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.: 0.004469s (num_starts 2; 0.0022s/start)
tfg_edge_composition_get_edge_cond_using_econd_fn.: 0.004515s (num_starts 118; 0.0000s/start)
invariant_inference_xfer.src-branches-const-ineq.from.L0%0%d_L0%0%d.: 0.004518s (num_starts 2; 0.0023s/start)
aliasing_constraints.get_region_agrees_with_memlabel_exprs.: 0.00452s (num_starts 367; 0.0000s/start)
expr_simplify_using_sprel_and_memlabel_maps.model.: 0.004594s (num_starts 137; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.005245s (num_starts 2; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.005249s (num_starts 2; 0.0026s/start)
populate_locs_potentially_modified_on_edge.: 0.005401s (num_starts 3; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.005444s (num_starts 1; 0.0054s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.005449s (num_starts 1; 0.0054s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.005578s (num_starts 2; 0.0028s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.005587s (num_starts 2; 0.0028s/start)
corr_graph_enumerate_correlations.: 0.00564s (num_starts 13; 0.0004s/start)
collect_aliasing_constaints_starting_at_pc_till_maximal_bbs.: 0.006019s (num_starts 34; 0.0002s/start)
set_result_and_counter_example.: 0.00605s (num_starts 297; 0.0000s/start)
compute_interesting_exprs_for_invariant_inference_for_pc.: 0.006083s (num_starts 6; 0.0010s/start)
get_maximal_basic_block_edge_list_starting_at_pc.: 0.006233s (num_starts 1118; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.006242s (num_starts 1; 0.0062s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.006245s (num_starts 1; 0.0062s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.006414s (num_starts 2; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.006416s (num_starts 2; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.006418s (num_starts 2; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.006425s (num_starts 2; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;abstract-memlabel-asserts-houdini-guess.: 0.006431s (num_starts 2; 0.0032s/start)
expr_simplify_using_sprel_and_memlabel_maps.: 0.006701s (num_starts 137; 0.0000s/start)
rdefs_vars_ssa_analysis::xfer_and_meet.: 0.007529s (num_starts 48; 0.0002s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.008047s (num_starts 6; 0.0013s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;lb-signed;-trivial.: 0.00806s (num_starts 6; 0.0013s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;linear;-trivial.: 0.008064s (num_starts 6; 0.0013s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.008068s (num_starts 6; 0.0013s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.008071s (num_starts 6; 0.0013s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.008086s (num_starts 6; 0.0013s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;lb-signed.: 0.008101s (num_starts 6; 0.0014s/start)
populate_auxilliary_structures_dependent_on_locs.: 0.008366s (num_starts 3; 0.0028s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;ub-signed;-trivial.: 0.008509s (num_starts 6; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);ub-signed;-trivial.: 0.008514s (num_starts 6; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 0.008534s (num_starts 6; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;ub-signed.: 0.008551s (num_starts 6; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;ub-unsigned;-trivial.: 0.008663s (num_starts 6; 0.0014s/start)
get_maximal_basic_block_edge_list_ending_at_pc.: 0.008669s (num_starts 1118; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.008673s (num_starts 6; 0.0014s/start)
compute_vars_reaching_definitions.: 0.008965s (num_starts 2; 0.0045s/start)
populate_transitive_closure.: 0.008976s (num_starts 59; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.009728s (num_starts 2; 0.0049s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.009888s (num_starts 2; 0.0049s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.00989s (num_starts 2; 0.0049s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.009897s (num_starts 2; 0.0049s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;abstract-memlabel-asserts-houdini-guess.: 0.009908s (num_starts 2; 0.0050s/start)
expr_linear_relation_holds::visit.var.: 0.010239s (num_starts 585; 0.0000s/start)
aliasing_constraints.convert_to_expr.: 0.010417s (num_starts 498; 0.0000s/start)
expr_substitute_using_available_exprs_submap.: 0.010582s (num_starts 503; 0.0000s/start)
proof_query_is_trivial.: 0.01085s (num_starts 1065; 0.0000s/start)
compute_regions.: 0.012227s (num_starts 43; 0.0003s/start)
get_unrolled_loop_paths_from.: 0.01225s (num_starts 7; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.012398s (num_starts 3; 0.0041s/start)
populate_memlabel_map.visit1.calling.compute_lr_status_for_expr.: 0.012487s (num_starts 130; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);ub-signed;-trivial.: 0.012659s (num_starts 4; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.012948s (num_starts 2; 0.0065s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.012959s (num_starts 2; 0.0065s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;-dst-edgecond-implies-src-edgecond;-trivial.: 0.013054s (num_starts 1; 0.0131s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.013056s (num_starts 1; 0.0131s/start)
construct_linear_combination_exprs.: 0.013237s (num_starts 662; 0.0000s/start)
segment_memory_and_perform_commonMEM_optimization.: 0.013543s (num_starts 498; 0.0000s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);-trivial.: 0.013634s (num_starts 1; 0.0136s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-trivial.: 0.013636s (num_starts 1; 0.0136s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-trivial.: 0.01364s (num_starts 1; 0.0136s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.013944s (num_starts 1; 0.0139s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.013947s (num_starts 1; 0.0139s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.013949s (num_starts 1; 0.0139s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;lb-unsigned;-trivial.: 0.01417s (num_starts 1; 0.0142s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.014172s (num_starts 1; 0.0142s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;-dst-edgecond-implies-src-edgecond;-trivial.: 0.014452s (num_starts 1; 0.0145s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.014453s (num_starts 1; 0.0145s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.014507s (num_starts 4; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;lb-unsigned;-trivial.: 0.014662s (num_starts 1; 0.0147s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.014665s (num_starts 1; 0.0147s/start)
compute_loop_hoisting_select_exprs_at_pcpair.: 0.014808s (num_starts 8; 0.0019s/start)
graph_with_guessing_sync_preds.: 0.015965s (num_starts 1015; 0.0000s/start)
corr_graph::get_simplified_non_mem_assumes_helper.: 0.016203s (num_starts 557; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.016694s (num_starts 3; 0.0056s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 0.016702s (num_starts 3; 0.0056s/start)
generate_aliasing_constraints_from_expr.: 0.017213s (num_starts 2447; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;linear;-trivial.: 0.017251s (num_starts 9; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.017268s (num_starts 9; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.017331s (num_starts 4; 0.0043s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.017349s (num_starts 4; 0.0043s/start)
corr_graph::get_simplified_non_mem_assumes.: 0.017703s (num_starts 557; 0.0000s/start)
get_next_potential_correlations.: 0.018554s (num_starts 7; 0.0027s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.019185s (num_starts 3; 0.0064s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.019192s (num_starts 3; 0.0064s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.019654s (num_starts 2; 0.0098s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;dst-ineq-houdini-guess;-trivial.: 0.019662s (num_starts 2; 0.0098s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.019667s (num_starts 2; 0.0098s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.019745s (num_starts 5; 0.0039s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;dst-ineq-houdini-guess;-trivial.: 0.019788s (num_starts 5; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.019813s (num_starts 5; 0.0040s/start)
ldr_decomposition.: 0.020343s (num_starts 236; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.020834s (num_starts 11; 0.0019s/start)
do_ssa_transformation.: 0.020951s (num_starts 2; 0.0105s/start)
eqspace::smallest_point_cover_houdini_expects_stability_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.02108s (num_starts 275; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);ub-signed;-trivial.: 0.021128s (num_starts 10; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);false-predicate;-trivial.: 0.022392s (num_starts 1; 0.0224s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);false-predicate.: 0.022402s (num_starts 1; 0.0224s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;false-predicate;-trivial.: 0.022429s (num_starts 1; 0.0224s/start)
decide_hoare_triple_helper;per-query-type;false-predicate;-trivial.: 0.022432s (num_starts 1; 0.0224s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);false-predicate;-trivial.: 0.022433s (num_starts 1; 0.0224s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;false-predicate.: 0.022445s (num_starts 1; 0.0224s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);false-predicate.: 0.022458s (num_starts 1; 0.0225s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.023957s (num_starts 1; 0.0240s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;ub-signed;-trivial.: 0.024014s (num_starts 7; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-signed;-trivial.: 0.024022s (num_starts 7; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;lb-signed;-trivial.: 0.024149s (num_starts 7; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.024159s (num_starts 7; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;-dst-edgecond-implies-src-edgecond;-trivial.: 0.024254s (num_starts 1; 0.0243s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.024257s (num_starts 1; 0.0243s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.024973s (num_starts 1; 0.0250s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.024978s (num_starts 1; 0.0250s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.025631s (num_starts 4; 0.0064s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.025654s (num_starts 4; 0.0064s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.025878s (num_starts 2; 0.0129s/start)
pth_collect_preds_using_atom_func_and_wp_fn.operator().: 0.026013s (num_starts 2348; 0.0000s/start)
create_sp_version_relations_lattice_at_pc.: 0.026065s (num_starts 192; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.026793s (num_starts 4; 0.0067s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.026818s (num_starts 4; 0.0067s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.027192s (num_starts 10; 0.0027s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.027256s (num_starts 10; 0.0027s/start)
avail_exprs_val_t::generate_vals_from_gen_set.: 0.027427s (num_starts 168; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.028079s (num_starts 1; 0.0281s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.028733s (num_starts 2; 0.0144s/start)
graph_to_stream.: 0.028735s (num_starts 4; 0.0072s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.028738s (num_starts 2; 0.0144s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.028822s (num_starts 2; 0.0144s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;pred-type-unknown;-trivial.: 0.029167s (num_starts 5; 0.0058s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.029178s (num_starts 5; 0.0058s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.029569s (num_starts 2; 0.0148s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;-dst-edgecond-implies-src-edgecond;-trivial.: 0.029569s (num_starts 2; 0.0148s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.029577s (num_starts 2; 0.0148s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;-dst-edgecond-implies-src-edgecond.: 0.029586s (num_starts 2; 0.0148s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.029745s (num_starts 3; 0.0099s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 0.029759s (num_starts 3; 0.0099s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%19%bbentry_Lfor.cond1%1%bbentry.: 0.029823s (num_starts 14; 0.0021s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.030035s (num_starts 3; 0.0100s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.03005s (num_starts 3; 0.0100s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.030554s (num_starts 2; 0.0153s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.030563s (num_starts 2; 0.0153s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.031094s (num_starts 5; 0.0062s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.031195s (num_starts 5; 0.0062s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.033899s (num_starts 6; 0.0056s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);linear.: 0.033913s (num_starts 6; 0.0057s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.033987s (num_starts 3; 0.0113s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 0.034002s (num_starts 3; 0.0113s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;linear;-trivial.: 0.034854s (num_starts 13; 0.0027s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.034878s (num_starts 13; 0.0027s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::sp_version_relations_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.034888s (num_starts 168; 0.0002s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.035177s (num_starts 16; 0.0022s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.035521s (num_starts 16; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.035588s (num_starts 3; 0.0119s/start)
bv_const_ref_map2expr_map.: 0.035761s (num_starts 662; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.036694s (num_starts 6; 0.0061s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.036853s (num_starts 6; 0.0061s/start)
compute_new_lr_status_on_locs.calling.compute_lr_status_for_expr.: 0.037495s (num_starts 506; 0.0001s/start)
graph_per_loc_dfa_val_t<avail_exprs_val_t>::meet.: 0.037779s (num_starts 168; 0.0002s/start)
compute_new_lr_status_on_locs.loc_lr_status.simplify_and_compute_lr_status.: 0.038142s (num_starts 506; 0.0001s/start)
tfg::get_aliasing_constraints_for_edge.: 0.039639s (num_starts 559; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;ub-unsigned;-trivial.: 0.039694s (num_starts 8; 0.0050s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.03971s (num_starts 8; 0.0050s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.040024s (num_starts 5; 0.0080s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.040746s (num_starts 2; 0.0204s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.040757s (num_starts 2; 0.0204s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.040947s (num_starts 2; 0.0205s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.04095s (num_starts 2; 0.0205s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.040956s (num_starts 2; 0.0205s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.040962s (num_starts 2; 0.0205s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.041082s (num_starts 10; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.041112s (num_starts 10; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.041173s (num_starts 10; 0.0041s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.041277s (num_starts 10; 0.0041s/start)
liveness_analysis_conservative::xfer_and_meet.: 0.042009s (num_starts 47; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.04213s (num_starts 5; 0.0084s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.042131s (num_starts 5; 0.0084s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.04216s (num_starts 5; 0.0084s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.042237s (num_starts 5; 0.0084s/start)
pth_collect_preds_using_atom_func_and_wp_fn.: 0.042888s (num_starts 1659; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.043109s (num_starts 6; 0.0072s/start)
query:convert_from_z3.: 0.04341s (num_starts 800; 0.0001s/start)
gen_pred_from_coeff_row.simplify.: 0.044126s (num_starts 662; 0.0001s/start)
compute_lr_status_for_expr.: 0.044201s (num_starts 647; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.04484s (num_starts 7; 0.0064s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;abstract-memlabel-asserts-houdini-guess.: 0.044915s (num_starts 7; 0.0064s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L3%11%bbentry_Lfor.cond1%1%bbentry.: 0.04498s (num_starts 5; 0.0090s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);-trivial.: 0.045505s (num_starts 23; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.046673s (num_starts 8; 0.0058s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.046714s (num_starts 8; 0.0058s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.046959s (num_starts 2; 0.0235s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.046969s (num_starts 2; 0.0235s/start)
get_sprel_map_pair_at_pc.: 0.047059s (num_starts 498; 0.0001s/start)
populate_loc_liveness.: 0.047827s (num_starts 3; 0.0159s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L3%11%bbentry_Lfor.cond1%1%bbentry.: 0.047858s (num_starts 5; 0.0096s/start)
pth_collect_simplified_preds_using_atom_func.: 0.048539s (num_starts 1562; 0.0000s/start)
predicate_canonicalized.: 0.049214s (num_starts 662; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.049353s (num_starts 20; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-signed;-trivial.: 0.049466s (num_starts 19; 0.0026s/start)
avail_exprs_create_submap.: 0.049718s (num_starts 504; 0.0001s/start)
compute_expr_eqclasses_at_pc.: 0.05127s (num_starts 7; 0.0073s/start)
edge_update_memlabel_map_for_mlvars.populate_memlabel_map.: 0.051379s (num_starts 168; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.051652s (num_starts 8; 0.0065s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.051691s (num_starts 12; 0.0043s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.05171s (num_starts 8; 0.0065s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;ub-signed;-trivial.: 0.053404s (num_starts 6; 0.0089s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;lb-unsigned;-trivial.: 0.054037s (num_starts 3; 0.0180s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.05404s (num_starts 3; 0.0180s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.054672s (num_starts 9; 0.0061s/start)
graph_with_guessing_add_node_invariants_top_or_boundary.: 0.054766s (num_starts 9; 0.0061s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.054969s (num_starts 2; 0.0275s/start)
cg_add_node.: 0.055142s (num_starts 9; 0.0061s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.055261s (num_starts 2; 0.0276s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.055271s (num_starts 2; 0.0276s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;lb-unsigned;-trivial.: 0.0553s (num_starts 5; 0.0111s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.055309s (num_starts 5; 0.0111s/start)
corr_graph::get_aliasing_constraints_for_edge_helper.: 0.056024s (num_starts 80; 0.0007s/start)
corr_graph::get_aliasing_constraints_for_edge.: 0.056294s (num_starts 80; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.058156s (num_starts 3; 0.0194s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;lb-signed;-trivial.: 0.058159s (num_starts 4; 0.0145s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.058171s (num_starts 3; 0.0194s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;lb-signed.: 0.058193s (num_starts 4; 0.0145s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;lb-unsigned;-trivial.: 0.059319s (num_starts 4; 0.0148s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;lb-unsigned.: 0.059352s (num_starts 4; 0.0148s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.059784s (num_starts 21; 0.0028s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;lb-signed;-trivial.: 0.060206s (num_starts 4; 0.0151s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.061744s (num_starts 9; 0.0069s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.062326s (num_starts 12; 0.0052s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.062584s (num_starts 12; 0.0052s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.063163s (num_starts 3; 0.0211s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.063172s (num_starts 3; 0.0211s/start)
tfg_llvm_t::tfg_postprocess_after_pointsto_analysis.: 0.065581s (num_starts 1; 0.0656s/start)
tfg_postprocess_after_pointsto_analysis.: 0.066351s (num_starts 2; 0.0332s/start)
decide_hoare_triple_helper_get_aliasing_cons.: 0.066465s (num_starts 73; 0.0009s/start)
collect_aliasing_constraints_around_path_helper.: 0.06664s (num_starts 431; 0.0002s/start)
compute_new_lr_status_on_locs.: 0.06696s (num_starts 168; 0.0004s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;lb-signed;-trivial.: 0.068121s (num_starts 12; 0.0057s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.06852s (num_starts 11; 0.0062s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.068531s (num_starts 6; 0.0114s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.068755s (num_starts 11; 0.0063s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.068901s (num_starts 5; 0.0138s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 0.068915s (num_starts 5; 0.0138s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.068944s (num_starts 9; 0.0077s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;abstract-memlabel-asserts-houdini-guess.: 0.069061s (num_starts 9; 0.0077s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.069602s (num_starts 1; 0.0696s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.069609s (num_starts 1; 0.0696s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.069617s (num_starts 1; 0.0696s/start)
create_new_corr_graph_edge.new_node.: 0.070071s (num_starts 8; 0.0088s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.070586s (num_starts 1; 0.0706s/start)
create_new_corr_graph_edge.: 0.07061s (num_starts 13; 0.0054s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.070618s (num_starts 1; 0.0706s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities..: 0.070626s (num_starts 1; 0.0706s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities..: 0.070642s (num_starts 1; 0.0706s/start)
collect_aliasing_constraints_around_path.: 0.070911s (num_starts 271; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.071194s (num_starts 1; 0.0712s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.071202s (num_starts 1; 0.0712s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.071206s (num_starts 3; 0.0237s/start)
decide_hoare_triple_helper;per-path;L3%19%bbentry_Lfor.cond1%1%bbentry;(epsilon);-trivial.: 0.071211s (num_starts 3; 0.0237s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.071212s (num_starts 1; 0.0712s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.071238s (num_starts 1; 0.0712s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.071588s (num_starts 1; 0.0716s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.071598s (num_starts 1; 0.0716s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;-dst-edgecond-implies-src-edgecond;-trivial.: 0.072833s (num_starts 4; 0.0182s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-signed;-trivial.: 0.073383s (num_starts 26; 0.0028s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.073415s (num_starts 16; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.073546s (num_starts 16; 0.0046s/start)
query:convert_to_z3.: 0.073596s (num_starts 800; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.073677s (num_starts 1; 0.0737s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.073688s (num_starts 1; 0.0737s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;ub-unsigned;-trivial.: 0.074936s (num_starts 8; 0.0094s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;pred-type-unknown;-trivial.: 0.075006s (num_starts 4; 0.0188s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.075009s (num_starts 4; 0.0188s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.075149s (num_starts 1; 0.0751s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.075163s (num_starts 1; 0.0752s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 0.075246s (num_starts 3; 0.0251s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.075256s (num_starts 1; 0.0753s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.075266s (num_starts 1; 0.0753s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;dst-ineq-houdini-guess;-trivial.: 0.075645s (num_starts 7; 0.0108s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;ub-unsigned;-trivial.: 0.077341s (num_starts 6; 0.0129s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.077378s (num_starts 1; 0.0774s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;ub-unsigned.: 0.07739s (num_starts 6; 0.0129s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.079275s (num_starts 1; 0.0793s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.079294s (num_starts 1; 0.0793s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.079305s (num_starts 1; 0.0793s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.07932s (num_starts 1; 0.0793s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;lb-unsigned.: 0.079325s (num_starts 1; 0.0793s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.079337s (num_starts 1; 0.0793s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;ub-signed;-trivial.: 0.07948s (num_starts 22; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.079584s (num_starts 1; 0.0796s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.079593s (num_starts 1; 0.0796s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 0.080987s (num_starts 3; 0.0270s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.081337s (num_starts 1; 0.0813s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.081345s (num_starts 1; 0.0813s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.081363s (num_starts 1; 0.0814s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.081467s (num_starts 1; 0.0815s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.081479s (num_starts 1; 0.0815s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.081544s (num_starts 31; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.082237s (num_starts 1; 0.0822s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.082245s (num_starts 1; 0.0822s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-trivial.: 0.082929s (num_starts 6; 0.0138s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.082931s (num_starts 6; 0.0138s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.082932s (num_starts 1; 0.0829s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.082942s (num_starts 1; 0.0829s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.083612s (num_starts 1; 0.0836s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.083621s (num_starts 1; 0.0836s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;abstract-memlabel-asserts-houdini-guess.: 0.083647s (num_starts 4; 0.0209s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.083735s (num_starts 14; 0.0060s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.083993s (num_starts 1; 0.0840s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.084004s (num_starts 1; 0.0840s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;ub-unsigned;-trivial.: 0.08404s (num_starts 8; 0.0105s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.08414s (num_starts 1; 0.0841s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.085832s (num_starts 7; 0.0123s/start)
get_unrolled_paths_from.: 0.087727s (num_starts 40; 0.0022s/start)
collect_assumes_around_path_helper.: 0.087803s (num_starts 1118; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.08816s (num_starts 2; 0.0441s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;-dst-edgecond-implies-src-edgecond.: 0.088169s (num_starts 2; 0.0441s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.089595s (num_starts 17; 0.0053s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.08973s (num_starts 17; 0.0053s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.090573s (num_starts 3; 0.0302s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.09208s (num_starts 1; 0.0921s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.092321s (num_starts 25; 0.0037s/start)
graph_with_paths::collect_assumes_around_path.: 0.092451s (num_starts 1118; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.094454s (num_starts 34; 0.0028s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown.: 0.095014s (num_starts 2; 0.0475s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown.: 0.095054s (num_starts 2; 0.0475s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d).: 0.095068s (num_starts 2; 0.0475s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;dst-ineq-houdini-guess;-trivial.: 0.095426s (num_starts 12; 0.0080s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.095721s (num_starts 12; 0.0080s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;pred-type-unknown;-trivial.: 0.09573s (num_starts 19; 0.0050s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;dst-ineq-houdini-guess;-trivial.: 0.095804s (num_starts 15; 0.0064s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.095837s (num_starts 15; 0.0064s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.096161s (num_starts 2; 0.0481s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;lb-unsigned.: 0.096169s (num_starts 2; 0.0481s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.096217s (num_starts 22; 0.0044s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.096298s (num_starts 9; 0.0107s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.096335s (num_starts 9; 0.0107s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.096723s (num_starts 22; 0.0044s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::avail_exprs_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.096745s (num_starts 168; 0.0006s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.098316s (num_starts 16; 0.0061s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;abstract-memlabel-asserts-houdini-guess.: 0.098512s (num_starts 16; 0.0062s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.100039s (num_starts 1; 0.1000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.100072s (num_starts 1; 0.1001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities..: 0.100091s (num_starts 1; 0.1001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities..: 0.100107s (num_starts 1; 0.1001s/start)
eqspace::smallest_point_cover_houdini_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.100277s (num_starts 513; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.10098s (num_starts 13; 0.0078s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.102931s (num_starts 4; 0.0257s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.103075s (num_starts 5; 0.0206s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.103416s (num_starts 4; 0.0259s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.103433s (num_starts 4; 0.0259s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.103859s (num_starts 1; 0.1039s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.103885s (num_starts 1; 0.1039s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L3%19%bbentry_Lfor.cond1%1%bbentry.: 0.104649s (num_starts 14; 0.0075s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.105471s (num_starts 2; 0.0527s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.105484s (num_starts 3; 0.0352s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.107144s (num_starts 8; 0.0134s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;lb-signed.: 0.10717s (num_starts 8; 0.0134s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;lb-unsigned;-trivial.: 0.107405s (num_starts 7; 0.0153s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.107418s (num_starts 7; 0.0153s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 0.107681s (num_starts 8; 0.0135s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;ub-signed.: 0.107709s (num_starts 8; 0.0135s/start)
graph_with_guessing_relax_dst_memlabels_on_ec_for_corr_graph.: 0.107854s (num_starts 28; 0.0039s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.110209s (num_starts 4; 0.0276s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.110804s (num_starts 1; 0.1108s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.11502s (num_starts 9; 0.0128s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;ub-unsigned.: 0.115046s (num_starts 9; 0.0128s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.115049s (num_starts 1; 0.1150s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.115058s (num_starts 1; 0.1151s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.115774s (num_starts 5; 0.0232s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 0.115799s (num_starts 5; 0.0232s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 0.116799s (num_starts 18; 0.0065s/start)
graph_edge_composition_get_to_state_using_to_state_fn.: 0.117444s (num_starts 604; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.118295s (num_starts 1; 0.1183s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.118308s (num_starts 1; 0.1183s/start)
counter_example_satisfies_preds.: 0.120255s (num_starts 2323; 0.0001s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 0.121718s (num_starts 18; 0.0068s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.126648s (num_starts 9; 0.0141s/start)
ldr_decompose_and_linear_solve.: 0.127711s (num_starts 236; 0.0005s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.129021s (num_starts 2; 0.0645s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;abstract-memlabel-asserts-houdini-guess.: 0.129027s (num_starts 2; 0.0645s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.130032s (num_starts 2; 0.0650s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.13005s (num_starts 2; 0.0650s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.: 0.130077s (num_starts 2; 0.0650s/start)
add_fresh_counterexample_at_pc_and_propagate.L0%0%d_L0%0%d.inductive-invariants.: 0.131816s (num_starts 28; 0.0047s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 0.132159s (num_starts 6; 0.0220s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed.: 0.133984s (num_starts 4; 0.0335s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed.: 0.134025s (num_starts 4; 0.0335s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.134787s (num_starts 2; 0.0674s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.135101s (num_starts 1; 0.1351s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.135105s (num_starts 1; 0.1351s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.135107s (num_starts 1; 0.1351s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);false-predicate.: 0.135115s (num_starts 1; 0.1351s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;false-predicate.: 0.135118s (num_starts 1; 0.1351s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);false-predicate.: 0.135125s (num_starts 1; 0.1351s/start)
bv_linear_solve.: 0.136365s (num_starts 236; 0.0006s/start)
query:bv_solve.: 0.137775s (num_starts 236; 0.0006s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.13807s (num_starts 4; 0.0345s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;lb-unsigned.: 0.13809s (num_starts 4; 0.0345s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;dst-ineq-houdini-guess.: 0.145329s (num_starts 8; 0.0182s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;linear;-trivial.: 0.149399s (num_starts 38; 0.0039s/start)
tfg_relax_pointsto_vals_on_edge.: 0.149438s (num_starts 99; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.149741s (num_starts 4; 0.0374s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;dst-ineq-houdini-guess.: 0.149751s (num_starts 4; 0.0374s/start)
invariant_inference_xfer.dst-ineq.from.L0%0%d_L0%0%d.: 0.150325s (num_starts 2; 0.0752s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.151823s (num_starts 6; 0.0253s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;-dst-edgecond-implies-src-edgecond.: 0.152473s (num_starts 5; 0.0305s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;linear;-trivial.: 0.15262s (num_starts 24; 0.0064s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.152656s (num_starts 24; 0.0064s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;lb-signed;-trivial.: 0.152754s (num_starts 24; 0.0064s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond;-trivial.: 0.15415s (num_starts 9; 0.0171s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.15685s (num_starts 2; 0.0784s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.157433s (num_starts 38; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.157778s (num_starts 27; 0.0058s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.158731s (num_starts 2; 0.0794s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.sprel.: 0.16076s (num_starts 3026; 0.0001s/start)
gen_pred_from_coeff_row.: 0.162262s (num_starts 662; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;dst-ineq-houdini-guess;-trivial.: 0.164095s (num_starts 16; 0.0103s/start)
compute_preds_for_bv_points.: 0.164822s (num_starts 83; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.164965s (num_starts 2; 0.0825s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.164982s (num_starts 2; 0.0825s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);-trivial.: 0.165144s (num_starts 31; 0.0053s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.165298s (num_starts 122; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;dst-ineq-houdini-guess;-trivial.: 0.165435s (num_starts 20; 0.0083s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.16547s (num_starts 20; 0.0083s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 0.165546s (num_starts 20; 0.0083s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;dst-ineq-houdini-guess.: 0.165577s (num_starts 20; 0.0083s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.170643s (num_starts 2; 0.0853s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.170667s (num_starts 2; 0.0853s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;outgoing_edges_cover_all_possibilities..: 0.171059s (num_starts 3; 0.0570s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities..: 0.171073s (num_starts 3; 0.0570s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);linear.: 0.171395s (num_starts 6; 0.0286s/start)
decide_hoare_triple_helper;per-query-type;ub-signed;-trivial.: 0.171898s (num_starts 48; 0.0036s/start)
query:simplify-z3.: 0.175462s (num_starts 1688; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.175583s (num_starts 6; 0.0293s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);linear.: 0.175615s (num_starts 6; 0.0293s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.177701s (num_starts 2; 0.0889s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.17774s (num_starts 2; 0.0889s/start)
bv_solve_returning_intermediate_structures.: 0.178352s (num_starts 236; 0.0008s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.186206s (num_starts 2; 0.0931s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.186224s (num_starts 2; 0.0931s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;ub-unsigned;-trivial.: 0.188575s (num_starts 34; 0.0055s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.190173s (num_starts 12; 0.0158s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 0.190447s (num_starts 6; 0.0317s/start)
check_wfconds_on_edge.L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d.: 0.19058s (num_starts 2; 0.0953s/start)
expr_try_breaking_bvextracts_to_fresh_vars.: 0.191792s (num_starts 498; 0.0004s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.196171s (num_starts 2; 0.0981s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.196223s (num_starts 2; 0.0981s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.196584s (num_starts 28; 0.0070s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 0.199132s (num_starts 12; 0.0166s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.199592s (num_starts 3; 0.0665s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.200275s (num_starts 3; 0.0668s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.201656s (num_starts 2; 0.1008s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.201704s (num_starts 2; 0.1009s/start)
bvsolve_cache_query.miss1.: 0.204518s (num_starts 236; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.210968s (num_starts 2; 0.1055s/start)
bvsolve_cache_query.: 0.212442s (num_starts 236; 0.0009s/start)
recomputed_preds_would_be_different_from_current_preds.: 0.215807s (num_starts 2149; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.219417s (num_starts 5; 0.0439s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.220746s (num_starts 3; 0.0736s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.222621s (num_starts 63; 0.0035s/start)
ftmap_pointsto_analysis_combo_dfa_t.alias_val_xfer_and_meet.: 0.226119s (num_starts 69; 0.0033s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.227313s (num_starts 35; 0.0065s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.model.: 0.22771s (num_starts 3026; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);linear.: 0.227944s (num_starts 25; 0.0091s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;linear.: 0.228001s (num_starts 25; 0.0091s/start)
expr_label_memlabels_using_memlabel_map_visitor.simplify.: 0.228594s (num_starts 3163; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.229424s (num_starts 12; 0.0191s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;pred-type-unknown;-trivial.: 0.23195s (num_starts 14; 0.0166s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.233817s (num_starts 1; 0.2338s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.233819s (num_starts 1; 0.2338s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.233831s (num_starts 1; 0.2338s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;dst_edge_composition_proves_false.: 0.233834s (num_starts 1; 0.2338s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.238628s (num_starts 1; 0.2386s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%11%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.238632s (num_starts 1; 0.2386s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%11%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.238651s (num_starts 1; 0.2387s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;dst_edge_composition_proves_false.: 0.238655s (num_starts 1; 0.2387s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed.: 0.242525s (num_starts 4; 0.0606s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed.: 0.242587s (num_starts 4; 0.0606s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;linear;-trivial.: 0.242824s (num_starts 17; 0.0143s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 0.246585s (num_starts 5; 0.0493s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.250399s (num_starts 1; 0.2504s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.250402s (num_starts 1; 0.2504s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.250404s (num_starts 1; 0.2504s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.250404s (num_starts 1; 0.2504s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false.: 0.250411s (num_starts 1; 0.2504s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo;dst_edge_composition_proves_false.: 0.250414s (num_starts 1; 0.2504s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false.: 0.250419s (num_starts 1; 0.2504s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon).: 0.250774s (num_starts 2; 0.1254s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.25146s (num_starts 3; 0.0838s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.251496s (num_starts 3; 0.0838s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.256968s (num_starts 41; 0.0063s/start)
expr_try_converting_unaliased_memslots_to_fresh_vars.: 0.257404s (num_starts 498; 0.0005s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.257814s (num_starts 1; 0.2578s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.25782s (num_starts 1; 0.2578s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.257822s (num_starts 1; 0.2578s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);false-predicate.: 0.257834s (num_starts 1; 0.2578s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;false-predicate.: 0.257838s (num_starts 1; 0.2578s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);false-predicate.: 0.257844s (num_starts 1; 0.2578s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.259347s (num_starts 3; 0.0864s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.259457s (num_starts 5; 0.0519s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.259532s (num_starts 5; 0.0519s/start)
invariant_inference_xfer.dst-ineq.from.L3%11%bbentry_Lfor.cond1%1%bbentry.: 0.260553s (num_starts 5; 0.0521s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.261826s (num_starts 3; 0.0873s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.261833s (num_starts 3; 0.0873s/start)
add_fresh_counterexample_at_pc_and_propagate.L3%11%bbentry_Lfor.cond1%1%bbentry.inductive-invariants.: 0.272054s (num_starts 14; 0.0194s/start)
check_wfconds_on_edge.L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry.: 0.272876s (num_starts 3; 0.0910s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.27604s (num_starts 4; 0.0690s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;lb-unsigned.: 0.276102s (num_starts 4; 0.0690s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.277643s (num_starts 3; 0.0925s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.277735s (num_starts 3; 0.0926s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.: 0.278237s (num_starts 3026; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);linear.: 0.280654s (num_starts 24; 0.0117s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.282204s (num_starts 1; 0.2822s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%19%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.282206s (num_starts 1; 0.2822s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%19%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.28223s (num_starts 1; 0.2822s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;dst_edge_composition_proves_false.: 0.282234s (num_starts 1; 0.2822s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;linear;-trivial.: 0.283882s (num_starts 21; 0.0135s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.28481s (num_starts 33; 0.0086s/start)
dst_tfg_counter_example_translate_on_edge_composition.: 0.28631s (num_starts 452; 0.0006s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.290097s (num_starts 1; 0.2901s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.290105s (num_starts 1; 0.2901s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.290108s (num_starts 1; 0.2901s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);false-predicate.: 0.290119s (num_starts 1; 0.2901s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;false-predicate.: 0.290123s (num_starts 1; 0.2901s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);false-predicate.: 0.290128s (num_starts 1; 0.2901s/start)
solve_for_bv_points.: 0.297387s (num_starts 236; 0.0013s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;pred-type-unknown;-trivial.: 0.298672s (num_starts 17; 0.0176s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.298703s (num_starts 17; 0.0176s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.301235s (num_starts 1; 0.3012s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.30124s (num_starts 1; 0.3012s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.301243s (num_starts 1; 0.3012s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%11%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.304154s (num_starts 3; 0.1014s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%11%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.304225s (num_starts 3; 0.1014s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%11%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.304287s (num_starts 3; 0.1014s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%11%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.304334s (num_starts 3; 0.1014s/start)
decide_hoare_triple_helper;per-query-type;lb-unsigned;-trivial.: 0.304853s (num_starts 21; 0.0145s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.305183s (num_starts 4; 0.0763s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;lb-signed.: 0.305192s (num_starts 4; 0.0763s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.305212s (num_starts 4; 0.0763s/start)
check_wfconds_on_edge.L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry.: 0.306567s (num_starts 3; 0.1022s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 0.308917s (num_starts 22; 0.0140s/start)
ftmap_pointsto_analysis_combo_dfa_t.ftmap_dfa_flow_insensitive_xfer_and_meet.: 0.312237s (num_starts 69; 0.0045s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;linear.: 0.314598s (num_starts 18; 0.0175s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.323154s (num_starts 3; 0.1077s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.323175s (num_starts 3; 0.1077s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.326232s (num_starts 4; 0.0816s/start)
graph_edge_composition_get_simplified_edge_cond.: 0.333415s (num_starts 11263; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.339345s (num_starts 5; 0.0679s/start)
check_wfconds_on_edge.L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry.: 0.342456s (num_starts 5; 0.0685s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.342875s (num_starts 4; 0.0857s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.343219s (num_starts 4; 0.0858s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.346395s (num_starts 3; 0.1155s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.354335s (num_starts 16; 0.0221s/start)
decide_hoare_triple_helper;per-path;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);-trivial.: 0.358532s (num_starts 41; 0.0087s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.363171s (num_starts 5; 0.0726s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.363199s (num_starts 4; 0.0908s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.363214s (num_starts 5; 0.0726s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.363948s (num_starts 1; 0.3639s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.363949s (num_starts 1; 0.3639s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 0.367649s (num_starts 20; 0.0184s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 0.36784s (num_starts 20; 0.0184s/start)
invariant_inference_xfer.expr-group-bvs.from.L3%11%bbentry_Lfor.cond1%1%bbentry.: 0.370133s (num_starts 5; 0.0740s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.370714s (num_starts 4; 0.0927s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.37234s (num_starts 6; 0.0621s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.372654s (num_starts 7; 0.0532s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;ub-unsigned.: 0.372677s (num_starts 7; 0.0532s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.373937s (num_starts 1; 0.3739s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.373944s (num_starts 1; 0.3739s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.373952s (num_starts 1; 0.3740s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;dst_edge_composition_proves_false.: 0.373956s (num_starts 1; 0.3740s/start)
decide_hoare_triple_helper;per-query-type;lb-signed;-trivial.: 0.377695s (num_starts 64; 0.0059s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 0.377933s (num_starts 12; 0.0315s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.379414s (num_starts 4; 0.0949s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;linear;-trivial.: 0.380216s (num_starts 90; 0.0042s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.386088s (num_starts 5; 0.0772s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.386164s (num_starts 5; 0.0772s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.386205s (num_starts 5; 0.0772s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;dst-ineq-houdini-guess;-trivial.: 0.387649s (num_starts 37; 0.0105s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;pred-type-unknown.: 0.390854s (num_starts 16; 0.0244s/start)
ftmap_run_pointsto_analysis.: 0.39459s (num_starts 2; 0.1973s/start)
tfg_run_pointsto_analysis.: 0.394948s (num_starts 2; 0.1975s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.404888s (num_starts 18; 0.0225s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.405524s (num_starts 3; 0.1352s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 0.406138s (num_starts 10; 0.0406s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;dst-ineq-houdini-guess.: 0.406189s (num_starts 10; 0.0406s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 0.406283s (num_starts 10; 0.0406s/start)
tfg_populate_structs_after_ssa_construction.: 0.406923s (num_starts 2; 0.2035s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;pred-type-unknown;-trivial.: 0.407195s (num_starts 23; 0.0177s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.41359s (num_starts 3; 0.1379s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.413676s (num_starts 3; 0.1379s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 0.416899s (num_starts 30; 0.0139s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 0.417129s (num_starts 18; 0.0232s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;pred-type-unknown.: 0.417177s (num_starts 18; 0.0232s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.41757s (num_starts 3; 0.1392s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.417604s (num_starts 3; 0.1392s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.417621s (num_starts 3; 0.1392s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;pred-type-unknown.: 0.419213s (num_starts 22; 0.0191s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.423177s (num_starts 97; 0.0044s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.425158s (num_starts 31; 0.0137s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.428599s (num_starts 4; 0.1071s/start)
tfg_ssa_construct_from_non_ssa_tfg.: 0.431525s (num_starts 2; 0.2158s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;ub-signed.: 0.433035s (num_starts 10; 0.0433s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.dst_tfg.computeWP_for_pred_across_ec.: 0.439714s (num_starts 1158; 0.0004s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;ub-signed.: 0.442995s (num_starts 26; 0.0170s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess.: 0.443939s (num_starts 43; 0.0103s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%19%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.448998s (num_starts 4; 0.1122s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%19%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.449096s (num_starts 4; 0.1123s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recomputed_preds_would_be_different_from_current_preds.: 0.45009s (num_starts 236; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;-dst-edgecond-implies-src-edgecond.: 0.452988s (num_starts 5; 0.0906s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.454984s (num_starts 23; 0.0198s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.458647s (num_starts 5; 0.0917s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.458727s (num_starts 5; 0.0917s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 0.459186s (num_starts 20; 0.0230s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;dst-ineq-houdini-guess.: 0.459251s (num_starts 20; 0.0230s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.464976s (num_starts 4; 0.1162s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.469088s (num_starts 8; 0.0586s/start)
check_wfconds_on_edge.L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry.: 0.46956s (num_starts 9; 0.0522s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.470003s (num_starts 21; 0.0224s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.476306s (num_starts 58; 0.0082s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.477078s (num_starts 5; 0.0954s/start)
decide_hoare_triple_helper;per-query-type;ub-unsigned;-trivial.: 0.480115s (num_starts 77; 0.0062s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;lb-signed.: 0.485976s (num_starts 15; 0.0324s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.488381s (num_starts 4; 0.1221s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L0%0%d_L0%0%d.: 0.489762s (num_starts 2; 0.2449s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.498413s (num_starts 6; 0.0831s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;pred-type-unknown;-trivial.: 0.498488s (num_starts 47; 0.0106s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.499867s (num_starts 10; 0.0500s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.516237s (num_starts 2; 0.2581s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.516249s (num_starts 2; 0.2581s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.516256s (num_starts 2; 0.2581s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.516707s (num_starts 2; 0.2584s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.516714s (num_starts 2; 0.2584s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.51672s (num_starts 2; 0.2584s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 0.519063s (num_starts 6; 0.0865s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;ub-unsigned.: 0.519076s (num_starts 6; 0.0865s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 0.519106s (num_starts 6; 0.0865s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.521015s (num_starts 5; 0.1042s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;ub-unsigned.: 0.521031s (num_starts 5; 0.1042s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.521063s (num_starts 5; 0.1042s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.src_tfg.computeWP_for_pred_across_ec.: 0.529388s (num_starts 1104; 0.0005s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);-trivial.: 0.547992s (num_starts 122; 0.0045s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.555639s (num_starts 6; 0.0926s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;-dst-edgecond-implies-src-edgecond.: 0.555815s (num_starts 6; 0.0926s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.564436s (num_starts 4; 0.1411s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.56458s (num_starts 4; 0.1411s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.56804s (num_starts 8; 0.0710s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.568972s (num_starts 6; 0.0948s/start)
apply_mask_and_overlay_array_constant.mk_array_constant.: 0.570615s (num_starts 481; 0.0012s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.570632s (num_starts 35; 0.0163s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.575654s (num_starts 5; 0.1151s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.578611s (num_starts 5; 0.1157s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%11%bbentry_Lfor.cond1%1%bbentry.: 0.607693s (num_starts 5; 0.1215s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.60774s (num_starts 2; 0.3039s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.607801s (num_starts 2; 0.3039s/start)
guarded_predicate_set_and.: 0.611732s (num_starts 498; 0.0012s/start)
apply_mask_and_overlay_array_constant.: 0.617434s (num_starts 481; 0.0013s/start)
check_wfconds_on_edge.L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry.: 0.617441s (num_starts 7; 0.0882s/start)
lhs_set_sort.: 0.625115s (num_starts 498; 0.0013s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;lb-unsigned.: 0.634166s (num_starts 10; 0.0634s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 0.635202s (num_starts 32; 0.0199s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;linear.: 0.648454s (num_starts 44; 0.0147s/start)
put_smtlib_string_in_file.: 0.661403s (num_starts 594; 0.0011s/start)
../../include/graph/smallest_point_cover.h.smallest_point_cover_add_point_using_CE.: 0.673993s (num_starts 2385; 0.0003s/start)
decide_hoare_triple_helper;per-query-type;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.68302s (num_starts 3; 0.2277s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.704498s (num_starts 9; 0.0783s/start)
decide_hoare_triple_helper;per-query-type;false-predicate.: 0.705543s (num_starts 4; 0.1764s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.708015s (num_starts 5; 0.1416s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.708125s (num_starts 5; 0.1416s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 0.712807s (num_starts 18; 0.0396s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.727967s (num_starts 11; 0.0662s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.73789s (num_starts 1; 0.7379s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%11%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.737893s (num_starts 1; 0.7379s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%11%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.737909s (num_starts 1; 0.7379s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;dst_edge_composition_proves_false.: 0.737913s (num_starts 1; 0.7379s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.739568s (num_starts 9; 0.0822s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.739633s (num_starts 9; 0.0822s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.747238s (num_starts 1; 0.7472s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%19%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.747241s (num_starts 1; 0.7472s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%19%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.747261s (num_starts 1; 0.7473s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;dst_edge_composition_proves_false.: 0.747267s (num_starts 1; 0.7473s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.748399s (num_starts 7; 0.1069s/start)
decide_hoare_triple_helper;per-path;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);-trivial.: 0.773446s (num_starts 90; 0.0086s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.775165s (num_starts 8; 0.0969s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.775475s (num_starts 6; 0.1292s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;-dst-edgecond-implies-src-edgecond.: 0.788484s (num_starts 9; 0.0876s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.79012s (num_starts 4; 0.1975s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.79013s (num_starts 4; 0.1975s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.791629s (num_starts 13; 0.0609s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.795222s (num_starts 7; 0.1136s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 0.797495s (num_starts 41; 0.0195s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.805812s (num_starts 6; 0.1343s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.805859s (num_starts 6; 0.1343s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%19%bbentry_Lfor.cond1%1%bbentry.: 0.805896s (num_starts 14; 0.0576s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.805911s (num_starts 6; 0.1343s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.811718s (num_starts 9; 0.0902s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.811822s (num_starts 9; 0.0902s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.812962s (num_starts 10; 0.0813s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.82545s (num_starts 5; 0.1651s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.825468s (num_starts 5; 0.1651s/start)
decide_hoare_triple_helper;per-query-type;ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.826149s (num_starts 9; 0.0918s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.828064s (num_starts 56; 0.0148s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 0.842817s (num_starts 14; 0.0602s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;linear.: 0.842854s (num_starts 14; 0.0602s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.847174s (num_starts 16; 0.0529s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;lb-unsigned.: 0.847261s (num_starts 16; 0.0530s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry.from.L3%19%bbentry_Lfor.cond1%1%bbentry.: 0.847717s (num_starts 4; 0.2119s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.861022s (num_starts 8; 0.1076s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.865196s (num_starts 8; 0.1081s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;pred-type-unknown.: 0.865221s (num_starts 8; 0.1082s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;lb-signed.: 0.866339s (num_starts 10; 0.0866s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.866908s (num_starts 10; 0.0867s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.867459s (num_starts 5; 0.1735s/start)
invariant_inference_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.: 0.895266s (num_starts 2; 0.4476s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.896514s (num_starts 16; 0.0560s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.896991s (num_starts 6; 0.1495s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.91654s (num_starts 10; 0.0917s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 0.918233s (num_starts 17; 0.0540s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 0.919089s (num_starts 20; 0.0460s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);linear.: 0.927453s (num_starts 72; 0.0129s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.936171s (num_starts 12; 0.0780s/start)
graph_ec_apply_trans_funs_helper.0.: 0.941415s (num_starts 2417; 0.0004s/start)
graph_ec_apply_trans_funs_helper.: 0.950891s (num_starts 2426; 0.0004s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.952765s (num_starts 2; 0.4764s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.952775s (num_starts 2; 0.4764s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.952782s (num_starts 2; 0.4764s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.955248s (num_starts 6; 0.1592s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;lb-signed.: 0.955265s (num_starts 6; 0.1592s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.955291s (num_starts 6; 0.1592s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.956391s (num_starts 9; 0.1063s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.956482s (num_starts 9; 0.1063s/start)
graph_ec_apply_trans_funs_using_wp_fn.: 0.956897s (num_starts 2426; 0.0004s/start)
computeWP_for_pred_across_ec.graph_ec_apply_trans_funs_using_wp_fn.: 0.963724s (num_starts 2415; 0.0004s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.97079s (num_starts 10; 0.0971s/start)
computeWP_for_pred_across_ec.: 0.971986s (num_starts 2415; 0.0004s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%11%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.976495s (num_starts 2; 0.4882s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%11%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.976579s (num_starts 2; 0.4883s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.988332s (num_starts 12; 0.0824s/start)
decide_hoare_triple_helper;per-query-type;ub-signed.: 0.999091s (num_starts 57; 0.0175s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L0%0%d_L0%0%d.: 1.01761s (num_starts 2; 0.5088s/start)
decide_hoare_triple_helper;per-query-type;dst-ineq-houdini-guess;-trivial.: 1.02327s (num_starts 114; 0.0090s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L3%19%bbentry_Lfor.cond1%1%bbentry.: 1.02613s (num_starts 14; 0.0733s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.02941s (num_starts 2; 0.5147s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 1.02951s (num_starts 2; 0.5148s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 1.03516s (num_starts 25; 0.0414s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L0%0%d_L0%0%d.: 1.05059s (num_starts 2; 0.5253s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.11218s (num_starts 8; 0.1390s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.11359s (num_starts 8; 0.1392s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.14561s (num_starts 14; 0.0818s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.: 1.16248s (num_starts 1104; 0.0011s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 1.16455s (num_starts 20; 0.0582s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 1.17937s (num_starts 24; 0.0491s/start)
edge_composition_apply_trans_funs_on_pred.: 1.18034s (num_starts 1015; 0.0012s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.18143s (num_starts 14; 0.0844s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;pred-type-unknown.: 1.18315s (num_starts 29; 0.0408s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 1.2119s (num_starts 18; 0.0673s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 1.24683s (num_starts 27; 0.0462s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;lb-signed.: 1.26682s (num_starts 32; 0.0396s/start)
decide_hoare_triple_helper;per-query-type;linear;-trivial.: 1.2687s (num_starts 218; 0.0058s/start)
decide_hoare_triple_helper;per-path;L3%11%bbentry_Lfor.cond1%1%bbentry;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.28061s (num_starts 5; 0.2561s/start)
decide_hoare_triple_helper;per-path;L3%11%bbentry_Lfor.cond1%1%bbentry;(epsilon).: 1.28094s (num_starts 5; 0.2562s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.28539s (num_starts 12; 0.1071s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.28757s (num_starts 7; 0.1839s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.28768s (num_starts 7; 0.1840s/start)
decide_hoare_triple_helper;per-path;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);-trivial.: 1.32426s (num_starts 76; 0.0174s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 1.32879s (num_starts 9; 0.1476s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 1.32892s (num_starts 9; 0.1477s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.3402s (num_starts 7; 0.1915s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.34029s (num_starts 7; 0.1915s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.34168s (num_starts 16; 0.0839s/start)
check_equivalence_proof.: 1.35097s (num_starts 1; 1.3510s/start)
expr_do_simplify_using_lhs_set_and_precond.: 1.35985s (num_starts 1535; 0.0009s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);linear.: 1.36158s (num_starts 109; 0.0125s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.3786s (num_starts 6; 0.2298s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.37863s (num_starts 6; 0.2298s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 1.38188s (num_starts 40; 0.0345s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);linear.: 1.41364s (num_starts 19; 0.0744s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;linear.: 1.41369s (num_starts 19; 0.0744s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.41836s (num_starts 18; 0.0788s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 1.43684s (num_starts 16; 0.0898s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 1.43705s (num_starts 16; 0.0898s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;pred-type-unknown.: 1.45564s (num_starts 56; 0.0260s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 1.45831s (num_starts 18; 0.0810s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.48915s (num_starts 19; 0.0784s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.4912s (num_starts 13; 0.1147s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;dst-ineq-houdini-guess.: 1.50646s (num_starts 32; 0.0471s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.50835s (num_starts 19; 0.0794s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.5115s (num_starts 6; 0.2519s/start)
collect_inductive_preds_around_path.: 1.52539s (num_starts 1015; 0.0015s/start)
lhs_set_eliminate_constructs_that_the_solver_cannot_handle.: 1.54405s (num_starts 498; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;linear.: 1.56296s (num_starts 104; 0.0150s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon).: 1.57509s (num_starts 19; 0.0829s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.5992s (num_starts 9; 0.1777s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 1.60402s (num_starts 31; 0.0517s/start)
prove_spawn_and_join.eliminate_constructs_that_the_solver_cannot_handle1.: 1.6212s (num_starts 498; 0.0033s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown;-trivial.: 1.63934s (num_starts 131; 0.0125s/start)
invariant_inference_xfer.src-branches-const-ineq.from.L3%11%bbentry_Lfor.cond1%1%bbentry.: 1.66426s (num_starts 5; 0.3329s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.67068s (num_starts 8; 0.2088s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);linear.: 1.69467s (num_starts 43; 0.0394s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 1.70353s (num_starts 51; 0.0334s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 1.70657s (num_starts 47; 0.0363s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.8025s (num_starts 7; 0.2575s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.80276s (num_starts 7; 0.2575s/start)
decide_hoare_triple_helper;per-query-type;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.82454s (num_starts 20; 0.0912s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 1.82934s (num_starts 46; 0.0398s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 1.87148s (num_starts 13; 0.1440s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.88163s (num_starts 8; 0.2352s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.88167s (num_starts 8; 0.2352s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.8817s (num_starts 8; 0.2352s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.88316s (num_starts 22; 0.0856s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.8868s (num_starts 8; 0.2358s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);linear.: 1.88989s (num_starts 14; 0.1350s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;linear.: 1.88993s (num_starts 14; 0.1350s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);linear.: 1.89s (num_starts 14; 0.1350s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.91249s (num_starts 20; 0.0956s/start)
decide_hoare_triple_helper;per-path;L3%19%bbentry_Lfor.cond1%1%bbentry;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.92458s (num_starts 10; 0.1925s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 1.92989s (num_starts 16; 0.1206s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;ub-unsigned.: 1.96214s (num_starts 16; 0.1226s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 1.96747s (num_starts 77; 0.0256s/start)
decide_hoare_triple_helper;per-path;L3%19%bbentry_Lfor.cond1%1%bbentry;(epsilon).: 1.99661s (num_starts 13; 0.1536s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.03597s (num_starts 14; 0.1454s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond.: 2.06765s (num_starts 29; 0.0713s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 2.11519s (num_starts 68; 0.0311s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;ub-unsigned.: 2.12053s (num_starts 22; 0.0964s/start)
decide_hoare_triple_helper;per-query-type;lb-unsigned.: 2.13069s (num_starts 41; 0.0520s/start)
check_wfconds_on_edge.: 2.20003s (num_starts 33; 0.0667s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;dst-ineq-houdini-guess.: 2.27182s (num_starts 59; 0.0385s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);-trivial.: 2.3144s (num_starts 331; 0.0070s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.36266s (num_starts 9; 0.2625s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.36269s (num_starts 9; 0.2625s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.36556s (num_starts 6; 0.3943s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.36567s (num_starts 6; 0.3943s/start)
decide_hoare_triple_helper;per-path;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.38049s (num_starts 17; 0.1400s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 2.392s (num_starts 14; 0.1709s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;pred-type-unknown.: 2.39205s (num_starts 14; 0.1709s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 2.4276s (num_starts 15; 0.1618s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 2.46192s (num_starts 18; 0.1368s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.54764s (num_starts 8; 0.3185s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;dst-ineq-houdini-guess.: 2.64353s (num_starts 20; 0.1322s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.68571s (num_starts 12; 0.2238s/start)
decide_hoare_triple_helper;per-path;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry).: 2.74138s (num_starts 58; 0.0473s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 2.77027s (num_starts 26; 0.1065s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.85172s (num_starts 13; 0.2194s/start)
decide_hoare_triple_helper;per-query-type;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.86406s (num_starts 7; 0.4092s/start)
decide_hoare_triple_helper;per-query-type;dst_edge_composition_proves_false.: 2.8643s (num_starts 7; 0.4092s/start)
compute_z3_expr.: 2.88765s (num_starts 1097; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;ub-unsigned.: 3.04106s (num_starts 47; 0.0647s/start)
dst_edge_composition_proves_false.: 3.19148s (num_starts 7; 0.4559s/start)
check_preds_on_edge_compositions.dhd_with_ce_propagation.: 3.2111s (num_starts 89; 0.0361s/start)
get_next_dst_edge_composition_to_correlate.: 3.24876s (num_starts 8; 0.4061s/start)
check_preds_on_edge_compositions.: 3.25667s (num_starts 38; 0.0857s/start)
decide_hoare_triple_helper;per-path;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.29648s (num_starts 24; 0.1374s/start)
decide_hoare_triple.: 3.31273s (num_starts 10; 0.3313s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.38569s (num_starts 12; 0.2821s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.38575s (num_starts 12; 0.2821s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.38578s (num_starts 12; 0.2821s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 3.38931s (num_starts 14; 0.2421s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;pred-type-unknown.: 3.38935s (num_starts 14; 0.2421s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 3.38944s (num_starts 14; 0.2421s/start)
decide_hoare_triple_helper;per-query-type;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.67384s (num_starts 21; 0.1749s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.75425s (num_starts 21; 0.1788s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry).: 3.92098s (num_starts 52; 0.0754s/start)
parse_z3_model.: 3.96011s (num_starts 157; 0.0252s/start)
read_counter_examples_from_channel.: 3.9981s (num_starts 79; 0.0506s/start)
decide_hoare_triple_helper;per-query-type;lb-signed.: 4.05337s (num_starts 85; 0.0477s/start)
decide_hoare_triple_helper;per-path;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry).: 4.07432s (num_starts 114; 0.0357s/start)
invariant_inference_xfer.dst-ineq.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 4.08521s (num_starts 18; 0.2270s/start)
invariant_inference_xfer.dst-ineq.from.L3%19%bbentry_Lfor.cond1%1%bbentry.: 5.22699s (num_starts 14; 0.3734s/start)
invariant_inference_xfer.src-branches-const-ineq.from.L3%19%bbentry_Lfor.cond1%1%bbentry.: 5.36168s (num_starts 18; 0.2979s/start)
decide_hoare_triple_helper;-trivial.: 5.73333s (num_starts 725; 0.0079s/start)
invariant_inference_xfer.src-branches-const-ineq.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 5.74765s (num_starts 29; 0.1982s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 5.84793s (num_starts 16; 0.3655s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 5.84836s (num_starts 16; 0.3655s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);linear.: 6.07823s (num_starts 28; 0.2171s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 6.09709s (num_starts 19; 0.3209s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);linear.: 6.2543s (num_starts 34; 0.1839s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;linear.: 6.38199s (num_starts 40; 0.1595s/start)
invariant_inference_xfer.expr-group-bvs.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 6.58608s (num_starts 18; 0.3659s/start)
decide_hoare_triple_helper;per-query-type;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 6.72095s (num_starts 59; 0.1139s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 6.80829s (num_starts 30; 0.2269s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry).: 6.85568s (num_starts 53; 0.1294s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 7.20031s (num_starts 71; 0.1014s/start)
add_fresh_counterexample_at_pc_and_propagate.L3%7%bbentry_Lfor.cond%1%bbentry.inductive-invariants.: 7.42196s (num_starts 118; 0.0629s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 7.71606s (num_starts 55; 0.1403s/start)
decide_hoare_triple_helper;per-query-type;dst-ineq-houdini-guess.: 7.74857s (num_starts 173; 0.0448s/start)
ce_reconcile_sorts.: 8.20568s (num_starts 158; 0.0519s/start)
decide_hoare_triple_helper;per-query-type;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 8.24634s (num_starts 41; 0.2011s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry).: 8.27075s (num_starts 177; 0.0467s/start)
decide_hoare_triple_helper;per-query-type;ub-unsigned.: 8.72943s (num_starts 118; 0.0740s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 8.87026s (num_starts 46; 0.1928s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry).: 9.52701s (num_starts 402; 0.0237s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown.: 10.5133s (num_starts 177; 0.0594s/start)
propagate_nodece_across_edge.: 10.6467s (num_starts 96; 0.1109s/start)
src_tfg_counter_example_translate_on_edge_composition.delta{1,0}.: 11.2882s (num_starts 248; 0.0455s/start)
src_tfg_counter_example_translate_on_edge_composition.: 11.2901s (num_starts 305; 0.0370s/start)
decide_hoare_triple_helper;per-path;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 11.7993s (num_starts 42; 0.2809s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 11.8135s (num_starts 18; 0.6563s/start)
decide_hoare_triple_helper;per-query-type;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 12.0089s (num_starts 60; 0.2001s/start)
check_node_stability_after_CE_addition.: 12.0216s (num_starts 307; 0.0392s/start)
decide_hoare_triple_helper;per-path;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry).: 13.1295s (num_starts 118; 0.1113s/start)
decide_hoare_triple_helper;per-query-type;linear.: 13.2833s (num_starts 278; 0.0478s/start)
counter_example_translate_on_edge_composition_helper.: 15.9831s (num_starts 2406; 0.0066s/start)
add_fresh_counterexample_at_pc_and_propagate.L3%19%bbentry_Lfor.cond1%1%bbentry.inductive-invariants.: 20.7931s (num_starts 27; 0.7701s/start)
corr_graph::add_edge().: 21.0585s (num_starts 13; 1.6199s/start)
corr_graph_create_and_add_cg_edge_composition_using_src_and_dst_fp.: 21.1329s (num_starts 13; 1.6256s/start)
corr_graph_add_correlation.: 21.1333s (num_starts 13; 1.6256s/start)
corr_graph_add_correlation_and_create_new_correl_entry.: 21.134s (num_starts 13; 1.6257s/start)
invariant_inference_xfer.expr-group-bvs.from.L3%19%bbentry_Lfor.cond1%1%bbentry.: 24.1067s (num_starts 14; 1.7219s/start)
query:smt.: 24.1376s (num_starts 297; 0.0813s/start)
spawn_smt_query.: 28.1392s (num_starts 297; 0.0947s/start)
add_fresh_counterexample_at_pc_and_propagate.: 28.6202s (num_starts 187; 0.1530s/start)
decide_hoare_triple_with_alias_cons.ce.: 28.6257s (num_starts 923; 0.0310s/start)
counter_example_falsifies_preds.: 30.8203s (num_starts 486; 0.0634s/start)
counter_example_evaluate_preds.: 30.9342s (num_starts 2809; 0.0110s/start)
solver_provable.: 40.5634s (num_starts 498; 0.0815s/start)
solver_satisfiable-cache-miss.: 40.6103s (num_starts 297; 0.1367s/start)
solver_satisfiable.: 40.6145s (num_starts 499; 0.0814s/start)
expr_is_provable.: 41.0208s (num_starts 498; 0.0824s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_commonMEM_optimization.: 41.0297s (num_starts 498; 0.0824s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_aliasing_constraints_generation.: 41.0556s (num_starts 498; 0.0824s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_simplify_and_add_auxiliary_structures.: 41.0766s (num_starts 498; 0.0825s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_precond_is_false.: 41.7379s (num_starts 498; 0.0838s/start)
is_expr_equal_using_lhs_set_and_precond_helper.syntactic_check_failed.: 41.833s (num_starts 498; 0.0840s/start)
is_expr_equal_using_lhs_set_and_precond_helper.: 41.8411s (num_starts 498; 0.0840s/start)
is_expr_equal_using_lhs_set_and_precond.: 47.5447s (num_starts 498; 0.0955s/start)
prove.: 47.5514s (num_starts 498; 0.0955s/start)
prove_spawn_and_join_helper.: 47.5547s (num_starts 498; 0.0955s/start)
decide_hoare_triple_helper;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 48.0014s (num_starts 290; 0.1655s/start)
prove_spawn_and_join.: 50.4408s (num_starts 498; 0.1013s/start)
prove_wrapper.proof_query_not_trivial.: 50.5257s (num_starts 498; 0.1015s/start)
prove_wrapper.: 50.6985s (num_starts 1065; 0.0476s/start)
decide_hoare_triple_check_ub.: 51.9549s (num_starts 1015; 0.0512s/start)
decide_hoare_triple_helper.: 53.7801s (num_starts 1015; 0.0530s/start)
update_invariant_state_for_edges.: 78.4015s (num_starts 11; 7.1274s/start)
cg_check_new_cg_ec.: 78.4016s (num_starts 11; 7.1274s/start)
correl_entry_apply.: 78.4023s (num_starts 11; 7.1275s/start)
expandProductCFG.: 81.6712s (num_starts 12; 6.8059s/start)
decide_hoare_triple_with_alias_cons.: 82.4142s (num_starts 1015; 0.0812s/start)
bestFirstSearch.: 102.892s (num_starts 1; 102.8923s/start)
Time taken for equivalence check.: 104.26s (num_starts 1; 104.2601s/start)

counters:
# of Paths Prunned through CE propagation.: 4
# of assume sat failures for undef-behavioursome.edge.Lfor.body3%1%d=>Lfor.cond1%1%bbentry.: 15
# of correlations rejected by -dst-edgecond-implies-src-edgecond check.: 4
# of paths enumerated.: 41
# of paths expanded.: 11
# of queries to linear solver.: 236
# of smt-solver-queries.: 297
L0%0%d=>Lfor.cond%1%bbentry-src_ecs.: 4
L0%0%d=>Lfor.cond%1%bbentry-src_to_pcs.: 4
Lfor.cond%1%bbentry=>E0%0%d-src_ecs.: 1
Lfor.cond%1%bbentry=>E0%0%d-src_to_pcs.: 1
Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry-src_ecs.: 5
Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry-src_to_pcs.: 4
Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry-src_ecs.: 1
Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry-src_to_pcs.: 1
Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry-src_ecs.: 2
Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry-src_to_pcs.: 1
num-backtrackings.: 4
removed-siblings.: 2
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.iters.: 2
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.prove_queries.: 2
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%11%bbentry_Lfor.cond1%1%bbentry.iters.: 5
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%11%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%19%bbentry_Lfor.cond1%1%bbentry.iters.: 14
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%19%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 18
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.iters.: 2
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%11%bbentry_Lfor.cond1%1%bbentry.iters.: 3
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%11%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 7
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%19%bbentry_Lfor.cond1%1%bbentry.iters.: 10
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%19%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 12
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 18
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 9
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry.from.L3%19%bbentry_Lfor.cond1%1%bbentry.iters.: 4
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry.from.L3%19%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 8
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 18
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L0%0%d_L0%0%d.iters.: 2
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L0%0%d_L0%0%d.prove_queries.: 2
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%11%bbentry_Lfor.cond1%1%bbentry.iters.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%11%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%19%bbentry_Lfor.cond1%1%bbentry.iters.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%19%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 4
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 4
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L0%0%d_L0%0%d.iters.: 2
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L0%0%d_L0%0%d.prove_queries.: 2
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%11%bbentry_Lfor.cond1%1%bbentry.iters.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%11%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%19%bbentry_Lfor.cond1%1%bbentry.iters.: 4
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%19%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 19
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 19
smallest_point_cover_xfer.dst-ineq.from.L0%0%d_L0%0%d.iters.: 2
smallest_point_cover_xfer.dst-ineq.from.L0%0%d_L0%0%d.prove_queries.: 4
smallest_point_cover_xfer.dst-ineq.from.L3%11%bbentry_Lfor.cond1%1%bbentry.iters.: 5
smallest_point_cover_xfer.dst-ineq.from.L3%11%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 5
smallest_point_cover_xfer.dst-ineq.from.L3%19%bbentry_Lfor.cond1%1%bbentry.iters.: 16
smallest_point_cover_xfer.dst-ineq.from.L3%19%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 17
smallest_point_cover_xfer.dst-ineq.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 18
smallest_point_cover_xfer.dst-ineq.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 80
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.iters.: 6
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.prove_queries.: 6
smallest_point_cover_xfer.expr-group-bvs.from.L3%11%bbentry_Lfor.cond1%1%bbentry.iters.: 5
smallest_point_cover_xfer.expr-group-bvs.from.L3%11%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 5
smallest_point_cover_xfer.expr-group-bvs.from.L3%19%bbentry_Lfor.cond1%1%bbentry.iters.: 18
smallest_point_cover_xfer.expr-group-bvs.from.L3%19%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 38
smallest_point_cover_xfer.expr-group-bvs.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 35
smallest_point_cover_xfer.expr-group-bvs.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 46
smallest_point_cover_xfer.local-sizes-are-equal.from.L0%0%d_L0%0%d.iters.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L3%11%bbentry_Lfor.cond1%1%bbentry.iters.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L3%11%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L3%19%bbentry_Lfor.cond1%1%bbentry.iters.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L3%19%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.spec-coupling-invariants.from.L0%0%d_L0%0%d.iters.: 7
smallest_point_cover_xfer.spec-coupling-invariants.from.L0%0%d_L0%0%d.prove_queries.: 9
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%11%bbentry_Lfor.cond1%1%bbentry.iters.: 5
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%11%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%19%bbentry_Lfor.cond1%1%bbentry.iters.: 14
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%19%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 12
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 49
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 70
smallest_point_cover_xfer.src-branches-const-ineq.from.L0%0%d_L0%0%d.iters.: 2
smallest_point_cover_xfer.src-branches-const-ineq.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%11%bbentry_Lfor.cond1%1%bbentry.iters.: 7
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%11%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 11
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%19%bbentry_Lfor.cond1%1%bbentry.iters.: 20
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%19%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 22
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 33
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 37
smt-queries-cache-hits.: 202
smt-queries-yices-sat.: 1
smt-queries-z3-sat.: 157
total-correlation-possibilities.: 17
total-correlation-possibilities-mod-lsprels.: 17
total-correlations-explored.: 12

flags:
dst-aloc.: 0
dst-edges.: 11
dst-nodes.: 10
dst-sp-updates.: 0
final-CG-alloc-correlations.: 0
final-CG-counterexamples-generated-at-L3%19%bbentry_Lfor.cond1%1%bbentry.: 31
final-CG-counterexamples-generated-at-L3%7%bbentry_Lfor.cond%1%bbentry.: 17
final-CG-counterexamples-total-at-L3%19%bbentry_Lfor.cond1%1%bbentry.: 49
final-CG-counterexamples-total-at-L3%7%bbentry_Lfor.cond%1%bbentry.: 40
final-CG-dealloc-correlations.: 0
final-CG-dht-queries.: 5
final-CG-edges.: 5
final-CG-nodes.: 4
final-CG-num-invariants.: 29
final-CG-super-edges.: 0
src-edges.: 11
src-nodes.: 10
timeout-occured.: 0

info:
eq-state.: find_correlation
final-CG-time-secs.: 67.33
final-CG-time-to-total-time-ratio.: 0.65
query-time-to-total-time-ratio.: 0.23

Context stats:
exprs: count: 263526
sorts: count: 177
num_proof_queries: 644
num_proof_queries_answered_by_syntactic_check: 0
cache_stats:
m_simplify:
	----------- total:	61237
	        hit ratio:	0.991198
m_simplify_solver:
	----------- total:	5596
	        hit ratio:	0.841315
m_prune_obviously_false_branches_using_assume_clause:
	----------- total:	60
	        hit ratio:	0.333333
m_z3_solver_substitution:
	----------- total:	888
	        hit ratio:	0
m_replace_donotsimplify_using_solver_expressions_by_free_vars:
	----------- total:	888
	        hit ratio:	0
m_expr_size:
	----------- total:	17477
	        hit ratio:	0.941409
m_contains_only_constants_or_sp_versions:
	----------- total:	24
	        hit ratio:	0.791667
m_expr_evaluates_to_constant_visitor:
	----------- total:	201937
	        hit ratio:	0.487573

z3_solver expr_query_cache entry size: 297
	----------- total:	646
	             hits:	202
	        hit ratio:	0.312694
histogram (time taken by solver in ms):
[ 34.5680,  45.6979) (avg.  42.2664)     : 44
[ 45.6979,  60.4112) (avg.  51.5214)     : 110
[ 60.4112,  79.8618) (avg.  70.2897)     : 64
[ 79.8618, 105.5750) (avg.  94.7725)     : 35
[105.5750, 139.5669) (avg. 122.3556)     : 24
[139.5669, 184.5033) (avg. 162.0898)     : 10
[184.5033, 243.9079) (avg.   0.0000)     : 0
[243.9079, 322.4390) (avg. 295.2640)     : 1
[322.4390, 426.2547) (avg. 387.7900)     : 6
[426.2547, 563.4960) (avg. 536.8120)     : 3
histogram (number of quantifiers in query)
[ 0,  5) (avg.  0)                       : 1
[ 5,  9) (avg.  0)                       : 0
[ 9, 14) (avg. 12)                       : 19
[14, 18) (avg. 14)                       : 3
[18, 23) (avg. 20)                       : 151
[23, 27) (avg. 23)                       : 41
[27, 32) (avg. 31)                       : 78
[32, 36) (avg. 35)                       : 4
[36, 41) (avg.  0)                       : 0
[41, 45) (avg.  0)                       : 0
histogram (number of nodes in z3 ast)
[103, 159) (avg. 103)                    : 1
[159, 214) (avg.   0)                    : 0
[214, 270) (avg.   0)                    : 0
[270, 325) (avg. 301)                    : 53
[325, 381) (avg. 346)                    : 126
[381, 436) (avg. 392)                    : 13
[436, 492) (avg. 467)                    : 23
[492, 547) (avg. 531)                    : 21
[547, 603) (avg. 583)                    : 45
[603, 658) (avg. 622)                    : 15
Top 10 highest time taking queries:
1. [0.562s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.ub-unsigned.from_pcL3%19%bbentry_Lfor.cond1%1%bbentry.cond_apply_set_elem0_of_2.0
2. [0.557s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.expr-group-bvs.linear1-32-free_var_idx.44.from_pcL3%19%bbentry_Lfor.cond1%1%bbentry.cond_apply_set_elem0_of_1.0
3. [0.491s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.dst-ineq-houdini-guess.from_pcL3%19%bbentry_Lfor.cond1%1%bbentry.cond_apply_set_elem0_of_1.14
4. [0.414s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.expr-group-bvs.linear1-6-free_var_idx.40.from_pcL3%19%bbentry_Lfor.cond1%1%bbentry.cond_apply_set_elem0_of_2.0
5. [0.409s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.dst-ineq-houdini-guess.from_pcL3%19%bbentry_Lfor.cond1%1%bbentry.cond_apply_set_elem0_of_1.10
6. [0.408s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.expr-group-bvs.linear1-3-free_var_idx.40.from_pcL3%19%bbentry_Lfor.cond1%1%bbentry.cond_apply_set_elem0_of_2.0
7. [0.379s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.dst_edge_composition_proves_false.CGfromPC.L3%11%bbentry_Lfor.cond1%1%bbentry.dstToPC.Lfor.cond1%1%bbentry.from_pcL3%11%b.0
8. [0.360s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.expr-group-bvs.linear2-7-free_var_idx.40.from_pcL3%19%bbentry_Lfor.cond1%1%bbentry.cond_apply_set_elem0_of_2.0
9. [0.357s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.dst_edge_composition_proves_false.CGfromPC.L3%19%bbentry_Lfor.cond1%1%bbentry.dstToPC.Lfor.cond1%1%bbentry.from_pcL3%19%b.0
10. [0.295s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.ub-unsigned.from_pcL3%7%bbentry_Lfor.cond%1%bbentry.cond_apply_set_elem0_of_1.24

<MSG>5:39 : Successfully computed equivalence for function: foo.</MSG>

tfg_edge_expr_wp_fn: num_starts 231 time spent: 0:0:0 [0.004163s total; 0.000018 per start]
tfg_computeWP: num_starts 6800 time spent: 0:0:0 [0.919077s total; 0.000135 per start]
tfg_get_simplified_to_state_for_edge: num_starts 15943 time spent: 0:0:0 [0.029684s total; 0.000002 per start]
tfg_get_simplified_edge_cond_for_edge: num_starts 10564 time spent: 0:0:0 [0.019027s total; 0.000002 per start]
tfg_get_simplified_assumes_for_edge: num_starts 8718 time spent: 0:0:0 [0.014349s total; 0.000002 per start]
add_nodeces_at_pc_and_propagate: num_starts 334 time spent: 0:0:24 [24.868537s total; 0.074457 per start]
graph_with_ce_propagate_CEs_across_new_edge_for_reason: num_starts 36 time spent: 0:0:21 [21.322465s total; 0.592291 per start]
tfg_counter_example_translate_on_edge_helper: num_starts 2177 time spent: 0:0:11 [11.955915s total; 0.005492 per start]
corr_graph_edge_well_formedness_conditions_falsified_by_counter_example: num_starts 751 time spent: 0:0:36 [36.853916s total; 0.049073 per start]
counter_example_translate_using_to_state_mapping_assigning_random_consts_as_needed: num_starts 2006 time spent: 0:0:8 [8.651319s total; 0.004313 per start]
ce_evaluate_expr_assigning_random_consts_as_needed: num_starts 9439 time spent: 0:0:48 [48.191623s total; 0.005106 per start]
tfg_edge_assumes_satisfied_by_counter_example: num_starts 2021 time spent: 0:0:0 [0.115815s total; 0.000057 per start]
tfg_graph_get_vars_written_on_edge: num_starts 2006 time spent: 0:0:0 [0.047738s total; 0.000024 per start]
cg_with_rank_add_CE_at_pc: num_starts 474 time spent: 0:0:14 [14.214163s total; 0.029988 per start]
graph_with_ce_add_CE_at_pc: num_starts 228 time spent: 0:0:0 [0.010552s total; 0.000046 per start]
graph_with_guessing_add_CE_at_pc: num_starts 474 time spent: 0:0:14 [14.206509s total; 0.029972 per start]
point_set_add_point_using_CE: num_starts 2626 time spent: 0:0:1 [1.015621s total; 0.000387 per start]
graph_with_points_add_point_using_CE_at_pc: num_starts 2626 time spent: 0:0:1 [1.021137s total; 0.000389 per start]
graph_with_guessing_add_point_using_CE_at_pc: num_starts 398 time spent: 0:0:2 [2.167652s total; 0.005446 per start]
invariant_state_add_point_using_CE_at_pc: num_starts 398 time spent: 0:0:1 [1.135910s total; 0.002854 per start]
expr_label_memlabels_using_memlabel_map: num_starts 58155 time spent: 0:0:2 [2.323453s total; 0.000040 per start]
evaluate_expr_assigning_random_consts_and_check_bounds: num_starts 12914 time spent: 0:0:0 [0.560429s total; 0.000043 per start]
expr_simplify_solver: num_starts 11206 time spent: 0:0:0 [0.901639s total; 0.000080 per start]
expr_simplify_syntactic: num_starts 12478 time spent: 0:0:2 [2.156094s total; 0.000173 per start]
expr_simplify_select_on_store: num_starts 779 time spent: 0:0:1 [1.815191s total; 0.002330 per start]
expr_simplify_using_lhs_set_helper: num_starts 2324 time spent: 0:0:3 [3.308086s total; 0.001423 per start]
expr_simplify_using_lhs_set_visit_function: num_starts 22520 time spent: 0:0:3 [3.284782s total; 0.000146 per start]
expr_simplify_sort_args_to_canonicalize: num_starts 14573 time spent: 0:0:0 [0.045893s total; 0.000003 per start]
expr_simplify_eq: num_starts 1171 time spent: 0:0:0 [0.010498s total; 0.000009 per start]
expr_simplify_or: num_starts 51 time spent: 0:0:0 [0.000068s total; 0.000001 per start]
expr_simplify_and: num_starts 1389 time spent: 0:0:0 [0.008092s total; 0.000006 per start]
expr_simplify_andnot1: num_starts 132 time spent: 0:0:0 [0.001596s total; 0.000012 per start]
expr_simplify_andnot2: num_starts 1 time spent: 0:0:0 [0.000013s total; 0.000013 per start]
expr_simplify_not: num_starts 170 time spent: 0:0:0 [0.000507s total; 0.000003 per start]
expr_simplify_implies: num_starts 135 time spent: 0:0:0 [0.001182s total; 0.000009 per start]
expr_simplify_ite: num_starts 14 time spent: 0:0:0 [0.001128s total; 0.000081 per start]
canonicalize_expr_tree: num_starts 1985 time spent: 0:0:0 [0.214546s total; 0.000108 per start]
expr_simplify_memalloc_using_memlabel: num_starts 62 time spent: 0:0:0 [0.000155s total; 0.000003 per start]
expr_simplify_select_on_store_visit_function: num_starts 787 time spent: 0:0:1 [1.766109s total; 0.002244 per start]
get_arithmetic_addsub_atoms: num_starts 17491 time spent: 0:0:0 [0.010862s total; 0.000001 per start]
expr_linear_relation_holds_visit: num_starts 1781 time spent: 0:0:0 [0.017985s total; 0.000010 per start]
expr_is_consts_struct_constant: num_starts 2278 time spent: 0:0:0 [0.001530s total; 0.000001 per start]
expr_do_simplify_helper: num_starts 72717 time spent: 0:0:2 [2.240076s total; 0.000031 per start]
expr_do_simplify_helper_cache: num_starts 72717 time spent: 0:0:0 [0.074408s total; 0.000001 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor_cache: num_starts 72 time spent: 0:0:0 [0.000013s total; 0.000000 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor: num_starts 72 time spent: 0:0:0 [0.000332s total; 0.000005 per start]
evaluate_expr_and_check_bounds: num_starts 18084 time spent: 0:0:48 [48.749434s total; 0.002696 per start]
array_constant_equals: num_starts 135957 time spent: 0:0:0 [0.122700s total; 0.000001 per start]
combo_dfa_xfer_and_meet: num_starts 79 time spent: 0:0:0 [0.505921s total; 0.006404 per start]
alias_val_xfer_and_meet: num_starts 79 time spent: 0:0:0 [0.400648s total; 0.005071 per start]
get_sprel_map_from_avail_exprs: num_starts 114 time spent: 0:0:0 [0.010671s total; 0.000094 per start]
update_memlabels_for_memslot_locs: num_starts 31 time spent: 0:0:0 [0.000132s total; 0.000004 per start]
populate_gen_and_kill_sets_for_edge: num_starts 376 time spent: 0:0:0 [0.065288s total; 0.000174 per start]
compute_simplified_loc_exprs_for_edge: num_starts 819 time spent: 0:0:0 [0.302051s total; 0.000369 per start]
compute_locs_definitely_written_on_edge: num_starts 376 time spent: 0:0:0 [0.000602s total; 0.000002 per start]
get_locs_potentially_read_in_expr_using_locs_map: num_starts 90 time spent: 0:0:0 [0.033066s total; 0.000367 per start]
edge_update_memlabel_map_for_mlvars: num_starts 188 time spent: 0:0:0 [0.052603s total; 0.000280 per start]
add_new_locs_based_on_edge: num_starts 79 time spent: 0:0:0 [0.167748s total; 0.002123 per start]
expand_locset_to_include_slots_for_memmask: num_starts 141 time spent: 0:0:0 [0.001202s total; 0.000009 per start]
total: num_starts 1 time spent: 0:5:45 [345.103085s total; 345.103085 per start]
num_syntactic_match_tests = 0.
num_execution_tests = 0.
num_boolean_tests = 0.
fingerprinting rate: 0.00 per second (total), -nan per second (itable_enumerate_timer), -nan per second (excluding execution/boolean tests).

Time taken for equivalence check: 318.50s.
ftmap_run_pointsto_analysis.: 0.39459s (num_starts 2; 0.1973s/start)s.
EQ Time after pointsto analysis: 318.101s.
EQ Time after pointsto analysis and smt_query: 267.403s.
EQ Time after pointsto analysis and smt_query and bv-solve: 267.19s.
Equivalence proof found. The programs are equivalent.
