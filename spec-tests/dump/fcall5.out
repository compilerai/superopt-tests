argv[0] = /home/indrajit/scratch/repos/superopt-project/usr/local/bin/eq32
argv[1] = --disable-dst-to-src-submap
argv[2] = --smt-query-timeout=5
argv[3] = --tmpdir-path=par_tmpdir
argv[4] = --proof=fcall5.proof
argv[5] = --spec-iospecs=fcall5.iospecs
argv[6] = fcall5.spec
argv[7] = fcall5.c
Query dir: /tmp/smt-solver-tmp-files/indrajit.2890122
argv[0] = /home/indrajit/scratch/repos/superopt-project/usr/local/bin/clang
argv[1] = -Xclang
argv[2] = -disable-llvm-passes
argv[3] = -Xclang
argv[4] = -disable-O0-optnone
argv[5] = -c
argv[6] = -g
argv[7] = -emit-llvm
argv[8] = -O0
argv[9] = /home/indrajit/scratch/tests/eq-test/fcall5.c
argv[10] = -o
argv[11] = par_tmpdir/fcall5.c.bc.tmp
argv[12] = -m32

argv[0] = /home/indrajit/scratch/repos/superopt-project/usr/local/bin/llvm2tfg
argv[1] = --xml-output-format
argv[2] = text-color
argv[3] = -f
argv[4] = ALL
argv[5] = --call-context-depth
argv[6] = 0
argv[7] = --always-use-call-context-any
argv[8] = --src-etfg
argv[9] = par_tmpdir/fcall5.spec.etfg
argv[10] = par_tmpdir/fcall5.c.bc
argv[11] = -o
argv[12] = par_tmpdir/fcall5.c.dst.etfg
<MSG>0:00 : Converting LLVM IR bitcode to Transfer Function Graph (TFG) for function foo</MSG>
<MSG>0:00 : Converting LLVM IR bitcode to Transfer Function Graph (TFG) for function bar</MSG>

tfg_get_simplified_edge_cond_for_edge: num_starts 214 time spent: 0:0:0 [0.000372s total; 0.000002 per start]
tfg_get_simplified_assumes_for_edge: num_starts 233 time spent: 0:0:0 [0.000364s total; 0.000002 per start]
expr_label_memlabels_using_memlabel_map: num_starts 2786 time spent: 0:0:0 [0.016250s total; 0.000006 per start]
expr_simplify_solver: num_starts 376 time spent: 0:0:0 [0.031219s total; 0.000083 per start]
expr_simplify_syntactic: num_starts 376 time spent: 0:0:0 [0.174803s total; 0.000465 per start]
expr_simplify_select_on_store: num_starts 8 time spent: 0:0:0 [0.020997s total; 0.002625 per start]
expr_simplify_using_lhs_set_helper: num_starts 243 time spent: 0:0:0 [0.216157s total; 0.000890 per start]
expr_simplify_using_lhs_set_visit_function: num_starts 1585 time spent: 0:0:0 [0.215004s total; 0.000136 per start]
expr_simplify_sort_args_to_canonicalize: num_starts 167 time spent: 0:0:0 [0.000653s total; 0.000004 per start]
expr_simplify_eq: num_starts 12 time spent: 0:0:0 [0.000140s total; 0.000012 per start]
expr_simplify_not: num_starts 2 time spent: 0:0:0 [0.000007s total; 0.000003 per start]
expr_simplify_ite: num_starts 4 time spent: 0:0:0 [0.000460s total; 0.000115 per start]
canonicalize_expr_tree: num_starts 157 time spent: 0:0:0 [0.002862s total; 0.000018 per start]
expr_simplify_memalloc_using_memlabel: num_starts 48 time spent: 0:0:0 [0.000115s total; 0.000002 per start]
expr_simplify_select_on_store_visit_function: num_starts 8 time spent: 0:0:0 [0.020405s total; 0.002551 per start]
get_arithmetic_addsub_atoms: num_starts 138 time spent: 0:0:0 [0.000111s total; 0.000001 per start]
expr_linear_relation_holds_visit: num_starts 303 time spent: 0:0:0 [0.004633s total; 0.000015 per start]
expr_is_consts_struct_constant: num_starts 3391 time spent: 0:0:0 [0.001855s total; 0.000001 per start]
expr_do_simplify_helper: num_starts 6284 time spent: 0:0:0 [0.222113s total; 0.000035 per start]
expr_do_simplify_helper_cache: num_starts 6284 time spent: 0:0:0 [0.004318s total; 0.000001 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor_cache: num_starts 36 time spent: 0:0:0 [0.000007s total; 0.000000 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor: num_starts 36 time spent: 0:0:0 [0.000160s total; 0.000004 per start]
array_constant_equals: num_starts 151 time spent: 0:0:0 [0.000321s total; 0.000002 per start]
combo_dfa_xfer_and_meet: num_starts 238 time spent: 0:0:0 [0.374365s total; 0.001573 per start]
alias_val_xfer_and_meet: num_starts 238 time spent: 0:0:0 [0.123946s total; 0.000521 per start]
get_sprel_map_from_avail_exprs: num_starts 297 time spent: 0:0:0 [0.036598s total; 0.000123 per start]
update_memlabels_for_memslot_locs: num_starts 55 time spent: 0:0:0 [0.000273s total; 0.000005 per start]
populate_gen_and_kill_sets_for_edge: num_starts 472 time spent: 0:0:0 [0.025411s total; 0.000054 per start]
compute_simplified_loc_exprs_for_edge: num_starts 1205 time spent: 0:0:0 [0.236184s total; 0.000196 per start]
compute_locs_definitely_written_on_edge: num_starts 472 time spent: 0:0:0 [0.000208s total; 0.000000 per start]
get_locs_potentially_read_in_expr_using_locs_map: num_starts 128 time spent: 0:0:0 [0.034984s total; 0.000273 per start]
edge_update_memlabel_map_for_mlvars: num_starts 236 time spent: 0:0:0 [0.004495s total; 0.000019 per start]
add_new_locs_based_on_edge: num_starts 236 time spent: 0:0:0 [0.047055s total; 0.000199 per start]
alias_val_meet: num_starts 1 time spent: 0:0:0 [0.000096s total; 0.000096 per start]
expand_locset_to_include_slots_for_memmask: num_starts 171 time spent: 0:0:0 [0.001104s total; 0.000006 per start]
num_syntactic_match_tests = 0.
num_execution_tests = 0.
num_boolean_tests = 0.
fingerprinting rate: -nan per second (total), -nan per second (itable_enumerate_timer), -nan per second (excluding execution/boolean tests).

timers:
graph_with_paths_constructor.src.spec.bar.: 0s (num_starts 1; 0.0000s/start)
graph_with_paths_constructor.src.spec.foo.: 0s (num_starts 1; 0.0000s/start)
graph_with_proofs_constructor.src.spec.bar.: 0s (num_starts 1; 0.0000s/start)
graph_with_proofs_constructor.src.spec.foo.: 0s (num_starts 1; 0.0000s/start)
graph_with_ce_constructor.src.spec.foo.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_execution_constructor.src.spec.bar.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_execution_constructor.src.spec.foo.: 1e-06s (num_starts 1; 0.0000s/start)
tfg_constructor.src.spec.foo.after_populate_assumes_around_edge.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_ce_constructor.src.spec.bar.: 2e-06s (num_starts 1; 0.0000s/start)
graph_with_guessing_constructor.src.spec.foo.: 2e-06s (num_starts 1; 0.0000s/start)
graph_with_points_constructor.src.spec.bar.: 2e-06s (num_starts 1; 0.0000s/start)
graph_with_points_constructor.src.spec.foo.: 2e-06s (num_starts 1; 0.0000s/start)
set_string_contents_for_touched_symbols_at_zero_offset.: 2e-06s (num_starts 2; 0.0000s/start)
tfg_constructor.src.spec.bar.after_populate_assumes_around_edge.: 2e-06s (num_starts 1; 0.0000s/start)
tfg_llvm_interpret_intrinsic_fcalls.: 2e-06s (num_starts 2; 0.0000s/start)
alias_val_t::constructor_with_map_arg.: 3e-06s (num_starts 3; 0.0000s/start)
context_constructor.init.: 3e-06s (num_starts 1; 0.0000s/start)
remove_function_name_from_symbols.: 3e-06s (num_starts 2; 0.0000s/start)
graph_with_guessing_constructor.src.spec.bar.: 5e-06s (num_starts 1; 0.0000s/start)
ftmap_pointsto_analysis_combo_dfa_t.identify_arg_loc_for_arg_expr.: 1.2e-05s (num_starts 6; 0.0000s/start)
add_extra_node_at_start_pc.: 4e-05s (num_starts 2; 0.0000s/start)
context_constructor.solver.: 4e-05s (num_starts 1; 0.0000s/start)
add_assumes_to_start_edge.: 4.9e-05s (num_starts 2; 0.0000s/start)
context_constructor.: 5e-05s (num_starts 1; 0.0001s/start)
get_intersected_lr_status.: 5.1e-05s (num_starts 2; 0.0000s/start)
ftmap_pointsto_analysis_combo_dfa_t.identify_arg_locs_in_fcall_edge.: 8.8e-05s (num_starts 2; 0.0000s/start)
main.3.: 0.0001s (num_starts 1; 0.0001s/start)
expr_is_hidden_reg.: 0.000115s (num_starts 155; 0.0000s/start)
get_memlabel_set_from_mlvarnames.: 0.000154s (num_starts 4; 0.0000s/start)
expr_is_callee_save_const.: 0.000157s (num_starts 163; 0.0000s/start)
populate_lr_status_for_sprel_locs_map.calling.compute_lr_status_for_expr.: 0.000208s (num_starts 9; 0.0000s/start)
tfg::populate_loc_definedness.set_loc_definedness().: 0.000234s (num_starts 4; 0.0001s/start)
identify_farg_memlabels_at_pc.calling.compute_lr_status_for_expr.: 0.000245s (num_starts 6; 0.0000s/start)
compute_sprel_relations.: 0.000279s (num_starts 2; 0.0001s/start)
determinize_value_expr_map.: 0.000286s (num_starts 357; 0.0000s/start)
propagate_sprels.: 0.000292s (num_starts 2; 0.0001s/start)
graph_locs_add_all_specvars.: 0.000319s (num_starts 2; 0.0002s/start)
graph_locs_add_exvregs_for_edge.: 0.000383s (num_starts 88; 0.0000s/start)
compute_reachable_memlabels_map.: 0.000396s (num_starts 1; 0.0004s/start)
graph_with_aliasing_constructor.src.spec.bar.: 0.000403s (num_starts 1; 0.0004s/start)
graph_locs_add_local_vars_for_edge.: 0.00042s (num_starts 88; 0.0000s/start)
graph_locs_add_all_exvregs.: 0.00044s (num_starts 2; 0.0002s/start)
sp_version_relations_val_t::compute_transitive_closure.: 0.000464s (num_starts 53; 0.0000s/start)
graph_locs_add_all_local_vars.: 0.000487s (num_starts 2; 0.0002s/start)
get_lr_status_for_loc_ids.: 0.000513s (num_starts 10; 0.0001s/start)
ftmap_pointsto_analysis_combo_dfa_t.identify_farg_memlabels_at_pc.: 0.000562s (num_starts 2; 0.0003s/start)
lr_status_meet.: 0.000567s (num_starts 189; 0.0000s/start)
populate_memlabel_map.visit1.calling.compute_lr_status_for_expr.: 0.000571s (num_starts 8; 0.0001s/start)
populate_locid2expr_map.: 0.00058s (num_starts 4; 0.0001s/start)
graph_with_edge_structures_constructor.src.spec.bar.: 0.000605s (num_starts 1; 0.0006s/start)
tfg::populate_loc_definedness.post_dfa.: 0.000619s (num_starts 4; 0.0002s/start)
tfg_get_write_memlabels.: 0.0007s (num_starts 2; 0.0003s/start)
expr_represents_llvm_undef.: 0.000883s (num_starts 167; 0.0000s/start)
graph_with_locs_constructor.src.spec.bar.: 0.000957s (num_starts 1; 0.0010s/start)
ftmap_pointsto_analysis_combo_dfa_t.ftmap_convert_caller_pointsto_value_to_callee_pointsto_value.: 0.000976s (num_starts 2; 0.0005s/start)
graph_with_aliasing_constructor.src.spec.foo.: 0.000984s (num_starts 1; 0.0010s/start)
tfg_get_read_memlabels.: 0.001039s (num_starts 2; 0.0005s/start)
graph_with_simplified_assets_constructor.src.spec.bar.: 0.001044s (num_starts 1; 0.0010s/start)
graph_locs_add_all_llvmvars.: 0.001185s (num_starts 2; 0.0006s/start)
canonicalize_llvm_nextpcs.: 0.001294s (num_starts 2; 0.0006s/start)
sp_version_relations_val_t::generate_vals_from_gen_set.: 0.001351s (num_starts 236; 0.0000s/start)
graph_visit_exprs_const.const.: 0.00156s (num_starts 4; 0.0004s/start)
ftmap_pointsto_analysis_combo_dfa_t.ftmap_dfa_update_callee_boundary_value.: 0.001654s (num_starts 2; 0.0008s/start)
def_analysis::xfer_and_meet.: 0.001675s (num_starts 176; 0.0000s/start)
tfg_constructor.src.spec.bar.after_transitive_closure.: 0.001742s (num_starts 1; 0.0017s/start)
tfg_constructor.src.spec.bar.post_parsing.: 0.001744s (num_starts 1; 0.0017s/start)
tfg_constructor.src.spec.bar.after_string_contents.: 0.001753s (num_starts 1; 0.0018s/start)
tfg_constructor.src.spec.bar.after_compute_max_memlabel_varnum.: 0.001756s (num_starts 1; 0.0018s/start)
tfg_constructor.src.spec.bar.: 0.00176s (num_starts 1; 0.0018s/start)
get_summary_for_calling_functions.: 0.001767s (num_starts 2; 0.0009s/start)
ftmap_pointsto_analysis_combo_dfa_t.compute_summary_function.: 0.001781s (num_starts 2; 0.0009s/start)
graph_with_locs_constructor.src.spec.foo.: 0.001814s (num_starts 1; 0.0018s/start)
tfg_llvm_t::tfg_llvm_populate_varname_lr_status.: 0.001841s (num_starts 2; 0.0009s/start)
graph_with_predicates_constructor.src.spec.bar.: 0.001915s (num_starts 1; 0.0019s/start)
sp_version_relations_val_t::meet.: 0.002004s (num_starts 4350; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.post_dfa.: 0.002324s (num_starts 2; 0.0012s/start)
tfg::collect_assumes_around_edge.: 0.002376s (num_starts 233; 0.0000s/start)
populate_exit_return_values_for_llvm_method.: 0.00242s (num_starts 2; 0.0012s/start)
graph_with_edge_structures_constructor.src.spec.foo.: 0.002422s (num_starts 1; 0.0024s/start)
tfg_llvm_t::tfg_llvm_fill_remaining_llvm_to_source_mappings_using_avail_exprs.: 0.002619s (num_starts 2; 0.0013s/start)
graph_add_location_slots_using_state_mem_acc_map.: 0.002647s (num_starts 236; 0.0000s/start)
expr_linear_relation_holds::visit.var.: 0.003532s (num_starts 167; 0.0000s/start)
tfg_preprocess.dst.llvm.bar.: 0.004122s (num_starts 1; 0.0041s/start)
edge_update_memlabel_map_for_mlvars.populate_memlabel_map.: 0.004248s (num_starts 236; 0.0000s/start)
graph_with_simplified_assets_constructor.src.spec.foo.: 0.004447s (num_starts 1; 0.0044s/start)
expr_substitute_using_available_exprs_submap.: 0.00462s (num_starts 160; 0.0000s/start)
compute_z3_expr.: 0.005185s (num_starts 152; 0.0000s/start)
query:convert_from_z3.: 0.005271s (num_starts 152; 0.0000s/start)
graph_visit_exprs.: 0.00557s (num_starts 8; 0.0007s/start)
populate_transitive_closure.: 0.005635s (num_starts 2; 0.0028s/start)
graph_with_predicates_constructor.src.spec.foo.: 0.005817s (num_starts 1; 0.0058s/start)
tfg_constructor.src.spec.foo.after_transitive_closure.: 0.007096s (num_starts 1; 0.0071s/start)
tfg_constructor.src.spec.foo.post_parsing.: 0.007099s (num_starts 1; 0.0071s/start)
tfg_constructor.src.spec.foo.after_string_contents.: 0.007103s (num_starts 1; 0.0071s/start)
tfg_constructor.src.spec.foo.after_compute_max_memlabel_varnum.: 0.007108s (num_starts 1; 0.0071s/start)
tfg_constructor.src.spec.foo.: 0.007111s (num_starts 1; 0.0071s/start)
tfg_llvm_t::tfg_llvm_compute_pc_to_llvm_to_source_varname_map.: 0.007699s (num_starts 2; 0.0038s/start)
get_function_tfg_map.bar.: 0.008127s (num_starts 1; 0.0081s/start)
populate_dominator_and_postdominator_relations.: 0.009926s (num_starts 4; 0.0025s/start)
compute_lr_status_for_expr.: 0.010204s (num_starts 154; 0.0001s/start)
compute_new_lr_status_on_locs.calling.compute_lr_status_for_expr.: 0.010246s (num_starts 131; 0.0001s/start)
compute_new_lr_status_on_locs.loc_lr_status.simplify_and_compute_lr_status.: 0.010447s (num_starts 131; 0.0001s/start)
rdefs_locs_ssa_analysis::xfer_and_meet.: 0.010866s (num_starts 175; 0.0001s/start)
expr_contains_only_constants_or_sp_versions_or_count_sort_vars.: 0.010995s (num_starts 4377; 0.0000s/start)
query:convert_to_z3.: 0.011215s (num_starts 152; 0.0001s/start)
create_closure_matrix.: 0.012151s (num_starts 291; 0.0000s/start)
graph_identify_back_edges.: 0.01361s (num_starts 10; 0.0014s/start)
graph_identify_natural_loops.: 0.014423s (num_starts 10; 0.0014s/start)
populate_simplified_to_state.: 0.014912s (num_starts 6; 0.0025s/start)
tfg::populate_loc_definedness.before_solve.: 0.015323s (num_starts 4; 0.0038s/start)
tfg::populate_loc_definedness.before_initialize.: 0.016197s (num_starts 4; 0.0040s/start)
tfg::populate_loc_definedness.: 0.016815s (num_starts 4; 0.0042s/start)
graph_to_stream.: 0.018236s (num_starts 2; 0.0091s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.sprel.: 0.020681s (num_starts 2786; 0.0000s/start)
query:simplify-z3.: 0.020685s (num_starts 309; 0.0001s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::sp_version_relations_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.021405s (num_starts 238; 0.0001s/start)
populate_branch_affecting_locs.: 0.021972s (num_starts 4; 0.0055s/start)
find_dominators.: 0.02207s (num_starts 18; 0.0012s/start)
populate_simplified_assets.: 0.022955s (num_starts 12; 0.0019s/start)
compute_regions.: 0.023846s (num_starts 10; 0.0024s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_solve.: 0.024147s (num_starts 2; 0.0121s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_initialize.: 0.024626s (num_starts 2; 0.0123s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.: 0.025262s (num_starts 2; 0.0126s/start)
tfg_preprocess.dst.llvm.foo.: 0.033162s (num_starts 1; 0.0332s/start)
tfg::tfg_preprocess.: 0.037291s (num_starts 2; 0.0186s/start)
get_function_tfg_map.foo.: 0.041417s (num_starts 1; 0.0414s/start)
avail_exprs_val_t::generate_vals_from_gen_set.: 0.04215s (num_starts 236; 0.0002s/start)
get_tfg.: 0.049452s (num_starts 2; 0.0247s/start)
get_function_tfg_map.: 0.04955s (num_starts 2; 0.0248s/start)
create_sp_version_relations_lattice_at_pc.: 0.05493s (num_starts 291; 0.0002s/start)
compute_new_lr_status_on_locs.: 0.070258s (num_starts 236; 0.0003s/start)
populate_locs_potentially_modified_on_edge.: 0.070367s (num_starts 6; 0.0117s/start)
graph_per_loc_dfa_val_t<avail_exprs_val_t>::meet.: 0.073901s (num_starts 237; 0.0003s/start)
main.2.: 0.078973s (num_starts 1; 0.0790s/start)
expr_label_memlabels_using_memlabel_map_visitor.simplify.: 0.087126s (num_starts 2786; 0.0000s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.model.: 0.090291s (num_starts 2786; 0.0000s/start)
populate_auxilliary_structures_dependent_on_locs.: 0.093351s (num_starts 6; 0.0156s/start)
avail_exprs_create_submap.: 0.106828s (num_starts 710; 0.0002s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.: 0.110311s (num_starts 2786; 0.0000s/start)
liveness_analysis_conservative::xfer_and_meet.: 0.115988s (num_starts 264; 0.0004s/start)
ftmap_pointsto_analysis_combo_dfa_t.alias_val_xfer_and_meet.: 0.124314s (num_starts 238; 0.0005s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::avail_exprs_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.131885s (num_starts 238; 0.0006s/start)
populate_loc_liveness.: 0.144877s (num_starts 4; 0.0362s/start)
expr_do_simplify_using_lhs_set_and_precond.: 0.216443s (num_starts 243; 0.0009s/start)
tfg_postprocess_after_pointsto_analysis.: 0.299315s (num_starts 2; 0.1497s/start)
ftmap_pointsto_analysis_combo_dfa_t.ftmap_dfa_flow_insensitive_xfer_and_meet.: 0.320081s (num_starts 234; 0.0014s/start)
tfg_llvm_t::tfg_postprocess_after_pointsto_analysis.: 0.343839s (num_starts 2; 0.1719s/start)
ftmap_run_pointsto_analysis.: 0.765587s (num_starts 1; 0.7656s/start)
parse_consts_db.: 6.04475s (num_starts 1; 6.0448s/start)
main.: 6.99372s (num_starts 1; 6.9937s/start)

counters:

flags:

info:


<MSG>0:00 : Converting Spec to Transfer Function Graph (TFG)...</MSG>
<MSG>0:06 : Converting C source code to LLVM IR bitcode...</MSG>
<MSG>0:12 : Converting LLVM IR bitcode to Transfer Function Graph (TFG)...</MSG>
<MSG>0:19 : Searching for equivalence at unroll factor 1</MSG>
<MSG>0:19 : Reading in SPEC-LLVM I/O specification from file fcall5.iospecs...</MSG>
<MSG>0:20 : Computing equivalence for function: bar...</MSG>
<MSG>0:20 : Constructing SSA for SPEC TFG...</MSG>
<MSG>0:20 : Constructing SSA for LLVM TFG...</MSG>
<MSG>0:20 : Finished SSA construction for both TFGs...</MSG>
<MSG>0:20 : Computing equivalence of the two TFGs ( SPEC and LLVM )...</MSG>
<MSG>0:20 : Chose (after CE propagation) product-TFG bar (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: nullptr
  src-full-pathset: nullptr
<MSG>0:21 : product-TFG bar: Enumerating correlations for L0%0%d=>Lentry%1%fcallStart[mu 1, delta {1,0}] starting at L0%0%d_L0%0%d
</MSG>
<MSG>0:21 : Considering 1 paths to src pc L4%1%fcallStart as correlation candidates for L0%0%d=>Lentry%1%fcallStart[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:21 : Attempting correlation of src pathset L0%0%d=>L4%1%fcallStart[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lentry%1%fcallStart[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:21 : Found 1 feasible correlations for paths to src pc L4%1%fcallStart as correlation candidates for L0%0%d=>Lentry%1%fcallStart[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:21 : product-TFG bar: Found 1 correlations for L0%0%d=>Lentry%1%fcallStart[mu 1, delta {1,0}] starting at L0%0%d_L0%0%d
</MSG>
<MSG>0:21 : product-TFG bar created 1 possibilities in group bar.A...</MSG>
<MSG>0:21 : Chose (for CE propagation) product-TFG bar.A1 (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lentry%1%fcallStart[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L4%1%fcallStart[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:21 : Finished adding lsprel-assumes for allocation to the product-TFG bar.A1...</MSG>
<MSG>0:21 : Finished adding lsprel-assumes for deallocation to the product-TFG bar.A1...</MSG>
<MSG>0:21 : Creating ssa-path for the src-tfg path L0%0%d --> L4%1%fcallStart ending at L4%1%fcallStart_Lentry%1%fcallStart
</MSG>
<MSG>0:21 : Adding a CG edge composition using the src path L0%0%d --> L4%1%fcallStart and dst path L0%0%d --> Lentry%1%fcallStart</MSG>
<MSG>0:21 : Identifying common alloc-deallocs in the src path L0%0%d --> L4%1%fcallStart and dst path L0%0%d --> Lentry%1%fcallStart
</MSG>
<MSG>0:21 : Identified no common alloc-deallocs in the src path L0%0%d --> L4%1%fcallStart and dst path L0%0%d --> Lentry%1%fcallStart</MSG>
<MSG>0:21 : Adding new edge to the product-TFG bar.A1 for fromPC L0%0%d_L0%0%d and toPC L4%1%fcallStart_Lentry%1%fcallStart, src path L0%0%d --> L4%1%fcallStart and dst path L0%0%d --> Lentry%1%fcallStart...</MSG>
<MSG>0:21 : bar.A1: Updating dst fcall edge using src fcall edge for toPC L4%1%fcallStart_Lentry%1%fcallStart...</MSG>
<MSG>0:21 : bar.A1: Computing loop hoisting select expressions at toPC L4%1%fcallStart_Lentry%1%fcallStart...</MSG>
<MSG>0:21 : bar.A1: Computing loop hoisting non-linear expressions at toPC L4%1%fcallStart_Lentry%1%fcallStart...</MSG>
<MSG>0:21 : bar.A1: Adding node L4%1%fcallStart_Lentry%1%fcallStart to the product-TFG...</MSG>
<MSG>0:21 : bar.A1: Getting alloca-ptrs on edge L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart...</MSG>
<MSG>0:21 : bar.A1: Found no alloca-ptrs on edge L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart...</MSG>
<MSG>0:21 : bar.A1: Adding edge L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart...</MSG>
<MSG>0:21 : bar.A1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:21 : bar.A1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:21 : bar.A1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:21 : bar.A1: Propagated 2 out of 2 counter-examples across edge L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart</MSG>
<MSG>0:21 : bar.A1: Added the 2 propagated CEs at PC L4%1%fcallStart_Lentry%1%fcallStart and propagated further.
</MSG>
<MSG>0:21 : bar.A1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:21 : bar.A1: Finished executing CG's add edge function...</MSG>
<MSG>0:21 : bar.A1: Computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart...</MSG>
<MSG>0:21 : bar.A1: Done computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart...</MSG>
<MSG>0:21 : Done adding new edge to the product-TFG bar.A1 for fromPC L0%0%d_L0%0%d and toPC L4%1%fcallStart_Lentry%1%fcallStart, src path L0%0%d --> L4%1%fcallStart and dst path L0%0%d --> Lentry%1%fcallStart...</MSG>
<MSG>0:21 : Done adding a CG edge composition using the src path L0%0%d --> L4%1%fcallStart and dst path L0%0%d --> Lentry%1%fcallStart</MSG>
<MSG>0:21 : Added correlation to the product-TFG bar.A1 (d:0, s:0, sp: 0) and created a correlation entry...</MSG>
<MSG>0:21 : Chose (after CE propagation) product-TFG bar.A1 (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart (C L0%0%d => C L4%1%fcallStart at mu 1 delta {1,0}, A L0%0%d => A (line 12 at column 10) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L4%1%fcallStart_Lentry%1%fcallStart (C L4%1%fcallStart, A (line 12 at column 10))
                L4%1%fcallStart_Lentry%1%fcallStart [inductive-invariants] contains 1 counterexamples (for correlating 4 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lentry%1%fcallStart[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L4%1%fcallStart[mu 1, delta {1,0}]
<MSG>0:21 : bar.A1: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart and other downstream edges that change due to it...</MSG>
<MSG>0:21 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart...</MSG>
<MSG>0:21 : bar.A1: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart) ...</MSG>
<MSG>0:21 : bar.A1: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart), result: unchanged</MSG>
<MSG>0:21 : bar.A1: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>0:21 : bar.A1: Relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart) ...</MSG>
<MSG>0:21 : bar.A1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart)...</MSG>
<MSG>0:21 : bar.A1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:21 : bar.A1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 4 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart)...</MSG>
<MSG>0:29 : bar.A1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart). changed = 1 proof-stats=dht16-prove_trivial0-prove16...</MSG>
<MSG>0:29 : bar.A1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 10 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart)...</MSG>
<MSG>0:51 : bar.A1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart). changed = 1 proof-stats=dht11-prove_trivial0-prove11...</MSG>
<MSG>0:51 : bar.A1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart)...</MSG>
<MSG>0:51 : bar.A1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:51 : bar.A1: Done relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart), result: changed ...</MSG>
<MSG>0:51 : bar.A1: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart), result: changed( 0, 1 ) ...</MSG>
<MSG>0:51 : bar.A1 (d:0, s:0, sp: 0): checked newly added edge and inferred invariants...</MSG>
<MSG>0:51 : bar.A1 (d:0, s:0, sp: 0): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:51 : product-TFG bar.A1: Enumerating correlations for Lentry%1%fcallStart=>Lentry%1%fcallEnd[mu 1, delta {1,0}] starting at L4%1%fcallStart_Lentry%1%fcallStart
</MSG>
<MSG>0:51 : Considering 1 paths to src pc L4%1%fcallEnd as correlation candidates for Lentry%1%fcallStart=>Lentry%1%fcallEnd[mu 1, delta {1,0}] at L4%1%fcallStart_Lentry%1%fcallStart
</MSG>
<MSG>0:51 : Attempting correlation of src pathset L4%1%fcallStart=>L4%1%fcallEnd[mu 1, delta {1,0}] as correlation candidate for Lentry%1%fcallStart=>Lentry%1%fcallEnd[mu 1, delta {1,0}] at L4%1%fcallStart_Lentry%1%fcallStart
</MSG>
<MSG>0:51 : Found 1 feasible correlations for paths to src pc L4%1%fcallEnd as correlation candidates for Lentry%1%fcallStart=>Lentry%1%fcallEnd[mu 1, delta {1,0}] at L4%1%fcallStart_Lentry%1%fcallStart
</MSG>
<MSG>0:51 : product-TFG bar.A1: Found 1 correlations for Lentry%1%fcallStart=>Lentry%1%fcallEnd[mu 1, delta {1,0}] starting at L4%1%fcallStart_Lentry%1%fcallStart
</MSG>
<MSG>0:51 : product-TFG bar.A1 created 1 possibilities in group bar.A1.B...</MSG>
<MSG>0:51 : Chose (for CE propagation) product-TFG bar.A1.B1 (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart (C L0%0%d => C L4%1%fcallStart at mu 1 delta {1,0}, A L0%0%d => A (line 12 at column 10) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L4%1%fcallStart_Lentry%1%fcallStart (C L4%1%fcallStart, A (line 12 at column 10))
                L4%1%fcallStart_Lentry%1%fcallStart [inductive-invariants] contains 23 counterexamples (for correlating 4 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lentry%1%fcallStart=>Lentry%1%fcallEnd[mu 1, delta {1,0}]
  src-full-pathset: L4%1%fcallStart=>L4%1%fcallEnd[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:51 : Finished adding lsprel-assumes for allocation to the product-TFG bar.A1.B1...</MSG>
<MSG>0:51 : Finished adding lsprel-assumes for deallocation to the product-TFG bar.A1.B1...</MSG>
<MSG>0:51 : Creating ssa-path for the src-tfg path L4%1%fcallStart --> L4%1%fcallEnd ending at L4%1%fcallEnd_Lentry%1%fcallEnd
</MSG>
<MSG>0:51 : Adding a CG edge composition using the src path L4%1%fcallStart --> L4%1%fcallEnd and dst path Lentry%1%fcallStart --> Lentry%1%fcallEnd</MSG>
<MSG>0:51 : Identifying common alloc-deallocs in the src path L4%1%fcallStart --> L4%1%fcallEnd and dst path Lentry%1%fcallStart --> Lentry%1%fcallEnd
</MSG>
<MSG>0:51 : Identified no common alloc-deallocs in the src path L4%1%fcallStart --> L4%1%fcallEnd and dst path Lentry%1%fcallStart --> Lentry%1%fcallEnd</MSG>
<MSG>0:51 : Adding new edge to the product-TFG bar.A1.B1 for fromPC L4%1%fcallStart_Lentry%1%fcallStart and toPC L4%1%fcallEnd_Lentry%1%fcallEnd, src path L4%1%fcallStart --> L4%1%fcallEnd and dst path Lentry%1%fcallStart --> Lentry%1%fcallEnd...</MSG>
<MSG>0:51 : bar.A1.B1: Computing loop hoisting select expressions at toPC L4%1%fcallEnd_Lentry%1%fcallEnd...</MSG>
<MSG>0:51 : bar.A1.B1: Computing loop hoisting non-linear expressions at toPC L4%1%fcallEnd_Lentry%1%fcallEnd...</MSG>
<MSG>0:51 : bar.A1.B1: Adding node L4%1%fcallEnd_Lentry%1%fcallEnd to the product-TFG...</MSG>
<MSG>0:51 : bar.A1.B1: Getting alloca-ptrs on edge L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd...</MSG>
<MSG>0:51 : bar.A1.B1: Found no alloca-ptrs on edge L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd...</MSG>
<MSG>0:51 : bar.A1.B1: Adding edge L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd...</MSG>
<MSG>0:51 : bar.A1.B1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:51 : bar.A1.B1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:51 : bar.A1.B1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:51 : bar.A1.B1: Propagated 23 out of 23 counter-examples across edge L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd</MSG>
<MSG>0:51 : bar.A1.B1: Added the 23 propagated CEs at PC L4%1%fcallEnd_Lentry%1%fcallEnd and propagated further.
</MSG>
<MSG>0:51 : bar.A1.B1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:51 : bar.A1.B1: Finished executing CG's add edge function...</MSG>
<MSG>0:51 : bar.A1.B1: Computing CG regions after the addition of the edge L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd...</MSG>
<MSG>0:51 : bar.A1.B1: Done computing CG regions after the addition of the edge L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd...</MSG>
<MSG>0:51 : Done adding new edge to the product-TFG bar.A1.B1 for fromPC L4%1%fcallStart_Lentry%1%fcallStart and toPC L4%1%fcallEnd_Lentry%1%fcallEnd, src path L4%1%fcallStart --> L4%1%fcallEnd and dst path Lentry%1%fcallStart --> Lentry%1%fcallEnd...</MSG>
<MSG>0:51 : Done adding a CG edge composition using the src path L4%1%fcallStart --> L4%1%fcallEnd and dst path Lentry%1%fcallStart --> Lentry%1%fcallEnd</MSG>
<MSG>0:51 : Added correlation to the product-TFG bar.A1.B1 (d:0, s:0, sp: 0) and created a correlation entry...</MSG>
<MSG>0:51 : Chose (after CE propagation) product-TFG bar.A1.B1 (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart (C L0%0%d => C L4%1%fcallStart at mu 1 delta {1,0}, A L0%0%d => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd (C L4%1%fcallStart => C L4%1%fcallEnd at mu 1 delta {1,0}, A (line 12 at column 10) => A (line 12 at column 10) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L4%1%fcallStart_Lentry%1%fcallStart (C L4%1%fcallStart, A (line 12 at column 10))
                L4%1%fcallStart_Lentry%1%fcallStart [inductive-invariants] contains 23 counterexamples (for correlating 4 bv exprs)
            L4%1%fcallEnd_Lentry%1%fcallEnd (C L4%1%fcallEnd, A (line 12 at column 10))
                L4%1%fcallEnd_Lentry%1%fcallEnd [inductive-invariants] contains 16 counterexamples (for correlating 5 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lentry%1%fcallStart=>Lentry%1%fcallEnd[mu 1, delta {1,0}]
  src-full-pathset: L4%1%fcallStart=>L4%1%fcallEnd[mu 1, delta {1,0}]
<MSG>0:51 : bar.A1.B1: Updating invariants over the newly added edges in edge composition L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd and other downstream edges that change due to it...</MSG>
<MSG>0:51 : Constructed infer_invariants_dfa with initial worklist L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd...</MSG>
<MSG>0:51 : bar.A1.B1: Relaxing dst graph's memlabels for edge composition (L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd) ...</MSG>
<MSG>0:51 : bar.A1.B1: Done relaxing dst graph's memlabels for edge composition (L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd), result: unchanged</MSG>
<MSG>0:51 : bar.A1.B1: Checking well-formedness assertions on outgoing edges from L4%1%fcallStart_Lentry%1%fcallStart ...</MSG>
<MSG>0:51 : bar.A1.B1: Relaxing invariants across the edge composition (L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd) ...</MSG>
<MSG>0:51 : bar.A1.B1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd)...</MSG>
<MSG>0:51 : bar.A1.B1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:51 : bar.A1.B1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 5 exprs and 16 CEs across the edge composition (L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd)...</MSG>
<MSG>0:51 : bar.A1.B1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:51 : bar.A1.B1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 30 exprs and 1 CEs across the edge composition (L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd)...</MSG>
<MSG>1:16 : bar.A1.B1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd). changed = 1 proof-stats=dht31-prove_trivial9-prove22...</MSG>
<MSG>1:16 : bar.A1.B1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd)...</MSG>
<MSG>1:16 : bar.A1.B1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:16 : bar.A1.B1: Done relaxing invariants across the edge composition (L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd), result: changed ...</MSG>
<MSG>1:16 : bar.A1.B1: Done relaxing memlabels and invariants across the edge composition (L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd), result: changed( 0, 1 ) ...</MSG>
<MSG>1:16 : bar.A1.B1 (d:0, s:0, sp: 0): checked newly added edge and inferred invariants...</MSG>
<MSG>1:16 : bar.A1.B1 (d:0, s:0, sp: 0): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>1:16 : product-TFG bar.A1.B1: Enumerating correlations for Lentry%1%fcallEnd=>Lentry%2%fcallStart[mu 1, delta {1,0}] starting at L4%1%fcallEnd_Lentry%1%fcallEnd
</MSG>
<MSG>1:16 : Considering 1 paths to src pc L4%2%fcallStart as correlation candidates for Lentry%1%fcallEnd=>Lentry%2%fcallStart[mu 1, delta {1,0}] at L4%1%fcallEnd_Lentry%1%fcallEnd
</MSG>
<MSG>1:16 : Attempting correlation of src pathset L4%1%fcallEnd=>L4%2%fcallStart[mu 1, delta {1,0}] as correlation candidate for Lentry%1%fcallEnd=>Lentry%2%fcallStart[mu 1, delta {1,0}] at L4%1%fcallEnd_Lentry%1%fcallEnd
</MSG>
<MSG>1:16 : Found 1 feasible correlations for paths to src pc L4%2%fcallStart as correlation candidates for Lentry%1%fcallEnd=>Lentry%2%fcallStart[mu 1, delta {1,0}] at L4%1%fcallEnd_Lentry%1%fcallEnd
</MSG>
<MSG>1:16 : product-TFG bar.A1.B1: Found 1 correlations for Lentry%1%fcallEnd=>Lentry%2%fcallStart[mu 1, delta {1,0}] starting at L4%1%fcallEnd_Lentry%1%fcallEnd
</MSG>
<MSG>1:16 : product-TFG bar.A1.B1 created 1 possibilities in group bar.A1.B1.C...</MSG>
<MSG>1:16 : Chose (for CE propagation) product-TFG bar.A1.B1.C1 (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart (C L0%0%d => C L4%1%fcallStart at mu 1 delta {1,0}, A L0%0%d => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd (C L4%1%fcallStart => C L4%1%fcallEnd at mu 1 delta {1,0}, A (line 12 at column 10) => A (line 12 at column 10) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L4%1%fcallStart_Lentry%1%fcallStart (C L4%1%fcallStart, A (line 12 at column 10))
                L4%1%fcallStart_Lentry%1%fcallStart [inductive-invariants] contains 23 counterexamples (for correlating 4 bv exprs)
            L4%1%fcallEnd_Lentry%1%fcallEnd (C L4%1%fcallEnd, A (line 12 at column 10))
                L4%1%fcallEnd_Lentry%1%fcallEnd [inductive-invariants] contains 17 counterexamples (for correlating 5 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lentry%1%fcallEnd=>Lentry%2%fcallStart[mu 1, delta {1,0}]
  src-full-pathset: L4%1%fcallEnd=>L4%2%fcallStart[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>1:16 : Finished adding lsprel-assumes for allocation to the product-TFG bar.A1.B1.C1...</MSG>
<MSG>1:16 : Finished adding lsprel-assumes for deallocation to the product-TFG bar.A1.B1.C1...</MSG>
<MSG>1:16 : Creating ssa-path for the src-tfg path L4%1%fcallEnd --> L4%2%fcallStart ending at L4%2%fcallStart_Lentry%2%fcallStart
</MSG>
<MSG>1:16 : Adding a CG edge composition using the src path L4%1%fcallEnd --> L4%2%fcallStart and dst path Lentry%1%fcallEnd --> Lentry%2%fcallStart</MSG>
<MSG>1:16 : Identifying common alloc-deallocs in the src path L4%1%fcallEnd --> L4%2%fcallStart and dst path Lentry%1%fcallEnd --> Lentry%2%fcallStart
</MSG>
<MSG>1:16 : Identified no common alloc-deallocs in the src path L4%1%fcallEnd --> L4%2%fcallStart and dst path Lentry%1%fcallEnd --> Lentry%2%fcallStart</MSG>
<MSG>1:16 : Adding new edge to the product-TFG bar.A1.B1.C1 for fromPC L4%1%fcallEnd_Lentry%1%fcallEnd and toPC L4%2%fcallStart_Lentry%2%fcallStart, src path L4%1%fcallEnd --> L4%2%fcallStart and dst path Lentry%1%fcallEnd --> Lentry%2%fcallStart...</MSG>
<MSG>1:16 : bar.A1.B1.C1: Updating dst fcall edge using src fcall edge for toPC L4%2%fcallStart_Lentry%2%fcallStart...</MSG>
<MSG>1:16 : bar.A1.B1.C1: Computing loop hoisting select expressions at toPC L4%2%fcallStart_Lentry%2%fcallStart...</MSG>
<MSG>1:16 : bar.A1.B1.C1: Computing loop hoisting non-linear expressions at toPC L4%2%fcallStart_Lentry%2%fcallStart...</MSG>
<MSG>1:16 : bar.A1.B1.C1: Adding node L4%2%fcallStart_Lentry%2%fcallStart to the product-TFG...</MSG>
<MSG>1:16 : bar.A1.B1.C1: Getting alloca-ptrs on edge L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart...</MSG>
<MSG>1:16 : bar.A1.B1.C1: Found no alloca-ptrs on edge L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart...</MSG>
<MSG>1:16 : bar.A1.B1.C1: Adding edge L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart...</MSG>
<MSG>1:16 : bar.A1.B1.C1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>1:16 : bar.A1.B1.C1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>1:16 : bar.A1.B1.C1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>1:16 : bar.A1.B1.C1: Propagated 0 out of 17 counter-examples across edge L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart</MSG>
<MSG>1:16 : bar.A1.B1.C1: Added the 0 propagated CEs at PC L4%2%fcallStart_Lentry%2%fcallStart and propagated further.
</MSG>
<MSG>1:16 : bar.A1.B1.C1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>1:16 : bar.A1.B1.C1: Finished executing CG's add edge function...</MSG>
<MSG>1:16 : bar.A1.B1.C1: Computing CG regions after the addition of the edge L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart...</MSG>
<MSG>1:16 : bar.A1.B1.C1: Done computing CG regions after the addition of the edge L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart...</MSG>
<MSG>1:16 : Done adding new edge to the product-TFG bar.A1.B1.C1 for fromPC L4%1%fcallEnd_Lentry%1%fcallEnd and toPC L4%2%fcallStart_Lentry%2%fcallStart, src path L4%1%fcallEnd --> L4%2%fcallStart and dst path Lentry%1%fcallEnd --> Lentry%2%fcallStart...</MSG>
<MSG>1:16 : Done adding a CG edge composition using the src path L4%1%fcallEnd --> L4%2%fcallStart and dst path Lentry%1%fcallEnd --> Lentry%2%fcallStart</MSG>
<MSG>1:16 : Added correlation to the product-TFG bar.A1.B1.C1 (d:0, s:0, sp: 0) and created a correlation entry...</MSG>
<MSG>1:16 : Chose (after CE propagation) product-TFG bar.A1.B1.C1 (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart (C L0%0%d => C L4%1%fcallStart at mu 1 delta {1,0}, A L0%0%d => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd (C L4%1%fcallStart => C L4%1%fcallEnd at mu 1 delta {1,0}, A (line 12 at column 10) => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart (C L4%1%fcallEnd => C L4%2%fcallStart at mu 1 delta {1,0}, A (line 12 at column 10) => A (line 12 at column 10) at mu 1 delta {1,0})
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L4%1%fcallStart_Lentry%1%fcallStart (C L4%1%fcallStart, A (line 12 at column 10))
                L4%1%fcallStart_Lentry%1%fcallStart [inductive-invariants] contains 23 counterexamples (for correlating 4 bv exprs)
            L4%1%fcallEnd_Lentry%1%fcallEnd (C L4%1%fcallEnd, A (line 12 at column 10))
                L4%1%fcallEnd_Lentry%1%fcallEnd [inductive-invariants] contains 17 counterexamples (for correlating 5 bv exprs)
            L4%2%fcallStart_Lentry%2%fcallStart (C L4%2%fcallStart, A (line 12 at column 10))
                L4%2%fcallStart_Lentry%2%fcallStart [inductive-invariants] contains 0 counterexamples (for correlating 5 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lentry%1%fcallEnd=>Lentry%2%fcallStart[mu 1, delta {1,0}]
  src-full-pathset: L4%1%fcallEnd=>L4%2%fcallStart[mu 1, delta {1,0}]
<MSG>1:16 : bar.A1.B1.C1: Updating invariants over the newly added edges in edge composition L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart and other downstream edges that change due to it...</MSG>
<MSG>1:16 : Constructed infer_invariants_dfa with initial worklist L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart...</MSG>
<MSG>1:16 : bar.A1.B1.C1: Relaxing dst graph's memlabels for edge composition (L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart) ...</MSG>
<MSG>1:16 : bar.A1.B1.C1: Done relaxing dst graph's memlabels for edge composition (L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart), result: unchanged</MSG>
<MSG>1:16 : bar.A1.B1.C1: Checking well-formedness assertions on outgoing edges from L4%1%fcallEnd_Lentry%1%fcallEnd ...</MSG>
<MSG>1:17 : bar.A1.B1.C1: Relaxing invariants across the edge composition (L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart) ...</MSG>
<MSG>1:17 : bar.A1.B1.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart)...</MSG>
<MSG>1:17 : bar.A1.B1.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart). changed = 1 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>1:17 : bar.A1.B1.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 5 exprs and 1 CEs across the edge composition (L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart)...</MSG>
<MSG>1:20 : bar.A1.B1.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart). changed = 1 proof-stats=dht8-prove_trivial1-prove7...</MSG>
<MSG>1:20 : bar.A1.B1.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 39 exprs and 1 CEs across the edge composition (L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart)...</MSG>
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2890122/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.7.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2890122/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.0.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2890122/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.8.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2890122/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.1.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2890122/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.9.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2890122/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.2.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2890122/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.10.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2890122/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.3.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2890122/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.14.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2890122/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.4.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2890122/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.15.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2890122/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.5.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2890122/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.17.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2890122/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.6.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2890122/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.19.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2890122/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.7.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2890122/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.20.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2890122/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.8.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2890122/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.21.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2890122/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.9.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2890122/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.22.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2890122/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.10.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2890122/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.24.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2890122/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.11.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2890122/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.26.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2890122/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.12.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2890122/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.31.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2890122/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.13.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2890122/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.32.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2890122/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.14.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2890122/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.33.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2890122/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.15.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2890122/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.34.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2890122/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.16.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2890122/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.35.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2890122/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.17.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2890122/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.36.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2890122/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.18.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2890122/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.37.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2890122/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.19.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2890122/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.38.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2890122/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.20.gz
<MSG>2:45 : bar.A1.B1.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart). changed = 1 proof-stats=dht40-prove_trivial9-prove31...</MSG>
<MSG>2:45 : bar.A1.B1.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart)...</MSG>
<MSG>2:45 : bar.A1.B1.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:45 : bar.A1.B1.C1: Done relaxing invariants across the edge composition (L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart), result: changed ...</MSG>
<MSG>2:45 : bar.A1.B1.C1: Done relaxing memlabels and invariants across the edge composition (L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart), result: changed( 0, 1 ) ...</MSG>
<MSG>2:45 : bar.A1.B1.C1 (d:0, s:0, sp: 0): checked newly added edge and inferred invariants...</MSG>
<MSG>2:45 : bar.A1.B1.C1 (d:0, s:0, sp: 0): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>2:45 : product-TFG bar.A1.B1.C1: Enumerating correlations for Lentry%2%fcallStart=>Lentry%2%fcallEnd[mu 1, delta {1,0}] starting at L4%2%fcallStart_Lentry%2%fcallStart
</MSG>
<MSG>2:45 : Considering 1 paths to src pc L4%2%fcallEnd as correlation candidates for Lentry%2%fcallStart=>Lentry%2%fcallEnd[mu 1, delta {1,0}] at L4%2%fcallStart_Lentry%2%fcallStart
</MSG>
<MSG>2:45 : Attempting correlation of src pathset L4%2%fcallStart=>L4%2%fcallEnd[mu 1, delta {1,0}] as correlation candidate for Lentry%2%fcallStart=>Lentry%2%fcallEnd[mu 1, delta {1,0}] at L4%2%fcallStart_Lentry%2%fcallStart
</MSG>
<MSG>2:45 : Found 1 feasible correlations for paths to src pc L4%2%fcallEnd as correlation candidates for Lentry%2%fcallStart=>Lentry%2%fcallEnd[mu 1, delta {1,0}] at L4%2%fcallStart_Lentry%2%fcallStart
</MSG>
<MSG>2:45 : product-TFG bar.A1.B1.C1: Found 1 correlations for Lentry%2%fcallStart=>Lentry%2%fcallEnd[mu 1, delta {1,0}] starting at L4%2%fcallStart_Lentry%2%fcallStart
</MSG>
<MSG>2:45 : product-TFG bar.A1.B1.C1 created 1 possibilities in group bar.A1.B1.C1.D...</MSG>
<MSG>2:45 : Chose (for CE propagation) product-TFG bar.A1.B1.C1.D1 (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart (C L0%0%d => C L4%1%fcallStart at mu 1 delta {1,0}, A L0%0%d => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd (C L4%1%fcallStart => C L4%1%fcallEnd at mu 1 delta {1,0}, A (line 12 at column 10) => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart (C L4%1%fcallEnd => C L4%2%fcallStart at mu 1 delta {1,0}, A (line 12 at column 10) => A (line 12 at column 10) at mu 1 delta {1,0})
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L4%1%fcallStart_Lentry%1%fcallStart (C L4%1%fcallStart, A (line 12 at column 10))
                L4%1%fcallStart_Lentry%1%fcallStart [inductive-invariants] contains 23 counterexamples (for correlating 4 bv exprs)
            L4%1%fcallEnd_Lentry%1%fcallEnd (C L4%1%fcallEnd, A (line 12 at column 10))
                L4%1%fcallEnd_Lentry%1%fcallEnd [inductive-invariants] contains 17 counterexamples (for correlating 5 bv exprs)
            L4%2%fcallStart_Lentry%2%fcallStart (C L4%2%fcallStart, A (line 12 at column 10))
                L4%2%fcallStart_Lentry%2%fcallStart [inductive-invariants] contains 12 counterexamples (for correlating 5 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lentry%2%fcallStart=>Lentry%2%fcallEnd[mu 1, delta {1,0}]
  src-full-pathset: L4%2%fcallStart=>L4%2%fcallEnd[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>2:45 : Finished adding lsprel-assumes for allocation to the product-TFG bar.A1.B1.C1.D1...</MSG>
<MSG>2:45 : Finished adding lsprel-assumes for deallocation to the product-TFG bar.A1.B1.C1.D1...</MSG>
<MSG>2:45 : Creating ssa-path for the src-tfg path L4%2%fcallStart --> L4%2%fcallEnd ending at L4%2%fcallEnd_Lentry%2%fcallEnd
</MSG>
<MSG>2:45 : Adding a CG edge composition using the src path L4%2%fcallStart --> L4%2%fcallEnd and dst path Lentry%2%fcallStart --> Lentry%2%fcallEnd</MSG>
<MSG>2:45 : Identifying common alloc-deallocs in the src path L4%2%fcallStart --> L4%2%fcallEnd and dst path Lentry%2%fcallStart --> Lentry%2%fcallEnd
</MSG>
<MSG>2:45 : Identified no common alloc-deallocs in the src path L4%2%fcallStart --> L4%2%fcallEnd and dst path Lentry%2%fcallStart --> Lentry%2%fcallEnd</MSG>
<MSG>2:45 : Adding new edge to the product-TFG bar.A1.B1.C1.D1 for fromPC L4%2%fcallStart_Lentry%2%fcallStart and toPC L4%2%fcallEnd_Lentry%2%fcallEnd, src path L4%2%fcallStart --> L4%2%fcallEnd and dst path Lentry%2%fcallStart --> Lentry%2%fcallEnd...</MSG>
<MSG>2:45 : bar.A1.B1.C1.D1: Computing loop hoisting select expressions at toPC L4%2%fcallEnd_Lentry%2%fcallEnd...</MSG>
<MSG>2:45 : bar.A1.B1.C1.D1: Computing loop hoisting non-linear expressions at toPC L4%2%fcallEnd_Lentry%2%fcallEnd...</MSG>
<MSG>2:45 : bar.A1.B1.C1.D1: Adding node L4%2%fcallEnd_Lentry%2%fcallEnd to the product-TFG...</MSG>
<MSG>2:45 : bar.A1.B1.C1.D1: Getting alloca-ptrs on edge L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd...</MSG>
<MSG>2:45 : bar.A1.B1.C1.D1: Found no alloca-ptrs on edge L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd...</MSG>
<MSG>2:45 : bar.A1.B1.C1.D1: Adding edge L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd...</MSG>
<MSG>2:45 : bar.A1.B1.C1.D1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>2:45 : bar.A1.B1.C1.D1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>2:45 : bar.A1.B1.C1.D1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>2:46 : bar.A1.B1.C1.D1: Propagated 12 out of 12 counter-examples across edge L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd</MSG>
<MSG>2:46 : bar.A1.B1.C1.D1: Added the 12 propagated CEs at PC L4%2%fcallEnd_Lentry%2%fcallEnd and propagated further.
</MSG>
<MSG>2:46 : bar.A1.B1.C1.D1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>2:46 : bar.A1.B1.C1.D1: Finished executing CG's add edge function...</MSG>
<MSG>2:46 : bar.A1.B1.C1.D1: Computing CG regions after the addition of the edge L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd...</MSG>
<MSG>2:46 : bar.A1.B1.C1.D1: Done computing CG regions after the addition of the edge L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd...</MSG>
<MSG>2:46 : Done adding new edge to the product-TFG bar.A1.B1.C1.D1 for fromPC L4%2%fcallStart_Lentry%2%fcallStart and toPC L4%2%fcallEnd_Lentry%2%fcallEnd, src path L4%2%fcallStart --> L4%2%fcallEnd and dst path Lentry%2%fcallStart --> Lentry%2%fcallEnd...</MSG>
<MSG>2:46 : Done adding a CG edge composition using the src path L4%2%fcallStart --> L4%2%fcallEnd and dst path Lentry%2%fcallStart --> Lentry%2%fcallEnd</MSG>
<MSG>2:46 : Added correlation to the product-TFG bar.A1.B1.C1.D1 (d:0, s:0, sp: 0) and created a correlation entry...</MSG>
<MSG>2:46 : Chose (after CE propagation) product-TFG bar.A1.B1.C1.D1 (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart (C L0%0%d => C L4%1%fcallStart at mu 1 delta {1,0}, A L0%0%d => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd (C L4%1%fcallStart => C L4%1%fcallEnd at mu 1 delta {1,0}, A (line 12 at column 10) => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart (C L4%1%fcallEnd => C L4%2%fcallStart at mu 1 delta {1,0}, A (line 12 at column 10) => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd (C L4%2%fcallStart => C L4%2%fcallEnd at mu 1 delta {1,0}, A (line 12 at column 10) => A (line 12 at column 10) at mu 1 delta {1,0})
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L4%1%fcallStart_Lentry%1%fcallStart (C L4%1%fcallStart, A (line 12 at column 10))
                L4%1%fcallStart_Lentry%1%fcallStart [inductive-invariants] contains 23 counterexamples (for correlating 4 bv exprs)
            L4%1%fcallEnd_Lentry%1%fcallEnd (C L4%1%fcallEnd, A (line 12 at column 10))
                L4%1%fcallEnd_Lentry%1%fcallEnd [inductive-invariants] contains 17 counterexamples (for correlating 5 bv exprs)
            L4%2%fcallStart_Lentry%2%fcallStart (C L4%2%fcallStart, A (line 12 at column 10))
                L4%2%fcallStart_Lentry%2%fcallStart [inductive-invariants] contains 12 counterexamples (for correlating 5 bv exprs)
            L4%2%fcallEnd_Lentry%2%fcallEnd (C L4%2%fcallEnd, A (line 12 at column 10))
                L4%2%fcallEnd_Lentry%2%fcallEnd [inductive-invariants] contains 5 counterexamples (for correlating 4 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lentry%2%fcallStart=>Lentry%2%fcallEnd[mu 1, delta {1,0}]
  src-full-pathset: L4%2%fcallStart=>L4%2%fcallEnd[mu 1, delta {1,0}]
<MSG>2:46 : bar.A1.B1.C1.D1: Updating invariants over the newly added edges in edge composition L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd and other downstream edges that change due to it...</MSG>
<MSG>2:46 : Constructed infer_invariants_dfa with initial worklist L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd...</MSG>
<MSG>2:46 : bar.A1.B1.C1.D1: Relaxing dst graph's memlabels for edge composition (L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd) ...</MSG>
<MSG>2:46 : bar.A1.B1.C1.D1: Done relaxing dst graph's memlabels for edge composition (L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd), result: unchanged</MSG>
<MSG>2:46 : bar.A1.B1.C1.D1: Checking well-formedness assertions on outgoing edges from L4%2%fcallStart_Lentry%2%fcallStart ...</MSG>
<MSG>2:46 : bar.A1.B1.C1.D1: Relaxing invariants across the edge composition (L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd) ...</MSG>
<MSG>2:46 : bar.A1.B1.C1.D1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd)...</MSG>
<MSG>2:46 : bar.A1.B1.C1.D1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:46 : bar.A1.B1.C1.D1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 4 exprs and 5 CEs across the edge composition (L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd)...</MSG>
<MSG>2:46 : bar.A1.B1.C1.D1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:46 : bar.A1.B1.C1.D1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 53 exprs and 1 CEs across the edge composition (L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd)...</MSG>
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2890122/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.1.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2890122/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.path_hashdcd4e23dd6884c66d0d19d178d94b555.pre0.0.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2890122/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.6.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2890122/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.path_hashdcd4e23dd6884c66d0d19d178d94b555.pre0.1.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2890122/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.7.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2890122/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.path_hashdcd4e23dd6884c66d0d19d178d94b555.pre0.2.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2890122/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.8.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2890122/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.path_hashdcd4e23dd6884c66d0d19d178d94b555.pre0.3.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2890122/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.10.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2890122/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.path_hashdcd4e23dd6884c66d0d19d178d94b555.pre0.4.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2890122/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.18.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2890122/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.path_hashdcd4e23dd6884c66d0d19d178d94b555.pre0.5.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2890122/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.22.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2890122/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.path_hashdcd4e23dd6884c66d0d19d178d94b555.pre0.6.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2890122/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.25.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2890122/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.path_hashdcd4e23dd6884c66d0d19d178d94b555.pre0.7.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2890122/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.29.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2890122/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.path_hashdcd4e23dd6884c66d0d19d178d94b555.pre0.8.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2890122/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.30.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2890122/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.path_hashdcd4e23dd6884c66d0d19d178d94b555.pre0.9.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2890122/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.31.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2890122/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.path_hashdcd4e23dd6884c66d0d19d178d94b555.pre0.10.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2890122/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.33.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2890122/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.path_hashdcd4e23dd6884c66d0d19d178d94b555.pre0.11.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2890122/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.35.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2890122/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.path_hashdcd4e23dd6884c66d0d19d178d94b555.pre0.12.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2890122/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.41.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2890122/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.path_hashdcd4e23dd6884c66d0d19d178d94b555.pre0.13.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2890122/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.43.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2890122/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.path_hashdcd4e23dd6884c66d0d19d178d94b555.pre0.14.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2890122/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.48.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2890122/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.path_hashdcd4e23dd6884c66d0d19d178d94b555.pre0.15.gz
<MSG>3:52 : bar.A1.B1.C1.D1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd). changed = 1 proof-stats=dht54-prove_trivial15-prove39...</MSG>
<MSG>3:52 : bar.A1.B1.C1.D1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd)...</MSG>
<MSG>3:52 : bar.A1.B1.C1.D1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:52 : bar.A1.B1.C1.D1: Done relaxing invariants across the edge composition (L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd), result: changed ...</MSG>
<MSG>3:52 : bar.A1.B1.C1.D1: Done relaxing memlabels and invariants across the edge composition (L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd), result: changed( 0, 1 ) ...</MSG>
<MSG>3:52 : bar.A1.B1.C1.D1 (d:0, s:0, sp: 0): checked newly added edge and inferred invariants...</MSG>
<MSG>3:52 : bar.A1.B1.C1.D1 (d:0, s:0, sp: 0): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>3:52 : product-TFG bar.A1.B1.C1.D1: Enumerating correlations for Lentry%2%fcallEnd=>E0%0%d[mu 1, delta {1,0}] starting at L4%2%fcallEnd_Lentry%2%fcallEnd
</MSG>
<MSG>3:52 : Considering 1 paths to src pc E0%0%d as correlation candidates for Lentry%2%fcallEnd=>E0%0%d[mu 1, delta {1,0}] at L4%2%fcallEnd_Lentry%2%fcallEnd
</MSG>
<MSG>3:52 : Attempting correlation of src pathset L4%2%fcallEnd=>E0%0%d[mu 1, delta {1,0}] as correlation candidate for Lentry%2%fcallEnd=>E0%0%d[mu 1, delta {1,0}] at L4%2%fcallEnd_Lentry%2%fcallEnd
</MSG>
<MSG>3:52 : Found 1 feasible correlations for paths to src pc E0%0%d as correlation candidates for Lentry%2%fcallEnd=>E0%0%d[mu 1, delta {1,0}] at L4%2%fcallEnd_Lentry%2%fcallEnd
</MSG>
<MSG>3:52 : product-TFG bar.A1.B1.C1.D1: Found 1 correlations for Lentry%2%fcallEnd=>E0%0%d[mu 1, delta {1,0}] starting at L4%2%fcallEnd_Lentry%2%fcallEnd
</MSG>
<MSG>3:52 : product-TFG bar.A1.B1.C1.D1 created 1 possibilities in group bar.A1.B1.C1.D1.E...</MSG>
<MSG>3:52 : Chose (for CE propagation) product-TFG bar.A1.B1.C1.D1.E1 (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart (C L0%0%d => C L4%1%fcallStart at mu 1 delta {1,0}, A L0%0%d => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd (C L4%1%fcallStart => C L4%1%fcallEnd at mu 1 delta {1,0}, A (line 12 at column 10) => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart (C L4%1%fcallEnd => C L4%2%fcallStart at mu 1 delta {1,0}, A (line 12 at column 10) => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd (C L4%2%fcallStart => C L4%2%fcallEnd at mu 1 delta {1,0}, A (line 12 at column 10) => A (line 12 at column 10) at mu 1 delta {1,0})
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L4%1%fcallStart_Lentry%1%fcallStart (C L4%1%fcallStart, A (line 12 at column 10))
                L4%1%fcallStart_Lentry%1%fcallStart [inductive-invariants] contains 23 counterexamples (for correlating 4 bv exprs)
            L4%1%fcallEnd_Lentry%1%fcallEnd (C L4%1%fcallEnd, A (line 12 at column 10))
                L4%1%fcallEnd_Lentry%1%fcallEnd [inductive-invariants] contains 17 counterexamples (for correlating 5 bv exprs)
            L4%2%fcallStart_Lentry%2%fcallStart (C L4%2%fcallStart, A (line 12 at column 10))
                L4%2%fcallStart_Lentry%2%fcallStart [inductive-invariants] contains 12 counterexamples (for correlating 5 bv exprs)
            L4%2%fcallEnd_Lentry%2%fcallEnd (C L4%2%fcallEnd, A (line 12 at column 10))
                L4%2%fcallEnd_Lentry%2%fcallEnd [inductive-invariants] contains 10 counterexamples (for correlating 4 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lentry%2%fcallEnd=>E0%0%d[mu 1, delta {1,0}]
  src-full-pathset: L4%2%fcallEnd=>E0%0%d[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>3:52 : Finished adding lsprel-assumes for allocation to the product-TFG bar.A1.B1.C1.D1.E1...</MSG>
<MSG>3:52 : Finished adding lsprel-assumes for deallocation to the product-TFG bar.A1.B1.C1.D1.E1...</MSG>
<MSG>3:52 : Creating ssa-path for the src-tfg path L4%2%fcallEnd --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>3:52 : Adding a CG edge composition using the src path L4%2%fcallEnd --> E0%0%d and dst path Lentry%2%fcallEnd --> E0%0%d</MSG>
<MSG>3:52 : Identifying common alloc-deallocs in the src path L4%2%fcallEnd --> E0%0%d and dst path Lentry%2%fcallEnd --> E0%0%d
</MSG>
<MSG>3:52 : Identified no common alloc-deallocs in the src path L4%2%fcallEnd --> E0%0%d and dst path Lentry%2%fcallEnd --> E0%0%d</MSG>
<MSG>3:52 : Adding new edge to the product-TFG bar.A1.B1.C1.D1.E1 for fromPC L4%2%fcallEnd_Lentry%2%fcallEnd and toPC E0%0%d_E0%0%d, src path L4%2%fcallEnd --> E0%0%d and dst path Lentry%2%fcallEnd --> E0%0%d...</MSG>
<MSG>3:52 : bar.A1.B1.C1.D1.E1: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>3:52 : bar.A1.B1.C1.D1.E1: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>3:52 : bar.A1.B1.C1.D1.E1: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>3:52 : bar.A1.B1.C1.D1.E1: Getting alloca-ptrs on edge L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d...</MSG>
<MSG>3:52 : bar.A1.B1.C1.D1.E1: Found no alloca-ptrs on edge L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d...</MSG>
<MSG>3:52 : bar.A1.B1.C1.D1.E1: Adding edge L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d...</MSG>
<MSG>3:52 : bar.A1.B1.C1.D1.E1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>3:52 : bar.A1.B1.C1.D1.E1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>3:52 : bar.A1.B1.C1.D1.E1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>3:52 : bar.A1.B1.C1.D1.E1: Propagated 0 out of 10 counter-examples across edge L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d</MSG>
<MSG>3:52 : bar.A1.B1.C1.D1.E1: Added the 0 propagated CEs at PC E0%0%d_E0%0%d and propagated further.
</MSG>
<MSG>3:52 : bar.A1.B1.C1.D1.E1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>3:52 : bar.A1.B1.C1.D1.E1: Finished executing CG's add edge function...</MSG>
<MSG>3:52 : bar.A1.B1.C1.D1.E1: Computing CG regions after the addition of the edge L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d...</MSG>
<MSG>3:52 : bar.A1.B1.C1.D1.E1: Done computing CG regions after the addition of the edge L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d...</MSG>
<MSG>3:52 : Done adding new edge to the product-TFG bar.A1.B1.C1.D1.E1 for fromPC L4%2%fcallEnd_Lentry%2%fcallEnd and toPC E0%0%d_E0%0%d, src path L4%2%fcallEnd --> E0%0%d and dst path Lentry%2%fcallEnd --> E0%0%d...</MSG>
<MSG>3:52 : Done adding a CG edge composition using the src path L4%2%fcallEnd --> E0%0%d and dst path Lentry%2%fcallEnd --> E0%0%d</MSG>
<MSG>3:52 : Added correlation to the product-TFG bar.A1.B1.C1.D1.E1 (d:0, s:0, sp: 0) and created a correlation entry...</MSG>
<MSG>3:52 : Chose (after CE propagation) product-TFG bar.A1.B1.C1.D1.E1 (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Edges[5]: L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart (C L0%0%d => C L4%1%fcallStart at mu 1 delta {1,0}, A L0%0%d => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd (C L4%1%fcallStart => C L4%1%fcallEnd at mu 1 delta {1,0}, A (line 12 at column 10) => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart (C L4%1%fcallEnd => C L4%2%fcallStart at mu 1 delta {1,0}, A (line 12 at column 10) => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd (C L4%2%fcallStart => C L4%2%fcallEnd at mu 1 delta {1,0}, A (line 12 at column 10) => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d (C L4%2%fcallEnd => C E0%0%d at mu 1 delta {1,0}, A (line 12 at column 10) => A E0%0%d at mu 1 delta {1,0})
  Nodes[6]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L4%1%fcallStart_Lentry%1%fcallStart (C L4%1%fcallStart, A (line 12 at column 10))
                L4%1%fcallStart_Lentry%1%fcallStart [inductive-invariants] contains 23 counterexamples (for correlating 4 bv exprs)
            L4%1%fcallEnd_Lentry%1%fcallEnd (C L4%1%fcallEnd, A (line 12 at column 10))
                L4%1%fcallEnd_Lentry%1%fcallEnd [inductive-invariants] contains 17 counterexamples (for correlating 5 bv exprs)
            L4%2%fcallStart_Lentry%2%fcallStart (C L4%2%fcallStart, A (line 12 at column 10))
                L4%2%fcallStart_Lentry%2%fcallStart [inductive-invariants] contains 12 counterexamples (for correlating 5 bv exprs)
            L4%2%fcallEnd_Lentry%2%fcallEnd (C L4%2%fcallEnd, A (line 12 at column 10))
                L4%2%fcallEnd_Lentry%2%fcallEnd [inductive-invariants] contains 10 counterexamples (for correlating 4 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lentry%2%fcallEnd=>E0%0%d[mu 1, delta {1,0}]
  src-full-pathset: L4%2%fcallEnd=>E0%0%d[mu 1, delta {1,0}]
<MSG>3:52 : bar.A1.B1.C1.D1.E1: Updating invariants over the newly added edges in edge composition L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d and other downstream edges that change due to it...</MSG>
<MSG>3:52 : Constructed infer_invariants_dfa with initial worklist L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d...</MSG>
<MSG>3:52 : bar.A1.B1.C1.D1.E1: Relaxing dst graph's memlabels for edge composition (L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d) ...</MSG>
<MSG>3:52 : bar.A1.B1.C1.D1.E1: Done relaxing dst graph's memlabels for edge composition (L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d), result: unchanged</MSG>
<MSG>3:52 : bar.A1.B1.C1.D1.E1: Checking well-formedness assertions on outgoing edges from L4%2%fcallEnd_Lentry%2%fcallEnd ...</MSG>
<MSG>3:53 : bar.A1.B1.C1.D1.E1: Done relaxing memlabels and invariants across the edge composition (L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d), result: unchanged( 0, 0 ) ...</MSG>
<MSG>3:53 : bar.A1.B1.C1.D1.E1 (d:0, s:0, sp: 0): checked newly added edge and inferred invariants...</MSG>
<MSG>3:53 : bar.A1.B1.C1.D1.E1 (d:0, s:0, sp: 0): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>3:53 : Chosen product-TFG represents our required correlation graph...</MSG>
<MSG>3:53 : Checking equivalence proof...</MSG>
<MSG>3:54 : Equivalence check passed: product CFG has strong enough inductive invariants...</MSG>
CG invariants =
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L4%1%fcallStart_Lentry%1%fcallStart: (d:0, s:0, sp: 0)
  Invariant state (4 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(and(and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)))))), and(and(and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum3=/, 3), 0)), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum2=/, 3), 0)), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(and(and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum3=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin)), eq(input.dst.local./*___y___bar__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin)), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin))) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(and(and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)))))), and(and(and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum3=/, 3), 0)), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum2=/, 3), 0)), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(and(and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum3=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin)), eq(input.dst.local./*___y___bar__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin)), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.dst.llvm-%arr1 ; 3-->input.dst.llvm-%n ; 4-->input.dst.llvm-%arr2 ; 5-->input.dst.llvm-%m ; 
    2 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%arr2, 1, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr1, 1, 0)
     is_assumed_eqclass : 0
    21 visited ces:
      0.:z3.ce3      1.:z3v487.ce32      2.:z3v487.ce18      3.:z3.ce45      4.:z3.ce17      5.:z3.ce59      6.:z3.ce192      7.:z3.ce150      8.:z3v487.ce136      9.:z3.ce31      10.:z3v487.ce102      11.:z3v487.ce60      12.:z3.ce73      13.:z3.ce87      14.:z3.ce116      15.:z3.ce101      16.:z3v487.ce129      17.:z3v487.ce115      18.:z3v487.ce164      19.:z3v487.ce151      20.:z3v487.ce178
    eqclass 2:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [10]: 6-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141010](input.spec-%var-a2-0, map[141009](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141008](Lambda3Var, map[141007](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141006](Lambda2Var, select[141005](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141004](select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 7-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141045](input.spec-%var-a1-0, map[141044](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141043](Lambda3Var, map[141042](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141041](Lambda2Var, select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141039](bvmul(Lambda2Var, 4), select[141038](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 8-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141067](input.spec-%var-a2-0, map[141064](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141063](Lambda3Var, map[141060](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141059](Lambda2Var, select[141057](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141055](bvmul(Lambda2Var, 4), select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 9-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141956](input.spec-%var-a1-0, map[141835](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%arr1))), lambda[141008](Lambda3Var, map[141007](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141006](Lambda2Var, select[141005](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141004](select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 10-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142052](input.spec-%var-a1-0, map[142051](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%m))), lambda[141008](Lambda3Var, map[141007](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141006](Lambda2Var, select[141005](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141004](select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 11-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142047](input.spec-%var-a1-0, map[142046](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%arr2))), lambda[141008](Lambda3Var, map[141007](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141006](Lambda2Var, select[141005](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141004](select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 12-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142102](input.spec-%var-a1-0, map[142101](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142100](Lambda3Var, map[142099](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142098](Lambda2Var, select[142097](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[142096](select[141038](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 13-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142111](input.spec-%var-a2-0, map[142110](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142109](Lambda3Var, map[142108](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142107](Lambda2Var, select[142106](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[142105](bvmul(Lambda2Var, 4), select[142104](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%n, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 14-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142120](input.spec-%var-a2-0, map[142119](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142118](Lambda3Var, map[142117](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142116](Lambda2Var, select[142115](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[142114](bvmul(Lambda2Var, 4), select[142113](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%m, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 15-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142122](input.spec-%var-a2-0, map[142121](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%arr1))), lambda[141043](Lambda3Var, map[141042](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141041](Lambda2Var, select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141039](bvmul(Lambda2Var, 4), select[141038](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 
    4 preds:
      0.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142102](input.spec-%var-a1-0, map[142101](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142100](Lambda3Var, map[142099](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142098](Lambda2Var, select[142097](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[142096](select[141038](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false))))))  ==  true
      1.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141067](input.spec-%var-a2-0, map[141064](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141063](Lambda3Var, map[141060](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141059](Lambda2Var, select[141057](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141055](bvmul(Lambda2Var, 4), select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      2.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141045](input.spec-%var-a1-0, map[141044](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141043](Lambda3Var, map[141042](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141041](Lambda2Var, select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141039](bvmul(Lambda2Var, 4), select[141038](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      3.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141010](input.spec-%var-a2-0, map[141009](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141008](Lambda3Var, map[141007](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141006](Lambda2Var, select[141005](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141004](select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false))))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 3:
    smallest point cover name local-sizes-are-equal, type HOUDINI, exprs [0]: 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3

L4%1%fcallEnd_Lentry%1%fcallEnd: (d:0, s:0, sp: 0)
  Invariant state (4 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(and(and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)))))), and(and(and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum3=/, 3), 0)), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum2=/, 3), 0)), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(and(and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum3=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin)), eq(input.dst.local./*___y___bar__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin)), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin))) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(and(and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)))))), and(and(and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum3=/, 3), 0)), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum2=/, 3), 0)), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(and(and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum3=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin)), eq(input.dst.local./*___y___bar__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin)), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 3-->input.dst.llvm-%n ; 4-->input.dst.llvm-%arr2 ; 5-->input.dst.llvm-%m ; 16-->input.spec-%tmpvar-19.L4%1%fcallEnd ; 17-->input.dst.llvm-%call.Lentry%1%fcallEnd ; 
    1 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%arr2, 1, 0)
     is_assumed_eqclass : 0
    16 visited ces:
      0.:z3.ce3      1.:z3v487.ce32      2.:z3v487.ce18      3.:z3.ce45      4.:z3.ce17      5.:z3.ce59      6.:z3.ce150      7.:z3v487.ce136      8.:z3.ce31      9.:z3.ce73      10.:z3.ce87      11.:z3.ce101      12.:z3v487.ce129      13.:z3v487.ce115      14.:z3v487.ce164      15.:z3v487.ce151
    eqclass 2:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [30]: 6-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141010](input.spec-%var-a2-0, map[141009](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141008](Lambda3Var, map[141007](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141006](Lambda2Var, select[141005](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141004](select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 7-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141045](input.spec-%var-a1-0, map[141044](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141043](Lambda3Var, map[141042](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141041](Lambda2Var, select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141039](bvmul(Lambda2Var, 4), select[141038](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 8-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141067](input.spec-%var-a2-0, map[141064](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141063](Lambda3Var, map[141060](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141059](Lambda2Var, select[141057](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141055](bvmul(Lambda2Var, 4), select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 10-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142052](input.spec-%var-a1-0, map[142051](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%m))), lambda[141008](Lambda3Var, map[141007](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141006](Lambda2Var, select[141005](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141004](select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 11-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142047](input.spec-%var-a1-0, map[142046](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%arr2))), lambda[141008](Lambda3Var, map[141007](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141006](Lambda2Var, select[141005](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141004](select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 12-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142102](input.spec-%var-a1-0, map[142101](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142100](Lambda3Var, map[142099](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142098](Lambda2Var, select[142097](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[142096](select[141038](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 13-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142111](input.spec-%var-a2-0, map[142110](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142109](Lambda3Var, map[142108](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142107](Lambda2Var, select[142106](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[142105](bvmul(Lambda2Var, 4), select[142104](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%n, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 14-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142120](input.spec-%var-a2-0, map[142119](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142118](Lambda3Var, map[142117](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142116](Lambda2Var, select[142115](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[142114](bvmul(Lambda2Var, 4), select[142113](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%m, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 18-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[177732](input.spec-%var-a1-0, map[177729](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%arr2))), lambda[141063](Lambda3Var, map[141060](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141059](Lambda2Var, select[141057](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141055](bvmul(Lambda2Var, 4), select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 19-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[185810](input.spec-%var-a1-0, map[185555](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%m))), lambda[141063](Lambda3Var, map[141060](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141059](Lambda2Var, select[141057](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141055](bvmul(Lambda2Var, 4), select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 20-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[203199](input.spec-%var-a2-0, map[203198](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[203197](Lambda3Var, map[203196](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[203195](Lambda2Var, select[203194](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[203193](bvmul(Lambda2Var, 4), select[203192](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 21-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[203232](input.spec-%var-a1-0, map[203231](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[203230](Lambda3Var, map[203229](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[203228](Lambda2Var, select[203227](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[203226](bvmul(Lambda2Var, 4), select[203225](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 22-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[203237](input.spec-%var-a1-0, map[203236](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call.Lentry%1%fcallEnd))), lambda[141008](Lambda3Var, map[141007](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141006](Lambda2Var, select[141005](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141004](select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 23-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[203244](input.spec-%var-a1-0, map[203243](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[203242](Lambda3Var, map[203241](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[203240](Lambda2Var, select[203239](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[203238](select[142104](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%n, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 24-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[203245](input.spec-fcall_arg_copy.0.spec-%var-a1-0.L4%1%fcallEnd, map[141044](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141043](Lambda3Var, map[141042](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141041](Lambda2Var, select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141039](bvmul(Lambda2Var, 4), select[141038](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 25-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[203254](input.spec-%var-a2-0, map[203253](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[203252](Lambda3Var, map[203251](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[203250](Lambda2Var, select[203249](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[203248](bvmul(Lambda2Var, 4), select[203247](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%call.Lentry%1%fcallEnd, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 26-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[203256](input.spec-%var-a1-0, map[203255](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call.Lentry%1%fcallEnd))), lambda[141063](Lambda3Var, map[141060](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141059](Lambda2Var, select[141057](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141055](bvmul(Lambda2Var, 4), select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 27-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[203257](input.spec-%var-a1-0, map[142110](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142109](Lambda3Var, map[142108](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142107](Lambda2Var, select[142106](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[142105](bvmul(Lambda2Var, 4), select[142104](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%n, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 28-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[203258](input.spec-fcall_arg_copy.0.spec-%var-a1-0.L4%1%fcallEnd, map[142101](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142100](Lambda3Var, map[142099](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142098](Lambda2Var, select[142097](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[142096](select[141038](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 29-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[203259](input.spec-%var-a2-0, map[203243](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[203242](Lambda3Var, map[203241](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[203240](Lambda2Var, select[203239](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[203238](select[142104](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%n, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 30-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[203266](input.spec-%var-a2-0, map[203265](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[203264](Lambda3Var, map[203263](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[203262](Lambda2Var, select[203261](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[203260](select[142113](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%m, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 31-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[203273](input.spec-%var-a2-0, map[203272](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[203271](Lambda3Var, map[203270](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[203269](Lambda2Var, select[203268](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[203267](select[203247](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%call.Lentry%1%fcallEnd, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 32-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[203275](input.spec-%var-a1-0, map[203274](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%arr2))), lambda[203197](Lambda3Var, map[203196](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[203195](Lambda2Var, select[203194](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[203193](bvmul(Lambda2Var, 4), select[203192](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 33-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[203277](input.spec-%var-a1-0, map[203276](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%m))), lambda[203197](Lambda3Var, map[203196](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[203195](Lambda2Var, select[203194](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[203193](bvmul(Lambda2Var, 4), select[203192](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 34-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[203279](input.spec-%var-a1-0, map[203278](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call.Lentry%1%fcallEnd))), lambda[203197](Lambda3Var, map[203196](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[203195](Lambda2Var, select[203194](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[203193](bvmul(Lambda2Var, 4), select[203192](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 35-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[203287](input.spec-%var-a1-0, map[203286](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[203285](Lambda3Var, map[203284](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[203283](Lambda2Var, select[203282](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[203281](bvmul(Lambda2Var, 4), select[203280](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%n, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 36-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[203288](input.spec-fcall_arg_copy.0.spec-%var-a1-0.L4%1%fcallEnd, map[203231](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[203230](Lambda3Var, map[203229](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[203228](Lambda2Var, select[203227](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[203226](bvmul(Lambda2Var, 4), select[203225](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 37-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[203289](input.spec-%var-a2-0, map[203286](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[203285](Lambda3Var, map[203284](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[203283](Lambda2Var, select[203282](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[203281](bvmul(Lambda2Var, 4), select[203280](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%n, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 38-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[203297](input.spec-%var-a2-0, map[203296](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[203295](Lambda3Var, map[203294](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[203293](Lambda2Var, select[203292](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[203291](bvmul(Lambda2Var, 4), select[203290](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%m, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 39-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[203305](input.spec-%var-a2-0, map[203304](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[203303](Lambda3Var, map[203302](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[203301](Lambda2Var, select[203300](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[203299](bvmul(Lambda2Var, 4), select[203298](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%call.Lentry%1%fcallEnd, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 
    9 preds:
      0.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[203245](input.spec-fcall_arg_copy.0.spec-%var-a1-0.L4%1%fcallEnd, map[141044](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141043](Lambda3Var, map[141042](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141041](Lambda2Var, select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141039](bvmul(Lambda2Var, 4), select[141038](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      1.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142102](input.spec-%var-a1-0, map[142101](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142100](Lambda3Var, map[142099](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142098](Lambda2Var, select[142097](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[142096](select[141038](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false))))))  ==  true
      2.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[203288](input.spec-fcall_arg_copy.0.spec-%var-a1-0.L4%1%fcallEnd, map[203231](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[203230](Lambda3Var, map[203229](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[203228](Lambda2Var, select[203227](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[203226](bvmul(Lambda2Var, 4), select[203225](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      3.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141010](input.spec-%var-a2-0, map[141009](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141008](Lambda3Var, map[141007](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141006](Lambda2Var, select[141005](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141004](select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false))))))  ==  true
      4.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[203232](input.spec-%var-a1-0, map[203231](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[203230](Lambda3Var, map[203229](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[203228](Lambda2Var, select[203227](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[203226](bvmul(Lambda2Var, 4), select[203225](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      5.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141045](input.spec-%var-a1-0, map[141044](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141043](Lambda3Var, map[141042](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141041](Lambda2Var, select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141039](bvmul(Lambda2Var, 4), select[141038](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      6.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141067](input.spec-%var-a2-0, map[141064](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141063](Lambda3Var, map[141060](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141059](Lambda2Var, select[141057](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141055](bvmul(Lambda2Var, 4), select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      7.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[203258](input.spec-fcall_arg_copy.0.spec-%var-a1-0.L4%1%fcallEnd, map[142101](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142100](Lambda3Var, map[142099](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142098](Lambda2Var, select[142097](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[142096](select[141038](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false))))))  ==  true
      8.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[203199](input.spec-%var-a2-0, map[203198](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[203197](Lambda3Var, map[203196](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[203195](Lambda2Var, select[203194](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[203193](bvmul(Lambda2Var, 4), select[203192](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 3:
    smallest point cover name local-sizes-are-equal, type HOUDINI, exprs [0]: 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3

L4%2%fcallStart_Lentry%2%fcallStart: (d:0, s:0, sp: 0)
  Invariant state (4 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(and(and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)))))), and(and(and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum3=/, 3), 0)), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum2=/, 3), 0)), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(and(and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum3=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin)), eq(input.dst.local./*___y___bar__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin)), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin))) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(and(and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)))))), and(and(and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum3=/, 3), 0)), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum2=/, 3), 0)), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(and(and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum3=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin)), eq(input.dst.local./*___y___bar__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin)), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce748
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 3-->input.dst.llvm-%n ; 4-->input.dst.llvm-%arr2 ; 5-->input.dst.llvm-%m ; 16-->input.spec-%tmpvar-19.L4%1%fcallEnd ; 17-->input.dst.llvm-%call.Lentry%1%fcallEnd ; 
    2 preds:
      0.: bvneg(bvmul(input.spec-%tmpvar-19.L4%1%fcallEnd, 4294967295))  ==  input.dst.llvm-%call.Lentry%1%fcallEnd
      1.: 0                     ==  bvextract(input.dst.llvm-%arr2, 1, 0)
     is_assumed_eqclass : 0
    11 visited ces:
      0.:z3.ce748      1.:z3.ce757      2.:z3.ce775      3.:z3v487.ce758      4.:z3.ce830      5.:z3v487.ce829      6.:z3v487.ce847      7.:z3v487.ce812      8.:z3.ce794      9.:z3v487.ce793      10.:z3.ce811
    eqclass 2:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [39]: 6-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141010](input.spec-%var-a2-0, map[141009](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141008](Lambda3Var, map[141007](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141006](Lambda2Var, select[141005](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141004](select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 7-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141045](input.spec-%var-a1-0, map[141044](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141043](Lambda3Var, map[141042](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141041](Lambda2Var, select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141039](bvmul(Lambda2Var, 4), select[141038](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 8-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141067](input.spec-%var-a2-0, map[141064](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141063](Lambda3Var, map[141060](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141059](Lambda2Var, select[141057](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141055](bvmul(Lambda2Var, 4), select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 10-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142052](input.spec-%var-a1-0, map[142051](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%m))), lambda[141008](Lambda3Var, map[141007](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141006](Lambda2Var, select[141005](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141004](select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 11-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142047](input.spec-%var-a1-0, map[142046](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%arr2))), lambda[141008](Lambda3Var, map[141007](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141006](Lambda2Var, select[141005](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141004](select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 12-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142102](input.spec-%var-a1-0, map[142101](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142100](Lambda3Var, map[142099](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142098](Lambda2Var, select[142097](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[142096](select[141038](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 13-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142111](input.spec-%var-a2-0, map[142110](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142109](Lambda3Var, map[142108](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142107](Lambda2Var, select[142106](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[142105](bvmul(Lambda2Var, 4), select[142104](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%n, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 14-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142120](input.spec-%var-a2-0, map[142119](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142118](Lambda3Var, map[142117](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142116](Lambda2Var, select[142115](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[142114](bvmul(Lambda2Var, 4), select[142113](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%m, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 18-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[177732](input.spec-%var-a1-0, map[177729](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%arr2))), lambda[141063](Lambda3Var, map[141060](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141059](Lambda2Var, select[141057](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141055](bvmul(Lambda2Var, 4), select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 19-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[185810](input.spec-%var-a1-0, map[185555](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%m))), lambda[141063](Lambda3Var, map[141060](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141059](Lambda2Var, select[141057](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141055](bvmul(Lambda2Var, 4), select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 20-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[203199](input.spec-%var-a2-0, map[203198](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[203197](Lambda3Var, map[203196](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[203195](Lambda2Var, select[203194](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[203193](bvmul(Lambda2Var, 4), select[203192](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 21-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[203232](input.spec-%var-a1-0, map[203231](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[203230](Lambda3Var, map[203229](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[203228](Lambda2Var, select[203227](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[203226](bvmul(Lambda2Var, 4), select[203225](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 22-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[203237](input.spec-%var-a1-0, map[203236](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call.Lentry%1%fcallEnd))), lambda[141008](Lambda3Var, map[141007](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141006](Lambda2Var, select[141005](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141004](select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 23-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[203244](input.spec-%var-a1-0, map[203243](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[203242](Lambda3Var, map[203241](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[203240](Lambda2Var, select[203239](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[203238](select[142104](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%n, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 24-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[203245](input.spec-fcall_arg_copy.0.spec-%var-a1-0.L4%1%fcallEnd, map[141044](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141043](Lambda3Var, map[141042](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141041](Lambda2Var, select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141039](bvmul(Lambda2Var, 4), select[141038](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 25-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[203254](input.spec-%var-a2-0, map[203253](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[203252](Lambda3Var, map[203251](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[203250](Lambda2Var, select[203249](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[203248](bvmul(Lambda2Var, 4), select[203247](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%call.Lentry%1%fcallEnd, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 26-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[203256](input.spec-%var-a1-0, map[203255](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call.Lentry%1%fcallEnd))), lambda[141063](Lambda3Var, map[141060](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141059](Lambda2Var, select[141057](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141055](bvmul(Lambda2Var, 4), select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 27-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[203257](input.spec-%var-a1-0, map[142110](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142109](Lambda3Var, map[142108](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142107](Lambda2Var, select[142106](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[142105](bvmul(Lambda2Var, 4), select[142104](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%n, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 28-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[203258](input.spec-fcall_arg_copy.0.spec-%var-a1-0.L4%1%fcallEnd, map[142101](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142100](Lambda3Var, map[142099](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142098](Lambda2Var, select[142097](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[142096](select[141038](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 29-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[203259](input.spec-%var-a2-0, map[203243](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[203242](Lambda3Var, map[203241](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[203240](Lambda2Var, select[203239](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[203238](select[142104](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%n, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 30-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[203266](input.spec-%var-a2-0, map[203265](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[203264](Lambda3Var, map[203263](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[203262](Lambda2Var, select[203261](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[203260](select[142113](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%m, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 31-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[203273](input.spec-%var-a2-0, map[203272](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[203271](Lambda3Var, map[203270](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[203269](Lambda2Var, select[203268](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[203267](select[203247](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%call.Lentry%1%fcallEnd, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 32-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[203275](input.spec-%var-a1-0, map[203274](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%arr2))), lambda[203197](Lambda3Var, map[203196](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[203195](Lambda2Var, select[203194](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[203193](bvmul(Lambda2Var, 4), select[203192](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 33-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[203277](input.spec-%var-a1-0, map[203276](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%m))), lambda[203197](Lambda3Var, map[203196](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[203195](Lambda2Var, select[203194](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[203193](bvmul(Lambda2Var, 4), select[203192](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 34-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[203279](input.spec-%var-a1-0, map[203278](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call.Lentry%1%fcallEnd))), lambda[203197](Lambda3Var, map[203196](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[203195](Lambda2Var, select[203194](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[203193](bvmul(Lambda2Var, 4), select[203192](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 35-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[203287](input.spec-%var-a1-0, map[203286](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[203285](Lambda3Var, map[203284](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[203283](Lambda2Var, select[203282](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[203281](bvmul(Lambda2Var, 4), select[203280](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%n, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 36-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[203288](input.spec-fcall_arg_copy.0.spec-%var-a1-0.L4%1%fcallEnd, map[203231](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[203230](Lambda3Var, map[203229](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[203228](Lambda2Var, select[203227](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[203226](bvmul(Lambda2Var, 4), select[203225](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 37-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[203289](input.spec-%var-a2-0, map[203286](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[203285](Lambda3Var, map[203284](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[203283](Lambda2Var, select[203282](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[203281](bvmul(Lambda2Var, 4), select[203280](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%n, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 38-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[203297](input.spec-%var-a2-0, map[203296](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[203295](Lambda3Var, map[203294](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[203293](Lambda2Var, select[203292](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[203291](bvmul(Lambda2Var, 4), select[203290](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%m, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 39-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[203305](input.spec-%var-a2-0, map[203304](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[203303](Lambda3Var, map[203302](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[203301](Lambda2Var, select[203300](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[203299](bvmul(Lambda2Var, 4), select[203298](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%call.Lentry%1%fcallEnd, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 40-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[234445](input.spec-%var-a1-0, map[141064](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141063](Lambda3Var, map[141060](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141059](Lambda2Var, select[141057](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141055](bvmul(Lambda2Var, 4), select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 41-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[234475](input.spec-%var-a1-0, map[142119](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142118](Lambda3Var, map[142117](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142116](Lambda2Var, select[142115](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[142114](bvmul(Lambda2Var, 4), select[142113](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%m, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 42-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[234481](input.spec-%var-a1-0, map[203296](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[203295](Lambda3Var, map[203294](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[203293](Lambda2Var, select[203292](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[203291](bvmul(Lambda2Var, 4), select[203290](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%m, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 43-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[234480](input.spec-%var-a1-0, map[203198](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[203197](Lambda3Var, map[203196](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[203195](Lambda2Var, select[203194](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[203193](bvmul(Lambda2Var, 4), select[203192](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 44-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[234482](input.spec-%var-a1-0, map[203304](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[203303](Lambda3Var, map[203302](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[203301](Lambda2Var, select[203300](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[203299](bvmul(Lambda2Var, 4), select[203298](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%call.Lentry%1%fcallEnd, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 45-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[234479](input.spec-%var-a1-0, map[203272](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[203271](Lambda3Var, map[203270](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[203269](Lambda2Var, select[203268](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[203267](select[203247](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%call.Lentry%1%fcallEnd, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 46-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[234478](input.spec-%var-a1-0, map[203265](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[203264](Lambda3Var, map[203263](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[203262](Lambda2Var, select[203261](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[203260](select[142113](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%m, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 47-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[234477](input.spec-%var-a1-0, map[141009](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141008](Lambda3Var, map[141007](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141006](Lambda2Var, select[141005](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141004](select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 48-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[234476](input.spec-%var-a1-0, map[203253](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[203252](Lambda3Var, map[203251](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[203250](Lambda2Var, select[203249](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[203248](bvmul(Lambda2Var, 4), select[203247](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%call.Lentry%1%fcallEnd, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 
    9 preds:
      0.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[203199](input.spec-%var-a2-0, map[203198](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[203197](Lambda3Var, map[203196](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[203195](Lambda2Var, select[203194](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[203193](bvmul(Lambda2Var, 4), select[203192](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      1.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142102](input.spec-%var-a1-0, map[142101](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142100](Lambda3Var, map[142099](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142098](Lambda2Var, select[142097](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[142096](select[141038](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false))))))  ==  true
      2.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[203232](input.spec-%var-a1-0, map[203231](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[203230](Lambda3Var, map[203229](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[203228](Lambda2Var, select[203227](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[203226](bvmul(Lambda2Var, 4), select[203225](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      3.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141045](input.spec-%var-a1-0, map[141044](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141043](Lambda3Var, map[141042](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141041](Lambda2Var, select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141039](bvmul(Lambda2Var, 4), select[141038](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      4.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141010](input.spec-%var-a2-0, map[141009](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141008](Lambda3Var, map[141007](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141006](Lambda2Var, select[141005](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141004](select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false))))))  ==  true
      5.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[203245](input.spec-fcall_arg_copy.0.spec-%var-a1-0.L4%1%fcallEnd, map[141044](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141043](Lambda3Var, map[141042](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141041](Lambda2Var, select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141039](bvmul(Lambda2Var, 4), select[141038](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      6.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141067](input.spec-%var-a2-0, map[141064](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141063](Lambda3Var, map[141060](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141059](Lambda2Var, select[141057](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141055](bvmul(Lambda2Var, 4), select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      7.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[203258](input.spec-fcall_arg_copy.0.spec-%var-a1-0.L4%1%fcallEnd, map[142101](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142100](Lambda3Var, map[142099](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142098](Lambda2Var, select[142097](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[142096](select[141038](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false))))))  ==  true
      8.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[203288](input.spec-fcall_arg_copy.0.spec-%var-a1-0.L4%1%fcallEnd, map[203231](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[203230](Lambda3Var, map[203229](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[203228](Lambda2Var, select[203227](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[203226](bvmul(Lambda2Var, 4), select[203225](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce748
    eqclass 3:
    smallest point cover name local-sizes-are-equal, type HOUDINI, exprs [0]: 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce748

L4%2%fcallEnd_Lentry%2%fcallEnd: (d:0, s:0, sp: 0)
  Invariant state (4 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(and(and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)))))), and(and(and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum3=/, 3), 0)), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum2=/, 3), 0)), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(and(and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum3=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin)), eq(input.dst.local./*___y___bar__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin)), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin))) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(and(and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)))))), and(and(and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum3=/, 3), 0)), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum2=/, 3), 0)), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(and(and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum3=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin)), eq(input.dst.local./*___y___bar__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin)), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce748
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 16-->input.spec-%tmpvar-19.L4%1%fcallEnd ; 17-->input.dst.llvm-%call.Lentry%1%fcallEnd ; 49-->input.spec-%tmpvar-20.L4%2%fcallEnd ; 50-->input.dst.llvm-%call1.Lentry%2%fcallEnd ; 
    1 preds:
      0.: bvneg(bvmul(input.spec-%tmpvar-19.L4%1%fcallEnd, 4294967295))  ==  input.dst.llvm-%call.Lentry%1%fcallEnd
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3v487.ce1331      1.:z3.ce1286      2.:z3.ce1313      3.:z3.ce748      4.:z3.ce757      5.:z3.ce775      6.:z3v487.ce758      7.:z3v487.ce793
    eqclass 2:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [53]: 6-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141010](input.spec-%var-a2-0, map[141009](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141008](Lambda3Var, map[141007](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141006](Lambda2Var, select[141005](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141004](select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 7-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141045](input.spec-%var-a1-0, map[141044](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141043](Lambda3Var, map[141042](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141041](Lambda2Var, select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141039](bvmul(Lambda2Var, 4), select[141038](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 8-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141067](input.spec-%var-a2-0, map[141064](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141063](Lambda3Var, map[141060](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141059](Lambda2Var, select[141057](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141055](bvmul(Lambda2Var, 4), select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 12-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142102](input.spec-%var-a1-0, map[142101](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142100](Lambda3Var, map[142099](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142098](Lambda2Var, select[142097](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[142096](select[141038](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 20-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[203199](input.spec-%var-a2-0, map[203198](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[203197](Lambda3Var, map[203196](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[203195](Lambda2Var, select[203194](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[203193](bvmul(Lambda2Var, 4), select[203192](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 21-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[203232](input.spec-%var-a1-0, map[203231](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[203230](Lambda3Var, map[203229](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[203228](Lambda2Var, select[203227](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[203226](bvmul(Lambda2Var, 4), select[203225](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 22-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[203237](input.spec-%var-a1-0, map[203236](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call.Lentry%1%fcallEnd))), lambda[141008](Lambda3Var, map[141007](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141006](Lambda2Var, select[141005](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141004](select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 24-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[203245](input.spec-fcall_arg_copy.0.spec-%var-a1-0.L4%1%fcallEnd, map[141044](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141043](Lambda3Var, map[141042](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141041](Lambda2Var, select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141039](bvmul(Lambda2Var, 4), select[141038](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 25-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[203254](input.spec-%var-a2-0, map[203253](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[203252](Lambda3Var, map[203251](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[203250](Lambda2Var, select[203249](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[203248](bvmul(Lambda2Var, 4), select[203247](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%call.Lentry%1%fcallEnd, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 26-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[203256](input.spec-%var-a1-0, map[203255](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call.Lentry%1%fcallEnd))), lambda[141063](Lambda3Var, map[141060](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141059](Lambda2Var, select[141057](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141055](bvmul(Lambda2Var, 4), select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 28-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[203258](input.spec-fcall_arg_copy.0.spec-%var-a1-0.L4%1%fcallEnd, map[142101](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142100](Lambda3Var, map[142099](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142098](Lambda2Var, select[142097](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[142096](select[141038](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 31-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[203273](input.spec-%var-a2-0, map[203272](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[203271](Lambda3Var, map[203270](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[203269](Lambda2Var, select[203268](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[203267](select[203247](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%call.Lentry%1%fcallEnd, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 34-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[203279](input.spec-%var-a1-0, map[203278](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call.Lentry%1%fcallEnd))), lambda[203197](Lambda3Var, map[203196](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[203195](Lambda2Var, select[203194](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[203193](bvmul(Lambda2Var, 4), select[203192](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 36-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[203288](input.spec-fcall_arg_copy.0.spec-%var-a1-0.L4%1%fcallEnd, map[203231](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[203230](Lambda3Var, map[203229](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[203228](Lambda2Var, select[203227](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[203226](bvmul(Lambda2Var, 4), select[203225](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 39-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[203305](input.spec-%var-a2-0, map[203304](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[203303](Lambda3Var, map[203302](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[203301](Lambda2Var, select[203300](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[203299](bvmul(Lambda2Var, 4), select[203298](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%call.Lentry%1%fcallEnd, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 44-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[234482](input.spec-%var-a1-0, map[203304](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[203303](Lambda3Var, map[203302](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[203301](Lambda2Var, select[203300](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[203299](bvmul(Lambda2Var, 4), select[203298](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%call.Lentry%1%fcallEnd, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 45-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[234479](input.spec-%var-a1-0, map[203272](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[203271](Lambda3Var, map[203270](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[203269](Lambda2Var, select[203268](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[203267](select[203247](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%call.Lentry%1%fcallEnd, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 48-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[234476](input.spec-%var-a1-0, map[203253](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[203252](Lambda3Var, map[203251](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[203250](Lambda2Var, select[203249](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[203248](bvmul(Lambda2Var, 4), select[203247](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%call.Lentry%1%fcallEnd, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 51-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246128](input.spec-%var-a2-0, map[246127](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[246126](Lambda3Var, map[246125](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[246124](Lambda2Var, select[246123](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[246122](bvmul(Lambda2Var, 4), select[246121](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 52-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246161](input.spec-%var-a1-0, map[246160](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[246159](Lambda3Var, map[246158](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[246157](Lambda2Var, select[246156](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[246155](bvmul(Lambda2Var, 4), select[246154](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 53-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246162](input.spec-fcall_arg_copy.0.spec-%var-a2-0.L4%2%fcallEnd, map[141009](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141008](Lambda3Var, map[141007](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141006](Lambda2Var, select[141005](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141004](select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 54-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246167](input.spec-%var-a1-0, map[246166](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call1.Lentry%2%fcallEnd))), lambda[141008](Lambda3Var, map[141007](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141006](Lambda2Var, select[141005](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141004](select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 55-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246176](input.spec-%var-a1-0, map[246175](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[246174](Lambda3Var, map[246173](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[246172](Lambda2Var, select[246171](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[246170](select[246169](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%call1.Lentry%2%fcallEnd, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 56-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246183](input.spec-%var-a2-0, map[246182](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[246181](Lambda3Var, map[246180](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[246179](Lambda2Var, select[246178](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[246177](bvmul(Lambda2Var, 4), select[246169](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%call1.Lentry%2%fcallEnd, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 57-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246185](input.spec-%var-a2-0, map[246184](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call.Lentry%1%fcallEnd))), lambda[141043](Lambda3Var, map[141042](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141041](Lambda2Var, select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141039](bvmul(Lambda2Var, 4), select[141038](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 58-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246187](input.spec-%var-a2-0, map[246186](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call1.Lentry%2%fcallEnd))), lambda[141043](Lambda3Var, map[141042](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141041](Lambda2Var, select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141039](bvmul(Lambda2Var, 4), select[141038](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 59-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246188](input.spec-fcall_arg_copy.0.spec-%var-a2-0.L4%2%fcallEnd, map[141064](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141063](Lambda3Var, map[141060](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141059](Lambda2Var, select[141057](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141055](bvmul(Lambda2Var, 4), select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 60-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246190](input.spec-%var-a1-0, map[246189](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call1.Lentry%2%fcallEnd))), lambda[141063](Lambda3Var, map[141060](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141059](Lambda2Var, select[141057](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141055](bvmul(Lambda2Var, 4), select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 61-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246191](input.spec-%var-a1-0, map[246182](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[246181](Lambda3Var, map[246180](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[246179](Lambda2Var, select[246178](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[246177](bvmul(Lambda2Var, 4), select[246169](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%call1.Lentry%2%fcallEnd, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 62-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246192](input.spec-%var-a2-0, map[246175](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[246174](Lambda3Var, map[246173](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[246172](Lambda2Var, select[246171](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[246170](select[246169](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%call1.Lentry%2%fcallEnd, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 63-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246194](input.spec-%var-a2-0, map[246193](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call.Lentry%1%fcallEnd))), lambda[142100](Lambda3Var, map[142099](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142098](Lambda2Var, select[142097](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[142096](select[141038](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 64-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246196](input.spec-%var-a2-0, map[246195](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call1.Lentry%2%fcallEnd))), lambda[142100](Lambda3Var, map[142099](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142098](Lambda2Var, select[142097](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[142096](select[141038](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 65-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246197](input.spec-fcall_arg_copy.0.spec-%var-a2-0.L4%2%fcallEnd, map[203198](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[203197](Lambda3Var, map[203196](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[203195](Lambda2Var, select[203194](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[203193](bvmul(Lambda2Var, 4), select[203192](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 66-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246199](input.spec-%var-a1-0, map[246198](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call1.Lentry%2%fcallEnd))), lambda[203197](Lambda3Var, map[203196](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[203195](Lambda2Var, select[203194](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[203193](bvmul(Lambda2Var, 4), select[203192](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 67-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246207](input.spec-%var-a1-0, map[246206](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[246205](Lambda3Var, map[246204](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[246203](Lambda2Var, select[246202](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[246201](bvmul(Lambda2Var, 4), select[246200](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%call1.Lentry%2%fcallEnd, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 68-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246208](input.spec-%var-a2-0, map[246206](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[246205](Lambda3Var, map[246204](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[246203](Lambda2Var, select[246202](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[246201](bvmul(Lambda2Var, 4), select[246200](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%call1.Lentry%2%fcallEnd, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 69-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246210](input.spec-%var-a2-0, map[246209](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call.Lentry%1%fcallEnd))), lambda[203230](Lambda3Var, map[203229](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[203228](Lambda2Var, select[203227](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[203226](bvmul(Lambda2Var, 4), select[203225](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 70-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246212](input.spec-%var-a2-0, map[246211](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call1.Lentry%2%fcallEnd))), lambda[203230](Lambda3Var, map[203229](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[203228](Lambda2Var, select[203227](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[203226](bvmul(Lambda2Var, 4), select[203225](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 71-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246213](input.spec-%var-a1-0, map[246184](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call.Lentry%1%fcallEnd))), lambda[141043](Lambda3Var, map[141042](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141041](Lambda2Var, select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141039](bvmul(Lambda2Var, 4), select[141038](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 72-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246214](input.spec-%var-a1-0, map[246186](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call1.Lentry%2%fcallEnd))), lambda[141043](Lambda3Var, map[141042](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141041](Lambda2Var, select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141039](bvmul(Lambda2Var, 4), select[141038](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 73-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246215](input.spec-%var-a1-0, map[246193](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call.Lentry%1%fcallEnd))), lambda[142100](Lambda3Var, map[142099](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142098](Lambda2Var, select[142097](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[142096](select[141038](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 74-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246216](input.spec-%var-a1-0, map[246195](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call1.Lentry%2%fcallEnd))), lambda[142100](Lambda3Var, map[142099](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142098](Lambda2Var, select[142097](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[142096](select[141038](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 75-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246217](input.spec-%var-a1-0, map[246209](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call.Lentry%1%fcallEnd))), lambda[203230](Lambda3Var, map[203229](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[203228](Lambda2Var, select[203227](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[203226](bvmul(Lambda2Var, 4), select[203225](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 76-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246218](input.spec-%var-a1-0, map[246211](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call1.Lentry%2%fcallEnd))), lambda[203230](Lambda3Var, map[203229](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[203228](Lambda2Var, select[203227](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[203226](bvmul(Lambda2Var, 4), select[203225](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 77-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246219](input.spec-fcall_arg_copy.0.spec-%var-a2-0.L4%2%fcallEnd, map[246127](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[246126](Lambda3Var, map[246125](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[246124](Lambda2Var, select[246123](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[246122](bvmul(Lambda2Var, 4), select[246121](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 78-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246221](input.spec-%var-a1-0, map[246220](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call.Lentry%1%fcallEnd))), lambda[246126](Lambda3Var, map[246125](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[246124](Lambda2Var, select[246123](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[246122](bvmul(Lambda2Var, 4), select[246121](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 79-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246223](input.spec-%var-a1-0, map[246222](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call1.Lentry%2%fcallEnd))), lambda[246126](Lambda3Var, map[246125](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[246124](Lambda2Var, select[246123](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[246122](bvmul(Lambda2Var, 4), select[246121](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 80-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246231](input.spec-%var-a1-0, map[246230](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[246229](Lambda3Var, map[246228](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[246227](Lambda2Var, select[246226](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[246225](bvmul(Lambda2Var, 4), select[246224](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%call.Lentry%1%fcallEnd, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 81-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246239](input.spec-%var-a1-0, map[246238](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[246237](Lambda3Var, map[246236](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[246235](Lambda2Var, select[246234](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[246233](bvmul(Lambda2Var, 4), select[246232](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%call1.Lentry%2%fcallEnd, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 82-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246240](input.spec-%var-a2-0, map[246230](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[246229](Lambda3Var, map[246228](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[246227](Lambda2Var, select[246226](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[246225](bvmul(Lambda2Var, 4), select[246224](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%call.Lentry%1%fcallEnd, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 83-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246241](input.spec-%var-a2-0, map[246238](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[246237](Lambda3Var, map[246236](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[246235](Lambda2Var, select[246234](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[246233](bvmul(Lambda2Var, 4), select[246232](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%call1.Lentry%2%fcallEnd, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 84-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246243](input.spec-%var-a2-0, map[246242](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call.Lentry%1%fcallEnd))), lambda[246159](Lambda3Var, map[246158](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[246157](Lambda2Var, select[246156](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[246155](bvmul(Lambda2Var, 4), select[246154](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 85-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246245](input.spec-%var-a2-0, map[246244](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call1.Lentry%2%fcallEnd))), lambda[246159](Lambda3Var, map[246158](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[246157](Lambda2Var, select[246156](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[246155](bvmul(Lambda2Var, 4), select[246154](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 
    15 preds:
      0.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246219](input.spec-fcall_arg_copy.0.spec-%var-a2-0.L4%2%fcallEnd, map[246127](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[246126](Lambda3Var, map[246125](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[246124](Lambda2Var, select[246123](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[246122](bvmul(Lambda2Var, 4), select[246121](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      1.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246197](input.spec-fcall_arg_copy.0.spec-%var-a2-0.L4%2%fcallEnd, map[203198](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[203197](Lambda3Var, map[203196](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[203195](Lambda2Var, select[203194](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[203193](bvmul(Lambda2Var, 4), select[203192](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      2.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246162](input.spec-fcall_arg_copy.0.spec-%var-a2-0.L4%2%fcallEnd, map[141009](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141008](Lambda3Var, map[141007](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141006](Lambda2Var, select[141005](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141004](select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false))))))  ==  true
      3.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[203288](input.spec-fcall_arg_copy.0.spec-%var-a1-0.L4%1%fcallEnd, map[203231](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[203230](Lambda3Var, map[203229](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[203228](Lambda2Var, select[203227](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[203226](bvmul(Lambda2Var, 4), select[203225](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      4.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[203199](input.spec-%var-a2-0, map[203198](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[203197](Lambda3Var, map[203196](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[203195](Lambda2Var, select[203194](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[203193](bvmul(Lambda2Var, 4), select[203192](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      5.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[203258](input.spec-fcall_arg_copy.0.spec-%var-a1-0.L4%1%fcallEnd, map[142101](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142100](Lambda3Var, map[142099](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142098](Lambda2Var, select[142097](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[142096](select[141038](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false))))))  ==  true
      6.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141067](input.spec-%var-a2-0, map[141064](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141063](Lambda3Var, map[141060](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141059](Lambda2Var, select[141057](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141055](bvmul(Lambda2Var, 4), select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      7.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141010](input.spec-%var-a2-0, map[141009](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141008](Lambda3Var, map[141007](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141006](Lambda2Var, select[141005](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141004](select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false))))))  ==  true
      8.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142102](input.spec-%var-a1-0, map[142101](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142100](Lambda3Var, map[142099](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142098](Lambda2Var, select[142097](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[142096](select[141038](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false))))))  ==  true
      9.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246188](input.spec-fcall_arg_copy.0.spec-%var-a2-0.L4%2%fcallEnd, map[141064](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141063](Lambda3Var, map[141060](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141059](Lambda2Var, select[141057](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141055](bvmul(Lambda2Var, 4), select[141003](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      10.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246128](input.spec-%var-a2-0, map[246127](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[246126](Lambda3Var, map[246125](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[246124](Lambda2Var, select[246123](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[246122](bvmul(Lambda2Var, 4), select[246121](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      11.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141045](input.spec-%var-a1-0, map[141044](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141043](Lambda3Var, map[141042](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141041](Lambda2Var, select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141039](bvmul(Lambda2Var, 4), select[141038](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      12.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[203232](input.spec-%var-a1-0, map[203231](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[203230](Lambda3Var, map[203229](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[203228](Lambda2Var, select[203227](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[203226](bvmul(Lambda2Var, 4), select[203225](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      13.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246161](input.spec-%var-a1-0, map[246160](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[246159](Lambda3Var, map[246158](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[246157](Lambda2Var, select[246156](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd[246155](bvmul(Lambda2Var, 4), select[246154](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      14.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[203245](input.spec-fcall_arg_copy.0.spec-%var-a1-0.L4%1%fcallEnd, map[141044](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141043](Lambda3Var, map[141042](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141041](Lambda2Var, select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141039](bvmul(Lambda2Var, 4), select[141038](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce748
    eqclass 3:
    smallest point cover name local-sizes-are-equal, type HOUDINI, exprs [0]: 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce748

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


Found equivalence proof. Final CG:
<cg>
  Edges[5]: L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart (C L0%0%d => C L4%1%fcallStart at mu 1 delta {1,0}, A L0%0%d => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd (C L4%1%fcallStart => C L4%1%fcallEnd at mu 1 delta {1,0}, A (line 12 at column 10) => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart (C L4%1%fcallEnd => C L4%2%fcallStart at mu 1 delta {1,0}, A (line 12 at column 10) => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd (C L4%2%fcallStart => C L4%2%fcallEnd at mu 1 delta {1,0}, A (line 12 at column 10) => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d (C L4%2%fcallEnd => C E0%0%d at mu 1 delta {1,0}, A (line 12 at column 10) => A E0%0%d at mu 1 delta {1,0})
  Nodes[6]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L4%1%fcallStart_Lentry%1%fcallStart (C L4%1%fcallStart, A (line 12 at column 10))
                L4%1%fcallStart_Lentry%1%fcallStart [inductive-invariants] contains 23 counterexamples (for correlating 4 bv exprs)
            L4%1%fcallEnd_Lentry%1%fcallEnd (C L4%1%fcallEnd, A (line 12 at column 10))
                L4%1%fcallEnd_Lentry%1%fcallEnd [inductive-invariants] contains 17 counterexamples (for correlating 5 bv exprs)
            L4%2%fcallStart_Lentry%2%fcallStart (C L4%2%fcallStart, A (line 12 at column 10))
                L4%2%fcallStart_Lentry%2%fcallStart [inductive-invariants] contains 12 counterexamples (for correlating 5 bv exprs)
            L4%2%fcallEnd_Lentry%2%fcallEnd (C L4%2%fcallEnd, A (line 12 at column 10))
                L4%2%fcallEnd_Lentry%2%fcallEnd [inductive-invariants] contains 10 counterexamples (for correlating 4 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
EQUIV equivalence check for function bar. 214.43s, query:smt.: 152.208s (num_starts 98; 1.5531s/start), decide_hoare_triple.ce.: 0s (num_starts 0; -nans/start), decide_hoare_triple_helper.: 211.854s (num_starts 234; 0.9054s/start)ftmap_run_pointsto_analysis.: 0.268449s (num_starts 2; 0.1342s/start)

Printing statistics:

timers:
decide_hoare_triple.ce.: 0s (num_starts 0; -nans/start)
corr_graph_update_dst_to_src_submaps_for_cg_edge.: 4e-06s (num_starts 4; 0.0000s/start)
update_dst_edge_for_local_allocations_and_deallocations.: 5e-06s (num_starts 5; 0.0000s/start)
compute_loop_hoisting_non_linear_exprs_at_pcpair.: 6e-06s (num_starts 5; 0.0000s/start)
alias_val_t::constructor_with_map_arg.: 7e-06s (num_starts 12; 0.0000s/start)
cg_compute_well_formedness_conditions_for_stack_pointer.: 7e-06s (num_starts 5; 0.0000s/start)
invariant_inference_xfer.local-sizes-are-equal.from.L0%0%d_L0%0%d.: 9e-06s (num_starts 1; 0.0000s/start)
invariant_inference_xfer.local-sizes-are-equal.from.L4%1%fcallEnd_Lentry%1%fcallEnd.: 9e-06s (num_starts 1; 0.0000s/start)
invariant_inference_xfer.local-sizes-are-equal.from.L4%1%fcallStart_Lentry%1%fcallStart.: 1e-05s (num_starts 1; 0.0000s/start)
compute_tfg_pred_eqclass.: 1.1e-05s (num_starts 4; 0.0000s/start)
get_paths_with_matching_to_pc.: 1.1e-05s (num_starts 5; 0.0000s/start)
invariant_inference_xfer.local-sizes-are-equal.from.L4%2%fcallStart_Lentry%2%fcallStart.: 1.1e-05s (num_starts 1; 0.0000s/start)
prune_dst_memslots.: 1.1e-05s (num_starts 4; 0.0000s/start)
aliasing_constraints.get_region_agrees_with_memlabel_preds.: 1.8e-05s (num_starts 5; 0.0000s/start)
aliasing_constraints.get_region_agrees_with_memlabel_exprs.: 2.1e-05s (num_starts 27; 0.0000s/start)
determinize_value_expr_map.: 3.1e-05s (num_starts 15; 0.0000s/start)
get_intersected_lr_status.: 3.5e-05s (num_starts 2; 0.0000s/start)
corr_graph_add_correlation_and_create_new_correl_entry.after_corr_graph_add_correlation.: 4.3e-05s (num_starts 5; 0.0000s/start)
tfg::populate_loc_definedness.set_loc_definedness().: 5.4e-05s (num_starts 3; 0.0000s/start)
prove_trivial.: 5.6e-05s (num_starts 87; 0.0000s/start)
remove_complex_bv_exprs.: 6.1e-05s (num_starts 4; 0.0000s/start)
lr_status_meet.: 6.3e-05s (num_starts 102; 0.0000s/start)
sp_version_relations_val_t::meet.: 6.6e-05s (num_starts 164; 0.0000s/start)
populate_lr_status_for_sprel_locs_map.calling.compute_lr_status_for_expr.: 8e-05s (num_starts 3; 0.0000s/start)
select_llvmvars_not_defined_on_from_pc_and_add_to_dst.: 8.3e-05s (num_starts 4; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.post_dfa.: 8.4e-05s (num_starts 1; 0.0001s/start)
expr_is_hidden_reg.: 8.9e-05s (num_starts 135; 0.0000s/start)
corr_graph_generate_local_sprel_expr_guesses_for_locals.: 9.4e-05s (num_starts 5; 0.0000s/start)
get_lr_status_for_loc_ids.: 9.6e-05s (num_starts 30; 0.0000s/start)
check_wfconds_on_edge.L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart.: 0.000107s (num_starts 2; 0.0001s/start)
graph_add_location_slots_using_state_mem_acc_map.: 0.000113s (num_starts 10; 0.0000s/start)
graph_locs_add_exvregs_for_edge.: 0.000115s (num_starts 10; 0.0000s/start)
graph_locs_add_all_exvregs.: 0.000122s (num_starts 2; 0.0001s/start)
expr_is_callee_save_const.: 0.000124s (num_starts 147; 0.0000s/start)
ce_perform_memory_fuzzing.: 0.000125s (num_starts 131; 0.0000s/start)
tfg::populate_loc_definedness.post_dfa.: 0.00013s (num_starts 3; 0.0000s/start)
rdefs_locs_ssa_analysis::xfer_and_meet.: 0.000153s (num_starts 5; 0.0000s/start)
graph_locs_add_local_vars_for_edge.: 0.000157s (num_starts 10; 0.0000s/start)
sp_version_relations_val_t::compute_transitive_closure.: 0.000157s (num_starts 21; 0.0000s/start)
graph_locs_add_all_local_vars.: 0.000162s (num_starts 2; 0.0001s/start)
select_llvmvars_live_at_pc_and_add_to_dst.: 0.000191s (num_starts 4; 0.0000s/start)
def_analysis::xfer_and_meet.: 0.00023s (num_starts 15; 0.0000s/start)
populate_dominator_and_postdominator_relations.: 0.000235s (num_starts 2; 0.0001s/start)
pred_lhs_rhs_convert_memmask_to_select_for_symbols_and_locals.: 0.000254s (num_starts 234; 0.0000s/start)
compute_sprel_relations.: 0.000263s (num_starts 2; 0.0001s/start)
propagate_sprels.: 0.000272s (num_starts 2; 0.0001s/start)
pth_collect_preds_using_atom_func.: 0.00029s (num_starts 16; 0.0000s/start)
ssa_vars_renaming_analysis::xfer_and_meet.: 0.000291s (num_starts 10; 0.0000s/start)
removeMostPromising.: 0.000296s (num_starts 16; 0.0000s/start)
tfg::collect_assumes_around_edge.: 0.000305s (num_starts 25; 0.0000s/start)
sort_exprs_and_compute_bv_eqclass.: 0.000323s (num_starts 4; 0.0001s/start)
tfg_edge_composition_get_assumes.: 0.000333s (num_starts 16; 0.0000s/start)
collect_aliasing_constaints_starting_at_pc_till_maximal_bbs.: 0.000334s (num_starts 11; 0.0000s/start)
add_fresh_counterexample_at_pc_and_propagate.L4%2%fcallEnd_Lentry%2%fcallEnd.inductive-invariants.: 0.00034s (num_starts 2; 0.0002s/start)
collect_dst_to_src_submap_preds.: 0.000343s (num_starts 234; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_solve.: 0.000345s (num_starts 1; 0.0003s/start)
compute_bv_bool_eqclass.: 0.000351s (num_starts 4; 0.0001s/start)
rdefs_vars_ssa_analysis::xfer_and_meet.: 0.000368s (num_starts 10; 0.0000s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.bvcover_weaken_till_arity_within_bound.: 0.000379s (num_starts 160; 0.0000s/start)
graph_locs_add_all_specvars.: 0.00043s (num_starts 2; 0.0002s/start)
expr_represents_llvm_undef.: 0.000433s (num_starts 151; 0.0000s/start)
sp_version_relations_val_t::generate_vals_from_gen_set.: 0.000433s (num_starts 20; 0.0000s/start)
graph_locs_add_all_llvmvars.: 0.000458s (num_starts 2; 0.0002s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.000467s (num_starts 1; 0.0005s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon);-trivial.: 0.000467s (num_starts 1; 0.0005s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.000468s (num_starts 1; 0.0005s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities..: 0.000471s (num_starts 1; 0.0005s/start)
populate_locid2expr_map.: 0.000482s (num_starts 2; 0.0002s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities..: 0.000484s (num_starts 1; 0.0005s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_initialize.: 0.000509s (num_starts 1; 0.0005s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.: 0.00054s (num_starts 1; 0.0005s/start)
tfg_llvm_t::tfg_llvm_fill_remaining_llvm_to_source_mappings_using_avail_exprs.: 0.000564s (num_starts 1; 0.0006s/start)
proof_query_is_trivial_helper.: 0.000594s (num_starts 234; 0.0000s/start)
compute_ssa_vars_renaming_map.: 0.000613s (num_starts 2; 0.0003s/start)
aliasing_constraints.convert_to_expr.: 0.000625s (num_starts 147; 0.0000s/start)
populate_branch_affecting_locs.: 0.000643s (num_starts 3; 0.0002s/start)
tfg::populate_loc_definedness.before_solve.: 0.000656s (num_starts 3; 0.0002s/start)
expr_contains_only_constants_or_sp_versions_or_count_sort_vars.: 0.000659s (num_starts 169; 0.0000s/start)
generate_region_agrees_with_memlabel_constraints_from_expr.: 0.00068s (num_starts 22; 0.0000s/start)
compute_vars_reaching_definitions.: 0.000682s (num_starts 2; 0.0003s/start)
tfg_edge_composition_get_edge_cond_using_econd_fn.: 0.000717s (num_starts 17; 0.0000s/start)
graph_visit_exprs.: 0.000744s (num_starts 3; 0.0002s/start)
get_uapprox_predicate_list_from_guarded_preds_and_graph_ec.: 0.000755s (num_starts 147; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_varname_lr_status.: 0.000807s (num_starts 1; 0.0008s/start)
create_closure_matrix.: 0.000822s (num_starts 27; 0.0000s/start)
expr_simplify_using_sprel_and_memlabel_maps.sprel.: 0.000832s (num_starts 192; 0.0000s/start)
graph_ec_apply_trans_funs_helper.1.: 0.000897s (num_starts 10; 0.0001s/start)
tfg_suffixpath_get_expr_helper.: 0.000914s (num_starts 24; 0.0000s/start)
compute_region_agrees_with_memlabel_eqclass.: 0.000924s (num_starts 4; 0.0002s/start)
graph_visit_exprs_and_keys.: 0.000934s (num_starts 2; 0.0005s/start)
get_unrolled_loop_paths_from.: 0.000936s (num_starts 4; 0.0002s/start)
collect_assumes_around_edge.: 0.000955s (num_starts 5; 0.0002s/start)
get_maximal_basic_block_edge_list_starting_at_pc.: 0.000961s (num_starts 279; 0.0000s/start)
generate_aliasing_constraints_from_expr.: 0.000992s (num_starts 211; 0.0000s/start)
edge_update_memlabel_map_for_mlvars.populate_memlabel_map.: 0.000998s (num_starts 20; 0.0000s/start)
tfg::populate_loc_definedness.before_initialize.: 0.000999s (num_starts 3; 0.0003s/start)
populate_transitive_closure.: 0.001051s (num_starts 17; 0.0001s/start)
tfg::populate_loc_definedness.: 0.00109s (num_starts 3; 0.0004s/start)
get_path_wp_exprs_for_cg_invariant_inference.computeWP_for_pred_across_ec.: 0.00117s (num_starts 10; 0.0001s/start)
graph_get_reduced_graph_with_anchor_nodes_only.: 0.001206s (num_starts 5; 0.0002s/start)
interesting_wp_exprs_apply_trans_funs.: 0.001215s (num_starts 10; 0.0001s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_expr_is_provable.: 0.001304s (num_starts 147; 0.0000s/start)
tfg::get_aliasing_constraints_for_edge.: 0.001407s (num_starts 57; 0.0000s/start)
find_dominators.: 0.001581s (num_starts 29; 0.0001s/start)
tfg_expr_contains_fcall_mem_on_incoming_edge.tfg.computeWP_for_pred_across_ec.: 0.001582s (num_starts 16; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallStart_Lentry%1%fcallStart;(epsilon);pred-type-unknown;-trivial.: 0.001614s (num_starts 1; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallStart_Lentry%1%fcallStart;(epsilon);pred-type-unknown.: 0.001616s (num_starts 1; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L4%1%fcallStart_Lentry%1%fcallStart;(epsilon);pred-type-unknown;-trivial.: 0.001643s (num_starts 1; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L4%1%fcallStart_Lentry%1%fcallStart;(epsilon);pred-type-unknown.: 0.001645s (num_starts 1; 0.0016s/start)
graph_edge_composition_get_to_state_using_to_state_fn.: 0.001706s (num_starts 175; 0.0000s/start)
identify_address_taken_local_variables.: 0.001709s (num_starts 3; 0.0006s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallStart_Lentry%1%fcallStart;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.001751s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallStart_Lentry%1%fcallStart;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.001755s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallStart_Lentry%1%fcallStart;(epsilon);outgoing_edges_cover_all_possibilities..: 0.001757s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallStart_Lentry%1%fcallStart;(epsilon);outgoing_edges_cover_all_possibilities..: 0.001765s (num_starts 1; 0.0018s/start)
graph_identify_back_edges.: 0.001772s (num_starts 25; 0.0001s/start)
corr_graph::get_aliasing_constraints_for_edge_helper.: 0.001816s (num_starts 24; 0.0001s/start)
tfg_llvm_t::tfg_llvm_compute_pc_to_llvm_to_source_varname_map.: 0.001828s (num_starts 4; 0.0005s/start)
graph_identify_natural_loops.: 0.001832s (num_starts 25; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1;linear;-trivial.: 0.001836s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);linear;-trivial.: 0.001837s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);linear.: 0.001839s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1;linear.: 0.001842s (num_starts 1; 0.0018s/start)
corr_graph::get_aliasing_constraints_for_edge.: 0.001876s (num_starts 24; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);linear;-trivial.: 0.001881s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);linear.: 0.001884s (num_starts 1; 0.0019s/start)
invariant_inference_xfer.expr-group-bvs.from.L4%1%fcallStart_Lentry%1%fcallStart.: 0.001951s (num_starts 1; 0.0020s/start)
proof_query_is_trivial.: 0.001986s (num_starts 234; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallStart_Lentry%2%fcallStart;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.002161s (num_starts 1; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%2%fcallStart_Lentry%2%fcallStart;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.002163s (num_starts 1; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%2%fcallStart_Lentry%2%fcallStart;(epsilon);outgoing_edges_cover_all_possibilities..: 0.002165s (num_starts 1; 0.0022s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallStart_Lentry%2%fcallStart;(epsilon);outgoing_edges_cover_all_possibilities..: 0.002174s (num_starts 1; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%2%fcallStart_Lentry%2%fcallStart;(epsilon);pred-type-unknown;-trivial.: 0.002196s (num_starts 1; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%2%fcallStart_Lentry%2%fcallStart;(epsilon);pred-type-unknown.: 0.002199s (num_starts 1; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.00224s (num_starts 1; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);abstract-memlabel-asserts-houdini-guess.: 0.002245s (num_starts 1; 0.0022s/start)
parse_yices_model.: 0.002334s (num_starts 1; 0.0023s/start)
get_maximal_basic_block_edge_list_ending_at_pc.: 0.002355s (num_starts 279; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L4%2%fcallStart_Lentry%2%fcallStart;(epsilon);pred-type-unknown;-trivial.: 0.002394s (num_starts 1; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L4%2%fcallStart_Lentry%2%fcallStart;(epsilon);pred-type-unknown.: 0.002397s (num_starts 1; 0.0024s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.002453s (num_starts 1; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.002457s (num_starts 1; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);outgoing_edges_cover_all_possibilities..: 0.00246s (num_starts 1; 0.0025s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);outgoing_edges_cover_all_possibilities..: 0.002468s (num_starts 1; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1;linear;-trivial.: 0.002472s (num_starts 1; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);linear;-trivial.: 0.002474s (num_starts 1; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);linear.: 0.002477s (num_starts 1; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1;linear.: 0.00248s (num_starts 1; 0.0025s/start)
set_result_and_counter_example.: 0.002516s (num_starts 98; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;linear;-trivial.: 0.002558s (num_starts 1; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);linear;-trivial.: 0.00256s (num_starts 1; 0.0026s/start)
invariant_inference_xfer.expr-group-bvs.from.L4%2%fcallStart_Lentry%2%fcallStart.: 0.002583s (num_starts 1; 0.0026s/start)
collect_aliasing_constraints_around_path_helper.: 0.002599s (num_starts 134; 0.0000s/start)
corr_graph_enumerate_correlations.: 0.002642s (num_starts 5; 0.0005s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);linear;-trivial.: 0.002653s (num_starts 1; 0.0027s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);linear.: 0.002656s (num_starts 1; 0.0027s/start)
populate_locs_potentially_modified_on_edge.: 0.002796s (num_starts 3; 0.0009s/start)
decide_hoare_triple_helper_get_aliasing_cons.: 0.002899s (num_starts 29; 0.0001s/start)
get_path_wp_exprs_for_cg_invariant_inference.: 0.002928s (num_starts 4; 0.0007s/start)
do_ssa_transformation.: 0.002999s (num_starts 2; 0.0015s/start)
collect_aliasing_constraints_around_path.: 0.003033s (num_starts 86; 0.0000s/start)
graph_with_guessing_sync_preds.: 0.003033s (num_starts 234; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.003195s (num_starts 1; 0.0032s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallEnd_Lentry%2%fcallEnd;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.003196s (num_starts 1; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);abstract-memlabel-asserts-houdini-guess.: 0.003197s (num_starts 1; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%2%fcallEnd_Lentry%2%fcallEnd;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.003197s (num_starts 1; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%2%fcallEnd_Lentry%2%fcallEnd;(epsilon);outgoing_edges_cover_all_possibilities..: 0.003201s (num_starts 1; 0.0032s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallEnd_Lentry%2%fcallEnd;(epsilon);outgoing_edges_cover_all_possibilities..: 0.003211s (num_starts 1; 0.0032s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallStart_Lentry%1%fcallStart;(epsilon);pred-type-unknown;-trivial.: 0.00325s (num_starts 2; 0.0016s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallStart_Lentry%1%fcallStart;(epsilon);pred-type-unknown.: 0.003277s (num_starts 2; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.003313s (num_starts 1; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.003314s (num_starts 1; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);abstract-memlabel-asserts-houdini-guess.: 0.003316s (num_starts 1; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1;abstract-memlabel-asserts-houdini-guess.: 0.003319s (num_starts 1; 0.0033s/start)
segment_memory_and_perform_commonMEM_optimization.: 0.00343s (num_starts 147; 0.0000s/start)
expr_linear_relation_holds::visit.var.: 0.003475s (num_starts 175; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);linear;-trivial.: 0.003707s (num_starts 2; 0.0019s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);linear.: 0.003738s (num_starts 2; 0.0019s/start)
check_node_stability_after_CE_addition.: 0.003803s (num_starts 168; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.003862s (num_starts 1; 0.0039s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.003863s (num_starts 1; 0.0039s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);abstract-memlabel-asserts-houdini-guess.: 0.003866s (num_starts 1; 0.0039s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1;abstract-memlabel-asserts-houdini-guess.: 0.00387s (num_starts 1; 0.0039s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.003888s (num_starts 1; 0.0039s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);abstract-memlabel-asserts-houdini-guess.: 0.003891s (num_starts 1; 0.0039s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.003958s (num_starts 1; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.003961s (num_starts 1; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);abstract-memlabel-asserts-houdini-guess.: 0.003968s (num_starts 1; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;abstract-memlabel-asserts-houdini-guess.: 0.003973s (num_starts 1; 0.0040s/start)
compute_loop_hoisting_select_exprs_at_pcpair.: 0.004076s (num_starts 5; 0.0008s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L4%1%fcallStart_Lentry%1%fcallStart.: 0.004111s (num_starts 1; 0.0041s/start)
compute_regions.: 0.00419s (num_starts 25; 0.0002s/start)
eqspace::smallest_point_cover_houdini_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.004371s (num_starts 160; 0.0000s/start)
check_wfconds_on_edge.L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd.: 0.004509s (num_starts 2; 0.0023s/start)
cg_src_dst_tfg_copy.: 0.004528s (num_starts 2; 0.0023s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallStart_Lentry%2%fcallStart;(epsilon);pred-type-unknown;-trivial.: 0.004574s (num_starts 2; 0.0023s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L4%2%fcallStart_Lentry%2%fcallStart.: 0.004605s (num_starts 1; 0.0046s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallStart_Lentry%2%fcallStart;(epsilon);pred-type-unknown.: 0.004614s (num_starts 2; 0.0023s/start)
get_next_potential_correlations.: 0.004756s (num_starts 5; 0.0010s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::sp_version_relations_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.004781s (num_starts 20; 0.0002s/start)
update_dst_fcall_edge_using_src_fcall_edge.: 0.004811s (num_starts 2; 0.0024s/start)
decide_hoare_triple_helper;per-path;L4%1%fcallStart_Lentry%1%fcallStart;(epsilon);-trivial.: 0.004999s (num_starts 3; 0.0017s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);linear;-trivial.: 0.005117s (num_starts 2; 0.0026s/start)
expr_simplify_using_sprel_and_memlabel_maps.model.: 0.005147s (num_starts 192; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);linear.: 0.00515s (num_starts 2; 0.0026s/start)
check_wfconds_on_edge.L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd.: 0.005878s (num_starts 2; 0.0029s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.sprel.: 0.005928s (num_starts 414; 0.0000s/start)
create_sp_version_relations_lattice_at_pc.: 0.006046s (num_starts 27; 0.0002s/start)
construct_linear_combination_exprs.: 0.00615s (num_starts 217; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.00619s (num_starts 2; 0.0031s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);abstract-memlabel-asserts-houdini-guess.: 0.006237s (num_starts 2; 0.0031s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.0065s (num_starts 2; 0.0032s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);abstract-memlabel-asserts-houdini-guess.: 0.006531s (num_starts 2; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);linear;-trivial.: 0.00663s (num_starts 1; 0.0066s/start)
bv_const_ref_map2expr_map.: 0.006666s (num_starts 217; 0.0000s/start)
compute_interesting_exprs_for_invariant_inference_for_pc.: 0.006691s (num_starts 8; 0.0008s/start)
decide_hoare_triple_helper;per-path;L4%2%fcallStart_Lentry%2%fcallStart;(epsilon);-trivial.: 0.006734s (num_starts 3; 0.0022s/start)
expr_simplify_using_sprel_and_memlabel_maps.: 0.007409s (num_starts 192; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.007741s (num_starts 2; 0.0039s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);abstract-memlabel-asserts-houdini-guess.: 0.007774s (num_starts 2; 0.0039s/start)
get_unrolled_paths_from.: 0.008138s (num_starts 36; 0.0002s/start)
eqspace::smallest_point_cover_houdini_expects_stability_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.008574s (num_starts 165; 0.0001s/start)
corr_graph::get_simplified_non_mem_assumes_helper.: 0.008602s (num_starts 566; 0.0000s/start)
get_sprel_map_pair_at_pc.: 0.009126s (num_starts 147; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);linear;-trivial.: 0.009169s (num_starts 2; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.009321s (num_starts 3; 0.0031s/start)
corr_graph::get_simplified_non_mem_assumes.: 0.009673s (num_starts 566; 0.0000s/start)
populate_simplified_to_state.: 0.009718s (num_starts 3; 0.0032s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities.;-trivial.: 0.010032s (num_starts 5; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;outgoing_edges_cover_all_possibilities.;-trivial.: 0.010039s (num_starts 5; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;outgoing_edges_cover_all_possibilities..: 0.010078s (num_starts 5; 0.0020s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities..: 0.010091s (num_starts 5; 0.0020s/start)
graph_per_loc_dfa_val_t<avail_exprs_val_t>::meet.: 0.010124s (num_starts 20; 0.0005s/start)
bv_expr_pair_ranges_merge_adjacent.: 0.010208s (num_starts 196; 0.0001s/start)
populate_simplified_assets.: 0.010277s (num_starts 6; 0.0017s/start)
expr_substitute_using_available_exprs_submap.: 0.010882s (num_starts 102; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;linear;-trivial.: 0.011151s (num_starts 3; 0.0037s/start)
populate_auxilliary_structures_dependent_on_locs.: 0.013084s (num_starts 3; 0.0044s/start)
avail_exprs_create_submap.: 0.014976s (num_starts 60; 0.0002s/start)
pth_collect_preds_using_atom_func_and_wp_fn.operator().: 0.015928s (num_starts 829; 0.0000s/start)
ldr_decomposition.: 0.016221s (num_starts 160; 0.0001s/start)
avail_exprs_val_t::generate_vals_from_gen_set.: 0.016788s (num_starts 20; 0.0008s/start)
decide_hoare_triple_helper;per-query-type;linear;-trivial.: 0.018005s (num_starts 6; 0.0030s/start)
get_mask_ranges_for_memlabel.: 0.018339s (num_starts 98; 0.0002s/start)
recomputed_preds_would_be_different_from_current_preds.: 0.018455s (num_starts 480; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);pred-type-unknown;-trivial.: 0.018647s (num_starts 9; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);pred-type-unknown.: 0.01867s (num_starts 9; 0.0021s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.model.: 0.019406s (num_starts 414; 0.0000s/start)
src_tfg_counter_example_translate_on_edge_composition.delta{1,0}.: 0.020274s (num_starts 160; 0.0001s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.020443s (num_starts 6; 0.0034s/start)
pth_collect_preds_using_atom_func_and_wp_fn.: 0.020786s (num_starts 813; 0.0000s/start)
src_tfg_counter_example_translate_on_edge_composition.: 0.021265s (num_starts 160; 0.0001s/start)
counter_example_satisfies_preds.: 0.022691s (num_starts 507; 0.0000s/start)
pth_collect_simplified_preds_using_atom_func.: 0.022947s (num_starts 797; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);pred-type-unknown;-trivial.: 0.023303s (num_starts 9; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);pred-type-unknown.: 0.023344s (num_starts 9; 0.0026s/start)
expr_label_memlabels_using_memlabel_map_visitor.simplify.: 0.023807s (num_starts 606; 0.0000s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.: 0.02435s (num_starts 414; 0.0001s/start)
predicate_canonicalized.: 0.027494s (num_starts 217; 0.0001s/start)
graph_edge_composition_get_simplified_edge_cond.: 0.029276s (num_starts 2102; 0.0000s/start)
graph_with_guessing_relax_dst_memlabels_on_ec_for_corr_graph.: 0.03002s (num_starts 5; 0.0060s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::avail_exprs_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.031546s (num_starts 20; 0.0016s/start)
collect_assumes_around_path_helper.: 0.036142s (num_starts 279; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);false-predicate;-trivial.: 0.036195s (num_starts 1; 0.0362s/start)
decide_hoare_triple_helper;per-query-type;false-predicate;-trivial.: 0.036197s (num_starts 1; 0.0362s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;false-predicate;-trivial.: 0.0362s (num_starts 1; 0.0362s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);false-predicate;-trivial.: 0.036202s (num_starts 1; 0.0362s/start)
graph_with_paths::collect_assumes_around_path.: 0.03687s (num_starts 279; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.037289s (num_starts 1; 0.0373s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.037292s (num_starts 1; 0.0373s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.037296s (num_starts 1; 0.0373s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.src_tfg.computeWP_for_pred_across_ec.: 0.038476s (num_starts 291; 0.0001s/start)
decide_hoare_triple_helper;per-path;L4%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);-trivial.: 0.039737s (num_starts 2; 0.0199s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);pred-type-unknown;-trivial.: 0.042001s (num_starts 15; 0.0028s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);pred-type-unknown.: 0.042047s (num_starts 15; 0.0028s/start)
gen_pred_from_coeff_row.simplify.: 0.044335s (num_starts 217; 0.0002s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.dst_tfg.computeWP_for_pred_across_ec.: 0.04604s (num_starts 291; 0.0002s/start)
query:convert_from_z3.: 0.050397s (num_starts 826; 0.0001s/start)
ldr_decompose_and_linear_solve.: 0.051201s (num_starts 160; 0.0003s/start)
liveness_analysis_conservative::xfer_and_meet.: 0.054433s (num_starts 15; 0.0036s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallEnd_Lentry%2%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.054713s (num_starts 1; 0.0547s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%2%fcallEnd_Lentry%2%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.054721s (num_starts 1; 0.0547s/start)
decide_hoare_triple_helper;per-path;L4%2%fcallEnd_Lentry%2%fcallEnd;(L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d);-trivial.: 0.056121s (num_starts 1; 0.0561s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallEnd_Lentry%2%fcallEnd;(L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d);pred-type-unknown;-trivial.: 0.056126s (num_starts 1; 0.0561s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%2%fcallEnd_Lentry%2%fcallEnd;(L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d);pred-type-unknown;-trivial.: 0.056133s (num_starts 1; 0.0561s/start)
decide_hoare_triple_helper;per-path;L4%2%fcallEnd_Lentry%2%fcallEnd;(epsilon);-trivial.: 0.057901s (num_starts 2; 0.0290s/start)
bv_linear_solve.: 0.058411s (num_starts 160; 0.0004s/start)
query:bv_solve.: 0.05935s (num_starts 160; 0.0004s/start)
populate_loc_liveness.: 0.05942s (num_starts 3; 0.0198s/start)
tfg_relax_pointsto_vals_on_edge.: 0.060108s (num_starts 10; 0.0060s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);pred-type-unknown;-trivial.: 0.070603s (num_starts 2; 0.0353s/start)
compute_expr_eqclasses_at_pc.: 0.072266s (num_starts 4; 0.0181s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1;pred-type-unknown;-trivial.: 0.073513s (num_starts 2; 0.0368s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);pred-type-unknown;-trivial.: 0.073518s (num_starts 2; 0.0368s/start)
graph_with_guessing_add_node_invariants_top_or_boundary.: 0.07362s (num_starts 6; 0.0123s/start)
cg_add_node.: 0.074008s (num_starts 6; 0.0123s/start)
tfg_postprocess_after_pointsto_analysis.: 0.075758s (num_starts 2; 0.0379s/start)
bv_solve_returning_intermediate_structures.: 0.07635s (num_starts 160; 0.0005s/start)
tfg_llvm_t::tfg_postprocess_after_pointsto_analysis.: 0.076698s (num_starts 1; 0.0767s/start)
expr_try_breaking_bvextracts_to_fresh_vars.: 0.078181s (num_starts 147; 0.0005s/start)
graph_ec_apply_trans_funs_helper.0.: 0.078547s (num_starts 598; 0.0001s/start)
graph_ec_apply_trans_funs_helper.: 0.081103s (num_starts 608; 0.0001s/start)
query:convert_to_z3.: 0.081446s (num_starts 826; 0.0001s/start)
graph_ec_apply_trans_funs_using_wp_fn.: 0.082323s (num_starts 608; 0.0001s/start)
create_new_corr_graph_edge.new_node.: 0.082951s (num_starts 5; 0.0166s/start)
computeWP_for_pred_across_ec.graph_ec_apply_trans_funs_using_wp_fn.: 0.084001s (num_starts 608; 0.0001s/start)
create_new_corr_graph_edge.: 0.084685s (num_starts 5; 0.0169s/start)
computeWP_for_pred_across_ec.: 0.085464s (num_starts 608; 0.0001s/start)
bvsolve_cache_query.miss1.: 0.088843s (num_starts 160; 0.0006s/start)
gen_pred_from_coeff_row.: 0.091318s (num_starts 217; 0.0004s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond;-trivial.: 0.092006s (num_starts 2; 0.0460s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;-dst-edgecond-implies-src-edgecond;-trivial.: 0.092011s (num_starts 2; 0.0460s/start)
compute_preds_for_bv_points.: 0.092797s (num_starts 76; 0.0012s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.093118s (num_starts 80; 0.0012s/start)
bvsolve_cache_query.: 0.095125s (num_starts 160; 0.0006s/start)
edge_composition_apply_trans_funs_on_pred.: 0.103137s (num_starts 234; 0.0004s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.: 0.104202s (num_starts 291; 0.0004s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.104796s (num_starts 1; 0.1048s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.104805s (num_starts 1; 0.1048s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);abstract-memlabel-asserts-houdini-guess.: 0.104814s (num_starts 1; 0.1048s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.110548s (num_starts 1; 0.1105s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.111622s (num_starts 1; 0.1116s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.111641s (num_starts 1; 0.1116s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L4%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.11165s (num_starts 1; 0.1116s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L4%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.111663s (num_starts 1; 0.1117s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;-dst-edgecond-implies-src-edgecond.: 0.11167s (num_starts 1; 0.1117s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;abstract-memlabel-asserts-houdini-guess.: 0.114166s (num_starts 4; 0.0285s/start)
add_fresh_counterexample_at_pc_and_propagate.L4%1%fcallEnd_Lentry%1%fcallEnd.inductive-invariants.: 0.116691s (num_starts 23; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);linear.: 0.117206s (num_starts 2; 0.0586s/start)
solve_for_bv_points.: 0.129439s (num_starts 160; 0.0008s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallEnd_Lentry%2%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.137205s (num_starts 1; 0.1372s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.137214s (num_starts 1; 0.1372s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%2%fcallEnd_Lentry%2%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.137218s (num_starts 1; 0.1372s/start)
compute_lr_status_for_expr.: 0.139813s (num_starts 105; 0.0013s/start)
compute_new_lr_status_on_locs.calling.compute_lr_status_for_expr.: 0.140206s (num_starts 102; 0.0014s/start)
compute_new_lr_status_on_locs.loc_lr_status.simplify_and_compute_lr_status.: 0.14037s (num_starts 102; 0.0014s/start)
expr_try_converting_unaliased_memslots_to_fresh_vars.: 0.141126s (num_starts 147; 0.0010s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);-trivial.: 0.144083s (num_starts 4; 0.0360s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);pred-type-unknown;-trivial.: 0.144093s (num_starts 4; 0.0360s/start)
decide_hoare_triple_helper;per-path;L4%2%fcallEnd_Lentry%2%fcallEnd;(L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.14636s (num_starts 1; 0.1464s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallEnd_Lentry%2%fcallEnd;(L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.146363s (num_starts 1; 0.1464s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%2%fcallEnd_Lentry%2%fcallEnd;(L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.146377s (num_starts 1; 0.1464s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.148987s (num_starts 2; 0.0745s/start)
check_wfconds_on_edge.L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart.: 0.150039s (num_starts 2; 0.0750s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recomputed_preds_would_be_different_from_current_preds.: 0.153328s (num_starts 160; 0.0010s/start)
ftmap_pointsto_analysis_combo_dfa_t.alias_val_xfer_and_meet.: 0.16739s (num_starts 10; 0.0167s/start)
../../include/graph/smallest_point_cover.h.smallest_point_cover_add_point_using_CE.: 0.174593s (num_starts 640; 0.0003s/start)
counter_example_falsifies_preds.: 0.174648s (num_starts 120; 0.0015s/start)
query:simplify-z3.: 0.180501s (num_starts 1840; 0.0001s/start)
ftmap_pointsto_analysis_combo_dfa_t.ftmap_dfa_flow_insensitive_xfer_and_meet.: 0.185802s (num_starts 10; 0.0186s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.189812s (num_starts 2; 0.0949s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);linear.: 0.189837s (num_starts 2; 0.0949s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%2%fcallEnd_Lentry%2%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.191958s (num_starts 2; 0.0960s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallEnd_Lentry%2%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.191978s (num_starts 2; 0.0960s/start)
compute_new_lr_status_on_locs.: 0.193248s (num_starts 20; 0.0097s/start)
counter_example_evaluate_preds.: 0.195833s (num_starts 627; 0.0003s/start)
lhs_set_sort.: 0.201537s (num_starts 147; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%2%fcallEnd_Lentry%2%fcallEnd;(L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d);pred-type-unknown.: 0.202536s (num_starts 2; 0.1013s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallEnd_Lentry%2%fcallEnd;(L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d);pred-type-unknown.: 0.202566s (num_starts 2; 0.1013s/start)
decide_hoare_triple_helper;per-path;L4%2%fcallEnd_Lentry%2%fcallEnd;(L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d).: 0.202577s (num_starts 2; 0.1013s/start)
add_fresh_counterexample_at_pc_and_propagate.L0%0%d_L0%0%d.inductive-invariants.: 0.205275s (num_starts 40; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;pred-type-unknown;-trivial.: 0.214436s (num_starts 38; 0.0056s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.215065s (num_starts 1; 0.2151s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.215074s (num_starts 1; 0.2151s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);abstract-memlabel-asserts-houdini-guess.: 0.215085s (num_starts 1; 0.2151s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1;abstract-memlabel-asserts-houdini-guess.: 0.215089s (num_starts 1; 0.2151s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.: 0.216003s (num_starts 1; 0.2160s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.218444s (num_starts 2; 0.1092s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.223334s (num_starts 1; 0.2233s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.223337s (num_starts 1; 0.2233s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.223338s (num_starts 1; 0.2233s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);false-predicate.: 0.223349s (num_starts 1; 0.2233s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1;false-predicate.: 0.223353s (num_starts 1; 0.2234s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);false-predicate.: 0.22336s (num_starts 1; 0.2234s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;-dst-edgecond-implies-src-edgecond.: 0.229267s (num_starts 3; 0.0764s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.245545s (num_starts 1; 0.2455s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.245549s (num_starts 1; 0.2455s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.245552s (num_starts 1; 0.2456s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);false-predicate.: 0.245563s (num_starts 1; 0.2456s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1;false-predicate.: 0.245565s (num_starts 1; 0.2456s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);false-predicate.: 0.245572s (num_starts 1; 0.2456s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.24884s (num_starts 2; 0.1244s/start)
decide_hoare_triple_helper;per-path;L4%1%fcallStart_Lentry%1%fcallStart;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.249415s (num_starts 1; 0.2494s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallStart_Lentry%1%fcallStart;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.249417s (num_starts 1; 0.2494s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.249421s (num_starts 1; 0.2494s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1;L4%1%fcallStart_Lentry%1%fcallStart;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.249424s (num_starts 1; 0.2494s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1;L4%1%fcallStart_Lentry%1%fcallStart;(epsilon);dst_edge_composition_proves_false.: 0.249434s (num_starts 1; 0.2494s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1;dst_edge_composition_proves_false.: 0.249438s (num_starts 1; 0.2494s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallStart_Lentry%1%fcallStart;(epsilon);dst_edge_composition_proves_false.: 0.249444s (num_starts 1; 0.2494s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.251658s (num_starts 1; 0.2517s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.251667s (num_starts 1; 0.2517s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.251669s (num_starts 1; 0.2517s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);false-predicate.: 0.251683s (num_starts 1; 0.2517s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1;false-predicate.: 0.251687s (num_starts 1; 0.2517s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);false-predicate.: 0.251691s (num_starts 1; 0.2517s/start)
decide_hoare_triple_helper;per-path;L4%1%fcallStart_Lentry%1%fcallStart;(epsilon).: 0.254502s (num_starts 4; 0.0636s/start)
get_masked_array_constant.: 0.254822s (num_starts 98; 0.0026s/start)
ftmap_run_pointsto_analysis.: 0.268449s (num_starts 2; 0.1342s/start)
tfg_run_pointsto_analysis.: 0.268668s (num_starts 2; 0.1343s/start)
put_smtlib_string_in_file.: 0.269233s (num_starts 196; 0.0014s/start)
tfg_populate_structs_after_ssa_construction.: 0.272865s (num_starts 2; 0.1364s/start)
tfg_ssa_construct_from_non_ssa_tfg.: 0.277047s (num_starts 2; 0.1385s/start)
evaluate_memmask.: 0.278321s (num_starts 98; 0.0028s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);pred-type-unknown.: 0.28908s (num_starts 4; 0.0723s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.300334s (num_starts 3; 0.1001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;linear.: 0.311617s (num_starts 6; 0.0519s/start)
corr_graph::add_edge().: 0.315429s (num_starts 5; 0.0631s/start)
add_fresh_counterexample_at_pc_and_propagate.L4%1%fcallStart_Lentry%1%fcallStart.inductive-invariants.: 0.317547s (num_starts 31; 0.0102s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.319825s (num_starts 2; 0.1599s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.31984s (num_starts 2; 0.1599s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);abstract-memlabel-asserts-houdini-guess.: 0.319924s (num_starts 2; 0.1600s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess.: 0.340447s (num_starts 8; 0.0426s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond.: 0.340952s (num_starts 4; 0.0852s/start)
add_fresh_counterexample_at_pc_and_propagate.L4%2%fcallStart_Lentry%2%fcallStart.inductive-invariants.: 0.342336s (num_starts 35; 0.0098s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.364806s (num_starts 3; 0.1216s/start)
output_lhs_set_guard_etc_and_src_dst_to_file.: 0.387161s (num_starts 37; 0.0105s/start)
collect_inductive_preds_around_path.: 0.390705s (num_starts 234; 0.0017s/start)
evaluate_function_call.: 0.393296s (num_starts 98; 0.0040s/start)
check_wfconds_on_edge.L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d.: 0.397101s (num_starts 2; 0.1986s/start)
corr_graph_create_and_add_cg_edge_composition_using_src_and_dst_fp.: 0.401403s (num_starts 5; 0.0803s/start)
corr_graph_add_correlation.: 0.40159s (num_starts 5; 0.0803s/start)
corr_graph_add_correlation_and_create_new_correl_entry.: 0.4017s (num_starts 5; 0.0803s/start)
graph_to_stream.: 0.40236s (num_starts 115; 0.0035s/start)
prove_dump_to_file.: 0.405841s (num_starts 37; 0.0110s/start)
dst_tfg_counter_example_translate_on_edge_composition.: 0.423429s (num_starts 160; 0.0026s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.434004s (num_starts 1; 0.4340s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.434004s (num_starts 1; 0.4340s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.434008s (num_starts 1; 0.4340s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.434009s (num_starts 1; 0.4340s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false.: 0.43402s (num_starts 1; 0.4340s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar;dst_edge_composition_proves_false.: 0.434022s (num_starts 1; 0.4340s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false.: 0.434027s (num_starts 1; 0.4340s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon).: 0.434518s (num_starts 2; 0.2173s/start)
decide_hoare_triple_helper;per-path;L4%2%fcallStart_Lentry%2%fcallStart;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.439088s (num_starts 1; 0.4391s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallStart_Lentry%2%fcallStart;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.43909s (num_starts 1; 0.4391s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.439095s (num_starts 1; 0.4391s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L4%2%fcallStart_Lentry%2%fcallStart;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.439098s (num_starts 1; 0.4391s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L4%2%fcallStart_Lentry%2%fcallStart;(epsilon);dst_edge_composition_proves_false.: 0.439107s (num_starts 1; 0.4391s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;dst_edge_composition_proves_false.: 0.43911s (num_starts 1; 0.4391s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallStart_Lentry%2%fcallStart;(epsilon);dst_edge_composition_proves_false.: 0.439116s (num_starts 1; 0.4391s/start)
decide_hoare_triple_helper;per-path;L4%2%fcallStart_Lentry%2%fcallStart;(epsilon).: 0.445922s (num_starts 4; 0.1115s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);pred-type-unknown;-trivial.: 0.457279s (num_starts 23; 0.0199s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1;pred-type-unknown;-trivial.: 0.458901s (num_starts 24; 0.0191s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallEnd_Lentry%2%fcallEnd;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.472873s (num_starts 1; 0.4729s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.472881s (num_starts 1; 0.4729s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L4%2%fcallEnd_Lentry%2%fcallEnd;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.472883s (num_starts 1; 0.4729s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L4%2%fcallEnd_Lentry%2%fcallEnd;(epsilon);dst_edge_composition_proves_false.: 0.4729s (num_starts 1; 0.4729s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1;dst_edge_composition_proves_false.: 0.472904s (num_starts 1; 0.4729s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallEnd_Lentry%2%fcallEnd;(epsilon);dst_edge_composition_proves_false.: 0.472911s (num_starts 1; 0.4729s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);pred-type-unknown;-trivial.: 0.475816s (num_starts 32; 0.0149s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.485328s (num_starts 1; 0.4853s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.485331s (num_starts 1; 0.4853s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.485331s (num_starts 1; 0.4853s/start)
decide_hoare_triple_helper;per-path;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);-trivial.: 0.485967s (num_starts 36; 0.0135s/start)
guarded_predicate_set_and.: 0.498827s (num_starts 147; 0.0034s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L4%1%fcallEnd_Lentry%1%fcallEnd.: 0.500405s (num_starts 1; 0.5004s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;pred-type-unknown;-trivial.: 0.507548s (num_starts 19; 0.0267s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);pred-type-unknown;-trivial.: 0.507567s (num_starts 19; 0.0267s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);false-predicate.: 0.521558s (num_starts 2; 0.2608s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;false-predicate.: 0.52157s (num_starts 2; 0.2608s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);false-predicate.: 0.521589s (num_starts 2; 0.2608s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);pred-type-unknown;-trivial.: 0.530747s (num_starts 28; 0.0190s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.54083s (num_starts 1; 0.5408s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.540836s (num_starts 1; 0.5408s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L4%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.540839s (num_starts 1; 0.5408s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L4%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);dst_edge_composition_proves_false.: 0.540848s (num_starts 1; 0.5408s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1;dst_edge_composition_proves_false.: 0.540852s (num_starts 1; 0.5409s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);dst_edge_composition_proves_false.: 0.540857s (num_starts 1; 0.5409s/start)
check_wfconds_on_edge.: 0.557749s (num_starts 10; 0.0558s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;pred-type-unknown.: 0.579606s (num_starts 41; 0.0141s/start)
counter_example_translate_on_edge_composition_helper.: 0.580482s (num_starts 803; 0.0007s/start)
decide_hoare_triple_helper;per-path;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);-trivial.: 0.582234s (num_starts 33; 0.0176s/start)
apply_mask_and_overlay_array_constant.mk_array_constant.: 0.590228s (num_starts 475; 0.0012s/start)
decide_hoare_triple_helper;per-path;L4%2%fcallEnd_Lentry%2%fcallEnd;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.61007s (num_starts 2; 0.3050s/start)
apply_mask_and_overlay_array_constant.: 0.63987s (num_starts 475; 0.0013s/start)
decide_hoare_triple_helper;per-path;L4%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.652429s (num_starts 2; 0.3262s/start)
decide_hoare_triple_helper;per-path;L4%2%fcallEnd_Lentry%2%fcallEnd;(epsilon).: 0.668117s (num_starts 4; 0.1670s/start)
decide_hoare_triple_helper;per-path;L4%1%fcallEnd_Lentry%1%fcallEnd;(epsilon).: 0.69233s (num_starts 4; 0.1731s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);pred-type-unknown;-trivial.: 0.926268s (num_starts 33; 0.0281s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1;pred-type-unknown;-trivial.: 0.92862s (num_starts 34; 0.0273s/start)
lhs_set_eliminate_constructs_that_the_solver_cannot_handle.: 0.941757s (num_starts 147; 0.0064s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);pred-type-unknown;-trivial.: 0.968037s (num_starts 48; 0.0202s/start)
decide_hoare_triple_helper;per-path;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);-trivial.: 0.980818s (num_starts 52; 0.0189s/start)
add_fresh_counterexample_at_pc_and_propagate.: 0.983096s (num_starts 131; 0.0075s/start)
decide_hoare_triple_with_alias_cons.ce.: 0.986283s (num_starts 172; 0.0057s/start)
check_equivalence_proof.: 1.02902s (num_starts 1; 1.0290s/start)
prove_spawn_and_join.eliminate_constructs_that_the_solver_cannot_handle1.: 1.05261s (num_starts 147; 0.0072s/start)
decide_hoare_triple_helper;per-query-type;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.20587s (num_starts 4; 0.3015s/start)
decide_hoare_triple_helper;per-query-type;false-predicate.: 1.24219s (num_starts 5; 0.2484s/start)
check_preds_on_edge_compositions.dhd_with_ce_propagation.: 1.36602s (num_starts 57; 0.0240s/start)
check_preds_on_edge_compositions.: 1.37889s (num_starts 15; 0.0919s/start)
compute_z3_expr.: 1.62526s (num_starts 924; 0.0018s/start)
expr_do_simplify_using_lhs_set_and_precond.: 1.85569s (num_starts 666; 0.0028s/start)
decide_hoare_triple_helper;per-query-type;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.13623s (num_starts 5; 0.4272s/start)
decide_hoare_triple_helper;per-query-type;dst_edge_composition_proves_false.: 2.13634s (num_starts 5; 0.4273s/start)
decide_hoare_triple.: 2.14913s (num_starts 10; 0.2149s/start)
dst_edge_composition_proves_false.: 2.16923s (num_starts 5; 0.4338s/start)
get_next_dst_edge_composition_to_correlate.: 2.17556s (num_starts 6; 0.3626s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown;-trivial.: 2.18283s (num_starts 117; 0.0187s/start)
decide_hoare_triple_helper;-trivial.: 2.36503s (num_starts 137; 0.0173s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.98983s (num_starts 7; 0.4271s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.98984s (num_starts 7; 0.4271s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);linear.: 2.99252s (num_starts 8; 0.3741s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;linear.: 2.99254s (num_starts 8; 0.3741s/start)
invariant_inference_xfer.expr-group-bvs.from.L4%1%fcallEnd_Lentry%1%fcallEnd.: 3.05879s (num_starts 1; 3.0588s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.10031s (num_starts 8; 0.3875s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);linear.: 3.10983s (num_starts 10; 0.3110s/start)
parse_z3_model.: 3.57311s (num_starts 97; 0.0368s/start)
read_counter_examples_from_channel.: 3.60023s (num_starts 61; 0.0590s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 7.82072s (num_starts 16; 0.4888s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 7.82075s (num_starts 16; 0.4888s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);linear.: 7.82094s (num_starts 16; 0.4888s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1;linear.: 7.821s (num_starts 16; 0.4888s/start)
invariant_inference_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.: 7.97479s (num_starts 1; 7.9748s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 8.01041s (num_starts 18; 0.4450s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);linear.: 8.01097s (num_starts 18; 0.4451s/start)
decide_hoare_triple_helper;per-query-type;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 11.1108s (num_starts 26; 0.4273s/start)
decide_hoare_triple_helper;per-query-type;linear.: 11.1296s (num_starts 32; 0.3478s/start)
decide_hoare_triple_dump_to_file.: 15.5301s (num_starts 37; 0.4197s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 21.2855s (num_starts 8; 2.6607s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 21.2856s (num_starts 8; 2.6607s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);pred-type-unknown.: 21.3592s (num_starts 10; 2.1359s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1;pred-type-unknown.: 21.3592s (num_starts 10; 2.1359s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 21.5039s (num_starts 10; 2.1504s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);pred-type-unknown.: 21.6484s (num_starts 14; 1.5463s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L0%0%d_L0%0%d.: 21.6698s (num_starts 1; 21.6698s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 23.7345s (num_starts 7; 3.3906s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 23.7345s (num_starts 7; 3.3906s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 23.7345s (num_starts 7; 3.3906s/start)
decide_hoare_triple_helper;per-path;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 23.9578s (num_starts 8; 2.9947s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);pred-type-unknown.: 24.192s (num_starts 30; 0.8064s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1;pred-type-unknown.: 24.1937s (num_starts 31; 0.7804s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);pred-type-unknown.: 24.2109s (num_starts 39; 0.6208s/start)
decide_hoare_triple_helper;per-path;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd).: 24.4446s (num_starts 44; 0.5556s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L4%1%fcallStart_Lentry%1%fcallStart.: 24.7416s (num_starts 1; 24.7416s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 30.0796s (num_starts 31; 0.9703s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart).: 30.225s (num_starts 35; 0.8636s/start)
ce_reconcile_sorts.: 31.0822s (num_starts 98; 0.3172s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 57.6684s (num_starts 20; 2.8834s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 57.6686s (num_starts 20; 2.8834s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 57.6687s (num_starts 20; 2.8834s/start)
decide_hoare_triple_helper;per-path;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 57.9199s (num_starts 21; 2.7581s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);pred-type-unknown.: 65.7259s (num_starts 53; 1.2401s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1;pred-type-unknown.: 65.7285s (num_starts 54; 1.2172s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);pred-type-unknown.: 65.7685s (num_starts 68; 0.9672s/start)
decide_hoare_triple_helper;per-path;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd).: 66.0333s (num_starts 73; 0.9046s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L4%2%fcallStart_Lentry%2%fcallStart.: 66.3375s (num_starts 1; 66.3375s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 75.8718s (num_starts 20; 3.7936s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 75.872s (num_starts 20; 3.7936s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 75.8721s (num_starts 20; 3.7936s/start)
decide_hoare_triple_helper;per-path;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 79.4573s (num_starts 29; 2.7399s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);pred-type-unknown.: 84.7797s (num_starts 39; 2.1738s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;pred-type-unknown.: 84.7799s (num_starts 39; 2.1738s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);pred-type-unknown.: 84.8035s (num_starts 48; 1.7667s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L4%1%fcallEnd_Lentry%1%fcallEnd.: 84.8731s (num_starts 1; 84.8731s/start)
decide_hoare_triple_helper;per-path;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart).: 88.4413s (num_starts 62; 1.4265s/start)
query:smt.: 152.208s (num_starts 98; 1.5531s/start)
spawn_smt_query.: 155.809s (num_starts 98; 1.5899s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 178.925s (num_starts 58; 3.0849s/start)
solver_provable.: 188.977s (num_starts 147; 1.2856s/start)
solver_satisfiable-cache-miss.: 189.05s (num_starts 98; 1.9291s/start)
solver_satisfiable.: 189.053s (num_starts 148; 1.2774s/start)
expr_is_provable.: 189.202s (num_starts 147; 1.2871s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_commonMEM_optimization.: 189.206s (num_starts 147; 1.2871s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_aliasing_constraints_generation.: 189.213s (num_starts 147; 1.2872s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_simplify_and_add_auxiliary_structures.: 189.216s (num_starts 147; 1.2872s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_precond_is_false.: 189.722s (num_starts 147; 1.2906s/start)
is_expr_equal_using_lhs_set_and_precond_helper.syntactic_check_failed.: 189.731s (num_starts 147; 1.2907s/start)
is_expr_equal_using_lhs_set_and_precond_helper.: 189.733s (num_starts 147; 1.2907s/start)
is_expr_equal_using_lhs_set_and_precond.: 193.199s (num_starts 147; 1.3143s/start)
prove.: 193.201s (num_starts 147; 1.3143s/start)
prove_spawn_and_join_helper.: 193.201s (num_starts 147; 1.3143s/start)
decide_hoare_triple_helper;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 193.95s (num_starts 97; 1.9995s/start)
prove_spawn_and_join.: 195.006s (num_starts 147; 1.3266s/start)
prove_wrapper.proof_query_not_trivial.: 195.432s (num_starts 147; 1.3295s/start)
prove_wrapper.: 195.746s (num_starts 234; 0.8365s/start)
decide_hoare_triple_check_ub.: 195.863s (num_starts 234; 0.8370s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown.: 196.641s (num_starts 175; 1.1237s/start)
update_invariant_state_for_edges.: 209.823s (num_starts 5; 41.9646s/start)
cg_check_new_cg_ec.: 209.823s (num_starts 5; 41.9646s/start)
correl_entry_apply.: 209.823s (num_starts 5; 41.9646s/start)
decide_hoare_triple_helper.: 211.854s (num_starts 234; 0.9054s/start)
expandProductCFG.: 212.004s (num_starts 6; 35.3340s/start)
bestFirstSearch.: 212.512s (num_starts 1; 212.5117s/start)
decide_hoare_triple_with_alias_cons.: 212.843s (num_starts 234; 0.9096s/start)
Time taken for equivalence check.: 213.609s (num_starts 1; 213.6086s/start)

counters:
# of assume sat failures for cg-edge-assume-unknown.: 27
# of paths enumerated.: 5
# of paths expanded.: 5
# of queries to linear solver.: 160
# of smt-solver-queries.: 98
L0%0%d=>Lentry%1%fcallStart-src_ecs.: 1
L0%0%d=>Lentry%1%fcallStart-src_to_pcs.: 1
Lentry%1%fcallEnd=>Lentry%2%fcallStart-src_ecs.: 1
Lentry%1%fcallEnd=>Lentry%2%fcallStart-src_to_pcs.: 1
Lentry%1%fcallStart=>Lentry%1%fcallEnd-src_ecs.: 1
Lentry%1%fcallStart=>Lentry%1%fcallEnd-src_to_pcs.: 1
Lentry%2%fcallEnd=>E0%0%d-src_ecs.: 1
Lentry%2%fcallEnd=>E0%0%d-src_to_pcs.: 1
Lentry%2%fcallStart=>Lentry%2%fcallEnd-src_ecs.: 1
Lentry%2%fcallStart=>Lentry%2%fcallEnd-src_to_pcs.: 1
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.iters.: 1
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.prove_queries.: 1
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L4%1%fcallEnd_Lentry%1%fcallEnd.iters.: 2
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L4%1%fcallEnd_Lentry%1%fcallEnd.prove_queries.: 1
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L4%1%fcallStart_Lentry%1%fcallStart.iters.: 1
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L4%1%fcallStart_Lentry%1%fcallStart.prove_queries.: 0
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L4%2%fcallStart_Lentry%2%fcallStart.iters.: 1
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L4%2%fcallStart_Lentry%2%fcallStart.prove_queries.: 0
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.iters.: 15
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.prove_queries.: 16
smallest_point_cover_xfer.expr-group-bvs.from.L4%1%fcallEnd_Lentry%1%fcallEnd.iters.: 7
smallest_point_cover_xfer.expr-group-bvs.from.L4%1%fcallEnd_Lentry%1%fcallEnd.prove_queries.: 7
smallest_point_cover_xfer.expr-group-bvs.from.L4%1%fcallStart_Lentry%1%fcallStart.iters.: 1
smallest_point_cover_xfer.expr-group-bvs.from.L4%1%fcallStart_Lentry%1%fcallStart.prove_queries.: 0
smallest_point_cover_xfer.expr-group-bvs.from.L4%2%fcallStart_Lentry%2%fcallStart.iters.: 1
smallest_point_cover_xfer.expr-group-bvs.from.L4%2%fcallStart_Lentry%2%fcallStart.prove_queries.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L0%0%d_L0%0%d.iters.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L4%1%fcallEnd_Lentry%1%fcallEnd.iters.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L4%1%fcallEnd_Lentry%1%fcallEnd.prove_queries.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L4%1%fcallStart_Lentry%1%fcallStart.iters.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L4%1%fcallStart_Lentry%1%fcallStart.prove_queries.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L4%2%fcallStart_Lentry%2%fcallStart.iters.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L4%2%fcallStart_Lentry%2%fcallStart.prove_queries.: 0
smallest_point_cover_xfer.spec-coupling-invariants.from.L0%0%d_L0%0%d.iters.: 8
smallest_point_cover_xfer.spec-coupling-invariants.from.L0%0%d_L0%0%d.prove_queries.: 11
smallest_point_cover_xfer.spec-coupling-invariants.from.L4%1%fcallEnd_Lentry%1%fcallEnd.iters.: 32
smallest_point_cover_xfer.spec-coupling-invariants.from.L4%1%fcallEnd_Lentry%1%fcallEnd.prove_queries.: 31
smallest_point_cover_xfer.spec-coupling-invariants.from.L4%1%fcallStart_Lentry%1%fcallStart.iters.: 23
smallest_point_cover_xfer.spec-coupling-invariants.from.L4%1%fcallStart_Lentry%1%fcallStart.prove_queries.: 22
smallest_point_cover_xfer.spec-coupling-invariants.from.L4%2%fcallStart_Lentry%2%fcallStart.iters.: 40
smallest_point_cover_xfer.spec-coupling-invariants.from.L4%2%fcallStart_Lentry%2%fcallStart.prove_queries.: 39
smt-queries-cache-hits.: 50
smt-queries-yices-sat.: 1
smt-queries-z3-sat.: 97
total-correlation-possibilities.: 6
total-correlation-possibilities-mod-lsprels.: 6
total-correlations-explored.: 6

flags:
dst-aloc.: 0
dst-edges.: 5
dst-nodes.: 6
dst-sp-updates.: 0
final-CG-alloc-correlations.: 0
final-CG-counterexamples-generated-at-L4%1%fcallEnd_Lentry%1%fcallEnd.: 0
final-CG-counterexamples-generated-at-L4%1%fcallStart_Lentry%1%fcallStart.: 20
final-CG-counterexamples-generated-at-L4%2%fcallEnd_Lentry%2%fcallEnd.: 3
final-CG-counterexamples-generated-at-L4%2%fcallStart_Lentry%2%fcallStart.: 11
final-CG-counterexamples-total-at-L4%1%fcallEnd_Lentry%1%fcallEnd.: 17
final-CG-counterexamples-total-at-L4%1%fcallStart_Lentry%1%fcallStart.: 23
final-CG-counterexamples-total-at-L4%2%fcallEnd_Lentry%2%fcallEnd.: 10
final-CG-counterexamples-total-at-L4%2%fcallStart_Lentry%2%fcallStart.: 12
final-CG-dealloc-correlations.: 0
final-CG-dht-queries.: 5
final-CG-edges.: 5
final-CG-nodes.: 6
final-CG-num-invariants.: 47
final-CG-super-edges.: 0
src-edges.: 5
src-nodes.: 6
timeout-occured.: 1

info:
eq-state.: find_correlation
final-CG-time-secs.: 210.22
final-CG-time-to-total-time-ratio.: 0.99
query-time-to-total-time-ratio.: 0.71

Context stats:
exprs: count: 266428
sorts: count: 175
num_proof_queries: 147
num_proof_queries_answered_by_syntactic_check: 0
cache_stats:
m_simplify:
	----------- total:	10887
	        hit ratio:	0.965831
m_simplify_solver:
	----------- total:	5444
	        hit ratio:	0.81374
m_z3_solver_substitution:
	----------- total:	1014
	        hit ratio:	0
m_replace_donotsimplify_using_solver_expressions_by_free_vars:
	----------- total:	1014
	        hit ratio:	0
m_expr_size:
	----------- total:	12711
	        hit ratio:	0.911337
m_expr_evaluates_to_constant_visitor:
	----------- total:	263398
	        hit ratio:	0.452179

z3_solver expr_query_cache entry size: 98
	----------- total:	148
	             hits:	50
	        hit ratio:	0.337838
histogram (time taken by solver in ms):
[  42.3800,   68.3467) (avg.   49.5106)  : 16
[  68.3467,  110.2233) (avg.   97.4243)  : 3
[ 110.2233,  177.7583) (avg.  134.0763)  : 27
[ 177.7583,  286.6726) (avg.  233.5143)  : 3
[ 286.6726,  462.3198) (avg.  363.8668)  : 11
[ 462.3198,  745.5878) (avg.  570.3735)  : 4
[ 745.5878, 1202.4170) (avg. 1011.5065)  : 6
[1202.4170, 1939.1500) (avg.    0.0000)  : 0
[1939.1500, 3127.2868) (avg. 2613.1750)  : 2
[3127.2868, 5043.4070) (avg. 4970.0638)  : 26
histogram (number of quantifiers in query)
[ 0,  6) (avg.  0)                       : 1
[ 6, 11) (avg.  0)                       : 0
[11, 17) (avg.  0)                       : 0
[17, 22) (avg.  0)                       : 0
[22, 28) (avg. 25)                       : 40
[28, 33) (avg. 28)                       : 1
[33, 39) (avg. 36)                       : 53
[39, 44) (avg.  0)                       : 0
[44, 50) (avg. 45)                       : 3
[50, 55) (avg.  0)                       : 0
histogram (number of nodes in z3 ast)
[176, 223) (avg. 176)                    : 1
[223, 269) (avg.   0)                    : 0
[269, 316) (avg.   0)                    : 0
[316, 362) (avg.   0)                    : 0
[362, 409) (avg. 405)                    : 1
[409, 455) (avg. 441)                    : 27
[455, 502) (avg. 467)                    : 14
[502, 548) (avg. 529)                    : 42
[548, 595) (avg. 576)                    : 10
[595, 641) (avg. 621)                    : 3
Top 10 highest time taking queries:
1. [5.042s] SOLVER_RES_TIMEOUT decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.20
2. [5.040s] SOLVER_RES_TIMEOUT decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.33
3. [5.040s] SOLVER_RES_TIMEOUT decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.10
4. [5.040s] SOLVER_RES_TIMEOUT decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.25
5. [5.039s] SOLVER_RES_TIMEOUT decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.8
6. [5.039s] SOLVER_RES_TIMEOUT decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.6
7. [5.039s] SOLVER_RES_TIMEOUT decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.8
8. [5.038s] SOLVER_RES_TIMEOUT decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.35
9. [5.038s] SOLVER_RES_TIMEOUT decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.14
10. [5.038s] SOLVER_RES_TIMEOUT decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.18

<MSG>3:54 : Successfully computed equivalence for function: bar.</MSG>
<MSG>3:55 : Computing equivalence for function: foo...</MSG>
<MSG>3:55 : Constructing SSA for SPEC TFG...</MSG>
<MSG>3:55 : Constructing SSA for LLVM TFG...</MSG>
<MSG>3:55 : Finished SSA construction for both TFGs...</MSG>
<MSG>3:55 : Computing equivalence of the two TFGs ( SPEC and LLVM )...</MSG>
<MSG>3:55 : Chose (after CE propagation) product-TFG foo (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: nullptr
  src-full-pathset: nullptr
<MSG>3:56 : product-TFG foo: Enumerating correlations for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L0%0%d_L0%0%d
</MSG>
<MSG>3:56 : Considering 1 paths to src pc L3%7%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>3:56 : Attempting correlation of src pathset L0%0%d=>L3%7%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>3:56 : Found 1 feasible correlations for paths to src pc L3%7%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>3:56 : Considering 1 paths to src pc L3%11%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>3:56 : Attempting correlation of src pathset L0%0%d=>L3%11%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>3:56 : Found 1 feasible correlations for paths to src pc L3%11%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>3:56 : Considering 1 paths to src pc L3%19%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>3:56 : Attempting correlation of src pathset L0%0%d=>L3%19%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>3:56 : Found 1 feasible correlations for paths to src pc L3%19%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>3:56 : Considering 1 paths to src pc L3%23%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>3:56 : Attempting correlation of src pathset L0%0%d=>L3%23%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>3:56 : Found 1 feasible correlations for paths to src pc L3%23%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>3:56 : product-TFG foo: Found 4 correlations for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L0%0%d_L0%0%d
</MSG>
<MSG>3:56 : product-TFG foo created 4 possibilities in group foo.A...</MSG>
<MSG>3:56 : Chose (for CE propagation) product-TFG foo.A1 (d:0, s:0, sp: 0) from a frontier of size 4...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%7%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>3:56 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1...</MSG>
<MSG>3:56 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1...</MSG>
<MSG>3:56 : Creating ssa-path for the src-tfg path L0%0%d --> L3%7%bbentry ending at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>3:56 : Adding a CG edge composition using the src path L0%0%d --> L3%7%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>3:56 : Identifying common alloc-deallocs in the src path L0%0%d --> L3%7%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry
</MSG>
<MSG>3:56 : Identified no common alloc-deallocs in the src path L0%0%d --> L3%7%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>3:56 : Adding new edge to the product-TFG foo.A1 for fromPC L0%0%d_L0%0%d and toPC L3%7%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%7%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>3:56 : foo.A1: Computing loop hoisting select expressions at toPC L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>3:56 : foo.A1: Computing loop hoisting non-linear expressions at toPC L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>3:56 : foo.A1: Adding node L3%7%bbentry_Lfor.cond%1%bbentry to the product-TFG...</MSG>
<MSG>3:56 : foo.A1: Getting alloca-ptrs on edge L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>3:56 : foo.A1: Found no alloca-ptrs on edge L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>3:56 : foo.A1: Adding edge L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>3:56 : foo.A1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>3:56 : foo.A1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>3:56 : foo.A1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>3:56 : foo.A1: Propagated 2 out of 2 counter-examples across edge L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry</MSG>
<MSG>3:56 : foo.A1: Added the 2 propagated CEs at PC L3%7%bbentry_Lfor.cond%1%bbentry and propagated further.
</MSG>
<MSG>3:56 : foo.A1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>3:56 : foo.A1: Finished executing CG's add edge function...</MSG>
<MSG>3:56 : foo.A1: Computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>3:56 : foo.A1: Done computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>3:56 : Done adding new edge to the product-TFG foo.A1 for fromPC L0%0%d_L0%0%d and toPC L3%7%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%7%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>3:56 : Done adding a CG edge composition using the src path L0%0%d --> L3%7%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>3:56 : Added correlation to the product-TFG foo.A1 (d:0, s:0, sp: 0) and created a correlation entry...</MSG>
<MSG>3:56 : Chose (after CE propagation) product-TFG foo.A1 (d:0, s:0, sp: 0) from a frontier of size 4...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 1 counterexamples (for correlating 7 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%7%bbentry[mu 1, delta {1,0}]
<MSG>3:56 : foo.A1: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>3:56 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>3:56 : foo.A1: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>3:56 : foo.A1: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>3:56 : foo.A1: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>3:56 : foo.A1: Relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>3:56 : foo.A1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:56 : foo.A1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>3:56 : foo.A1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:57 : foo.A1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht9-prove_trivial4-prove5...</MSG>
<MSG>3:57 : foo.A1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:57 : foo.A1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>3:57 : foo.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:57 : foo.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>3:57 : foo.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:58 : foo.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>3:58 : foo.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:58 : foo.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>3:58 : foo.A1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 5 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:58 : foo.A1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>3:58 : foo.A1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:59 : foo.A1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht7-prove_trivial0-prove7...</MSG>
<MSG>3:59 : foo.A1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:59 : foo.A1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:59 : foo.A1: Done relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>3:59 : foo.A1: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>3:59 : foo.A1 (d:3, s:0, sp: 0): checked newly added edge and inferred invariants...</MSG>
<MSG>3:59 : foo.A1 (d:3, s:0, sp: 5): Chosen CG is no longer the most promising correlation entry; returning delayed-exploration...</MSG>
<MSG>3:59 : Chosen product-TFG foo.A1 will be explored later...</MSG>
<MSG>3:59 : Decided to explore product-TFG later after re-evaluating its best-first-search rank...</MSG>
<MSG>3:59 : Chose (for CE propagation) product-TFG foo.A2 (d:0, s:0, sp: 0) from a frontier of size 4...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%11%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>3:59 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A2...</MSG>
<MSG>3:59 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A2...</MSG>
<MSG>3:59 : Creating ssa-path for the src-tfg path L0%0%d --> L3%11%bbentry ending at L3%11%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>3:59 : Adding a CG edge composition using the src path L0%0%d --> L3%11%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>3:59 : Identifying common alloc-deallocs in the src path L0%0%d --> L3%11%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry
</MSG>
<MSG>3:59 : Identified no common alloc-deallocs in the src path L0%0%d --> L3%11%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>3:59 : Adding new edge to the product-TFG foo.A2 for fromPC L0%0%d_L0%0%d and toPC L3%11%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%11%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>3:59 : foo.A2: Computing loop hoisting select expressions at toPC L3%11%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>3:59 : foo.A2: Computing loop hoisting non-linear expressions at toPC L3%11%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>3:59 : foo.A2: Adding node L3%11%bbentry_Lfor.cond%1%bbentry to the product-TFG...</MSG>
<MSG>3:59 : foo.A2: Getting alloca-ptrs on edge L0%0%d_L0%0%d=>L3%11%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>3:59 : foo.A2: Found no alloca-ptrs on edge L0%0%d_L0%0%d=>L3%11%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>3:59 : foo.A2: Adding edge L0%0%d_L0%0%d=>L3%11%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>3:59 : foo.A2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>3:59 : foo.A2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>3:59 : foo.A2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>3:59 : foo.A2: marking unstable at L0%0%d_L0%0%d due to failing condition:
wfcond.from_pcL0%0%d_L0%0%d.to_pcL3%11%bbentry_Lfor.cond%1%bbentry-dst-edgecond-implies-src-edgecond
140276 : 1 { 0x1 } : BOOL                          : true
169503 : not(140276) : BOOL                        : false
140295 : input.spec-%var-a-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]] : ( map(lambda(Lambda39593Var, ite(and(bvule(0, Lambda39593Var), bvule(Lambda39593Var, 4294967295)), false, false)), lambda(Lambda39594Var, map(lambda(Lambda39595Var, false), lambda(Lambda39596Var, 0)))) )
140286 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140701 : map_get(140295, 140286) : SUM[UNIT,MAP[BV:32 -> BV:32]] : ( sum(ite(ite(and(bvule(0, 0), bvule(0, 4294967295)), false, false), 1, 0), unit, map(lambda(Lambda42955Var, false), lambda(Lambda42956Var, 0))) )
140303 : 1 { 0x1 +1.0e1025 } : INT                 : 1
169501 : sum_is(140701, 140303) : BOOL             : false
169504 : or(169503, 169501) : BOOL                 : false

ce =
=counter_example_begin z3.ce1365 a4178fdda81da1c18eb9e273a4ac564
=input.spec-%var-a-1
1 : Lambda39593Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda39594Var : BV:32
11 : Lambda39595Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda39596Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-a-0.L3%7%bbentry
1 : Lambda39610Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda39611Var : BV:32
11 : Lambda39612Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda39613Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 686899331 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 686899332; 686899335 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 686899336; 753465703 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 753465704; 753465707 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 753465708; 2766729455 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 2766729456; 2766729459 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2766729460; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 686899332 { 0x28f14084 +1.88478136e210 } : BV:32
=input.dst.llvm-%arr
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2766729456 { 0xa4e8f0f0 -1528237840 -1.81985282e202 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 753465704 { 0x2ce8f968 +1.82011127e218 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 686899332 { 0x28f14084 +1.88478136e210 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 686899335 { 0x28f14087 +1.88478171e210 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2766729456 { 0xa4e8f0f0 -1528237840 -1.81985282e202 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2766729459 { 0xa4e8f0f3 -1528237837 -1.81985318e202 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 753465704 { 0x2ce8f968 +1.82011127e218 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 753465707 { 0x2ce8f96b +1.82011163e218 } : BV:32
=input.spec-%var-a-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-a-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-a-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-a-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-a-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-a-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=counter_example.random_seed
4019537093
=counter_example_end


failcond-expr = or(not(true), sum_is(map_get(input.spec-%var-a-1, 0), 1)):
1 : 1 { 0x1 } : BOOL
2 : not(1) : BOOL
3 : input.spec-%var-a-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : map_get(3, 4) : SUM[UNIT,MAP[BV:32 -> BV:32]]
6 : 1 { 0x1 +1.0e1025 } : INT
7 : sum_is(5, 6) : BOOL
8 : or(2, 7) : BOOL
</MSG>
<MSG>3:59 : foo.A2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>3:59 : foo.A2: Finished executing CG's add edge function...</MSG>
<MSG>3:59 : foo.A2: Computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%11%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>3:59 : foo.A2: Done computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%11%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>3:59 : Done adding new edge to the product-TFG foo.A2 for fromPC L0%0%d_L0%0%d and toPC L3%11%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%11%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>3:59 : Done adding a CG edge composition using the src path L0%0%d --> L3%11%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>3:59 : Failed correlation of src pathset L0%0%d=>L3%11%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d: failcond = wfcond.from_pcL0%0%d_L0%0%d.to_pcL3%11%bbentry_Lfor.cond%1%bbentry-dst-edgecond-implies-src-edgecond
140276 : 1 { 0x1 } : BOOL                          : true
169503 : not(140276) : BOOL                        : false
140295 : input.spec-%var-a-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]] : ( map(lambda(Lambda39593Var, ite(and(bvule(0, Lambda39593Var), bvule(Lambda39593Var, 4294967295)), false, false)), lambda(Lambda39594Var, map(lambda(Lambda39595Var, false), lambda(Lambda39596Var, 0)))) )
140286 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140701 : map_get(140295, 140286) : SUM[UNIT,MAP[BV:32 -> BV:32]] : ( sum(ite(ite(and(bvule(0, 0), bvule(0, 4294967295)), false, false), 1, 0), unit, map(lambda(Lambda42955Var, false), lambda(Lambda42956Var, 0))) )
140303 : 1 { 0x1 +1.0e1025 } : INT                 : 1
169501 : sum_is(140701, 140303) : BOOL             : false
169504 : or(169503, 169501) : BOOL                 : false

ce =
=counter_example_begin z3.ce1365 a4178fdda81da1c18eb9e273a4ac564
=input.spec-%var-a-1
1 : Lambda39593Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda39594Var : BV:32
11 : Lambda39595Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda39596Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-a-0.L3%7%bbentry
1 : Lambda39610Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda39611Var : BV:32
11 : Lambda39612Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda39613Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 686899331 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 686899332; 686899335 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 686899336; 753465703 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 753465704; 753465707 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 753465708; 2766729455 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 2766729456; 2766729459 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2766729460; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 686899332 { 0x28f14084 +1.88478136e210 } : BV:32
=input.dst.llvm-%arr
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2766729456 { 0xa4e8f0f0 -1528237840 -1.81985282e202 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 753465704 { 0x2ce8f968 +1.82011127e218 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 686899332 { 0x28f14084 +1.88478136e210 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 686899335 { 0x28f14087 +1.88478171e210 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2766729456 { 0xa4e8f0f0 -1528237840 -1.81985282e202 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2766729459 { 0xa4e8f0f3 -1528237837 -1.81985318e202 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 753465704 { 0x2ce8f968 +1.82011127e218 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 753465707 { 0x2ce8f96b +1.82011163e218 } : BV:32
=input.spec-%var-a-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-a-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-a-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-a-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-a-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-a-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=counter_example.random_seed
4019537093
=counter_example_end


</MSG>
<MSG>3:59 : Discovered that the correlation was useless for the product-TFG foo.A2 (d:0, s:0, sp: 0)...</MSG>
<MSG>3:59 : Chose (after CE propagation) product-TFG foo.A1 (d:3, s:0, sp: 5) from a frontier of size 1...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 12 counterexamples (for correlating 7 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%7%bbentry[mu 1, delta {1,0}]
<MSG>3:59 : foo.A1: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>3:59 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>3:59 : foo.A1: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>3:59 : foo.A1: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>3:59 : foo.A1: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>3:59 : foo.A1: Relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>3:59 : foo.A1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:59 : foo.A1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>3:59 : foo.A1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 8 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:59 : foo.A1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht5-prove_trivial4-prove1...</MSG>
<MSG>3:59 : foo.A1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:59 : foo.A1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>3:59 : foo.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:59 : foo.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:59 : foo.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:59 : foo.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:59 : foo.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:59 : foo.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>3:59 : foo.A1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 5 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:00 : foo.A1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>4:00 : foo.A1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:00 : foo.A1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>4:00 : foo.A1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:00 : foo.A1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:00 : foo.A1: Done relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged ...</MSG>
<MSG>4:00 : foo.A1: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>4:00 : foo.A1 (d:3, s:0, sp: 5): checked newly added edge and inferred invariants...</MSG>
<MSG>4:00 : foo.A1 (d:3, s:0, sp: 5): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>4:00 : product-TFG foo.A1: Enumerating correlations for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] starting at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>4:00 : Considering 2 paths to src pc L3%7%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>4:00 : Attempting correlation of src pathset L3%7%bbentry=>L3%7%bbentry[mu 0, delta {0,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>4:00 : Attempting correlation of src pathset L3%7%bbentry=>L3%7%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>4:00 : Found 2 feasible correlations for paths to src pc L3%7%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>4:00 : Considering 1 paths to src pc L3%11%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>4:00 : Attempting correlation of src pathset L3%7%bbentry=>L3%11%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>4:00 : Found 1 feasible correlations for paths to src pc L3%11%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>4:00 : Considering 1 paths to src pc L3%19%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>4:00 : Attempting correlation of src pathset L3%7%bbentry=>L3%19%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>4:00 : Found 1 feasible correlations for paths to src pc L3%19%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>4:00 : Considering 1 paths to src pc L3%23%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>4:00 : Attempting correlation of src pathset L3%7%bbentry=>L3%23%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>4:00 : Found 1 feasible correlations for paths to src pc L3%23%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>4:00 : product-TFG foo.A1: Found 5 correlations for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] starting at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>4:00 : product-TFG foo.A1 created 5 possibilities in group foo.A1.B...</MSG>
<MSG>4:00 : Chose (for CE propagation) product-TFG foo.A1.B3 (d:3, s:0, sp: 5) from a frontier of size 5...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 14 counterexamples (for correlating 7 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%11%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>4:00 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B3...</MSG>
<MSG>4:00 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B3...</MSG>
<MSG>4:00 : Creating ssa-path for the src-tfg path L3%7%bbentry --> L3%11%bbentry ending at L3%11%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:00 : Adding a CG edge composition using the src path L3%7%bbentry --> L3%11%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:00 : Identifying common alloc-deallocs in the src path L3%7%bbentry --> L3%11%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry
</MSG>
<MSG>4:00 : Identified no common alloc-deallocs in the src path L3%7%bbentry --> L3%11%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:00 : Adding new edge to the product-TFG foo.A1.B3 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%11%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%11%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>4:00 : foo.A1.B3: Computing loop hoisting select expressions at toPC L3%11%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:00 : foo.A1.B3: Computing loop hoisting non-linear expressions at toPC L3%11%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:00 : foo.A1.B3: Adding node L3%11%bbentry_Lfor.cond1%1%bbentry to the product-TFG...</MSG>
<MSG>4:00 : foo.A1.B3: Getting alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:00 : foo.A1.B3: Found no alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:00 : foo.A1.B3: Adding edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:00 : foo.A1.B3: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>4:00 : foo.A1.B3: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>4:00 : foo.A1.B3: Propagating counter-examples across the newly added edge...</MSG>
<MSG>4:01 : foo.A1.B3: Propagated 7 out of 14 counter-examples across edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry</MSG>
<MSG>4:01 : foo.A1.B3: Added the 7 propagated CEs at PC L3%11%bbentry_Lfor.cond1%1%bbentry and propagated further.
</MSG>
<MSG>4:01 : foo.A1.B3: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>4:01 : foo.A1.B3: Finished executing CG's add edge function...</MSG>
<MSG>4:01 : foo.A1.B3: Computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:01 : foo.A1.B3: Done computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:01 : Done adding new edge to the product-TFG foo.A1.B3 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%11%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%11%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>4:01 : Done adding a CG edge composition using the src path L3%7%bbentry --> L3%11%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:01 : Added correlation to the product-TFG foo.A1.B3 (d:6, s:0, sp: 5) and created a correlation entry...</MSG>
<MSG>4:01 : Chose (for CE propagation) product-TFG foo.A1.B4 (d:3, s:0, sp: 5) from a frontier of size 5...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 14 counterexamples (for correlating 7 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%19%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>4:01 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B4...</MSG>
<MSG>4:01 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B4...</MSG>
<MSG>4:01 : Creating ssa-path for the src-tfg path L3%7%bbentry --> L3%19%bbentry ending at L3%19%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:01 : Adding a CG edge composition using the src path L3%7%bbentry --> L3%19%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:01 : Identifying common alloc-deallocs in the src path L3%7%bbentry --> L3%19%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry
</MSG>
<MSG>4:01 : Identified no common alloc-deallocs in the src path L3%7%bbentry --> L3%19%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:01 : Adding new edge to the product-TFG foo.A1.B4 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%19%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%19%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>4:01 : foo.A1.B4: Computing loop hoisting select expressions at toPC L3%19%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:01 : foo.A1.B4: Computing loop hoisting non-linear expressions at toPC L3%19%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:01 : foo.A1.B4: Adding node L3%19%bbentry_Lfor.cond1%1%bbentry to the product-TFG...</MSG>
<MSG>4:01 : foo.A1.B4: Getting alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:01 : foo.A1.B4: Found no alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:01 : foo.A1.B4: Adding edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:01 : foo.A1.B4: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>4:01 : foo.A1.B4: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>4:01 : foo.A1.B4: Propagating counter-examples across the newly added edge...</MSG>
<MSG>4:04 : foo.A1.B4: Propagated 7 out of 14 counter-examples across edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry</MSG>
<MSG>4:04 : foo.A1.B4: Added the 7 propagated CEs at PC L3%19%bbentry_Lfor.cond1%1%bbentry and propagated further.
</MSG>
<MSG>4:04 : foo.A1.B4: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>4:04 : foo.A1.B4: Finished executing CG's add edge function...</MSG>
<MSG>4:04 : foo.A1.B4: Computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:04 : foo.A1.B4: Done computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:04 : Done adding new edge to the product-TFG foo.A1.B4 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%19%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%19%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>4:04 : Done adding a CG edge composition using the src path L3%7%bbentry --> L3%19%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:04 : Added correlation to the product-TFG foo.A1.B4 (d:6, s:0, sp: 5) and created a correlation entry...</MSG>
<MSG>4:04 : Chose (for CE propagation) product-TFG foo.A1.B5 (d:3, s:0, sp: 5) from a frontier of size 5...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 14 counterexamples (for correlating 7 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%23%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>4:04 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B5...</MSG>
<MSG>4:04 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B5...</MSG>
<MSG>4:04 : Creating ssa-path for the src-tfg path L3%7%bbentry --> L3%23%bbentry ending at L3%23%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:04 : Adding a CG edge composition using the src path L3%7%bbentry --> L3%23%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:04 : Identifying common alloc-deallocs in the src path L3%7%bbentry --> L3%23%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry
</MSG>
<MSG>4:04 : Identified no common alloc-deallocs in the src path L3%7%bbentry --> L3%23%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:04 : Adding new edge to the product-TFG foo.A1.B5 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%23%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%23%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>4:04 : foo.A1.B5: Computing loop hoisting select expressions at toPC L3%23%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:04 : foo.A1.B5: Computing loop hoisting non-linear expressions at toPC L3%23%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:04 : foo.A1.B5: Adding node L3%23%bbentry_Lfor.cond1%1%bbentry to the product-TFG...</MSG>
<MSG>4:04 : foo.A1.B5: Getting alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%23%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:04 : foo.A1.B5: Found no alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%23%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:04 : foo.A1.B5: Adding edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%23%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:04 : foo.A1.B5: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>4:04 : foo.A1.B5: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>4:04 : foo.A1.B5: Propagating counter-examples across the newly added edge...</MSG>
<MSG>4:04 : foo.A1.B5: marking unstable at L3%7%bbentry_Lfor.cond%1%bbentry due to failing condition:
wfcond.from_pcL3%7%bbentry_Lfor.cond%1%bbentry.to_pcL3%23%bbentry_Lfor.cond1%1%bbentry-dst-edgecond-implies-src-edgecond
140743 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32 : 0
140422 : input.dst.llvm-%n : BV:32                 : 536870912
140744 : bvult(140743, 140422) : BOOL              : true
141221 : not(140744) : BOOL                        : false
140655 : input.spec-%var-a-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]] : ( map(lambda(Lambda43254Var, ite(and(bvule(0, Lambda43254Var), bvule(Lambda43254Var, 536870911)), true, ite(and(bvule(536870912, Lambda43254Var), bvule(Lambda43254Var, 4294967295)), false, false))), lambda(Lambda43255Var, map(lambda(Lambda43256Var, false), lambda(Lambda43257Var, 0)))) )
140656 : input.spec-%var-i-0.L3%7%bbentry : BV:32  : 0
140657 : map_get(140655, 140656) : SUM[UNIT,MAP[BV:32 -> BV:32]] : ( sum(ite(ite(and(bvule(0, 0), bvule(0, 536870911)), true, ite(and(bvule(536870912, 0), bvule(0, 4294967295)), false, false)), 1, 0), unit, map(lambda(Lambda44138Var, false), lambda(Lambda44139Var, 0))) )
140303 : 1 { 0x1 +1.0e1025 } : INT                 : 1
169491 : sum_is(140657, 140303) : BOOL             : true
170297 : sum_get(140657, 140303) : MAP[BV:32 -> BV:32] : ( map(lambda(Lambda44176Var, false), lambda(Lambda44177Var, 0)) )
140286 : 0 { 0x0 +1.0e129 } : BV:32                : 0
170300 : map_get(170297, 140286) : SUM[UNIT,BV:32] : ( sum(ite(false, 1, 0), unit, 0) )
170301 : sum_is(170300, 140303) : BOOL             : false
170302 : and(169491, 170301) : BOOL                : false
170307 : or(141221, 170302) : BOOL                 : false

ce =
=counter_example_begin z3v487.ce1712 d6cdde5ebd1abbc0133669e6bf02256
=input.spec-%var-a-1
1 : Lambda43237Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 536870912 { 0x20000000 +1.0e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda43238Var : BV:32
18 : Lambda43239Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda43240Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-a-0.L3%7%bbentry
1 : Lambda43254Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 536870912 { 0x20000000 +1.0e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda43255Var : BV:32
18 : Lambda43256Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda43257Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 239493131 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 239493132; 239493135 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 239493136; 253407235 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 253407236; 253407239 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 253407240; 2151199215 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 2151199216; 2151199219 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2151199220; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%n
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2151199216 { 0x8038b1f0 -2143768080 -1.44293022e129 } : BV:32
=input.dst.llvm-%arr
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 253407236 { 0xf1ab004 +1.20849657e159 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 239493132 { 0xe46600c +1.54980611e157 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2151199216 { 0x8038b1f0 -2143768080 -1.44293022e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2151199219 { 0x8038b1f3 -2143768077 -1.44293057e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 253407236 { 0xf1ab004 +1.20849657e159 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 253407239 { 0xf1ab007 +1.20849692e159 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 239493132 { 0xe46600c +1.54980611e157 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 239493135 { 0xe46600f +1.54980647e157 } : BV:32
=input.spec-%var-a-1.0.1
1 : ([ 0; 536870911 ] -> true, [ 536870912; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-a-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-a-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-a-0.L3%7%bbentry.0.1
1 : ([ 0; 536870911 ] -> true, [ 536870912; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-a-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-a-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=counter_example.random_seed
2446440100
=counter_example_end


failcond-expr = or(not(bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)), and(sum_is(map_get(input.spec-%var-a-0.L3%7%bbentry, input.spec-%var-i-0.L3%7%bbentry), 1), sum_is(map_get(sum_get(map_get(input.spec-%var-a-0.L3%7%bbentry, input.spec-%var-i-0.L3%7%bbentry), 1), 0), 1))):
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
4 : not(3) : BOOL
5 : input.spec-%var-a-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
6 : input.spec-%var-i-0.L3%7%bbentry : BV:32
7 : map_get(5, 6) : SUM[UNIT,MAP[BV:32 -> BV:32]]
8 : 1 { 0x1 +1.0e1025 } : INT
9 : sum_is(7, 8) : BOOL
10 : sum_get(7, 8) : MAP[BV:32 -> BV:32]
11 : 0 { 0x0 +1.0e129 } : BV:32
12 : map_get(10, 11) : SUM[UNIT,BV:32]
13 : sum_is(12, 8) : BOOL
14 : and(9, 13) : BOOL
15 : or(4, 14) : BOOL
</MSG>
<MSG>4:04 : foo.A1.B5: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>4:04 : foo.A1.B5: Finished executing CG's add edge function...</MSG>
<MSG>4:04 : foo.A1.B5: Computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%23%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:04 : foo.A1.B5: Done computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%23%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:04 : Done adding new edge to the product-TFG foo.A1.B5 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%23%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%23%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>4:04 : Done adding a CG edge composition using the src path L3%7%bbentry --> L3%23%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:04 : Failed correlation of src pathset L3%7%bbentry=>L3%23%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry: failcond = wfcond.from_pcL3%7%bbentry_Lfor.cond%1%bbentry.to_pcL3%23%bbentry_Lfor.cond1%1%bbentry-dst-edgecond-implies-src-edgecond
140743 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32 : 0
140422 : input.dst.llvm-%n : BV:32                 : 536870912
140744 : bvult(140743, 140422) : BOOL              : true
141221 : not(140744) : BOOL                        : false
140655 : input.spec-%var-a-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]] : ( map(lambda(Lambda43254Var, ite(and(bvule(0, Lambda43254Var), bvule(Lambda43254Var, 536870911)), true, ite(and(bvule(536870912, Lambda43254Var), bvule(Lambda43254Var, 4294967295)), false, false))), lambda(Lambda43255Var, map(lambda(Lambda43256Var, false), lambda(Lambda43257Var, 0)))) )
140656 : input.spec-%var-i-0.L3%7%bbentry : BV:32  : 0
140657 : map_get(140655, 140656) : SUM[UNIT,MAP[BV:32 -> BV:32]] : ( sum(ite(ite(and(bvule(0, 0), bvule(0, 536870911)), true, ite(and(bvule(536870912, 0), bvule(0, 4294967295)), false, false)), 1, 0), unit, map(lambda(Lambda44138Var, false), lambda(Lambda44139Var, 0))) )
140303 : 1 { 0x1 +1.0e1025 } : INT                 : 1
169491 : sum_is(140657, 140303) : BOOL             : true
170297 : sum_get(140657, 140303) : MAP[BV:32 -> BV:32] : ( map(lambda(Lambda44176Var, false), lambda(Lambda44177Var, 0)) )
140286 : 0 { 0x0 +1.0e129 } : BV:32                : 0
170300 : map_get(170297, 140286) : SUM[UNIT,BV:32] : ( sum(ite(false, 1, 0), unit, 0) )
170301 : sum_is(170300, 140303) : BOOL             : false
170302 : and(169491, 170301) : BOOL                : false
170307 : or(141221, 170302) : BOOL                 : false

ce =
=counter_example_begin z3v487.ce1712 d6cdde5ebd1abbc0133669e6bf02256
=input.spec-%var-a-1
1 : Lambda43237Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 536870912 { 0x20000000 +1.0e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda43238Var : BV:32
18 : Lambda43239Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda43240Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-a-0.L3%7%bbentry
1 : Lambda43254Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 536870912 { 0x20000000 +1.0e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda43255Var : BV:32
18 : Lambda43256Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda43257Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 239493131 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 239493132; 239493135 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 239493136; 253407235 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 253407236; 253407239 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 253407240; 2151199215 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 2151199216; 2151199219 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2151199220; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%n
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2151199216 { 0x8038b1f0 -2143768080 -1.44293022e129 } : BV:32
=input.dst.llvm-%arr
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 253407236 { 0xf1ab004 +1.20849657e159 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 239493132 { 0xe46600c +1.54980611e157 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2151199216 { 0x8038b1f0 -2143768080 -1.44293022e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2151199219 { 0x8038b1f3 -2143768077 -1.44293057e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 253407236 { 0xf1ab004 +1.20849657e159 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 253407239 { 0xf1ab007 +1.20849692e159 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 239493132 { 0xe46600c +1.54980611e157 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 239493135 { 0xe46600f +1.54980647e157 } : BV:32
=input.spec-%var-a-1.0.1
1 : ([ 0; 536870911 ] -> true, [ 536870912; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-a-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-a-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-a-0.L3%7%bbentry.0.1
1 : ([ 0; 536870911 ] -> true, [ 536870912; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-a-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-a-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=counter_example.random_seed
2446440100
=counter_example_end


</MSG>
<MSG>4:04 : Discovered that the correlation was useless for the product-TFG foo.A1.B5 (d:3, s:0, sp: 5)...</MSG>
<MSG>4:04 : Chose (for CE propagation) product-TFG foo.A1.B2 (d:3, s:0, sp: 5) from a frontier of size 4...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 14 counterexamples (for correlating 7 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%7%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>4:04 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B2...</MSG>
<MSG>4:04 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B2...</MSG>
<MSG>4:04 : Creating ssa-path for the src-tfg path L3%7%bbentry --> L3%7%bbentry ending at L3%7%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:04 : Adding a CG edge composition using the src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:04 : Identifying common alloc-deallocs in the src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry
</MSG>
<MSG>4:04 : Identified no common alloc-deallocs in the src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:04 : Adding new edge to the product-TFG foo.A1.B2 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%7%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>4:04 : foo.A1.B2: Computing loop hoisting select expressions at toPC L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:04 : foo.A1.B2: Computing loop hoisting non-linear expressions at toPC L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:04 : foo.A1.B2: Adding node L3%7%bbentry_Lfor.cond1%1%bbentry to the product-TFG...</MSG>
<MSG>4:04 : foo.A1.B2: Getting alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:04 : foo.A1.B2: Found no alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:04 : foo.A1.B2: Adding edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:04 : foo.A1.B2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>4:04 : foo.A1.B2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>4:04 : foo.A1.B2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>4:09 : foo.A1.B2: marking unstable at L3%7%bbentry_Lfor.cond%1%bbentry due to failing condition:
wfcond.from_pcL3%7%bbentry_Lfor.cond%1%bbentry.to_pcL3%7%bbentry_Lfor.cond1%1%bbentry-dst-edgecond-implies-src-edgecond
140743 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32 : 0
140422 : input.dst.llvm-%n : BV:32                 : 2155873408
140744 : bvult(140743, 140422) : BOOL              : true
141221 : not(140744) : BOOL                        : false
140655 : input.spec-%var-a-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]] : ( 164333 = bvconcat(ite(eq(bvadd(3, bvmul(4, Lambda41549Var), 0), 67504401), 4, ite(eq(bvadd(3, bvmul(4, Lambda41549Var), 0), 262276), 0, ite(eq(bvadd(3, bvmul(4, Lambda41549Var), 0), 5), 0, ite(eq(bvadd(3, bvmul(4, Lambda41549Var), 0), 262277), 0, ite(eq(bvadd(3, bvmul(4, Lambda41549Var), 0), 100728850), 0, ite(eq(bvadd(3, bvmul(4, Lambda41549Var), 0), 100728849), 0, ite(eq(bvadd(3, bvmul(4, Lambda41549Var), 0), 1), 0, ite(eq(bvadd(3, bvmul(4, Lambda41549Var), 0), 262279), 0, ite(eq(bvadd(3, bvmul(4, Lambda41549Var), 0), 0), 2, ite(eq(bvadd(3, bvmul(4, Lambda41549Var), 0), 262278), 0, ite(eq(bvadd(3, bvmul(4, Lambda41549Var), 0), 3), 0, ite(eq(bvadd(3, bvmul(4, Lambda41549Var), 0), 100728848), 0, ite(eq(bvadd(3, bvmul(4, Lambda41549Var), 0), 4), 0, ite(eq(bvadd(3, bvmul(4, Lambda41549Var), 0), 2), 0, 128)))))))))))))), ite(eq(bvadd(2, bvmul(4, Lambda41549Var), 0), 67504401), 4, ite(eq(bvadd(2, bvmul(4, Lambda41549Var), 0), 262276), 0, ite(eq(bvadd(2, bvmul(4, Lambda41549Var), 0), 5), 0, ite(eq(bvadd(2, bvmul(4, Lambda41549Var), 0), 262277), 0, ite(eq(bvadd(2, bvmul(4, Lambda41549Var), 0), 100728850), 0, ite(eq(bvadd(2, bvmul(4, Lambda41549Var), 0), 100728849), 0, ite(eq(bvadd(2, bvmul(4, Lambda41549Var), 0), 1), 0, ite(eq(bvadd(2, bvmul(4, Lambda41549Var), 0), 262279), 0, ite(eq(bvadd(2, bvmul(4, Lambda41549Var), 0), 0), 2, ite(eq(bvadd(2, bvmul(4, Lambda41549Var), 0), 262278), 0, ite(eq(bvadd(2, bvmul(4, Lambda41549Var), 0), 3), 0, ite(eq(bvadd(2, bvmul(4, Lambda41549Var), 0), 100728848), 0, ite(eq(bvadd(2, bvmul(4, Lambda41549Var), 0), 4), 0, ite(eq(bvadd(2, bvmul(4, Lambda41549Var), 0), 2), 0, 128)))))))))))))), ite(eq(bvadd(1, bvmul(4, Lambda41549Var), 0), 67504401), 4, ite(eq(bvadd(1, bvmul(4, Lambda41549Var), 0), 262276), 0, ite(eq(bvadd(1, bvmul(4, Lambda41549Var), 0), 5), 0, ite(eq(bvadd(1, bvmul(4, Lambda41549Var), 0), 262277), 0, ite(eq(bvadd(1, bvmul(4, Lambda41549Var), 0), 100728850), 0, ite(eq(bvadd(1, bvmul(4, Lambda41549Var), 0), 100728849), 0, ite(eq(bvadd(1, bvmul(4, Lambda41549Var), 0), 1), 0, ite(eq(bvadd(1, bvmul(4, Lambda41549Var), 0), 262279), 0, ite(eq(bvadd(1, bvmul(4, Lambda41549Var), 0), 0), 2, ite(eq(bvadd(1, bvmul(4, Lambda41549Var), 0), 262278), 0, ite(eq(bvadd(1, bvmul(4, Lambda41549Var), 0), 3), 0, ite(eq(bvadd(1, bvmul(4, Lambda41549Var), 0), 100728848), 0, ite(eq(bvadd(1, bvmul(4, Lambda41549Var), 0), 4), 0, ite(eq(bvadd(1, bvmul(4, Lambda41549Var), 0), 2), 0, 128)))))))))))))), ite(eq(bvadd(bvmul(4, Lambda41549Var), 0), 67504401), 4, ite(eq(bvadd(bvmul(4, Lambda41549Var), 0), 262276), 0, ite(eq(bvadd(bvmul(4, Lambda41549Var), 0), 5), 0, ite(eq(bvadd(bvmul(4, Lambda41549Var), 0), 262277), 0, ite(eq(bvadd(bvmul(4, Lambda41549Var), 0), 100728850), 0, ite(eq(bvadd(bvmul(4, Lambda41549Var), 0), 100728849), 0, ite(eq(bvadd(bvmul(4, Lambda41549Var), 0), 1), 0, ite(eq(bvadd(bvmul(4, Lambda41549Var), 0), 262279), 0, ite(eq(bvadd(bvmul(4, Lambda41549Var), 0), 0), 2, ite(eq(bvadd(bvmul(4, Lambda41549Var), 0), 262278), 0, ite(eq(bvadd(bvmul(4, Lambda41549Var), 0), 3), 0, ite(eq(bvadd(bvmul(4, Lambda41549Var), 0), 100728848), 0, ite(eq(bvadd(bvmul(4, Lambda41549Var), 0), 4), 0, ite(eq(bvadd(bvmul(4, Lambda41549Var), 0), 2), 0, 128)))))))))))))));map[163881](lambda(Lambda41548Var, ite(and(bvule(0, Lambda41548Var), bvule(Lambda41548Var, 2155873407)), true, ite(and(bvule(2155873408, Lambda41548Var), bvule(Lambda41548Var, 4294967295)), false, false))), lambda[163880](Lambda41549Var, map[163879](lambda(Lambda41550Var, ite(and(eq(ite(and(bvule(0, Lambda41549Var), bvule(Lambda41549Var, 2155873407)), 0, ite(and(bvule(2155873408, Lambda41549Var), bvule(Lambda41549Var, 2155873408)), 2155873408, ite(and(bvule(2155873409, Lambda41549Var), bvule(Lambda41549Var, 4294967295)), 2155873409, 2155873409))), 0), eq(ite(and(bvule(0, Lambda41550Var), bvule(Lambda41550Var, 2147483647)), 0, ite(and(bvule(2147483649, Lambda41550Var), bvule(Lambda41550Var, 4294967295)), 2147483649, ite(and(bvule(2147483648, Lambda41550Var), bvule(Lambda41550Var, 2147483648)), 2147483648, 2147483648))), 0)), true, false)), lambda[163878](Lambda41551Var, ite[164593](and(eq(Lambda41549Var, 0), eq(Lambda41551Var, 0)), 0, bvconcat[164592](ite[164504](eq[164456](bvadd[164455](3, bvmul(4, Lambda41551Var), 164333), 67504401), 4, ite[164503](eq[164457](bvadd[164455](3, bvmul(4, Lambda41551Var), 164333), 262276), 0, ite[164502](eq[164479](bvadd[164455](3, bvmul(4, Lambda41551Var), 164333), 5), 0, ite[164501](eq[164480](bvadd[164455](3, bvmul(4, Lambda41551Var), 164333), 262277), 0, ite[164500](eq[164481](bvadd[164455](3, bvmul(4, Lambda41551Var), 164333), 100728850), 0, ite[164499](eq[164482](bvadd[164455](3, bvmul(4, Lambda41551Var), 164333), 100728849), 0, ite[164498](eq[164483](bvadd[164455](3, bvmul(4, Lambda41551Var), 164333), 1), 0, ite[164497](eq[164484](bvadd[164455](3, bvmul(4, Lambda41551Var), 164333), 262279), 0, ite[164496](eq[164485](bvadd[164455](3, bvmul(4, Lambda41551Var), 164333), 0), 2, ite[164495](eq[164486](bvadd[164455](3, bvmul(4, Lambda41551Var), 164333), 262278), 0, ite[164494](eq[164487](bvadd[164455](3, bvmul(4, Lambda41551Var), 164333), 3), 0, ite[164493](eq[164488](bvadd[164455](3, bvmul(4, Lambda41551Var), 164333), 100728848), 0, ite[164492](eq[164489](bvadd[164455](3, bvmul(4, Lambda41551Var), 164333), 4), 0, ite[164491](eq[164490](bvadd[164455](3, bvmul(4, Lambda41551Var), 164333), 2), 0, 128)))))))))))))), ite[164533](eq[164506](bvadd[164505](2, bvmul(4, Lambda41551Var), 164333), 67504401), 4, ite[164532](eq[164507](bvadd[164505](2, bvmul(4, Lambda41551Var), 164333), 262276), 0, ite[164531](eq[164508](bvadd[164505](2, bvmul(4, Lambda41551Var), 164333), 5), 0, ite[164530](eq[164509](bvadd[164505](2, bvmul(4, Lambda41551Var), 164333), 262277), 0, ite[164529](eq[164510](bvadd[164505](2, bvmul(4, Lambda41551Var), 164333), 100728850), 0, ite[164528](eq[164511](bvadd[164505](2, bvmul(4, Lambda41551Var), 164333), 100728849), 0, ite[164527](eq[164512](bvadd[164505](2, bvmul(4, Lambda41551Var), 164333), 1), 0, ite[164526](eq[164513](bvadd[164505](2, bvmul(4, Lambda41551Var), 164333), 262279), 0, ite[164525](eq[164514](bvadd[164505](2, bvmul(4, Lambda41551Var), 164333), 0), 2, ite[164524](eq[164515](bvadd[164505](2, bvmul(4, Lambda41551Var), 164333), 262278), 0, ite[164523](eq[164516](bvadd[164505](2, bvmul(4, Lambda41551Var), 164333), 3), 0, ite[164522](eq[164517](bvadd[164505](2, bvmul(4, Lambda41551Var), 164333), 100728848), 0, ite[164521](eq[164518](bvadd[164505](2, bvmul(4, Lambda41551Var), 164333), 4), 0, ite[164520](eq[164519](bvadd[164505](2, bvmul(4, Lambda41551Var), 164333), 2), 0, 128)))))))))))))), ite[164562](eq[164535](bvadd[164534](1, bvmul(4, Lambda41551Var), 164333), 67504401), 4, ite[164561](eq[164536](bvadd[164534](1, bvmul(4, Lambda41551Var), 164333), 262276), 0, ite[164560](eq[164537](bvadd[164534](1, bvmul(4, Lambda41551Var), 164333), 5), 0, ite[164559](eq[164538](bvadd[164534](1, bvmul(4, Lambda41551Var), 164333), 262277), 0, ite[164558](eq[164539](bvadd[164534](1, bvmul(4, Lambda41551Var), 164333), 100728850), 0, ite[164557](eq[164540](bvadd[164534](1, bvmul(4, Lambda41551Var), 164333), 100728849), 0, ite[164556](eq[164541](bvadd[164534](1, bvmul(4, Lambda41551Var), 164333), 1), 0, ite[164555](eq[164542](bvadd[164534](1, bvmul(4, Lambda41551Var), 164333), 262279), 0, ite[164554](eq[164543](bvadd[164534](1, bvmul(4, Lambda41551Var), 164333), 0), 2, ite[164553](eq[164544](bvadd[164534](1, bvmul(4, Lambda41551Var), 164333), 262278), 0, ite[164552](eq[164545](bvadd[164534](1, bvmul(4, Lambda41551Var), 164333), 3), 0, ite[164551](eq[164546](bvadd[164534](1, bvmul(4, Lambda41551Var), 164333), 100728848), 0, ite[164550](eq[164547](bvadd[164534](1, bvmul(4, Lambda41551Var), 164333), 4), 0, ite[164549](eq[164548](bvadd[164534](1, bvmul(4, Lambda41551Var), 164333), 2), 0, 128)))))))))))))), ite[164591](eq[164564](bvadd[164563](bvmul(4, Lambda41551Var), 164333), 67504401), 4, ite[164590](eq[164565](bvadd[164563](bvmul(4, Lambda41551Var), 164333), 262276), 0, ite[164589](eq[164566](bvadd[164563](bvmul(4, Lambda41551Var), 164333), 5), 0, ite[164588](eq[164567](bvadd[164563](bvmul(4, Lambda41551Var), 164333), 262277), 0, ite[164587](eq[164568](bvadd[164563](bvmul(4, Lambda41551Var), 164333), 100728850), 0, ite[164586](eq[164569](bvadd[164563](bvmul(4, Lambda41551Var), 164333), 100728849), 0, ite[164585](eq[164570](bvadd[164563](bvmul(4, Lambda41551Var), 164333), 1), 0, ite[164584](eq[164571](bvadd[164563](bvmul(4, Lambda41551Var), 164333), 262279), 0, ite[164583](eq[164572](bvadd[164563](bvmul(4, Lambda41551Var), 164333), 0), 2, ite[164582](eq[164573](bvadd[164563](bvmul(4, Lambda41551Var), 164333), 262278), 0, ite[164581](eq[164574](bvadd[164563](bvmul(4, Lambda41551Var), 164333), 3), 0, ite[164580](eq[164575](bvadd[164563](bvmul(4, Lambda41551Var), 164333), 100728848), 0, ite[164579](eq[164576](bvadd[164563](bvmul(4, Lambda41551Var), 164333), 4), 0, ite[164578](eq[164577](bvadd[164563](bvmul(4, Lambda41551Var), 164333), 2), 0, 128)))))))))))))))))))) )
140656 : input.spec-%var-i-0.L3%7%bbentry : BV:32  : 0
140657 : map_get(140655, 140656) : SUM[UNIT,MAP[BV:32 -> BV:32]] : ( 170461 = bvconcat(ite(eq(bvadd(3, bvmul(4, 0), 0), 67504401), 4, ite(eq(bvadd(3, bvmul(4, 0), 0), 262276), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 5), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 262277), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 100728850), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 100728849), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 1), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 262279), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 0), 2, ite(eq(bvadd(3, bvmul(4, 0), 0), 262278), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 3), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 100728848), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 4), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 2), 0, 128)))))))))))))), ite(eq(bvadd(2, bvmul(4, 0), 0), 67504401), 4, ite(eq(bvadd(2, bvmul(4, 0), 0), 262276), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 5), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 262277), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 100728850), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 100728849), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 1), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 262279), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 0), 2, ite(eq(bvadd(2, bvmul(4, 0), 0), 262278), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 3), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 100728848), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 4), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 2), 0, 128)))))))))))))), ite(eq(bvadd(1, bvmul(4, 0), 0), 67504401), 4, ite(eq(bvadd(1, bvmul(4, 0), 0), 262276), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 5), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 262277), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 100728850), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 100728849), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 1), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 262279), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 0), 2, ite(eq(bvadd(1, bvmul(4, 0), 0), 262278), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 3), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 100728848), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 4), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 2), 0, 128)))))))))))))), ite(eq(bvadd(bvmul(4, 0), 0), 67504401), 4, ite(eq(bvadd(bvmul(4, 0), 0), 262276), 0, ite(eq(bvadd(bvmul(4, 0), 0), 5), 0, ite(eq(bvadd(bvmul(4, 0), 0), 262277), 0, ite(eq(bvadd(bvmul(4, 0), 0), 100728850), 0, ite(eq(bvadd(bvmul(4, 0), 0), 100728849), 0, ite(eq(bvadd(bvmul(4, 0), 0), 1), 0, ite(eq(bvadd(bvmul(4, 0), 0), 262279), 0, ite(eq(bvadd(bvmul(4, 0), 0), 0), 2, ite(eq(bvadd(bvmul(4, 0), 0), 262278), 0, ite(eq(bvadd(bvmul(4, 0), 0), 3), 0, ite(eq(bvadd(bvmul(4, 0), 0), 100728848), 0, ite(eq(bvadd(bvmul(4, 0), 0), 4), 0, ite(eq(bvadd(bvmul(4, 0), 0), 2), 0, 128)))))))))))))));sum[172265](ite(ite(and(bvule(0, 0), bvule(0, 2155873407)), true, ite(and(bvule(2155873408, 0), bvule(0, 4294967295)), false, false)), 1, 0), unit, map[172264](lambda(Lambda44446Var, ite(and(eq(ite(and(bvule(0, 0), bvule(0, 2155873407)), 0, ite(and(bvule(2155873408, 0), bvule(0, 2155873408)), 2155873408, ite(and(bvule(2155873409, 0), bvule(0, 4294967295)), 2155873409, 2155873409))), 0), eq(ite(and(bvule(0, Lambda44446Var), bvule(Lambda44446Var, 2147483647)), 0, ite(and(bvule(2147483649, Lambda44446Var), bvule(Lambda44446Var, 4294967295)), 2147483649, ite(and(bvule(2147483648, Lambda44446Var), bvule(Lambda44446Var, 2147483648)), 2147483648, 2147483648))), 0)), true, false)), lambda[172263](Lambda44447Var, ite[172262](and(eq(0, 0), eq(Lambda44447Var, 0)), 0, bvconcat[172261](ite[171036](eq[170993](bvadd[170992](3, bvmul(4, Lambda44447Var), 170461), 67504401), 4, ite[171035](eq[170994](bvadd[170992](3, bvmul(4, Lambda44447Var), 170461), 262276), 0, ite[171034](eq[170995](bvadd[170992](3, bvmul(4, Lambda44447Var), 170461), 5), 0, ite[171033](eq[170996](bvadd[170992](3, bvmul(4, Lambda44447Var), 170461), 262277), 0, ite[171032](eq[170997](bvadd[170992](3, bvmul(4, Lambda44447Var), 170461), 100728850), 0, ite[171031](eq[170998](bvadd[170992](3, bvmul(4, Lambda44447Var), 170461), 100728849), 0, ite[171030](eq[171009](bvadd[170992](3, bvmul(4, Lambda44447Var), 170461), 1), 0, ite[171028](eq[171010](bvadd[170992](3, bvmul(4, Lambda44447Var), 170461), 262279), 0, ite[171027](eq[171012](bvadd[170992](3, bvmul(4, Lambda44447Var), 170461), 0), 2, ite[171026](eq[171013](bvadd[170992](3, bvmul(4, Lambda44447Var), 170461), 262278), 0, ite[171025](eq[171014](bvadd[170992](3, bvmul(4, Lambda44447Var), 170461), 3), 0, ite[171024](eq[171015](bvadd[170992](3, bvmul(4, Lambda44447Var), 170461), 100728848), 0, ite[171023](eq[171016](bvadd[170992](3, bvmul(4, Lambda44447Var), 170461), 4), 0, ite[171019](eq[171017](bvadd[170992](3, bvmul(4, Lambda44447Var), 170461), 2), 0, 128)))))))))))))), ite[172201](eq[171038](bvadd[171037](2, bvmul(4, Lambda44447Var), 170461), 67504401), 4, ite[172200](eq[171039](bvadd[171037](2, bvmul(4, Lambda44447Var), 170461), 262276), 0, ite[172199](eq[171040](bvadd[171037](2, bvmul(4, Lambda44447Var), 170461), 5), 0, ite[172198](eq[171041](bvadd[171037](2, bvmul(4, Lambda44447Var), 170461), 262277), 0, ite[172197](eq[171042](bvadd[171037](2, bvmul(4, Lambda44447Var), 170461), 100728850), 0, ite[172196](eq[171043](bvadd[171037](2, bvmul(4, Lambda44447Var), 170461), 100728849), 0, ite[172195](eq[171044](bvadd[171037](2, bvmul(4, Lambda44447Var), 170461), 1), 0, ite[172194](eq[171045](bvadd[171037](2, bvmul(4, Lambda44447Var), 170461), 262279), 0, ite[172193](eq[171046](bvadd[171037](2, bvmul(4, Lambda44447Var), 170461), 0), 2, ite[172192](eq[171047](bvadd[171037](2, bvmul(4, Lambda44447Var), 170461), 262278), 0, ite[172191](eq[171048](bvadd[171037](2, bvmul(4, Lambda44447Var), 170461), 3), 0, ite[172190](eq[171049](bvadd[171037](2, bvmul(4, Lambda44447Var), 170461), 100728848), 0, ite[172189](eq[171050](bvadd[171037](2, bvmul(4, Lambda44447Var), 170461), 4), 0, ite[172188](eq[171051](bvadd[171037](2, bvmul(4, Lambda44447Var), 170461), 2), 0, 128)))))))))))))), ite[172231](eq[172203](bvadd[172202](1, bvmul(4, Lambda44447Var), 170461), 67504401), 4, ite[172230](eq[172204](bvadd[172202](1, bvmul(4, Lambda44447Var), 170461), 262276), 0, ite[172229](eq[172205](bvadd[172202](1, bvmul(4, Lambda44447Var), 170461), 5), 0, ite[172228](eq[172206](bvadd[172202](1, bvmul(4, Lambda44447Var), 170461), 262277), 0, ite[172226](eq[172207](bvadd[172202](1, bvmul(4, Lambda44447Var), 170461), 100728850), 0, ite[172225](eq[172208](bvadd[172202](1, bvmul(4, Lambda44447Var), 170461), 100728849), 0, ite[172224](eq[172209](bvadd[172202](1, bvmul(4, Lambda44447Var), 170461), 1), 0, ite[172223](eq[172210](bvadd[172202](1, bvmul(4, Lambda44447Var), 170461), 262279), 0, ite[172222](eq[172211](bvadd[172202](1, bvmul(4, Lambda44447Var), 170461), 0), 2, ite[172221](eq[172212](bvadd[172202](1, bvmul(4, Lambda44447Var), 170461), 262278), 0, ite[172220](eq[172213](bvadd[172202](1, bvmul(4, Lambda44447Var), 170461), 3), 0, ite[172219](eq[172214](bvadd[172202](1, bvmul(4, Lambda44447Var), 170461), 100728848), 0, ite[172218](eq[172215](bvadd[172202](1, bvmul(4, Lambda44447Var), 170461), 4), 0, ite[172217](eq[172216](bvadd[172202](1, bvmul(4, Lambda44447Var), 170461), 2), 0, 128)))))))))))))), ite[172260](eq[172233](bvadd[172232](bvmul(4, Lambda44447Var), 170461), 67504401), 4, ite[172259](eq[172234](bvadd[172232](bvmul(4, Lambda44447Var), 170461), 262276), 0, ite[172258](eq[172235](bvadd[172232](bvmul(4, Lambda44447Var), 170461), 5), 0, ite[172257](eq[172236](bvadd[172232](bvmul(4, Lambda44447Var), 170461), 262277), 0, ite[172256](eq[172237](bvadd[172232](bvmul(4, Lambda44447Var), 170461), 100728850), 0, ite[172255](eq[172238](bvadd[172232](bvmul(4, Lambda44447Var), 170461), 100728849), 0, ite[172254](eq[172239](bvadd[172232](bvmul(4, Lambda44447Var), 170461), 1), 0, ite[172253](eq[172240](bvadd[172232](bvmul(4, Lambda44447Var), 170461), 262279), 0, ite[172252](eq[172241](bvadd[172232](bvmul(4, Lambda44447Var), 170461), 0), 2, ite[172251](eq[172242](bvadd[172232](bvmul(4, Lambda44447Var), 170461), 262278), 0, ite[172250](eq[172243](bvadd[172232](bvmul(4, Lambda44447Var), 170461), 3), 0, ite[172249](eq[172244](bvadd[172232](bvmul(4, Lambda44447Var), 170461), 100728848), 0, ite[172248](eq[172245](bvadd[172232](bvmul(4, Lambda44447Var), 170461), 4), 0, ite[172247](eq[172246](bvadd[172232](bvmul(4, Lambda44447Var), 170461), 2), 0, 128))))))))))))))))))) )
140303 : 1 { 0x1 +1.0e1025 } : INT                 : 1
169491 : sum_is(140657, 140303) : BOOL             : true
170297 : sum_get(140657, 140303) : MAP[BV:32 -> BV:32] : ( 170461 = bvconcat(ite(eq(bvadd(3, bvmul(4, 0), 0), 67504401), 4, ite(eq(bvadd(3, bvmul(4, 0), 0), 262276), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 5), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 262277), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 100728850), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 100728849), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 1), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 262279), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 0), 2, ite(eq(bvadd(3, bvmul(4, 0), 0), 262278), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 3), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 100728848), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 4), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 2), 0, 128)))))))))))))), ite(eq(bvadd(2, bvmul(4, 0), 0), 67504401), 4, ite(eq(bvadd(2, bvmul(4, 0), 0), 262276), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 5), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 262277), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 100728850), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 100728849), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 1), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 262279), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 0), 2, ite(eq(bvadd(2, bvmul(4, 0), 0), 262278), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 3), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 100728848), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 4), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 2), 0, 128)))))))))))))), ite(eq(bvadd(1, bvmul(4, 0), 0), 67504401), 4, ite(eq(bvadd(1, bvmul(4, 0), 0), 262276), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 5), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 262277), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 100728850), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 100728849), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 1), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 262279), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 0), 2, ite(eq(bvadd(1, bvmul(4, 0), 0), 262278), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 3), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 100728848), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 4), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 2), 0, 128)))))))))))))), ite(eq(bvadd(bvmul(4, 0), 0), 67504401), 4, ite(eq(bvadd(bvmul(4, 0), 0), 262276), 0, ite(eq(bvadd(bvmul(4, 0), 0), 5), 0, ite(eq(bvadd(bvmul(4, 0), 0), 262277), 0, ite(eq(bvadd(bvmul(4, 0), 0), 100728850), 0, ite(eq(bvadd(bvmul(4, 0), 0), 100728849), 0, ite(eq(bvadd(bvmul(4, 0), 0), 1), 0, ite(eq(bvadd(bvmul(4, 0), 0), 262279), 0, ite(eq(bvadd(bvmul(4, 0), 0), 0), 2, ite(eq(bvadd(bvmul(4, 0), 0), 262278), 0, ite(eq(bvadd(bvmul(4, 0), 0), 3), 0, ite(eq(bvadd(bvmul(4, 0), 0), 100728848), 0, ite(eq(bvadd(bvmul(4, 0), 0), 4), 0, ite(eq(bvadd(bvmul(4, 0), 0), 2), 0, 128)))))))))))))));map[172562](lambda(Lambda44484Var, ite(and(eq(ite(and(bvule(0, 0), bvule(0, 2155873407)), 0, ite(and(bvule(2155873408, 0), bvule(0, 2155873408)), 2155873408, ite(and(bvule(2155873409, 0), bvule(0, 4294967295)), 2155873409, 2155873409))), 0), eq(ite(and(bvule(0, Lambda44484Var), bvule(Lambda44484Var, 2147483647)), 0, ite(and(bvule(2147483649, Lambda44484Var), bvule(Lambda44484Var, 4294967295)), 2147483649, ite(and(bvule(2147483648, Lambda44484Var), bvule(Lambda44484Var, 2147483648)), 2147483648, 2147483648))), 0)), true, false)), lambda[172561](Lambda44485Var, ite[172559](and(eq(0, 0), eq(Lambda44485Var, 0)), 0, bvconcat[172558](ite[172453](eq[172425](bvadd[172424](3, bvmul(4, Lambda44485Var), 170461), 67504401), 4, ite[172452](eq[172426](bvadd[172424](3, bvmul(4, Lambda44485Var), 170461), 262276), 0, ite[172451](eq[172427](bvadd[172424](3, bvmul(4, Lambda44485Var), 170461), 5), 0, ite[172450](eq[172428](bvadd[172424](3, bvmul(4, Lambda44485Var), 170461), 262277), 0, ite[172449](eq[172429](bvadd[172424](3, bvmul(4, Lambda44485Var), 170461), 100728850), 0, ite[172448](eq[172430](bvadd[172424](3, bvmul(4, Lambda44485Var), 170461), 100728849), 0, ite[172447](eq[172431](bvadd[172424](3, bvmul(4, Lambda44485Var), 170461), 1), 0, ite[172446](eq[172432](bvadd[172424](3, bvmul(4, Lambda44485Var), 170461), 262279), 0, ite[172445](eq[172433](bvadd[172424](3, bvmul(4, Lambda44485Var), 170461), 0), 2, ite[172444](eq[172434](bvadd[172424](3, bvmul(4, Lambda44485Var), 170461), 262278), 0, ite[172443](eq[172435](bvadd[172424](3, bvmul(4, Lambda44485Var), 170461), 3), 0, ite[172441](eq[172436](bvadd[172424](3, bvmul(4, Lambda44485Var), 170461), 100728848), 0, ite[172440](eq[172437](bvadd[172424](3, bvmul(4, Lambda44485Var), 170461), 4), 0, ite[172439](eq[172438](bvadd[172424](3, bvmul(4, Lambda44485Var), 170461), 2), 0, 128)))))))))))))), ite[172498](eq[172455](bvadd[172454](2, bvmul(4, Lambda44485Var), 170461), 67504401), 4, ite[172497](eq[172456](bvadd[172454](2, bvmul(4, Lambda44485Var), 170461), 262276), 0, ite[172496](eq[172457](bvadd[172454](2, bvmul(4, Lambda44485Var), 170461), 5), 0, ite[172495](eq[172458](bvadd[172454](2, bvmul(4, Lambda44485Var), 170461), 262277), 0, ite[172494](eq[172459](bvadd[172454](2, bvmul(4, Lambda44485Var), 170461), 100728850), 0, ite[172493](eq[172460](bvadd[172454](2, bvmul(4, Lambda44485Var), 170461), 100728849), 0, ite[172492](eq[172461](bvadd[172454](2, bvmul(4, Lambda44485Var), 170461), 1), 0, ite[172491](eq[172462](bvadd[172454](2, bvmul(4, Lambda44485Var), 170461), 262279), 0, ite[172490](eq[172463](bvadd[172454](2, bvmul(4, Lambda44485Var), 170461), 0), 2, ite[172488](eq[172464](bvadd[172454](2, bvmul(4, Lambda44485Var), 170461), 262278), 0, ite[172486](eq[172465](bvadd[172454](2, bvmul(4, Lambda44485Var), 170461), 3), 0, ite[172485](eq[172466](bvadd[172454](2, bvmul(4, Lambda44485Var), 170461), 100728848), 0, ite[172470](eq[172467](bvadd[172454](2, bvmul(4, Lambda44485Var), 170461), 4), 0, ite[172469](eq[172468](bvadd[172454](2, bvmul(4, Lambda44485Var), 170461), 2), 0, 128)))))))))))))), ite[172527](eq[172500](bvadd[172499](1, bvmul(4, Lambda44485Var), 170461), 67504401), 4, ite[172526](eq[172501](bvadd[172499](1, bvmul(4, Lambda44485Var), 170461), 262276), 0, ite[172525](eq[172502](bvadd[172499](1, bvmul(4, Lambda44485Var), 170461), 5), 0, ite[172524](eq[172503](bvadd[172499](1, bvmul(4, Lambda44485Var), 170461), 262277), 0, ite[172523](eq[172504](bvadd[172499](1, bvmul(4, Lambda44485Var), 170461), 100728850), 0, ite[172522](eq[172505](bvadd[172499](1, bvmul(4, Lambda44485Var), 170461), 100728849), 0, ite[172521](eq[172506](bvadd[172499](1, bvmul(4, Lambda44485Var), 170461), 1), 0, ite[172520](eq[172507](bvadd[172499](1, bvmul(4, Lambda44485Var), 170461), 262279), 0, ite[172519](eq[172508](bvadd[172499](1, bvmul(4, Lambda44485Var), 170461), 0), 2, ite[172518](eq[172509](bvadd[172499](1, bvmul(4, Lambda44485Var), 170461), 262278), 0, ite[172517](eq[172510](bvadd[172499](1, bvmul(4, Lambda44485Var), 170461), 3), 0, ite[172516](eq[172511](bvadd[172499](1, bvmul(4, Lambda44485Var), 170461), 100728848), 0, ite[172515](eq[172512](bvadd[172499](1, bvmul(4, Lambda44485Var), 170461), 4), 0, ite[172514](eq[172513](bvadd[172499](1, bvmul(4, Lambda44485Var), 170461), 2), 0, 128)))))))))))))), ite[172556](eq[172529](bvadd[172528](bvmul(4, Lambda44485Var), 170461), 67504401), 4, ite[172555](eq[172530](bvadd[172528](bvmul(4, Lambda44485Var), 170461), 262276), 0, ite[172554](eq[172531](bvadd[172528](bvmul(4, Lambda44485Var), 170461), 5), 0, ite[172553](eq[172532](bvadd[172528](bvmul(4, Lambda44485Var), 170461), 262277), 0, ite[172552](eq[172533](bvadd[172528](bvmul(4, Lambda44485Var), 170461), 100728850), 0, ite[172551](eq[172534](bvadd[172528](bvmul(4, Lambda44485Var), 170461), 100728849), 0, ite[172550](eq[172535](bvadd[172528](bvmul(4, Lambda44485Var), 170461), 1), 0, ite[172549](eq[172536](bvadd[172528](bvmul(4, Lambda44485Var), 170461), 262279), 0, ite[172548](eq[172537](bvadd[172528](bvmul(4, Lambda44485Var), 170461), 0), 2, ite[172547](eq[172538](bvadd[172528](bvmul(4, Lambda44485Var), 170461), 262278), 0, ite[172546](eq[172539](bvadd[172528](bvmul(4, Lambda44485Var), 170461), 3), 0, ite[172545](eq[172540](bvadd[172528](bvmul(4, Lambda44485Var), 170461), 100728848), 0, ite[172544](eq[172541](bvadd[172528](bvmul(4, Lambda44485Var), 170461), 4), 0, ite[172543](eq[172542](bvadd[172528](bvmul(4, Lambda44485Var), 170461), 2), 0, 128)))))))))))))))))) )
140286 : 0 { 0x0 +1.0e129 } : BV:32                : 0
170300 : map_get(170297, 140286) : SUM[UNIT,BV:32] : ( 170461 = bvconcat(ite(eq(bvadd(3, bvmul(4, 0), 0), 67504401), 4, ite(eq(bvadd(3, bvmul(4, 0), 0), 262276), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 5), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 262277), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 100728850), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 100728849), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 1), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 262279), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 0), 2, ite(eq(bvadd(3, bvmul(4, 0), 0), 262278), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 3), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 100728848), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 4), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 2), 0, 128)))))))))))))), ite(eq(bvadd(2, bvmul(4, 0), 0), 67504401), 4, ite(eq(bvadd(2, bvmul(4, 0), 0), 262276), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 5), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 262277), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 100728850), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 100728849), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 1), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 262279), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 0), 2, ite(eq(bvadd(2, bvmul(4, 0), 0), 262278), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 3), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 100728848), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 4), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 2), 0, 128)))))))))))))), ite(eq(bvadd(1, bvmul(4, 0), 0), 67504401), 4, ite(eq(bvadd(1, bvmul(4, 0), 0), 262276), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 5), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 262277), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 100728850), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 100728849), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 1), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 262279), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 0), 2, ite(eq(bvadd(1, bvmul(4, 0), 0), 262278), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 3), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 100728848), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 4), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 2), 0, 128)))))))))))))), ite(eq(bvadd(bvmul(4, 0), 0), 67504401), 4, ite(eq(bvadd(bvmul(4, 0), 0), 262276), 0, ite(eq(bvadd(bvmul(4, 0), 0), 5), 0, ite(eq(bvadd(bvmul(4, 0), 0), 262277), 0, ite(eq(bvadd(bvmul(4, 0), 0), 100728850), 0, ite(eq(bvadd(bvmul(4, 0), 0), 100728849), 0, ite(eq(bvadd(bvmul(4, 0), 0), 1), 0, ite(eq(bvadd(bvmul(4, 0), 0), 262279), 0, ite(eq(bvadd(bvmul(4, 0), 0), 0), 2, ite(eq(bvadd(bvmul(4, 0), 0), 262278), 0, ite(eq(bvadd(bvmul(4, 0), 0), 3), 0, ite(eq(bvadd(bvmul(4, 0), 0), 100728848), 0, ite(eq(bvadd(bvmul(4, 0), 0), 4), 0, ite(eq(bvadd(bvmul(4, 0), 0), 2), 0, 128)))))))))))))));sum[172841](ite(ite(and(eq(ite(and(bvule(0, 0), bvule(0, 2155873407)), 0, ite(and(bvule(2155873408, 0), bvule(0, 2155873408)), 2155873408, ite(and(bvule(2155873409, 0), bvule(0, 4294967295)), 2155873409, 2155873409))), 0), eq(ite(and(bvule(0, 0), bvule(0, 2147483647)), 0, ite(and(bvule(2147483649, 0), bvule(0, 4294967295)), 2147483649, ite(and(bvule(2147483648, 0), bvule(0, 2147483648)), 2147483648, 2147483648))), 0)), true, false), 1, 0), unit, ite[172840](and(eq(0, 0), eq(0, 0)), 0, bvconcat[172839](ite[172735](eq[172708](bvadd[172707](3, bvmul(4, 0), 170461), 67504401), 4, ite[172734](eq[172709](bvadd[172707](3, bvmul(4, 0), 170461), 262276), 0, ite[172733](eq[172710](bvadd[172707](3, bvmul(4, 0), 170461), 5), 0, ite[172732](eq[172711](bvadd[172707](3, bvmul(4, 0), 170461), 262277), 0, ite[172731](eq[172712](bvadd[172707](3, bvmul(4, 0), 170461), 100728850), 0, ite[172730](eq[172713](bvadd[172707](3, bvmul(4, 0), 170461), 100728849), 0, ite[172729](eq[172714](bvadd[172707](3, bvmul(4, 0), 170461), 1), 0, ite[172728](eq[172715](bvadd[172707](3, bvmul(4, 0), 170461), 262279), 0, ite[172727](eq[172716](bvadd[172707](3, bvmul(4, 0), 170461), 0), 2, ite[172726](eq[172717](bvadd[172707](3, bvmul(4, 0), 170461), 262278), 0, ite[172725](eq[172718](bvadd[172707](3, bvmul(4, 0), 170461), 3), 0, ite[172724](eq[172719](bvadd[172707](3, bvmul(4, 0), 170461), 100728848), 0, ite[172723](eq[172720](bvadd[172707](3, bvmul(4, 0), 170461), 4), 0, ite[172722](eq[172721](bvadd[172707](3, bvmul(4, 0), 170461), 2), 0, 128)))))))))))))), ite[172780](eq[172737](bvadd[172736](2, bvmul(4, 0), 170461), 67504401), 4, ite[172779](eq[172738](bvadd[172736](2, bvmul(4, 0), 170461), 262276), 0, ite[172778](eq[172739](bvadd[172736](2, bvmul(4, 0), 170461), 5), 0, ite[172777](eq[172740](bvadd[172736](2, bvmul(4, 0), 170461), 262277), 0, ite[172776](eq[172741](bvadd[172736](2, bvmul(4, 0), 170461), 100728850), 0, ite[172774](eq[172742](bvadd[172736](2, bvmul(4, 0), 170461), 100728849), 0, ite[172772](eq[172743](bvadd[172736](2, bvmul(4, 0), 170461), 1), 0, ite[172771](eq[172744](bvadd[172736](2, bvmul(4, 0), 170461), 262279), 0, ite[172756](eq[172745](bvadd[172736](2, bvmul(4, 0), 170461), 0), 2, ite[172755](eq[172746](bvadd[172736](2, bvmul(4, 0), 170461), 262278), 0, ite[172754](eq[172747](bvadd[172736](2, bvmul(4, 0), 170461), 3), 0, ite[172753](eq[172748](bvadd[172736](2, bvmul(4, 0), 170461), 100728848), 0, ite[172752](eq[172749](bvadd[172736](2, bvmul(4, 0), 170461), 4), 0, ite[172751](eq[172750](bvadd[172736](2, bvmul(4, 0), 170461), 2), 0, 128)))))))))))))), ite[172809](eq[172782](bvadd[172781](1, bvmul(4, 0), 170461), 67504401), 4, ite[172808](eq[172783](bvadd[172781](1, bvmul(4, 0), 170461), 262276), 0, ite[172807](eq[172784](bvadd[172781](1, bvmul(4, 0), 170461), 5), 0, ite[172806](eq[172785](bvadd[172781](1, bvmul(4, 0), 170461), 262277), 0, ite[172805](eq[172786](bvadd[172781](1, bvmul(4, 0), 170461), 100728850), 0, ite[172804](eq[172787](bvadd[172781](1, bvmul(4, 0), 170461), 100728849), 0, ite[172803](eq[172788](bvadd[172781](1, bvmul(4, 0), 170461), 1), 0, ite[172802](eq[172789](bvadd[172781](1, bvmul(4, 0), 170461), 262279), 0, ite[172801](eq[172790](bvadd[172781](1, bvmul(4, 0), 170461), 0), 2, ite[172800](eq[172791](bvadd[172781](1, bvmul(4, 0), 170461), 262278), 0, ite[172799](eq[172792](bvadd[172781](1, bvmul(4, 0), 170461), 3), 0, ite[172798](eq[172793](bvadd[172781](1, bvmul(4, 0), 170461), 100728848), 0, ite[172797](eq[172794](bvadd[172781](1, bvmul(4, 0), 170461), 4), 0, ite[172796](eq[172795](bvadd[172781](1, bvmul(4, 0), 170461), 2), 0, 128)))))))))))))), ite[172838](eq[172811](bvadd[172810](bvmul(4, 0), 170461), 67504401), 4, ite[172837](eq[172812](bvadd[172810](bvmul(4, 0), 170461), 262276), 0, ite[172836](eq[172813](bvadd[172810](bvmul(4, 0), 170461), 5), 0, ite[172835](eq[172814](bvadd[172810](bvmul(4, 0), 170461), 262277), 0, ite[172834](eq[172815](bvadd[172810](bvmul(4, 0), 170461), 100728850), 0, ite[172833](eq[172816](bvadd[172810](bvmul(4, 0), 170461), 100728849), 0, ite[172832](eq[172817](bvadd[172810](bvmul(4, 0), 170461), 1), 0, ite[172831](eq[172818](bvadd[172810](bvmul(4, 0), 170461), 262279), 0, ite[172830](eq[172819](bvadd[172810](bvmul(4, 0), 170461), 0), 2, ite[172829](eq[172820](bvadd[172810](bvmul(4, 0), 170461), 262278), 0, ite[172828](eq[172821](bvadd[172810](bvmul(4, 0), 170461), 3), 0, ite[172827](eq[172822](bvadd[172810](bvmul(4, 0), 170461), 100728848), 0, ite[172826](eq[172823](bvadd[172810](bvmul(4, 0), 170461), 4), 0, ite[172825](eq[172824](bvadd[172810](bvmul(4, 0), 170461), 2), 0, 128))))))))))))))))) )
140305 : 0 { 0x0 +1.0e1025 } : INT                 : 0
170331 : sum_is(170300, 140305) : BOOL             : false
170332 : and(169491, 170331) : BOOL                : false
170345 : or(141221, 170332) : BOOL                 : false

ce =
=counter_example_begin z3v487.ce1556 817ac78cddd73e8cd62fb216e34bcb
=input.spec-%var-a-1
1 : Lambda41548Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2155873407 { 0x8080047f -2139093889 -1.13720e130 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2155873408 { 0x80800480 -2139093888 -1.13732e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda41549Var : BV:32
18 : Lambda41550Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2155873409 { 0x80800481 -2139093887 -1.13744e130 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda41551Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 67504401 { 0x4060911 +1.4715168e137 } : BV:32
62 : eq(60, 61) : BOOL
63 : 4 { 0x4 } : BV:8
64 : 262276 { 0x40084 +1.3126573e129 } : BV:32
65 : eq(60, 64) : BOOL
66 : 0 { 0x0 } : BV:8
67 : 5 { 0x5 +1.59e129 } : BV:32
68 : eq(60, 67) : BOOL
69 : 262277 { 0x40085 +1.3126585e129 } : BV:32
70 : eq(60, 69) : BOOL
71 : 100728850 { 0x6010012 +1.781464e141 } : BV:32
72 : eq(60, 71) : BOOL
73 : 100728849 { 0x6010011 +1.781452e141 } : BV:32
74 : eq(60, 73) : BOOL
75 : 1 { 0x1 +1.11e129 } : BV:32
76 : eq(60, 75) : BOOL
77 : 262279 { 0x40087 +1.3126609e129 } : BV:32
78 : eq(60, 77) : BOOL
79 : eq(60, 2) : BOOL
80 : 2 { 0x2 } : BV:8
81 : 262278 { 0x40086 +1.3126597e129 } : BV:32
82 : eq(60, 81) : BOOL
83 : eq(60, 56) : BOOL
84 : 100728848 { 0x6010010 +1.781440e141 } : BV:32
85 : eq(60, 84) : BOOL
86 : eq(60, 57) : BOOL
87 : 2 { 0x2 +1.23e129 } : BV:32
88 : eq(60, 87) : BOOL
89 : 128 { 0x80 -128 } : BV:8
90 : ite(88, 66, 89) : BV:8
91 : ite(86, 66, 90) : BV:8
92 : ite(85, 66, 91) : BV:8
93 : ite(83, 66, 92) : BV:8
94 : ite(82, 66, 93) : BV:8
95 : ite(79, 80, 94) : BV:8
96 : ite(78, 66, 95) : BV:8
97 : ite(76, 66, 96) : BV:8
98 : ite(74, 66, 97) : BV:8
99 : ite(72, 66, 98) : BV:8
100 : ite(70, 66, 99) : BV:8
101 : ite(68, 66, 100) : BV:8
102 : ite(65, 66, 101) : BV:8
103 : ite(62, 63, 102) : BV:8
104 : bvadd(87, 59, 2) : BV:32
105 : eq(104, 61) : BOOL
106 : eq(104, 64) : BOOL
107 : eq(104, 67) : BOOL
108 : eq(104, 69) : BOOL
109 : eq(104, 71) : BOOL
110 : eq(104, 73) : BOOL
111 : eq(104, 75) : BOOL
112 : eq(104, 77) : BOOL
113 : eq(104, 2) : BOOL
114 : eq(104, 81) : BOOL
115 : eq(104, 56) : BOOL
116 : eq(104, 84) : BOOL
117 : eq(104, 57) : BOOL
118 : eq(104, 87) : BOOL
119 : ite(118, 66, 89) : BV:8
120 : ite(117, 66, 119) : BV:8
121 : ite(116, 66, 120) : BV:8
122 : ite(115, 66, 121) : BV:8
123 : ite(114, 66, 122) : BV:8
124 : ite(113, 80, 123) : BV:8
125 : ite(112, 66, 124) : BV:8
126 : ite(111, 66, 125) : BV:8
127 : ite(110, 66, 126) : BV:8
128 : ite(109, 66, 127) : BV:8
129 : ite(108, 66, 128) : BV:8
130 : ite(107, 66, 129) : BV:8
131 : ite(106, 66, 130) : BV:8
132 : ite(105, 63, 131) : BV:8
133 : bvadd(75, 59, 2) : BV:32
134 : eq(133, 61) : BOOL
135 : eq(133, 64) : BOOL
136 : eq(133, 67) : BOOL
137 : eq(133, 69) : BOOL
138 : eq(133, 71) : BOOL
139 : eq(133, 73) : BOOL
140 : eq(133, 75) : BOOL
141 : eq(133, 77) : BOOL
142 : eq(133, 2) : BOOL
143 : eq(133, 81) : BOOL
144 : eq(133, 56) : BOOL
145 : eq(133, 84) : BOOL
146 : eq(133, 57) : BOOL
147 : eq(133, 87) : BOOL
148 : ite(147, 66, 89) : BV:8
149 : ite(146, 66, 148) : BV:8
150 : ite(145, 66, 149) : BV:8
151 : ite(144, 66, 150) : BV:8
152 : ite(143, 66, 151) : BV:8
153 : ite(142, 80, 152) : BV:8
154 : ite(141, 66, 153) : BV:8
155 : ite(140, 66, 154) : BV:8
156 : ite(139, 66, 155) : BV:8
157 : ite(138, 66, 156) : BV:8
158 : ite(137, 66, 157) : BV:8
159 : ite(136, 66, 158) : BV:8
160 : ite(135, 66, 159) : BV:8
161 : ite(134, 63, 160) : BV:8
162 : bvadd(59, 2) : BV:32
163 : eq(162, 61) : BOOL
164 : eq(162, 64) : BOOL
165 : eq(162, 67) : BOOL
166 : eq(162, 69) : BOOL
167 : eq(162, 71) : BOOL
168 : eq(162, 73) : BOOL
169 : eq(162, 75) : BOOL
170 : eq(162, 77) : BOOL
171 : eq(162, 2) : BOOL
172 : eq(162, 81) : BOOL
173 : eq(162, 56) : BOOL
174 : eq(162, 84) : BOOL
175 : eq(162, 57) : BOOL
176 : eq(162, 87) : BOOL
177 : ite(176, 66, 89) : BV:8
178 : ite(175, 66, 177) : BV:8
179 : ite(174, 66, 178) : BV:8
180 : ite(173, 66, 179) : BV:8
181 : ite(172, 66, 180) : BV:8
182 : ite(171, 80, 181) : BV:8
183 : ite(170, 66, 182) : BV:8
184 : ite(169, 66, 183) : BV:8
185 : ite(168, 66, 184) : BV:8
186 : ite(167, 66, 185) : BV:8
187 : ite(166, 66, 186) : BV:8
188 : ite(165, 66, 187) : BV:8
189 : ite(164, 66, 188) : BV:8
190 : ite(163, 63, 189) : BV:8
191 : bvconcat(103, 132, 161, 190) : BV:32
192 : bvadd(56, 58, 191) : BV:32
193 : eq(192, 61) : BOOL
194 : eq(192, 64) : BOOL
195 : eq(192, 67) : BOOL
196 : eq(192, 69) : BOOL
197 : eq(192, 71) : BOOL
198 : eq(192, 73) : BOOL
199 : eq(192, 75) : BOOL
200 : eq(192, 77) : BOOL
201 : eq(192, 2) : BOOL
202 : eq(192, 81) : BOOL
203 : eq(192, 56) : BOOL
204 : eq(192, 84) : BOOL
205 : eq(192, 57) : BOOL
206 : eq(192, 87) : BOOL
207 : ite(206, 66, 89) : BV:8
208 : ite(205, 66, 207) : BV:8
209 : ite(204, 66, 208) : BV:8
210 : ite(203, 66, 209) : BV:8
211 : ite(202, 66, 210) : BV:8
212 : ite(201, 80, 211) : BV:8
213 : ite(200, 66, 212) : BV:8
214 : ite(199, 66, 213) : BV:8
215 : ite(198, 66, 214) : BV:8
216 : ite(197, 66, 215) : BV:8
217 : ite(196, 66, 216) : BV:8
218 : ite(195, 66, 217) : BV:8
219 : ite(194, 66, 218) : BV:8
220 : ite(193, 63, 219) : BV:8
221 : bvadd(87, 58, 191) : BV:32
222 : eq(221, 61) : BOOL
223 : eq(221, 64) : BOOL
224 : eq(221, 67) : BOOL
225 : eq(221, 69) : BOOL
226 : eq(221, 71) : BOOL
227 : eq(221, 73) : BOOL
228 : eq(221, 75) : BOOL
229 : eq(221, 77) : BOOL
230 : eq(221, 2) : BOOL
231 : eq(221, 81) : BOOL
232 : eq(221, 56) : BOOL
233 : eq(221, 84) : BOOL
234 : eq(221, 57) : BOOL
235 : eq(221, 87) : BOOL
236 : ite(235, 66, 89) : BV:8
237 : ite(234, 66, 236) : BV:8
238 : ite(233, 66, 237) : BV:8
239 : ite(232, 66, 238) : BV:8
240 : ite(231, 66, 239) : BV:8
241 : ite(230, 80, 240) : BV:8
242 : ite(229, 66, 241) : BV:8
243 : ite(228, 66, 242) : BV:8
244 : ite(227, 66, 243) : BV:8
245 : ite(226, 66, 244) : BV:8
246 : ite(225, 66, 245) : BV:8
247 : ite(224, 66, 246) : BV:8
248 : ite(223, 66, 247) : BV:8
249 : ite(222, 63, 248) : BV:8
250 : bvadd(75, 58, 191) : BV:32
251 : eq(250, 61) : BOOL
252 : eq(250, 64) : BOOL
253 : eq(250, 67) : BOOL
254 : eq(250, 69) : BOOL
255 : eq(250, 71) : BOOL
256 : eq(250, 73) : BOOL
257 : eq(250, 75) : BOOL
258 : eq(250, 77) : BOOL
259 : eq(250, 2) : BOOL
260 : eq(250, 81) : BOOL
261 : eq(250, 56) : BOOL
262 : eq(250, 84) : BOOL
263 : eq(250, 57) : BOOL
264 : eq(250, 87) : BOOL
265 : ite(264, 66, 89) : BV:8
266 : ite(263, 66, 265) : BV:8
267 : ite(262, 66, 266) : BV:8
268 : ite(261, 66, 267) : BV:8
269 : ite(260, 66, 268) : BV:8
270 : ite(259, 80, 269) : BV:8
271 : ite(258, 66, 270) : BV:8
272 : ite(257, 66, 271) : BV:8
273 : ite(256, 66, 272) : BV:8
274 : ite(255, 66, 273) : BV:8
275 : ite(254, 66, 274) : BV:8
276 : ite(253, 66, 275) : BV:8
277 : ite(252, 66, 276) : BV:8
278 : ite(251, 63, 277) : BV:8
279 : bvadd(58, 191) : BV:32
280 : eq(279, 61) : BOOL
281 : eq(279, 64) : BOOL
282 : eq(279, 67) : BOOL
283 : eq(279, 69) : BOOL
284 : eq(279, 71) : BOOL
285 : eq(279, 73) : BOOL
286 : eq(279, 75) : BOOL
287 : eq(279, 77) : BOOL
288 : eq(279, 2) : BOOL
289 : eq(279, 81) : BOOL
290 : eq(279, 56) : BOOL
291 : eq(279, 84) : BOOL
292 : eq(279, 57) : BOOL
293 : eq(279, 87) : BOOL
294 : ite(293, 66, 89) : BV:8
295 : ite(292, 66, 294) : BV:8
296 : ite(291, 66, 295) : BV:8
297 : ite(290, 66, 296) : BV:8
298 : ite(289, 66, 297) : BV:8
299 : ite(288, 80, 298) : BV:8
300 : ite(287, 66, 299) : BV:8
301 : ite(286, 66, 300) : BV:8
302 : ite(285, 66, 301) : BV:8
303 : ite(284, 66, 302) : BV:8
304 : ite(283, 66, 303) : BV:8
305 : ite(282, 66, 304) : BV:8
306 : ite(281, 66, 305) : BV:8
307 : ite(280, 63, 306) : BV:8
308 : bvconcat(220, 249, 278, 307) : BV:32
309 : ite(55, 2, 308) : BV:32
310 : lambda(52, 309) : FUNCTION[BV:32 -> BV:32]
311 : map(51, 310) : MAP[BV:32 -> BV:32]
312 : lambda(17, 311) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
313 : map(16, 312) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
314 : sym_const(313) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-a-0.L3%7%bbentry
1 : Lambda41548Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2155873407 { 0x8080047f -2139093889 -1.13720e130 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2155873408 { 0x80800480 -2139093888 -1.13732e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda41549Var : BV:32
18 : Lambda41550Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2155873409 { 0x80800481 -2139093887 -1.13744e130 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda41551Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 67504401 { 0x4060911 +1.4715168e137 } : BV:32
62 : eq(60, 61) : BOOL
63 : 4 { 0x4 } : BV:8
64 : 262276 { 0x40084 +1.3126573e129 } : BV:32
65 : eq(60, 64) : BOOL
66 : 0 { 0x0 } : BV:8
67 : 5 { 0x5 +1.59e129 } : BV:32
68 : eq(60, 67) : BOOL
69 : 262277 { 0x40085 +1.3126585e129 } : BV:32
70 : eq(60, 69) : BOOL
71 : 100728850 { 0x6010012 +1.781464e141 } : BV:32
72 : eq(60, 71) : BOOL
73 : 100728849 { 0x6010011 +1.781452e141 } : BV:32
74 : eq(60, 73) : BOOL
75 : 1 { 0x1 +1.11e129 } : BV:32
76 : eq(60, 75) : BOOL
77 : 262279 { 0x40087 +1.3126609e129 } : BV:32
78 : eq(60, 77) : BOOL
79 : eq(60, 2) : BOOL
80 : 2 { 0x2 } : BV:8
81 : 262278 { 0x40086 +1.3126597e129 } : BV:32
82 : eq(60, 81) : BOOL
83 : eq(60, 56) : BOOL
84 : 100728848 { 0x6010010 +1.781440e141 } : BV:32
85 : eq(60, 84) : BOOL
86 : eq(60, 57) : BOOL
87 : 2 { 0x2 +1.23e129 } : BV:32
88 : eq(60, 87) : BOOL
89 : 128 { 0x80 -128 } : BV:8
90 : ite(88, 66, 89) : BV:8
91 : ite(86, 66, 90) : BV:8
92 : ite(85, 66, 91) : BV:8
93 : ite(83, 66, 92) : BV:8
94 : ite(82, 66, 93) : BV:8
95 : ite(79, 80, 94) : BV:8
96 : ite(78, 66, 95) : BV:8
97 : ite(76, 66, 96) : BV:8
98 : ite(74, 66, 97) : BV:8
99 : ite(72, 66, 98) : BV:8
100 : ite(70, 66, 99) : BV:8
101 : ite(68, 66, 100) : BV:8
102 : ite(65, 66, 101) : BV:8
103 : ite(62, 63, 102) : BV:8
104 : bvadd(87, 59, 2) : BV:32
105 : eq(104, 61) : BOOL
106 : eq(104, 64) : BOOL
107 : eq(104, 67) : BOOL
108 : eq(104, 69) : BOOL
109 : eq(104, 71) : BOOL
110 : eq(104, 73) : BOOL
111 : eq(104, 75) : BOOL
112 : eq(104, 77) : BOOL
113 : eq(104, 2) : BOOL
114 : eq(104, 81) : BOOL
115 : eq(104, 56) : BOOL
116 : eq(104, 84) : BOOL
117 : eq(104, 57) : BOOL
118 : eq(104, 87) : BOOL
119 : ite(118, 66, 89) : BV:8
120 : ite(117, 66, 119) : BV:8
121 : ite(116, 66, 120) : BV:8
122 : ite(115, 66, 121) : BV:8
123 : ite(114, 66, 122) : BV:8
124 : ite(113, 80, 123) : BV:8
125 : ite(112, 66, 124) : BV:8
126 : ite(111, 66, 125) : BV:8
127 : ite(110, 66, 126) : BV:8
128 : ite(109, 66, 127) : BV:8
129 : ite(108, 66, 128) : BV:8
130 : ite(107, 66, 129) : BV:8
131 : ite(106, 66, 130) : BV:8
132 : ite(105, 63, 131) : BV:8
133 : bvadd(75, 59, 2) : BV:32
134 : eq(133, 61) : BOOL
135 : eq(133, 64) : BOOL
136 : eq(133, 67) : BOOL
137 : eq(133, 69) : BOOL
138 : eq(133, 71) : BOOL
139 : eq(133, 73) : BOOL
140 : eq(133, 75) : BOOL
141 : eq(133, 77) : BOOL
142 : eq(133, 2) : BOOL
143 : eq(133, 81) : BOOL
144 : eq(133, 56) : BOOL
145 : eq(133, 84) : BOOL
146 : eq(133, 57) : BOOL
147 : eq(133, 87) : BOOL
148 : ite(147, 66, 89) : BV:8
149 : ite(146, 66, 148) : BV:8
150 : ite(145, 66, 149) : BV:8
151 : ite(144, 66, 150) : BV:8
152 : ite(143, 66, 151) : BV:8
153 : ite(142, 80, 152) : BV:8
154 : ite(141, 66, 153) : BV:8
155 : ite(140, 66, 154) : BV:8
156 : ite(139, 66, 155) : BV:8
157 : ite(138, 66, 156) : BV:8
158 : ite(137, 66, 157) : BV:8
159 : ite(136, 66, 158) : BV:8
160 : ite(135, 66, 159) : BV:8
161 : ite(134, 63, 160) : BV:8
162 : bvadd(59, 2) : BV:32
163 : eq(162, 61) : BOOL
164 : eq(162, 64) : BOOL
165 : eq(162, 67) : BOOL
166 : eq(162, 69) : BOOL
167 : eq(162, 71) : BOOL
168 : eq(162, 73) : BOOL
169 : eq(162, 75) : BOOL
170 : eq(162, 77) : BOOL
171 : eq(162, 2) : BOOL
172 : eq(162, 81) : BOOL
173 : eq(162, 56) : BOOL
174 : eq(162, 84) : BOOL
175 : eq(162, 57) : BOOL
176 : eq(162, 87) : BOOL
177 : ite(176, 66, 89) : BV:8
178 : ite(175, 66, 177) : BV:8
179 : ite(174, 66, 178) : BV:8
180 : ite(173, 66, 179) : BV:8
181 : ite(172, 66, 180) : BV:8
182 : ite(171, 80, 181) : BV:8
183 : ite(170, 66, 182) : BV:8
184 : ite(169, 66, 183) : BV:8
185 : ite(168, 66, 184) : BV:8
186 : ite(167, 66, 185) : BV:8
187 : ite(166, 66, 186) : BV:8
188 : ite(165, 66, 187) : BV:8
189 : ite(164, 66, 188) : BV:8
190 : ite(163, 63, 189) : BV:8
191 : bvconcat(103, 132, 161, 190) : BV:32
192 : bvadd(56, 58, 191) : BV:32
193 : eq(192, 61) : BOOL
194 : eq(192, 64) : BOOL
195 : eq(192, 67) : BOOL
196 : eq(192, 69) : BOOL
197 : eq(192, 71) : BOOL
198 : eq(192, 73) : BOOL
199 : eq(192, 75) : BOOL
200 : eq(192, 77) : BOOL
201 : eq(192, 2) : BOOL
202 : eq(192, 81) : BOOL
203 : eq(192, 56) : BOOL
204 : eq(192, 84) : BOOL
205 : eq(192, 57) : BOOL
206 : eq(192, 87) : BOOL
207 : ite(206, 66, 89) : BV:8
208 : ite(205, 66, 207) : BV:8
209 : ite(204, 66, 208) : BV:8
210 : ite(203, 66, 209) : BV:8
211 : ite(202, 66, 210) : BV:8
212 : ite(201, 80, 211) : BV:8
213 : ite(200, 66, 212) : BV:8
214 : ite(199, 66, 213) : BV:8
215 : ite(198, 66, 214) : BV:8
216 : ite(197, 66, 215) : BV:8
217 : ite(196, 66, 216) : BV:8
218 : ite(195, 66, 217) : BV:8
219 : ite(194, 66, 218) : BV:8
220 : ite(193, 63, 219) : BV:8
221 : bvadd(87, 58, 191) : BV:32
222 : eq(221, 61) : BOOL
223 : eq(221, 64) : BOOL
224 : eq(221, 67) : BOOL
225 : eq(221, 69) : BOOL
226 : eq(221, 71) : BOOL
227 : eq(221, 73) : BOOL
228 : eq(221, 75) : BOOL
229 : eq(221, 77) : BOOL
230 : eq(221, 2) : BOOL
231 : eq(221, 81) : BOOL
232 : eq(221, 56) : BOOL
233 : eq(221, 84) : BOOL
234 : eq(221, 57) : BOOL
235 : eq(221, 87) : BOOL
236 : ite(235, 66, 89) : BV:8
237 : ite(234, 66, 236) : BV:8
238 : ite(233, 66, 237) : BV:8
239 : ite(232, 66, 238) : BV:8
240 : ite(231, 66, 239) : BV:8
241 : ite(230, 80, 240) : BV:8
242 : ite(229, 66, 241) : BV:8
243 : ite(228, 66, 242) : BV:8
244 : ite(227, 66, 243) : BV:8
245 : ite(226, 66, 244) : BV:8
246 : ite(225, 66, 245) : BV:8
247 : ite(224, 66, 246) : BV:8
248 : ite(223, 66, 247) : BV:8
249 : ite(222, 63, 248) : BV:8
250 : bvadd(75, 58, 191) : BV:32
251 : eq(250, 61) : BOOL
252 : eq(250, 64) : BOOL
253 : eq(250, 67) : BOOL
254 : eq(250, 69) : BOOL
255 : eq(250, 71) : BOOL
256 : eq(250, 73) : BOOL
257 : eq(250, 75) : BOOL
258 : eq(250, 77) : BOOL
259 : eq(250, 2) : BOOL
260 : eq(250, 81) : BOOL
261 : eq(250, 56) : BOOL
262 : eq(250, 84) : BOOL
263 : eq(250, 57) : BOOL
264 : eq(250, 87) : BOOL
265 : ite(264, 66, 89) : BV:8
266 : ite(263, 66, 265) : BV:8
267 : ite(262, 66, 266) : BV:8
268 : ite(261, 66, 267) : BV:8
269 : ite(260, 66, 268) : BV:8
270 : ite(259, 80, 269) : BV:8
271 : ite(258, 66, 270) : BV:8
272 : ite(257, 66, 271) : BV:8
273 : ite(256, 66, 272) : BV:8
274 : ite(255, 66, 273) : BV:8
275 : ite(254, 66, 274) : BV:8
276 : ite(253, 66, 275) : BV:8
277 : ite(252, 66, 276) : BV:8
278 : ite(251, 63, 277) : BV:8
279 : bvadd(58, 191) : BV:32
280 : eq(279, 61) : BOOL
281 : eq(279, 64) : BOOL
282 : eq(279, 67) : BOOL
283 : eq(279, 69) : BOOL
284 : eq(279, 71) : BOOL
285 : eq(279, 73) : BOOL
286 : eq(279, 75) : BOOL
287 : eq(279, 77) : BOOL
288 : eq(279, 2) : BOOL
289 : eq(279, 81) : BOOL
290 : eq(279, 56) : BOOL
291 : eq(279, 84) : BOOL
292 : eq(279, 57) : BOOL
293 : eq(279, 87) : BOOL
294 : ite(293, 66, 89) : BV:8
295 : ite(292, 66, 294) : BV:8
296 : ite(291, 66, 295) : BV:8
297 : ite(290, 66, 296) : BV:8
298 : ite(289, 66, 297) : BV:8
299 : ite(288, 80, 298) : BV:8
300 : ite(287, 66, 299) : BV:8
301 : ite(286, 66, 300) : BV:8
302 : ite(285, 66, 301) : BV:8
303 : ite(284, 66, 302) : BV:8
304 : ite(283, 66, 303) : BV:8
305 : ite(282, 66, 304) : BV:8
306 : ite(281, 66, 305) : BV:8
307 : ite(280, 63, 306) : BV:8
308 : bvconcat(220, 249, 278, 307) : BV:32
309 : ite(55, 2, 308) : BV:32
310 : lambda(52, 309) : FUNCTION[BV:32 -> BV:32]
311 : map(51, 310) : MAP[BV:32 -> BV:32]
312 : lambda(17, 311) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
313 : map(16, 312) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
314 : sym_const(313) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 2, [ 1; 5 ] -> 0, [ 6; 262275 ] -> 128, [ 262276; 262279 ] -> 0, [ 262280; 67504400 ] -> 128, [ 67504401; 67504401 ] -> 4, [ 67504402; 100728847 ] -> 128, [ 100728848; 100728850 ] -> 0, [ 100728851; 4294967295 ] -> 128, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 262275 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 262276; 262279 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 262280; 67504399 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 67504400; 67504403 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 67504404; 100728847 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 100728848; 100728851 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 100728852; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%n
1 : 2155873408 { 0x80800480 -2139093888 -1.13732e130 } : BV:32
=input.dst.llvm-%m
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 759245119 { 0x2d41293f +1.50907123e219 } : COUNT
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 262276 { 0x40084 +1.3126573e129 } : BV:32
=input.dst.llvm-%arr
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 100728848 { 0x6010010 +1.781440e141 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 67504400 { 0x4060910 +1.4715156e137 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 759245119 { 0x2d41293f +1.50907123e219 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 262276 { 0x40084 +1.3126573e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 262279 { 0x40087 +1.3126609e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 100728848 { 0x6010010 +1.781440e141 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 100728851 { 0x6010013 +1.781476e141 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 67504400 { 0x4060910 +1.4715156e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 67504403 { 0x4060913 +1.4715192e137 } : BV:32
=input.spec-%var-a-1.0.1
1 : ([ 0; 2155873407 ] -> true, [ 2155873408; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-a-1.1.1.1.1
1 : Lambda41490Var : BV:32
2 : Lambda41491Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 67504401 { 0x4060911 +1.4715168e137 } : BV:32
13 : eq(11, 12) : BOOL
14 : 4 { 0x4 } : BV:8
15 : 262276 { 0x40084 +1.3126573e129 } : BV:32
16 : eq(11, 15) : BOOL
17 : 0 { 0x0 } : BV:8
18 : 5 { 0x5 +1.59e129 } : BV:32
19 : eq(11, 18) : BOOL
20 : 262277 { 0x40085 +1.3126585e129 } : BV:32
21 : eq(11, 20) : BOOL
22 : 100728850 { 0x6010012 +1.781464e141 } : BV:32
23 : eq(11, 22) : BOOL
24 : 100728849 { 0x6010011 +1.781452e141 } : BV:32
25 : eq(11, 24) : BOOL
26 : 1 { 0x1 +1.11e129 } : BV:32
27 : eq(11, 26) : BOOL
28 : 262279 { 0x40087 +1.3126609e129 } : BV:32
29 : eq(11, 28) : BOOL
30 : eq(11, 3) : BOOL
31 : 2 { 0x2 } : BV:8
32 : 262278 { 0x40086 +1.3126597e129 } : BV:32
33 : eq(11, 32) : BOOL
34 : eq(11, 7) : BOOL
35 : 100728848 { 0x6010010 +1.781440e141 } : BV:32
36 : eq(11, 35) : BOOL
37 : eq(11, 8) : BOOL
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : eq(11, 38) : BOOL
40 : 128 { 0x80 -128 } : BV:8
41 : ite(39, 17, 40) : BV:8
42 : ite(37, 17, 41) : BV:8
43 : ite(36, 17, 42) : BV:8
44 : ite(34, 17, 43) : BV:8
45 : ite(33, 17, 44) : BV:8
46 : ite(30, 31, 45) : BV:8
47 : ite(29, 17, 46) : BV:8
48 : ite(27, 17, 47) : BV:8
49 : ite(25, 17, 48) : BV:8
50 : ite(23, 17, 49) : BV:8
51 : ite(21, 17, 50) : BV:8
52 : ite(19, 17, 51) : BV:8
53 : ite(16, 17, 52) : BV:8
54 : ite(13, 14, 53) : BV:8
55 : bvadd(38, 10, 3) : BV:32
56 : eq(55, 12) : BOOL
57 : eq(55, 15) : BOOL
58 : eq(55, 18) : BOOL
59 : eq(55, 20) : BOOL
60 : eq(55, 22) : BOOL
61 : eq(55, 24) : BOOL
62 : eq(55, 26) : BOOL
63 : eq(55, 28) : BOOL
64 : eq(55, 3) : BOOL
65 : eq(55, 32) : BOOL
66 : eq(55, 7) : BOOL
67 : eq(55, 35) : BOOL
68 : eq(55, 8) : BOOL
69 : eq(55, 38) : BOOL
70 : ite(69, 17, 40) : BV:8
71 : ite(68, 17, 70) : BV:8
72 : ite(67, 17, 71) : BV:8
73 : ite(66, 17, 72) : BV:8
74 : ite(65, 17, 73) : BV:8
75 : ite(64, 31, 74) : BV:8
76 : ite(63, 17, 75) : BV:8
77 : ite(62, 17, 76) : BV:8
78 : ite(61, 17, 77) : BV:8
79 : ite(60, 17, 78) : BV:8
80 : ite(59, 17, 79) : BV:8
81 : ite(58, 17, 80) : BV:8
82 : ite(57, 17, 81) : BV:8
83 : ite(56, 14, 82) : BV:8
84 : bvadd(26, 10, 3) : BV:32
85 : eq(84, 12) : BOOL
86 : eq(84, 15) : BOOL
87 : eq(84, 18) : BOOL
88 : eq(84, 20) : BOOL
89 : eq(84, 22) : BOOL
90 : eq(84, 24) : BOOL
91 : eq(84, 26) : BOOL
92 : eq(84, 28) : BOOL
93 : eq(84, 3) : BOOL
94 : eq(84, 32) : BOOL
95 : eq(84, 7) : BOOL
96 : eq(84, 35) : BOOL
97 : eq(84, 8) : BOOL
98 : eq(84, 38) : BOOL
99 : ite(98, 17, 40) : BV:8
100 : ite(97, 17, 99) : BV:8
101 : ite(96, 17, 100) : BV:8
102 : ite(95, 17, 101) : BV:8
103 : ite(94, 17, 102) : BV:8
104 : ite(93, 31, 103) : BV:8
105 : ite(92, 17, 104) : BV:8
106 : ite(91, 17, 105) : BV:8
107 : ite(90, 17, 106) : BV:8
108 : ite(89, 17, 107) : BV:8
109 : ite(88, 17, 108) : BV:8
110 : ite(87, 17, 109) : BV:8
111 : ite(86, 17, 110) : BV:8
112 : ite(85, 14, 111) : BV:8
113 : bvadd(10, 3) : BV:32
114 : eq(113, 12) : BOOL
115 : eq(113, 15) : BOOL
116 : eq(113, 18) : BOOL
117 : eq(113, 20) : BOOL
118 : eq(113, 22) : BOOL
119 : eq(113, 24) : BOOL
120 : eq(113, 26) : BOOL
121 : eq(113, 28) : BOOL
122 : eq(113, 3) : BOOL
123 : eq(113, 32) : BOOL
124 : eq(113, 7) : BOOL
125 : eq(113, 35) : BOOL
126 : eq(113, 8) : BOOL
127 : eq(113, 38) : BOOL
128 : ite(127, 17, 40) : BV:8
129 : ite(126, 17, 128) : BV:8
130 : ite(125, 17, 129) : BV:8
131 : ite(124, 17, 130) : BV:8
132 : ite(123, 17, 131) : BV:8
133 : ite(122, 31, 132) : BV:8
134 : ite(121, 17, 133) : BV:8
135 : ite(120, 17, 134) : BV:8
136 : ite(119, 17, 135) : BV:8
137 : ite(118, 17, 136) : BV:8
138 : ite(117, 17, 137) : BV:8
139 : ite(116, 17, 138) : BV:8
140 : ite(115, 17, 139) : BV:8
141 : ite(114, 14, 140) : BV:8
142 : bvconcat(54, 83, 112, 141) : BV:32
143 : bvadd(7, 9, 142) : BV:32
144 : eq(143, 12) : BOOL
145 : eq(143, 15) : BOOL
146 : eq(143, 18) : BOOL
147 : eq(143, 20) : BOOL
148 : eq(143, 22) : BOOL
149 : eq(143, 24) : BOOL
150 : eq(143, 26) : BOOL
151 : eq(143, 28) : BOOL
152 : eq(143, 3) : BOOL
153 : eq(143, 32) : BOOL
154 : eq(143, 7) : BOOL
155 : eq(143, 35) : BOOL
156 : eq(143, 8) : BOOL
157 : eq(143, 38) : BOOL
158 : ite(157, 17, 40) : BV:8
159 : ite(156, 17, 158) : BV:8
160 : ite(155, 17, 159) : BV:8
161 : ite(154, 17, 160) : BV:8
162 : ite(153, 17, 161) : BV:8
163 : ite(152, 31, 162) : BV:8
164 : ite(151, 17, 163) : BV:8
165 : ite(150, 17, 164) : BV:8
166 : ite(149, 17, 165) : BV:8
167 : ite(148, 17, 166) : BV:8
168 : ite(147, 17, 167) : BV:8
169 : ite(146, 17, 168) : BV:8
170 : ite(145, 17, 169) : BV:8
171 : ite(144, 14, 170) : BV:8
172 : bvadd(38, 9, 142) : BV:32
173 : eq(172, 12) : BOOL
174 : eq(172, 15) : BOOL
175 : eq(172, 18) : BOOL
176 : eq(172, 20) : BOOL
177 : eq(172, 22) : BOOL
178 : eq(172, 24) : BOOL
179 : eq(172, 26) : BOOL
180 : eq(172, 28) : BOOL
181 : eq(172, 3) : BOOL
182 : eq(172, 32) : BOOL
183 : eq(172, 7) : BOOL
184 : eq(172, 35) : BOOL
185 : eq(172, 8) : BOOL
186 : eq(172, 38) : BOOL
187 : ite(186, 17, 40) : BV:8
188 : ite(185, 17, 187) : BV:8
189 : ite(184, 17, 188) : BV:8
190 : ite(183, 17, 189) : BV:8
191 : ite(182, 17, 190) : BV:8
192 : ite(181, 31, 191) : BV:8
193 : ite(180, 17, 192) : BV:8
194 : ite(179, 17, 193) : BV:8
195 : ite(178, 17, 194) : BV:8
196 : ite(177, 17, 195) : BV:8
197 : ite(176, 17, 196) : BV:8
198 : ite(175, 17, 197) : BV:8
199 : ite(174, 17, 198) : BV:8
200 : ite(173, 14, 199) : BV:8
201 : bvadd(26, 9, 142) : BV:32
202 : eq(201, 12) : BOOL
203 : eq(201, 15) : BOOL
204 : eq(201, 18) : BOOL
205 : eq(201, 20) : BOOL
206 : eq(201, 22) : BOOL
207 : eq(201, 24) : BOOL
208 : eq(201, 26) : BOOL
209 : eq(201, 28) : BOOL
210 : eq(201, 3) : BOOL
211 : eq(201, 32) : BOOL
212 : eq(201, 7) : BOOL
213 : eq(201, 35) : BOOL
214 : eq(201, 8) : BOOL
215 : eq(201, 38) : BOOL
216 : ite(215, 17, 40) : BV:8
217 : ite(214, 17, 216) : BV:8
218 : ite(213, 17, 217) : BV:8
219 : ite(212, 17, 218) : BV:8
220 : ite(211, 17, 219) : BV:8
221 : ite(210, 31, 220) : BV:8
222 : ite(209, 17, 221) : BV:8
223 : ite(208, 17, 222) : BV:8
224 : ite(207, 17, 223) : BV:8
225 : ite(206, 17, 224) : BV:8
226 : ite(205, 17, 225) : BV:8
227 : ite(204, 17, 226) : BV:8
228 : ite(203, 17, 227) : BV:8
229 : ite(202, 14, 228) : BV:8
230 : bvadd(9, 142) : BV:32
231 : eq(230, 12) : BOOL
232 : eq(230, 15) : BOOL
233 : eq(230, 18) : BOOL
234 : eq(230, 20) : BOOL
235 : eq(230, 22) : BOOL
236 : eq(230, 24) : BOOL
237 : eq(230, 26) : BOOL
238 : eq(230, 28) : BOOL
239 : eq(230, 3) : BOOL
240 : eq(230, 32) : BOOL
241 : eq(230, 7) : BOOL
242 : eq(230, 35) : BOOL
243 : eq(230, 8) : BOOL
244 : eq(230, 38) : BOOL
245 : ite(244, 17, 40) : BV:8
246 : ite(243, 17, 245) : BV:8
247 : ite(242, 17, 246) : BV:8
248 : ite(241, 17, 247) : BV:8
249 : ite(240, 17, 248) : BV:8
250 : ite(239, 31, 249) : BV:8
251 : ite(238, 17, 250) : BV:8
252 : ite(237, 17, 251) : BV:8
253 : ite(236, 17, 252) : BV:8
254 : ite(235, 17, 253) : BV:8
255 : ite(234, 17, 254) : BV:8
256 : ite(233, 17, 255) : BV:8
257 : ite(232, 17, 256) : BV:8
258 : ite(231, 14, 257) : BV:8
259 : bvconcat(171, 200, 229, 258) : BV:32
260 : ite(6, 3, 259) : BV:32
261 : lambda(1, 2, 260) : FUNCTION[BV:32,BV:32 -> BV:32]
262 : sym_const(261) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-a-0.L3%7%bbentry.1.1.1.1
1 : Lambda41492Var : BV:32
2 : Lambda41493Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 67504401 { 0x4060911 +1.4715168e137 } : BV:32
13 : eq(11, 12) : BOOL
14 : 4 { 0x4 } : BV:8
15 : 262276 { 0x40084 +1.3126573e129 } : BV:32
16 : eq(11, 15) : BOOL
17 : 0 { 0x0 } : BV:8
18 : 5 { 0x5 +1.59e129 } : BV:32
19 : eq(11, 18) : BOOL
20 : 262277 { 0x40085 +1.3126585e129 } : BV:32
21 : eq(11, 20) : BOOL
22 : 100728850 { 0x6010012 +1.781464e141 } : BV:32
23 : eq(11, 22) : BOOL
24 : 100728849 { 0x6010011 +1.781452e141 } : BV:32
25 : eq(11, 24) : BOOL
26 : 1 { 0x1 +1.11e129 } : BV:32
27 : eq(11, 26) : BOOL
28 : 262279 { 0x40087 +1.3126609e129 } : BV:32
29 : eq(11, 28) : BOOL
30 : eq(11, 3) : BOOL
31 : 2 { 0x2 } : BV:8
32 : 262278 { 0x40086 +1.3126597e129 } : BV:32
33 : eq(11, 32) : BOOL
34 : eq(11, 7) : BOOL
35 : 100728848 { 0x6010010 +1.781440e141 } : BV:32
36 : eq(11, 35) : BOOL
37 : eq(11, 8) : BOOL
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : eq(11, 38) : BOOL
40 : 128 { 0x80 -128 } : BV:8
41 : ite(39, 17, 40) : BV:8
42 : ite(37, 17, 41) : BV:8
43 : ite(36, 17, 42) : BV:8
44 : ite(34, 17, 43) : BV:8
45 : ite(33, 17, 44) : BV:8
46 : ite(30, 31, 45) : BV:8
47 : ite(29, 17, 46) : BV:8
48 : ite(27, 17, 47) : BV:8
49 : ite(25, 17, 48) : BV:8
50 : ite(23, 17, 49) : BV:8
51 : ite(21, 17, 50) : BV:8
52 : ite(19, 17, 51) : BV:8
53 : ite(16, 17, 52) : BV:8
54 : ite(13, 14, 53) : BV:8
55 : bvadd(38, 10, 3) : BV:32
56 : eq(55, 12) : BOOL
57 : eq(55, 15) : BOOL
58 : eq(55, 18) : BOOL
59 : eq(55, 20) : BOOL
60 : eq(55, 22) : BOOL
61 : eq(55, 24) : BOOL
62 : eq(55, 26) : BOOL
63 : eq(55, 28) : BOOL
64 : eq(55, 3) : BOOL
65 : eq(55, 32) : BOOL
66 : eq(55, 7) : BOOL
67 : eq(55, 35) : BOOL
68 : eq(55, 8) : BOOL
69 : eq(55, 38) : BOOL
70 : ite(69, 17, 40) : BV:8
71 : ite(68, 17, 70) : BV:8
72 : ite(67, 17, 71) : BV:8
73 : ite(66, 17, 72) : BV:8
74 : ite(65, 17, 73) : BV:8
75 : ite(64, 31, 74) : BV:8
76 : ite(63, 17, 75) : BV:8
77 : ite(62, 17, 76) : BV:8
78 : ite(61, 17, 77) : BV:8
79 : ite(60, 17, 78) : BV:8
80 : ite(59, 17, 79) : BV:8
81 : ite(58, 17, 80) : BV:8
82 : ite(57, 17, 81) : BV:8
83 : ite(56, 14, 82) : BV:8
84 : bvadd(26, 10, 3) : BV:32
85 : eq(84, 12) : BOOL
86 : eq(84, 15) : BOOL
87 : eq(84, 18) : BOOL
88 : eq(84, 20) : BOOL
89 : eq(84, 22) : BOOL
90 : eq(84, 24) : BOOL
91 : eq(84, 26) : BOOL
92 : eq(84, 28) : BOOL
93 : eq(84, 3) : BOOL
94 : eq(84, 32) : BOOL
95 : eq(84, 7) : BOOL
96 : eq(84, 35) : BOOL
97 : eq(84, 8) : BOOL
98 : eq(84, 38) : BOOL
99 : ite(98, 17, 40) : BV:8
100 : ite(97, 17, 99) : BV:8
101 : ite(96, 17, 100) : BV:8
102 : ite(95, 17, 101) : BV:8
103 : ite(94, 17, 102) : BV:8
104 : ite(93, 31, 103) : BV:8
105 : ite(92, 17, 104) : BV:8
106 : ite(91, 17, 105) : BV:8
107 : ite(90, 17, 106) : BV:8
108 : ite(89, 17, 107) : BV:8
109 : ite(88, 17, 108) : BV:8
110 : ite(87, 17, 109) : BV:8
111 : ite(86, 17, 110) : BV:8
112 : ite(85, 14, 111) : BV:8
113 : bvadd(10, 3) : BV:32
114 : eq(113, 12) : BOOL
115 : eq(113, 15) : BOOL
116 : eq(113, 18) : BOOL
117 : eq(113, 20) : BOOL
118 : eq(113, 22) : BOOL
119 : eq(113, 24) : BOOL
120 : eq(113, 26) : BOOL
121 : eq(113, 28) : BOOL
122 : eq(113, 3) : BOOL
123 : eq(113, 32) : BOOL
124 : eq(113, 7) : BOOL
125 : eq(113, 35) : BOOL
126 : eq(113, 8) : BOOL
127 : eq(113, 38) : BOOL
128 : ite(127, 17, 40) : BV:8
129 : ite(126, 17, 128) : BV:8
130 : ite(125, 17, 129) : BV:8
131 : ite(124, 17, 130) : BV:8
132 : ite(123, 17, 131) : BV:8
133 : ite(122, 31, 132) : BV:8
134 : ite(121, 17, 133) : BV:8
135 : ite(120, 17, 134) : BV:8
136 : ite(119, 17, 135) : BV:8
137 : ite(118, 17, 136) : BV:8
138 : ite(117, 17, 137) : BV:8
139 : ite(116, 17, 138) : BV:8
140 : ite(115, 17, 139) : BV:8
141 : ite(114, 14, 140) : BV:8
142 : bvconcat(54, 83, 112, 141) : BV:32
143 : bvadd(7, 9, 142) : BV:32
144 : eq(143, 12) : BOOL
145 : eq(143, 15) : BOOL
146 : eq(143, 18) : BOOL
147 : eq(143, 20) : BOOL
148 : eq(143, 22) : BOOL
149 : eq(143, 24) : BOOL
150 : eq(143, 26) : BOOL
151 : eq(143, 28) : BOOL
152 : eq(143, 3) : BOOL
153 : eq(143, 32) : BOOL
154 : eq(143, 7) : BOOL
155 : eq(143, 35) : BOOL
156 : eq(143, 8) : BOOL
157 : eq(143, 38) : BOOL
158 : ite(157, 17, 40) : BV:8
159 : ite(156, 17, 158) : BV:8
160 : ite(155, 17, 159) : BV:8
161 : ite(154, 17, 160) : BV:8
162 : ite(153, 17, 161) : BV:8
163 : ite(152, 31, 162) : BV:8
164 : ite(151, 17, 163) : BV:8
165 : ite(150, 17, 164) : BV:8
166 : ite(149, 17, 165) : BV:8
167 : ite(148, 17, 166) : BV:8
168 : ite(147, 17, 167) : BV:8
169 : ite(146, 17, 168) : BV:8
170 : ite(145, 17, 169) : BV:8
171 : ite(144, 14, 170) : BV:8
172 : bvadd(38, 9, 142) : BV:32
173 : eq(172, 12) : BOOL
174 : eq(172, 15) : BOOL
175 : eq(172, 18) : BOOL
176 : eq(172, 20) : BOOL
177 : eq(172, 22) : BOOL
178 : eq(172, 24) : BOOL
179 : eq(172, 26) : BOOL
180 : eq(172, 28) : BOOL
181 : eq(172, 3) : BOOL
182 : eq(172, 32) : BOOL
183 : eq(172, 7) : BOOL
184 : eq(172, 35) : BOOL
185 : eq(172, 8) : BOOL
186 : eq(172, 38) : BOOL
187 : ite(186, 17, 40) : BV:8
188 : ite(185, 17, 187) : BV:8
189 : ite(184, 17, 188) : BV:8
190 : ite(183, 17, 189) : BV:8
191 : ite(182, 17, 190) : BV:8
192 : ite(181, 31, 191) : BV:8
193 : ite(180, 17, 192) : BV:8
194 : ite(179, 17, 193) : BV:8
195 : ite(178, 17, 194) : BV:8
196 : ite(177, 17, 195) : BV:8
197 : ite(176, 17, 196) : BV:8
198 : ite(175, 17, 197) : BV:8
199 : ite(174, 17, 198) : BV:8
200 : ite(173, 14, 199) : BV:8
201 : bvadd(26, 9, 142) : BV:32
202 : eq(201, 12) : BOOL
203 : eq(201, 15) : BOOL
204 : eq(201, 18) : BOOL
205 : eq(201, 20) : BOOL
206 : eq(201, 22) : BOOL
207 : eq(201, 24) : BOOL
208 : eq(201, 26) : BOOL
209 : eq(201, 28) : BOOL
210 : eq(201, 3) : BOOL
211 : eq(201, 32) : BOOL
212 : eq(201, 7) : BOOL
213 : eq(201, 35) : BOOL
214 : eq(201, 8) : BOOL
215 : eq(201, 38) : BOOL
216 : ite(215, 17, 40) : BV:8
217 : ite(214, 17, 216) : BV:8
218 : ite(213, 17, 217) : BV:8
219 : ite(212, 17, 218) : BV:8
220 : ite(211, 17, 219) : BV:8
221 : ite(210, 31, 220) : BV:8
222 : ite(209, 17, 221) : BV:8
223 : ite(208, 17, 222) : BV:8
224 : ite(207, 17, 223) : BV:8
225 : ite(206, 17, 224) : BV:8
226 : ite(205, 17, 225) : BV:8
227 : ite(204, 17, 226) : BV:8
228 : ite(203, 17, 227) : BV:8
229 : ite(202, 14, 228) : BV:8
230 : bvadd(9, 142) : BV:32
231 : eq(230, 12) : BOOL
232 : eq(230, 15) : BOOL
233 : eq(230, 18) : BOOL
234 : eq(230, 20) : BOOL
235 : eq(230, 22) : BOOL
236 : eq(230, 24) : BOOL
237 : eq(230, 26) : BOOL
238 : eq(230, 28) : BOOL
239 : eq(230, 3) : BOOL
240 : eq(230, 32) : BOOL
241 : eq(230, 7) : BOOL
242 : eq(230, 35) : BOOL
243 : eq(230, 8) : BOOL
244 : eq(230, 38) : BOOL
245 : ite(244, 17, 40) : BV:8
246 : ite(243, 17, 245) : BV:8
247 : ite(242, 17, 246) : BV:8
248 : ite(241, 17, 247) : BV:8
249 : ite(240, 17, 248) : BV:8
250 : ite(239, 31, 249) : BV:8
251 : ite(238, 17, 250) : BV:8
252 : ite(237, 17, 251) : BV:8
253 : ite(236, 17, 252) : BV:8
254 : ite(235, 17, 253) : BV:8
255 : ite(234, 17, 254) : BV:8
256 : ite(233, 17, 255) : BV:8
257 : ite(232, 17, 256) : BV:8
258 : ite(231, 14, 257) : BV:8
259 : bvconcat(171, 200, 229, 258) : BV:32
260 : ite(6, 3, 259) : BV:32
261 : ite(6, 3, 260) : BV:32
262 : lambda(1, 2, 261) : FUNCTION[BV:32,BV:32 -> BV:32]
263 : sym_const(262) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-a-0.L3%7%bbentry.0.1
1 : ([ 0; 2155873407 ] -> true, [ 2155873408; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-a-0.L3%7%bbentry.1.1.0.1
1 : Lambda41495Var : BV:32
2 : Lambda41496Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2155873407 { 0x8080047f -2139093889 -1.13720e130 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2155873408 { 0x80800480 -2139093888 -1.13732e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2155873409 { 0x80800481 -2139093887 -1.13744e130 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 14) : BOOL
28 : and(26, 27) : BOOL
29 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-a-1.1.1.0.1
1 : Lambda41500Var : BV:32
2 : Lambda41501Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2155873407 { 0x8080047f -2139093889 -1.13720e130 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2155873408 { 0x80800480 -2139093888 -1.13732e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2155873409 { 0x80800481 -2139093887 -1.13744e130 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 14) : BOOL
28 : and(26, 27) : BOOL
29 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=counter_example.random_seed
1228899724
=counter_example_end


failcond-expr = or(not(bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)), and(sum_is(map_get(input.spec-%var-a-0.L3%7%bbentry, input.spec-%var-i-0.L3%7%bbentry), 1), sum_is(map_get(sum_get(map_get(input.spec-%var-a-0.L3%7%bbentry, input.spec-%var-i-0.L3%7%bbentry), 1), 0), 0))):
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
4 : not(3) : BOOL
5 : input.spec-%var-a-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
6 : input.spec-%var-i-0.L3%7%bbentry : BV:32
7 : map_get(5, 6) : SUM[UNIT,MAP[BV:32 -> BV:32]]
8 : 1 { 0x1 +1.0e1025 } : INT
9 : sum_is(7, 8) : BOOL
10 : sum_get(7, 8) : MAP[BV:32 -> BV:32]
11 : 0 { 0x0 +1.0e129 } : BV:32
12 : map_get(10, 11) : SUM[UNIT,BV:32]
13 : 0 { 0x0 +1.0e1025 } : INT
14 : sum_is(12, 13) : BOOL
15 : and(9, 14) : BOOL
16 : or(4, 15) : BOOL
</MSG>
<MSG>4:09 : foo.A1.B2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>4:09 : foo.A1.B2: Finished executing CG's add edge function...</MSG>
<MSG>4:09 : foo.A1.B2: Computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:09 : foo.A1.B2: Done computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:09 : Done adding new edge to the product-TFG foo.A1.B2 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%7%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>4:09 : Done adding a CG edge composition using the src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:09 : Failed correlation of src pathset L3%7%bbentry=>L3%7%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry: failcond = wfcond.from_pcL3%7%bbentry_Lfor.cond%1%bbentry.to_pcL3%7%bbentry_Lfor.cond1%1%bbentry-dst-edgecond-implies-src-edgecond
140743 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32 : 0
140422 : input.dst.llvm-%n : BV:32                 : 2155873408
140744 : bvult(140743, 140422) : BOOL              : true
141221 : not(140744) : BOOL                        : false
140655 : input.spec-%var-a-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]] : ( 164333 = bvconcat(ite(eq(bvadd(3, bvmul(4, Lambda41549Var), 0), 67504401), 4, ite(eq(bvadd(3, bvmul(4, Lambda41549Var), 0), 262276), 0, ite(eq(bvadd(3, bvmul(4, Lambda41549Var), 0), 5), 0, ite(eq(bvadd(3, bvmul(4, Lambda41549Var), 0), 262277), 0, ite(eq(bvadd(3, bvmul(4, Lambda41549Var), 0), 100728850), 0, ite(eq(bvadd(3, bvmul(4, Lambda41549Var), 0), 100728849), 0, ite(eq(bvadd(3, bvmul(4, Lambda41549Var), 0), 1), 0, ite(eq(bvadd(3, bvmul(4, Lambda41549Var), 0), 262279), 0, ite(eq(bvadd(3, bvmul(4, Lambda41549Var), 0), 0), 2, ite(eq(bvadd(3, bvmul(4, Lambda41549Var), 0), 262278), 0, ite(eq(bvadd(3, bvmul(4, Lambda41549Var), 0), 3), 0, ite(eq(bvadd(3, bvmul(4, Lambda41549Var), 0), 100728848), 0, ite(eq(bvadd(3, bvmul(4, Lambda41549Var), 0), 4), 0, ite(eq(bvadd(3, bvmul(4, Lambda41549Var), 0), 2), 0, 128)))))))))))))), ite(eq(bvadd(2, bvmul(4, Lambda41549Var), 0), 67504401), 4, ite(eq(bvadd(2, bvmul(4, Lambda41549Var), 0), 262276), 0, ite(eq(bvadd(2, bvmul(4, Lambda41549Var), 0), 5), 0, ite(eq(bvadd(2, bvmul(4, Lambda41549Var), 0), 262277), 0, ite(eq(bvadd(2, bvmul(4, Lambda41549Var), 0), 100728850), 0, ite(eq(bvadd(2, bvmul(4, Lambda41549Var), 0), 100728849), 0, ite(eq(bvadd(2, bvmul(4, Lambda41549Var), 0), 1), 0, ite(eq(bvadd(2, bvmul(4, Lambda41549Var), 0), 262279), 0, ite(eq(bvadd(2, bvmul(4, Lambda41549Var), 0), 0), 2, ite(eq(bvadd(2, bvmul(4, Lambda41549Var), 0), 262278), 0, ite(eq(bvadd(2, bvmul(4, Lambda41549Var), 0), 3), 0, ite(eq(bvadd(2, bvmul(4, Lambda41549Var), 0), 100728848), 0, ite(eq(bvadd(2, bvmul(4, Lambda41549Var), 0), 4), 0, ite(eq(bvadd(2, bvmul(4, Lambda41549Var), 0), 2), 0, 128)))))))))))))), ite(eq(bvadd(1, bvmul(4, Lambda41549Var), 0), 67504401), 4, ite(eq(bvadd(1, bvmul(4, Lambda41549Var), 0), 262276), 0, ite(eq(bvadd(1, bvmul(4, Lambda41549Var), 0), 5), 0, ite(eq(bvadd(1, bvmul(4, Lambda41549Var), 0), 262277), 0, ite(eq(bvadd(1, bvmul(4, Lambda41549Var), 0), 100728850), 0, ite(eq(bvadd(1, bvmul(4, Lambda41549Var), 0), 100728849), 0, ite(eq(bvadd(1, bvmul(4, Lambda41549Var), 0), 1), 0, ite(eq(bvadd(1, bvmul(4, Lambda41549Var), 0), 262279), 0, ite(eq(bvadd(1, bvmul(4, Lambda41549Var), 0), 0), 2, ite(eq(bvadd(1, bvmul(4, Lambda41549Var), 0), 262278), 0, ite(eq(bvadd(1, bvmul(4, Lambda41549Var), 0), 3), 0, ite(eq(bvadd(1, bvmul(4, Lambda41549Var), 0), 100728848), 0, ite(eq(bvadd(1, bvmul(4, Lambda41549Var), 0), 4), 0, ite(eq(bvadd(1, bvmul(4, Lambda41549Var), 0), 2), 0, 128)))))))))))))), ite(eq(bvadd(bvmul(4, Lambda41549Var), 0), 67504401), 4, ite(eq(bvadd(bvmul(4, Lambda41549Var), 0), 262276), 0, ite(eq(bvadd(bvmul(4, Lambda41549Var), 0), 5), 0, ite(eq(bvadd(bvmul(4, Lambda41549Var), 0), 262277), 0, ite(eq(bvadd(bvmul(4, Lambda41549Var), 0), 100728850), 0, ite(eq(bvadd(bvmul(4, Lambda41549Var), 0), 100728849), 0, ite(eq(bvadd(bvmul(4, Lambda41549Var), 0), 1), 0, ite(eq(bvadd(bvmul(4, Lambda41549Var), 0), 262279), 0, ite(eq(bvadd(bvmul(4, Lambda41549Var), 0), 0), 2, ite(eq(bvadd(bvmul(4, Lambda41549Var), 0), 262278), 0, ite(eq(bvadd(bvmul(4, Lambda41549Var), 0), 3), 0, ite(eq(bvadd(bvmul(4, Lambda41549Var), 0), 100728848), 0, ite(eq(bvadd(bvmul(4, Lambda41549Var), 0), 4), 0, ite(eq(bvadd(bvmul(4, Lambda41549Var), 0), 2), 0, 128)))))))))))))));map[163881](lambda(Lambda41548Var, ite(and(bvule(0, Lambda41548Var), bvule(Lambda41548Var, 2155873407)), true, ite(and(bvule(2155873408, Lambda41548Var), bvule(Lambda41548Var, 4294967295)), false, false))), lambda[163880](Lambda41549Var, map[163879](lambda(Lambda41550Var, ite(and(eq(ite(and(bvule(0, Lambda41549Var), bvule(Lambda41549Var, 2155873407)), 0, ite(and(bvule(2155873408, Lambda41549Var), bvule(Lambda41549Var, 2155873408)), 2155873408, ite(and(bvule(2155873409, Lambda41549Var), bvule(Lambda41549Var, 4294967295)), 2155873409, 2155873409))), 0), eq(ite(and(bvule(0, Lambda41550Var), bvule(Lambda41550Var, 2147483647)), 0, ite(and(bvule(2147483649, Lambda41550Var), bvule(Lambda41550Var, 4294967295)), 2147483649, ite(and(bvule(2147483648, Lambda41550Var), bvule(Lambda41550Var, 2147483648)), 2147483648, 2147483648))), 0)), true, false)), lambda[163878](Lambda41551Var, ite[164593](and(eq(Lambda41549Var, 0), eq(Lambda41551Var, 0)), 0, bvconcat[164592](ite[164504](eq[164456](bvadd[164455](3, bvmul(4, Lambda41551Var), 164333), 67504401), 4, ite[164503](eq[164457](bvadd[164455](3, bvmul(4, Lambda41551Var), 164333), 262276), 0, ite[164502](eq[164479](bvadd[164455](3, bvmul(4, Lambda41551Var), 164333), 5), 0, ite[164501](eq[164480](bvadd[164455](3, bvmul(4, Lambda41551Var), 164333), 262277), 0, ite[164500](eq[164481](bvadd[164455](3, bvmul(4, Lambda41551Var), 164333), 100728850), 0, ite[164499](eq[164482](bvadd[164455](3, bvmul(4, Lambda41551Var), 164333), 100728849), 0, ite[164498](eq[164483](bvadd[164455](3, bvmul(4, Lambda41551Var), 164333), 1), 0, ite[164497](eq[164484](bvadd[164455](3, bvmul(4, Lambda41551Var), 164333), 262279), 0, ite[164496](eq[164485](bvadd[164455](3, bvmul(4, Lambda41551Var), 164333), 0), 2, ite[164495](eq[164486](bvadd[164455](3, bvmul(4, Lambda41551Var), 164333), 262278), 0, ite[164494](eq[164487](bvadd[164455](3, bvmul(4, Lambda41551Var), 164333), 3), 0, ite[164493](eq[164488](bvadd[164455](3, bvmul(4, Lambda41551Var), 164333), 100728848), 0, ite[164492](eq[164489](bvadd[164455](3, bvmul(4, Lambda41551Var), 164333), 4), 0, ite[164491](eq[164490](bvadd[164455](3, bvmul(4, Lambda41551Var), 164333), 2), 0, 128)))))))))))))), ite[164533](eq[164506](bvadd[164505](2, bvmul(4, Lambda41551Var), 164333), 67504401), 4, ite[164532](eq[164507](bvadd[164505](2, bvmul(4, Lambda41551Var), 164333), 262276), 0, ite[164531](eq[164508](bvadd[164505](2, bvmul(4, Lambda41551Var), 164333), 5), 0, ite[164530](eq[164509](bvadd[164505](2, bvmul(4, Lambda41551Var), 164333), 262277), 0, ite[164529](eq[164510](bvadd[164505](2, bvmul(4, Lambda41551Var), 164333), 100728850), 0, ite[164528](eq[164511](bvadd[164505](2, bvmul(4, Lambda41551Var), 164333), 100728849), 0, ite[164527](eq[164512](bvadd[164505](2, bvmul(4, Lambda41551Var), 164333), 1), 0, ite[164526](eq[164513](bvadd[164505](2, bvmul(4, Lambda41551Var), 164333), 262279), 0, ite[164525](eq[164514](bvadd[164505](2, bvmul(4, Lambda41551Var), 164333), 0), 2, ite[164524](eq[164515](bvadd[164505](2, bvmul(4, Lambda41551Var), 164333), 262278), 0, ite[164523](eq[164516](bvadd[164505](2, bvmul(4, Lambda41551Var), 164333), 3), 0, ite[164522](eq[164517](bvadd[164505](2, bvmul(4, Lambda41551Var), 164333), 100728848), 0, ite[164521](eq[164518](bvadd[164505](2, bvmul(4, Lambda41551Var), 164333), 4), 0, ite[164520](eq[164519](bvadd[164505](2, bvmul(4, Lambda41551Var), 164333), 2), 0, 128)))))))))))))), ite[164562](eq[164535](bvadd[164534](1, bvmul(4, Lambda41551Var), 164333), 67504401), 4, ite[164561](eq[164536](bvadd[164534](1, bvmul(4, Lambda41551Var), 164333), 262276), 0, ite[164560](eq[164537](bvadd[164534](1, bvmul(4, Lambda41551Var), 164333), 5), 0, ite[164559](eq[164538](bvadd[164534](1, bvmul(4, Lambda41551Var), 164333), 262277), 0, ite[164558](eq[164539](bvadd[164534](1, bvmul(4, Lambda41551Var), 164333), 100728850), 0, ite[164557](eq[164540](bvadd[164534](1, bvmul(4, Lambda41551Var), 164333), 100728849), 0, ite[164556](eq[164541](bvadd[164534](1, bvmul(4, Lambda41551Var), 164333), 1), 0, ite[164555](eq[164542](bvadd[164534](1, bvmul(4, Lambda41551Var), 164333), 262279), 0, ite[164554](eq[164543](bvadd[164534](1, bvmul(4, Lambda41551Var), 164333), 0), 2, ite[164553](eq[164544](bvadd[164534](1, bvmul(4, Lambda41551Var), 164333), 262278), 0, ite[164552](eq[164545](bvadd[164534](1, bvmul(4, Lambda41551Var), 164333), 3), 0, ite[164551](eq[164546](bvadd[164534](1, bvmul(4, Lambda41551Var), 164333), 100728848), 0, ite[164550](eq[164547](bvadd[164534](1, bvmul(4, Lambda41551Var), 164333), 4), 0, ite[164549](eq[164548](bvadd[164534](1, bvmul(4, Lambda41551Var), 164333), 2), 0, 128)))))))))))))), ite[164591](eq[164564](bvadd[164563](bvmul(4, Lambda41551Var), 164333), 67504401), 4, ite[164590](eq[164565](bvadd[164563](bvmul(4, Lambda41551Var), 164333), 262276), 0, ite[164589](eq[164566](bvadd[164563](bvmul(4, Lambda41551Var), 164333), 5), 0, ite[164588](eq[164567](bvadd[164563](bvmul(4, Lambda41551Var), 164333), 262277), 0, ite[164587](eq[164568](bvadd[164563](bvmul(4, Lambda41551Var), 164333), 100728850), 0, ite[164586](eq[164569](bvadd[164563](bvmul(4, Lambda41551Var), 164333), 100728849), 0, ite[164585](eq[164570](bvadd[164563](bvmul(4, Lambda41551Var), 164333), 1), 0, ite[164584](eq[164571](bvadd[164563](bvmul(4, Lambda41551Var), 164333), 262279), 0, ite[164583](eq[164572](bvadd[164563](bvmul(4, Lambda41551Var), 164333), 0), 2, ite[164582](eq[164573](bvadd[164563](bvmul(4, Lambda41551Var), 164333), 262278), 0, ite[164581](eq[164574](bvadd[164563](bvmul(4, Lambda41551Var), 164333), 3), 0, ite[164580](eq[164575](bvadd[164563](bvmul(4, Lambda41551Var), 164333), 100728848), 0, ite[164579](eq[164576](bvadd[164563](bvmul(4, Lambda41551Var), 164333), 4), 0, ite[164578](eq[164577](bvadd[164563](bvmul(4, Lambda41551Var), 164333), 2), 0, 128)))))))))))))))))))) )
140656 : input.spec-%var-i-0.L3%7%bbentry : BV:32  : 0
140657 : map_get(140655, 140656) : SUM[UNIT,MAP[BV:32 -> BV:32]] : ( 170461 = bvconcat(ite(eq(bvadd(3, bvmul(4, 0), 0), 67504401), 4, ite(eq(bvadd(3, bvmul(4, 0), 0), 262276), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 5), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 262277), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 100728850), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 100728849), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 1), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 262279), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 0), 2, ite(eq(bvadd(3, bvmul(4, 0), 0), 262278), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 3), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 100728848), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 4), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 2), 0, 128)))))))))))))), ite(eq(bvadd(2, bvmul(4, 0), 0), 67504401), 4, ite(eq(bvadd(2, bvmul(4, 0), 0), 262276), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 5), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 262277), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 100728850), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 100728849), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 1), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 262279), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 0), 2, ite(eq(bvadd(2, bvmul(4, 0), 0), 262278), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 3), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 100728848), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 4), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 2), 0, 128)))))))))))))), ite(eq(bvadd(1, bvmul(4, 0), 0), 67504401), 4, ite(eq(bvadd(1, bvmul(4, 0), 0), 262276), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 5), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 262277), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 100728850), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 100728849), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 1), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 262279), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 0), 2, ite(eq(bvadd(1, bvmul(4, 0), 0), 262278), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 3), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 100728848), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 4), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 2), 0, 128)))))))))))))), ite(eq(bvadd(bvmul(4, 0), 0), 67504401), 4, ite(eq(bvadd(bvmul(4, 0), 0), 262276), 0, ite(eq(bvadd(bvmul(4, 0), 0), 5), 0, ite(eq(bvadd(bvmul(4, 0), 0), 262277), 0, ite(eq(bvadd(bvmul(4, 0), 0), 100728850), 0, ite(eq(bvadd(bvmul(4, 0), 0), 100728849), 0, ite(eq(bvadd(bvmul(4, 0), 0), 1), 0, ite(eq(bvadd(bvmul(4, 0), 0), 262279), 0, ite(eq(bvadd(bvmul(4, 0), 0), 0), 2, ite(eq(bvadd(bvmul(4, 0), 0), 262278), 0, ite(eq(bvadd(bvmul(4, 0), 0), 3), 0, ite(eq(bvadd(bvmul(4, 0), 0), 100728848), 0, ite(eq(bvadd(bvmul(4, 0), 0), 4), 0, ite(eq(bvadd(bvmul(4, 0), 0), 2), 0, 128)))))))))))))));sum[172265](ite(ite(and(bvule(0, 0), bvule(0, 2155873407)), true, ite(and(bvule(2155873408, 0), bvule(0, 4294967295)), false, false)), 1, 0), unit, map[172264](lambda(Lambda44446Var, ite(and(eq(ite(and(bvule(0, 0), bvule(0, 2155873407)), 0, ite(and(bvule(2155873408, 0), bvule(0, 2155873408)), 2155873408, ite(and(bvule(2155873409, 0), bvule(0, 4294967295)), 2155873409, 2155873409))), 0), eq(ite(and(bvule(0, Lambda44446Var), bvule(Lambda44446Var, 2147483647)), 0, ite(and(bvule(2147483649, Lambda44446Var), bvule(Lambda44446Var, 4294967295)), 2147483649, ite(and(bvule(2147483648, Lambda44446Var), bvule(Lambda44446Var, 2147483648)), 2147483648, 2147483648))), 0)), true, false)), lambda[172263](Lambda44447Var, ite[172262](and(eq(0, 0), eq(Lambda44447Var, 0)), 0, bvconcat[172261](ite[171036](eq[170993](bvadd[170992](3, bvmul(4, Lambda44447Var), 170461), 67504401), 4, ite[171035](eq[170994](bvadd[170992](3, bvmul(4, Lambda44447Var), 170461), 262276), 0, ite[171034](eq[170995](bvadd[170992](3, bvmul(4, Lambda44447Var), 170461), 5), 0, ite[171033](eq[170996](bvadd[170992](3, bvmul(4, Lambda44447Var), 170461), 262277), 0, ite[171032](eq[170997](bvadd[170992](3, bvmul(4, Lambda44447Var), 170461), 100728850), 0, ite[171031](eq[170998](bvadd[170992](3, bvmul(4, Lambda44447Var), 170461), 100728849), 0, ite[171030](eq[171009](bvadd[170992](3, bvmul(4, Lambda44447Var), 170461), 1), 0, ite[171028](eq[171010](bvadd[170992](3, bvmul(4, Lambda44447Var), 170461), 262279), 0, ite[171027](eq[171012](bvadd[170992](3, bvmul(4, Lambda44447Var), 170461), 0), 2, ite[171026](eq[171013](bvadd[170992](3, bvmul(4, Lambda44447Var), 170461), 262278), 0, ite[171025](eq[171014](bvadd[170992](3, bvmul(4, Lambda44447Var), 170461), 3), 0, ite[171024](eq[171015](bvadd[170992](3, bvmul(4, Lambda44447Var), 170461), 100728848), 0, ite[171023](eq[171016](bvadd[170992](3, bvmul(4, Lambda44447Var), 170461), 4), 0, ite[171019](eq[171017](bvadd[170992](3, bvmul(4, Lambda44447Var), 170461), 2), 0, 128)))))))))))))), ite[172201](eq[171038](bvadd[171037](2, bvmul(4, Lambda44447Var), 170461), 67504401), 4, ite[172200](eq[171039](bvadd[171037](2, bvmul(4, Lambda44447Var), 170461), 262276), 0, ite[172199](eq[171040](bvadd[171037](2, bvmul(4, Lambda44447Var), 170461), 5), 0, ite[172198](eq[171041](bvadd[171037](2, bvmul(4, Lambda44447Var), 170461), 262277), 0, ite[172197](eq[171042](bvadd[171037](2, bvmul(4, Lambda44447Var), 170461), 100728850), 0, ite[172196](eq[171043](bvadd[171037](2, bvmul(4, Lambda44447Var), 170461), 100728849), 0, ite[172195](eq[171044](bvadd[171037](2, bvmul(4, Lambda44447Var), 170461), 1), 0, ite[172194](eq[171045](bvadd[171037](2, bvmul(4, Lambda44447Var), 170461), 262279), 0, ite[172193](eq[171046](bvadd[171037](2, bvmul(4, Lambda44447Var), 170461), 0), 2, ite[172192](eq[171047](bvadd[171037](2, bvmul(4, Lambda44447Var), 170461), 262278), 0, ite[172191](eq[171048](bvadd[171037](2, bvmul(4, Lambda44447Var), 170461), 3), 0, ite[172190](eq[171049](bvadd[171037](2, bvmul(4, Lambda44447Var), 170461), 100728848), 0, ite[172189](eq[171050](bvadd[171037](2, bvmul(4, Lambda44447Var), 170461), 4), 0, ite[172188](eq[171051](bvadd[171037](2, bvmul(4, Lambda44447Var), 170461), 2), 0, 128)))))))))))))), ite[172231](eq[172203](bvadd[172202](1, bvmul(4, Lambda44447Var), 170461), 67504401), 4, ite[172230](eq[172204](bvadd[172202](1, bvmul(4, Lambda44447Var), 170461), 262276), 0, ite[172229](eq[172205](bvadd[172202](1, bvmul(4, Lambda44447Var), 170461), 5), 0, ite[172228](eq[172206](bvadd[172202](1, bvmul(4, Lambda44447Var), 170461), 262277), 0, ite[172226](eq[172207](bvadd[172202](1, bvmul(4, Lambda44447Var), 170461), 100728850), 0, ite[172225](eq[172208](bvadd[172202](1, bvmul(4, Lambda44447Var), 170461), 100728849), 0, ite[172224](eq[172209](bvadd[172202](1, bvmul(4, Lambda44447Var), 170461), 1), 0, ite[172223](eq[172210](bvadd[172202](1, bvmul(4, Lambda44447Var), 170461), 262279), 0, ite[172222](eq[172211](bvadd[172202](1, bvmul(4, Lambda44447Var), 170461), 0), 2, ite[172221](eq[172212](bvadd[172202](1, bvmul(4, Lambda44447Var), 170461), 262278), 0, ite[172220](eq[172213](bvadd[172202](1, bvmul(4, Lambda44447Var), 170461), 3), 0, ite[172219](eq[172214](bvadd[172202](1, bvmul(4, Lambda44447Var), 170461), 100728848), 0, ite[172218](eq[172215](bvadd[172202](1, bvmul(4, Lambda44447Var), 170461), 4), 0, ite[172217](eq[172216](bvadd[172202](1, bvmul(4, Lambda44447Var), 170461), 2), 0, 128)))))))))))))), ite[172260](eq[172233](bvadd[172232](bvmul(4, Lambda44447Var), 170461), 67504401), 4, ite[172259](eq[172234](bvadd[172232](bvmul(4, Lambda44447Var), 170461), 262276), 0, ite[172258](eq[172235](bvadd[172232](bvmul(4, Lambda44447Var), 170461), 5), 0, ite[172257](eq[172236](bvadd[172232](bvmul(4, Lambda44447Var), 170461), 262277), 0, ite[172256](eq[172237](bvadd[172232](bvmul(4, Lambda44447Var), 170461), 100728850), 0, ite[172255](eq[172238](bvadd[172232](bvmul(4, Lambda44447Var), 170461), 100728849), 0, ite[172254](eq[172239](bvadd[172232](bvmul(4, Lambda44447Var), 170461), 1), 0, ite[172253](eq[172240](bvadd[172232](bvmul(4, Lambda44447Var), 170461), 262279), 0, ite[172252](eq[172241](bvadd[172232](bvmul(4, Lambda44447Var), 170461), 0), 2, ite[172251](eq[172242](bvadd[172232](bvmul(4, Lambda44447Var), 170461), 262278), 0, ite[172250](eq[172243](bvadd[172232](bvmul(4, Lambda44447Var), 170461), 3), 0, ite[172249](eq[172244](bvadd[172232](bvmul(4, Lambda44447Var), 170461), 100728848), 0, ite[172248](eq[172245](bvadd[172232](bvmul(4, Lambda44447Var), 170461), 4), 0, ite[172247](eq[172246](bvadd[172232](bvmul(4, Lambda44447Var), 170461), 2), 0, 128))))))))))))))))))) )
140303 : 1 { 0x1 +1.0e1025 } : INT                 : 1
169491 : sum_is(140657, 140303) : BOOL             : true
170297 : sum_get(140657, 140303) : MAP[BV:32 -> BV:32] : ( 170461 = bvconcat(ite(eq(bvadd(3, bvmul(4, 0), 0), 67504401), 4, ite(eq(bvadd(3, bvmul(4, 0), 0), 262276), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 5), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 262277), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 100728850), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 100728849), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 1), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 262279), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 0), 2, ite(eq(bvadd(3, bvmul(4, 0), 0), 262278), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 3), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 100728848), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 4), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 2), 0, 128)))))))))))))), ite(eq(bvadd(2, bvmul(4, 0), 0), 67504401), 4, ite(eq(bvadd(2, bvmul(4, 0), 0), 262276), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 5), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 262277), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 100728850), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 100728849), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 1), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 262279), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 0), 2, ite(eq(bvadd(2, bvmul(4, 0), 0), 262278), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 3), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 100728848), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 4), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 2), 0, 128)))))))))))))), ite(eq(bvadd(1, bvmul(4, 0), 0), 67504401), 4, ite(eq(bvadd(1, bvmul(4, 0), 0), 262276), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 5), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 262277), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 100728850), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 100728849), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 1), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 262279), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 0), 2, ite(eq(bvadd(1, bvmul(4, 0), 0), 262278), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 3), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 100728848), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 4), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 2), 0, 128)))))))))))))), ite(eq(bvadd(bvmul(4, 0), 0), 67504401), 4, ite(eq(bvadd(bvmul(4, 0), 0), 262276), 0, ite(eq(bvadd(bvmul(4, 0), 0), 5), 0, ite(eq(bvadd(bvmul(4, 0), 0), 262277), 0, ite(eq(bvadd(bvmul(4, 0), 0), 100728850), 0, ite(eq(bvadd(bvmul(4, 0), 0), 100728849), 0, ite(eq(bvadd(bvmul(4, 0), 0), 1), 0, ite(eq(bvadd(bvmul(4, 0), 0), 262279), 0, ite(eq(bvadd(bvmul(4, 0), 0), 0), 2, ite(eq(bvadd(bvmul(4, 0), 0), 262278), 0, ite(eq(bvadd(bvmul(4, 0), 0), 3), 0, ite(eq(bvadd(bvmul(4, 0), 0), 100728848), 0, ite(eq(bvadd(bvmul(4, 0), 0), 4), 0, ite(eq(bvadd(bvmul(4, 0), 0), 2), 0, 128)))))))))))))));map[172562](lambda(Lambda44484Var, ite(and(eq(ite(and(bvule(0, 0), bvule(0, 2155873407)), 0, ite(and(bvule(2155873408, 0), bvule(0, 2155873408)), 2155873408, ite(and(bvule(2155873409, 0), bvule(0, 4294967295)), 2155873409, 2155873409))), 0), eq(ite(and(bvule(0, Lambda44484Var), bvule(Lambda44484Var, 2147483647)), 0, ite(and(bvule(2147483649, Lambda44484Var), bvule(Lambda44484Var, 4294967295)), 2147483649, ite(and(bvule(2147483648, Lambda44484Var), bvule(Lambda44484Var, 2147483648)), 2147483648, 2147483648))), 0)), true, false)), lambda[172561](Lambda44485Var, ite[172559](and(eq(0, 0), eq(Lambda44485Var, 0)), 0, bvconcat[172558](ite[172453](eq[172425](bvadd[172424](3, bvmul(4, Lambda44485Var), 170461), 67504401), 4, ite[172452](eq[172426](bvadd[172424](3, bvmul(4, Lambda44485Var), 170461), 262276), 0, ite[172451](eq[172427](bvadd[172424](3, bvmul(4, Lambda44485Var), 170461), 5), 0, ite[172450](eq[172428](bvadd[172424](3, bvmul(4, Lambda44485Var), 170461), 262277), 0, ite[172449](eq[172429](bvadd[172424](3, bvmul(4, Lambda44485Var), 170461), 100728850), 0, ite[172448](eq[172430](bvadd[172424](3, bvmul(4, Lambda44485Var), 170461), 100728849), 0, ite[172447](eq[172431](bvadd[172424](3, bvmul(4, Lambda44485Var), 170461), 1), 0, ite[172446](eq[172432](bvadd[172424](3, bvmul(4, Lambda44485Var), 170461), 262279), 0, ite[172445](eq[172433](bvadd[172424](3, bvmul(4, Lambda44485Var), 170461), 0), 2, ite[172444](eq[172434](bvadd[172424](3, bvmul(4, Lambda44485Var), 170461), 262278), 0, ite[172443](eq[172435](bvadd[172424](3, bvmul(4, Lambda44485Var), 170461), 3), 0, ite[172441](eq[172436](bvadd[172424](3, bvmul(4, Lambda44485Var), 170461), 100728848), 0, ite[172440](eq[172437](bvadd[172424](3, bvmul(4, Lambda44485Var), 170461), 4), 0, ite[172439](eq[172438](bvadd[172424](3, bvmul(4, Lambda44485Var), 170461), 2), 0, 128)))))))))))))), ite[172498](eq[172455](bvadd[172454](2, bvmul(4, Lambda44485Var), 170461), 67504401), 4, ite[172497](eq[172456](bvadd[172454](2, bvmul(4, Lambda44485Var), 170461), 262276), 0, ite[172496](eq[172457](bvadd[172454](2, bvmul(4, Lambda44485Var), 170461), 5), 0, ite[172495](eq[172458](bvadd[172454](2, bvmul(4, Lambda44485Var), 170461), 262277), 0, ite[172494](eq[172459](bvadd[172454](2, bvmul(4, Lambda44485Var), 170461), 100728850), 0, ite[172493](eq[172460](bvadd[172454](2, bvmul(4, Lambda44485Var), 170461), 100728849), 0, ite[172492](eq[172461](bvadd[172454](2, bvmul(4, Lambda44485Var), 170461), 1), 0, ite[172491](eq[172462](bvadd[172454](2, bvmul(4, Lambda44485Var), 170461), 262279), 0, ite[172490](eq[172463](bvadd[172454](2, bvmul(4, Lambda44485Var), 170461), 0), 2, ite[172488](eq[172464](bvadd[172454](2, bvmul(4, Lambda44485Var), 170461), 262278), 0, ite[172486](eq[172465](bvadd[172454](2, bvmul(4, Lambda44485Var), 170461), 3), 0, ite[172485](eq[172466](bvadd[172454](2, bvmul(4, Lambda44485Var), 170461), 100728848), 0, ite[172470](eq[172467](bvadd[172454](2, bvmul(4, Lambda44485Var), 170461), 4), 0, ite[172469](eq[172468](bvadd[172454](2, bvmul(4, Lambda44485Var), 170461), 2), 0, 128)))))))))))))), ite[172527](eq[172500](bvadd[172499](1, bvmul(4, Lambda44485Var), 170461), 67504401), 4, ite[172526](eq[172501](bvadd[172499](1, bvmul(4, Lambda44485Var), 170461), 262276), 0, ite[172525](eq[172502](bvadd[172499](1, bvmul(4, Lambda44485Var), 170461), 5), 0, ite[172524](eq[172503](bvadd[172499](1, bvmul(4, Lambda44485Var), 170461), 262277), 0, ite[172523](eq[172504](bvadd[172499](1, bvmul(4, Lambda44485Var), 170461), 100728850), 0, ite[172522](eq[172505](bvadd[172499](1, bvmul(4, Lambda44485Var), 170461), 100728849), 0, ite[172521](eq[172506](bvadd[172499](1, bvmul(4, Lambda44485Var), 170461), 1), 0, ite[172520](eq[172507](bvadd[172499](1, bvmul(4, Lambda44485Var), 170461), 262279), 0, ite[172519](eq[172508](bvadd[172499](1, bvmul(4, Lambda44485Var), 170461), 0), 2, ite[172518](eq[172509](bvadd[172499](1, bvmul(4, Lambda44485Var), 170461), 262278), 0, ite[172517](eq[172510](bvadd[172499](1, bvmul(4, Lambda44485Var), 170461), 3), 0, ite[172516](eq[172511](bvadd[172499](1, bvmul(4, Lambda44485Var), 170461), 100728848), 0, ite[172515](eq[172512](bvadd[172499](1, bvmul(4, Lambda44485Var), 170461), 4), 0, ite[172514](eq[172513](bvadd[172499](1, bvmul(4, Lambda44485Var), 170461), 2), 0, 128)))))))))))))), ite[172556](eq[172529](bvadd[172528](bvmul(4, Lambda44485Var), 170461), 67504401), 4, ite[172555](eq[172530](bvadd[172528](bvmul(4, Lambda44485Var), 170461), 262276), 0, ite[172554](eq[172531](bvadd[172528](bvmul(4, Lambda44485Var), 170461), 5), 0, ite[172553](eq[172532](bvadd[172528](bvmul(4, Lambda44485Var), 170461), 262277), 0, ite[172552](eq[172533](bvadd[172528](bvmul(4, Lambda44485Var), 170461), 100728850), 0, ite[172551](eq[172534](bvadd[172528](bvmul(4, Lambda44485Var), 170461), 100728849), 0, ite[172550](eq[172535](bvadd[172528](bvmul(4, Lambda44485Var), 170461), 1), 0, ite[172549](eq[172536](bvadd[172528](bvmul(4, Lambda44485Var), 170461), 262279), 0, ite[172548](eq[172537](bvadd[172528](bvmul(4, Lambda44485Var), 170461), 0), 2, ite[172547](eq[172538](bvadd[172528](bvmul(4, Lambda44485Var), 170461), 262278), 0, ite[172546](eq[172539](bvadd[172528](bvmul(4, Lambda44485Var), 170461), 3), 0, ite[172545](eq[172540](bvadd[172528](bvmul(4, Lambda44485Var), 170461), 100728848), 0, ite[172544](eq[172541](bvadd[172528](bvmul(4, Lambda44485Var), 170461), 4), 0, ite[172543](eq[172542](bvadd[172528](bvmul(4, Lambda44485Var), 170461), 2), 0, 128)))))))))))))))))) )
140286 : 0 { 0x0 +1.0e129 } : BV:32                : 0
170300 : map_get(170297, 140286) : SUM[UNIT,BV:32] : ( 170461 = bvconcat(ite(eq(bvadd(3, bvmul(4, 0), 0), 67504401), 4, ite(eq(bvadd(3, bvmul(4, 0), 0), 262276), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 5), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 262277), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 100728850), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 100728849), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 1), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 262279), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 0), 2, ite(eq(bvadd(3, bvmul(4, 0), 0), 262278), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 3), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 100728848), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 4), 0, ite(eq(bvadd(3, bvmul(4, 0), 0), 2), 0, 128)))))))))))))), ite(eq(bvadd(2, bvmul(4, 0), 0), 67504401), 4, ite(eq(bvadd(2, bvmul(4, 0), 0), 262276), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 5), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 262277), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 100728850), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 100728849), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 1), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 262279), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 0), 2, ite(eq(bvadd(2, bvmul(4, 0), 0), 262278), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 3), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 100728848), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 4), 0, ite(eq(bvadd(2, bvmul(4, 0), 0), 2), 0, 128)))))))))))))), ite(eq(bvadd(1, bvmul(4, 0), 0), 67504401), 4, ite(eq(bvadd(1, bvmul(4, 0), 0), 262276), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 5), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 262277), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 100728850), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 100728849), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 1), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 262279), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 0), 2, ite(eq(bvadd(1, bvmul(4, 0), 0), 262278), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 3), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 100728848), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 4), 0, ite(eq(bvadd(1, bvmul(4, 0), 0), 2), 0, 128)))))))))))))), ite(eq(bvadd(bvmul(4, 0), 0), 67504401), 4, ite(eq(bvadd(bvmul(4, 0), 0), 262276), 0, ite(eq(bvadd(bvmul(4, 0), 0), 5), 0, ite(eq(bvadd(bvmul(4, 0), 0), 262277), 0, ite(eq(bvadd(bvmul(4, 0), 0), 100728850), 0, ite(eq(bvadd(bvmul(4, 0), 0), 100728849), 0, ite(eq(bvadd(bvmul(4, 0), 0), 1), 0, ite(eq(bvadd(bvmul(4, 0), 0), 262279), 0, ite(eq(bvadd(bvmul(4, 0), 0), 0), 2, ite(eq(bvadd(bvmul(4, 0), 0), 262278), 0, ite(eq(bvadd(bvmul(4, 0), 0), 3), 0, ite(eq(bvadd(bvmul(4, 0), 0), 100728848), 0, ite(eq(bvadd(bvmul(4, 0), 0), 4), 0, ite(eq(bvadd(bvmul(4, 0), 0), 2), 0, 128)))))))))))))));sum[172841](ite(ite(and(eq(ite(and(bvule(0, 0), bvule(0, 2155873407)), 0, ite(and(bvule(2155873408, 0), bvule(0, 2155873408)), 2155873408, ite(and(bvule(2155873409, 0), bvule(0, 4294967295)), 2155873409, 2155873409))), 0), eq(ite(and(bvule(0, 0), bvule(0, 2147483647)), 0, ite(and(bvule(2147483649, 0), bvule(0, 4294967295)), 2147483649, ite(and(bvule(2147483648, 0), bvule(0, 2147483648)), 2147483648, 2147483648))), 0)), true, false), 1, 0), unit, ite[172840](and(eq(0, 0), eq(0, 0)), 0, bvconcat[172839](ite[172735](eq[172708](bvadd[172707](3, bvmul(4, 0), 170461), 67504401), 4, ite[172734](eq[172709](bvadd[172707](3, bvmul(4, 0), 170461), 262276), 0, ite[172733](eq[172710](bvadd[172707](3, bvmul(4, 0), 170461), 5), 0, ite[172732](eq[172711](bvadd[172707](3, bvmul(4, 0), 170461), 262277), 0, ite[172731](eq[172712](bvadd[172707](3, bvmul(4, 0), 170461), 100728850), 0, ite[172730](eq[172713](bvadd[172707](3, bvmul(4, 0), 170461), 100728849), 0, ite[172729](eq[172714](bvadd[172707](3, bvmul(4, 0), 170461), 1), 0, ite[172728](eq[172715](bvadd[172707](3, bvmul(4, 0), 170461), 262279), 0, ite[172727](eq[172716](bvadd[172707](3, bvmul(4, 0), 170461), 0), 2, ite[172726](eq[172717](bvadd[172707](3, bvmul(4, 0), 170461), 262278), 0, ite[172725](eq[172718](bvadd[172707](3, bvmul(4, 0), 170461), 3), 0, ite[172724](eq[172719](bvadd[172707](3, bvmul(4, 0), 170461), 100728848), 0, ite[172723](eq[172720](bvadd[172707](3, bvmul(4, 0), 170461), 4), 0, ite[172722](eq[172721](bvadd[172707](3, bvmul(4, 0), 170461), 2), 0, 128)))))))))))))), ite[172780](eq[172737](bvadd[172736](2, bvmul(4, 0), 170461), 67504401), 4, ite[172779](eq[172738](bvadd[172736](2, bvmul(4, 0), 170461), 262276), 0, ite[172778](eq[172739](bvadd[172736](2, bvmul(4, 0), 170461), 5), 0, ite[172777](eq[172740](bvadd[172736](2, bvmul(4, 0), 170461), 262277), 0, ite[172776](eq[172741](bvadd[172736](2, bvmul(4, 0), 170461), 100728850), 0, ite[172774](eq[172742](bvadd[172736](2, bvmul(4, 0), 170461), 100728849), 0, ite[172772](eq[172743](bvadd[172736](2, bvmul(4, 0), 170461), 1), 0, ite[172771](eq[172744](bvadd[172736](2, bvmul(4, 0), 170461), 262279), 0, ite[172756](eq[172745](bvadd[172736](2, bvmul(4, 0), 170461), 0), 2, ite[172755](eq[172746](bvadd[172736](2, bvmul(4, 0), 170461), 262278), 0, ite[172754](eq[172747](bvadd[172736](2, bvmul(4, 0), 170461), 3), 0, ite[172753](eq[172748](bvadd[172736](2, bvmul(4, 0), 170461), 100728848), 0, ite[172752](eq[172749](bvadd[172736](2, bvmul(4, 0), 170461), 4), 0, ite[172751](eq[172750](bvadd[172736](2, bvmul(4, 0), 170461), 2), 0, 128)))))))))))))), ite[172809](eq[172782](bvadd[172781](1, bvmul(4, 0), 170461), 67504401), 4, ite[172808](eq[172783](bvadd[172781](1, bvmul(4, 0), 170461), 262276), 0, ite[172807](eq[172784](bvadd[172781](1, bvmul(4, 0), 170461), 5), 0, ite[172806](eq[172785](bvadd[172781](1, bvmul(4, 0), 170461), 262277), 0, ite[172805](eq[172786](bvadd[172781](1, bvmul(4, 0), 170461), 100728850), 0, ite[172804](eq[172787](bvadd[172781](1, bvmul(4, 0), 170461), 100728849), 0, ite[172803](eq[172788](bvadd[172781](1, bvmul(4, 0), 170461), 1), 0, ite[172802](eq[172789](bvadd[172781](1, bvmul(4, 0), 170461), 262279), 0, ite[172801](eq[172790](bvadd[172781](1, bvmul(4, 0), 170461), 0), 2, ite[172800](eq[172791](bvadd[172781](1, bvmul(4, 0), 170461), 262278), 0, ite[172799](eq[172792](bvadd[172781](1, bvmul(4, 0), 170461), 3), 0, ite[172798](eq[172793](bvadd[172781](1, bvmul(4, 0), 170461), 100728848), 0, ite[172797](eq[172794](bvadd[172781](1, bvmul(4, 0), 170461), 4), 0, ite[172796](eq[172795](bvadd[172781](1, bvmul(4, 0), 170461), 2), 0, 128)))))))))))))), ite[172838](eq[172811](bvadd[172810](bvmul(4, 0), 170461), 67504401), 4, ite[172837](eq[172812](bvadd[172810](bvmul(4, 0), 170461), 262276), 0, ite[172836](eq[172813](bvadd[172810](bvmul(4, 0), 170461), 5), 0, ite[172835](eq[172814](bvadd[172810](bvmul(4, 0), 170461), 262277), 0, ite[172834](eq[172815](bvadd[172810](bvmul(4, 0), 170461), 100728850), 0, ite[172833](eq[172816](bvadd[172810](bvmul(4, 0), 170461), 100728849), 0, ite[172832](eq[172817](bvadd[172810](bvmul(4, 0), 170461), 1), 0, ite[172831](eq[172818](bvadd[172810](bvmul(4, 0), 170461), 262279), 0, ite[172830](eq[172819](bvadd[172810](bvmul(4, 0), 170461), 0), 2, ite[172829](eq[172820](bvadd[172810](bvmul(4, 0), 170461), 262278), 0, ite[172828](eq[172821](bvadd[172810](bvmul(4, 0), 170461), 3), 0, ite[172827](eq[172822](bvadd[172810](bvmul(4, 0), 170461), 100728848), 0, ite[172826](eq[172823](bvadd[172810](bvmul(4, 0), 170461), 4), 0, ite[172825](eq[172824](bvadd[172810](bvmul(4, 0), 170461), 2), 0, 128))))))))))))))))) )
140305 : 0 { 0x0 +1.0e1025 } : INT                 : 0
170331 : sum_is(170300, 140305) : BOOL             : false
170332 : and(169491, 170331) : BOOL                : false
170345 : or(141221, 170332) : BOOL                 : false

ce =
=counter_example_begin z3v487.ce1556 817ac78cddd73e8cd62fb216e34bcb
=input.spec-%var-a-1
1 : Lambda41548Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2155873407 { 0x8080047f -2139093889 -1.13720e130 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2155873408 { 0x80800480 -2139093888 -1.13732e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda41549Var : BV:32
18 : Lambda41550Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2155873409 { 0x80800481 -2139093887 -1.13744e130 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda41551Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 67504401 { 0x4060911 +1.4715168e137 } : BV:32
62 : eq(60, 61) : BOOL
63 : 4 { 0x4 } : BV:8
64 : 262276 { 0x40084 +1.3126573e129 } : BV:32
65 : eq(60, 64) : BOOL
66 : 0 { 0x0 } : BV:8
67 : 5 { 0x5 +1.59e129 } : BV:32
68 : eq(60, 67) : BOOL
69 : 262277 { 0x40085 +1.3126585e129 } : BV:32
70 : eq(60, 69) : BOOL
71 : 100728850 { 0x6010012 +1.781464e141 } : BV:32
72 : eq(60, 71) : BOOL
73 : 100728849 { 0x6010011 +1.781452e141 } : BV:32
74 : eq(60, 73) : BOOL
75 : 1 { 0x1 +1.11e129 } : BV:32
76 : eq(60, 75) : BOOL
77 : 262279 { 0x40087 +1.3126609e129 } : BV:32
78 : eq(60, 77) : BOOL
79 : eq(60, 2) : BOOL
80 : 2 { 0x2 } : BV:8
81 : 262278 { 0x40086 +1.3126597e129 } : BV:32
82 : eq(60, 81) : BOOL
83 : eq(60, 56) : BOOL
84 : 100728848 { 0x6010010 +1.781440e141 } : BV:32
85 : eq(60, 84) : BOOL
86 : eq(60, 57) : BOOL
87 : 2 { 0x2 +1.23e129 } : BV:32
88 : eq(60, 87) : BOOL
89 : 128 { 0x80 -128 } : BV:8
90 : ite(88, 66, 89) : BV:8
91 : ite(86, 66, 90) : BV:8
92 : ite(85, 66, 91) : BV:8
93 : ite(83, 66, 92) : BV:8
94 : ite(82, 66, 93) : BV:8
95 : ite(79, 80, 94) : BV:8
96 : ite(78, 66, 95) : BV:8
97 : ite(76, 66, 96) : BV:8
98 : ite(74, 66, 97) : BV:8
99 : ite(72, 66, 98) : BV:8
100 : ite(70, 66, 99) : BV:8
101 : ite(68, 66, 100) : BV:8
102 : ite(65, 66, 101) : BV:8
103 : ite(62, 63, 102) : BV:8
104 : bvadd(87, 59, 2) : BV:32
105 : eq(104, 61) : BOOL
106 : eq(104, 64) : BOOL
107 : eq(104, 67) : BOOL
108 : eq(104, 69) : BOOL
109 : eq(104, 71) : BOOL
110 : eq(104, 73) : BOOL
111 : eq(104, 75) : BOOL
112 : eq(104, 77) : BOOL
113 : eq(104, 2) : BOOL
114 : eq(104, 81) : BOOL
115 : eq(104, 56) : BOOL
116 : eq(104, 84) : BOOL
117 : eq(104, 57) : BOOL
118 : eq(104, 87) : BOOL
119 : ite(118, 66, 89) : BV:8
120 : ite(117, 66, 119) : BV:8
121 : ite(116, 66, 120) : BV:8
122 : ite(115, 66, 121) : BV:8
123 : ite(114, 66, 122) : BV:8
124 : ite(113, 80, 123) : BV:8
125 : ite(112, 66, 124) : BV:8
126 : ite(111, 66, 125) : BV:8
127 : ite(110, 66, 126) : BV:8
128 : ite(109, 66, 127) : BV:8
129 : ite(108, 66, 128) : BV:8
130 : ite(107, 66, 129) : BV:8
131 : ite(106, 66, 130) : BV:8
132 : ite(105, 63, 131) : BV:8
133 : bvadd(75, 59, 2) : BV:32
134 : eq(133, 61) : BOOL
135 : eq(133, 64) : BOOL
136 : eq(133, 67) : BOOL
137 : eq(133, 69) : BOOL
138 : eq(133, 71) : BOOL
139 : eq(133, 73) : BOOL
140 : eq(133, 75) : BOOL
141 : eq(133, 77) : BOOL
142 : eq(133, 2) : BOOL
143 : eq(133, 81) : BOOL
144 : eq(133, 56) : BOOL
145 : eq(133, 84) : BOOL
146 : eq(133, 57) : BOOL
147 : eq(133, 87) : BOOL
148 : ite(147, 66, 89) : BV:8
149 : ite(146, 66, 148) : BV:8
150 : ite(145, 66, 149) : BV:8
151 : ite(144, 66, 150) : BV:8
152 : ite(143, 66, 151) : BV:8
153 : ite(142, 80, 152) : BV:8
154 : ite(141, 66, 153) : BV:8
155 : ite(140, 66, 154) : BV:8
156 : ite(139, 66, 155) : BV:8
157 : ite(138, 66, 156) : BV:8
158 : ite(137, 66, 157) : BV:8
159 : ite(136, 66, 158) : BV:8
160 : ite(135, 66, 159) : BV:8
161 : ite(134, 63, 160) : BV:8
162 : bvadd(59, 2) : BV:32
163 : eq(162, 61) : BOOL
164 : eq(162, 64) : BOOL
165 : eq(162, 67) : BOOL
166 : eq(162, 69) : BOOL
167 : eq(162, 71) : BOOL
168 : eq(162, 73) : BOOL
169 : eq(162, 75) : BOOL
170 : eq(162, 77) : BOOL
171 : eq(162, 2) : BOOL
172 : eq(162, 81) : BOOL
173 : eq(162, 56) : BOOL
174 : eq(162, 84) : BOOL
175 : eq(162, 57) : BOOL
176 : eq(162, 87) : BOOL
177 : ite(176, 66, 89) : BV:8
178 : ite(175, 66, 177) : BV:8
179 : ite(174, 66, 178) : BV:8
180 : ite(173, 66, 179) : BV:8
181 : ite(172, 66, 180) : BV:8
182 : ite(171, 80, 181) : BV:8
183 : ite(170, 66, 182) : BV:8
184 : ite(169, 66, 183) : BV:8
185 : ite(168, 66, 184) : BV:8
186 : ite(167, 66, 185) : BV:8
187 : ite(166, 66, 186) : BV:8
188 : ite(165, 66, 187) : BV:8
189 : ite(164, 66, 188) : BV:8
190 : ite(163, 63, 189) : BV:8
191 : bvconcat(103, 132, 161, 190) : BV:32
192 : bvadd(56, 58, 191) : BV:32
193 : eq(192, 61) : BOOL
194 : eq(192, 64) : BOOL
195 : eq(192, 67) : BOOL
196 : eq(192, 69) : BOOL
197 : eq(192, 71) : BOOL
198 : eq(192, 73) : BOOL
199 : eq(192, 75) : BOOL
200 : eq(192, 77) : BOOL
201 : eq(192, 2) : BOOL
202 : eq(192, 81) : BOOL
203 : eq(192, 56) : BOOL
204 : eq(192, 84) : BOOL
205 : eq(192, 57) : BOOL
206 : eq(192, 87) : BOOL
207 : ite(206, 66, 89) : BV:8
208 : ite(205, 66, 207) : BV:8
209 : ite(204, 66, 208) : BV:8
210 : ite(203, 66, 209) : BV:8
211 : ite(202, 66, 210) : BV:8
212 : ite(201, 80, 211) : BV:8
213 : ite(200, 66, 212) : BV:8
214 : ite(199, 66, 213) : BV:8
215 : ite(198, 66, 214) : BV:8
216 : ite(197, 66, 215) : BV:8
217 : ite(196, 66, 216) : BV:8
218 : ite(195, 66, 217) : BV:8
219 : ite(194, 66, 218) : BV:8
220 : ite(193, 63, 219) : BV:8
221 : bvadd(87, 58, 191) : BV:32
222 : eq(221, 61) : BOOL
223 : eq(221, 64) : BOOL
224 : eq(221, 67) : BOOL
225 : eq(221, 69) : BOOL
226 : eq(221, 71) : BOOL
227 : eq(221, 73) : BOOL
228 : eq(221, 75) : BOOL
229 : eq(221, 77) : BOOL
230 : eq(221, 2) : BOOL
231 : eq(221, 81) : BOOL
232 : eq(221, 56) : BOOL
233 : eq(221, 84) : BOOL
234 : eq(221, 57) : BOOL
235 : eq(221, 87) : BOOL
236 : ite(235, 66, 89) : BV:8
237 : ite(234, 66, 236) : BV:8
238 : ite(233, 66, 237) : BV:8
239 : ite(232, 66, 238) : BV:8
240 : ite(231, 66, 239) : BV:8
241 : ite(230, 80, 240) : BV:8
242 : ite(229, 66, 241) : BV:8
243 : ite(228, 66, 242) : BV:8
244 : ite(227, 66, 243) : BV:8
245 : ite(226, 66, 244) : BV:8
246 : ite(225, 66, 245) : BV:8
247 : ite(224, 66, 246) : BV:8
248 : ite(223, 66, 247) : BV:8
249 : ite(222, 63, 248) : BV:8
250 : bvadd(75, 58, 191) : BV:32
251 : eq(250, 61) : BOOL
252 : eq(250, 64) : BOOL
253 : eq(250, 67) : BOOL
254 : eq(250, 69) : BOOL
255 : eq(250, 71) : BOOL
256 : eq(250, 73) : BOOL
257 : eq(250, 75) : BOOL
258 : eq(250, 77) : BOOL
259 : eq(250, 2) : BOOL
260 : eq(250, 81) : BOOL
261 : eq(250, 56) : BOOL
262 : eq(250, 84) : BOOL
263 : eq(250, 57) : BOOL
264 : eq(250, 87) : BOOL
265 : ite(264, 66, 89) : BV:8
266 : ite(263, 66, 265) : BV:8
267 : ite(262, 66, 266) : BV:8
268 : ite(261, 66, 267) : BV:8
269 : ite(260, 66, 268) : BV:8
270 : ite(259, 80, 269) : BV:8
271 : ite(258, 66, 270) : BV:8
272 : ite(257, 66, 271) : BV:8
273 : ite(256, 66, 272) : BV:8
274 : ite(255, 66, 273) : BV:8
275 : ite(254, 66, 274) : BV:8
276 : ite(253, 66, 275) : BV:8
277 : ite(252, 66, 276) : BV:8
278 : ite(251, 63, 277) : BV:8
279 : bvadd(58, 191) : BV:32
280 : eq(279, 61) : BOOL
281 : eq(279, 64) : BOOL
282 : eq(279, 67) : BOOL
283 : eq(279, 69) : BOOL
284 : eq(279, 71) : BOOL
285 : eq(279, 73) : BOOL
286 : eq(279, 75) : BOOL
287 : eq(279, 77) : BOOL
288 : eq(279, 2) : BOOL
289 : eq(279, 81) : BOOL
290 : eq(279, 56) : BOOL
291 : eq(279, 84) : BOOL
292 : eq(279, 57) : BOOL
293 : eq(279, 87) : BOOL
294 : ite(293, 66, 89) : BV:8
295 : ite(292, 66, 294) : BV:8
296 : ite(291, 66, 295) : BV:8
297 : ite(290, 66, 296) : BV:8
298 : ite(289, 66, 297) : BV:8
299 : ite(288, 80, 298) : BV:8
300 : ite(287, 66, 299) : BV:8
301 : ite(286, 66, 300) : BV:8
302 : ite(285, 66, 301) : BV:8
303 : ite(284, 66, 302) : BV:8
304 : ite(283, 66, 303) : BV:8
305 : ite(282, 66, 304) : BV:8
306 : ite(281, 66, 305) : BV:8
307 : ite(280, 63, 306) : BV:8
308 : bvconcat(220, 249, 278, 307) : BV:32
309 : ite(55, 2, 308) : BV:32
310 : lambda(52, 309) : FUNCTION[BV:32 -> BV:32]
311 : map(51, 310) : MAP[BV:32 -> BV:32]
312 : lambda(17, 311) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
313 : map(16, 312) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
314 : sym_const(313) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-a-0.L3%7%bbentry
1 : Lambda41548Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2155873407 { 0x8080047f -2139093889 -1.13720e130 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2155873408 { 0x80800480 -2139093888 -1.13732e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda41549Var : BV:32
18 : Lambda41550Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2155873409 { 0x80800481 -2139093887 -1.13744e130 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda41551Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 67504401 { 0x4060911 +1.4715168e137 } : BV:32
62 : eq(60, 61) : BOOL
63 : 4 { 0x4 } : BV:8
64 : 262276 { 0x40084 +1.3126573e129 } : BV:32
65 : eq(60, 64) : BOOL
66 : 0 { 0x0 } : BV:8
67 : 5 { 0x5 +1.59e129 } : BV:32
68 : eq(60, 67) : BOOL
69 : 262277 { 0x40085 +1.3126585e129 } : BV:32
70 : eq(60, 69) : BOOL
71 : 100728850 { 0x6010012 +1.781464e141 } : BV:32
72 : eq(60, 71) : BOOL
73 : 100728849 { 0x6010011 +1.781452e141 } : BV:32
74 : eq(60, 73) : BOOL
75 : 1 { 0x1 +1.11e129 } : BV:32
76 : eq(60, 75) : BOOL
77 : 262279 { 0x40087 +1.3126609e129 } : BV:32
78 : eq(60, 77) : BOOL
79 : eq(60, 2) : BOOL
80 : 2 { 0x2 } : BV:8
81 : 262278 { 0x40086 +1.3126597e129 } : BV:32
82 : eq(60, 81) : BOOL
83 : eq(60, 56) : BOOL
84 : 100728848 { 0x6010010 +1.781440e141 } : BV:32
85 : eq(60, 84) : BOOL
86 : eq(60, 57) : BOOL
87 : 2 { 0x2 +1.23e129 } : BV:32
88 : eq(60, 87) : BOOL
89 : 128 { 0x80 -128 } : BV:8
90 : ite(88, 66, 89) : BV:8
91 : ite(86, 66, 90) : BV:8
92 : ite(85, 66, 91) : BV:8
93 : ite(83, 66, 92) : BV:8
94 : ite(82, 66, 93) : BV:8
95 : ite(79, 80, 94) : BV:8
96 : ite(78, 66, 95) : BV:8
97 : ite(76, 66, 96) : BV:8
98 : ite(74, 66, 97) : BV:8
99 : ite(72, 66, 98) : BV:8
100 : ite(70, 66, 99) : BV:8
101 : ite(68, 66, 100) : BV:8
102 : ite(65, 66, 101) : BV:8
103 : ite(62, 63, 102) : BV:8
104 : bvadd(87, 59, 2) : BV:32
105 : eq(104, 61) : BOOL
106 : eq(104, 64) : BOOL
107 : eq(104, 67) : BOOL
108 : eq(104, 69) : BOOL
109 : eq(104, 71) : BOOL
110 : eq(104, 73) : BOOL
111 : eq(104, 75) : BOOL
112 : eq(104, 77) : BOOL
113 : eq(104, 2) : BOOL
114 : eq(104, 81) : BOOL
115 : eq(104, 56) : BOOL
116 : eq(104, 84) : BOOL
117 : eq(104, 57) : BOOL
118 : eq(104, 87) : BOOL
119 : ite(118, 66, 89) : BV:8
120 : ite(117, 66, 119) : BV:8
121 : ite(116, 66, 120) : BV:8
122 : ite(115, 66, 121) : BV:8
123 : ite(114, 66, 122) : BV:8
124 : ite(113, 80, 123) : BV:8
125 : ite(112, 66, 124) : BV:8
126 : ite(111, 66, 125) : BV:8
127 : ite(110, 66, 126) : BV:8
128 : ite(109, 66, 127) : BV:8
129 : ite(108, 66, 128) : BV:8
130 : ite(107, 66, 129) : BV:8
131 : ite(106, 66, 130) : BV:8
132 : ite(105, 63, 131) : BV:8
133 : bvadd(75, 59, 2) : BV:32
134 : eq(133, 61) : BOOL
135 : eq(133, 64) : BOOL
136 : eq(133, 67) : BOOL
137 : eq(133, 69) : BOOL
138 : eq(133, 71) : BOOL
139 : eq(133, 73) : BOOL
140 : eq(133, 75) : BOOL
141 : eq(133, 77) : BOOL
142 : eq(133, 2) : BOOL
143 : eq(133, 81) : BOOL
144 : eq(133, 56) : BOOL
145 : eq(133, 84) : BOOL
146 : eq(133, 57) : BOOL
147 : eq(133, 87) : BOOL
148 : ite(147, 66, 89) : BV:8
149 : ite(146, 66, 148) : BV:8
150 : ite(145, 66, 149) : BV:8
151 : ite(144, 66, 150) : BV:8
152 : ite(143, 66, 151) : BV:8
153 : ite(142, 80, 152) : BV:8
154 : ite(141, 66, 153) : BV:8
155 : ite(140, 66, 154) : BV:8
156 : ite(139, 66, 155) : BV:8
157 : ite(138, 66, 156) : BV:8
158 : ite(137, 66, 157) : BV:8
159 : ite(136, 66, 158) : BV:8
160 : ite(135, 66, 159) : BV:8
161 : ite(134, 63, 160) : BV:8
162 : bvadd(59, 2) : BV:32
163 : eq(162, 61) : BOOL
164 : eq(162, 64) : BOOL
165 : eq(162, 67) : BOOL
166 : eq(162, 69) : BOOL
167 : eq(162, 71) : BOOL
168 : eq(162, 73) : BOOL
169 : eq(162, 75) : BOOL
170 : eq(162, 77) : BOOL
171 : eq(162, 2) : BOOL
172 : eq(162, 81) : BOOL
173 : eq(162, 56) : BOOL
174 : eq(162, 84) : BOOL
175 : eq(162, 57) : BOOL
176 : eq(162, 87) : BOOL
177 : ite(176, 66, 89) : BV:8
178 : ite(175, 66, 177) : BV:8
179 : ite(174, 66, 178) : BV:8
180 : ite(173, 66, 179) : BV:8
181 : ite(172, 66, 180) : BV:8
182 : ite(171, 80, 181) : BV:8
183 : ite(170, 66, 182) : BV:8
184 : ite(169, 66, 183) : BV:8
185 : ite(168, 66, 184) : BV:8
186 : ite(167, 66, 185) : BV:8
187 : ite(166, 66, 186) : BV:8
188 : ite(165, 66, 187) : BV:8
189 : ite(164, 66, 188) : BV:8
190 : ite(163, 63, 189) : BV:8
191 : bvconcat(103, 132, 161, 190) : BV:32
192 : bvadd(56, 58, 191) : BV:32
193 : eq(192, 61) : BOOL
194 : eq(192, 64) : BOOL
195 : eq(192, 67) : BOOL
196 : eq(192, 69) : BOOL
197 : eq(192, 71) : BOOL
198 : eq(192, 73) : BOOL
199 : eq(192, 75) : BOOL
200 : eq(192, 77) : BOOL
201 : eq(192, 2) : BOOL
202 : eq(192, 81) : BOOL
203 : eq(192, 56) : BOOL
204 : eq(192, 84) : BOOL
205 : eq(192, 57) : BOOL
206 : eq(192, 87) : BOOL
207 : ite(206, 66, 89) : BV:8
208 : ite(205, 66, 207) : BV:8
209 : ite(204, 66, 208) : BV:8
210 : ite(203, 66, 209) : BV:8
211 : ite(202, 66, 210) : BV:8
212 : ite(201, 80, 211) : BV:8
213 : ite(200, 66, 212) : BV:8
214 : ite(199, 66, 213) : BV:8
215 : ite(198, 66, 214) : BV:8
216 : ite(197, 66, 215) : BV:8
217 : ite(196, 66, 216) : BV:8
218 : ite(195, 66, 217) : BV:8
219 : ite(194, 66, 218) : BV:8
220 : ite(193, 63, 219) : BV:8
221 : bvadd(87, 58, 191) : BV:32
222 : eq(221, 61) : BOOL
223 : eq(221, 64) : BOOL
224 : eq(221, 67) : BOOL
225 : eq(221, 69) : BOOL
226 : eq(221, 71) : BOOL
227 : eq(221, 73) : BOOL
228 : eq(221, 75) : BOOL
229 : eq(221, 77) : BOOL
230 : eq(221, 2) : BOOL
231 : eq(221, 81) : BOOL
232 : eq(221, 56) : BOOL
233 : eq(221, 84) : BOOL
234 : eq(221, 57) : BOOL
235 : eq(221, 87) : BOOL
236 : ite(235, 66, 89) : BV:8
237 : ite(234, 66, 236) : BV:8
238 : ite(233, 66, 237) : BV:8
239 : ite(232, 66, 238) : BV:8
240 : ite(231, 66, 239) : BV:8
241 : ite(230, 80, 240) : BV:8
242 : ite(229, 66, 241) : BV:8
243 : ite(228, 66, 242) : BV:8
244 : ite(227, 66, 243) : BV:8
245 : ite(226, 66, 244) : BV:8
246 : ite(225, 66, 245) : BV:8
247 : ite(224, 66, 246) : BV:8
248 : ite(223, 66, 247) : BV:8
249 : ite(222, 63, 248) : BV:8
250 : bvadd(75, 58, 191) : BV:32
251 : eq(250, 61) : BOOL
252 : eq(250, 64) : BOOL
253 : eq(250, 67) : BOOL
254 : eq(250, 69) : BOOL
255 : eq(250, 71) : BOOL
256 : eq(250, 73) : BOOL
257 : eq(250, 75) : BOOL
258 : eq(250, 77) : BOOL
259 : eq(250, 2) : BOOL
260 : eq(250, 81) : BOOL
261 : eq(250, 56) : BOOL
262 : eq(250, 84) : BOOL
263 : eq(250, 57) : BOOL
264 : eq(250, 87) : BOOL
265 : ite(264, 66, 89) : BV:8
266 : ite(263, 66, 265) : BV:8
267 : ite(262, 66, 266) : BV:8
268 : ite(261, 66, 267) : BV:8
269 : ite(260, 66, 268) : BV:8
270 : ite(259, 80, 269) : BV:8
271 : ite(258, 66, 270) : BV:8
272 : ite(257, 66, 271) : BV:8
273 : ite(256, 66, 272) : BV:8
274 : ite(255, 66, 273) : BV:8
275 : ite(254, 66, 274) : BV:8
276 : ite(253, 66, 275) : BV:8
277 : ite(252, 66, 276) : BV:8
278 : ite(251, 63, 277) : BV:8
279 : bvadd(58, 191) : BV:32
280 : eq(279, 61) : BOOL
281 : eq(279, 64) : BOOL
282 : eq(279, 67) : BOOL
283 : eq(279, 69) : BOOL
284 : eq(279, 71) : BOOL
285 : eq(279, 73) : BOOL
286 : eq(279, 75) : BOOL
287 : eq(279, 77) : BOOL
288 : eq(279, 2) : BOOL
289 : eq(279, 81) : BOOL
290 : eq(279, 56) : BOOL
291 : eq(279, 84) : BOOL
292 : eq(279, 57) : BOOL
293 : eq(279, 87) : BOOL
294 : ite(293, 66, 89) : BV:8
295 : ite(292, 66, 294) : BV:8
296 : ite(291, 66, 295) : BV:8
297 : ite(290, 66, 296) : BV:8
298 : ite(289, 66, 297) : BV:8
299 : ite(288, 80, 298) : BV:8
300 : ite(287, 66, 299) : BV:8
301 : ite(286, 66, 300) : BV:8
302 : ite(285, 66, 301) : BV:8
303 : ite(284, 66, 302) : BV:8
304 : ite(283, 66, 303) : BV:8
305 : ite(282, 66, 304) : BV:8
306 : ite(281, 66, 305) : BV:8
307 : ite(280, 63, 306) : BV:8
308 : bvconcat(220, 249, 278, 307) : BV:32
309 : ite(55, 2, 308) : BV:32
310 : lambda(52, 309) : FUNCTION[BV:32 -> BV:32]
311 : map(51, 310) : MAP[BV:32 -> BV:32]
312 : lambda(17, 311) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
313 : map(16, 312) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
314 : sym_const(313) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 2, [ 1; 5 ] -> 0, [ 6; 262275 ] -> 128, [ 262276; 262279 ] -> 0, [ 262280; 67504400 ] -> 128, [ 67504401; 67504401 ] -> 4, [ 67504402; 100728847 ] -> 128, [ 100728848; 100728850 ] -> 0, [ 100728851; 4294967295 ] -> 128, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 262275 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 262276; 262279 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 262280; 67504399 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 67504400; 67504403 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 67504404; 100728847 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 100728848; 100728851 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 100728852; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%n
1 : 2155873408 { 0x80800480 -2139093888 -1.13732e130 } : BV:32
=input.dst.llvm-%m
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 759245119 { 0x2d41293f +1.50907123e219 } : COUNT
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 262276 { 0x40084 +1.3126573e129 } : BV:32
=input.dst.llvm-%arr
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 100728848 { 0x6010010 +1.781440e141 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 67504400 { 0x4060910 +1.4715156e137 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 759245119 { 0x2d41293f +1.50907123e219 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 262276 { 0x40084 +1.3126573e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 262279 { 0x40087 +1.3126609e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 100728848 { 0x6010010 +1.781440e141 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 100728851 { 0x6010013 +1.781476e141 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 67504400 { 0x4060910 +1.4715156e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 67504403 { 0x4060913 +1.4715192e137 } : BV:32
=input.spec-%var-a-1.0.1
1 : ([ 0; 2155873407 ] -> true, [ 2155873408; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-a-1.1.1.1.1
1 : Lambda41490Var : BV:32
2 : Lambda41491Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 67504401 { 0x4060911 +1.4715168e137 } : BV:32
13 : eq(11, 12) : BOOL
14 : 4 { 0x4 } : BV:8
15 : 262276 { 0x40084 +1.3126573e129 } : BV:32
16 : eq(11, 15) : BOOL
17 : 0 { 0x0 } : BV:8
18 : 5 { 0x5 +1.59e129 } : BV:32
19 : eq(11, 18) : BOOL
20 : 262277 { 0x40085 +1.3126585e129 } : BV:32
21 : eq(11, 20) : BOOL
22 : 100728850 { 0x6010012 +1.781464e141 } : BV:32
23 : eq(11, 22) : BOOL
24 : 100728849 { 0x6010011 +1.781452e141 } : BV:32
25 : eq(11, 24) : BOOL
26 : 1 { 0x1 +1.11e129 } : BV:32
27 : eq(11, 26) : BOOL
28 : 262279 { 0x40087 +1.3126609e129 } : BV:32
29 : eq(11, 28) : BOOL
30 : eq(11, 3) : BOOL
31 : 2 { 0x2 } : BV:8
32 : 262278 { 0x40086 +1.3126597e129 } : BV:32
33 : eq(11, 32) : BOOL
34 : eq(11, 7) : BOOL
35 : 100728848 { 0x6010010 +1.781440e141 } : BV:32
36 : eq(11, 35) : BOOL
37 : eq(11, 8) : BOOL
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : eq(11, 38) : BOOL
40 : 128 { 0x80 -128 } : BV:8
41 : ite(39, 17, 40) : BV:8
42 : ite(37, 17, 41) : BV:8
43 : ite(36, 17, 42) : BV:8
44 : ite(34, 17, 43) : BV:8
45 : ite(33, 17, 44) : BV:8
46 : ite(30, 31, 45) : BV:8
47 : ite(29, 17, 46) : BV:8
48 : ite(27, 17, 47) : BV:8
49 : ite(25, 17, 48) : BV:8
50 : ite(23, 17, 49) : BV:8
51 : ite(21, 17, 50) : BV:8
52 : ite(19, 17, 51) : BV:8
53 : ite(16, 17, 52) : BV:8
54 : ite(13, 14, 53) : BV:8
55 : bvadd(38, 10, 3) : BV:32
56 : eq(55, 12) : BOOL
57 : eq(55, 15) : BOOL
58 : eq(55, 18) : BOOL
59 : eq(55, 20) : BOOL
60 : eq(55, 22) : BOOL
61 : eq(55, 24) : BOOL
62 : eq(55, 26) : BOOL
63 : eq(55, 28) : BOOL
64 : eq(55, 3) : BOOL
65 : eq(55, 32) : BOOL
66 : eq(55, 7) : BOOL
67 : eq(55, 35) : BOOL
68 : eq(55, 8) : BOOL
69 : eq(55, 38) : BOOL
70 : ite(69, 17, 40) : BV:8
71 : ite(68, 17, 70) : BV:8
72 : ite(67, 17, 71) : BV:8
73 : ite(66, 17, 72) : BV:8
74 : ite(65, 17, 73) : BV:8
75 : ite(64, 31, 74) : BV:8
76 : ite(63, 17, 75) : BV:8
77 : ite(62, 17, 76) : BV:8
78 : ite(61, 17, 77) : BV:8
79 : ite(60, 17, 78) : BV:8
80 : ite(59, 17, 79) : BV:8
81 : ite(58, 17, 80) : BV:8
82 : ite(57, 17, 81) : BV:8
83 : ite(56, 14, 82) : BV:8
84 : bvadd(26, 10, 3) : BV:32
85 : eq(84, 12) : BOOL
86 : eq(84, 15) : BOOL
87 : eq(84, 18) : BOOL
88 : eq(84, 20) : BOOL
89 : eq(84, 22) : BOOL
90 : eq(84, 24) : BOOL
91 : eq(84, 26) : BOOL
92 : eq(84, 28) : BOOL
93 : eq(84, 3) : BOOL
94 : eq(84, 32) : BOOL
95 : eq(84, 7) : BOOL
96 : eq(84, 35) : BOOL
97 : eq(84, 8) : BOOL
98 : eq(84, 38) : BOOL
99 : ite(98, 17, 40) : BV:8
100 : ite(97, 17, 99) : BV:8
101 : ite(96, 17, 100) : BV:8
102 : ite(95, 17, 101) : BV:8
103 : ite(94, 17, 102) : BV:8
104 : ite(93, 31, 103) : BV:8
105 : ite(92, 17, 104) : BV:8
106 : ite(91, 17, 105) : BV:8
107 : ite(90, 17, 106) : BV:8
108 : ite(89, 17, 107) : BV:8
109 : ite(88, 17, 108) : BV:8
110 : ite(87, 17, 109) : BV:8
111 : ite(86, 17, 110) : BV:8
112 : ite(85, 14, 111) : BV:8
113 : bvadd(10, 3) : BV:32
114 : eq(113, 12) : BOOL
115 : eq(113, 15) : BOOL
116 : eq(113, 18) : BOOL
117 : eq(113, 20) : BOOL
118 : eq(113, 22) : BOOL
119 : eq(113, 24) : BOOL
120 : eq(113, 26) : BOOL
121 : eq(113, 28) : BOOL
122 : eq(113, 3) : BOOL
123 : eq(113, 32) : BOOL
124 : eq(113, 7) : BOOL
125 : eq(113, 35) : BOOL
126 : eq(113, 8) : BOOL
127 : eq(113, 38) : BOOL
128 : ite(127, 17, 40) : BV:8
129 : ite(126, 17, 128) : BV:8
130 : ite(125, 17, 129) : BV:8
131 : ite(124, 17, 130) : BV:8
132 : ite(123, 17, 131) : BV:8
133 : ite(122, 31, 132) : BV:8
134 : ite(121, 17, 133) : BV:8
135 : ite(120, 17, 134) : BV:8
136 : ite(119, 17, 135) : BV:8
137 : ite(118, 17, 136) : BV:8
138 : ite(117, 17, 137) : BV:8
139 : ite(116, 17, 138) : BV:8
140 : ite(115, 17, 139) : BV:8
141 : ite(114, 14, 140) : BV:8
142 : bvconcat(54, 83, 112, 141) : BV:32
143 : bvadd(7, 9, 142) : BV:32
144 : eq(143, 12) : BOOL
145 : eq(143, 15) : BOOL
146 : eq(143, 18) : BOOL
147 : eq(143, 20) : BOOL
148 : eq(143, 22) : BOOL
149 : eq(143, 24) : BOOL
150 : eq(143, 26) : BOOL
151 : eq(143, 28) : BOOL
152 : eq(143, 3) : BOOL
153 : eq(143, 32) : BOOL
154 : eq(143, 7) : BOOL
155 : eq(143, 35) : BOOL
156 : eq(143, 8) : BOOL
157 : eq(143, 38) : BOOL
158 : ite(157, 17, 40) : BV:8
159 : ite(156, 17, 158) : BV:8
160 : ite(155, 17, 159) : BV:8
161 : ite(154, 17, 160) : BV:8
162 : ite(153, 17, 161) : BV:8
163 : ite(152, 31, 162) : BV:8
164 : ite(151, 17, 163) : BV:8
165 : ite(150, 17, 164) : BV:8
166 : ite(149, 17, 165) : BV:8
167 : ite(148, 17, 166) : BV:8
168 : ite(147, 17, 167) : BV:8
169 : ite(146, 17, 168) : BV:8
170 : ite(145, 17, 169) : BV:8
171 : ite(144, 14, 170) : BV:8
172 : bvadd(38, 9, 142) : BV:32
173 : eq(172, 12) : BOOL
174 : eq(172, 15) : BOOL
175 : eq(172, 18) : BOOL
176 : eq(172, 20) : BOOL
177 : eq(172, 22) : BOOL
178 : eq(172, 24) : BOOL
179 : eq(172, 26) : BOOL
180 : eq(172, 28) : BOOL
181 : eq(172, 3) : BOOL
182 : eq(172, 32) : BOOL
183 : eq(172, 7) : BOOL
184 : eq(172, 35) : BOOL
185 : eq(172, 8) : BOOL
186 : eq(172, 38) : BOOL
187 : ite(186, 17, 40) : BV:8
188 : ite(185, 17, 187) : BV:8
189 : ite(184, 17, 188) : BV:8
190 : ite(183, 17, 189) : BV:8
191 : ite(182, 17, 190) : BV:8
192 : ite(181, 31, 191) : BV:8
193 : ite(180, 17, 192) : BV:8
194 : ite(179, 17, 193) : BV:8
195 : ite(178, 17, 194) : BV:8
196 : ite(177, 17, 195) : BV:8
197 : ite(176, 17, 196) : BV:8
198 : ite(175, 17, 197) : BV:8
199 : ite(174, 17, 198) : BV:8
200 : ite(173, 14, 199) : BV:8
201 : bvadd(26, 9, 142) : BV:32
202 : eq(201, 12) : BOOL
203 : eq(201, 15) : BOOL
204 : eq(201, 18) : BOOL
205 : eq(201, 20) : BOOL
206 : eq(201, 22) : BOOL
207 : eq(201, 24) : BOOL
208 : eq(201, 26) : BOOL
209 : eq(201, 28) : BOOL
210 : eq(201, 3) : BOOL
211 : eq(201, 32) : BOOL
212 : eq(201, 7) : BOOL
213 : eq(201, 35) : BOOL
214 : eq(201, 8) : BOOL
215 : eq(201, 38) : BOOL
216 : ite(215, 17, 40) : BV:8
217 : ite(214, 17, 216) : BV:8
218 : ite(213, 17, 217) : BV:8
219 : ite(212, 17, 218) : BV:8
220 : ite(211, 17, 219) : BV:8
221 : ite(210, 31, 220) : BV:8
222 : ite(209, 17, 221) : BV:8
223 : ite(208, 17, 222) : BV:8
224 : ite(207, 17, 223) : BV:8
225 : ite(206, 17, 224) : BV:8
226 : ite(205, 17, 225) : BV:8
227 : ite(204, 17, 226) : BV:8
228 : ite(203, 17, 227) : BV:8
229 : ite(202, 14, 228) : BV:8
230 : bvadd(9, 142) : BV:32
231 : eq(230, 12) : BOOL
232 : eq(230, 15) : BOOL
233 : eq(230, 18) : BOOL
234 : eq(230, 20) : BOOL
235 : eq(230, 22) : BOOL
236 : eq(230, 24) : BOOL
237 : eq(230, 26) : BOOL
238 : eq(230, 28) : BOOL
239 : eq(230, 3) : BOOL
240 : eq(230, 32) : BOOL
241 : eq(230, 7) : BOOL
242 : eq(230, 35) : BOOL
243 : eq(230, 8) : BOOL
244 : eq(230, 38) : BOOL
245 : ite(244, 17, 40) : BV:8
246 : ite(243, 17, 245) : BV:8
247 : ite(242, 17, 246) : BV:8
248 : ite(241, 17, 247) : BV:8
249 : ite(240, 17, 248) : BV:8
250 : ite(239, 31, 249) : BV:8
251 : ite(238, 17, 250) : BV:8
252 : ite(237, 17, 251) : BV:8
253 : ite(236, 17, 252) : BV:8
254 : ite(235, 17, 253) : BV:8
255 : ite(234, 17, 254) : BV:8
256 : ite(233, 17, 255) : BV:8
257 : ite(232, 17, 256) : BV:8
258 : ite(231, 14, 257) : BV:8
259 : bvconcat(171, 200, 229, 258) : BV:32
260 : ite(6, 3, 259) : BV:32
261 : lambda(1, 2, 260) : FUNCTION[BV:32,BV:32 -> BV:32]
262 : sym_const(261) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-a-0.L3%7%bbentry.1.1.1.1
1 : Lambda41492Var : BV:32
2 : Lambda41493Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 67504401 { 0x4060911 +1.4715168e137 } : BV:32
13 : eq(11, 12) : BOOL
14 : 4 { 0x4 } : BV:8
15 : 262276 { 0x40084 +1.3126573e129 } : BV:32
16 : eq(11, 15) : BOOL
17 : 0 { 0x0 } : BV:8
18 : 5 { 0x5 +1.59e129 } : BV:32
19 : eq(11, 18) : BOOL
20 : 262277 { 0x40085 +1.3126585e129 } : BV:32
21 : eq(11, 20) : BOOL
22 : 100728850 { 0x6010012 +1.781464e141 } : BV:32
23 : eq(11, 22) : BOOL
24 : 100728849 { 0x6010011 +1.781452e141 } : BV:32
25 : eq(11, 24) : BOOL
26 : 1 { 0x1 +1.11e129 } : BV:32
27 : eq(11, 26) : BOOL
28 : 262279 { 0x40087 +1.3126609e129 } : BV:32
29 : eq(11, 28) : BOOL
30 : eq(11, 3) : BOOL
31 : 2 { 0x2 } : BV:8
32 : 262278 { 0x40086 +1.3126597e129 } : BV:32
33 : eq(11, 32) : BOOL
34 : eq(11, 7) : BOOL
35 : 100728848 { 0x6010010 +1.781440e141 } : BV:32
36 : eq(11, 35) : BOOL
37 : eq(11, 8) : BOOL
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : eq(11, 38) : BOOL
40 : 128 { 0x80 -128 } : BV:8
41 : ite(39, 17, 40) : BV:8
42 : ite(37, 17, 41) : BV:8
43 : ite(36, 17, 42) : BV:8
44 : ite(34, 17, 43) : BV:8
45 : ite(33, 17, 44) : BV:8
46 : ite(30, 31, 45) : BV:8
47 : ite(29, 17, 46) : BV:8
48 : ite(27, 17, 47) : BV:8
49 : ite(25, 17, 48) : BV:8
50 : ite(23, 17, 49) : BV:8
51 : ite(21, 17, 50) : BV:8
52 : ite(19, 17, 51) : BV:8
53 : ite(16, 17, 52) : BV:8
54 : ite(13, 14, 53) : BV:8
55 : bvadd(38, 10, 3) : BV:32
56 : eq(55, 12) : BOOL
57 : eq(55, 15) : BOOL
58 : eq(55, 18) : BOOL
59 : eq(55, 20) : BOOL
60 : eq(55, 22) : BOOL
61 : eq(55, 24) : BOOL
62 : eq(55, 26) : BOOL
63 : eq(55, 28) : BOOL
64 : eq(55, 3) : BOOL
65 : eq(55, 32) : BOOL
66 : eq(55, 7) : BOOL
67 : eq(55, 35) : BOOL
68 : eq(55, 8) : BOOL
69 : eq(55, 38) : BOOL
70 : ite(69, 17, 40) : BV:8
71 : ite(68, 17, 70) : BV:8
72 : ite(67, 17, 71) : BV:8
73 : ite(66, 17, 72) : BV:8
74 : ite(65, 17, 73) : BV:8
75 : ite(64, 31, 74) : BV:8
76 : ite(63, 17, 75) : BV:8
77 : ite(62, 17, 76) : BV:8
78 : ite(61, 17, 77) : BV:8
79 : ite(60, 17, 78) : BV:8
80 : ite(59, 17, 79) : BV:8
81 : ite(58, 17, 80) : BV:8
82 : ite(57, 17, 81) : BV:8
83 : ite(56, 14, 82) : BV:8
84 : bvadd(26, 10, 3) : BV:32
85 : eq(84, 12) : BOOL
86 : eq(84, 15) : BOOL
87 : eq(84, 18) : BOOL
88 : eq(84, 20) : BOOL
89 : eq(84, 22) : BOOL
90 : eq(84, 24) : BOOL
91 : eq(84, 26) : BOOL
92 : eq(84, 28) : BOOL
93 : eq(84, 3) : BOOL
94 : eq(84, 32) : BOOL
95 : eq(84, 7) : BOOL
96 : eq(84, 35) : BOOL
97 : eq(84, 8) : BOOL
98 : eq(84, 38) : BOOL
99 : ite(98, 17, 40) : BV:8
100 : ite(97, 17, 99) : BV:8
101 : ite(96, 17, 100) : BV:8
102 : ite(95, 17, 101) : BV:8
103 : ite(94, 17, 102) : BV:8
104 : ite(93, 31, 103) : BV:8
105 : ite(92, 17, 104) : BV:8
106 : ite(91, 17, 105) : BV:8
107 : ite(90, 17, 106) : BV:8
108 : ite(89, 17, 107) : BV:8
109 : ite(88, 17, 108) : BV:8
110 : ite(87, 17, 109) : BV:8
111 : ite(86, 17, 110) : BV:8
112 : ite(85, 14, 111) : BV:8
113 : bvadd(10, 3) : BV:32
114 : eq(113, 12) : BOOL
115 : eq(113, 15) : BOOL
116 : eq(113, 18) : BOOL
117 : eq(113, 20) : BOOL
118 : eq(113, 22) : BOOL
119 : eq(113, 24) : BOOL
120 : eq(113, 26) : BOOL
121 : eq(113, 28) : BOOL
122 : eq(113, 3) : BOOL
123 : eq(113, 32) : BOOL
124 : eq(113, 7) : BOOL
125 : eq(113, 35) : BOOL
126 : eq(113, 8) : BOOL
127 : eq(113, 38) : BOOL
128 : ite(127, 17, 40) : BV:8
129 : ite(126, 17, 128) : BV:8
130 : ite(125, 17, 129) : BV:8
131 : ite(124, 17, 130) : BV:8
132 : ite(123, 17, 131) : BV:8
133 : ite(122, 31, 132) : BV:8
134 : ite(121, 17, 133) : BV:8
135 : ite(120, 17, 134) : BV:8
136 : ite(119, 17, 135) : BV:8
137 : ite(118, 17, 136) : BV:8
138 : ite(117, 17, 137) : BV:8
139 : ite(116, 17, 138) : BV:8
140 : ite(115, 17, 139) : BV:8
141 : ite(114, 14, 140) : BV:8
142 : bvconcat(54, 83, 112, 141) : BV:32
143 : bvadd(7, 9, 142) : BV:32
144 : eq(143, 12) : BOOL
145 : eq(143, 15) : BOOL
146 : eq(143, 18) : BOOL
147 : eq(143, 20) : BOOL
148 : eq(143, 22) : BOOL
149 : eq(143, 24) : BOOL
150 : eq(143, 26) : BOOL
151 : eq(143, 28) : BOOL
152 : eq(143, 3) : BOOL
153 : eq(143, 32) : BOOL
154 : eq(143, 7) : BOOL
155 : eq(143, 35) : BOOL
156 : eq(143, 8) : BOOL
157 : eq(143, 38) : BOOL
158 : ite(157, 17, 40) : BV:8
159 : ite(156, 17, 158) : BV:8
160 : ite(155, 17, 159) : BV:8
161 : ite(154, 17, 160) : BV:8
162 : ite(153, 17, 161) : BV:8
163 : ite(152, 31, 162) : BV:8
164 : ite(151, 17, 163) : BV:8
165 : ite(150, 17, 164) : BV:8
166 : ite(149, 17, 165) : BV:8
167 : ite(148, 17, 166) : BV:8
168 : ite(147, 17, 167) : BV:8
169 : ite(146, 17, 168) : BV:8
170 : ite(145, 17, 169) : BV:8
171 : ite(144, 14, 170) : BV:8
172 : bvadd(38, 9, 142) : BV:32
173 : eq(172, 12) : BOOL
174 : eq(172, 15) : BOOL
175 : eq(172, 18) : BOOL
176 : eq(172, 20) : BOOL
177 : eq(172, 22) : BOOL
178 : eq(172, 24) : BOOL
179 : eq(172, 26) : BOOL
180 : eq(172, 28) : BOOL
181 : eq(172, 3) : BOOL
182 : eq(172, 32) : BOOL
183 : eq(172, 7) : BOOL
184 : eq(172, 35) : BOOL
185 : eq(172, 8) : BOOL
186 : eq(172, 38) : BOOL
187 : ite(186, 17, 40) : BV:8
188 : ite(185, 17, 187) : BV:8
189 : ite(184, 17, 188) : BV:8
190 : ite(183, 17, 189) : BV:8
191 : ite(182, 17, 190) : BV:8
192 : ite(181, 31, 191) : BV:8
193 : ite(180, 17, 192) : BV:8
194 : ite(179, 17, 193) : BV:8
195 : ite(178, 17, 194) : BV:8
196 : ite(177, 17, 195) : BV:8
197 : ite(176, 17, 196) : BV:8
198 : ite(175, 17, 197) : BV:8
199 : ite(174, 17, 198) : BV:8
200 : ite(173, 14, 199) : BV:8
201 : bvadd(26, 9, 142) : BV:32
202 : eq(201, 12) : BOOL
203 : eq(201, 15) : BOOL
204 : eq(201, 18) : BOOL
205 : eq(201, 20) : BOOL
206 : eq(201, 22) : BOOL
207 : eq(201, 24) : BOOL
208 : eq(201, 26) : BOOL
209 : eq(201, 28) : BOOL
210 : eq(201, 3) : BOOL
211 : eq(201, 32) : BOOL
212 : eq(201, 7) : BOOL
213 : eq(201, 35) : BOOL
214 : eq(201, 8) : BOOL
215 : eq(201, 38) : BOOL
216 : ite(215, 17, 40) : BV:8
217 : ite(214, 17, 216) : BV:8
218 : ite(213, 17, 217) : BV:8
219 : ite(212, 17, 218) : BV:8
220 : ite(211, 17, 219) : BV:8
221 : ite(210, 31, 220) : BV:8
222 : ite(209, 17, 221) : BV:8
223 : ite(208, 17, 222) : BV:8
224 : ite(207, 17, 223) : BV:8
225 : ite(206, 17, 224) : BV:8
226 : ite(205, 17, 225) : BV:8
227 : ite(204, 17, 226) : BV:8
228 : ite(203, 17, 227) : BV:8
229 : ite(202, 14, 228) : BV:8
230 : bvadd(9, 142) : BV:32
231 : eq(230, 12) : BOOL
232 : eq(230, 15) : BOOL
233 : eq(230, 18) : BOOL
234 : eq(230, 20) : BOOL
235 : eq(230, 22) : BOOL
236 : eq(230, 24) : BOOL
237 : eq(230, 26) : BOOL
238 : eq(230, 28) : BOOL
239 : eq(230, 3) : BOOL
240 : eq(230, 32) : BOOL
241 : eq(230, 7) : BOOL
242 : eq(230, 35) : BOOL
243 : eq(230, 8) : BOOL
244 : eq(230, 38) : BOOL
245 : ite(244, 17, 40) : BV:8
246 : ite(243, 17, 245) : BV:8
247 : ite(242, 17, 246) : BV:8
248 : ite(241, 17, 247) : BV:8
249 : ite(240, 17, 248) : BV:8
250 : ite(239, 31, 249) : BV:8
251 : ite(238, 17, 250) : BV:8
252 : ite(237, 17, 251) : BV:8
253 : ite(236, 17, 252) : BV:8
254 : ite(235, 17, 253) : BV:8
255 : ite(234, 17, 254) : BV:8
256 : ite(233, 17, 255) : BV:8
257 : ite(232, 17, 256) : BV:8
258 : ite(231, 14, 257) : BV:8
259 : bvconcat(171, 200, 229, 258) : BV:32
260 : ite(6, 3, 259) : BV:32
261 : ite(6, 3, 260) : BV:32
262 : lambda(1, 2, 261) : FUNCTION[BV:32,BV:32 -> BV:32]
263 : sym_const(262) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-a-0.L3%7%bbentry.0.1
1 : ([ 0; 2155873407 ] -> true, [ 2155873408; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-a-0.L3%7%bbentry.1.1.0.1
1 : Lambda41495Var : BV:32
2 : Lambda41496Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2155873407 { 0x8080047f -2139093889 -1.13720e130 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2155873408 { 0x80800480 -2139093888 -1.13732e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2155873409 { 0x80800481 -2139093887 -1.13744e130 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 14) : BOOL
28 : and(26, 27) : BOOL
29 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-a-1.1.1.0.1
1 : Lambda41500Var : BV:32
2 : Lambda41501Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2155873407 { 0x8080047f -2139093889 -1.13720e130 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2155873408 { 0x80800480 -2139093888 -1.13732e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2155873409 { 0x80800481 -2139093887 -1.13744e130 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 14) : BOOL
28 : and(26, 27) : BOOL
29 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=counter_example.random_seed
1228899724
=counter_example_end


</MSG>
<MSG>4:09 : Discovered that the correlation was useless for the product-TFG foo.A1.B2 (d:3, s:0, sp: 5)...</MSG>
<MSG>4:09 : Chose (for CE propagation) product-TFG foo.A1.B1 (d:3, s:0, sp: 5) from a frontier of size 3...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 14 counterexamples (for correlating 7 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%7%bbentry[mu 0, delta {0,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>4:09 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B1...</MSG>
<MSG>4:09 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B1...</MSG>
<MSG>4:09 : Creating ssa-path for the src-tfg path L3%7%bbentry --> L3%7%bbentry ending at L3%7%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:09 : Adding a CG edge composition using the src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:09 : Identifying common alloc-deallocs in the src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry
</MSG>
<MSG>4:09 : Identified no common alloc-deallocs in the src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:09 : Adding new edge to the product-TFG foo.A1.B1 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%7%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>4:09 : foo.A1.B1: Computing loop hoisting select expressions at toPC L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:09 : foo.A1.B1: Computing loop hoisting non-linear expressions at toPC L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:09 : foo.A1.B1: Adding node L3%7%bbentry_Lfor.cond1%1%bbentry to the product-TFG...</MSG>
<MSG>4:09 : foo.A1.B1: Getting alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:09 : foo.A1.B1: Found no alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:09 : foo.A1.B1: Adding edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:09 : foo.A1.B1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>4:09 : foo.A1.B1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>4:09 : foo.A1.B1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>4:09 : foo.A1.B1: Propagated 7 out of 14 counter-examples across edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry</MSG>
<MSG>4:09 : foo.A1.B1: Added the 7 propagated CEs at PC L3%7%bbentry_Lfor.cond1%1%bbentry and propagated further.
</MSG>
<MSG>4:09 : foo.A1.B1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>4:09 : foo.A1.B1: Finished executing CG's add edge function...</MSG>
<MSG>4:09 : foo.A1.B1: Computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:09 : foo.A1.B1: Done computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:09 : Done adding new edge to the product-TFG foo.A1.B1 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%7%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>4:09 : Done adding a CG edge composition using the src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:09 : Added correlation to the product-TFG foo.A1.B1 (d:4, s:0, sp: 5) and created a correlation entry...</MSG>
<MSG>4:09 : Chose (after CE propagation) product-TFG foo.A1.B1 (d:4, s:0, sp: 5) from a frontier of size 3...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%7%bbentry at mu 0 delta {0,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 14 counterexamples (for correlating 7 bv exprs)
            L3%7%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry, A (line 4 at column 28))
                L3%7%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 7 counterexamples (for correlating 9 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%7%bbentry[mu 0, delta {0,0}]
<MSG>4:09 : foo.A1.B1: Updating invariants over the newly added edges in edge composition L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>4:09 : Constructed infer_invariants_dfa with initial worklist L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:09 : foo.A1.B1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:09 : foo.A1.B1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>4:09 : foo.A1.B1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>4:09 : foo.A1.B1: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:09 : foo.A1.B1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:09 : foo.A1.B1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:09 : foo.A1.B1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 9 exprs and 2 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:10 : foo.A1.B1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht11-prove_trivial6-prove5...</MSG>
<MSG>4:10 : foo.A1.B1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:10 : foo.A1.B1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:10 : foo.A1.B1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:11 : foo.A1.B1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>4:11 : foo.A1.B1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:11 : foo.A1.B1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>4:11 : foo.A1.B1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:11 : foo.A1.B1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:11 : foo.A1.B1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:11 : foo.A1.B1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:11 : foo.A1.B1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:12 : foo.A1.B1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht10-prove_trivial5-prove5...</MSG>
<MSG>4:12 : foo.A1.B1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 14 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:16 : foo.A1.B1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht15-prove_trivial2-prove13...</MSG>
<MSG>4:16 : foo.A1.B1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:16 : foo.A1.B1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:16 : foo.A1.B1: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry), result: changed ...</MSG>
<MSG>4:16 : foo.A1.B1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>4:16 : foo.A1.B1 (d:6, s:0, sp: 5): checked newly added edge and inferred invariants...</MSG>
<MSG>4:16 : foo.A1.B1 (d:6, s:0, sp: 18): Chosen CG is no longer the most promising correlation entry; returning delayed-exploration...</MSG>
<MSG>4:16 : Chosen product-TFG foo.A1.B1 will be explored later...</MSG>
<MSG>4:16 : Decided to explore product-TFG later after re-evaluating its best-first-search rank...</MSG>
<MSG>4:16 : Chose (after CE propagation) product-TFG foo.A1.B3 (d:6, s:0, sp: 5) from a frontier of size 3...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%11%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 14 counterexamples (for correlating 7 bv exprs)
            L3%11%bbentry_Lfor.cond1%1%bbentry (C L3%11%bbentry, A (line 4 at column 28))
                L3%11%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 5 counterexamples (for correlating 9 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%11%bbentry[mu 1, delta {1,0}]
<MSG>4:16 : foo.A1.B3: Updating invariants over the newly added edges in edge composition L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>4:16 : Constructed infer_invariants_dfa with initial worklist L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:16 : foo.A1.B3: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:16 : foo.A1.B3: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>4:16 : foo.A1.B3: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>4:16 : foo.A1.B3: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:16 : foo.A1.B3: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:16 : foo.A1.B3: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:16 : foo.A1.B3: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 9 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:17 : foo.A1.B3: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht9-prove_trivial6-prove3...</MSG>
<MSG>4:17 : foo.A1.B3: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:17 : foo.A1.B3: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:17 : foo.A1.B3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:17 : foo.A1.B3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>4:17 : foo.A1.B3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:18 : foo.A1.B3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:18 : foo.A1.B3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:18 : foo.A1.B3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:18 : foo.A1.B3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:18 : foo.A1.B3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:18 : foo.A1.B3: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:18 : foo.A1.B3: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht10-prove_trivial5-prove5...</MSG>
<MSG>4:18 : foo.A1.B3: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:22 : foo.A1.B3: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht12-prove_trivial2-prove10...</MSG>
<MSG>4:22 : foo.A1.B3: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:22 : foo.A1.B3: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:22 : foo.A1.B3: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry), result: changed ...</MSG>
<MSG>4:22 : foo.A1.B3: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>4:22 : foo.A1.B3 (d:6, s:0, sp: 5): checked newly added edge and inferred invariants...</MSG>
<MSG>4:22 : foo.A1.B3 (d:6, s:0, sp: 14): Chosen CG is no longer the most promising correlation entry; returning delayed-exploration...</MSG>
<MSG>4:22 : Chosen product-TFG foo.A1.B3 will be explored later...</MSG>
<MSG>4:22 : Decided to explore product-TFG later after re-evaluating its best-first-search rank...</MSG>
<MSG>4:22 : Chose (after CE propagation) product-TFG foo.A1.B4 (d:6, s:0, sp: 5) from a frontier of size 3...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%19%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 14 counterexamples (for correlating 7 bv exprs)
            L3%19%bbentry_Lfor.cond1%1%bbentry (C L3%19%bbentry, A (line 4 at column 28))
                L3%19%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 5 counterexamples (for correlating 12 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%19%bbentry[mu 1, delta {1,0}]
<MSG>4:22 : foo.A1.B4: Updating invariants over the newly added edges in edge composition L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>4:22 : Constructed infer_invariants_dfa with initial worklist L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:22 : foo.A1.B4: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:22 : foo.A1.B4: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>4:22 : foo.A1.B4: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>4:22 : foo.A1.B4: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:22 : foo.A1.B4: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:22 : foo.A1.B4: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:22 : foo.A1.B4: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 12 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:23 : foo.A1.B4: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht12-prove_trivial8-prove4...</MSG>
<MSG>4:23 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:23 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:23 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:23 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial0-prove4...</MSG>
<MSG>4:23 : foo.A1.B4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:23 : foo.A1.B4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>4:23 : foo.A1.B4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:24 : foo.A1.B4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:24 : foo.A1.B4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:24 : foo.A1.B4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:24 : foo.A1.B4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:24 : foo.A1.B4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:24 : foo.A1.B4: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:24 : foo.A1.B4: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht10-prove_trivial5-prove5...</MSG>
<MSG>4:24 : foo.A1.B4: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 13 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:26 : foo.A1.B4: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht14-prove_trivial2-prove12...</MSG>
<MSG>4:26 : foo.A1.B4: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:26 : foo.A1.B4: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:26 : foo.A1.B4: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: changed ...</MSG>
<MSG>4:26 : foo.A1.B4: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>4:26 : foo.A1.B4 (d:6, s:0, sp: 5): checked newly added edge and inferred invariants...</MSG>
<MSG>4:26 : foo.A1.B4 (d:6, s:0, sp: 14): Chosen CG is no longer the most promising correlation entry; returning delayed-exploration...</MSG>
<MSG>4:26 : Chosen product-TFG foo.A1.B4 will be explored later...</MSG>
<MSG>4:26 : Decided to explore product-TFG later after re-evaluating its best-first-search rank...</MSG>
<MSG>4:26 : Chose (after CE propagation) product-TFG foo.A1.B3 (d:6, s:0, sp: 14) from a frontier of size 3...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%11%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 14 counterexamples (for correlating 7 bv exprs)
            L3%11%bbentry_Lfor.cond1%1%bbentry (C L3%11%bbentry, A (line 4 at column 28))
                L3%11%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 10 counterexamples (for correlating 9 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%11%bbentry[mu 1, delta {1,0}]
<MSG>4:26 : foo.A1.B3: Updating invariants over the newly added edges in edge composition L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>4:26 : Constructed infer_invariants_dfa with initial worklist L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:26 : foo.A1.B3: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:26 : foo.A1.B3: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>4:26 : foo.A1.B3: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>4:26 : foo.A1.B3: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:26 : foo.A1.B3: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:26 : foo.A1.B3: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:26 : foo.A1.B3: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 9 exprs and 7 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:26 : foo.A1.B3: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial6-prove1...</MSG>
<MSG>4:26 : foo.A1.B3: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:26 : foo.A1.B3: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:26 : foo.A1.B3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:26 : foo.A1.B3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:26 : foo.A1.B3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:26 : foo.A1.B3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:26 : foo.A1.B3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:26 : foo.A1.B3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:26 : foo.A1.B3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:26 : foo.A1.B3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:26 : foo.A1.B3: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:26 : foo.A1.B3: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht10-prove_trivial5-prove5...</MSG>
<MSG>4:26 : foo.A1.B3: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:26 : foo.A1.B3: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial2-prove1...</MSG>
<MSG>4:26 : foo.A1.B3: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:26 : foo.A1.B3: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:26 : foo.A1.B3: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>4:26 : foo.A1.B3: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>4:26 : foo.A1.B3 (d:6, s:0, sp: 14): checked newly added edge and inferred invariants...</MSG>
<MSG>4:26 : foo.A1.B3 (d:6, s:0, sp: 14): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>4:26 : product-TFG foo.A1.B3: Enumerating correlations for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L3%11%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:26 : Considering 1 paths to src pc L3%7%bbentry as correlation candidates for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%11%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:26 : Attempting correlation of src pathset L3%11%bbentry=>L3%7%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%11%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:26 : Found 1 feasible correlations for paths to src pc L3%7%bbentry as correlation candidates for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%11%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:26 : product-TFG foo.A1.B3: Found 1 correlations for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L3%11%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:26 : product-TFG foo.A1.B3 created 1 possibilities in group foo.A1.B3.C...</MSG>
<MSG>4:26 : Chose (for CE propagation) product-TFG foo.A1.B3.C1 (d:6, s:0, sp: 14) from a frontier of size 3...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%11%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 14 counterexamples (for correlating 7 bv exprs)
            L3%11%bbentry_Lfor.cond1%1%bbentry (C L3%11%bbentry, A (line 4 at column 28))
                L3%11%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 12 counterexamples (for correlating 9 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%11%bbentry=>L3%7%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>4:26 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B3.C1...</MSG>
<MSG>4:26 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B3.C1...</MSG>
<MSG>4:26 : Creating ssa-path for the src-tfg path L3%11%bbentry --> L3%7%bbentry ending at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>4:26 : Adding a CG edge composition using the src path L3%11%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry</MSG>
<MSG>4:26 : Identifying common alloc-deallocs in the src path L3%11%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry
</MSG>
<MSG>4:26 : Identified no common alloc-deallocs in the src path L3%11%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry</MSG>
<MSG>4:26 : Adding new edge to the product-TFG foo.A1.B3.C1 for fromPC L3%11%bbentry_Lfor.cond1%1%bbentry and toPC L3%7%bbentry_Lfor.cond%1%bbentry, src path L3%11%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry...</MSG>
<MSG>4:26 : foo.A1.B3.C1: Getting alloca-ptrs on edge L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>4:26 : foo.A1.B3.C1: Found no alloca-ptrs on edge L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>4:26 : foo.A1.B3.C1: Adding edge L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>4:26 : foo.A1.B3.C1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>4:26 : foo.A1.B3.C1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>4:26 : foo.A1.B3.C1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>4:28 : foo.A1.B3.C1: Propagated 7 out of 12 counter-examples across edge L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry</MSG>
<MSG>4:33 : foo.A1.B3.C1: Added the 7 propagated CEs at PC L3%7%bbentry_Lfor.cond%1%bbentry and propagated further.
</MSG>
<MSG>4:33 : foo.A1.B3.C1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>4:33 : foo.A1.B3.C1: Finished executing CG's add edge function...</MSG>
<MSG>4:33 : foo.A1.B3.C1: Computing CG regions after the addition of the edge L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>4:33 : foo.A1.B3.C1: Done computing CG regions after the addition of the edge L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>4:33 : Done adding new edge to the product-TFG foo.A1.B3.C1 for fromPC L3%11%bbentry_Lfor.cond1%1%bbentry and toPC L3%7%bbentry_Lfor.cond%1%bbentry, src path L3%11%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry...</MSG>
<MSG>4:33 : Done adding a CG edge composition using the src path L3%11%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry</MSG>
<MSG>4:33 : Added correlation to the product-TFG foo.A1.B3.C1 (d:6, s:0, sp: 14) and created a correlation entry...</MSG>
<MSG>4:33 : Chose (after CE propagation) product-TFG foo.A1.B3.C1 (d:6, s:0, sp: 14) from a frontier of size 3...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%11%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%11%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 22 counterexamples (for correlating 7 bv exprs)
            L3%11%bbentry_Lfor.cond1%1%bbentry (C L3%11%bbentry, A (line 4 at column 28))
                L3%11%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 14 counterexamples (for correlating 9 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%11%bbentry=>L3%7%bbentry[mu 1, delta {1,0}]
<MSG>4:33 : foo.A1.B3.C1: Updating invariants over the newly added edges in edge composition L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>4:33 : Constructed infer_invariants_dfa with initial worklist L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>4:33 : foo.A1.B3.C1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:33 : foo.A1.B3.C1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>4:33 : foo.A1.B3.C1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>4:33 : foo.A1.B3.C1: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:33 : foo.A1.B3.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:33 : foo.A1.B3.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:33 : foo.A1.B3.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 9 exprs and 8 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:33 : foo.A1.B3.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht6-prove_trivial5-prove1...</MSG>
<MSG>4:33 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:34 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial1-prove2...</MSG>
<MSG>4:34 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:34 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:34 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:34 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:34 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:34 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial1-prove2...</MSG>
<MSG>4:34 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:34 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:34 : foo.A1.B3.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:34 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial2-prove5...</MSG>
<MSG>4:34 : foo.A1.B3.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:34 : foo.A1.B3.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial2-prove1...</MSG>
<MSG>4:34 : foo.A1.B3.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:34 : foo.A1.B3.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:34 : foo.A1.B3.C1: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>4:34 : foo.A1.B3.C1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>4:34 : foo.A1.B3.C1: Relaxing dst graph's memlabels for edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>4:34 : foo.A1.B3.C1: Done relaxing dst graph's memlabels for edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>4:34 : foo.A1.B3.C1: Checking well-formedness assertions on outgoing edges from L3%11%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>4:35 : foo.A1.B3.C1: Relaxing invariants across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>4:35 : foo.A1.B3.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:35 : foo.A1.B3.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:35 : foo.A1.B3.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 9 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:35 : foo.A1.B3.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial3-prove1...</MSG>
<MSG>4:35 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:36 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht5-prove_trivial0-prove5...</MSG>
<MSG>4:36 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:36 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:36 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:36 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:36 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:36 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:36 : foo.A1.B3.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:36 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:36 : foo.A1.B3.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:36 : foo.A1.B3.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>4:36 : foo.A1.B3.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:36 : foo.A1.B3.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:36 : foo.A1.B3.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:36 : foo.A1.B3.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:36 : foo.A1.B3.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 9 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:36 : foo.A1.B3.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial3-prove1...</MSG>
<MSG>4:36 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:36 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:36 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:36 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:36 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:36 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:36 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:36 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:36 : foo.A1.B3.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:36 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:36 : foo.A1.B3.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:36 : foo.A1.B3.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>4:36 : foo.A1.B3.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:36 : foo.A1.B3.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:36 : foo.A1.B3.C1: Done relaxing invariants across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>4:36 : foo.A1.B3.C1: Done relaxing memlabels and invariants across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>4:36 : foo.A1.B3.C1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:36 : foo.A1.B3.C1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>4:36 : foo.A1.B3.C1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>4:36 : foo.A1.B3.C1: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:36 : foo.A1.B3.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:36 : foo.A1.B3.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:36 : foo.A1.B3.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 9 exprs and 8 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:36 : foo.A1.B3.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht6-prove_trivial5-prove1...</MSG>
<MSG>4:36 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:37 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:37 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:37 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:37 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:37 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:37 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:37 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:37 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:37 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:37 : foo.A1.B3.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 7 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:37 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht6-prove_trivial2-prove4...</MSG>
<MSG>4:37 : foo.A1.B3.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:37 : foo.A1.B3.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial2-prove1...</MSG>
<MSG>4:37 : foo.A1.B3.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:37 : foo.A1.B3.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:37 : foo.A1.B3.C1: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>4:37 : foo.A1.B3.C1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>4:37 : foo.A1.B3.C1: Relaxing dst graph's memlabels for edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>4:37 : foo.A1.B3.C1: Done relaxing dst graph's memlabels for edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>4:37 : foo.A1.B3.C1: Checking well-formedness assertions on outgoing edges from L3%11%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>4:37 : foo.A1.B3.C1: Relaxing invariants across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>4:37 : foo.A1.B3.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:37 : foo.A1.B3.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:37 : foo.A1.B3.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 9 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:37 : foo.A1.B3.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial3-prove1...</MSG>
<MSG>4:37 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:37 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:37 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:37 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:37 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:37 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:37 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:37 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:37 : foo.A1.B3.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:37 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:37 : foo.A1.B3.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:37 : foo.A1.B3.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>4:37 : foo.A1.B3.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:37 : foo.A1.B3.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:37 : foo.A1.B3.C1: Done relaxing invariants across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged ...</MSG>
<MSG>4:37 : foo.A1.B3.C1: Done relaxing memlabels and invariants across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>4:37 : foo.A1.B3.C1 (d:6, s:0, sp: 14): checked newly added edge and inferred invariants...</MSG>
<MSG>4:37 : foo.A1.B3.C1 (d:6, s:0, sp: 14): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>4:38 : product-TFG foo.A1.B3.C1: Enumerating correlations for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] starting at L3%11%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:38 : Considering 2 paths to src pc L3%11%bbentry as correlation candidates for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%11%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:38 : Attempting correlation of src pathset L3%11%bbentry=>L3%11%bbentry[mu 0, delta {0,0}] as correlation candidate for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%11%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:38 : Attempting correlation of src pathset L3%11%bbentry=>L3%11%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%11%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:38 : Found 2 feasible correlations for paths to src pc L3%11%bbentry as correlation candidates for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%11%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:38 : product-TFG foo.A1.B3.C1: Found 2 correlations for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] starting at L3%11%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:38 : product-TFG foo.A1.B3.C1 created 2 possibilities in group foo.A1.B3.C1.D...</MSG>
<MSG>4:38 : Chose (for CE propagation) product-TFG foo.A1.B3.C1.D2 (d:6, s:0, sp: 14) from a frontier of size 4...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%11%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%11%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 29 counterexamples (for correlating 7 bv exprs)
            L3%11%bbentry_Lfor.cond1%1%bbentry (C L3%11%bbentry, A (line 4 at column 28))
                L3%11%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 19 counterexamples (for correlating 9 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%11%bbentry=>L3%11%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>4:38 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B3.C1.D2...</MSG>
<MSG>4:38 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B3.C1.D2...</MSG>
<MSG>4:38 : Creating ssa-path for the src-tfg path L3%11%bbentry --> L3%11%bbentry ending at L3%11%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:38 : Adding a CG edge composition using the src path L3%11%bbentry --> L3%11%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:38 : Identifying common alloc-deallocs in the src path L3%11%bbentry --> L3%11%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry
</MSG>
<MSG>4:38 : Identified no common alloc-deallocs in the src path L3%11%bbentry --> L3%11%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:38 : Adding new edge to the product-TFG foo.A1.B3.C1.D2 for fromPC L3%11%bbentry_Lfor.cond1%1%bbentry and toPC L3%11%bbentry_Lfor.cond1%1%bbentry, src path L3%11%bbentry --> L3%11%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>4:38 : foo.A1.B3.C1.D2: Getting alloca-ptrs on edge L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:38 : foo.A1.B3.C1.D2: Found no alloca-ptrs on edge L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:38 : foo.A1.B3.C1.D2: Adding edge L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:38 : foo.A1.B3.C1.D2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>4:38 : foo.A1.B3.C1.D2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>4:38 : foo.A1.B3.C1.D2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>4:38 : foo.A1.B3.C1.D2: marking unstable at L3%11%bbentry_Lfor.cond1%1%bbentry due to failing condition:
wfcond.from_pcL3%11%bbentry_Lfor.cond1%1%bbentry.to_pcL3%11%bbentry_Lfor.cond1%1%bbentry-dst-edgecond-implies-src-edgecond
140745 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32 : 0
140426 : input.dst.llvm-%m : BV:32                 : 8
140746 : bvult(140745, 140426) : BOOL              : true
208816 : not(140746) : BOOL                        : false
140647 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]] : ( sum(536870912, unit, map(lambda(Lambda65200Var, ite(and(bvule(0, Lambda65200Var), bvule(Lambda65200Var, 7)), true, ite(and(bvule(8, Lambda65200Var), bvule(Lambda65200Var, 4294967295)), false, false))), lambda(Lambda65201Var, ite(eq(Lambda65201Var, 0), 0, bvconcat(ite(eq(bvadd(3, bvmul(4, Lambda65201Var), 32), 3353147636), 32, 0), ite(eq(bvadd(2, bvmul(4, Lambda65201Var), 32), 3353147636), 32, 0), ite(eq(bvadd(1, bvmul(4, Lambda65201Var), 32), 3353147636), 32, 0), ite(eq(bvadd(bvmul(4, Lambda65201Var), 32), 3353147636), 32, 0)))))) )
140303 : 1 { 0x1 +1.0e1025 } : INT                 : 1
140669 : sum_get(140647, 140303) : MAP[BV:32 -> BV:32] : ( map(lambda(Lambda65287Var, ite(and(bvule(0, Lambda65287Var), bvule(Lambda65287Var, 7)), true, ite(and(bvule(8, Lambda65287Var), bvule(Lambda65287Var, 4294967295)), false, false))), lambda(Lambda65288Var, ite(eq(Lambda65288Var, 0), 0, bvconcat(ite(eq(bvadd(3, bvmul(4, Lambda65288Var), 32), 3353147636), 32, 0), ite(eq(bvadd(2, bvmul(4, Lambda65288Var), 32), 3353147636), 32, 0), ite(eq(bvadd(1, bvmul(4, Lambda65288Var), 32), 3353147636), 32, 0), ite(eq(bvadd(bvmul(4, Lambda65288Var), 32), 3353147636), 32, 0))))) )
140286 : 0 { 0x0 +1.0e129 } : BV:32                : 0
170291 : map_get(140669, 140286) : SUM[UNIT,BV:32] : ( sum(ite(ite(and(bvule(0, 0), bvule(0, 7)), true, ite(and(bvule(8, 0), bvule(0, 4294967295)), false, false)), 1, 0), unit, ite(eq(0, 0), 0, bvconcat(ite(eq(bvadd(3, bvmul(4, 0), 32), 3353147636), 32, 0), ite(eq(bvadd(2, bvmul(4, 0), 32), 3353147636), 32, 0), ite(eq(bvadd(1, bvmul(4, 0), 32), 3353147636), 32, 0), ite(eq(bvadd(bvmul(4, 0), 32), 3353147636), 32, 0)))) )
140305 : 0 { 0x0 +1.0e1025 } : INT                 : 0
170327 : sum_is(170291, 140305) : BOOL             : false
140655 : input.spec-%var-a-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]] : ( 214346 = bvconcat(ite(eq(bvadd(3284236387, bvmul(4, Lambda65212Var)), 3353147636), 32, 0), ite(eq(bvadd(3284236386, bvmul(4, Lambda65212Var)), 3353147636), 32, 0), ite(eq(bvadd(3284236385, bvmul(4, Lambda65212Var)), 3353147636), 32, 0), ite(eq(bvadd(3284236384, bvmul(4, Lambda65212Var)), 3353147636), 32, 0));map[214295](lambda(Lambda65211Var, ite(and(bvule(0, Lambda65211Var), bvule(Lambda65211Var, 269182981)), true, ite(and(bvule(269182982, Lambda65211Var), bvule(Lambda65211Var, 4294967295)), false, false))), lambda[214294](Lambda65212Var, map[214293](lambda(Lambda65213Var, ite(and(eq(ite(and(bvule(0, Lambda65212Var), bvule(Lambda65212Var, 269182981)), 0, ite(and(bvule(269182983, Lambda65212Var), bvule(Lambda65212Var, 4294967295)), 269182983, ite(and(bvule(269182982, Lambda65212Var), bvule(Lambda65212Var, 269182982)), 269182982, 269182982))), 0), eq(ite(and(bvule(0, Lambda65213Var), bvule(Lambda65213Var, 7)), 0, ite(and(bvule(8, Lambda65213Var), bvule(Lambda65213Var, 8)), 8, ite(and(bvule(9, Lambda65213Var), bvule(Lambda65213Var, 4294967295)), 9, 9))), 0)), true, false)), lambda[214292](Lambda65214Var, ite[214377](and(eq(Lambda65212Var, 0), eq(Lambda65214Var, 0)), 0, bvconcat[214376](ite[214366](eq[214365](bvadd[214364](3, bvmul(4, Lambda65214Var), 214346), 3353147636), 32, 0), ite[214369](eq[214368](bvadd[214367](2, bvmul(4, Lambda65214Var), 214346), 3353147636), 32, 0), ite[214372](eq[214371](bvadd[214370](1, bvmul(4, Lambda65214Var), 214346), 3353147636), 32, 0), ite[214375](eq[214374](bvadd[214373](bvmul(4, Lambda65214Var), 214346), 3353147636), 32, 0))))))) )
140308 : 1 { 0x1 +1.11e129 } : BV:32               : 1
140656 : input.spec-%var-i-0.L3%7%bbentry : BV:32  : 17227813
140704 : bvadd(140308, 140656) : BV:32             : 17227814
213863 : map_get(140655, 140704) : SUM[UNIT,MAP[BV:32 -> BV:32]] : ( 214422 = bvconcat(ite(eq(bvadd(3284236387, bvmul(4, 17227814)), 3353147636), 32, 0), ite(eq(bvadd(3284236386, bvmul(4, 17227814)), 3353147636), 32, 0), ite(eq(bvadd(3284236385, bvmul(4, 17227814)), 3353147636), 32, 0), ite(eq(bvadd(3284236384, bvmul(4, 17227814)), 3353147636), 32, 0));sum[214482](ite(ite(and(bvule(0, 17227814), bvule(17227814, 269182981)), true, ite(and(bvule(269182982, 17227814), bvule(17227814, 4294967295)), false, false)), 1, 0), unit, map[214481](lambda(Lambda65321Var, ite(and(eq(ite(and(bvule(0, 17227814), bvule(17227814, 269182981)), 0, ite(and(bvule(269182983, 17227814), bvule(17227814, 4294967295)), 269182983, ite(and(bvule(269182982, 17227814), bvule(17227814, 269182982)), 269182982, 269182982))), 0), eq(ite(and(bvule(0, Lambda65321Var), bvule(Lambda65321Var, 7)), 0, ite(and(bvule(8, Lambda65321Var), bvule(Lambda65321Var, 8)), 8, ite(and(bvule(9, Lambda65321Var), bvule(Lambda65321Var, 4294967295)), 9, 9))), 0)), true, false)), lambda[214480](Lambda65322Var, ite[214479](and(eq(17227814, 0), eq(Lambda65322Var, 0)), 0, bvconcat[214478](ite[214443](eq[214424](bvadd[214423](3, bvmul(4, Lambda65322Var), 214422), 3353147636), 32, 0), ite[214446](eq[214445](bvadd[214444](2, bvmul(4, Lambda65322Var), 214422), 3353147636), 32, 0), ite[214474](eq[214458](bvadd[214457](1, bvmul(4, Lambda65322Var), 214422), 3353147636), 32, 0), ite[214477](eq[214476](bvadd[214475](bvmul(4, Lambda65322Var), 214422), 3353147636), 32, 0)))))) )
213864 : sum_is(213863, 140303) : BOOL             : true
214252 : and(170327, 213864) : BOOL                : false
214256 : or(208816, 214252) : BOOL                 : false

ce =
=counter_example_begin z3v487.ce4409 f9589d40578c53ccc83f5a37f9938beb
=input.spec-%var-a-1
1 : Lambda65191Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 269182981 { 0x100b6805 +1.8911192e161 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 269182982 { 0x100b6806 +1.8911204e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda65192Var : BV:32
18 : Lambda65193Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 269182983 { 0x100b6807 +1.8911216e161 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 7 { 0x7 +1.83e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 8 { 0x8 +1.95e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 9 { 0x9 +1.107e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda65194Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 3284236387 { 0xc3c17863 -1010730909 -1.51148641e8 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 3353147636 { 0xc7dcf8f4 -941819660 -1.72634744e16 } : BV:32
82 : eq(80, 81) : BOOL
83 : 32 { 0x20 } : BV:8
84 : 0 { 0x0 } : BV:8
85 : ite(82, 83, 84) : BV:8
86 : 3284236386 { 0xc3c17862 -1010730910 -1.51148629e8 } : BV:32
87 : bvadd(86, 79) : BV:32
88 : eq(87, 81) : BOOL
89 : ite(88, 83, 84) : BV:8
90 : 3284236385 { 0xc3c17861 -1010730911 -1.51148617e8 } : BV:32
91 : bvadd(90, 79) : BV:32
92 : eq(91, 81) : BOOL
93 : ite(92, 83, 84) : BV:8
94 : 3284236384 { 0xc3c17860 -1010730912 -1.51148605e8 } : BV:32
95 : bvadd(94, 79) : BV:32
96 : eq(95, 81) : BOOL
97 : ite(96, 83, 84) : BV:8
98 : bvconcat(85, 89, 93, 97) : BV:32
99 : bvadd(75, 77, 98) : BV:32
100 : eq(99, 81) : BOOL
101 : ite(100, 83, 84) : BV:8
102 : 2 { 0x2 +1.23e129 } : BV:32
103 : bvadd(102, 77, 98) : BV:32
104 : eq(103, 81) : BOOL
105 : ite(104, 83, 84) : BV:8
106 : 1 { 0x1 +1.11e129 } : BV:32
107 : bvadd(106, 77, 98) : BV:32
108 : eq(107, 81) : BOOL
109 : ite(108, 83, 84) : BV:8
110 : bvadd(77, 98) : BV:32
111 : eq(110, 81) : BOOL
112 : ite(111, 83, 84) : BV:8
113 : bvconcat(101, 105, 109, 112) : BV:32
114 : ite(55, 2, 113) : BV:32
115 : ite(74, 113, 114) : BV:32
116 : ite(55, 2, 115) : BV:32
117 : lambda(52, 116) : FUNCTION[BV:32 -> BV:32]
118 : map(51, 117) : MAP[BV:32 -> BV:32]
119 : lambda(17, 118) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
120 : map(16, 119) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
121 : sym_const(120) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-a-0.L3%7%bbentry
1 : Lambda65211Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 269182981 { 0x100b6805 +1.8911192e161 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 269182982 { 0x100b6806 +1.8911204e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda65212Var : BV:32
18 : Lambda65213Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 269182983 { 0x100b6807 +1.8911216e161 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 7 { 0x7 +1.83e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 8 { 0x8 +1.95e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 9 { 0x9 +1.107e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda65214Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 3284236387 { 0xc3c17863 -1010730909 -1.51148641e8 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 3353147636 { 0xc7dcf8f4 -941819660 -1.72634744e16 } : BV:32
63 : eq(61, 62) : BOOL
64 : 32 { 0x20 } : BV:8
65 : 0 { 0x0 } : BV:8
66 : ite(63, 64, 65) : BV:8
67 : 3284236386 { 0xc3c17862 -1010730910 -1.51148629e8 } : BV:32
68 : bvadd(67, 60) : BV:32
69 : eq(68, 62) : BOOL
70 : ite(69, 64, 65) : BV:8
71 : 3284236385 { 0xc3c17861 -1010730911 -1.51148617e8 } : BV:32
72 : bvadd(71, 60) : BV:32
73 : eq(72, 62) : BOOL
74 : ite(73, 64, 65) : BV:8
75 : 3284236384 { 0xc3c17860 -1010730912 -1.51148605e8 } : BV:32
76 : bvadd(75, 60) : BV:32
77 : eq(76, 62) : BOOL
78 : ite(77, 64, 65) : BV:8
79 : bvconcat(66, 70, 74, 78) : BV:32
80 : bvadd(56, 58, 79) : BV:32
81 : eq(80, 62) : BOOL
82 : ite(81, 64, 65) : BV:8
83 : 2 { 0x2 +1.23e129 } : BV:32
84 : bvadd(83, 58, 79) : BV:32
85 : eq(84, 62) : BOOL
86 : ite(85, 64, 65) : BV:8
87 : 1 { 0x1 +1.11e129 } : BV:32
88 : bvadd(87, 58, 79) : BV:32
89 : eq(88, 62) : BOOL
90 : ite(89, 64, 65) : BV:8
91 : bvadd(58, 79) : BV:32
92 : eq(91, 62) : BOOL
93 : ite(92, 64, 65) : BV:8
94 : bvconcat(82, 86, 90, 93) : BV:32
95 : ite(55, 2, 94) : BV:32
96 : lambda(52, 95) : FUNCTION[BV:32 -> BV:32]
97 : map(51, 96) : MAP[BV:32 -> BV:32]
98 : lambda(17, 97) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
99 : map(16, 98) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
100 : sym_const(99) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 3353147635 ] -> 0, [ 3353147636; 3353147636 ] -> 32, [ 3353147637; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 25553119 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 25553120; 25553123 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 25553124; 31486751 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 31486752; 31486755 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 31486756; 4127195139 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 4127195140; 4127195143 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 4127195144; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%n
1 : 269182982 { 0x100b6806 +1.8911204e161 } : BV:32
=input.dst.llvm-%m
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 31486752 { 0x1e07320 +1.75351333e132 } : BV:32
=input.dst.llvm-%arr
1 : 3284236384 { 0xc3c17860 -1010730912 -1.51148605e8 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 25553120 { 0x185e8e0 +1.4616928e132 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4127195140 { 0xf6000004 -167772156 -1.47e109 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 17227813 { 0x106e025 +1.5371534e131 } : BV:32
=input.spec-%var-x-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 17227813 { 0x106e025 +1.5371534e131 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 31486752 { 0x1e07320 +1.75351333e132 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 31486755 { 0x1e07323 +1.75351369e132 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 25553120 { 0x185e8e0 +1.4616928e132 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 25553123 { 0x185e8e3 +1.4616963e132 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4127195140 { 0xf6000004 -167772156 -1.47e109 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 4127195143 { 0xf6000007 -167772153 -1.83e109 } : BV:32
=input.spec-%var-a-1.0.1
1 : ([ 0; 269182981 ] -> true, [ 269182982; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-a-1.1.1.1.1
1 : Lambda65070Var : BV:32
2 : Lambda65071Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 269182981 { 0x100b6805 +1.8911192e161 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 269182982 { 0x100b6806 +1.8911204e161 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 269182983 { 0x100b6807 +1.8911216e161 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 7 { 0x7 +1.83e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 8 { 0x8 +1.95e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 9 { 0x9 +1.107e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 3284236387 { 0xc3c17863 -1010730909 -1.51148641e8 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 3353147636 { 0xc7dcf8f4 -941819660 -1.72634744e16 } : BV:32
55 : eq(53, 54) : BOOL
56 : 32 { 0x20 } : BV:8
57 : 0 { 0x0 } : BV:8
58 : ite(55, 56, 57) : BV:8
59 : 3284236386 { 0xc3c17862 -1010730910 -1.51148629e8 } : BV:32
60 : bvadd(59, 52) : BV:32
61 : eq(60, 54) : BOOL
62 : ite(61, 56, 57) : BV:8
63 : 3284236385 { 0xc3c17861 -1010730911 -1.51148617e8 } : BV:32
64 : bvadd(63, 52) : BV:32
65 : eq(64, 54) : BOOL
66 : ite(65, 56, 57) : BV:8
67 : 3284236384 { 0xc3c17860 -1010730912 -1.51148605e8 } : BV:32
68 : bvadd(67, 52) : BV:32
69 : eq(68, 54) : BOOL
70 : ite(69, 56, 57) : BV:8
71 : bvconcat(58, 62, 66, 70) : BV:32
72 : bvadd(48, 50, 71) : BV:32
73 : eq(72, 54) : BOOL
74 : ite(73, 56, 57) : BV:8
75 : 2 { 0x2 +1.23e129 } : BV:32
76 : bvadd(75, 50, 71) : BV:32
77 : eq(76, 54) : BOOL
78 : ite(77, 56, 57) : BV:8
79 : 1 { 0x1 +1.11e129 } : BV:32
80 : bvadd(79, 50, 71) : BV:32
81 : eq(80, 54) : BOOL
82 : ite(81, 56, 57) : BV:8
83 : bvadd(50, 71) : BV:32
84 : eq(83, 54) : BOOL
85 : ite(84, 56, 57) : BV:8
86 : bvconcat(74, 78, 82, 85) : BV:32
87 : ite(6, 3, 86) : BV:32
88 : ite(47, 86, 87) : BV:32
89 : ite(6, 3, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-a-0.L3%7%bbentry.1.1.1.1
1 : Lambda65077Var : BV:32
2 : Lambda65078Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 3284236387 { 0xc3c17863 -1010730909 -1.51148641e8 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 3353147636 { 0xc7dcf8f4 -941819660 -1.72634744e16 } : BV:32
14 : eq(12, 13) : BOOL
15 : 32 { 0x20 } : BV:8
16 : 0 { 0x0 } : BV:8
17 : ite(14, 15, 16) : BV:8
18 : 3284236386 { 0xc3c17862 -1010730910 -1.51148629e8 } : BV:32
19 : bvadd(18, 11) : BV:32
20 : eq(19, 13) : BOOL
21 : ite(20, 15, 16) : BV:8
22 : 3284236385 { 0xc3c17861 -1010730911 -1.51148617e8 } : BV:32
23 : bvadd(22, 11) : BV:32
24 : eq(23, 13) : BOOL
25 : ite(24, 15, 16) : BV:8
26 : 3284236384 { 0xc3c17860 -1010730912 -1.51148605e8 } : BV:32
27 : bvadd(26, 11) : BV:32
28 : eq(27, 13) : BOOL
29 : ite(28, 15, 16) : BV:8
30 : bvconcat(17, 21, 25, 29) : BV:32
31 : bvadd(7, 9, 30) : BV:32
32 : eq(31, 13) : BOOL
33 : ite(32, 15, 16) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 9, 30) : BV:32
36 : eq(35, 13) : BOOL
37 : ite(36, 15, 16) : BV:8
38 : 1 { 0x1 +1.11e129 } : BV:32
39 : bvadd(38, 9, 30) : BV:32
40 : eq(39, 13) : BOOL
41 : ite(40, 15, 16) : BV:8
42 : bvadd(9, 30) : BV:32
43 : eq(42, 13) : BOOL
44 : ite(43, 15, 16) : BV:8
45 : bvconcat(33, 37, 41, 44) : BV:32
46 : ite(6, 3, 45) : BV:32
47 : lambda(1, 2, 46) : FUNCTION[BV:32,BV:32 -> BV:32]
48 : sym_const(47) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-a-0.L3%7%bbentry.0.1
1 : ([ 0; 269182981 ] -> true, [ 269182982; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-a-0.L3%7%bbentry.1.1.0.1
1 : Lambda65081Var : BV:32
2 : Lambda65082Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 269182981 { 0x100b6805 +1.8911192e161 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 269182983 { 0x100b6807 +1.8911216e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 269182982 { 0x100b6806 +1.8911204e161 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 7 { 0x7 +1.83e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 8 { 0x8 +1.95e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 9 { 0x9 +1.107e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-a-1.1.1.0.1
1 : Lambda65072Var : BV:32
2 : Lambda65073Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 269182981 { 0x100b6805 +1.8911192e161 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 269182983 { 0x100b6807 +1.8911216e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 269182982 { 0x100b6806 +1.8911204e161 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 7 { 0x7 +1.83e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 8 { 0x8 +1.95e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 9 { 0x9 +1.107e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
2 : unit : UNIT
3 : Lambda65200Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 7 { 0x7 +1.83e129 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 8 { 0x8 +1.95e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda65201Var : BV:32
20 : eq(19, 4) : BOOL
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 19) : BV:32
24 : 32 { 0x20 +1.381e129 } : BV:32
25 : bvadd(21, 23, 24) : BV:32
26 : 3353147636 { 0xc7dcf8f4 -941819660 -1.72634744e16 } : BV:32
27 : eq(25, 26) : BOOL
28 : 32 { 0x20 } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : 2 { 0x2 +1.23e129 } : BV:32
32 : bvadd(31, 23, 24) : BV:32
33 : eq(32, 26) : BOOL
34 : ite(33, 28, 29) : BV:8
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : bvadd(35, 23, 24) : BV:32
37 : eq(36, 26) : BOOL
38 : ite(37, 28, 29) : BV:8
39 : bvadd(23, 24) : BV:32
40 : eq(39, 26) : BOOL
41 : ite(40, 28, 29) : BV:8
42 : bvconcat(30, 34, 38, 41) : BV:32
43 : ite(20, 4, 42) : BV:32
44 : lambda(19, 43) : FUNCTION[BV:32 -> BV:32]
45 : map(18, 44) : MAP[BV:32 -> BV:32]
46 : sum(1, 2, 45) : SUM[UNIT,MAP[BV:32 -> BV:32]]
47 : sym_const(46) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.0
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 7 ] -> true, [ 8; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda65088Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 32 { 0x20 +1.381e129 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 3353147636 { 0xc7dcf8f4 -941819660 -1.72634744e16 } : BV:32
10 : eq(8, 9) : BOOL
11 : 32 { 0x20 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : ite(3, 2, 25) : BV:32
27 : lambda(1, 26) : FUNCTION[BV:32 -> BV:32]
28 : sym_const(27) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
667326344
=counter_example_end


failcond-expr = or(not(bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)), and(sum_is(map_get(sum_get(input.spec-%tmpvar-7.L3%8%d, 1), 0), 0), sum_is(map_get(input.spec-%var-a-0.L3%7%bbentry, bvadd(1, input.spec-%var-i-0.L3%7%bbentry)), 1))):
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
4 : not(3) : BOOL
5 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
6 : 1 { 0x1 +1.0e1025 } : INT
7 : sum_get(5, 6) : MAP[BV:32 -> BV:32]
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : map_get(7, 8) : SUM[UNIT,BV:32]
10 : 0 { 0x0 +1.0e1025 } : INT
11 : sum_is(9, 10) : BOOL
12 : input.spec-%var-a-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
13 : 1 { 0x1 +1.11e129 } : BV:32
14 : input.spec-%var-i-0.L3%7%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : map_get(12, 15) : SUM[UNIT,MAP[BV:32 -> BV:32]]
17 : sum_is(16, 6) : BOOL
18 : and(11, 17) : BOOL
19 : or(4, 18) : BOOL
</MSG>
<MSG>4:38 : foo.A1.B3.C1.D2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>4:38 : foo.A1.B3.C1.D2: Finished executing CG's add edge function...</MSG>
<MSG>4:38 : foo.A1.B3.C1.D2: Computing CG regions after the addition of the edge L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:38 : foo.A1.B3.C1.D2: Done computing CG regions after the addition of the edge L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:38 : Done adding new edge to the product-TFG foo.A1.B3.C1.D2 for fromPC L3%11%bbentry_Lfor.cond1%1%bbentry and toPC L3%11%bbentry_Lfor.cond1%1%bbentry, src path L3%11%bbentry --> L3%11%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>4:38 : Done adding a CG edge composition using the src path L3%11%bbentry --> L3%11%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:38 : Failed correlation of src pathset L3%11%bbentry=>L3%11%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%11%bbentry_Lfor.cond1%1%bbentry: failcond = wfcond.from_pcL3%11%bbentry_Lfor.cond1%1%bbentry.to_pcL3%11%bbentry_Lfor.cond1%1%bbentry-dst-edgecond-implies-src-edgecond
140745 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32 : 0
140426 : input.dst.llvm-%m : BV:32                 : 8
140746 : bvult(140745, 140426) : BOOL              : true
208816 : not(140746) : BOOL                        : false
140647 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]] : ( sum(536870912, unit, map(lambda(Lambda65200Var, ite(and(bvule(0, Lambda65200Var), bvule(Lambda65200Var, 7)), true, ite(and(bvule(8, Lambda65200Var), bvule(Lambda65200Var, 4294967295)), false, false))), lambda(Lambda65201Var, ite(eq(Lambda65201Var, 0), 0, bvconcat(ite(eq(bvadd(3, bvmul(4, Lambda65201Var), 32), 3353147636), 32, 0), ite(eq(bvadd(2, bvmul(4, Lambda65201Var), 32), 3353147636), 32, 0), ite(eq(bvadd(1, bvmul(4, Lambda65201Var), 32), 3353147636), 32, 0), ite(eq(bvadd(bvmul(4, Lambda65201Var), 32), 3353147636), 32, 0)))))) )
140303 : 1 { 0x1 +1.0e1025 } : INT                 : 1
140669 : sum_get(140647, 140303) : MAP[BV:32 -> BV:32] : ( map(lambda(Lambda65287Var, ite(and(bvule(0, Lambda65287Var), bvule(Lambda65287Var, 7)), true, ite(and(bvule(8, Lambda65287Var), bvule(Lambda65287Var, 4294967295)), false, false))), lambda(Lambda65288Var, ite(eq(Lambda65288Var, 0), 0, bvconcat(ite(eq(bvadd(3, bvmul(4, Lambda65288Var), 32), 3353147636), 32, 0), ite(eq(bvadd(2, bvmul(4, Lambda65288Var), 32), 3353147636), 32, 0), ite(eq(bvadd(1, bvmul(4, Lambda65288Var), 32), 3353147636), 32, 0), ite(eq(bvadd(bvmul(4, Lambda65288Var), 32), 3353147636), 32, 0))))) )
140286 : 0 { 0x0 +1.0e129 } : BV:32                : 0
170291 : map_get(140669, 140286) : SUM[UNIT,BV:32] : ( sum(ite(ite(and(bvule(0, 0), bvule(0, 7)), true, ite(and(bvule(8, 0), bvule(0, 4294967295)), false, false)), 1, 0), unit, ite(eq(0, 0), 0, bvconcat(ite(eq(bvadd(3, bvmul(4, 0), 32), 3353147636), 32, 0), ite(eq(bvadd(2, bvmul(4, 0), 32), 3353147636), 32, 0), ite(eq(bvadd(1, bvmul(4, 0), 32), 3353147636), 32, 0), ite(eq(bvadd(bvmul(4, 0), 32), 3353147636), 32, 0)))) )
140305 : 0 { 0x0 +1.0e1025 } : INT                 : 0
170327 : sum_is(170291, 140305) : BOOL             : false
140655 : input.spec-%var-a-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]] : ( 214346 = bvconcat(ite(eq(bvadd(3284236387, bvmul(4, Lambda65212Var)), 3353147636), 32, 0), ite(eq(bvadd(3284236386, bvmul(4, Lambda65212Var)), 3353147636), 32, 0), ite(eq(bvadd(3284236385, bvmul(4, Lambda65212Var)), 3353147636), 32, 0), ite(eq(bvadd(3284236384, bvmul(4, Lambda65212Var)), 3353147636), 32, 0));map[214295](lambda(Lambda65211Var, ite(and(bvule(0, Lambda65211Var), bvule(Lambda65211Var, 269182981)), true, ite(and(bvule(269182982, Lambda65211Var), bvule(Lambda65211Var, 4294967295)), false, false))), lambda[214294](Lambda65212Var, map[214293](lambda(Lambda65213Var, ite(and(eq(ite(and(bvule(0, Lambda65212Var), bvule(Lambda65212Var, 269182981)), 0, ite(and(bvule(269182983, Lambda65212Var), bvule(Lambda65212Var, 4294967295)), 269182983, ite(and(bvule(269182982, Lambda65212Var), bvule(Lambda65212Var, 269182982)), 269182982, 269182982))), 0), eq(ite(and(bvule(0, Lambda65213Var), bvule(Lambda65213Var, 7)), 0, ite(and(bvule(8, Lambda65213Var), bvule(Lambda65213Var, 8)), 8, ite(and(bvule(9, Lambda65213Var), bvule(Lambda65213Var, 4294967295)), 9, 9))), 0)), true, false)), lambda[214292](Lambda65214Var, ite[214377](and(eq(Lambda65212Var, 0), eq(Lambda65214Var, 0)), 0, bvconcat[214376](ite[214366](eq[214365](bvadd[214364](3, bvmul(4, Lambda65214Var), 214346), 3353147636), 32, 0), ite[214369](eq[214368](bvadd[214367](2, bvmul(4, Lambda65214Var), 214346), 3353147636), 32, 0), ite[214372](eq[214371](bvadd[214370](1, bvmul(4, Lambda65214Var), 214346), 3353147636), 32, 0), ite[214375](eq[214374](bvadd[214373](bvmul(4, Lambda65214Var), 214346), 3353147636), 32, 0))))))) )
140308 : 1 { 0x1 +1.11e129 } : BV:32               : 1
140656 : input.spec-%var-i-0.L3%7%bbentry : BV:32  : 17227813
140704 : bvadd(140308, 140656) : BV:32             : 17227814
213863 : map_get(140655, 140704) : SUM[UNIT,MAP[BV:32 -> BV:32]] : ( 214422 = bvconcat(ite(eq(bvadd(3284236387, bvmul(4, 17227814)), 3353147636), 32, 0), ite(eq(bvadd(3284236386, bvmul(4, 17227814)), 3353147636), 32, 0), ite(eq(bvadd(3284236385, bvmul(4, 17227814)), 3353147636), 32, 0), ite(eq(bvadd(3284236384, bvmul(4, 17227814)), 3353147636), 32, 0));sum[214482](ite(ite(and(bvule(0, 17227814), bvule(17227814, 269182981)), true, ite(and(bvule(269182982, 17227814), bvule(17227814, 4294967295)), false, false)), 1, 0), unit, map[214481](lambda(Lambda65321Var, ite(and(eq(ite(and(bvule(0, 17227814), bvule(17227814, 269182981)), 0, ite(and(bvule(269182983, 17227814), bvule(17227814, 4294967295)), 269182983, ite(and(bvule(269182982, 17227814), bvule(17227814, 269182982)), 269182982, 269182982))), 0), eq(ite(and(bvule(0, Lambda65321Var), bvule(Lambda65321Var, 7)), 0, ite(and(bvule(8, Lambda65321Var), bvule(Lambda65321Var, 8)), 8, ite(and(bvule(9, Lambda65321Var), bvule(Lambda65321Var, 4294967295)), 9, 9))), 0)), true, false)), lambda[214480](Lambda65322Var, ite[214479](and(eq(17227814, 0), eq(Lambda65322Var, 0)), 0, bvconcat[214478](ite[214443](eq[214424](bvadd[214423](3, bvmul(4, Lambda65322Var), 214422), 3353147636), 32, 0), ite[214446](eq[214445](bvadd[214444](2, bvmul(4, Lambda65322Var), 214422), 3353147636), 32, 0), ite[214474](eq[214458](bvadd[214457](1, bvmul(4, Lambda65322Var), 214422), 3353147636), 32, 0), ite[214477](eq[214476](bvadd[214475](bvmul(4, Lambda65322Var), 214422), 3353147636), 32, 0)))))) )
213864 : sum_is(213863, 140303) : BOOL             : true
214252 : and(170327, 213864) : BOOL                : false
214256 : or(208816, 214252) : BOOL                 : false

ce =
=counter_example_begin z3v487.ce4409 f9589d40578c53ccc83f5a37f9938beb
=input.spec-%var-a-1
1 : Lambda65191Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 269182981 { 0x100b6805 +1.8911192e161 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 269182982 { 0x100b6806 +1.8911204e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda65192Var : BV:32
18 : Lambda65193Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 269182983 { 0x100b6807 +1.8911216e161 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 7 { 0x7 +1.83e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 8 { 0x8 +1.95e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 9 { 0x9 +1.107e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda65194Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 3284236387 { 0xc3c17863 -1010730909 -1.51148641e8 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 3353147636 { 0xc7dcf8f4 -941819660 -1.72634744e16 } : BV:32
82 : eq(80, 81) : BOOL
83 : 32 { 0x20 } : BV:8
84 : 0 { 0x0 } : BV:8
85 : ite(82, 83, 84) : BV:8
86 : 3284236386 { 0xc3c17862 -1010730910 -1.51148629e8 } : BV:32
87 : bvadd(86, 79) : BV:32
88 : eq(87, 81) : BOOL
89 : ite(88, 83, 84) : BV:8
90 : 3284236385 { 0xc3c17861 -1010730911 -1.51148617e8 } : BV:32
91 : bvadd(90, 79) : BV:32
92 : eq(91, 81) : BOOL
93 : ite(92, 83, 84) : BV:8
94 : 3284236384 { 0xc3c17860 -1010730912 -1.51148605e8 } : BV:32
95 : bvadd(94, 79) : BV:32
96 : eq(95, 81) : BOOL
97 : ite(96, 83, 84) : BV:8
98 : bvconcat(85, 89, 93, 97) : BV:32
99 : bvadd(75, 77, 98) : BV:32
100 : eq(99, 81) : BOOL
101 : ite(100, 83, 84) : BV:8
102 : 2 { 0x2 +1.23e129 } : BV:32
103 : bvadd(102, 77, 98) : BV:32
104 : eq(103, 81) : BOOL
105 : ite(104, 83, 84) : BV:8
106 : 1 { 0x1 +1.11e129 } : BV:32
107 : bvadd(106, 77, 98) : BV:32
108 : eq(107, 81) : BOOL
109 : ite(108, 83, 84) : BV:8
110 : bvadd(77, 98) : BV:32
111 : eq(110, 81) : BOOL
112 : ite(111, 83, 84) : BV:8
113 : bvconcat(101, 105, 109, 112) : BV:32
114 : ite(55, 2, 113) : BV:32
115 : ite(74, 113, 114) : BV:32
116 : ite(55, 2, 115) : BV:32
117 : lambda(52, 116) : FUNCTION[BV:32 -> BV:32]
118 : map(51, 117) : MAP[BV:32 -> BV:32]
119 : lambda(17, 118) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
120 : map(16, 119) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
121 : sym_const(120) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-a-0.L3%7%bbentry
1 : Lambda65211Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 269182981 { 0x100b6805 +1.8911192e161 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 269182982 { 0x100b6806 +1.8911204e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda65212Var : BV:32
18 : Lambda65213Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 269182983 { 0x100b6807 +1.8911216e161 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 7 { 0x7 +1.83e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 8 { 0x8 +1.95e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 9 { 0x9 +1.107e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda65214Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 3284236387 { 0xc3c17863 -1010730909 -1.51148641e8 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 3353147636 { 0xc7dcf8f4 -941819660 -1.72634744e16 } : BV:32
63 : eq(61, 62) : BOOL
64 : 32 { 0x20 } : BV:8
65 : 0 { 0x0 } : BV:8
66 : ite(63, 64, 65) : BV:8
67 : 3284236386 { 0xc3c17862 -1010730910 -1.51148629e8 } : BV:32
68 : bvadd(67, 60) : BV:32
69 : eq(68, 62) : BOOL
70 : ite(69, 64, 65) : BV:8
71 : 3284236385 { 0xc3c17861 -1010730911 -1.51148617e8 } : BV:32
72 : bvadd(71, 60) : BV:32
73 : eq(72, 62) : BOOL
74 : ite(73, 64, 65) : BV:8
75 : 3284236384 { 0xc3c17860 -1010730912 -1.51148605e8 } : BV:32
76 : bvadd(75, 60) : BV:32
77 : eq(76, 62) : BOOL
78 : ite(77, 64, 65) : BV:8
79 : bvconcat(66, 70, 74, 78) : BV:32
80 : bvadd(56, 58, 79) : BV:32
81 : eq(80, 62) : BOOL
82 : ite(81, 64, 65) : BV:8
83 : 2 { 0x2 +1.23e129 } : BV:32
84 : bvadd(83, 58, 79) : BV:32
85 : eq(84, 62) : BOOL
86 : ite(85, 64, 65) : BV:8
87 : 1 { 0x1 +1.11e129 } : BV:32
88 : bvadd(87, 58, 79) : BV:32
89 : eq(88, 62) : BOOL
90 : ite(89, 64, 65) : BV:8
91 : bvadd(58, 79) : BV:32
92 : eq(91, 62) : BOOL
93 : ite(92, 64, 65) : BV:8
94 : bvconcat(82, 86, 90, 93) : BV:32
95 : ite(55, 2, 94) : BV:32
96 : lambda(52, 95) : FUNCTION[BV:32 -> BV:32]
97 : map(51, 96) : MAP[BV:32 -> BV:32]
98 : lambda(17, 97) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
99 : map(16, 98) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
100 : sym_const(99) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 3353147635 ] -> 0, [ 3353147636; 3353147636 ] -> 32, [ 3353147637; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 25553119 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 25553120; 25553123 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 25553124; 31486751 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 31486752; 31486755 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 31486756; 4127195139 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 4127195140; 4127195143 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 4127195144; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%n
1 : 269182982 { 0x100b6806 +1.8911204e161 } : BV:32
=input.dst.llvm-%m
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 31486752 { 0x1e07320 +1.75351333e132 } : BV:32
=input.dst.llvm-%arr
1 : 3284236384 { 0xc3c17860 -1010730912 -1.51148605e8 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 25553120 { 0x185e8e0 +1.4616928e132 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4127195140 { 0xf6000004 -167772156 -1.47e109 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 17227813 { 0x106e025 +1.5371534e131 } : BV:32
=input.spec-%var-x-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 17227813 { 0x106e025 +1.5371534e131 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 31486752 { 0x1e07320 +1.75351333e132 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 31486755 { 0x1e07323 +1.75351369e132 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 25553120 { 0x185e8e0 +1.4616928e132 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 25553123 { 0x185e8e3 +1.4616963e132 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4127195140 { 0xf6000004 -167772156 -1.47e109 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 4127195143 { 0xf6000007 -167772153 -1.83e109 } : BV:32
=input.spec-%var-a-1.0.1
1 : ([ 0; 269182981 ] -> true, [ 269182982; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-a-1.1.1.1.1
1 : Lambda65070Var : BV:32
2 : Lambda65071Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 269182981 { 0x100b6805 +1.8911192e161 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 269182982 { 0x100b6806 +1.8911204e161 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 269182983 { 0x100b6807 +1.8911216e161 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 7 { 0x7 +1.83e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 8 { 0x8 +1.95e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 9 { 0x9 +1.107e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 3284236387 { 0xc3c17863 -1010730909 -1.51148641e8 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 3353147636 { 0xc7dcf8f4 -941819660 -1.72634744e16 } : BV:32
55 : eq(53, 54) : BOOL
56 : 32 { 0x20 } : BV:8
57 : 0 { 0x0 } : BV:8
58 : ite(55, 56, 57) : BV:8
59 : 3284236386 { 0xc3c17862 -1010730910 -1.51148629e8 } : BV:32
60 : bvadd(59, 52) : BV:32
61 : eq(60, 54) : BOOL
62 : ite(61, 56, 57) : BV:8
63 : 3284236385 { 0xc3c17861 -1010730911 -1.51148617e8 } : BV:32
64 : bvadd(63, 52) : BV:32
65 : eq(64, 54) : BOOL
66 : ite(65, 56, 57) : BV:8
67 : 3284236384 { 0xc3c17860 -1010730912 -1.51148605e8 } : BV:32
68 : bvadd(67, 52) : BV:32
69 : eq(68, 54) : BOOL
70 : ite(69, 56, 57) : BV:8
71 : bvconcat(58, 62, 66, 70) : BV:32
72 : bvadd(48, 50, 71) : BV:32
73 : eq(72, 54) : BOOL
74 : ite(73, 56, 57) : BV:8
75 : 2 { 0x2 +1.23e129 } : BV:32
76 : bvadd(75, 50, 71) : BV:32
77 : eq(76, 54) : BOOL
78 : ite(77, 56, 57) : BV:8
79 : 1 { 0x1 +1.11e129 } : BV:32
80 : bvadd(79, 50, 71) : BV:32
81 : eq(80, 54) : BOOL
82 : ite(81, 56, 57) : BV:8
83 : bvadd(50, 71) : BV:32
84 : eq(83, 54) : BOOL
85 : ite(84, 56, 57) : BV:8
86 : bvconcat(74, 78, 82, 85) : BV:32
87 : ite(6, 3, 86) : BV:32
88 : ite(47, 86, 87) : BV:32
89 : ite(6, 3, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-a-0.L3%7%bbentry.1.1.1.1
1 : Lambda65077Var : BV:32
2 : Lambda65078Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 3284236387 { 0xc3c17863 -1010730909 -1.51148641e8 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 3353147636 { 0xc7dcf8f4 -941819660 -1.72634744e16 } : BV:32
14 : eq(12, 13) : BOOL
15 : 32 { 0x20 } : BV:8
16 : 0 { 0x0 } : BV:8
17 : ite(14, 15, 16) : BV:8
18 : 3284236386 { 0xc3c17862 -1010730910 -1.51148629e8 } : BV:32
19 : bvadd(18, 11) : BV:32
20 : eq(19, 13) : BOOL
21 : ite(20, 15, 16) : BV:8
22 : 3284236385 { 0xc3c17861 -1010730911 -1.51148617e8 } : BV:32
23 : bvadd(22, 11) : BV:32
24 : eq(23, 13) : BOOL
25 : ite(24, 15, 16) : BV:8
26 : 3284236384 { 0xc3c17860 -1010730912 -1.51148605e8 } : BV:32
27 : bvadd(26, 11) : BV:32
28 : eq(27, 13) : BOOL
29 : ite(28, 15, 16) : BV:8
30 : bvconcat(17, 21, 25, 29) : BV:32
31 : bvadd(7, 9, 30) : BV:32
32 : eq(31, 13) : BOOL
33 : ite(32, 15, 16) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 9, 30) : BV:32
36 : eq(35, 13) : BOOL
37 : ite(36, 15, 16) : BV:8
38 : 1 { 0x1 +1.11e129 } : BV:32
39 : bvadd(38, 9, 30) : BV:32
40 : eq(39, 13) : BOOL
41 : ite(40, 15, 16) : BV:8
42 : bvadd(9, 30) : BV:32
43 : eq(42, 13) : BOOL
44 : ite(43, 15, 16) : BV:8
45 : bvconcat(33, 37, 41, 44) : BV:32
46 : ite(6, 3, 45) : BV:32
47 : lambda(1, 2, 46) : FUNCTION[BV:32,BV:32 -> BV:32]
48 : sym_const(47) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-a-0.L3%7%bbentry.0.1
1 : ([ 0; 269182981 ] -> true, [ 269182982; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-a-0.L3%7%bbentry.1.1.0.1
1 : Lambda65081Var : BV:32
2 : Lambda65082Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 269182981 { 0x100b6805 +1.8911192e161 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 269182983 { 0x100b6807 +1.8911216e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 269182982 { 0x100b6806 +1.8911204e161 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 7 { 0x7 +1.83e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 8 { 0x8 +1.95e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 9 { 0x9 +1.107e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-a-1.1.1.0.1
1 : Lambda65072Var : BV:32
2 : Lambda65073Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 269182981 { 0x100b6805 +1.8911192e161 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 269182983 { 0x100b6807 +1.8911216e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 269182982 { 0x100b6806 +1.8911204e161 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 7 { 0x7 +1.83e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 8 { 0x8 +1.95e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 9 { 0x9 +1.107e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
2 : unit : UNIT
3 : Lambda65200Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 7 { 0x7 +1.83e129 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 8 { 0x8 +1.95e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda65201Var : BV:32
20 : eq(19, 4) : BOOL
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 19) : BV:32
24 : 32 { 0x20 +1.381e129 } : BV:32
25 : bvadd(21, 23, 24) : BV:32
26 : 3353147636 { 0xc7dcf8f4 -941819660 -1.72634744e16 } : BV:32
27 : eq(25, 26) : BOOL
28 : 32 { 0x20 } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : 2 { 0x2 +1.23e129 } : BV:32
32 : bvadd(31, 23, 24) : BV:32
33 : eq(32, 26) : BOOL
34 : ite(33, 28, 29) : BV:8
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : bvadd(35, 23, 24) : BV:32
37 : eq(36, 26) : BOOL
38 : ite(37, 28, 29) : BV:8
39 : bvadd(23, 24) : BV:32
40 : eq(39, 26) : BOOL
41 : ite(40, 28, 29) : BV:8
42 : bvconcat(30, 34, 38, 41) : BV:32
43 : ite(20, 4, 42) : BV:32
44 : lambda(19, 43) : FUNCTION[BV:32 -> BV:32]
45 : map(18, 44) : MAP[BV:32 -> BV:32]
46 : sum(1, 2, 45) : SUM[UNIT,MAP[BV:32 -> BV:32]]
47 : sym_const(46) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.0
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 7 ] -> true, [ 8; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda65088Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 32 { 0x20 +1.381e129 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 3353147636 { 0xc7dcf8f4 -941819660 -1.72634744e16 } : BV:32
10 : eq(8, 9) : BOOL
11 : 32 { 0x20 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : ite(3, 2, 25) : BV:32
27 : lambda(1, 26) : FUNCTION[BV:32 -> BV:32]
28 : sym_const(27) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
667326344
=counter_example_end


</MSG>
<MSG>4:38 : Discovered that the correlation was useless for the product-TFG foo.A1.B3.C1.D2 (d:6, s:0, sp: 14)...</MSG>
<MSG>4:38 : Chose (for CE propagation) product-TFG foo.A1.B3.C1.D1 (d:6, s:0, sp: 14) from a frontier of size 3...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%11%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%11%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 29 counterexamples (for correlating 7 bv exprs)
            L3%11%bbentry_Lfor.cond1%1%bbentry (C L3%11%bbentry, A (line 4 at column 28))
                L3%11%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 19 counterexamples (for correlating 9 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%11%bbentry=>L3%11%bbentry[mu 0, delta {0,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>4:38 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B3.C1.D1...</MSG>
<MSG>4:38 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B3.C1.D1...</MSG>
<MSG>4:38 : Creating ssa-path for the src-tfg path L3%11%bbentry --> L3%11%bbentry ending at L3%11%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:38 : Adding a CG edge composition using the src path L3%11%bbentry --> L3%11%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:38 : Identifying common alloc-deallocs in the src path L3%11%bbentry --> L3%11%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry
</MSG>
<MSG>4:38 : Identified no common alloc-deallocs in the src path L3%11%bbentry --> L3%11%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:38 : Adding new edge to the product-TFG foo.A1.B3.C1.D1 for fromPC L3%11%bbentry_Lfor.cond1%1%bbentry and toPC L3%11%bbentry_Lfor.cond1%1%bbentry, src path L3%11%bbentry --> L3%11%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>4:38 : foo.A1.B3.C1.D1: Getting alloca-ptrs on edge L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:38 : foo.A1.B3.C1.D1: Found no alloca-ptrs on edge L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:38 : foo.A1.B3.C1.D1: Adding edge L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:38 : foo.A1.B3.C1.D1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>4:38 : foo.A1.B3.C1.D1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>4:38 : foo.A1.B3.C1.D1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>4:38 : foo.A1.B3.C1.D1: Propagated 2 out of 19 counter-examples across edge L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry</MSG>
<MSG>4:38 : foo.A1.B3.C1.D1: Added the 2 propagated CEs at PC L3%11%bbentry_Lfor.cond1%1%bbentry and propagated further.
</MSG>
<MSG>4:38 : foo.A1.B3.C1.D1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>4:38 : foo.A1.B3.C1.D1: Finished executing CG's add edge function...</MSG>
<MSG>4:38 : foo.A1.B3.C1.D1: Computing CG regions after the addition of the edge L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:38 : foo.A1.B3.C1.D1: Done computing CG regions after the addition of the edge L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:38 : Done adding new edge to the product-TFG foo.A1.B3.C1.D1 for fromPC L3%11%bbentry_Lfor.cond1%1%bbentry and toPC L3%11%bbentry_Lfor.cond1%1%bbentry, src path L3%11%bbentry --> L3%11%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>4:38 : Done adding a CG edge composition using the src path L3%11%bbentry --> L3%11%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:38 : Added correlation to the product-TFG foo.A1.B3.C1.D1 (d:7, s:0, sp: 14) and created a correlation entry...</MSG>
<MSG>4:38 : Chose (after CE propagation) product-TFG foo.A1.B4 (d:6, s:0, sp: 14) from a frontier of size 3...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%19%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 14 counterexamples (for correlating 7 bv exprs)
            L3%19%bbentry_Lfor.cond1%1%bbentry (C L3%19%bbentry, A (line 4 at column 28))
                L3%19%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 10 counterexamples (for correlating 12 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%19%bbentry[mu 1, delta {1,0}]
<MSG>4:38 : foo.A1.B4: Updating invariants over the newly added edges in edge composition L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>4:38 : Constructed infer_invariants_dfa with initial worklist L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:38 : foo.A1.B4: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:38 : foo.A1.B4: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>4:38 : foo.A1.B4: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>4:38 : foo.A1.B4: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:38 : foo.A1.B4: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:38 : foo.A1.B4: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:38 : foo.A1.B4: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 12 exprs and 7 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:38 : foo.A1.B4: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht10-prove_trivial8-prove2...</MSG>
<MSG>4:38 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:38 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:38 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:38 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial0-prove4...</MSG>
<MSG>4:38 : foo.A1.B4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:38 : foo.A1.B4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:38 : foo.A1.B4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:38 : foo.A1.B4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:38 : foo.A1.B4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:38 : foo.A1.B4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:38 : foo.A1.B4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:38 : foo.A1.B4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:38 : foo.A1.B4: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:38 : foo.A1.B4: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht10-prove_trivial5-prove5...</MSG>
<MSG>4:38 : foo.A1.B4: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 13 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:38 : foo.A1.B4: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht5-prove_trivial2-prove3...</MSG>
<MSG>4:38 : foo.A1.B4: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:38 : foo.A1.B4: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:38 : foo.A1.B4: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>4:38 : foo.A1.B4: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>4:38 : foo.A1.B4 (d:6, s:0, sp: 14): checked newly added edge and inferred invariants...</MSG>
<MSG>4:38 : foo.A1.B4 (d:6, s:0, sp: 14): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>4:39 : product-TFG foo.A1.B4: Enumerating correlations for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L3%19%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:39 : Considering 1 paths to src pc L3%7%bbentry as correlation candidates for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%19%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:39 : Attempting correlation of src pathset L3%19%bbentry=>L3%7%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%19%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:39 : Found 1 feasible correlations for paths to src pc L3%7%bbentry as correlation candidates for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%19%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:39 : product-TFG foo.A1.B4: Found 1 correlations for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L3%19%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:39 : product-TFG foo.A1.B4 created 1 possibilities in group foo.A1.B4.C...</MSG>
<MSG>4:39 : Chose (for CE propagation) product-TFG foo.A1.B4.C1 (d:6, s:0, sp: 14) from a frontier of size 3...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%19%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 14 counterexamples (for correlating 7 bv exprs)
            L3%19%bbentry_Lfor.cond1%1%bbentry (C L3%19%bbentry, A (line 4 at column 28))
                L3%19%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 12 counterexamples (for correlating 12 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%19%bbentry=>L3%7%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>4:39 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B4.C1...</MSG>
<MSG>4:39 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B4.C1...</MSG>
<MSG>4:39 : Creating ssa-path for the src-tfg path L3%19%bbentry --> L3%7%bbentry ending at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>4:39 : Adding a CG edge composition using the src path L3%19%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry</MSG>
<MSG>4:39 : Identifying common alloc-deallocs in the src path L3%19%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry
</MSG>
<MSG>4:39 : Identified no common alloc-deallocs in the src path L3%19%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry</MSG>
<MSG>4:39 : Adding new edge to the product-TFG foo.A1.B4.C1 for fromPC L3%19%bbentry_Lfor.cond1%1%bbentry and toPC L3%7%bbentry_Lfor.cond%1%bbentry, src path L3%19%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry...</MSG>
<MSG>4:39 : foo.A1.B4.C1: Getting alloca-ptrs on edge L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>4:39 : foo.A1.B4.C1: Found no alloca-ptrs on edge L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>4:39 : foo.A1.B4.C1: Adding edge L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>4:39 : foo.A1.B4.C1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>4:39 : foo.A1.B4.C1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>4:39 : foo.A1.B4.C1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>4:40 : foo.A1.B4.C1: Propagated 7 out of 12 counter-examples across edge L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry</MSG>
<MSG>4:45 : foo.A1.B4.C1: Added the 7 propagated CEs at PC L3%7%bbentry_Lfor.cond%1%bbentry and propagated further.
</MSG>
<MSG>4:45 : foo.A1.B4.C1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>4:45 : foo.A1.B4.C1: Finished executing CG's add edge function...</MSG>
<MSG>4:45 : foo.A1.B4.C1: Computing CG regions after the addition of the edge L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>4:45 : foo.A1.B4.C1: Done computing CG regions after the addition of the edge L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>4:45 : Done adding new edge to the product-TFG foo.A1.B4.C1 for fromPC L3%19%bbentry_Lfor.cond1%1%bbentry and toPC L3%7%bbentry_Lfor.cond%1%bbentry, src path L3%19%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry...</MSG>
<MSG>4:45 : Done adding a CG edge composition using the src path L3%19%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry</MSG>
<MSG>4:45 : Added correlation to the product-TFG foo.A1.B4.C1 (d:6, s:0, sp: 14) and created a correlation entry...</MSG>
<MSG>4:45 : Chose (after CE propagation) product-TFG foo.A1.B4.C1 (d:6, s:0, sp: 14) from a frontier of size 3...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%19%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%19%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 22 counterexamples (for correlating 7 bv exprs)
            L3%19%bbentry_Lfor.cond1%1%bbentry (C L3%19%bbentry, A (line 4 at column 28))
                L3%19%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 14 counterexamples (for correlating 12 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%19%bbentry=>L3%7%bbentry[mu 1, delta {1,0}]
<MSG>4:45 : foo.A1.B4.C1: Updating invariants over the newly added edges in edge composition L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>4:45 : Constructed infer_invariants_dfa with initial worklist L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>4:45 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:45 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>4:45 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>4:45 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:45 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:45 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:45 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 12 exprs and 8 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:45 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht9-prove_trivial7-prove2...</MSG>
<MSG>4:45 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:45 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:45 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:45 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial0-prove4...</MSG>
<MSG>4:45 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:45 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:45 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:45 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:45 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:45 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial1-prove2...</MSG>
<MSG>4:45 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:45 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:45 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:46 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial2-prove5...</MSG>
<MSG>4:46 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 13 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:46 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht5-prove_trivial2-prove3...</MSG>
<MSG>4:46 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:46 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:46 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>4:46 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>4:46 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>4:46 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>4:46 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%19%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>4:46 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>4:46 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:46 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:46 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 9 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:46 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial3-prove1...</MSG>
<MSG>4:46 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:46 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht4-prove_trivial2-prove2...</MSG>
<MSG>4:46 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:46 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:46 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:46 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:46 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:47 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>4:47 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:47 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:47 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:47 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>4:47 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:47 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:47 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:47 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:47 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 9 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:47 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial3-prove1...</MSG>
<MSG>4:47 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:47 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial2-prove1...</MSG>
<MSG>4:47 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:47 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:47 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:47 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:47 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:47 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>4:47 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:47 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:47 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:47 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>4:47 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:47 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:47 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>4:47 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>4:47 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:47 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>4:47 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>4:47 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:47 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:47 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:47 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 12 exprs and 8 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:47 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht9-prove_trivial7-prove2...</MSG>
<MSG>4:47 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:47 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:47 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:48 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht5-prove_trivial0-prove5...</MSG>
<MSG>4:48 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:48 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:48 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:48 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:48 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:48 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:48 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:48 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:48 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:49 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial2-prove5...</MSG>
<MSG>4:49 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 13 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:49 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht5-prove_trivial2-prove3...</MSG>
<MSG>4:49 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:49 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:49 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:49 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:49 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 12 exprs and 8 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:49 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht9-prove_trivial7-prove2...</MSG>
<MSG>4:49 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:49 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:49 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:49 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial0-prove4...</MSG>
<MSG>4:49 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:49 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:49 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:49 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:49 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:49 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:49 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:49 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:49 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:49 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial2-prove5...</MSG>
<MSG>4:49 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 13 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:49 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht5-prove_trivial2-prove3...</MSG>
<MSG>4:49 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:49 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:49 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: changed ...</MSG>
<MSG>4:49 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>4:49 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>4:49 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>4:49 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%19%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>4:49 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>4:49 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:49 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:49 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 9 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:49 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial3-prove1...</MSG>
<MSG>4:49 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:50 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht4-prove_trivial1-prove3...</MSG>
<MSG>4:50 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:50 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:50 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:50 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:50 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:50 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>4:50 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:50 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:50 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:50 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>4:50 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:50 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:50 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:50 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:50 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 9 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:50 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial3-prove1...</MSG>
<MSG>4:50 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:50 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>4:50 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:50 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:50 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:50 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:50 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:51 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>4:51 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:51 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:51 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:51 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>4:51 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:51 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:51 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>4:51 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>4:51 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:51 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>4:51 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>4:51 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:51 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:51 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:51 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 12 exprs and 8 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:51 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht9-prove_trivial7-prove2...</MSG>
<MSG>4:51 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:51 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:51 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:51 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>4:51 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:51 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:51 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:51 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:51 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:51 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:51 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:51 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:51 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 7 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:52 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht6-prove_trivial2-prove4...</MSG>
<MSG>4:52 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 13 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:52 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht5-prove_trivial2-prove3...</MSG>
<MSG>4:52 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:52 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:52 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:52 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:52 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 12 exprs and 8 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:52 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht9-prove_trivial7-prove2...</MSG>
<MSG>4:52 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:52 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:52 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:52 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>4:52 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:52 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:52 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:52 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:52 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:52 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:52 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:52 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:52 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 7 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:52 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht6-prove_trivial2-prove4...</MSG>
<MSG>4:52 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 13 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:52 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht5-prove_trivial2-prove3...</MSG>
<MSG>4:52 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:52 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:52 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: changed ...</MSG>
<MSG>4:52 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>4:52 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>4:52 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>4:52 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%19%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>4:52 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>4:52 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:52 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:52 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 9 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:52 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial3-prove1...</MSG>
<MSG>4:52 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 9 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial3-prove1...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>4:53 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 12 exprs and 8 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht9-prove_trivial7-prove2...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:53 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:56 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>4:56 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:56 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:56 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:56 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:56 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:56 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:56 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:56 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:56 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 7 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:56 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht6-prove_trivial2-prove4...</MSG>
<MSG>4:56 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 13 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:56 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht5-prove_trivial2-prove3...</MSG>
<MSG>4:56 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:56 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:56 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:56 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:56 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 12 exprs and 8 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:56 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht9-prove_trivial7-prove2...</MSG>
<MSG>4:56 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:56 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:56 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:56 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:56 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:56 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:56 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:56 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:56 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:56 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:56 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:56 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:56 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 7 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:57 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht6-prove_trivial2-prove4...</MSG>
<MSG>4:57 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 13 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:57 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht5-prove_trivial2-prove3...</MSG>
<MSG>4:57 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:57 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:57 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: changed ...</MSG>
<MSG>4:57 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>4:57 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>4:57 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>4:57 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%19%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>4:57 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>4:57 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:57 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:57 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 9 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:57 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial3-prove1...</MSG>
<MSG>4:57 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:57 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:57 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:57 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:57 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:57 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:57 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:57 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:57 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:57 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:57 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:57 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>4:57 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:57 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:57 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:57 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:57 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 9 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:57 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial3-prove1...</MSG>
<MSG>4:57 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:57 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:57 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:57 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:57 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:57 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:57 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:57 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:57 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:57 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:57 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:57 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>4:57 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:57 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:57 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>4:57 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>4:57 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:57 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>4:57 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>4:57 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:57 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:57 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:57 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 12 exprs and 8 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:57 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht9-prove_trivial7-prove2...</MSG>
<MSG>4:57 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:57 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:57 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:57 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:57 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:58 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:58 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:58 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:58 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:58 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:58 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:58 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:58 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 7 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:58 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht6-prove_trivial2-prove4...</MSG>
<MSG>4:58 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 13 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:58 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht5-prove_trivial2-prove3...</MSG>
<MSG>4:58 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:58 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:58 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>4:58 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>4:58 : foo.A1.B4.C1 (d:6, s:0, sp: 14): checked newly added edge and inferred invariants...</MSG>
<MSG>4:58 : foo.A1.B4.C1 (d:6, s:0, sp: 14): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>4:59 : product-TFG foo.A1.B4.C1: Enumerating correlations for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] starting at L3%19%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:59 : Considering 2 paths to src pc L3%19%bbentry as correlation candidates for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%19%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:59 : Attempting correlation of src pathset L3%19%bbentry=>L3%19%bbentry[mu 0, delta {0,0}] as correlation candidate for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%19%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:59 : Attempting correlation of src pathset L3%19%bbentry=>L3%19%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%19%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:59 : Found 2 feasible correlations for paths to src pc L3%19%bbentry as correlation candidates for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%19%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:59 : product-TFG foo.A1.B4.C1: Found 2 correlations for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] starting at L3%19%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:59 : product-TFG foo.A1.B4.C1 created 2 possibilities in group foo.A1.B4.C1.D...</MSG>
<MSG>4:59 : Chose (for CE propagation) product-TFG foo.A1.B4.C1.D2 (d:6, s:0, sp: 14) from a frontier of size 4...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%19%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%19%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 30 counterexamples (for correlating 7 bv exprs)
            L3%19%bbentry_Lfor.cond1%1%bbentry (C L3%19%bbentry, A (line 4 at column 28))
                L3%19%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 22 counterexamples (for correlating 12 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%19%bbentry=>L3%19%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>4:59 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B4.C1.D2...</MSG>
<MSG>4:59 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B4.C1.D2...</MSG>
<MSG>4:59 : Creating ssa-path for the src-tfg path L3%19%bbentry --> L3%19%bbentry ending at L3%19%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:59 : Adding a CG edge composition using the src path L3%19%bbentry --> L3%19%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:59 : Identifying common alloc-deallocs in the src path L3%19%bbentry --> L3%19%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry
</MSG>
<MSG>4:59 : Identified no common alloc-deallocs in the src path L3%19%bbentry --> L3%19%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:59 : Adding new edge to the product-TFG foo.A1.B4.C1.D2 for fromPC L3%19%bbentry_Lfor.cond1%1%bbentry and toPC L3%19%bbentry_Lfor.cond1%1%bbentry, src path L3%19%bbentry --> L3%19%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>4:59 : foo.A1.B4.C1.D2: Getting alloca-ptrs on edge L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:59 : foo.A1.B4.C1.D2: Found no alloca-ptrs on edge L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:59 : foo.A1.B4.C1.D2: Adding edge L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:59 : foo.A1.B4.C1.D2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>4:59 : foo.A1.B4.C1.D2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>4:59 : foo.A1.B4.C1.D2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>5:03 : foo.A1.B4.C1.D2: Propagated 2 out of 22 counter-examples across edge L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry</MSG>
<MSG>5:04 : foo.A1.B4.C1.D2: Added the 2 propagated CEs at PC L3%19%bbentry_Lfor.cond1%1%bbentry and propagated further.
</MSG>
<MSG>5:04 : foo.A1.B4.C1.D2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>5:04 : foo.A1.B4.C1.D2: Finished executing CG's add edge function...</MSG>
<MSG>5:04 : foo.A1.B4.C1.D2: Computing CG regions after the addition of the edge L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>5:04 : foo.A1.B4.C1.D2: Done computing CG regions after the addition of the edge L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>5:04 : Done adding new edge to the product-TFG foo.A1.B4.C1.D2 for fromPC L3%19%bbentry_Lfor.cond1%1%bbentry and toPC L3%19%bbentry_Lfor.cond1%1%bbentry, src path L3%19%bbentry --> L3%19%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>5:04 : Done adding a CG edge composition using the src path L3%19%bbentry --> L3%19%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>5:04 : Added correlation to the product-TFG foo.A1.B4.C1.D2 (d:6, s:0, sp: 14) and created a correlation entry...</MSG>
<MSG>5:04 : Chose (after CE propagation) product-TFG foo.A1.B4.C1.D2 (d:6, s:0, sp: 14) from a frontier of size 4...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%19%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%19%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry (C L3%19%bbentry => C L3%19%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 30 counterexamples (for correlating 7 bv exprs)
            L3%19%bbentry_Lfor.cond1%1%bbentry (C L3%19%bbentry, A (line 4 at column 28))
                L3%19%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 27 counterexamples (for correlating 12 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%19%bbentry=>L3%19%bbentry[mu 1, delta {1,0}]
<MSG>5:04 : foo.A1.B4.C1.D2: Updating invariants over the newly added edges in edge composition L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>5:04 : Constructed infer_invariants_dfa with initial worklist L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>5:04 : foo.A1.B4.C1.D2: Relaxing dst graph's memlabels for edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>5:04 : foo.A1.B4.C1.D2: Done relaxing dst graph's memlabels for edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>5:04 : foo.A1.B4.C1.D2: Checking well-formedness assertions on outgoing edges from L3%19%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>5:04 : foo.A1.B4.C1.D2: Relaxing invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>5:04 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:04 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:04 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 12 exprs and 10 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:25 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht12-prove_trivial7-prove11...</MSG>
<MSG>5:25 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:28 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht4-prove_trivial2-prove4...</MSG>
<MSG>5:28 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:28 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove1...</MSG>
<MSG>5:28 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:28 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:28 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:28 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:28 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:28 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:28 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:29 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>5:29 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 8 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:31 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht5-prove_trivial2-prove3...</MSG>
<MSG>5:31 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 13 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:31 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht5-prove_trivial5-prove3...</MSG>
<MSG>5:31 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:31 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:31 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:31 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:31 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 12 exprs and 15 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:32 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial5-prove7...</MSG>
<MSG>5:32 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:33 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove2...</MSG>
<MSG>5:33 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:33 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove1...</MSG>
<MSG>5:33 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:33 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:33 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:33 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:33 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:33 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:33 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:33 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>5:33 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 9 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:35 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht4-prove_trivial2-prove2...</MSG>
<MSG>5:35 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 13 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:36 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht5-prove_trivial5-prove3...</MSG>
<MSG>5:36 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:36 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:36 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:36 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:36 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 12 exprs and 15 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:37 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial5-prove7...</MSG>
<MSG>5:37 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:37 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove2...</MSG>
<MSG>5:37 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:37 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove1...</MSG>
<MSG>5:37 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:37 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:37 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:37 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:37 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:37 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:37 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:37 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>5:37 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 10 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:37 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial2-prove1...</MSG>
<MSG>5:37 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 13 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:38 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht5-prove_trivial5-prove3...</MSG>
<MSG>5:38 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:38 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:38 : foo.A1.B4.C1.D2: Done relaxing invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: changed ...</MSG>
<MSG>5:38 : foo.A1.B4.C1.D2: Done relaxing memlabels and invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>5:38 : foo.A1.B4.C1.D2: Relaxing dst graph's memlabels for edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>5:38 : foo.A1.B4.C1.D2: Done relaxing dst graph's memlabels for edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>5:38 : foo.A1.B4.C1.D2: Checking well-formedness assertions on outgoing edges from L3%19%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>5:38 : foo.A1.B4.C1.D2: Relaxing invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>5:38 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:38 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:38 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 12 exprs and 15 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:38 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial5-prove7...</MSG>
<MSG>5:38 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:38 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove2...</MSG>
<MSG>5:38 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:38 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove1...</MSG>
<MSG>5:38 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:38 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:38 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:38 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:38 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:38 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:38 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:38 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>5:38 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 10 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:38 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial2-prove1...</MSG>
<MSG>5:38 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 13 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:38 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht5-prove_trivial5-prove3...</MSG>
<MSG>5:38 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:38 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:38 : foo.A1.B4.C1.D2: Done relaxing invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>5:38 : foo.A1.B4.C1.D2: Done relaxing memlabels and invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>5:38 : foo.A1.B4.C1.D2: Relaxing dst graph's memlabels for edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>5:38 : foo.A1.B4.C1.D2: Done relaxing dst graph's memlabels for edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>5:38 : foo.A1.B4.C1.D2: Checking well-formedness assertions on outgoing edges from L3%19%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>5:38 : foo.A1.B4.C1.D2: Relaxing invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>5:38 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:38 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:38 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 10 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:39 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht4-prove_trivial2-prove2...</MSG>
<MSG>5:39 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:39 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:39 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:39 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:39 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:39 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:39 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:39 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:39 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:39 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>5:39 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:39 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>5:39 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:39 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:39 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:39 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:39 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 11 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:39 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial2-prove1...</MSG>
<MSG>5:39 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:39 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:39 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:39 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:39 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:39 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:39 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:39 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:39 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:39 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>5:39 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:39 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>5:39 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:39 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:39 : foo.A1.B4.C1.D2: Done relaxing invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>5:39 : foo.A1.B4.C1.D2: Done relaxing memlabels and invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>5:39 : foo.A1.B4.C1.D2: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>5:39 : foo.A1.B4.C1.D2: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>5:39 : foo.A1.B4.C1.D2: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>5:39 : foo.A1.B4.C1.D2: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>5:39 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:39 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:39 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 12 exprs and 16 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:40 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht6-prove_trivial4-prove2...</MSG>
<MSG>5:40 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:40 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>5:40 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:40 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>5:40 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:40 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>5:40 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:40 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:40 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:40 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>5:40 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:40 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>5:40 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 10 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:40 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial2-prove1...</MSG>
<MSG>5:40 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 13 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:40 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht5-prove_trivial2-prove3...</MSG>
<MSG>5:40 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:40 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:40 : foo.A1.B4.C1.D2: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>5:40 : foo.A1.B4.C1.D2: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>5:40 : foo.A1.B4.C1.D2: Relaxing dst graph's memlabels for edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>5:40 : foo.A1.B4.C1.D2: Done relaxing dst graph's memlabels for edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>5:40 : foo.A1.B4.C1.D2: Checking well-formedness assertions on outgoing edges from L3%19%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>5:40 : foo.A1.B4.C1.D2: Relaxing invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>5:40 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:40 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:40 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 12 exprs and 16 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:41 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht6-prove_trivial4-prove6...</MSG>
<MSG>5:41 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:41 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove2...</MSG>
<MSG>5:41 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:41 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove1...</MSG>
<MSG>5:41 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:41 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:41 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:41 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:41 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:41 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:41 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:42 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>5:42 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 10 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:42 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial2-prove1...</MSG>
<MSG>5:42 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 13 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:42 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht5-prove_trivial5-prove3...</MSG>
<MSG>5:42 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:42 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:42 : foo.A1.B4.C1.D2: Done relaxing invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>5:42 : foo.A1.B4.C1.D2: Done relaxing memlabels and invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>5:42 : foo.A1.B4.C1.D2: Relaxing dst graph's memlabels for edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>5:42 : foo.A1.B4.C1.D2: Done relaxing dst graph's memlabels for edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>5:42 : foo.A1.B4.C1.D2: Checking well-formedness assertions on outgoing edges from L3%19%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>5:42 : foo.A1.B4.C1.D2: Relaxing invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>5:42 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:42 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:42 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 11 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:42 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial2-prove1...</MSG>
<MSG>5:42 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:42 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:42 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:42 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:42 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:42 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:42 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:42 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:42 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:42 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>5:42 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:42 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>5:42 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:42 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:42 : foo.A1.B4.C1.D2: Done relaxing invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged ...</MSG>
<MSG>5:42 : foo.A1.B4.C1.D2: Done relaxing memlabels and invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>5:42 : foo.A1.B4.C1.D2: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>5:42 : foo.A1.B4.C1.D2: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>5:42 : foo.A1.B4.C1.D2: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>5:42 : foo.A1.B4.C1.D2: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>5:42 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:42 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:42 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 12 exprs and 16 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:42 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht6-prove_trivial4-prove2...</MSG>
<MSG>5:42 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:42 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>5:42 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:42 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>5:42 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:42 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>5:42 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:42 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:42 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:42 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>5:42 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:42 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>5:42 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 10 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:42 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial2-prove1...</MSG>
<MSG>5:42 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 13 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:43 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht5-prove_trivial2-prove3...</MSG>
<MSG>5:43 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:43 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:43 : foo.A1.B4.C1.D2: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>5:43 : foo.A1.B4.C1.D2: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>5:43 : foo.A1.B4.C1.D2: Relaxing dst graph's memlabels for edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>5:43 : foo.A1.B4.C1.D2: Done relaxing dst graph's memlabels for edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>5:43 : foo.A1.B4.C1.D2: Checking well-formedness assertions on outgoing edges from L3%19%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>5:43 : foo.A1.B4.C1.D2: Relaxing invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>5:43 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:43 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:43 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 11 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:43 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial2-prove1...</MSG>
<MSG>5:43 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:43 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:43 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:43 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:43 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:43 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:43 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:43 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:43 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:43 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>5:43 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:43 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>5:43 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:43 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:43 : foo.A1.B4.C1.D2: Done relaxing invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged ...</MSG>
<MSG>5:43 : foo.A1.B4.C1.D2: Done relaxing memlabels and invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>5:43 : foo.A1.B4.C1.D2 (d:6, s:0, sp: 14): checked newly added edge and inferred invariants...</MSG>
<MSG>5:43 : foo.A1.B4.C1.D2 (d:6, s:0, sp: 14): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>5:43 : product-TFG foo.A1.B4.C1.D2: Enumerating correlations for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] starting at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>5:43 : Considering 1 paths to src pc E0%0%d as correlation candidates for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>5:43 : Attempting correlation of src pathset L3%7%bbentry=>E0%0%d[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>5:43 : Found 1 feasible correlations for paths to src pc E0%0%d as correlation candidates for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>5:43 : product-TFG foo.A1.B4.C1.D2: Found 1 correlations for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] starting at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>5:43 : product-TFG foo.A1.B4.C1.D2 created 1 possibilities in group foo.A1.B4.C1.D2.E...</MSG>
<MSG>5:43 : Chose (for CE propagation) product-TFG foo.A1.B4.C1.D2.E1 (d:6, s:0, sp: 14) from a frontier of size 4...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%19%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%19%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry (C L3%19%bbentry => C L3%19%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 36 counterexamples (for correlating 7 bv exprs)
            L3%19%bbentry_Lfor.cond1%1%bbentry (C L3%19%bbentry, A (line 4 at column 28))
                L3%19%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 43 counterexamples (for correlating 12 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>E0%0%d[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>5:43 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B4.C1.D2.E1...</MSG>
<MSG>5:43 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B4.C1.D2.E1...</MSG>
<MSG>5:43 : Creating ssa-path for the src-tfg path L3%7%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>5:43 : Adding a CG edge composition using the src path L3%7%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
<MSG>5:43 : Identifying common alloc-deallocs in the src path L3%7%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d
</MSG>
<MSG>5:43 : Identified no common alloc-deallocs in the src path L3%7%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
<MSG>5:43 : Adding new edge to the product-TFG foo.A1.B4.C1.D2.E1 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC E0%0%d_E0%0%d, src path L3%7%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d...</MSG>
<MSG>5:43 : foo.A1.B4.C1.D2.E1: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>5:43 : foo.A1.B4.C1.D2.E1: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>5:43 : foo.A1.B4.C1.D2.E1: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>5:43 : foo.A1.B4.C1.D2.E1: Getting alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>5:43 : foo.A1.B4.C1.D2.E1: Found no alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>5:43 : foo.A1.B4.C1.D2.E1: Adding edge L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>5:43 : foo.A1.B4.C1.D2.E1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>5:43 : foo.A1.B4.C1.D2.E1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>5:43 : foo.A1.B4.C1.D2.E1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>5:45 : foo.A1.B4.C1.D2.E1: Propagated 11 out of 25 counter-examples across edge L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d</MSG>
<MSG>5:45 : foo.A1.B4.C1.D2.E1: Added the 11 propagated CEs at PC E0%0%d_E0%0%d and propagated further.
</MSG>
<MSG>5:45 : foo.A1.B4.C1.D2.E1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>5:45 : foo.A1.B4.C1.D2.E1: Finished executing CG's add edge function...</MSG>
<MSG>5:45 : foo.A1.B4.C1.D2.E1: Computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>5:45 : foo.A1.B4.C1.D2.E1: Done computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>5:45 : Done adding new edge to the product-TFG foo.A1.B4.C1.D2.E1 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC E0%0%d_E0%0%d, src path L3%7%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d...</MSG>
<MSG>5:45 : Done adding a CG edge composition using the src path L3%7%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
<MSG>5:45 : Added correlation to the product-TFG foo.A1.B4.C1.D2.E1 (d:6, s:0, sp: 14) and created a correlation entry...</MSG>
<MSG>5:45 : Chose (after CE propagation) product-TFG foo.A1.B4.C1.D2.E1 (d:6, s:0, sp: 14) from a frontier of size 4...</MSG>
<cg>
  Edges[5]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%19%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%19%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry (C L3%19%bbentry => C L3%19%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%7%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 3 at column 26) => A E0%0%d at mu 1 delta {1,0})
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 36 counterexamples (for correlating 7 bv exprs)
            L3%19%bbentry_Lfor.cond1%1%bbentry (C L3%19%bbentry, A (line 4 at column 28))
                L3%19%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 43 counterexamples (for correlating 12 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 9 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>E0%0%d[mu 1, delta {1,0}]
<MSG>5:45 : foo.A1.B4.C1.D2.E1: Updating invariants over the newly added edges in edge composition L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d and other downstream edges that change due to it...</MSG>
<MSG>5:45 : Constructed infer_invariants_dfa with initial worklist L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>5:45 : foo.A1.B4.C1.D2.E1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d) ...</MSG>
<MSG>5:45 : foo.A1.B4.C1.D2.E1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d), result: unchanged</MSG>
<MSG>5:45 : foo.A1.B4.C1.D2.E1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>5:45 : foo.A1.B4.C1.D2.E1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d), result: unchanged( 0, 0 ) ...</MSG>
<MSG>5:45 : foo.A1.B4.C1.D2.E1 (d:6, s:0, sp: 14): checked newly added edge and inferred invariants...</MSG>
<MSG>5:45 : foo.A1.B4.C1.D2.E1 (d:6, s:0, sp: 14): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>5:45 : Chosen product-TFG represents our required correlation graph...</MSG>
<MSG>5:45 : Checking equivalence proof...</MSG>
<MSG>5:46 : Equivalence check passed: product CFG has strong enough inductive invariants...</MSG>
CG invariants =
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%7%bbentry_Lfor.cond%1%bbentry: (d:3, s:0, sp: 5)
  Invariant state (9 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin))) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce1364
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-i-0.L3%7%bbentry ; 3-->input.spec-%var-x-1.L3%7%bbentry ; 4-->input.dst.llvm-%n ; 5-->input.dst.llvm-%m ; 6-->input.dst.llvm-%arr ; 7-->input.dst.llvm-%x.0.Lfor.cond%1%bbentry ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvneg(bvmul(4294967295, input.spec-%var-i-0.L3%7%bbentry))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(4294967295, input.spec-%var-x-1.L3%7%bbentry))  ==  input.dst.llvm-%x.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr, 1, 0)
     is_assumed_eqclass : 0
    11 visited ces:
      0.:z3v487.ce1364      1.:z3v487.ce1437      2.:z3v487.ce1461      3.:z3v487.ce1389      4.:z3.ce1388      5.:z3.ce1412      6.:z3.ce1436      7.:z3.ce1460      8.:z3v487.ce4589      9.:z3v487.ce6239      10.:z3.ce5813
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%7%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3v487.ce1364      1.:z3v487.ce4589      2.:z3v487.ce4878      3.:z3v487.ce4974      4.:z3v487.ce5074      5.:z3v487.ce5233      6.:z3v487.ce5348
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce1364      1.:z3.ce1460      2.:z3v487.ce1484      3.:z3v487.ce1508
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%m, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%m ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce1364      1.:z3.ce1388      2.:z3.ce1532      3.:z3v487.ce1556
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3v487.ce1364      1.:z3v487.ce4589      2.:z3v487.ce4878      3.:z3v487.ce4974      4.:z3v487.ce5074      5.:z3v487.ce5233      6.:z3v487.ce5348
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [24]: 9-->bvslt(input.dst.llvm-%n, input.dst.llvm-%m) ; 10-->bvult(input.dst.llvm-%n, input.dst.llvm-%m) ; 11-->bvslt(input.dst.llvm-%m, input.dst.llvm-%n) ; 12-->bvult(input.dst.llvm-%m, input.dst.llvm-%n) ; 13-->bvsle(input.dst.llvm-%n, input.dst.llvm-%m) ; 14-->bvule(input.dst.llvm-%n, input.dst.llvm-%m) ; 15-->bvsle(input.dst.llvm-%m, input.dst.llvm-%n) ; 16-->bvule(input.dst.llvm-%m, input.dst.llvm-%n) ; 17-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 18-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 19-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 20-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 21-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 22-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 23-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 24-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 25-->bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 26-->bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 27-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m) ; 28-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m) ; 29-->bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 30-->bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 31-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m) ; 32-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3v487.ce1364      1.:z3.ce1388      2.:z3.ce1460      3.:z3v487.ce1484      4.:z3.ce1532      5.:z3v487.ce4589
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [6]: 33-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141378](input.spec-%var-a-1, map[141377](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141376](Lambda3Var, map[141375](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141374](Lambda2Var, select[141373](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141372](bvmul(Lambda2Var, 4), select[141371](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 34-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142246](input.spec-%var-a-0.L3%7%bbentry, map[141377](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141376](Lambda3Var, map[141375](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141374](Lambda2Var, select[141373](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141372](bvmul(Lambda2Var, 4), select[141371](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 35-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142248](input.spec-%var-a-0.L3%7%bbentry, map[142247](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%m))), lambda[141376](Lambda3Var, map[141375](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141374](Lambda2Var, select[141373](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141372](bvmul(Lambda2Var, 4), select[141371](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 36-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142253](input.spec-%var-a-0.L3%7%bbentry, map[142252](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%arr))), lambda[141376](Lambda3Var, map[141375](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141374](Lambda2Var, select[141373](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141372](bvmul(Lambda2Var, 4), select[141371](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 37-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142258](input.spec-%var-a-0.L3%7%bbentry, map[142257](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda[141376](Lambda3Var, map[141375](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141374](Lambda2Var, select[141373](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141372](bvmul(Lambda2Var, 4), select[141371](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 38-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142263](input.spec-%var-a-0.L3%7%bbentry, map[142262](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%x.0.Lfor.cond%1%bbentry))), lambda[141376](Lambda3Var, map[141375](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141374](Lambda2Var, select[141373](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141372](bvmul(Lambda2Var, 4), select[141371](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 
    2 preds:
      0.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142246](input.spec-%var-a-0.L3%7%bbentry, map[141377](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141376](Lambda3Var, map[141375](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141374](Lambda2Var, select[141373](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141372](bvmul(Lambda2Var, 4), select[141371](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      1.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141378](input.spec-%var-a-1, map[141377](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141376](Lambda3Var, map[141375](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141374](Lambda2Var, select[141373](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141372](bvmul(Lambda2Var, 4), select[141371](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce1364
    eqclass 8:
    smallest point cover name local-sizes-are-equal, type HOUDINI, exprs [0]: 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce1364

L3%19%bbentry_Lfor.cond1%1%bbentry: (d:3, s:0, sp: 9)
  Invariant state (11 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin))) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1460
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [12]: 2-->input.spec-%var-i-0.L3%7%bbentry ; 3-->input.spec-%var-x-1.L3%7%bbentry ; 4-->input.dst.llvm-%n ; 5-->input.dst.llvm-%m ; 6-->input.dst.llvm-%arr ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 39-->input.spec-%var-j-0.L3%19%bbentry ; 40-->input.spec-%var-x-0.L3%19%bbentry ; 41-->input.spec-%tmpvar-9.L3%19%bbentry ; 42-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 43-->input.dst.llvm-%j.0.Lfor.cond1%1%bbentry ; 44-->input.dst.llvm-%x.1.Lfor.cond1%1%bbentry ; 
    6 preds:
      0.: bvneg(bvmul(4294967295, input.spec-%var-x-0.L3%19%bbentry))  ==  input.dst.llvm-%x.1.Lfor.cond1%1%bbentry
      1.: bvneg(bvmul(4294967295, input.spec-%var-j-0.L3%19%bbentry))  ==  input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
      2.: bvadd(1, bvneg(bvmul(4294967295, input.spec-%var-i-0.L3%7%bbentry)))  ==  input.spec-%tmpvar-9.L3%19%bbentry
      3.: bvneg(bvmul(4294967295, input.spec-%var-i-0.L3%7%bbentry))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      4.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      5.: 0                     ==  bvextract(input.dst.llvm-%arr, 1, 0)
     is_assumed_eqclass : 0
    16 visited ces:
      0.:z3v487.ce1461      1.:z3.ce1460      2.:z3v487.ce1484      3.:z3v487.ce1508      4.:z3v487.ce1556      5.:z3.ce4659      6.:z3.ce5424      7.:z3v487.ce5537      8.:z3.ce5618      9.:z3.ce5654      10.:z3.ce5717      11.:z3.ce5755      12.:z3.ce5876      13.:z3v487.ce6270      14.:z3.ce3207      15.:z3.ce3247
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 39-->input.spec-%var-j-0.L3%19%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-j-0.L3%19%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-j-0.L3%19%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1460      1.:z3v487.ce5537      2.:z3v487.ce6032      3.:z3.ce5954
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 41-->input.spec-%tmpvar-9.L3%19%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%tmpvar-9.L3%19%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3.ce1460      1.:z3v487.ce4924      2.:z3.ce4659      3.:z3v487.ce5005      4.:z3v487.ce5139      5.:z3.ce5298
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%n ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1460      1.:z3v487.ce1484      2.:z3v487.ce1508      3.:z3v487.ce3287
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%m, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%m ; 
    0 preds:
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce1460      1.:z3v487.ce1556      2.:z3v487.ce3208      3.:z3.ce3207      4.:z3.ce3327
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3.ce1460      1.:z3.ce4659      2.:z3.ce4694      3.:z3v487.ce5005      4.:z3v487.ce5028      5.:z3v487.ce5172
    eqclass 7:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, type BV_CONST_INEQ, exprs [1]: 43-->input.dst.llvm-%j.0.Lfor.cond1%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1460      1.:z3v487.ce5537      2.:z3v487.ce6032      3.:z3.ce5954
    eqclass 8:
    smallest point cover name dst-ineq, type HOUDINI, exprs [48]: 9-->bvslt(input.dst.llvm-%n, input.dst.llvm-%m) ; 10-->bvult(input.dst.llvm-%n, input.dst.llvm-%m) ; 11-->bvslt(input.dst.llvm-%m, input.dst.llvm-%n) ; 12-->bvult(input.dst.llvm-%m, input.dst.llvm-%n) ; 13-->bvsle(input.dst.llvm-%n, input.dst.llvm-%m) ; 14-->bvule(input.dst.llvm-%n, input.dst.llvm-%m) ; 15-->bvsle(input.dst.llvm-%m, input.dst.llvm-%n) ; 16-->bvule(input.dst.llvm-%m, input.dst.llvm-%n) ; 17-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 18-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 19-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 20-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 21-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 22-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 23-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 24-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 25-->bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 26-->bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 27-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m) ; 28-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m) ; 29-->bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 30-->bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 31-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m) ; 32-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m) ; 45-->bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 46-->bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 47-->bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n) ; 48-->bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n) ; 49-->bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 50-->bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 51-->bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n) ; 52-->bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n) ; 53-->bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 54-->bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 55-->bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m) ; 56-->bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m) ; 57-->bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 58-->bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 59-->bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m) ; 60-->bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m) ; 61-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 62-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 63-->bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 64-->bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 65-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 66-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 67-->bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 68-->bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    3 preds:
      0.: bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)  ==  true
      1.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
      2.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3.ce1460      1.:z3v487.ce1484      2.:z3v487.ce1556      3.:z3.ce4659      4.:z3v487.ce5172      5.:z3v487.ce5537      6.:z3.ce6083      7.:z3.ce6161      8.:z3.ce3207      9.:z3.ce3327
    eqclass 9:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 33-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141378](input.spec-%var-a-1, map[141377](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141376](Lambda3Var, map[141375](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141374](Lambda2Var, select[141373](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141372](bvmul(Lambda2Var, 4), select[141371](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 34-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142246](input.spec-%var-a-0.L3%7%bbentry, map[141377](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141376](Lambda3Var, map[141375](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141374](Lambda2Var, select[141373](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141372](bvmul(Lambda2Var, 4), select[141371](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 35-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142248](input.spec-%var-a-0.L3%7%bbentry, map[142247](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%m))), lambda[141376](Lambda3Var, map[141375](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141374](Lambda2Var, select[141373](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141372](bvmul(Lambda2Var, 4), select[141371](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 36-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142253](input.spec-%var-a-0.L3%7%bbentry, map[142252](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%arr))), lambda[141376](Lambda3Var, map[141375](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141374](Lambda2Var, select[141373](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141372](bvmul(Lambda2Var, 4), select[141371](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 37-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142258](input.spec-%var-a-0.L3%7%bbentry, map[142257](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda[141376](Lambda3Var, map[141375](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141374](Lambda2Var, select[141373](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141372](bvmul(Lambda2Var, 4), select[141371](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 69-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[165393](input.spec-%var-a-1, map[142252](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%arr))), lambda[141376](Lambda3Var, map[141375](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141374](Lambda2Var, select[141373](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141372](bvmul(Lambda2Var, 4), select[141371](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 70-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[166287](input.spec-%var-a-1, map[142247](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%m))), lambda[141376](Lambda3Var, map[141375](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141374](Lambda2Var, select[141373](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141372](bvmul(Lambda2Var, 4), select[141371](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 71-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[170255](input.spec-%var-a-0.L3%7%bbentry, map[170254](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry))), lambda[141376](Lambda3Var, map[141375](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141374](Lambda2Var, select[141373](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141372](bvmul(Lambda2Var, 4), select[141371](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 72-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[170257](input.spec-%tmpvar-7.L3%8%d, map_get[170256](map[141377](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141376](Lambda3Var, map[141375](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141374](Lambda2Var, select[141373](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141372](bvmul(Lambda2Var, 4), select[141371](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))), input.spec-%var-i-0.L3%7%bbentry)) ; 73-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[170258](input.spec-%var-a-1, map[142257](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda[141376](Lambda3Var, map[141375](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141374](Lambda2Var, select[141373](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141372](bvmul(Lambda2Var, 4), select[141371](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 74-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[170259](input.spec-%var-a-1, map[170254](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry))), lambda[141376](Lambda3Var, map[141375](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141374](Lambda2Var, select[141373](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141372](bvmul(Lambda2Var, 4), select[141371](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 75-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[170278](input.spec-%var-a_i-1.L3%19%bbentry, sum_get[170277](map_get[170256](map[141377](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141376](Lambda3Var, map[141375](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141374](Lambda2Var, select[141373](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141372](bvmul(Lambda2Var, 4), select[141371](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))), input.spec-%var-i-0.L3%7%bbentry), 1)) ; 76-->140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[170280](input.spec-%var-a_i-0.L3%19%bbentry, sum_get[170277](map_get[170256](map[141377](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141376](Lambda3Var, map[141375](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141374](Lambda2Var, select[141373](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141372](bvmul(Lambda2Var, 4), select[141371](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))), input.spec-%var-i-0.L3%7%bbentry), 1)) ; 
    5 preds:
      0.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[170280](input.spec-%var-a_i-0.L3%19%bbentry, sum_get[170277](map_get[170256](map[141377](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141376](Lambda3Var, map[141375](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141374](Lambda2Var, select[141373](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141372](bvmul(Lambda2Var, 4), select[141371](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))), input.spec-%var-i-0.L3%7%bbentry), 1))  ==  true
      1.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142246](input.spec-%var-a-0.L3%7%bbentry, map[141377](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141376](Lambda3Var, map[141375](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141374](Lambda2Var, select[141373](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141372](bvmul(Lambda2Var, 4), select[141371](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      2.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[170278](input.spec-%var-a_i-1.L3%19%bbentry, sum_get[170277](map_get[170256](map[141377](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141376](Lambda3Var, map[141375](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141374](Lambda2Var, select[141373](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141372](bvmul(Lambda2Var, 4), select[141371](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))), input.spec-%var-i-0.L3%7%bbentry), 1))  ==  true
      3.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141378](input.spec-%var-a-1, map[141377](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141376](Lambda3Var, map[141375](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141374](Lambda2Var, select[141373](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141372](bvmul(Lambda2Var, 4), select[141371](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      4.: 140722 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[170257](input.spec-%tmpvar-7.L3%8%d, map_get[170256](map[141377](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141376](Lambda3Var, map[141375](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141374](Lambda2Var, select[141373](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd[141372](bvmul(Lambda2Var, 4), select[141371](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140722, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))), input.spec-%var-i-0.L3%7%bbentry))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1460
    eqclass 10:
    smallest point cover name local-sizes-are-equal, type HOUDINI, exprs [0]: 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1460

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


Found equivalence proof. Final CG:
<cg>
  Edges[5]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%19%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%19%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry (C L3%19%bbentry => C L3%19%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%7%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 3 at column 26) => A E0%0%d at mu 1 delta {1,0})
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 36 counterexamples (for correlating 7 bv exprs)
            L3%19%bbentry_Lfor.cond1%1%bbentry (C L3%19%bbentry, A (line 4 at column 28))
                L3%19%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 43 counterexamples (for correlating 12 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 9 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
EQUIV equivalence check for function foo. 112.27s, query:smt.: 24.6687s (num_starts 287; 0.0860s/start), decide_hoare_triple.ce.: 0s (num_starts 0; -nans/start), decide_hoare_triple_helper.: 53.3704s (num_starts 996; 0.0536s/start)ftmap_run_pointsto_analysis.: 0.399066s (num_starts 2; 0.1995s/start)

Printing statistics:

timers:
decide_hoare_triple.ce.: 0s (num_starts 0; -nans/start)
compute_loop_hoisting_non_linear_exprs_at_pcpair.: 8e-06s (num_starts 8; 0.0000s/start)
invariant_inference_xfer.local-sizes-are-equal.from.L0%0%d_L0%0%d.: 1.6e-05s (num_starts 2; 0.0000s/start)
update_dst_edge_for_local_allocations_and_deallocations.: 1.6e-05s (num_starts 13; 0.0000s/start)
compute_tfg_pred_eqclass.: 1.7e-05s (num_starts 7; 0.0000s/start)
cg_compute_well_formedness_conditions_for_stack_pointer.: 2.2e-05s (num_starts 13; 0.0000s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%11%bbentry_Lfor.cond1%1%bbentry.: 2.9e-05s (num_starts 3; 0.0000s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%11%bbentry_Lfor.cond1%1%bbentry.: 3e-05s (num_starts 3; 0.0000s/start)
invariant_inference_xfer.local-sizes-are-equal.from.L3%11%bbentry_Lfor.cond1%1%bbentry.: 3.1e-05s (num_starts 3; 0.0000s/start)
prune_dst_memslots.: 3.2e-05s (num_starts 7; 0.0000s/start)
get_paths_with_matching_to_pc.: 3.6e-05s (num_starts 13; 0.0000s/start)
corr_graph_update_dst_to_src_submaps_for_cg_edge.: 3.8e-05s (num_starts 57; 0.0000s/start)
check_wfconds_on_edge.L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry.: 4e-05s (num_starts 1; 0.0000s/start)
get_intersected_lr_status.: 4.2e-05s (num_starts 2; 0.0000s/start)
determinize_value_expr_map.: 7.9e-05s (num_starts 33; 0.0000s/start)
alias_val_t::constructor_with_map_arg.: 8.8e-05s (num_starts 104; 0.0000s/start)
tfg::populate_loc_definedness.set_loc_definedness().: 9.3e-05s (num_starts 3; 0.0000s/start)
corr_graph_add_correlation_and_create_new_correl_entry.after_corr_graph_add_correlation.: 0.000101s (num_starts 9; 0.0000s/start)
graph_edge_contains_unknown_function_call.: 0.000102s (num_starts 103; 0.0000s/start)
check_wfconds_on_edge.L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry.: 0.000121s (num_starts 3; 0.0000s/start)
ce_perform_memory_fuzzing.: 0.000128s (num_starts 174; 0.0000s/start)
remove_complex_bv_exprs.: 0.000132s (num_starts 7; 0.0000s/start)
select_llvmvars_not_defined_on_from_pc_and_add_to_dst.: 0.000139s (num_starts 7; 0.0000s/start)
populate_lr_status_for_sprel_locs_map.calling.compute_lr_status_for_expr.: 0.000154s (num_starts 11; 0.0000s/start)
src_tfg_counter_example_translate_on_edge_composition.delta{0,0}.: 0.000161s (num_starts 54; 0.0000s/start)
get_lr_status_for_loc_ids.: 0.000171s (num_starts 72; 0.0000s/start)
compute_sprel_relations.: 0.000184s (num_starts 2; 0.0001s/start)
propagate_sprels.: 0.000197s (num_starts 2; 0.0001s/start)
invariant_inference_xfer.local-sizes-are-equal.from.L3%19%bbentry_Lfor.cond1%1%bbentry.: 0.000215s (num_starts 17; 0.0000s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%19%bbentry_Lfor.cond1%1%bbentry.: 0.000229s (num_starts 17; 0.0000s/start)
invariant_inference_xfer.local-sizes-are-equal.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 0.000229s (num_starts 17; 0.0000s/start)
tfg::populate_loc_definedness.post_dfa.: 0.000229s (num_starts 3; 0.0001s/start)
populate_locid2expr_map.: 0.000236s (num_starts 2; 0.0001s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.post_dfa.: 0.000305s (num_starts 1; 0.0003s/start)
graph_locs_add_exvregs_for_edge.: 0.000318s (num_starts 22; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.000331s (num_starts 1; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;outgoing_edges_cover_all_possibilities.;-trivial.: 0.000332s (num_starts 1; 0.0003s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.000332s (num_starts 1; 0.0003s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities.;-trivial.: 0.000332s (num_starts 1; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities..: 0.000333s (num_starts 1; 0.0003s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon);-trivial.: 0.000333s (num_starts 1; 0.0003s/start)
graph_locs_add_all_exvregs.: 0.000336s (num_starts 2; 0.0002s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities..: 0.00035s (num_starts 1; 0.0003s/start)
lr_status_meet.: 0.00035s (num_starts 524; 0.0000s/start)
tfg_llvm_t::tfg_llvm_fill_remaining_llvm_to_source_mappings_using_avail_exprs.: 0.000366s (num_starts 1; 0.0004s/start)
graph_locs_add_local_vars_for_edge.: 0.000387s (num_starts 22; 0.0000s/start)
graph_locs_add_all_local_vars.: 0.000418s (num_starts 2; 0.0002s/start)
select_llvmvars_live_at_pc_and_add_to_dst.: 0.000427s (num_starts 7; 0.0001s/start)
expr_is_hidden_reg.: 0.000437s (num_starts 629; 0.0000s/start)
def_analysis::xfer_and_meet.: 0.00046s (num_starts 33; 0.0000s/start)
sp_version_relations_val_t::meet.: 0.00047s (num_starts 1044; 0.0000s/start)
prove_trivial.: 0.000492s (num_starts 571; 0.0000s/start)
populate_dominator_and_postdominator_relations.: 0.000522s (num_starts 2; 0.0003s/start)
corr_graph_generate_local_sprel_expr_guesses_for_locals.: 0.000536s (num_starts 16; 0.0000s/start)
tfg::collect_assumes_around_edge.: 0.000536s (num_starts 55; 0.0000s/start)
expr_is_callee_save_const.: 0.000558s (num_starts 641; 0.0000s/start)
get_sprel_map_pair.: 0.000631s (num_starts 78; 0.0000s/start)
expr_simplify_using_sprel_and_memlabel_maps.sprel.: 0.00086s (num_starts 137; 0.0000s/start)
graph_locs_add_all_llvmvars.: 0.00098s (num_starts 2; 0.0005s/start)
sort_exprs_and_compute_bv_eqclass.: 0.000988s (num_starts 7; 0.0001s/start)
populate_simplified_to_state.: 0.000989s (num_starts 3; 0.0003s/start)
parse_yices_model.: 0.001041s (num_starts 1; 0.0010s/start)
compute_bv_bool_eqclass.: 0.001049s (num_starts 7; 0.0001s/start)
graph_locs_add_all_specvars.: 0.001104s (num_starts 2; 0.0006s/start)
tfg_llvm_t::tfg_llvm_populate_varname_lr_status.: 0.001139s (num_starts 1; 0.0011s/start)
graph_ec_apply_trans_funs_helper.1.: 0.001191s (num_starts 9; 0.0001s/start)
sp_version_relations_val_t::compute_transitive_closure.: 0.00121s (num_starts 140; 0.0000s/start)
parse_cvc4_model.: 0.001291s (num_starts 1; 0.0013s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.bvcover_weaken_till_arity_within_bound.: 0.001361s (num_starts 216; 0.0000s/start)
get_path_wp_exprs_for_cg_invariant_inference.computeWP_for_pred_across_ec.: 0.001417s (num_starts 9; 0.0002s/start)
interesting_wp_exprs_apply_trans_funs.: 0.001464s (num_starts 9; 0.0002s/start)
rdefs_locs_ssa_analysis::xfer_and_meet.: 0.001509s (num_starts 23; 0.0001s/start)
pred_lhs_rhs_convert_memmask_to_select_for_symbols_and_locals.: 0.001511s (num_starts 1061; 0.0000s/start)
tfg::populate_loc_definedness.before_solve.: 0.001719s (num_starts 3; 0.0006s/start)
pth_collect_preds_using_atom_func_and_wp_fn.operator().graph_ec_apply_trans_funs_using_wp_fn.: 0.001724s (num_starts 11; 0.0002s/start)
identify_address_taken_local_variables.: 0.001735s (num_starts 1; 0.0017s/start)
collect_dst_to_src_submap_preds.: 0.001905s (num_starts 996; 0.0000s/start)
get_path_wp_exprs_for_cg_invariant_inference.: 0.001965s (num_starts 7; 0.0003s/start)
generate_region_agrees_with_memlabel_constraints_from_expr.: 0.001983s (num_starts 360; 0.0000s/start)
tfg::populate_loc_definedness.before_initialize.: 0.002056s (num_starts 3; 0.0007s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_expr_is_provable.: 0.00213s (num_starts 490; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.002134s (num_starts 1; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.002136s (num_starts 1; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.002138s (num_starts 1; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.002142s (num_starts 1; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;abstract-memlabel-asserts-houdini-guess.: 0.002145s (num_starts 1; 0.0021s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.00215s (num_starts 1; 0.0022s/start)
tfg::populate_loc_definedness.: 0.002164s (num_starts 3; 0.0007s/start)
expr_contains_only_constants_or_sp_versions_or_count_sort_vars.: 0.002306s (num_starts 1053; 0.0000s/start)
tfg_suffixpath_get_expr_helper.: 0.002349s (num_starts 20; 0.0001s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_solve.: 0.002369s (num_starts 1; 0.0024s/start)
ssa_vars_renaming_analysis::xfer_and_meet.: 0.002392s (num_starts 46; 0.0001s/start)
pth_collect_preds_using_atom_func.: 0.002452s (num_starts 97; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_initialize.: 0.002506s (num_starts 1; 0.0025s/start)
create_closure_matrix.: 0.00256s (num_starts 195; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.: 0.002577s (num_starts 1; 0.0026s/start)
cg_with_asm_annotation::mark_graph_unstable.: 0.002617s (num_starts 4; 0.0007s/start)
tfg_llvm_t::tfg_llvm_compute_pc_to_llvm_to_source_varname_map.: 0.002651s (num_starts 2; 0.0013s/start)
graph_add_location_slots_using_state_mem_acc_map.: 0.002657s (num_starts 69; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.00273s (num_starts 2; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.002735s (num_starts 2; 0.0014s/start)
collect_assumes_around_edge.: 0.002894s (num_starts 13; 0.0002s/start)
removeMostPromising.: 0.002902s (num_starts 36; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.002927s (num_starts 1; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.00293s (num_starts 1; 0.0029s/start)
graph_get_reduced_graph_with_anchor_nodes_only.: 0.002966s (num_starts 11; 0.0003s/start)
graph_visit_exprs.: 0.003007s (num_starts 3; 0.0010s/start)
sp_version_relations_val_t::generate_vals_from_gen_set.: 0.003018s (num_starts 171; 0.0000s/start)
populate_simplified_assets.: 0.003064s (num_starts 6; 0.0005s/start)
tfg_edge_composition_get_assumes.: 0.003089s (num_starts 97; 0.0000s/start)
expr_represents_llvm_undef.: 0.003287s (num_starts 645; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.003321s (num_starts 2; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;pred-type-unknown;-trivial.: 0.003324s (num_starts 2; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.003327s (num_starts 2; 0.0017s/start)
graph_apply_trans_funs_on_aliasing_constraints.mem_alloc.computeWP_for_pred_across_ec.: 0.003423s (num_starts 60; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.003487s (num_starts 4; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;lb-signed;-trivial.: 0.003495s (num_starts 4; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.003497s (num_starts 4; 0.0009s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.003623s (num_starts 4; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;ub-signed;-trivial.: 0.003634s (num_starts 4; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.003641s (num_starts 4; 0.0009s/start)
find_dominators.: 0.003643s (num_starts 47; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed.: 0.003656s (num_starts 4; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;ub-signed.: 0.003669s (num_starts 4; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.003684s (num_starts 1; 0.0037s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.003689s (num_starts 1; 0.0037s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed.: 0.003692s (num_starts 4; 0.0009s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.003812s (num_starts 3; 0.0013s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;lb-signed;-trivial.: 0.00382s (num_starts 3; 0.0013s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.003821s (num_starts 3; 0.0013s/start)
populate_branch_affecting_locs.: 0.003855s (num_starts 3; 0.0013s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.003902s (num_starts 4; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;ub-unsigned;-trivial.: 0.003912s (num_starts 4; 0.0010s/start)
compute_ssa_vars_renaming_map.: 0.003917s (num_starts 2; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.003922s (num_starts 4; 0.0010s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-signed;-trivial.: 0.004055s (num_starts 3; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;ub-signed;-trivial.: 0.004061s (num_starts 3; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-signed;-trivial.: 0.004065s (num_starts 3; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 0.004074s (num_starts 3; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;ub-signed.: 0.004082s (num_starts 3; 0.0014s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 0.004095s (num_starts 3; 0.0014s/start)
get_uapprox_predicate_list_from_guarded_preds_and_graph_ec.: 0.004095s (num_starts 490; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.004098s (num_starts 3; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;ub-unsigned;-trivial.: 0.004106s (num_starts 3; 0.0014s/start)
proof_query_is_trivial_helper.: 0.004106s (num_starts 1125; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.00411s (num_starts 3; 0.0014s/start)
graph_visit_exprs_and_keys.: 0.004128s (num_starts 2; 0.0021s/start)
graph_apply_trans_funs_on_aliasing_constraints.guard_pred.computeWP_for_pred_across_ec.: 0.004159s (num_starts 60; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.00417s (num_starts 2; 0.0021s/start)
graph_identify_back_edges.: 0.004274s (num_starts 43; 0.0001s/start)
aliasing_constraints.get_region_agrees_with_memlabel_preds.: 0.004371s (num_starts 7; 0.0006s/start)
compute_region_agrees_with_memlabel_eqclass.: 0.004402s (num_starts 7; 0.0006s/start)
graph_apply_trans_funs_on_aliasing_constraints.addr_pred.computeWP_for_pred_across_ec.: 0.004408s (num_starts 60; 0.0001s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.: 0.004466s (num_starts 2; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;ub-signed;-trivial.: 0.004524s (num_starts 2; 0.0023s/start)
aliasing_constraints.get_region_agrees_with_memlabel_exprs.: 0.004556s (num_starts 367; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);ub-signed;-trivial.: 0.004557s (num_starts 2; 0.0023s/start)
expr_simplify_using_sprel_and_memlabel_maps.model.: 0.004714s (num_starts 137; 0.0000s/start)
graph_identify_natural_loops.: 0.004734s (num_starts 43; 0.0001s/start)
tfg_edge_composition_get_edge_cond_using_econd_fn.: 0.004747s (num_starts 118; 0.0000s/start)
collect_aliasing_constaints_starting_at_pc_till_maximal_bbs.: 0.004947s (num_starts 35; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.005188s (num_starts 1; 0.0052s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.005193s (num_starts 1; 0.0052s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.005262s (num_starts 2; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.005272s (num_starts 2; 0.0026s/start)
get_maximal_basic_block_edge_list_starting_at_pc.: 0.005429s (num_starts 1101; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;ub-unsigned;-trivial.: 0.005515s (num_starts 2; 0.0028s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.00552s (num_starts 2; 0.0028s/start)
set_result_and_counter_example.: 0.005532s (num_starts 287; 0.0000s/start)
corr_graph_enumerate_correlations.: 0.005552s (num_starts 13; 0.0004s/start)
populate_locs_potentially_modified_on_edge.: 0.005634s (num_starts 3; 0.0019s/start)
compute_interesting_exprs_for_invariant_inference_for_pc.: 0.006222s (num_starts 6; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.006247s (num_starts 2; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.006251s (num_starts 2; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.006258s (num_starts 2; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;abstract-memlabel-asserts-houdini-guess.: 0.006263s (num_starts 2; 0.0031s/start)
expr_simplify_using_sprel_and_memlabel_maps.: 0.006712s (num_starts 137; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.007232s (num_starts 2; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.007234s (num_starts 2; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.007243s (num_starts 2; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;abstract-memlabel-asserts-houdini-guess.: 0.007253s (num_starts 2; 0.0036s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.007687s (num_starts 6; 0.0013s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;linear;-trivial.: 0.007707s (num_starts 6; 0.0013s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.007713s (num_starts 6; 0.0013s/start)
get_maximal_basic_block_edge_list_ending_at_pc.: 0.007791s (num_starts 1101; 0.0000s/start)
rdefs_vars_ssa_analysis::xfer_and_meet.: 0.007916s (num_starts 48; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;lb-signed;-trivial.: 0.007927s (num_starts 6; 0.0013s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.007932s (num_starts 6; 0.0013s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.007951s (num_starts 6; 0.0013s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;lb-signed.: 0.007968s (num_starts 6; 0.0013s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;ub-signed;-trivial.: 0.008246s (num_starts 6; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);ub-signed;-trivial.: 0.008254s (num_starts 6; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 0.008274s (num_starts 6; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;ub-signed.: 0.008289s (num_starts 6; 0.0014s/start)
invariant_inference_xfer.src-branches-const-ineq.from.L0%0%d_L0%0%d.: 0.008362s (num_starts 2; 0.0042s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;ub-unsigned;-trivial.: 0.008521s (num_starts 6; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.008536s (num_starts 6; 0.0014s/start)
populate_transitive_closure.: 0.008542s (num_starts 59; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.008605s (num_starts 4; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.008615s (num_starts 4; 0.0022s/start)
populate_auxilliary_structures_dependent_on_locs.: 0.008708s (num_starts 3; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.009198s (num_starts 2; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.009208s (num_starts 2; 0.0046s/start)
compute_vars_reaching_definitions.: 0.009347s (num_starts 2; 0.0047s/start)
construct_linear_combination_exprs.: 0.009387s (num_starts 475; 0.0000s/start)
proof_query_is_trivial.: 0.010417s (num_starts 1061; 0.0000s/start)
expr_substitute_using_available_exprs_submap.: 0.011152s (num_starts 518; 0.0000s/start)
aliasing_constraints.convert_to_expr.: 0.011228s (num_starts 490; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.011793s (num_starts 3; 0.0039s/start)
get_unrolled_loop_paths_from.: 0.011904s (num_starts 7; 0.0017s/start)
expr_linear_relation_holds::visit.var.: 0.011924s (num_starts 645; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.012379s (num_starts 4; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.012394s (num_starts 1; 0.0124s/start)
segment_memory_and_perform_commonMEM_optimization.: 0.01256s (num_starts 490; 0.0000s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);-trivial.: 0.012743s (num_starts 1; 0.0127s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-trivial.: 0.012745s (num_starts 1; 0.0127s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);ub-signed;-trivial.: 0.012746s (num_starts 8; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-trivial.: 0.01275s (num_starts 1; 0.0127s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.012755s (num_starts 2; 0.0064s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.012765s (num_starts 2; 0.0064s/start)
compute_regions.: 0.012805s (num_starts 43; 0.0003s/start)
corr_graph::get_simplified_non_mem_assumes_helper.: 0.012937s (num_starts 493; 0.0000s/start)
populate_memlabel_map.visit1.calling.compute_lr_status_for_expr.: 0.013809s (num_starts 143; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.01384s (num_starts 1; 0.0138s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.013844s (num_starts 1; 0.0138s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.013846s (num_starts 1; 0.0138s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;lb-signed;-trivial.: 0.013986s (num_starts 4; 0.0035s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.014012s (num_starts 8; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.014033s (num_starts 4; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.014064s (num_starts 4; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;-dst-edgecond-implies-src-edgecond;-trivial.: 0.0141s (num_starts 1; 0.0141s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.014101s (num_starts 1; 0.0141s/start)
corr_graph::get_simplified_non_mem_assumes.: 0.014161s (num_starts 493; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);false-predicate;-trivial.: 0.014336s (num_starts 1; 0.0143s/start)
decide_hoare_triple_helper;per-query-type;false-predicate;-trivial.: 0.014337s (num_starts 1; 0.0143s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;false-predicate;-trivial.: 0.014339s (num_starts 1; 0.0143s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);false-predicate;-trivial.: 0.01434s (num_starts 1; 0.0143s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);false-predicate.: 0.014349s (num_starts 1; 0.0143s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;false-predicate.: 0.014352s (num_starts 1; 0.0144s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);false-predicate.: 0.014357s (num_starts 1; 0.0144s/start)
compute_loop_hoisting_select_exprs_at_pcpair.: 0.014397s (num_starts 8; 0.0018s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.014398s (num_starts 1; 0.0144s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;lb-unsigned;-trivial.: 0.014402s (num_starts 1; 0.0144s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.014404s (num_starts 1; 0.0144s/start)
graph_with_guessing_sync_preds.: 0.014685s (num_starts 996; 0.0000s/start)
ldr_decomposition.: 0.015771s (num_starts 216; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.016327s (num_starts 3; 0.0054s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.016335s (num_starts 3; 0.0054s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.016382s (num_starts 4; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.016455s (num_starts 3; 0.0055s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 0.016462s (num_starts 3; 0.0055s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.016514s (num_starts 4; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;linear;-trivial.: 0.01727s (num_starts 9; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.017288s (num_starts 9; 0.0019s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.017295s (num_starts 5; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;dst-ineq-houdini-guess;-trivial.: 0.01733s (num_starts 5; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.017349s (num_starts 5; 0.0035s/start)
eqspace::smallest_point_cover_houdini_expects_stability_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.017977s (num_starts 255; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.018234s (num_starts 4; 0.0046s/start)
get_next_potential_correlations.: 0.018282s (num_starts 7; 0.0026s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.01893s (num_starts 2; 0.0095s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;dst-ineq-houdini-guess;-trivial.: 0.018938s (num_starts 2; 0.0095s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.018941s (num_starts 2; 0.0095s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.019386s (num_starts 6; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.019413s (num_starts 6; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.019443s (num_starts 6; 0.0032s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.019495s (num_starts 6; 0.0032s/start)
generate_aliasing_constraints_from_expr.: 0.019907s (num_starts 2622; 0.0000s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L3%11%bbentry_Lfor.cond1%1%bbentry.: 0.021139s (num_starts 3; 0.0070s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.021384s (num_starts 11; 0.0019s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.021779s (num_starts 3; 0.0073s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.021785s (num_starts 3; 0.0073s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.021805s (num_starts 3; 0.0073s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.021848s (num_starts 3; 0.0073s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.021869s (num_starts 10; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.021986s (num_starts 1; 0.0220s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.022129s (num_starts 10; 0.0022s/start)
do_ssa_transformation.: 0.022282s (num_starts 2; 0.0111s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.022967s (num_starts 1; 0.0230s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.022972s (num_starts 1; 0.0230s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;lb-signed;-trivial.: 0.023245s (num_starts 7; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.023253s (num_starts 7; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;ub-signed;-trivial.: 0.023456s (num_starts 7; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-signed;-trivial.: 0.023467s (num_starts 7; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.024537s (num_starts 2; 0.0123s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.024735s (num_starts 10; 0.0025s/start)
bv_const_ref_map2expr_map.: 0.024769s (num_starts 475; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.024813s (num_starts 5; 0.0050s/start)
pth_collect_preds_using_atom_func_and_wp_fn.operator().: 0.024915s (num_starts 2206; 0.0000s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L3%11%bbentry_Lfor.cond1%1%bbentry.: 0.024977s (num_starts 3; 0.0083s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.024995s (num_starts 8; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.02503s (num_starts 5; 0.0050s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.025036s (num_starts 8; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.025836s (num_starts 2; 0.0129s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.02693s (num_starts 2; 0.0135s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;-dst-edgecond-implies-src-edgecond;-trivial.: 0.02693s (num_starts 2; 0.0135s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.027265s (num_starts 1; 0.0273s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;pred-type-unknown;-trivial.: 0.02852s (num_starts 5; 0.0057s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.028529s (num_starts 5; 0.0057s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.02854s (num_starts 3; 0.0095s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 0.028554s (num_starts 3; 0.0095s/start)
create_sp_version_relations_lattice_at_pc.: 0.028557s (num_starts 195; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.028642s (num_starts 4; 0.0072s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.028669s (num_starts 4; 0.0072s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;-dst-edgecond-implies-src-edgecond;-trivial.: 0.028901s (num_starts 2; 0.0145s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.028904s (num_starts 2; 0.0145s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.028912s (num_starts 2; 0.0145s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;-dst-edgecond-implies-src-edgecond.: 0.028918s (num_starts 2; 0.0145s/start)
graph_to_stream.: 0.028938s (num_starts 4; 0.0072s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.029047s (num_starts 2; 0.0145s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.029057s (num_starts 2; 0.0145s/start)
avail_exprs_val_t::generate_vals_from_gen_set.: 0.02941s (num_starts 171; 0.0002s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.02972s (num_starts 3; 0.0099s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.029735s (num_starts 3; 0.0099s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.03098s (num_starts 5; 0.0062s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;abstract-memlabel-asserts-houdini-guess.: 0.031043s (num_starts 5; 0.0062s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.031387s (num_starts 2; 0.0157s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.031394s (num_starts 2; 0.0157s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.032135s (num_starts 3; 0.0107s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 0.032149s (num_starts 3; 0.0107s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.032682s (num_starts 6; 0.0054s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);linear.: 0.032698s (num_starts 6; 0.0054s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;-dst-edgecond-implies-src-edgecond;-trivial.: 0.034376s (num_starts 2; 0.0172s/start)
gen_pred_from_coeff_row.simplify.: 0.034958s (num_starts 475; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;linear;-trivial.: 0.036094s (num_starts 13; 0.0028s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.036117s (num_starts 13; 0.0028s/start)
predicate_canonicalized.: 0.03618s (num_starts 475; 0.0001s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%19%bbentry_Lfor.cond1%1%bbentry.: 0.036581s (num_starts 17; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;pred-type-unknown;-trivial.: 0.037625s (num_starts 10; 0.0038s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::sp_version_relations_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.037756s (num_starts 171; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;ub-unsigned;-trivial.: 0.038596s (num_starts 8; 0.0048s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.03861s (num_starts 8; 0.0048s/start)
pth_collect_preds_using_atom_func_and_wp_fn.: 0.039869s (num_starts 1575; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.040336s (num_starts 2; 0.0202s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.040347s (num_starts 2; 0.0202s/start)
query:convert_from_z3.: 0.040884s (num_starts 767; 0.0001s/start)
graph_per_loc_dfa_val_t<avail_exprs_val_t>::meet.: 0.041152s (num_starts 171; 0.0002s/start)
liveness_analysis_conservative::xfer_and_meet.: 0.042257s (num_starts 47; 0.0009s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);-trivial.: 0.042352s (num_starts 23; 0.0018s/start)
compute_new_lr_status_on_locs.calling.compute_lr_status_for_expr.: 0.043078s (num_starts 524; 0.0001s/start)
compute_new_lr_status_on_locs.loc_lr_status.simplify_and_compute_lr_status.: 0.043806s (num_starts 524; 0.0001s/start)
get_sprel_map_pair_at_pc.: 0.044351s (num_starts 490; 0.0001s/start)
pth_collect_simplified_preds_using_atom_func.: 0.044411s (num_starts 1478; 0.0000s/start)
tfg::get_aliasing_constraints_for_edge.: 0.044466s (num_starts 599; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.044804s (num_starts 2; 0.0224s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.044814s (num_starts 2; 0.0224s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.045216s (num_starts 20; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.04551s (num_starts 10; 0.0046s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.046702s (num_starts 9; 0.0052s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.047045s (num_starts 8; 0.0059s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.047112s (num_starts 8; 0.0059s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.047771s (num_starts 5; 0.0096s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.047799s (num_starts 5; 0.0096s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.047972s (num_starts 8; 0.0060s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.048012s (num_starts 8; 0.0060s/start)
populate_loc_liveness.: 0.048295s (num_starts 3; 0.0161s/start)
compute_expr_eqclasses_at_pc.: 0.050493s (num_starts 7; 0.0072s/start)
compute_lr_status_for_expr.: 0.050566s (num_starts 678; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.050576s (num_starts 10; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.05068s (num_starts 10; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;dst-ineq-houdini-guess;-trivial.: 0.052708s (num_starts 6; 0.0088s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.052973s (num_starts 6; 0.0088s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.053091s (num_starts 6; 0.0088s/start)
graph_with_guessing_add_node_invariants_top_or_boundary.: 0.053907s (num_starts 9; 0.0060s/start)
avail_exprs_create_submap.: 0.054232s (num_starts 513; 0.0001s/start)
cg_add_node.: 0.054269s (num_starts 9; 0.0060s/start)
edge_update_memlabel_map_for_mlvars.populate_memlabel_map.: 0.054536s (num_starts 171; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.055123s (num_starts 3; 0.0184s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.055137s (num_starts 3; 0.0184s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.055247s (num_starts 2; 0.0276s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.055257s (num_starts 2; 0.0276s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;lb-signed;-trivial.: 0.057971s (num_starts 4; 0.0145s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;lb-signed.: 0.058007s (num_starts 4; 0.0145s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-signed;-trivial.: 0.060391s (num_starts 20; 0.0030s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;lb-unsigned;-trivial.: 0.060431s (num_starts 4; 0.0151s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;lb-unsigned.: 0.060469s (num_starts 4; 0.0151s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.060743s (num_starts 23; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.061463s (num_starts 2; 0.0307s/start)
corr_graph::get_aliasing_constraints_for_edge_helper.: 0.062957s (num_starts 84; 0.0007s/start)
corr_graph::get_aliasing_constraints_for_edge.: 0.063211s (num_starts 84; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.063243s (num_starts 6; 0.0105s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.064802s (num_starts 5; 0.0130s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 0.064812s (num_starts 5; 0.0130s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.064945s (num_starts 1; 0.0649s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.064977s (num_starts 1; 0.0650s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities..: 0.064985s (num_starts 1; 0.0650s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities..: 0.065s (num_starts 1; 0.0650s/start)
tfg_llvm_t::tfg_postprocess_after_pointsto_analysis.: 0.066391s (num_starts 1; 0.0664s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.066621s (num_starts 1; 0.0666s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.066633s (num_starts 1; 0.0666s/start)
decide_hoare_triple_helper;per-path;L3%19%bbentry_Lfor.cond1%1%bbentry;(epsilon);-trivial.: 0.066772s (num_starts 3; 0.0223s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.066777s (num_starts 3; 0.0223s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.066961s (num_starts 16; 0.0042s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.067092s (num_starts 16; 0.0042s/start)
tfg_postprocess_after_pointsto_analysis.: 0.067139s (num_starts 2; 0.0336s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.067547s (num_starts 1; 0.0675s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.067555s (num_starts 1; 0.0676s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.067563s (num_starts 1; 0.0676s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;lb-unsigned;-trivial.: 0.068209s (num_starts 4; 0.0171s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.068213s (num_starts 4; 0.0171s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.068625s (num_starts 1; 0.0686s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.068631s (num_starts 1; 0.0686s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.068641s (num_starts 1; 0.0686s/start)
create_new_corr_graph_edge.new_node.: 0.068777s (num_starts 8; 0.0086s/start)
create_new_corr_graph_edge.: 0.069322s (num_starts 13; 0.0053s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;-dst-edgecond-implies-src-edgecond;-trivial.: 0.069334s (num_starts 4; 0.0173s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.069839s (num_starts 13; 0.0054s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;lb-signed;-trivial.: 0.070065s (num_starts 6; 0.0117s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.070102s (num_starts 1; 0.0701s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.07011s (num_starts 1; 0.0701s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.070143s (num_starts 13; 0.0054s/start)
query:convert_to_z3.: 0.070388s (num_starts 767; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.070582s (num_starts 1; 0.0706s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 0.070831s (num_starts 3; 0.0236s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.071151s (num_starts 1; 0.0712s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;ub-unsigned;-trivial.: 0.071441s (num_starts 6; 0.0119s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;ub-unsigned.: 0.07149s (num_starts 6; 0.0119s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;dst-ineq-houdini-guess;-trivial.: 0.071546s (num_starts 7; 0.0102s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.071985s (num_starts 3; 0.0240s/start)
decide_hoare_triple_helper_get_aliasing_cons.: 0.072011s (num_starts 75; 0.0010s/start)
collect_aliasing_constraints_around_path_helper.: 0.072927s (num_starts 450; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.072988s (num_starts 1; 0.0730s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.072997s (num_starts 1; 0.0730s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.073988s (num_starts 1; 0.0740s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.073994s (num_starts 1; 0.0740s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;pred-type-unknown;-trivial.: 0.074234s (num_starts 4; 0.0186s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.074243s (num_starts 4; 0.0186s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.074441s (num_starts 1; 0.0744s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.074524s (num_starts 11; 0.0068s/start)
compute_new_lr_status_on_locs.: 0.075055s (num_starts 171; 0.0004s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;linear;-trivial.: 0.075359s (num_starts 20; 0.0038s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.076079s (num_starts 1; 0.0761s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.076103s (num_starts 1; 0.0761s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.076128s (num_starts 1; 0.0761s/start)
collect_aliasing_constraints_around_path.: 0.07654s (num_starts 282; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.078439s (num_starts 7; 0.0112s/start)
collect_assumes_around_path_helper.: 0.07915s (num_starts 1101; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.079296s (num_starts 10; 0.0079s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.079321s (num_starts 13; 0.0061s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;abstract-memlabel-asserts-houdini-guess.: 0.079394s (num_starts 4; 0.0198s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.079656s (num_starts 13; 0.0061s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.079691s (num_starts 33; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.080229s (num_starts 1; 0.0802s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.080237s (num_starts 1; 0.0802s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.080468s (num_starts 1; 0.0805s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.080482s (num_starts 1; 0.0805s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.080492s (num_starts 1; 0.0805s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.080504s (num_starts 1; 0.0805s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;lb-unsigned.: 0.080508s (num_starts 1; 0.0805s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.080518s (num_starts 1; 0.0805s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.081646s (num_starts 1; 0.0816s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.082014s (num_starts 1; 0.0820s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.082023s (num_starts 1; 0.0820s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.082301s (num_starts 1; 0.0823s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.082306s (num_starts 1; 0.0823s/start)
get_unrolled_paths_from.: 0.082806s (num_starts 40; 0.0021s/start)
graph_with_paths::collect_assumes_around_path.: 0.083513s (num_starts 1101; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.083555s (num_starts 2; 0.0418s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.083701s (num_starts 1; 0.0837s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.083712s (num_starts 1; 0.0837s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-signed;-trivial.: 0.083746s (num_starts 27; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown.: 0.088891s (num_starts 2; 0.0444s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown.: 0.088925s (num_starts 2; 0.0445s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d).: 0.08894s (num_starts 2; 0.0445s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;lb-unsigned;-trivial.: 0.089054s (num_starts 8; 0.0111s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.089166s (num_starts 11; 0.0081s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.089302s (num_starts 9; 0.0099s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;abstract-memlabel-asserts-houdini-guess.: 0.089309s (num_starts 11; 0.0081s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.089346s (num_starts 9; 0.0099s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;ub-signed;-trivial.: 0.090088s (num_starts 23; 0.0039s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.092222s (num_starts 8; 0.0115s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.093544s (num_starts 8; 0.0117s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;dst-ineq-houdini-guess;-trivial.: 0.093717s (num_starts 15; 0.0062s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.09378s (num_starts 15; 0.0063s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.094659s (num_starts 3; 0.0316s/start)
eqspace::smallest_point_cover_houdini_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.094712s (num_starts 473; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.094995s (num_starts 16; 0.0059s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;abstract-memlabel-asserts-houdini-guess.: 0.095213s (num_starts 16; 0.0060s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 0.095241s (num_starts 17; 0.0056s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 0.095636s (num_starts 6; 0.0159s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.096422s (num_starts 2; 0.0482s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;-dst-edgecond-implies-src-edgecond.: 0.096429s (num_starts 2; 0.0482s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.097074s (num_starts 26; 0.0037s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.09711s (num_starts 1; 0.0971s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.097121s (num_starts 1; 0.0971s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.09714s (num_starts 1; 0.0971s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.097168s (num_starts 1; 0.0972s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities..: 0.097184s (num_starts 1; 0.0972s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities..: 0.097199s (num_starts 1; 0.0972s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.097659s (num_starts 26; 0.0038s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.100218s (num_starts 4; 0.0251s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 0.100737s (num_starts 17; 0.0059s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.101483s (num_starts 5; 0.0203s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.101718s (num_starts 2; 0.0509s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.102309s (num_starts 4; 0.0256s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.10233s (num_starts 4; 0.0256s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;linear;-trivial.: 0.102889s (num_starts 21; 0.0049s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.102925s (num_starts 21; 0.0049s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;ub-unsigned;-trivial.: 0.103234s (num_starts 12; 0.0086s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.103382s (num_starts 1; 0.1034s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.103414s (num_starts 1; 0.1034s/start)
ldr_decompose_and_linear_solve.: 0.104553s (num_starts 216; 0.0005s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::avail_exprs_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.104857s (num_starts 171; 0.0006s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;lb-unsigned;-trivial.: 0.105404s (num_starts 7; 0.0151s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.105415s (num_starts 7; 0.0151s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 0.105523s (num_starts 8; 0.0132s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;ub-signed.: 0.105547s (num_starts 8; 0.0132s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.105989s (num_starts 19; 0.0056s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.106373s (num_starts 1; 0.1064s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.106486s (num_starts 6; 0.0177s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.106576s (num_starts 14; 0.0076s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-trivial.: 0.106834s (num_starts 8; 0.0134s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.106842s (num_starts 8; 0.0134s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.107001s (num_starts 8; 0.0134s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;lb-signed.: 0.107026s (num_starts 8; 0.0134s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.108999s (num_starts 5; 0.0218s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 0.109025s (num_starts 5; 0.0218s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.10958s (num_starts 26; 0.0042s/start)
counter_example_satisfies_preds.: 0.109984s (num_starts 2099; 0.0001s/start)
bv_linear_solve.: 0.110295s (num_starts 216; 0.0005s/start)
query:bv_solve.: 0.111605s (num_starts 216; 0.0005s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.112647s (num_starts 9; 0.0125s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;ub-unsigned.: 0.112669s (num_starts 9; 0.0125s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.114891s (num_starts 1; 0.1149s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.114897s (num_starts 1; 0.1149s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.116688s (num_starts 4; 0.0292s/start)
graph_edge_composition_get_to_state_using_to_state_fn.: 0.119324s (num_starts 596; 0.0002s/start)
gen_pred_from_coeff_row.: 0.11934s (num_starts 475; 0.0003s/start)
compute_preds_for_bv_points.: 0.121367s (num_starts 63; 0.0019s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.121767s (num_starts 102; 0.0012s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.121979s (num_starts 1; 0.1220s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.121985s (num_starts 1; 0.1220s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.129799s (num_starts 2; 0.0649s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.129813s (num_starts 2; 0.0649s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.130089s (num_starts 2; 0.0650s/start)
decide_hoare_triple_helper;per-path;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);-trivial.: 0.132026s (num_starts 21; 0.0063s/start)
graph_with_guessing_relax_dst_memlabels_on_ec_for_corr_graph.: 0.132489s (num_starts 29; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed.: 0.133195s (num_starts 4; 0.0333s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed.: 0.133232s (num_starts 4; 0.0333s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.133535s (num_starts 10; 0.0134s/start)
decide_hoare_triple_helper;per-query-type;ub-signed;-trivial.: 0.133938s (num_starts 45; 0.0030s/start)
add_fresh_counterexample_at_pc_and_propagate.L0%0%d_L0%0%d.inductive-invariants.: 0.135543s (num_starts 28; 0.0048s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.13584s (num_starts 2; 0.0679s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;abstract-memlabel-asserts-houdini-guess.: 0.135846s (num_starts 2; 0.0679s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.: 0.136827s (num_starts 2; 0.0684s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.137512s (num_starts 3; 0.0458s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.137539s (num_starts 3; 0.0458s/start)
invariant_inference_xfer.dst-ineq.from.L3%11%bbentry_Lfor.cond1%1%bbentry.: 0.137916s (num_starts 3; 0.0460s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;-dst-edgecond-implies-src-edgecond.: 0.139489s (num_starts 5; 0.0279s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;dst-ineq-houdini-guess.: 0.140258s (num_starts 8; 0.0175s/start)
bv_solve_returning_intermediate_structures.: 0.140351s (num_starts 216; 0.0006s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L3%19%bbentry_Lfor.cond1%1%bbentry.: 0.140613s (num_starts 17; 0.0083s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.146623s (num_starts 2; 0.0733s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;lb-signed;-trivial.: 0.14751s (num_starts 24; 0.0061s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.148482s (num_starts 5; 0.0297s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;lb-unsigned.: 0.148504s (num_starts 5; 0.0297s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.148776s (num_starts 4; 0.0372s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;dst-ineq-houdini-guess.: 0.148787s (num_starts 4; 0.0372s/start)
invariant_inference_xfer.dst-ineq.from.L0%0%d_L0%0%d.: 0.149312s (num_starts 2; 0.0747s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.150551s (num_starts 2; 0.0753s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.151047s (num_starts 2; 0.0755s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);linear.: 0.154891s (num_starts 12; 0.0129s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.157808s (num_starts 1; 0.1578s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.157812s (num_starts 1; 0.1578s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.157814s (num_starts 1; 0.1578s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);false-predicate.: 0.157824s (num_starts 1; 0.1578s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;false-predicate.: 0.157828s (num_starts 1; 0.1578s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);false-predicate.: 0.157835s (num_starts 1; 0.1578s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.159446s (num_starts 27; 0.0059s/start)
bvsolve_cache_query.miss1.: 0.160889s (num_starts 216; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.1615s (num_starts 2; 0.0808s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.161513s (num_starts 2; 0.0808s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.161535s (num_starts 2; 0.0808s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;lb-unsigned.: 0.161555s (num_starts 2; 0.0808s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.162071s (num_starts 2; 0.0810s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.162092s (num_starts 2; 0.0810s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;outgoing_edges_cover_all_possibilities..: 0.162521s (num_starts 3; 0.0542s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities..: 0.162535s (num_starts 3; 0.0542s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;dst-ineq-houdini-guess;-trivial.: 0.16267s (num_starts 20; 0.0081s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.162717s (num_starts 20; 0.0081s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 0.16279s (num_starts 20; 0.0081s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;dst-ineq-houdini-guess.: 0.162822s (num_starts 20; 0.0081s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.16371s (num_starts 2; 0.0819s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.163727s (num_starts 2; 0.0819s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.sprel.: 0.16458s (num_starts 3138; 0.0001s/start)
bvsolve_cache_query.: 0.166428s (num_starts 216; 0.0008s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);-trivial.: 0.166563s (num_starts 31; 0.0054s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.167288s (num_starts 2; 0.0836s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.167319s (num_starts 2; 0.0837s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.16732s (num_starts 6; 0.0279s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.167336s (num_starts 2; 0.0837s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);linear.: 0.16735s (num_starts 6; 0.0279s/start)
query:simplify-z3.: 0.167369s (num_starts 1620; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;dst-ineq-houdini-guess;-trivial.: 0.171491s (num_starts 19; 0.0090s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 0.171929s (num_starts 4; 0.0430s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;ub-signed.: 0.171956s (num_starts 4; 0.0430s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.172228s (num_starts 2; 0.0861s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond;-trivial.: 0.173629s (num_starts 11; 0.0158s/start)
tfg_relax_pointsto_vals_on_edge.: 0.174016s (num_starts 102; 0.0017s/start)
check_wfconds_on_edge.L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d.: 0.174147s (num_starts 2; 0.0871s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);linear.: 0.176017s (num_starts 22; 0.0080s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;linear.: 0.176054s (num_starts 22; 0.0080s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.176903s (num_starts 4; 0.0442s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.17839s (num_starts 4; 0.0446s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.178966s (num_starts 2; 0.0895s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.179012s (num_starts 2; 0.0895s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 0.180313s (num_starts 10; 0.0180s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.189117s (num_starts 42; 0.0045s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.189501s (num_starts 2; 0.0948s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.189512s (num_starts 2; 0.0948s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);linear.: 0.19218s (num_starts 12; 0.0160s/start)
recomputed_preds_would_be_different_from_current_preds.: 0.194728s (num_starts 1960; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.195116s (num_starts 8; 0.0244s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%11%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.195496s (num_starts 2; 0.0977s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%11%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.195538s (num_starts 2; 0.0978s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%11%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.195571s (num_starts 2; 0.0978s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%11%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.195598s (num_starts 2; 0.0978s/start)
check_wfconds_on_edge.L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry.: 0.196866s (num_starts 2; 0.0984s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.198382s (num_starts 3; 0.0661s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;ub-unsigned;-trivial.: 0.198868s (num_starts 35; 0.0057s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.201553s (num_starts 2; 0.1008s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.20344s (num_starts 3; 0.0678s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.213723s (num_starts 2; 0.1069s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.213743s (num_starts 2; 0.1069s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.214922s (num_starts 1; 0.2149s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.214927s (num_starts 1; 0.2149s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.214929s (num_starts 1; 0.2149s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.214944s (num_starts 1; 0.2149s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.214958s (num_starts 1; 0.2150s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.217479s (num_starts 5; 0.0435s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;pred-type-unknown;-trivial.: 0.219053s (num_starts 14; 0.0156s/start)
ftmap_pointsto_analysis_combo_dfa_t.alias_val_xfer_and_meet.: 0.227669s (num_starts 69; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;lb-signed.: 0.22904s (num_starts 5; 0.0458s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 0.229812s (num_starts 12; 0.0192s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 0.229938s (num_starts 12; 0.0192s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.230175s (num_starts 1; 0.2302s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.230179s (num_starts 1; 0.2302s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.230192s (num_starts 1; 0.2302s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;dst_edge_composition_proves_false.: 0.230195s (num_starts 1; 0.2302s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.230801s (num_starts 15; 0.0154s/start)
invariant_inference_xfer.expr-group-bvs.from.L3%11%bbentry_Lfor.cond1%1%bbentry.: 0.231572s (num_starts 3; 0.0772s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 0.232022s (num_starts 6; 0.0387s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;linear;-trivial.: 0.232678s (num_starts 17; 0.0137s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 0.232705s (num_starts 22; 0.0106s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.model.: 0.232906s (num_starts 3138; 0.0001s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%11%bbentry_Lfor.cond1%1%bbentry.: 0.233172s (num_starts 3; 0.0777s/start)
solve_for_bv_points.: 0.23341s (num_starts 216; 0.0011s/start)
expr_label_memlabels_using_memlabel_map_visitor.simplify.: 0.233665s (num_starts 3275; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.236119s (num_starts 1; 0.2361s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%11%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.236121s (num_starts 1; 0.2361s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%11%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.236142s (num_starts 1; 0.2361s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;dst_edge_composition_proves_false.: 0.236146s (num_starts 1; 0.2361s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.24076s (num_starts 1; 0.2408s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.24076s (num_starts 1; 0.2408s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.240763s (num_starts 1; 0.2408s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.240764s (num_starts 1; 0.2408s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false.: 0.240772s (num_starts 1; 0.2408s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo;dst_edge_composition_proves_false.: 0.240775s (num_starts 1; 0.2408s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false.: 0.240779s (num_starts 1; 0.2408s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon).: 0.241138s (num_starts 2; 0.1206s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.241506s (num_starts 3; 0.0805s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.244278s (num_starts 64; 0.0038s/start)
add_fresh_counterexample_at_pc_and_propagate.L3%11%bbentry_Lfor.cond1%1%bbentry.inductive-invariants.: 0.249464s (num_starts 14; 0.0178s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;pred-type-unknown.: 0.251518s (num_starts 12; 0.0210s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.254192s (num_starts 3; 0.0847s/start)
expr_try_converting_unaliased_memslots_to_fresh_vars.: 0.254377s (num_starts 490; 0.0005s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.256331s (num_starts 41; 0.0063s/start)
check_wfconds_on_edge.L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry.: 0.262369s (num_starts 4; 0.0656s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.266995s (num_starts 40; 0.0067s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.26847s (num_starts 5; 0.0537s/start)
dst_tfg_counter_example_translate_on_edge_composition.: 0.274038s (num_starts 410; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.275615s (num_starts 3; 0.0919s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.279626s (num_starts 16; 0.0175s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.: 0.287075s (num_starts 3138; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.288386s (num_starts 2; 0.1442s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.288396s (num_starts 2; 0.1442s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.289394s (num_starts 1; 0.2894s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.289399s (num_starts 1; 0.2894s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.289401s (num_starts 1; 0.2894s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);false-predicate.: 0.289413s (num_starts 1; 0.2894s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;false-predicate.: 0.289417s (num_starts 1; 0.2894s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);false-predicate.: 0.289423s (num_starts 1; 0.2894s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.290339s (num_starts 1; 0.2903s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%19%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.290343s (num_starts 1; 0.2903s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%19%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.290367s (num_starts 1; 0.2904s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;dst_edge_composition_proves_false.: 0.29037s (num_starts 1; 0.2904s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);-trivial.: 0.292648s (num_starts 82; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 0.295137s (num_starts 10; 0.0295s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;pred-type-unknown;-trivial.: 0.29825s (num_starts 17; 0.0175s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.298276s (num_starts 17; 0.0175s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;linear.: 0.299496s (num_starts 18; 0.0166s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.302829s (num_starts 3; 0.1009s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;lb-unsigned.: 0.30284s (num_starts 3; 0.1009s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.303915s (num_starts 1; 0.3039s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.303921s (num_starts 1; 0.3039s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.303923s (num_starts 1; 0.3039s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);false-predicate.: 0.303936s (num_starts 1; 0.3039s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;false-predicate.: 0.30394s (num_starts 1; 0.3039s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);false-predicate.: 0.303945s (num_starts 1; 0.3039s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.309062s (num_starts 4; 0.0773s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.315104s (num_starts 35; 0.0090s/start)
ftmap_pointsto_analysis_combo_dfa_t.ftmap_dfa_flow_insensitive_xfer_and_meet.: 0.315331s (num_starts 69; 0.0046s/start)
graph_edge_composition_get_simplified_edge_cond.: 0.325698s (num_starts 11139; 0.0000s/start)
decide_hoare_triple_helper;per-query-type;lb-signed;-trivial.: 0.327929s (num_starts 58; 0.0057s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.329321s (num_starts 4; 0.0823s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.334892s (num_starts 6; 0.0558s/start)
decide_hoare_triple_helper;per-query-type;lb-unsigned;-trivial.: 0.33745s (num_starts 24; 0.0141s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 0.338491s (num_starts 30; 0.0113s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recomputed_preds_would_be_different_from_current_preds.: 0.341433s (num_starts 216; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.352856s (num_starts 1; 0.3529s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.352859s (num_starts 1; 0.3529s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.352868s (num_starts 1; 0.3529s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;dst_edge_composition_proves_false.: 0.352872s (num_starts 1; 0.3529s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.359223s (num_starts 4; 0.0898s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;-dst-edgecond-implies-src-edgecond.: 0.359318s (num_starts 4; 0.0898s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;ub-signed.: 0.365979s (num_starts 26; 0.0141s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;pred-type-unknown.: 0.369784s (num_starts 16; 0.0231s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.371297s (num_starts 5; 0.0743s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.371364s (num_starts 5; 0.0743s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.371401s (num_starts 5; 0.0743s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.372626s (num_starts 1; 0.3726s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.372629s (num_starts 1; 0.3726s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.381195s (num_starts 7; 0.0545s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;ub-unsigned.: 0.381214s (num_starts 7; 0.0545s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;linear.: 0.384825s (num_starts 24; 0.0160s/start)
check_wfconds_on_edge.L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry.: 0.387282s (num_starts 4; 0.0968s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 0.388846s (num_starts 10; 0.0389s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;dst-ineq-houdini-guess.: 0.388893s (num_starts 10; 0.0389s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 0.388969s (num_starts 10; 0.0389s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.39552s (num_starts 5; 0.0791s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.395558s (num_starts 5; 0.0791s/start)
check_wfconds_on_edge.L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry.: 0.398978s (num_starts 10; 0.0399s/start)
ftmap_run_pointsto_analysis.: 0.399066s (num_starts 2; 0.1995s/start)
tfg_run_pointsto_analysis.: 0.399455s (num_starts 2; 0.1997s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.400327s (num_starts 19; 0.0211s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;linear;-trivial.: 0.40351s (num_starts 91; 0.0044s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;linear;-trivial.: 0.40433s (num_starts 36; 0.0112s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.41061s (num_starts 3; 0.1369s/start)
tfg_populate_structs_after_ssa_construction.: 0.411619s (num_starts 2; 0.2058s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.41189s (num_starts 32; 0.0129s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 0.413305s (num_starts 18; 0.0230s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;pred-type-unknown.: 0.413352s (num_starts 18; 0.0230s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;dst-ineq-houdini-guess;-trivial.: 0.415239s (num_starts 39; 0.0106s/start)
expr_try_breaking_bvextracts_to_fresh_vars.: 0.421128s (num_starts 490; 0.0009s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.424842s (num_starts 101; 0.0042s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.dst_tfg.computeWP_for_pred_across_ec.: 0.429012s (num_starts 1155; 0.0004s/start)
decide_hoare_triple_helper;per-query-type;ub-unsigned;-trivial.: 0.434053s (num_starts 76; 0.0057s/start)
tfg_ssa_construct_from_non_ssa_tfg.: 0.437451s (num_starts 2; 0.2187s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess.: 0.446676s (num_starts 43; 0.0104s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.446791s (num_starts 22; 0.0203s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.44984s (num_starts 4; 0.1125s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%19%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.451676s (num_starts 4; 0.1129s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%19%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.451761s (num_starts 4; 0.1129s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.455937s (num_starts 23; 0.0198s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 0.456497s (num_starts 17; 0.0269s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.462908s (num_starts 4; 0.1157s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.464442s (num_starts 5; 0.0929s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.466845s (num_starts 5; 0.0934s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;pred-type-unknown;-trivial.: 0.478751s (num_starts 48; 0.0100s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L0%0%d_L0%0%d.: 0.486309s (num_starts 2; 0.2432s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 0.48947s (num_starts 20; 0.0245s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;dst-ineq-houdini-guess.: 0.489528s (num_starts 20; 0.0245s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.494236s (num_starts 4; 0.1236s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.509202s (num_starts 24; 0.0212s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.511633s (num_starts 2; 0.2558s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.511645s (num_starts 2; 0.2558s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.511646s (num_starts 2; 0.2558s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.511809s (num_starts 2; 0.2559s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.511819s (num_starts 2; 0.2559s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.511821s (num_starts 2; 0.2559s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.515503s (num_starts 5; 0.1031s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;lb-signed.: 0.51552s (num_starts 5; 0.1031s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.515545s (num_starts 5; 0.1031s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 0.51578s (num_starts 6; 0.0860s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;ub-unsigned.: 0.515798s (num_starts 6; 0.0860s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 0.515839s (num_starts 6; 0.0860s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;pred-type-unknown;-trivial.: 0.51877s (num_starts 35; 0.0148s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.518919s (num_starts 63; 0.0082s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.src_tfg.computeWP_for_pred_across_ec.: 0.521773s (num_starts 1086; 0.0005s/start)
decide_hoare_triple_helper;per-query-type;ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.524897s (num_starts 6; 0.0875s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.525734s (num_starts 4; 0.1314s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.525842s (num_starts 4; 0.1315s/start)
apply_mask_and_overlay_array_constant.mk_array_constant.: 0.532773s (num_starts 454; 0.0012s/start)
../../include/graph/smallest_point_cover.h.smallest_point_cover_add_point_using_CE.: 0.54332s (num_starts 2176; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.563248s (num_starts 8; 0.0704s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.563356s (num_starts 1; 0.5634s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%11%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.563359s (num_starts 1; 0.5634s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%11%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.563375s (num_starts 1; 0.5634s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;dst_edge_composition_proves_false.: 0.563379s (num_starts 1; 0.5634s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.569167s (num_starts 5; 0.1138s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.574632s (num_starts 37; 0.0155s/start)
apply_mask_and_overlay_array_constant.: 0.575828s (num_starts 454; 0.0013s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.576345s (num_starts 5; 0.1153s/start)
guarded_predicate_set_and.: 0.579733s (num_starts 490; 0.0012s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.580068s (num_starts 2; 0.2900s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.58007s (num_starts 2; 0.2900s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.580079s (num_starts 2; 0.2900s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.583016s (num_starts 2; 0.2915s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.583078s (num_starts 2; 0.2915s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.584217s (num_starts 5; 0.1168s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;ub-unsigned.: 0.584248s (num_starts 5; 0.1168s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.584276s (num_starts 5; 0.1169s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.589228s (num_starts 10; 0.0589s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.598425s (num_starts 6; 0.0997s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.607414s (num_starts 8; 0.0759s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.618494s (num_starts 12; 0.0515s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 0.62661s (num_starts 32; 0.0196s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.62864s (num_starts 8; 0.0786s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.647453s (num_starts 6; 0.1079s/start)
put_smtlib_string_in_file.: 0.650285s (num_starts 574; 0.0011s/start)
lhs_set_sort.: 0.65258s (num_starts 490; 0.0013s/start)
decide_hoare_triple_helper;per-query-type;ub-signed.: 0.659669s (num_starts 51; 0.0129s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.676857s (num_starts 6; 0.1128s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;-dst-edgecond-implies-src-edgecond.: 0.682023s (num_starts 8; 0.0853s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.684301s (num_starts 5; 0.1369s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.684388s (num_starts 5; 0.1369s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.693136s (num_starts 7; 0.0990s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.693496s (num_starts 9; 0.0771s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.699961s (num_starts 3; 0.2333s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.70185s (num_starts 5; 0.1404s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 0.705996s (num_starts 13; 0.0543s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.71625s (num_starts 13; 0.0551s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.716465s (num_starts 9; 0.0796s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.716517s (num_starts 9; 0.0796s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;-dst-edgecond-implies-src-edgecond.: 0.720272s (num_starts 9; 0.0800s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.727959s (num_starts 3; 0.2427s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.727978s (num_starts 3; 0.2427s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.733342s (num_starts 1; 0.7333s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%19%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.733345s (num_starts 1; 0.7333s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%19%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.733364s (num_starts 1; 0.7334s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;dst_edge_composition_proves_false.: 0.733368s (num_starts 1; 0.7334s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.735931s (num_starts 16; 0.0460s/start)
check_wfconds_on_edge.L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry.: 0.738463s (num_starts 8; 0.0923s/start)
decide_hoare_triple_helper;per-query-type;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.751125s (num_starts 3; 0.2504s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);linear.: 0.764193s (num_starts 16; 0.0478s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;linear.: 0.764235s (num_starts 16; 0.0478s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.764772s (num_starts 13; 0.0588s/start)
decide_hoare_triple_helper;per-query-type;false-predicate.: 0.76555s (num_starts 4; 0.1914s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;lb-unsigned.: 0.766235s (num_starts 14; 0.0547s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 0.779369s (num_starts 13; 0.0600s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.786856s (num_starts 9; 0.0874s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.786959s (num_starts 9; 0.0874s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%19%bbentry_Lfor.cond1%1%bbentry.: 0.790153s (num_starts 17; 0.0465s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.790558s (num_starts 10; 0.0791s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%11%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.799451s (num_starts 2; 0.3997s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%11%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.799537s (num_starts 2; 0.3998s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.817226s (num_starts 4; 0.2043s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.817234s (num_starts 4; 0.2043s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.822041s (num_starts 16; 0.0514s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;lb-unsigned.: 0.822125s (num_starts 16; 0.0514s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.826704s (num_starts 2; 0.4134s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.826715s (num_starts 2; 0.4134s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.82672s (num_starts 2; 0.4134s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.826758s (num_starts 11; 0.0752s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.830251s (num_starts 6; 0.1384s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;lb-signed.: 0.830277s (num_starts 6; 0.1384s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.830311s (num_starts 6; 0.1384s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.838716s (num_starts 8; 0.1048s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.838784s (num_starts 8; 0.1048s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;dst-ineq-houdini-guess.: 0.843593s (num_starts 16; 0.0527s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);linear.: 0.852014s (num_starts 72; 0.0118s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.857955s (num_starts 5; 0.1716s/start)
decide_hoare_triple_helper;per-path;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);-trivial.: 0.859611s (num_starts 103; 0.0083s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.868157s (num_starts 62; 0.0140s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.879197s (num_starts 6; 0.1465s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.87938s (num_starts 6; 0.1466s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L0%0%d_L0%0%d.: 0.89094s (num_starts 2; 0.4455s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.891527s (num_starts 8; 0.1114s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;pred-type-unknown.: 0.891552s (num_starts 8; 0.1114s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.891628s (num_starts 5; 0.1783s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);linear.: 0.919363s (num_starts 28; 0.0328s/start)
graph_ec_apply_trans_funs_helper.0.: 0.925887s (num_starts 2432; 0.0004s/start)
graph_ec_apply_trans_funs_helper.: 0.934967s (num_starts 2441; 0.0004s/start)
graph_ec_apply_trans_funs_using_wp_fn.: 0.940808s (num_starts 2441; 0.0004s/start)
computeWP_for_pred_across_ec.graph_ec_apply_trans_funs_using_wp_fn.: 0.947249s (num_starts 2430; 0.0004s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.947589s (num_starts 12; 0.0790s/start)
computeWP_for_pred_across_ec.: 0.955139s (num_starts 2430; 0.0004s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.962882s (num_starts 5; 0.1926s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.962941s (num_starts 5; 0.1926s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 0.963017s (num_starts 5; 0.1926s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 0.963063s (num_starts 5; 0.1926s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.993357s (num_starts 10; 0.0993s/start)
decide_hoare_triple_helper;per-path;L3%11%bbentry_Lfor.cond1%1%bbentry;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.994923s (num_starts 4; 0.2487s/start)
decide_hoare_triple_helper;per-path;L3%11%bbentry_Lfor.cond1%1%bbentry;(epsilon).: 0.995154s (num_starts 4; 0.2488s/start)
decide_hoare_triple_helper;per-query-type;dst-ineq-houdini-guess;-trivial.: 1.00338s (num_starts 113; 0.0089s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.02365s (num_starts 2; 0.5118s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 1.02375s (num_starts 2; 0.5119s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.02783s (num_starts 9; 0.1142s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.05032s (num_starts 8; 0.1313s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.05042s (num_starts 8; 0.1313s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.05048s (num_starts 8; 0.1313s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.07419s (num_starts 13; 0.0826s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.08084s (num_starts 8; 0.1351s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.08873s (num_starts 14; 0.0778s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.09494s (num_starts 8; 0.1369s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 1.09515s (num_starts 12; 0.0913s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L0%0%d_L0%0%d.: 1.10044s (num_starts 2; 0.5502s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 1.1121s (num_starts 10; 0.1112s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry.from.L3%19%bbentry_Lfor.cond1%1%bbentry.: 1.11242s (num_starts 5; 0.2225s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;lb-signed.: 1.12081s (num_starts 14; 0.0801s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.12291s (num_starts 5; 0.2246s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.12294s (num_starts 5; 0.2246s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 1.14031s (num_starts 14; 0.0815s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;linear.: 1.14034s (num_starts 14; 0.0815s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.: 1.14283s (num_starts 1086; 0.0011s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.15493s (num_starts 11; 0.1050s/start)
edge_composition_apply_trans_funs_on_pred.: 1.15876s (num_starts 996; 0.0012s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.1667s (num_starts 8; 0.1458s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 1.16759s (num_starts 12; 0.0973s/start)
invariant_inference_xfer.src-branches-const-ineq.from.L3%11%bbentry_Lfor.cond1%1%bbentry.: 1.16811s (num_starts 3; 0.3894s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.1757s (num_starts 5; 0.2351s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.17574s (num_starts 5; 0.2351s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.17576s (num_starts 5; 0.2352s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 1.17919s (num_starts 27; 0.0437s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);linear.: 1.18355s (num_starts 11; 0.1076s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;linear.: 1.18358s (num_starts 11; 0.1076s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);linear.: 1.18363s (num_starts 11; 0.1076s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.18947s (num_starts 6; 0.1982s/start)
invariant_inference_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.: 1.19491s (num_starts 2; 0.5975s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 1.19582s (num_starts 33; 0.0362s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 1.2113s (num_starts 17; 0.0713s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.22998s (num_starts 16; 0.0769s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;lb-signed.: 1.24291s (num_starts 32; 0.0388s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.24408s (num_starts 5; 0.2488s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 1.25088s (num_starts 40; 0.0313s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);linear.: 1.25378s (num_starts 112; 0.0112s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.27654s (num_starts 11; 0.1160s/start)
decide_hoare_triple_helper;per-query-type;linear;-trivial.: 1.2794s (num_starts 213; 0.0060s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 1.27995s (num_starts 25; 0.0512s/start)
check_equivalence_proof.: 1.29144s (num_starts 1; 1.2914s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.29221s (num_starts 9; 0.1436s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;ub-unsigned.: 1.29796s (num_starts 11; 0.1180s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.30019s (num_starts 17; 0.0765s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;pred-type-unknown.: 1.31816s (num_starts 56; 0.0235s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.32232s (num_starts 7; 0.1889s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.32241s (num_starts 7; 0.1889s/start)
expr_do_simplify_using_lhs_set_and_precond.: 1.34815s (num_starts 1488; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 1.35382s (num_starts 31; 0.0437s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon).: 1.38409s (num_starts 19; 0.0728s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L3%19%bbentry_Lfor.cond1%1%bbentry.: 1.38909s (num_starts 17; 0.0817s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 1.3893s (num_starts 30; 0.0463s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.39957s (num_starts 7; 0.1999s/start)
collect_inductive_preds_around_path.: 1.40101s (num_starts 996; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 1.41196s (num_starts 16; 0.0882s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 1.41212s (num_starts 16; 0.0883s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 1.43504s (num_starts 48; 0.0299s/start)
decide_hoare_triple_helper;per-path;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.45385s (num_starts 9; 0.1615s/start)
decide_hoare_triple_helper;per-path;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);-trivial.: 1.45775s (num_starts 88; 0.0166s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;linear.: 1.47897s (num_starts 104; 0.0142s/start)
lhs_set_eliminate_constructs_that_the_solver_cannot_handle.: 1.50732s (num_starts 490; 0.0031s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 1.51518s (num_starts 17; 0.0891s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 1.54538s (num_starts 51; 0.0303s/start)
prove_spawn_and_join.eliminate_constructs_that_the_solver_cannot_handle1.: 1.58426s (num_starts 490; 0.0032s/start)
decide_hoare_triple_helper;per-path;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry).: 1.58697s (num_starts 30; 0.0529s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 1.58979s (num_starts 49; 0.0324s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;pred-type-unknown.: 1.60028s (num_starts 43; 0.0372s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 1.64512s (num_starts 17; 0.0968s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown;-trivial.: 1.65827s (num_starts 135; 0.0123s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.69274s (num_starts 20; 0.0846s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 1.82091s (num_starts 80; 0.0228s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.85207s (num_starts 19; 0.0975s/start)
decide_hoare_triple_helper;per-query-type;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.00375s (num_starts 21; 0.0954s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 2.02475s (num_starts 73; 0.0277s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond.: 2.02657s (num_starts 30; 0.0676s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;dst-ineq-houdini-guess.: 2.10883s (num_starts 59; 0.0357s/start)
decide_hoare_triple_helper;per-path;L3%19%bbentry_Lfor.cond1%1%bbentry;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.14852s (num_starts 12; 0.1790s/start)
check_wfconds_on_edge.: 2.1586s (num_starts 34; 0.0635s/start)
decide_hoare_triple_helper;per-path;L3%19%bbentry_Lfor.cond1%1%bbentry;(epsilon).: 2.21618s (num_starts 15; 0.1477s/start)
decide_hoare_triple_helper;per-query-type;lb-unsigned.: 2.34245s (num_starts 45; 0.0521s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.41019s (num_starts 9; 0.2678s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.41022s (num_starts 9; 0.2678s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 2.43887s (num_starts 14; 0.1742s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;pred-type-unknown.: 2.43892s (num_starts 14; 0.1742s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);-trivial.: 2.47885s (num_starts 357; 0.0069s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.56642s (num_starts 12; 0.2139s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.58051s (num_starts 7; 0.3686s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.58061s (num_starts 7; 0.3687s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.62383s (num_starts 11; 0.2385s/start)
decide_hoare_triple_helper;per-query-type;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.6469s (num_starts 7; 0.3781s/start)
decide_hoare_triple_helper;per-query-type;dst_edge_composition_proves_false.: 2.64713s (num_starts 7; 0.3782s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 2.65535s (num_starts 18; 0.1475s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.6663s (num_starts 10; 0.2666s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.66655s (num_starts 10; 0.2667s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 2.67111s (num_starts 20; 0.1336s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 2.68778s (num_starts 21; 0.1280s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 2.74523s (num_starts 17; 0.1615s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.7481s (num_starts 11; 0.2498s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.7575s (num_starts 9; 0.3064s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;ub-unsigned.: 2.76596s (num_starts 47; 0.0589s/start)
compute_z3_expr.: 2.76878s (num_starts 1054; 0.0026s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 2.80065s (num_starts 20; 0.1400s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;ub-unsigned.: 2.85184s (num_starts 23; 0.1240s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;dst-ineq-houdini-guess.: 2.92952s (num_starts 28; 0.1046s/start)
dst_edge_composition_proves_false.: 2.95528s (num_starts 7; 0.4222s/start)
get_next_dst_edge_composition_to_correlate.: 3.00813s (num_starts 8; 0.3760s/start)
decide_hoare_triple.: 3.06797s (num_starts 10; 0.3068s/start)
check_preds_on_edge_compositions.dhd_with_ce_propagation.: 3.11925s (num_starts 90; 0.0347s/start)
check_preds_on_edge_compositions.: 3.17058s (num_starts 39; 0.0813s/start)
invariant_inference_xfer.dst-ineq.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 3.4067s (num_starts 17; 0.2004s/start)
parse_z3_model.: 3.52732s (num_starts 147; 0.0240s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.53489s (num_starts 12; 0.2946s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.53495s (num_starts 12; 0.2946s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.53498s (num_starts 12; 0.2946s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 3.53846s (num_starts 14; 0.2527s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;pred-type-unknown.: 3.53851s (num_starts 14; 0.2528s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 3.53859s (num_starts 14; 0.2528s/start)
read_counter_examples_from_channel.: 3.56626s (num_starts 75; 0.0476s/start)
decide_hoare_triple_helper;per-query-type;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.78221s (num_starts 22; 0.1719s/start)
decide_hoare_triple_helper;per-path;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.84569s (num_starts 26; 0.1479s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.96521s (num_starts 21; 0.1888s/start)
decide_hoare_triple_helper;per-query-type;lb-signed.: 4.11185s (num_starts 80; 0.0514s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry).: 4.13343s (num_starts 52; 0.0795s/start)
invariant_inference_xfer.expr-group-bvs.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 4.28127s (num_starts 17; 0.2518s/start)
decide_hoare_triple_helper;per-path;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry).: 4.70988s (num_starts 129; 0.0365s/start)
invariant_inference_xfer.src-branches-const-ineq.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 4.92039s (num_starts 29; 0.1697s/start)
decide_hoare_triple_helper;-trivial.: 5.65018s (num_starts 718; 0.0079s/start)
invariant_inference_xfer.dst-ineq.from.L3%19%bbentry_Lfor.cond1%1%bbentry.: 5.79297s (num_starts 17; 0.3408s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 6.1786s (num_starts 42; 0.1471s/start)
decide_hoare_triple_helper;per-query-type;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 6.20571s (num_starts 52; 0.1193s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 6.37695s (num_starts 65; 0.0981s/start)
add_fresh_counterexample_at_pc_and_propagate.L3%7%bbentry_Lfor.cond%1%bbentry.inductive-invariants.: 6.43295s (num_starts 104; 0.0619s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry).: 6.47583s (num_starts 124; 0.0522s/start)
invariant_inference_xfer.src-branches-const-ineq.from.L3%19%bbentry_Lfor.cond1%1%bbentry.: 6.5356s (num_starts 22; 0.2971s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 6.55786s (num_starts 28; 0.2342s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry).: 6.6019s (num_starts 51; 0.1294s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 6.84667s (num_starts 23; 0.2977s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 6.84726s (num_starts 23; 0.2977s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);linear.: 7.1275s (num_starts 39; 0.1828s/start)
decide_hoare_triple_helper;per-query-type;dst-ineq-houdini-guess.: 7.21277s (num_starts 165; 0.0437s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);linear.: 7.29547s (num_starts 45; 0.1621s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 7.69361s (num_starts 28; 0.2748s/start)
ce_reconcile_sorts.: 8.06483s (num_starts 149; 0.0541s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;linear.: 8.09938s (num_starts 64; 0.1266s/start)
decide_hoare_triple_helper;per-query-type;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 8.145s (num_starts 38; 0.2143s/start)
decide_hoare_triple_helper;per-query-type;ub-unsigned.: 8.5816s (num_starts 114; 0.0753s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry).: 8.86733s (num_starts 422; 0.0210s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 9.1608s (num_starts 46; 0.1991s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown.: 10.8226s (num_starts 181; 0.0598s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 11.718s (num_starts 17; 0.6893s/start)
decide_hoare_triple_helper;per-query-type;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 12.2426s (num_starts 60; 0.2040s/start)
check_node_stability_after_CE_addition.: 13.4086s (num_starts 279; 0.0481s/start)
decide_hoare_triple_helper;per-query-type;linear.: 13.5277s (num_starts 273; 0.0496s/start)
decide_hoare_triple_helper;per-path;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 14.5482s (num_starts 58; 0.2508s/start)
src_tfg_counter_example_translate_on_edge_composition.delta{1,0}.: 14.8676s (num_starts 224; 0.0664s/start)
src_tfg_counter_example_translate_on_edge_composition.: 14.8693s (num_starts 278; 0.0535s/start)
propagate_nodece_across_edge.: 15.9188s (num_starts 89; 0.1789s/start)
decide_hoare_triple_helper;per-path;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry).: 16.013s (num_starts 146; 0.1097s/start)
counter_example_translate_on_edge_composition_helper.: 19.496s (num_starts 2179; 0.0089s/start)
add_fresh_counterexample_at_pc_and_propagate.L3%19%bbentry_Lfor.cond1%1%bbentry.inductive-invariants.: 20.9151s (num_starts 28; 0.7470s/start)
query:smt.: 24.6687s (num_starts 287; 0.0860s/start)
invariant_inference_xfer.expr-group-bvs.from.L3%19%bbentry_Lfor.cond1%1%bbentry.: 25.385s (num_starts 17; 1.4932s/start)
add_fresh_counterexample_at_pc_and_propagate.: 27.7342s (num_starts 174; 0.1594s/start)
decide_hoare_triple_with_alias_cons.ce.: 27.7388s (num_starts 903; 0.0307s/start)
spawn_smt_query.: 28.2382s (num_starts 287; 0.0984s/start)
corr_graph::add_edge().: 29.1469s (num_starts 13; 2.2421s/start)
corr_graph_create_and_add_cg_edge_composition_using_src_and_dst_fp.: 29.22s (num_starts 13; 2.2477s/start)
corr_graph_add_correlation.: 29.2204s (num_starts 13; 2.2477s/start)
corr_graph_add_correlation_and_create_new_correl_entry.: 29.2211s (num_starts 13; 2.2478s/start)
counter_example_falsifies_preds.: 36.0287s (num_starts 439; 0.0821s/start)
counter_example_evaluate_preds.: 36.1331s (num_starts 2538; 0.0142s/start)
solver_provable.: 40.3714s (num_starts 490; 0.0824s/start)
solver_satisfiable-cache-miss.: 40.4085s (num_starts 287; 0.1408s/start)
solver_satisfiable.: 40.4124s (num_starts 491; 0.0823s/start)
expr_is_provable.: 41.0562s (num_starts 490; 0.0838s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_commonMEM_optimization.: 41.0642s (num_starts 490; 0.0838s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_aliasing_constraints_generation.: 41.0888s (num_starts 490; 0.0839s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_simplify_and_add_auxiliary_structures.: 41.11s (num_starts 490; 0.0839s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_precond_is_false.: 41.7458s (num_starts 490; 0.0852s/start)
is_expr_equal_using_lhs_set_and_precond_helper.syntactic_check_failed.: 41.8377s (num_starts 490; 0.0854s/start)
is_expr_equal_using_lhs_set_and_precond_helper.: 41.8451s (num_starts 490; 0.0854s/start)
is_expr_equal_using_lhs_set_and_precond.: 47.3326s (num_starts 490; 0.0966s/start)
prove.: 47.3389s (num_starts 490; 0.0966s/start)
prove_spawn_and_join_helper.: 47.3416s (num_starts 490; 0.0966s/start)
decide_hoare_triple_helper;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 47.6789s (num_starts 278; 0.1715s/start)
prove_spawn_and_join.: 50.219s (num_starts 490; 0.1025s/start)
prove_wrapper.proof_query_not_trivial.: 50.2991s (num_starts 490; 0.1027s/start)
prove_wrapper.: 50.4607s (num_starts 1061; 0.0476s/start)
decide_hoare_triple_check_ub.: 51.6971s (num_starts 996; 0.0519s/start)
decide_hoare_triple_helper.: 53.3704s (num_starts 996; 0.0536s/start)
update_invariant_state_for_edges.: 77.3958s (num_starts 11; 7.0360s/start)
cg_check_new_cg_ec.: 77.396s (num_starts 11; 7.0360s/start)
correl_entry_apply.: 77.3967s (num_starts 11; 7.0361s/start)
expandProductCFG.: 80.4246s (num_starts 12; 6.7020s/start)
decide_hoare_triple_with_alias_cons.: 81.117s (num_starts 996; 0.0814s/start)
bestFirstSearch.: 109.725s (num_starts 1; 109.7248s/start)
Time taken for equivalence check.: 111.032s (num_starts 1; 111.0317s/start)

counters:
# of Paths Prunned through CE propagation.: 4
# of assume sat failures for undef-behavioursome.edge.Lfor.body3%1%d=>Lfor.cond1%1%bbentry.: 13
# of correlations rejected by -dst-edgecond-implies-src-edgecond check.: 4
# of paths enumerated.: 41
# of paths expanded.: 11
# of queries to linear solver.: 216
# of smt-solver-queries.: 287
L0%0%d=>Lfor.cond%1%bbentry-src_ecs.: 4
L0%0%d=>Lfor.cond%1%bbentry-src_to_pcs.: 4
Lfor.cond%1%bbentry=>E0%0%d-src_ecs.: 1
Lfor.cond%1%bbentry=>E0%0%d-src_to_pcs.: 1
Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry-src_ecs.: 5
Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry-src_to_pcs.: 4
Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry-src_ecs.: 1
Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry-src_to_pcs.: 1
Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry-src_ecs.: 2
Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry-src_to_pcs.: 1
num-backtrackings.: 4
removed-siblings.: 2
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.iters.: 2
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.prove_queries.: 2
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%11%bbentry_Lfor.cond1%1%bbentry.iters.: 3
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%11%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%19%bbentry_Lfor.cond1%1%bbentry.iters.: 17
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%19%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 17
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.iters.: 2
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%11%bbentry_Lfor.cond1%1%bbentry.iters.: 1
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%11%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 1
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%19%bbentry_Lfor.cond1%1%bbentry.iters.: 11
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%19%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 12
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 17
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 8
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry.from.L3%19%bbentry_Lfor.cond1%1%bbentry.iters.: 5
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry.from.L3%19%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 10
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 17
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L0%0%d_L0%0%d.iters.: 2
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L0%0%d_L0%0%d.prove_queries.: 2
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%11%bbentry_Lfor.cond1%1%bbentry.iters.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%11%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%19%bbentry_Lfor.cond1%1%bbentry.iters.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%19%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 4
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 4
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L0%0%d_L0%0%d.iters.: 2
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L0%0%d_L0%0%d.prove_queries.: 2
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%11%bbentry_Lfor.cond1%1%bbentry.iters.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%11%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%19%bbentry_Lfor.cond1%1%bbentry.iters.: 5
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%19%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 21
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 21
smallest_point_cover_xfer.dst-ineq.from.L0%0%d_L0%0%d.iters.: 2
smallest_point_cover_xfer.dst-ineq.from.L0%0%d_L0%0%d.prove_queries.: 4
smallest_point_cover_xfer.dst-ineq.from.L3%11%bbentry_Lfor.cond1%1%bbentry.iters.: 3
smallest_point_cover_xfer.dst-ineq.from.L3%11%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 3
smallest_point_cover_xfer.dst-ineq.from.L3%19%bbentry_Lfor.cond1%1%bbentry.iters.: 19
smallest_point_cover_xfer.dst-ineq.from.L3%19%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 20
smallest_point_cover_xfer.dst-ineq.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 17
smallest_point_cover_xfer.dst-ineq.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 71
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.iters.: 6
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.prove_queries.: 6
smallest_point_cover_xfer.expr-group-bvs.from.L3%11%bbentry_Lfor.cond1%1%bbentry.iters.: 3
smallest_point_cover_xfer.expr-group-bvs.from.L3%11%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 3
smallest_point_cover_xfer.expr-group-bvs.from.L3%19%bbentry_Lfor.cond1%1%bbentry.iters.: 21
smallest_point_cover_xfer.expr-group-bvs.from.L3%19%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 51
smallest_point_cover_xfer.expr-group-bvs.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 25
smallest_point_cover_xfer.expr-group-bvs.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 37
smallest_point_cover_xfer.local-sizes-are-equal.from.L0%0%d_L0%0%d.iters.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L3%11%bbentry_Lfor.cond1%1%bbentry.iters.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L3%11%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L3%19%bbentry_Lfor.cond1%1%bbentry.iters.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L3%19%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.spec-coupling-invariants.from.L0%0%d_L0%0%d.iters.: 7
smallest_point_cover_xfer.spec-coupling-invariants.from.L0%0%d_L0%0%d.prove_queries.: 9
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%11%bbentry_Lfor.cond1%1%bbentry.iters.: 3
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%11%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%19%bbentry_Lfor.cond1%1%bbentry.iters.: 17
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%19%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 15
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 48
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 71
smallest_point_cover_xfer.src-branches-const-ineq.from.L0%0%d_L0%0%d.iters.: 2
smallest_point_cover_xfer.src-branches-const-ineq.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%11%bbentry_Lfor.cond1%1%bbentry.iters.: 5
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%11%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 5
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%19%bbentry_Lfor.cond1%1%bbentry.iters.: 23
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%19%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 26
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 32
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 35
smt-queries-cache-hits.: 204
smt-queries-cvc4-sat.: 1
smt-queries-yices-sat.: 1
smt-queries-z3-sat.: 147
total-correlation-possibilities.: 17
total-correlation-possibilities-mod-lsprels.: 17
total-correlations-explored.: 12

flags:
dst-aloc.: 0
dst-edges.: 11
dst-nodes.: 10
dst-sp-updates.: 0
final-CG-alloc-correlations.: 0
final-CG-counterexamples-generated-at-L3%19%bbentry_Lfor.cond1%1%bbentry.: 24
final-CG-counterexamples-generated-at-L3%7%bbentry_Lfor.cond%1%bbentry.: 18
final-CG-counterexamples-total-at-L3%19%bbentry_Lfor.cond1%1%bbentry.: 43
final-CG-counterexamples-total-at-L3%7%bbentry_Lfor.cond%1%bbentry.: 36
final-CG-dealloc-correlations.: 0
final-CG-dht-queries.: 5
final-CG-edges.: 5
final-CG-nodes.: 4
final-CG-num-invariants.: 29
final-CG-super-edges.: 0
src-edges.: 11
src-nodes.: 10
timeout-occured.: 0

info:
eq-state.: find_correlation
final-CG-time-secs.: 74.91
final-CG-time-to-total-time-ratio.: 0.68
query-time-to-total-time-ratio.: 0.22

Context stats:
exprs: count: 267257
sorts: count: 181
num_proof_queries: 637
num_proof_queries_answered_by_syntactic_check: 0
cache_stats:
m_simplify:
	----------- total:	60243
	        hit ratio:	0.991567
m_simplify_solver:
	----------- total:	5556
	        hit ratio:	0.846472
m_prune_obviously_false_branches_using_assume_clause:
	----------- total:	60
	        hit ratio:	0.333333
m_z3_solver_substitution:
	----------- total:	853
	        hit ratio:	0
m_replace_donotsimplify_using_solver_expressions_by_free_vars:
	----------- total:	853
	        hit ratio:	0
m_expr_size:
	----------- total:	17429
	        hit ratio:	0.943198
m_contains_only_constants_or_sp_versions:
	----------- total:	24
	        hit ratio:	0.791667
m_expr_evaluates_to_constant_visitor:
	----------- total:	197885
	        hit ratio:	0.486853

z3_solver expr_query_cache entry size: 287
	----------- total:	639
	             hits:	204
	        hit ratio:	0.319249
histogram (time taken by solver in ms):
[ 35.1680,  46.2063) (avg.  42.4915)     : 48
[ 46.2063,  60.7093) (avg.  51.1772)     : 81
[ 60.7093,  79.7643) (avg.  71.4788)     : 73
[ 79.7643, 104.8003) (avg.  90.7903)     : 37
[104.8003, 137.6944) (avg. 114.9186)     : 19
[137.6944, 180.9130) (avg. 154.2397)     : 11
[180.9130, 237.6969) (avg. 188.4006)     : 7
[237.6969, 312.3038) (avg. 296.0950)     : 1
[312.3038, 410.3278) (avg. 354.1893)     : 3
[410.3278, 539.1190) (avg. 477.7474)     : 7
histogram (number of quantifiers in query)
[ 0,  5) (avg.  0)                       : 1
[ 5,  9) (avg.  0)                       : 0
[ 9, 14) (avg. 12)                       : 19
[14, 18) (avg. 14)                       : 3
[18, 23) (avg. 20)                       : 130
[23, 27) (avg. 23)                       : 30
[27, 32) (avg. 31)                       : 98
[32, 36) (avg. 35)                       : 6
[36, 41) (avg.  0)                       : 0
[41, 45) (avg.  0)                       : 0
histogram (number of nodes in z3 ast)
[103, 159) (avg. 103)                    : 1
[159, 215) (avg.   0)                    : 0
[215, 271) (avg.   0)                    : 0
[271, 327) (avg. 302)                    : 54
[327, 383) (avg. 348)                    : 106
[383, 439) (avg. 393)                    : 9
[439, 495) (avg. 469)                    : 16
[495, 551) (avg. 536)                    : 30
[551, 607) (avg. 593)                    : 52
[607, 663) (avg. 624)                    : 19
Top 10 highest time taking queries:
1. [0.538s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.ub-unsigned.from_pcL3%19%bbentry_Lfor.cond1%1%bbentry.cond_apply_set_elem0_of_2.1
2. [0.498s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.dst-ineq-houdini-guess.from_pcL3%19%bbentry_Lfor.cond1%1%bbentry.cond_apply_set_elem0_of_1.10
3. [0.498s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.dst-ineq-houdini-guess.from_pcL3%19%bbentry_Lfor.cond1%1%bbentry.cond_apply_set_elem0_of_1.14
4. [0.483s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.expr-group-bvs.linear1-32-free_var_idx.44.from_pcL3%19%bbentry_Lfor.cond1%1%bbentry.cond_apply_set_elem0_of_1.0
5. [0.473s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.expr-group-bvs.linear1-1-free_var_idx.6.from_pcL3%19%bbentry_Lfor.cond1%1%bbentry.cond_apply_set_elem0_of_2.0
6. [0.429s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.ub-unsigned.from_pcL3%19%bbentry_Lfor.cond1%1%bbentry.cond_apply_set_elem0_of_2.0
7. [0.425s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.expr-group-bvs.linear1-3-free_var_idx.40.from_pcL3%19%bbentry_Lfor.cond1%1%bbentry.cond_apply_set_elem0_of_2.0
8. [0.404s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.expr-group-bvs.linear1-1-free_var_idx.3.from_pcL3%19%bbentry_Lfor.cond1%1%bbentry.cond_apply_set_elem0_of_1.0
9. [0.340s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.dst_edge_composition_proves_false.CGfromPC.L3%19%bbentry_Lfor.cond1%1%bbentry.dstToPC.Lfor.cond1%1%bbentry.from_pcL3%19%b.0
10. [0.319s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.dst_edge_composition_proves_false.CGfromPC.L3%11%bbentry_Lfor.cond1%1%bbentry.dstToPC.Lfor.cond1%1%bbentry.from_pcL3%11%b.0

<MSG>5:47 : Successfully computed equivalence for function: foo.</MSG>

tfg_edge_expr_wp_fn: num_starts 231 time spent: 0:0:0 [0.004198s total; 0.000018 per start]
tfg_computeWP: num_starts 6949 time spent: 0:0:0 [0.903767s total; 0.000130 per start]
tfg_get_simplified_to_state_for_edge: num_starts 16036 time spent: 0:0:0 [0.028779s total; 0.000002 per start]
tfg_get_simplified_edge_cond_for_edge: num_starts 10571 time spent: 0:0:0 [0.018599s total; 0.000002 per start]
tfg_get_simplified_assumes_for_edge: num_starts 8666 time spent: 0:0:0 [0.013568s total; 0.000002 per start]
add_nodeces_at_pc_and_propagate: num_starts 319 time spent: 0:0:31 [31.279898s total; 0.098056 per start]
graph_with_ce_propagate_CEs_across_new_edge_for_reason: num_starts 36 time spent: 0:0:29 [29.436722s total; 0.817687 per start]
tfg_counter_example_translate_on_edge_helper: num_starts 1997 time spent: 0:0:15 [15.533640s total; 0.007778 per start]
corr_graph_edge_well_formedness_conditions_falsified_by_counter_example: num_starts 699 time spent: 0:0:40 [40.768450s total; 0.058324 per start]
counter_example_translate_using_to_state_mapping_assigning_random_consts_as_needed: num_starts 1842 time spent: 0:0:11 [11.244335s total; 0.006104 per start]
ce_evaluate_expr_assigning_random_consts_as_needed: num_starts 8774 time spent: 0:0:55 [55.697161s total; 0.006348 per start]
tfg_edge_assumes_satisfied_by_counter_example: num_starts 1855 time spent: 0:0:0 [0.107456s total; 0.000058 per start]
tfg_graph_get_vars_written_on_edge: num_starts 1842 time spent: 0:0:0 [0.042486s total; 0.000023 per start]
cg_with_rank_add_CE_at_pc: num_starts 447 time spent: 0:0:15 [15.355153s total; 0.034352 per start]
graph_with_ce_add_CE_at_pc: num_starts 211 time spent: 0:0:0 [0.009178s total; 0.000043 per start]
graph_with_guessing_add_CE_at_pc: num_starts 447 time spent: 0:0:15 [15.348539s total; 0.034337 per start]
point_set_add_point_using_CE: num_starts 2440 time spent: 0:0:0 [0.931781s total; 0.000382 per start]
graph_with_points_add_point_using_CE_at_pc: num_starts 2440 time spent: 0:0:0 [0.936814s total; 0.000384 per start]
graph_with_guessing_add_point_using_CE_at_pc: num_starts 378 time spent: 0:0:1 [1.924226s total; 0.005091 per start]
invariant_state_add_point_using_CE_at_pc: num_starts 378 time spent: 0:0:0 [0.977760s total; 0.002587 per start]
expr_label_memlabels_using_memlabel_map: num_starts 56438 time spent: 0:0:2 [2.157038s total; 0.000038 per start]
evaluate_expr_assigning_random_consts_and_check_bounds: num_starts 11781 time spent: 0:0:0 [0.521093s total; 0.000044 per start]
expr_simplify_solver: num_starts 11191 time spent: 0:0:0 [0.869446s total; 0.000078 per start]
expr_simplify_syntactic: num_starts 12479 time spent: 0:0:2 [2.179809s total; 0.000175 per start]
expr_simplify_select_on_store: num_starts 791 time spent: 0:0:1 [1.843183s total; 0.002330 per start]
expr_simplify_using_lhs_set_helper: num_starts 2286 time spent: 0:0:3 [3.292220s total; 0.001440 per start]
expr_simplify_using_lhs_set_visit_function: num_starts 22478 time spent: 0:0:3 [3.269602s total; 0.000145 per start]
expr_simplify_sort_args_to_canonicalize: num_starts 14640 time spent: 0:0:0 [0.044057s total; 0.000003 per start]
expr_simplify_eq: num_starts 1154 time spent: 0:0:0 [0.010080s total; 0.000009 per start]
expr_simplify_or: num_starts 53 time spent: 0:0:0 [0.000066s total; 0.000001 per start]
expr_simplify_and: num_starts 1400 time spent: 0:0:0 [0.007728s total; 0.000006 per start]
expr_simplify_andnot1: num_starts 132 time spent: 0:0:0 [0.001544s total; 0.000012 per start]
expr_simplify_andnot2: num_starts 1 time spent: 0:0:0 [0.000013s total; 0.000013 per start]
expr_simplify_not: num_starts 171 time spent: 0:0:0 [0.000464s total; 0.000003 per start]
expr_simplify_implies: num_starts 135 time spent: 0:0:0 [0.001176s total; 0.000009 per start]
expr_simplify_ite: num_starts 14 time spent: 0:0:0 [0.001127s total; 0.000080 per start]
canonicalize_expr_tree: num_starts 1953 time spent: 0:0:0 [0.211676s total; 0.000108 per start]
expr_simplify_memalloc_using_memlabel: num_starts 62 time spent: 0:0:0 [0.000147s total; 0.000002 per start]
expr_simplify_select_on_store_visit_function: num_starts 799 time spent: 0:0:1 [1.794278s total; 0.002246 per start]
get_arithmetic_addsub_atoms: num_starts 16756 time spent: 0:0:0 [0.009186s total; 0.000001 per start]
expr_linear_relation_holds_visit: num_starts 1946 time spent: 0:0:0 [0.019951s total; 0.000010 per start]
expr_is_consts_struct_constant: num_starts 2244 time spent: 0:0:0 [0.001304s total; 0.000001 per start]
expr_do_simplify_helper: num_starts 71816 time spent: 0:0:2 [2.210731s total; 0.000031 per start]
expr_do_simplify_helper_cache: num_starts 71816 time spent: 0:0:0 [0.071343s total; 0.000001 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor_cache: num_starts 72 time spent: 0:0:0 [0.000010s total; 0.000000 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor: num_starts 72 time spent: 0:0:0 [0.000331s total; 0.000005 per start]
evaluate_expr_and_check_bounds: num_starts 16610 time spent: 0:0:56 [56.215948s total; 0.003384 per start]
array_constant_equals: num_starts 127955 time spent: 0:0:0 [0.112690s total; 0.000001 per start]
combo_dfa_xfer_and_meet: num_starts 79 time spent: 0:0:0 [0.501048s total; 0.006342 per start]
alias_val_xfer_and_meet: num_starts 79 time spent: 0:0:0 [0.394911s total; 0.004999 per start]
get_sprel_map_from_avail_exprs: num_starts 114 time spent: 0:0:0 [0.010796s total; 0.000095 per start]
update_memlabels_for_memslot_locs: num_starts 31 time spent: 0:0:0 [0.000134s total; 0.000004 per start]
populate_gen_and_kill_sets_for_edge: num_starts 382 time spent: 0:0:0 [0.070133s total; 0.000184 per start]
compute_simplified_loc_exprs_for_edge: num_starts 828 time spent: 0:0:0 [0.308890s total; 0.000373 per start]
compute_locs_definitely_written_on_edge: num_starts 382 time spent: 0:0:0 [0.000642s total; 0.000002 per start]
get_locs_potentially_read_in_expr_using_locs_map: num_starts 90 time spent: 0:0:0 [0.032994s total; 0.000367 per start]
edge_update_memlabel_map_for_mlvars: num_starts 191 time spent: 0:0:0 [0.055851s total; 0.000292 per start]
add_new_locs_based_on_edge: num_starts 79 time spent: 0:0:0 [0.168787s total; 0.002137 per start]
expand_locset_to_include_slots_for_memmask: num_starts 141 time spent: 0:0:0 [0.001198s total; 0.000008 per start]
total: num_starts 1 time spent: 0:5:53 [353.484418s total; 353.484418 per start]
num_syntactic_match_tests = 0.
num_execution_tests = 0.
num_boolean_tests = 0.
fingerprinting rate: 0.00 per second (total), -nan per second (itable_enumerate_timer), -nan per second (excluding execution/boolean tests).

Time taken for equivalence check: 327.06s.
ftmap_run_pointsto_analysis.: 0.399066s (num_starts 2; 0.1995s/start)s.
EQ Time after pointsto analysis: 326.664s.
EQ Time after pointsto analysis and smt_query: 276.203s.
EQ Time after pointsto analysis and smt_query and bv-solve: 276.037s.
Equivalence proof found. The programs are equivalent.
