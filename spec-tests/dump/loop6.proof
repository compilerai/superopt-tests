=FunctionName: foo
=result: 1
=cg_with_asm_annotation
=cg_with_backtracker
=cg_with_rank
=corr_graph foo.A2.B2.C1
=src_tfg
=TFG_SSA:
=TFG_SPEC src.spec.foo:
=TFG:
=Nodes: L0%0%d L3%6%bbentry L3%7%d L3%8%bbentry L3%9%bbentry E0%0%d
=Edges:
L0%0%d => L3%6%bbentry
L3%6%bbentry => L3%7%d
L3%7%d => L3%9%bbentry
L3%7%d => L3%8%bbentry
L3%8%bbentry => E0%0%d
L3%9%bbentry => L3%6%bbentry (backedge) 
=graph done
=is_ssa_graph:
1
=StartState:
=spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=state_end
=PC to var-version map at L0%0%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%6%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%7%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%8%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%9%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at E0%0%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=graph_with_var_versions done
=FunctionName: foo
=Input: tfg-method-arg.0
=arg addr
1 : (undefined) : UNDEFINED
=arg val
1 : input.spec-%var-n-1 : BV:32
=arg end
=Node outputs: E0%0%d
=Output: spec-%ret-reg
1 : input.spec-%tmpvar-10.E0%0%d : MAP[BV:32 -> BV:32]
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
=Touched symbols:
=Symbol-map done
=Locals-map:
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;foo}
=memlabel_map.0 for call-context {*;foo}
mlheap.src.spec.foo : memlabel-mem--heap
=Edge: L0%0%d => L3%6%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-8.L3%6%bbentry
1 : SORT2EXPR.VAR : MAP[BV:32 -> BV:32]
2 : map_init(1) : MAP[BV:32 -> BV:32]
=spec-%var-n-0.L3%6%bbentry
1 : input.spec-%var-n-1 : BV:32
=spec-%var-m-0.L3%6%bbentry
1 : SORT2EXPR.VAR : MAP[BV:32 -> BV:32]
2 : map_init(1) : MAP[BV:32 -> BV:32]
=src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((((func_head*ctor_bv)*ctor_map)*(inline_entry*func_head))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=Edge: L3%6%bbentry => L3%7%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-0.L3%7%d
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
2 : input.spec-%var-n-0.L3%6%bbentry : BV:32
3 : bvuge(1, 2) : BOOL
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*intrinsic_app_bvuge)
tfg_edge_comment end

=Edge: L3%7%d => L3%9%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-0.L3%7%d : BOOL
2 : not(1) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:5:ite_false_split
tfg_edge_comment end

=Edge: L3%7%d => L3%8%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-0.L3%7%d : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:5:ite_true_split
tfg_edge_comment end

=Edge: L3%8%bbentry => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-10.E0%0%d
1 : input.spec-%var-m-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
=spec-%tmpvar-5.E0%0%d
1 : input.spec-%var-m-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
=spec-%tmpvar-6.E0%0%d
1 : input.spec-%var-m-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
=spec-%tmpvar-9.E0%0%d
1 : input.spec-%var-m-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(((bb_entry*ite_true_merge)*func_ret)*(inline_exit*func_ret))
tfg_edge_comment end

=Edge: L3%9%bbentry => L3%6%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%var-i-0.L3%6%bbentry
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%var-n-0.L3%6%bbentry
1 : input.spec-%var-n-0.L3%6%bbentry : BV:32
=spec-%var-m-0.L3%6%bbentry
1 : input.spec-%var-m-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : input.spec-%var-i-0.L3%6%bbentry : BV:32
3 : map_set(1, 2, 2) : MAP[BV:32 -> BV:32]
=src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : input.src.spec-ghostvar.itervar.1.L3%6%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%tmpvar-2.L3%6%bbentry
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-3.L3%6%bbentry
1 : input.spec-%var-m-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : input.spec-%var-i-0.L3%6%bbentry : BV:32
3 : map_set(1, 2, 2) : MAP[BV:32 -> BV:32]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((((bb_entry*ctor_bv)*intrinsic_app_bvadd)*(intrinsic_app_map_set*tailrec_backedge))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=graph_with_precondition_done

=Locs in src.spec.foo
=Loc 1 in src.spec.foo.
REGMEM
spec-%var-n-1
1 : input.spec-%var-n-1 : BV:32
=Loc 16 in src.spec.foo.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--heap
=Loc 17 in src.spec.foo.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 18 in src.spec.foo.
REGMEM
spec-%tmpvar-0.L3%7%d
1 : input.spec-%tmpvar-0.L3%7%d : BOOL
=Loc 19 in src.spec.foo.
REGMEM
spec-%var-i-0.L3%6%bbentry
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
=Loc 20 in src.spec.foo.
REGMEM
spec-%var-n-0.L3%6%bbentry
1 : input.spec-%var-n-0.L3%6%bbentry : BV:32
=Loc 21 in src.spec.foo.
REGMEM
spec-%tmpvar-10.E0%0%d
1 : input.spec-%tmpvar-10.E0%0%d : MAP[BV:32 -> BV:32]
=Loc 22 in src.spec.foo.
REGMEM
spec-%tmpvar-5.E0%0%d
1 : input.spec-%tmpvar-5.E0%0%d : MAP[BV:32 -> BV:32]
=Loc 23 in src.spec.foo.
REGMEM
spec-%tmpvar-6.E0%0%d
1 : input.spec-%tmpvar-6.E0%0%d : MAP[BV:32 -> BV:32]
=Loc 24 in src.spec.foo.
REGMEM
spec-%tmpvar-9.E0%0%d
1 : input.spec-%tmpvar-9.E0%0%d : MAP[BV:32 -> BV:32]
=Loc 25 in src.spec.foo.
REGMEM
spec-%var-m-0.L3%6%bbentry
1 : input.spec-%var-m-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
=Loc 26 in src.spec.foo.
REGMEM
spec-%tmpvar-7.L3%6%bbentry
1 : input.spec-%tmpvar-7.L3%6%bbentry : BV:32
=Loc 27 in src.spec.foo.
REGMEM
spec-%tmpvar-8.L3%6%bbentry
1 : input.spec-%tmpvar-8.L3%6%bbentry : MAP[BV:32 -> BV:32]
=Loc 28 in src.spec.foo.
REGMEM
src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : input.src.spec-ghostvar.itervar.1.L3%6%bbentry : BV:32
=Loc 29 in src.spec.foo.
REGMEM
spec-%tmpvar-1.L3%6%bbentry
1 : input.spec-%tmpvar-1.L3%6%bbentry : BV:32
=Loc 30 in src.spec.foo.
REGMEM
spec-%tmpvar-2.L3%6%bbentry
1 : input.spec-%tmpvar-2.L3%6%bbentry : BV:32
=Loc 31 in src.spec.foo.
REGMEM
spec-%tmpvar-3.L3%6%bbentry
1 : input.spec-%tmpvar-3.L3%6%bbentry : MAP[BV:32 -> BV:32]
=Locs end
=Liveness in src.spec.foo
=live locs at L0%0%d
1, 
=live locs at L3%6%bbentry
19, 20, 25, 
=live locs at L3%7%d
18, 19, 20, 25, 
=live locs at L3%8%bbentry
25, 
=live locs at L3%9%bbentry
19, 20, 25, 
=live locs at E0%0%d
21, 

=Definedness in src.spec.foo
=loc definedness at L0%0%d
1, 16, 17
=loc definedness at L3%6%bbentry
1, 16, 17, 19, 20, 25, 26, 27, 28
=loc definedness at L3%7%d
1, 16, 17, 18, 19, 20, 25, 26, 27, 28
=loc definedness at L3%8%bbentry
1, 16, 17, 18, 19, 20, 25, 26, 27, 28
=loc definedness at L3%9%bbentry
1, 16, 17, 18, 19, 20, 25, 26, 27, 28
=loc definedness at E0%0%d
1, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28

=Branch affecting variable locs in src.spec.foo
=branch affecting variable locs at L0%0%d
1
=branch affecting variable locs at L3%6%bbentry
19, 20
=branch affecting variable locs at L3%7%d
18, 19, 20
=branch affecting variable locs at L3%8%bbentry

=branch affecting variable locs at L3%9%bbentry
19, 20
=branch affecting variable locs at E0%0%d


=Relevant Memlabels in src.spec.foo
=relevant memlabels
=function: foo
memlabel-mem--heap
memlabel-mem--arg.0
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%6%bbentry
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%6%bbentry for loc_id 19 {input.spec-%var-i-0.L3%6%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%6%bbentry for loc_id 20 {input.spec-%var-n-0.L3%6%bbentry }
1 : input.spec-%var-n-1 : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%6%bbentry for loc_id 25 {input.spec-%var-m-0.L3%6%bbentry }
1 : Lambda18 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda19 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%6%bbentry for loc_id 26 {input.spec-%tmpvar-7.L3%6%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%6%bbentry for loc_id 27 {input.spec-%tmpvar-8.L3%6%bbentry }
1 : Lambda18 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda19 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%6%bbentry for loc_id 28 {input.src.spec-ghostvar.itervar.1.L3%6%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%6%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%6%bbentry=>L3%7%d
=graph_with_edge_structures.loc_to_expr_map at L3%6%bbentry=>L3%7%d for loc_id 18 {input.spec-%tmpvar-0.L3%7%d }
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
2 : input.spec-%var-n-0.L3%6%bbentry : BV:32
3 : bvuge(1, 2) : BOOL
=graph_with_edge_structures.loc_to_expr_map at L3%6%bbentry=>L3%7%d done
=graph_with_edge_structures.loc_to_expr_map at L3%7%d=>L3%8%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%7%d=>L3%8%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%7%d=>L3%9%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%7%d=>L3%9%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%8%bbentry=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at L3%8%bbentry=>E0%0%d for loc_id 21 {input.spec-%tmpvar-10.E0%0%d }
1 : input.spec-%var-m-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
=graph_with_edge_structures.loc_to_expr_map at L3%8%bbentry=>E0%0%d for loc_id 22 {input.spec-%tmpvar-5.E0%0%d }
1 : input.spec-%var-m-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
=graph_with_edge_structures.loc_to_expr_map at L3%8%bbentry=>E0%0%d for loc_id 23 {input.spec-%tmpvar-6.E0%0%d }
1 : input.spec-%var-m-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
=graph_with_edge_structures.loc_to_expr_map at L3%8%bbentry=>E0%0%d for loc_id 24 {input.spec-%tmpvar-9.E0%0%d }
1 : input.spec-%var-m-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
=graph_with_edge_structures.loc_to_expr_map at L3%8%bbentry=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map at L3%9%bbentry=>L3%6%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%9%bbentry=>L3%6%bbentry for loc_id 19 {input.spec-%var-i-0.L3%6%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-i-0.L3%6%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%9%bbentry=>L3%6%bbentry for loc_id 25 {input.spec-%var-m-0.L3%6%bbentry }
1 : input.spec-%var-m-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : input.spec-%var-i-0.L3%6%bbentry : BV:32
3 : map_set(1, 2, 2) : MAP[BV:32 -> BV:32]
=graph_with_edge_structures.loc_to_expr_map at L3%9%bbentry=>L3%6%bbentry for loc_id 28 {input.src.spec-ghostvar.itervar.1.L3%6%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.spec-ghostvar.itervar.1.L3%6%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%9%bbentry=>L3%6%bbentry for loc_id 29 {input.spec-%tmpvar-1.L3%6%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%9%bbentry=>L3%6%bbentry for loc_id 30 {input.spec-%tmpvar-2.L3%6%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-i-0.L3%6%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%9%bbentry=>L3%6%bbentry for loc_id 31 {input.spec-%tmpvar-3.L3%6%bbentry }
1 : input.spec-%var-m-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : input.spec-%var-i-0.L3%6%bbentry : BV:32
3 : map_set(1, 2, 2) : MAP[BV:32 -> BV:32]
=graph_with_edge_structures.loc_to_expr_map at L3%9%bbentry=>L3%6%bbentry done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at L3%6%bbentry:
vacuous mls at L3%7%d:
vacuous mls at L3%8%bbentry:
vacuous mls at L3%9%bbentry:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at L3%6%bbentry:
non-vacuous mls at L3%7%d:
non-vacuous mls at L3%8%bbentry:
non-vacuous mls at L3%9%bbentry:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in src.spec.foo
=avail_exprs begin
=loc 1
=loc_expr
140273 : input.spec-%var-n-1 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 20
=loc_expr
140358 : input.spec-%var-n-0.L3%6%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-n-1 : BV:32
=avail_exprs_val.end
=loc 26
=loc_expr
140376 : input.spec-%tmpvar-7.L3%6%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 27
=loc_expr
140377 : input.spec-%tmpvar-8.L3%6%bbentry : MAP[BV:32 -> BV:32]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : Lambda18 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda19 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=avail_exprs_val.end
=loc 29
=loc_expr
140378 : input.spec-%tmpvar-1.L3%6%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 1 { 0x1 +1.11e129 } : BV:32
=avail_exprs_val.end
=avail_exprs end
=sprel_map in src.spec.foo
=loc 26 expr
1 : input.spec-%tmpvar-7.L3%6%bbentry : BV:32
=loc 26 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 27 expr
1 : input.spec-%tmpvar-8.L3%6%bbentry : MAP[BV:32 -> BV:32]
=loc 27 spreled-expr
140484 : Lambda18 : BV:32
140303 : 0 { 0x0 } : BOOL
140488 : lambda(140484, 140303) : FUNCTION[BV:32 -> BOOL]
140491 : Lambda19 : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
140492 : lambda(140491, 140276) : FUNCTION[BV:32 -> BV:32]
140493 : map(140488, 140492) : MAP[BV:32 -> BV:32]
140494 : sym_const(140493) : MAP[BV:32 -> BV:32]
=loc 29 expr
1 : input.spec-%tmpvar-1.L3%6%bbentry : BV:32
=loc 29 spreled-expr
140286 : 1 { 0x1 +1.11e129 } : BV:32
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;foo}
=loc_id 1 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 16 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 17 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 18 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 19 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 20 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 21 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 22 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 23 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 24 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 25 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 26 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 27 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 28 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 29 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 30 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 31 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 26 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 27 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 29 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>L3%6%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%6%bbentry=>L3%7%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%7%d=>L3%8%bbentry
1 : input.spec-%tmpvar-0.L3%7%d : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%7%d=>L3%9%bbentry
1 : input.spec-%tmpvar-0.L3%7%d : BOOL
2 : not(1) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%8%bbentry=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%9%bbentry=>L3%6%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>L3%6%bbentry
=spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-8.L3%6%bbentry
1 : Lambda18 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda19 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=spec-%var-n-0.L3%6%bbentry
1 : input.spec-%var-n-1 : BV:32
=spec-%var-m-0.L3%6%bbentry
1 : Lambda18 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda19 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%6%bbentry=>L3%7%d
=spec-%tmpvar-0.L3%7%d
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
2 : input.spec-%var-n-0.L3%6%bbentry : BV:32
3 : bvuge(1, 2) : BOOL
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%7%d=>L3%8%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%7%d=>L3%9%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%8%bbentry=>E0%0%d
=spec-%tmpvar-10.E0%0%d
1 : input.spec-%var-m-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
=spec-%tmpvar-5.E0%0%d
1 : input.spec-%var-m-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
=spec-%tmpvar-6.E0%0%d
1 : input.spec-%var-m-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
=spec-%tmpvar-9.E0%0%d
1 : input.spec-%var-m-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%9%bbentry=>L3%6%bbentry
=spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-i-0.L3%6%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%var-m-0.L3%6%bbentry
1 : input.spec-%var-m-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : input.spec-%var-i-0.L3%6%bbentry : BV:32
3 : map_set(1, 2, 2) : MAP[BV:32 -> BV:32]
=src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.spec-ghostvar.itervar.1.L3%6%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%tmpvar-2.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-i-0.L3%6%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-3.L3%6%bbentry
1 : input.spec-%var-m-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : input.spec-%var-i-0.L3%6%bbentry : BV:32
3 : map_set(1, 2, 2) : MAP[BV:32 -> BV:32]
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>L3%6%bbentry
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>L3%6%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%6%bbentry=>L3%7%d
=graph_with_simplified_assets.simplified_assumes at L3%6%bbentry=>L3%7%d done
=graph_with_simplified_assets.simplified_assumes at L3%7%d=>L3%8%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%7%d=>L3%8%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%7%d=>L3%9%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%7%d=>L3%9%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%8%bbentry=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at L3%8%bbentry=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes at L3%9%bbentry=>L3%6%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%9%bbentry=>L3%6%bbentry done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
0
=String-contents:
=Nextpc-map:
=Nextpc-map done
=suffixpaths for src.spec.foo
=suffixpath_at_L0%0%d for src.spec.foo
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_L3%6%bbentry for src.spec.foo
=suffixpath_at_L3%6%bbentry.graph_edge_composition
(L0%0%d=>L3%6%bbentry)
=suffixpath_at_L3%7%d for src.spec.foo
=suffixpath_at_L3%7%d.graph_edge_composition
((L0%0%d=>L3%6%bbentry)*(L3%6%bbentry=>L3%7%d))
=suffixpath_at_L3%8%bbentry for src.spec.foo
=suffixpath_at_L3%8%bbentry.graph_edge_composition
((L0%0%d=>L3%6%bbentry)*((L3%6%bbentry=>L3%7%d)*(L3%7%d=>L3%8%bbentry)))
=suffixpath_at_L3%9%bbentry for src.spec.foo
=suffixpath_at_L3%9%bbentry.graph_edge_composition
((L0%0%d=>L3%6%bbentry)*((L3%6%bbentry=>L3%7%d)*(L3%7%d=>L3%9%bbentry)))
=suffixpath_at_E0%0%d for src.spec.foo
=suffixpath_at_E0%0%d.graph_edge_composition
((L0%0%d=>L3%6%bbentry)*((L3%6%bbentry=>L3%7%d)*((L3%7%d=>L3%8%bbentry)*(L3%8%bbentry=>E0%0%d))))
=suffixpaths for src.spec.foo done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>L3%6%bbentry
tfg.assumes_around_edge at L0%0%d=>L3%6%bbentry done
tfg.assumes_around_edge at L3%6%bbentry=>L3%7%d
tfg.assumes_around_edge at L3%6%bbentry=>L3%7%d done
tfg.assumes_around_edge at L3%7%d=>L3%8%bbentry
tfg.assumes_around_edge at L3%7%d=>L3%8%bbentry done
tfg.assumes_around_edge at L3%7%d=>L3%9%bbentry
tfg.assumes_around_edge at L3%7%d=>L3%9%bbentry done
tfg.assumes_around_edge at L3%8%bbentry=>E0%0%d
tfg.assumes_around_edge at L3%8%bbentry=>E0%0%d done
tfg.assumes_around_edge at L3%9%bbentry=>L3%6%bbentry
tfg.assumes_around_edge at L3%9%bbentry=>L3%6%bbentry done
tfg.assumes_around_edge done
=TFGdone
=TFG_SPEC_done
=TFG_SSA_done
=dst_tfg
=TFG_SSA:
=TFG_LLVM dst.llvm.foo:
=TFG:
=Nodes: L0%0%d Lfor.body%1%d Lfor.cond%1%bbentry Lfor.cond%2%d Lfor.end%1%d E0%0%d
=Edges:
L0%0%d => Lfor.cond%1%bbentry
Lfor.cond%1%bbentry => Lfor.cond%2%d
Lfor.cond%2%d => Lfor.body%1%d
Lfor.cond%2%d => Lfor.end%1%d
Lfor.end%1%d => E0%0%d
Lfor.body%1%d => Lfor.cond%1%bbentry (backedge) 
=graph done
=is_ssa_graph:
1
=StartState:
=dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=dst.llvm-%n
1 : input.dst.llvm-%n : BV:32
=dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=state_end
=PC to var-version map at L0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.body%1%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.cond%1%bbentry
=version for dst.llvm-mem
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.cond%2%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.end%1%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at E0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=graph_with_var_versions done
=FunctionName: foo
=Input: tfg-method-arg.0
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%n : BV:32
=arg end
=Node outputs: E0%0%d
=Output: symbol.1
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--symbol.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=Output: heap
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.2-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=Output: llvm-indir_tgt
1 : retaddr_const : BV:32
=Output: llvm-%ret-reg
1 : input.dst.llvm-%47516aa5a9eab7a5f0d0bce668115131.gepoffset.3.total_offset.E0%0%d : BV:32
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : m : 400 : 4 : 0
C_SYMBOL2 : foo : 14 : 1 : 0
=Touched symbols: C_SYMBOL1
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%n : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;foo}
=memlabel_map.0 for call-context {*;foo}
mlheap.dst.llvm.foo : memlabel-mem-may-straddle-symbol.2-heap
=memlabel_map.1 for call-context {*;foo}
mlloc.dst.llvm.foo.0 : memlabel-mem--symbol.1
=memlabel_map.2 for call-context {*;foo}
mlvar.dst.llvm.foo.0 : memlabel-mem--symbol.1
=Edge: L0%0%d => Lfor.cond%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-mem.Lfor.cond%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=dst.local_alloc_count.Lfor.cond%1%bbentry
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((((start_pc_edge*  br label %for.cond, !dbg !26)*(  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ], !dbg !25*  br label %for.cond, !dbg !26))*(  br label %for.cond, !dbg !26*  br label %for.cond, !dbg !26))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=Edge: Lfor.cond%1%bbentry => Lfor.cond%2%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%cmp.Lfor.cond%2%d
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*  %cmp = icmp ult i32 %i.0, %n, !dbg !27)
tfg_edge_comment end

=Edge: Lfor.cond%2%d => Lfor.body%1%d
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %cmp, label %for.body, label %for.end, !dbg !29*  br i1 %cmp, label %for.body, label %for.end, !dbg !29)*  br i1 %cmp, label %for.body, label %for.end, !dbg !29)
tfg_edge_comment end

=Edge: Lfor.cond%2%d => Lfor.end%1%d
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
2 : not(1) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %cmp, label %for.body, label %for.end, !dbg !29*  br i1 %cmp, label %for.body, label %for.end, !dbg !29)*  br i1 %cmp, label %for.body, label %for.end, !dbg !29)
tfg_edge_comment end

=Edge: Lfor.end%1%d => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%47516aa5a9eab7a5f0d0bce668115131.constexpr.E0%0%d
1 : symbol.1 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 400 { 0x190 +1.4768e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(2, 4) : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(2, 6) : BV:32
8 : bvadd(5, 7) : BV:32
9 : bvadd(1, 8) : BV:32
=dst.llvm-%47516aa5a9eab7a5f0d0bce668115131.gepoffset.1.total_offset.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 400 { 0x190 +1.4768e129 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvadd(1, 3) : BV:32
=dst.llvm-%47516aa5a9eab7a5f0d0bce668115131.gepoffset.2.total_offset.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 400 { 0x190 +1.4768e129 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvadd(1, 3) : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(1, 5) : BV:32
7 : bvadd(4, 6) : BV:32
=dst.llvm-%47516aa5a9eab7a5f0d0bce668115131.gepoffset.3.total_offset.E0%0%d
1 : symbol.1 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 400 { 0x190 +1.4768e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(2, 4) : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(2, 6) : BV:32
8 : bvadd(5, 7) : BV:32
9 : bvadd(1, 8) : BV:32
=dst.llvm-%47516aa5a9eab7a5f0d0bce668115131.intermediate.gepoffset.1.offset.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 400 { 0x190 +1.4768e129 } : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%47516aa5a9eab7a5f0d0bce668115131.intermediate.gepoffset.2.offset.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : symbol.1 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 400 { 0x190 +1.4768e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(2, 4) : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(2, 6) : BV:32
8 : bvadd(5, 7) : BV:32
9 : bvadd(1, 8) : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvslt(1, 1) : BOOL
3 : 32 { 0x20 +1.0e1025 } : INT
4 : bvsign_ext(1, 3) : BV:64
5 : 400 { 0x190 +1.4768e129 } : BV:32
6 : bvzero_ext(5, 3) : BV:64
7 : bvmul(4, 6) : BV:64
8 : 63 { 0x3f +1.0e1025 } : INT
9 : bvextract(7, 8, 3) : BV:32
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : eq(9, 10) : BOOL
12 : eq(9, 1) : BOOL
13 : ite(2, 11, 12) : BOOL
14 : 400 { 0x190 +1.0e1025 } : INT
15 : isindexforsize(13, 14) : BOOL
16 : symbol.1 : BV:32
17 : bvmul(1, 5) : BV:32
18 : bvadd(1, 17) : BV:32
19 : bvadd(16, 18) : BV:32
20 : isgepoffset(19, 17) : BOOL
21 : and(15, 20) : BOOL
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvzero_ext(22, 3) : BV:64
24 : bvmul(4, 23) : BV:64
25 : bvextract(24, 8, 3) : BV:32
26 : eq(25, 1) : BOOL
27 : 4 { 0x4 +1.0e1025 } : INT
28 : isindexforsize(26, 27) : BOOL
29 : bvmul(1, 22) : BV:32
30 : bvadd(18, 29) : BV:32
31 : bvadd(16, 30) : BV:32
32 : isgepoffset(31, 29) : BOOL
33 : and(28, 32) : BOOL
34 : and(21, 33) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:-1:((badref*(badref*(badref*badref)))*  ret i32* getelementptr inbounds ([100 x i32], [100 x i32]* @m, i32 0, i32 0), !dbg !38)
tfg_edge_comment end

=Edge: Lfor.body%1%d => Lfor.cond%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-mem.Lfor.cond%1%bbentry
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.0 : MEMLABEL
4 : symbol.1 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : 400 { 0x190 +1.4768e129 } : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(5, 7) : BV:32
9 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
10 : 4 { 0x4 +1.47e129 } : BV:32
11 : bvmul(9, 10) : BV:32
12 : bvadd(8, 11) : BV:32
13 : bvadd(4, 12) : BV:32
14 : 4 { 0x4 +1.0e1025 } : INT
15 : 0 { 0x0 } : BOOL
16 : store(1, 2, 3, 13, 9, 14, 15) : ARRAY[BV:32 -> BV:8]
=dst.llvm-%2765c615cd3308ea01ce016481e.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 400 { 0x190 +1.4768e129 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvadd(1, 3) : BV:32
=dst.llvm-%2765c615cd3308ea01ce016481e.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 400 { 0x190 +1.4768e129 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvadd(1, 3) : BV:32
5 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
=dst.llvm-%2765c615cd3308ea01ce016481e.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : symbol.1 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 400 { 0x190 +1.4768e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(2, 4) : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : bvadd(1, 9) : BV:32
=dst.llvm-%2765c615cd3308ea01ce016481e.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 400 { 0x190 +1.4768e129 } : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%2765c615cd3308ea01ce016481e.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%arrayidx.Lfor.cond%1%bbentry
1 : symbol.1 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 400 { 0x190 +1.4768e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(2, 4) : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : bvadd(1, 9) : BV:32
=dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : symbol.1 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 400 { 0x190 +1.4768e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(2, 4) : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : bvadd(1, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : islangaligned(10, 11) : BOOL
=EdgeAssume.1
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvslt(1, 1) : BOOL
3 : 32 { 0x20 +1.0e1025 } : INT
4 : bvsign_ext(1, 3) : BV:64
5 : 400 { 0x190 +1.4768e129 } : BV:32
6 : bvzero_ext(5, 3) : BV:64
7 : bvmul(4, 6) : BV:64
8 : 63 { 0x3f +1.0e1025 } : INT
9 : bvextract(7, 8, 3) : BV:32
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : eq(9, 10) : BOOL
12 : eq(9, 1) : BOOL
13 : ite(2, 11, 12) : BOOL
14 : 400 { 0x190 +1.0e1025 } : INT
15 : isindexforsize(13, 14) : BOOL
16 : symbol.1 : BV:32
17 : bvmul(1, 5) : BV:32
18 : bvadd(1, 17) : BV:32
19 : bvadd(16, 18) : BV:32
20 : isgepoffset(19, 17) : BOOL
21 : and(15, 20) : BOOL
22 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
23 : bvsign_ext(22, 3) : BV:64
24 : 4 { 0x4 +1.47e129 } : BV:32
25 : bvzero_ext(24, 3) : BV:64
26 : bvmul(23, 25) : BV:64
27 : bvextract(26, 8, 3) : BV:32
28 : eq(27, 1) : BOOL
29 : 4 { 0x4 +1.0e1025 } : INT
30 : isindexforsize(28, 29) : BOOL
31 : bvmul(22, 24) : BV:32
32 : bvadd(18, 31) : BV:32
33 : bvadd(16, 32) : BV:32
34 : isgepoffset(33, 31) : BOOL
35 : and(30, 34) : BOOL
36 : and(21, 35) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:1:((  %arrayidx = getelementptr inbounds [100 x i32], [100 x i32]* @m, i32 0, i32 %i.0, !dbg !30*(  %arrayidx = getelementptr inbounds [100 x i32], [100 x i32]* @m, i32 0, i32 %i.0, !dbg !30*(  %arrayidx = getelementptr inbounds [100 x i32], [100 x i32]* @m, i32 0, i32 %i.0, !dbg !30*  %arrayidx = getelementptr inbounds [100 x i32], [100 x i32]* @m, i32 0, i32 %i.0, !dbg !30)))*(((((  store i32 %i.0, i32* %arrayidx, align 4, !dbg !32*  br label %for.inc, !dbg !33)*  br label %for.inc, !dbg !33)*  br label %for.inc, !dbg !33)*(((  %inc = add i32 %i.0, 1, !dbg !34*  br label %for.cond, !dbg !35, !llvm.loop !36)*(  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ], !dbg !25*  br label %for.cond, !dbg !35, !llvm.loop !36))*(  br label %for.cond, !dbg !35, !llvm.loop !36*  br label %for.cond, !dbg !35, !llvm.loop !36)))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge)))
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%n : BV:32
=predicate done
=graph_with_precondition_done

=Locs in dst.llvm.foo
=Loc 100004 in dst.llvm.foo.
REGMEM
dst.llvm-%n
1 : input.dst.llvm-%n : BV:32
=Loc 100019 in dst.llvm.foo.
REGMEM
dst.llvm-%hidden-reg
1 : input.dst.llvm-%hidden-reg : BV:32
=Loc 100021 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.0
1 : input.dst.llvm-callee-save.0 : BV:32
=Loc 100022 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.1
1 : input.dst.llvm-callee-save.1 : BV:32
=Loc 100023 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.2
1 : input.dst.llvm-callee-save.2 : BV:32
=Loc 100024 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.3
1 : input.dst.llvm-callee-save.3 : BV:32
=Loc 100028 in dst.llvm.foo.
REGMEM
dst.local_alloc_count.=L0%0%d=
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=Loc 100029 in dst.llvm.foo.
REGMEM
dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=Loc 100031 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 100032 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--symbol.1
=Loc 100033 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
=Loc 100034 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem-may-straddle-symbol.2-heap
=Loc 100036 in dst.llvm.foo.
REGMEM
dst.llvm-%cmp.Lfor.cond%2%d
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=Loc 100037 in dst.llvm.foo.
REGMEM
dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=Loc 100038 in dst.llvm.foo.
REGMEM
dst.llvm-%47516aa5a9eab7a5f0d0bce668115131.constexpr.E0%0%d
1 : input.dst.llvm-%47516aa5a9eab7a5f0d0bce668115131.constexpr.E0%0%d : BV:32
=Loc 100039 in dst.llvm.foo.
REGMEM
dst.llvm-%47516aa5a9eab7a5f0d0bce668115131.gepoffset.1.total_offset.E0%0%d
1 : input.dst.llvm-%47516aa5a9eab7a5f0d0bce668115131.gepoffset.1.total_offset.E0%0%d : BV:32
=Loc 100040 in dst.llvm.foo.
REGMEM
dst.llvm-%47516aa5a9eab7a5f0d0bce668115131.gepoffset.2.total_offset.E0%0%d
1 : input.dst.llvm-%47516aa5a9eab7a5f0d0bce668115131.gepoffset.2.total_offset.E0%0%d : BV:32
=Loc 100041 in dst.llvm.foo.
REGMEM
dst.llvm-%47516aa5a9eab7a5f0d0bce668115131.gepoffset.3.total_offset.E0%0%d
1 : input.dst.llvm-%47516aa5a9eab7a5f0d0bce668115131.gepoffset.3.total_offset.E0%0%d : BV:32
=Loc 100042 in dst.llvm.foo.
REGMEM
dst.llvm-%47516aa5a9eab7a5f0d0bce668115131.intermediate.gepoffset.1.offset.E0%0%d
1 : input.dst.llvm-%47516aa5a9eab7a5f0d0bce668115131.intermediate.gepoffset.1.offset.E0%0%d : BV:32
=Loc 100043 in dst.llvm.foo.
REGMEM
dst.llvm-%47516aa5a9eab7a5f0d0bce668115131.intermediate.gepoffset.2.offset.E0%0%d
1 : input.dst.llvm-%47516aa5a9eab7a5f0d0bce668115131.intermediate.gepoffset.2.offset.E0%0%d : BV:32
=Loc 100044 in dst.llvm.foo.
REGMEM
dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=Loc 100045 in dst.llvm.foo.
REGMEM
dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=Loc 100046 in dst.llvm.foo.
REGMEM
dst.llvm-indir_tgt.E0%0%d
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=Loc 100047 in dst.llvm.foo.
REGMEM
dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=Loc 100048 in dst.llvm.foo.
REGMEM
dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=Loc 100049 in dst.llvm.foo.
REGMEM
dst.llvm-%2765c615cd3308ea01ce016481e.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%2765c615cd3308ea01ce016481e.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=Loc 100050 in dst.llvm.foo.
REGMEM
dst.llvm-%2765c615cd3308ea01ce016481e.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%2765c615cd3308ea01ce016481e.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=Loc 100051 in dst.llvm.foo.
REGMEM
dst.llvm-%2765c615cd3308ea01ce016481e.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%2765c615cd3308ea01ce016481e.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=Loc 100052 in dst.llvm.foo.
REGMEM
dst.llvm-%2765c615cd3308ea01ce016481e.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%2765c615cd3308ea01ce016481e.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=Loc 100053 in dst.llvm.foo.
REGMEM
dst.llvm-%2765c615cd3308ea01ce016481e.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%2765c615cd3308ea01ce016481e.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=Loc 100054 in dst.llvm.foo.
REGMEM
dst.llvm-%arrayidx.Lfor.cond%1%bbentry
1 : input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry : BV:32
=Loc 100055 in dst.llvm.foo.
REGMEM
dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=Loc 100056 in dst.llvm.foo.
REGMEM
dst.llvm-%inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=Loc 100057 in dst.llvm.foo.
REGMEM
dst.local_alloc_count.Lfor.cond%1%bbentry
1 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
=Loc 100058 in dst.llvm.foo.
REGMEM
dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : ROUNDING_MODE
=Loc 100059 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 100060 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem-may-straddle-symbol.2-heap
=Loc 100061 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--symbol.1
=Loc 100062 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
=Loc 100063 in dst.llvm.foo.
SLOT
=mem
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=mlvar
mlloc.dst.llvm.foo.0
=addr
1 : symbol.1 : BV:32
=nbytes
4
=bigendian
false
=Locs end
=Liveness in dst.llvm.foo
=live locs at L0%0%d
100004, 100032, 100033, 100034, 
=live locs at Lfor.body%1%d
100004, 100037, 100060, 100061, 100062, 100063, 
=live locs at Lfor.cond%1%bbentry
100004, 100037, 100060, 100061, 100062, 100063, 
=live locs at Lfor.cond%2%d
100004, 100036, 100037, 100060, 100061, 100062, 100063, 
=live locs at Lfor.end%1%d
100060, 100061, 100063, 
=live locs at E0%0%d
100041[f], 100060, 100061, 100063, 

=Definedness in dst.llvm.foo
=loc definedness at L0%0%d
100004, 100029, 100031, 100032, 100033, 100034
=loc definedness at Lfor.body%1%d
100004, 100029, 100031, 100032, 100033, 100034, 100036, 100037, 100047, 100048, 100057, 100058, 100059, 100060, 100061, 100062, 100063
=loc definedness at Lfor.cond%1%bbentry
100004, 100029, 100031, 100032, 100033, 100034, 100037, 100047, 100048, 100057, 100058, 100059, 100060, 100061, 100062, 100063
=loc definedness at Lfor.cond%2%d
100004, 100029, 100031, 100032, 100033, 100034, 100036, 100037, 100047, 100048, 100057, 100058, 100059, 100060, 100061, 100062, 100063
=loc definedness at Lfor.end%1%d
100004, 100029, 100031, 100032, 100033, 100034, 100036, 100037, 100047, 100048, 100057, 100058, 100059, 100060, 100061, 100062, 100063
=loc definedness at E0%0%d
100004, 100029, 100031, 100032, 100033, 100034, 100036, 100037, 100038, 100039, 100040, 100041, 100042, 100043, 100044, 100045, 100046, 100047, 100048, 100057, 100058, 100059, 100060, 100061, 100062, 100063

=Branch affecting variable locs in dst.llvm.foo
=branch affecting variable locs at L0%0%d
100004
=branch affecting variable locs at Lfor.body%1%d
100004, 100037
=branch affecting variable locs at Lfor.cond%1%bbentry
100004, 100037
=branch affecting variable locs at Lfor.cond%2%d
100004, 100036, 100037
=branch affecting variable locs at Lfor.end%1%d

=branch affecting variable locs at E0%0%d


=Relevant Memlabels in dst.llvm.foo
=relevant memlabels
=function: foo
memlabel-mem--arg.0
memlabel-mem-may-straddle-symbol.2-heap
memlabel-mem--symbol.1
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
=touched symbol ids
 C_SYMBOL1
=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100037 {input.dst.llvm-%i.0.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100047 {input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100048 {input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100057 {input.dst.local_alloc_count.Lfor.cond%1%bbentry }
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100058 {input.dst.cur_rounding_mode.Lfor.cond%1%bbentry }
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100059 {memmask(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-mem--arg.0) }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100060 {memmask(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.2-heap) }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.2-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100061 {memmask(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-mem--symbol.1) }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--symbol.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100062 {memmask(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/) }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100063 {select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-mem--symbol.1, symbol.1, 4, false) }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--symbol.1 : MEMLABEL
4 : symbol.1 : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100037 {input.dst.llvm-%i.0.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100048 {input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100049 {input.dst.llvm-%2765c615cd3308ea01ce016481e.gepoffset.1.total_offset.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100050 {input.dst.llvm-%2765c615cd3308ea01ce016481e.gepoffset.2.total_offset.Lfor.cond%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100051 {input.dst.llvm-%2765c615cd3308ea01ce016481e.gepoffset.3.total_offset.Lfor.cond%1%bbentry }
1 : symbol.1 : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100052 {input.dst.llvm-%2765c615cd3308ea01ce016481e.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100053 {input.dst.llvm-%2765c615cd3308ea01ce016481e.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100054 {input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry }
1 : symbol.1 : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100055 {input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100056 {input.dst.llvm-%inc.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100061 {memmask(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-mem--symbol.1) }
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--symbol.1 : MEMLABEL
4 : symbol.1 : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : store(1, 2, 3, 8, 6, 9, 10) : ARRAY[BV:32 -> BV:8]
12 : memmask(11, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100063 {select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-mem--symbol.1, symbol.1, 4, false) }
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--symbol.1 : MEMLABEL
4 : symbol.1 : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : store(1, 2, 3, 8, 6, 9, 10) : ARRAY[BV:32 -> BV:8]
12 : select(11, 2, 3, 4, 9, 10) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%1%bbentry=>Lfor.cond%2%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%1%bbentry=>Lfor.cond%2%d for loc_id 100036 {input.dst.llvm-%cmp.Lfor.cond%2%d }
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%1%bbentry=>Lfor.cond%2%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.body%1%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.body%1%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.end%1%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.end%1%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.end%1%d=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.end%1%d=>E0%0%d for loc_id 100038 {input.dst.llvm-%47516aa5a9eab7a5f0d0bce668115131.constexpr.E0%0%d }
1 : symbol.1 : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.end%1%d=>E0%0%d for loc_id 100039 {input.dst.llvm-%47516aa5a9eab7a5f0d0bce668115131.gepoffset.1.total_offset.E0%0%d }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.end%1%d=>E0%0%d for loc_id 100040 {input.dst.llvm-%47516aa5a9eab7a5f0d0bce668115131.gepoffset.2.total_offset.E0%0%d }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.end%1%d=>E0%0%d for loc_id 100041 {input.dst.llvm-%47516aa5a9eab7a5f0d0bce668115131.gepoffset.3.total_offset.E0%0%d }
1 : symbol.1 : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.end%1%d=>E0%0%d for loc_id 100042 {input.dst.llvm-%47516aa5a9eab7a5f0d0bce668115131.intermediate.gepoffset.1.offset.E0%0%d }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.end%1%d=>E0%0%d for loc_id 100043 {input.dst.llvm-%47516aa5a9eab7a5f0d0bce668115131.intermediate.gepoffset.2.offset.E0%0%d }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.end%1%d=>E0%0%d for loc_id 100044 {input.dst.llvm-%hidden-reg.E0%0%d }
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.end%1%d=>E0%0%d for loc_id 100045 {input.dst.llvm-%ret-reg.E0%0%d }
1 : symbol.1 : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.end%1%d=>E0%0%d for loc_id 100046 {input.dst.llvm-indir_tgt.E0%0%d }
1 : retaddr_const : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.end%1%d=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at Lfor.body%1%d:
vacuous mls at Lfor.cond%1%bbentry:
vacuous mls at Lfor.cond%2%d:
vacuous mls at Lfor.end%1%d:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at Lfor.body%1%d:
non-vacuous mls at Lfor.cond%1%bbentry:
non-vacuous mls at Lfor.cond%2%d:
non-vacuous mls at Lfor.end%1%d:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in dst.llvm.foo
=avail_exprs begin
=loc 100004
=loc_expr
140368 : input.dst.llvm-%n : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100019
=loc_expr
140443 : input.dst.llvm-%hidden-reg : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100021
=loc_expr
140444 : input.dst.llvm-callee-save.0 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100022
=loc_expr
140446 : input.dst.llvm-callee-save.1 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100023
=loc_expr
140448 : input.dst.llvm-callee-save.2 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100024
=loc_expr
140450 : input.dst.llvm-callee-save.3 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100028
=loc_expr
140387 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100029
=loc_expr
140375 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100038
=loc_expr
140574 : input.dst.llvm-%47516aa5a9eab7a5f0d0bce668115131.constexpr.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : symbol.1 : BV:32
=avail_exprs_val.end
=loc 100039
=loc_expr
140575 : input.dst.llvm-%47516aa5a9eab7a5f0d0bce668115131.gepoffset.1.total_offset.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100040
=loc_expr
140576 : input.dst.llvm-%47516aa5a9eab7a5f0d0bce668115131.gepoffset.2.total_offset.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100041
=loc_expr
140573 : input.dst.llvm-%47516aa5a9eab7a5f0d0bce668115131.gepoffset.3.total_offset.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : symbol.1 : BV:32
=avail_exprs_val.end
=loc 100042
=loc_expr
140577 : input.dst.llvm-%47516aa5a9eab7a5f0d0bce668115131.intermediate.gepoffset.1.offset.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100043
=loc_expr
140578 : input.dst.llvm-%47516aa5a9eab7a5f0d0bce668115131.intermediate.gepoffset.2.offset.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100044
=loc_expr
140579 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=avail_exprs_val.end
=loc 100045
=loc_expr
140580 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : symbol.1 : BV:32
=avail_exprs_val.end
=loc 100046
=loc_expr
140581 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : retaddr_const : BV:32
=avail_exprs_val.end
=loc 100047
=loc_expr
140582 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100049
=loc_expr
140583 : input.dst.llvm-%2765c615cd3308ea01ce016481e.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100052
=loc_expr
140586 : input.dst.llvm-%2765c615cd3308ea01ce016481e.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100057
=loc_expr
140591 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.end
=loc 100058
=loc_expr
140592 : input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : ROUNDING_MODE
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=avail_exprs_val.end
=avail_exprs end
=sprel_map in dst.llvm.foo
=loc 100038 expr
1 : input.dst.llvm-%47516aa5a9eab7a5f0d0bce668115131.constexpr.E0%0%d : BV:32
=loc 100038 spreled-expr
258 : symbol.1 : BV:32
=loc 100039 expr
1 : input.dst.llvm-%47516aa5a9eab7a5f0d0bce668115131.gepoffset.1.total_offset.E0%0%d : BV:32
=loc 100039 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100040 expr
1 : input.dst.llvm-%47516aa5a9eab7a5f0d0bce668115131.gepoffset.2.total_offset.E0%0%d : BV:32
=loc 100040 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100041 expr
1 : input.dst.llvm-%47516aa5a9eab7a5f0d0bce668115131.gepoffset.3.total_offset.E0%0%d : BV:32
=loc 100041 spreled-expr
258 : symbol.1 : BV:32
=loc 100042 expr
1 : input.dst.llvm-%47516aa5a9eab7a5f0d0bce668115131.intermediate.gepoffset.1.offset.E0%0%d : BV:32
=loc 100042 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100043 expr
1 : input.dst.llvm-%47516aa5a9eab7a5f0d0bce668115131.intermediate.gepoffset.2.offset.E0%0%d : BV:32
=loc 100043 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100045 expr
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=loc 100045 spreled-expr
258 : symbol.1 : BV:32
=loc 100046 expr
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=loc 100046 spreled-expr
140267 : retaddr_const : BV:32
=loc 100047 expr
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=loc 100047 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100049 expr
1 : input.dst.llvm-%2765c615cd3308ea01ce016481e.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=loc 100049 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100052 expr
1 : input.dst.llvm-%2765c615cd3308ea01ce016481e.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=loc 100052 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100057 expr
1 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
=loc 100057 spreled-expr
140387 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=loc 100058 expr
1 : input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : ROUNDING_MODE
=loc 100058 spreled-expr
140386 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;foo}
=loc_id 100004 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(symbol.1, ; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.2-heap, )
=loc_id 100019 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100021 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100022 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100023 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100024 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100028 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100029 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100031 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(symbol.1, ; memlabel-mem-may-straddle-symbol.2-heap, )
=loc_id 100032 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(symbol.1, ; memlabel-mem-may-straddle-symbol.2-heap, )
=loc_id 100033 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(symbol.1, ; memlabel-mem-may-straddle-symbol.2-heap, )
=loc_id 100034 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(symbol.1, ; memlabel-mem-may-straddle-symbol.2-heap, )
=loc_id 100036 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100037 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100038 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(symbol.1, ; )
=loc_id 100039 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100040 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100041 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(symbol.1, ; )
=loc_id 100042 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100043 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100044 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100045 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(symbol.1, ; )
=loc_id 100046 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100047 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100048 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100049 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100050 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100051 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(symbol.1, ; )
=loc_id 100052 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100053 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100054 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(symbol.1, ; )
=loc_id 100055 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100056 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100057 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100058 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100059 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(symbol.1, ; memlabel-mem-may-straddle-symbol.2-heap, )
=loc_id 100060 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(symbol.1, ; memlabel-mem-may-straddle-symbol.2-heap, )
=loc_id 100061 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(symbol.1, ; memlabel-mem-may-straddle-symbol.2-heap, )
=loc_id 100062 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(symbol.1, ; memlabel-mem-may-straddle-symbol.2-heap, )
=loc_id 100063 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(symbol.1, ; memlabel-mem-may-straddle-symbol.2-heap, )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 100038 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(symbol.1, ; )
=loc_id 100039 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100040 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100041 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(symbol.1, ; )
=loc_id 100042 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100043 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100045 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(symbol.1, ; )
=loc_id 100046 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100047 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100049 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100052 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100057 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100058 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>Lfor.cond%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.body%1%d=>Lfor.cond%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond%1%bbentry=>Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond%2%d=>Lfor.body%1%d
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond%2%d=>Lfor.end%1%d
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
2 : not(1) : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.end%1%d=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>Lfor.cond%1%bbentry
=dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-mem.Lfor.cond%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=dst.local_alloc_count.Lfor.cond%1%bbentry
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.body%1%d=>Lfor.cond%1%bbentry
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-mem.Lfor.cond%1%bbentry
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--symbol.1 : MEMLABEL
4 : symbol.1 : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : store(1, 2, 3, 8, 6, 9, 10) : ARRAY[BV:32 -> BV:8]
=dst.llvm-%2765c615cd3308ea01ce016481e.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%2765c615cd3308ea01ce016481e.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%2765c615cd3308ea01ce016481e.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : symbol.1 : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%2765c615cd3308ea01ce016481e.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%2765c615cd3308ea01ce016481e.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%arrayidx.Lfor.cond%1%bbentry
1 : symbol.1 : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%inc.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond%1%bbentry=>Lfor.cond%2%d
=dst.llvm-%cmp.Lfor.cond%2%d
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond%2%d=>Lfor.body%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond%2%d=>Lfor.end%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.end%1%d=>E0%0%d
=dst.llvm-%47516aa5a9eab7a5f0d0bce668115131.constexpr.E0%0%d
1 : symbol.1 : BV:32
=dst.llvm-%47516aa5a9eab7a5f0d0bce668115131.gepoffset.1.total_offset.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%47516aa5a9eab7a5f0d0bce668115131.gepoffset.2.total_offset.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%47516aa5a9eab7a5f0d0bce668115131.gepoffset.3.total_offset.E0%0%d
1 : symbol.1 : BV:32
=dst.llvm-%47516aa5a9eab7a5f0d0bce668115131.intermediate.gepoffset.1.offset.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%47516aa5a9eab7a5f0d0bce668115131.intermediate.gepoffset.2.offset.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : symbol.1 : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lfor.cond%1%bbentry
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lfor.cond%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%d=>Lfor.cond%1%bbentry
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%d=>Lfor.cond%1%bbentry assume# 0
1 : 1 { 0x1 } : BOOL
2 : symbol.1 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : isgepoffset(2, 3) : BOOL
5 : 4 { 0x4 +1.0e1025 } : BV:64
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : 32 { 0x20 +1.0e1025 } : INT
8 : bvsign_ext(6, 7) : BV:64
9 : bvmul(5, 8) : BV:64
10 : 63 { 0x3f +1.0e1025 } : INT
11 : bvextract(9, 10, 7) : BV:32
12 : eq(3, 11) : BOOL
13 : 4 { 0x4 +1.0e1025 } : INT
14 : isindexforsize(12, 13) : BOOL
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 6) : BV:32
17 : bvadd(2, 16) : BV:32
18 : isgepoffset(17, 16) : BOOL
19 : and(1, 4, 14, 18) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%d=>Lfor.cond%1%bbentry assume# 1
1 : symbol.1 : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
6 : 4 { 0x4 +1.0e1025 } : INT
7 : islangaligned(5, 6) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%d=>Lfor.cond%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%1%bbentry=>Lfor.cond%2%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%1%bbentry=>Lfor.cond%2%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.body%1%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.body%1%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.end%1%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.end%1%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.end%1%d=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at Lfor.end%1%d=>E0%0%d assume# 0
1 : 1 { 0x1 } : BOOL
2 : symbol.1 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : isgepoffset(2, 3) : BOOL
5 : and(1, 4) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lfor.end%1%d=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
1
=String-contents:
=Nextpc-map:
=Nextpc-map done
=suffixpaths for dst.llvm.foo
=suffixpath_at_L0%0%d for dst.llvm.foo
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_Lfor.body%1%d for dst.llvm.foo
=suffixpath_at_Lfor.body%1%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*(Lfor.cond%2%d=>Lfor.body%1%d)))
=suffixpath_at_Lfor.cond%1%bbentry for dst.llvm.foo
=suffixpath_at_Lfor.cond%1%bbentry.graph_edge_composition
(L0%0%d=>Lfor.cond%1%bbentry)
=suffixpath_at_Lfor.cond%2%d for dst.llvm.foo
=suffixpath_at_Lfor.cond%2%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.cond%2%d))
=suffixpath_at_Lfor.end%1%d for dst.llvm.foo
=suffixpath_at_Lfor.end%1%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*(Lfor.cond%2%d=>Lfor.end%1%d)))
=suffixpath_at_E0%0%d for dst.llvm.foo
=suffixpath_at_E0%0%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.end%1%d)*(Lfor.end%1%d=>E0%0%d))))
=suffixpaths for dst.llvm.foo done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry done
tfg.assumes_around_edge at Lfor.body%1%d=>Lfor.cond%1%bbentry
tfg.assumes_around_edge at Lfor.body%1%d=>Lfor.cond%1%bbentry assume #0
tfg.assumes_around_edge at Lfor.body%1%d=>Lfor.cond%1%bbentry assume #0.ec
tfg.assumes_around_edge at Lfor.body%1%d=>Lfor.cond%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lfor.body%1%d=>Lfor.cond%1%bbentry assume #0.pred
=Comment
undef-behavioursome.edge.Lfor.body%1%d=>Lfor.cond%1%bbentry
=LhsExpr
140275 : 1 { 0x1 } : BOOL
258 : symbol.1 : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
140477 : isgepoffset(258, 140276) : BOOL
140478 : 4 { 0x4 +1.0e1025 } : BV:64
140552 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
140399 : 32 { 0x20 +1.0e1025 } : INT
140562 : bvsign_ext(140552, 140399) : BV:64
140647 : bvmul(140478, 140562) : BV:64
140403 : 63 { 0x3f +1.0e1025 } : INT
140648 : bvextract(140647, 140403, 140399) : BV:32
140652 : eq(140276, 140648) : BOOL
140341 : 4 { 0x4 +1.0e1025 } : INT
140654 : isindexforsize(140652, 140341) : BOOL
140338 : 4 { 0x4 +1.47e129 } : BV:32
140611 : bvmul(140338, 140552) : BV:32
140614 : bvadd(258, 140611) : BV:32
140656 : isgepoffset(140614, 140611) : BOOL
140661 : and(140275, 140477, 140654, 140656) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lfor.body%1%d=>Lfor.cond%1%bbentry assume #1
tfg.assumes_around_edge at Lfor.body%1%d=>Lfor.cond%1%bbentry assume #1.ec
tfg.assumes_around_edge at Lfor.body%1%d=>Lfor.cond%1%bbentry assume #1.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lfor.body%1%d=>Lfor.cond%1%bbentry assume #1.pred
=Comment
undef-behaviour-align-assume.edge.Lfor.body%1%d=>Lfor.cond%1%bbentry
=LhsExpr
258 : symbol.1 : BV:32
140338 : 4 { 0x4 +1.47e129 } : BV:32
140552 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
140611 : bvmul(140338, 140552) : BV:32
140614 : bvadd(258, 140611) : BV:32
140341 : 4 { 0x4 +1.0e1025 } : INT
140626 : islangaligned(140614, 140341) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lfor.body%1%d=>Lfor.cond%1%bbentry done
tfg.assumes_around_edge at Lfor.cond%1%bbentry=>Lfor.cond%2%d
tfg.assumes_around_edge at Lfor.cond%1%bbentry=>Lfor.cond%2%d done
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.body%1%d
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.body%1%d done
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.end%1%d
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.end%1%d done
tfg.assumes_around_edge at Lfor.end%1%d=>E0%0%d
tfg.assumes_around_edge at Lfor.end%1%d=>E0%0%d assume #0
tfg.assumes_around_edge at Lfor.end%1%d=>E0%0%d assume #0.ec
tfg.assumes_around_edge at Lfor.end%1%d=>E0%0%d assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lfor.end%1%d=>E0%0%d assume #0.pred
=Comment
undef-behavioursome.edge.Lfor.end%1%d=>E0%0%d
=LhsExpr
140275 : 1 { 0x1 } : BOOL
258 : symbol.1 : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
140477 : isgepoffset(258, 140276) : BOOL
140640 : and(140275, 140477) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lfor.end%1%d=>E0%0%d done
tfg.assumes_around_edge done
=TFGdone
=PC_to_linename:
=pc
Lentry%1%d
=linename
line 6
=pc
Lfor.body%1%d
=linename
line 7
=pc
Lfor.body%2%d
=linename
line 7
=pc
Lfor.body%3%d
=linename
line 8
=pc
Lfor.cond%1%d
=linename
line 6
=pc
Lfor.cond%2%d
=linename
line 6
=pc
Lfor.end%1%d
=linename
line 9
=pc
Lfor.inc%1%d
=linename
line 6
=pc
Lfor.inc%2%d
=linename
line 6
=PC_to_linename done
=PC_to_column_name:
=pc
Lentry%1%d
=column_name
 at column 8
=pc
Lfor.body%1%d
=column_name
 at column 5
=pc
Lfor.body%2%d
=column_name
 at column 10
=pc
Lfor.body%3%d
=column_name
 at column 3
=pc
Lfor.cond%1%d
=column_name
 at column 26
=pc
Lfor.cond%2%d
=column_name
 at column 3
=pc
Lfor.end%1%d
=column_name
 at column 3
=pc
Lfor.inc%1%d
=column_name
 at column 31
=pc
Lfor.inc%2%d
=column_name
 at column 3
=PC_to_column_name done
=PC_to_line_and_column:
=pc
Lentry%1%d
=line_and_column
(line 6 at column 8)
=pc
Lfor.body%1%d
=line_and_column
(line 7 at column 5)
=pc
Lfor.body%2%d
=line_and_column
(line 7 at column 10)
=pc
Lfor.body%3%d
=line_and_column
line 8
=pc
Lfor.cond%1%d
=line_and_column
(line 6 at column 26)
=pc
Lfor.cond%2%d
=line_and_column
(line 6 at column 3)
=pc
Lfor.end%1%d
=line_and_column
line 9
=pc
Lfor.inc%1%d
=line_and_column
(line 6 at column 31)
=pc
Lfor.inc%2%d
=line_and_column
(line 6 at column 3)
=PC_to_line_and_column done
=SourceToLLVMVarnames:
=SourceToLLVMVarnames done
=InputLLVMToSourceVarnames:
input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : L0%0%d : 0
input.dst.llvm-%n : L0%0%d : n'
input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : L0%0%d : input.dst.local./*___y___foo__x__=L0%0%argnum0=/
input.dst.llvm-%47516aa5a9eab7a5f0d0bce668115131.gepoffset.3.total_offset : L0%0%d : @m
input.dst.local_alloc_count.=L0%0%d= : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.llvm-%i.0.phi.tmpvar.entry : L0%0%d : 0
input.dst.llvm-%i.0 : Lfor.cond%1%bbentry : i'
input.dst.llvm-%2765c615cd3308ea01ce016481e.gepoffset.1.total_offset : L0%0%d : 0
input.dst.llvm-%inc : Lfor.inc%2%bbentry : i'
input.dst.llvm-%47516aa5a9eab7a5f0d0bce668115131.gepoffset.1.total_offset : L0%0%d : 0
input.dst.llvm-%47516aa5a9eab7a5f0d0bce668115131.gepoffset.2.total_offset : L0%0%d : 0
input.dst.llvm-%hidden-reg : L0%0%d : input.dst.llvm-%hidden-reg
input.dst.llvm-callee-save.0 : L0%0%d : input.dst.llvm-callee-save.0
input.dst.llvm-callee-save.1 : L0%0%d : input.dst.llvm-callee-save.1
input.dst.llvm-callee-save.2 : L0%0%d : input.dst.llvm-callee-save.2
input.dst.llvm-callee-save.3 : L0%0%d : input.dst.llvm-callee-save.3
input.dst.llvm-%2765c615cd3308ea01ce016481e.intermediate.gepoffset.1.offset : L0%0%d : 0
input.dst.llvm-%47516aa5a9eab7a5f0d0bce668115131.intermediate.gepoffset.1.offset : L0%0%d : 0
input.dst.llvm-%47516aa5a9eab7a5f0d0bce668115131.intermediate.gepoffset.2.offset : L0%0%d : 0
input.dst.llvm-%47516aa5a9eab7a5f0d0bce668115131.constexpr : L0%0%d : @m
input.dst.llvm-%ret-reg : L0%0%d : @m
input.dst.llvm-indir_tgt : L0%0%d : return-address
input.dst.local_alloc_count : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.cur_rounding_mode : L0%0%d : ROUND_to_nearest_ties_to_even
input.dst.llvm-indir_tgt.E0%0%d : L0%0%d : return-address
input.dst.llvm-%47516aa5a9eab7a5f0d0bce668115131.intermediate.gepoffset.1.offset.E0%0%d : L0%0%d : 0
input.dst.llvm-%47516aa5a9eab7a5f0d0bce668115131.intermediate.gepoffset.2.offset.E0%0%d : L0%0%d : 0
input.dst.llvm-%47516aa5a9eab7a5f0d0bce668115131.gepoffset.1.total_offset.E0%0%d : L0%0%d : 0
input.dst.llvm-%47516aa5a9eab7a5f0d0bce668115131.gepoffset.2.total_offset.E0%0%d : L0%0%d : 0
input.dst.llvm-%hidden-reg.E0%0%d : L0%0%d : bvxor(bvxor(bvxor(bvxor(input.dst.llvm-%hidden-reg, input.dst.llvm-callee-save.0), input.dst.llvm-callee-save.1), input.dst.llvm-callee-save.2), input.dst.llvm-callee-save.3)
input.dst.llvm-%47516aa5a9eab7a5f0d0bce668115131.constexpr.E0%0%d : L0%0%d : @m
input.dst.llvm-%ret-reg.E0%0%d : L0%0%d : @m
input.dst.llvm-%2765c615cd3308ea01ce016481e.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : L0%0%d : 0
input.dst.llvm-%2765c615cd3308ea01ce016481e.gepoffset.1.total_offset.Lfor.cond%1%bbentry : L0%0%d : 0
input.dst.llvm-%47516aa5a9eab7a5f0d0bce668115131.gepoffset.3.total_offset.E0%0%d : L0%0%d : @m
input.dst.local_alloc_count.Lfor.cond%1%bbentry : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : L0%0%d : ROUND_to_nearest_ties_to_even
=InputLLVMToSourceVarnames done
=PotentialSCEVRelations:
=dst.llvm-%i.0
=dst.llvm-%i.0 loop pc: Lfor.cond%1%d
=dst.llvm-%i.0 val_scevb
=dst.llvm-%i.0 val_scevb scev
=dst.llvm-%i.0 val_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%i.0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%i.0 val_scevb scev scev_expr
1 : 00000000000000000000000000000000b
2 : 00000000000000000000000000000001b
3 : scev_op_addrec(1, 2) : loop Lfor.cond%1%d : 
=dst.llvm-%i.0 val_scevb scev scev_expr done
=dst.llvm-%i.0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%i.0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%i.0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%i.0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%i.0 atuse_scevb
=dst.llvm-%i.0 atuse_scevb scev
=dst.llvm-%i.0 atuse_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%i.0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%i.0 atuse_scevb scev scev_expr
1 : 00000000000000000000000000000000b
2 : 00000000000000000000000000000001b
3 : scev_op_addrec(1, 2) : loop Lfor.cond%1%d : 
=dst.llvm-%i.0 atuse_scevb scev scev_expr done
=dst.llvm-%i.0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%i.0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%i.0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%i.0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%i.0 atexit_scev
=dst.llvm-%i.0 atexit_scev loop: L0%0%d
=dst.llvm-%i.0 atexit_scev scev_overflow_flag: 
=dst.llvm-%i.0 atexit_scev scev_expr
4 : input.dst.llvm-%n : BV32
=dst.llvm-%i.0 atexit_scev scev_expr done
=dst.llvm-%arrayidx
=dst.llvm-%arrayidx loop pc: Lfor.cond%1%d
=dst.llvm-%arrayidx val_scevb
=dst.llvm-%arrayidx val_scevb scev
=dst.llvm-%arrayidx val_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%arrayidx val_scevb scev scev_overflow_flag: 
=dst.llvm-%arrayidx val_scevb scev scev_expr
5 : input.dst.llvm-@m : BV32
6 : 00000000000000000000000000000100b
7 : scev_op_addrec(5, 6) : loop Lfor.cond%1%d : 
=dst.llvm-%arrayidx val_scevb scev scev_expr done
=dst.llvm-%arrayidx val_scevb unsigned lower bound: 32:0
=dst.llvm-%arrayidx val_scevb unsigned upper bound: 32:4294967293
=dst.llvm-%arrayidx val_scevb signed lower bound: 32:2147483648
=dst.llvm-%arrayidx val_scevb signed upper bound: 32:2147483645
=dst.llvm-%arrayidx atuse_scevb
=dst.llvm-%arrayidx atuse_scevb scev
=dst.llvm-%arrayidx atuse_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%arrayidx atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%arrayidx atuse_scevb scev scev_expr
5 : input.dst.llvm-@m : BV32
6 : 00000000000000000000000000000100b
7 : scev_op_addrec(5, 6) : loop Lfor.cond%1%d : 
=dst.llvm-%arrayidx atuse_scevb scev scev_expr done
=dst.llvm-%arrayidx atuse_scevb unsigned lower bound: 32:0
=dst.llvm-%arrayidx atuse_scevb unsigned upper bound: 32:4294967293
=dst.llvm-%arrayidx atuse_scevb signed lower bound: 32:2147483648
=dst.llvm-%arrayidx atuse_scevb signed upper bound: 32:2147483645
=dst.llvm-%arrayidx atexit_scev
=dst.llvm-%arrayidx atexit_scev loop: L0%0%d
=dst.llvm-%arrayidx atexit_scev scev_overflow_flag: 
=dst.llvm-%arrayidx atexit_scev scev_expr
6 : 00000000000000000000000000000100b
4 : input.dst.llvm-%n : BV32
8 : scev_op_mul(6, 4) : loop L0%0%d : 
5 : input.dst.llvm-@m : BV32
9 : scev_op_add(8, 5) : loop L0%0%d : 
=dst.llvm-%arrayidx atexit_scev scev_expr done
=dst.llvm-%inc
=dst.llvm-%inc loop pc: Lfor.cond%1%d
=dst.llvm-%inc val_scevb
=dst.llvm-%inc val_scevb scev
=dst.llvm-%inc val_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%inc val_scevb scev scev_overflow_flag: 
=dst.llvm-%inc val_scevb scev scev_expr
2 : 00000000000000000000000000000001b
10 : scev_op_addrec(2, 2) : loop Lfor.cond%1%d : 
=dst.llvm-%inc val_scevb scev scev_expr done
=dst.llvm-%inc val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%inc val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%inc val_scevb signed lower bound: 32:4294967295
=dst.llvm-%inc val_scevb signed upper bound: 32:4294967295
=dst.llvm-%inc atuse_scevb
=dst.llvm-%inc atuse_scevb scev
=dst.llvm-%inc atuse_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%inc atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%inc atuse_scevb scev scev_expr
2 : 00000000000000000000000000000001b
10 : scev_op_addrec(2, 2) : loop Lfor.cond%1%d : 
=dst.llvm-%inc atuse_scevb scev scev_expr done
=dst.llvm-%inc atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%inc atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%inc atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%inc atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%inc atexit_scev
=dst.llvm-%inc atexit_scev loop: L0%0%d
=dst.llvm-%inc atexit_scev scev_overflow_flag: 
=dst.llvm-%inc atexit_scev scev_expr
2 : 00000000000000000000000000000001b
4 : input.dst.llvm-%n : BV32
11 : scev_op_add(2, 4) : loop L0%0%d : 
=dst.llvm-%inc atexit_scev scev_expr done
=PotentialSCEVRelations done
=ReachingDefinitionsForLocs:
=Reaching Definitions at L0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--symbol.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.2-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns done
=Reaching Definitions at Lfor.body%1%d
=reaching defns for expr 0
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--symbol.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.2-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 5 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 6 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 7 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 8 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%2765c615cd3308ea01ce016481e.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 9 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%2765c615cd3308ea01ce016481e.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%2765c615cd3308ea01ce016481e.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%2765c615cd3308ea01ce016481e.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%2765c615cd3308ea01ce016481e.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--symbol.1 : MEMLABEL
4 : symbol.1 : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns done
=Reaching Definitions at Lfor.cond%1%bbentry
=reaching defns for expr 0
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--symbol.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.2-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 5 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 6 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 7 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 8 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%2765c615cd3308ea01ce016481e.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 9 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%2765c615cd3308ea01ce016481e.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%2765c615cd3308ea01ce016481e.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%2765c615cd3308ea01ce016481e.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%2765c615cd3308ea01ce016481e.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--symbol.1 : MEMLABEL
4 : symbol.1 : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns done
=Reaching Definitions at Lfor.cond%2%d
=reaching defns for expr 0
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--symbol.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.2-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 5 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 6 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 7 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 8 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%2765c615cd3308ea01ce016481e.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 9 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%2765c615cd3308ea01ce016481e.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%2765c615cd3308ea01ce016481e.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%2765c615cd3308ea01ce016481e.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%2765c615cd3308ea01ce016481e.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--symbol.1 : MEMLABEL
4 : symbol.1 : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns done
=Reaching Definitions at Lfor.end%1%d
=reaching defns for expr 0
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--symbol.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.2-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 5 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 6 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 7 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 8 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%2765c615cd3308ea01ce016481e.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 9 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%2765c615cd3308ea01ce016481e.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%2765c615cd3308ea01ce016481e.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%2765c615cd3308ea01ce016481e.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%2765c615cd3308ea01ce016481e.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--symbol.1 : MEMLABEL
4 : symbol.1 : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns done
=Reaching Definitions at E0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--symbol.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.2-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 5 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 6 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 7 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%47516aa5a9eab7a5f0d0bce668115131.gepoffset.3.total_offset.E0%0%d : BV:32
=reaching defns for expr 8 edges
  Lfor.end%1%d=>E0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%47516aa5a9eab7a5f0d0bce668115131.constexpr.E0%0%d : BV:32
=reaching defns for expr 9 edges
  Lfor.end%1%d=>E0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%47516aa5a9eab7a5f0d0bce668115131.gepoffset.1.total_offset.E0%0%d : BV:32
=reaching defns for expr 10 edges
  Lfor.end%1%d=>E0%0%d
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%47516aa5a9eab7a5f0d0bce668115131.gepoffset.2.total_offset.E0%0%d : BV:32
=reaching defns for expr 11 edges
  Lfor.end%1%d=>E0%0%d
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%47516aa5a9eab7a5f0d0bce668115131.intermediate.gepoffset.1.offset.E0%0%d : BV:32
=reaching defns for expr 12 edges
  Lfor.end%1%d=>E0%0%d
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%47516aa5a9eab7a5f0d0bce668115131.intermediate.gepoffset.2.offset.E0%0%d : BV:32
=reaching defns for expr 13 edges
  Lfor.end%1%d=>E0%0%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=reaching defns for expr 14 edges
  Lfor.end%1%d=>E0%0%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=reaching defns for expr 15 edges
  Lfor.end%1%d=>E0%0%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=reaching defns for expr 16 edges
  Lfor.end%1%d=>E0%0%d
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%2765c615cd3308ea01ce016481e.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%2765c615cd3308ea01ce016481e.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%2765c615cd3308ea01ce016481e.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%2765c615cd3308ea01ce016481e.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%2765c615cd3308ea01ce016481e.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--symbol.1 : MEMLABEL
4 : symbol.1 : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=reaching defns for expr 26 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns done
=ReachingDefinitionsForLocs done
=VarnameToLRStatus Begin:
=LR status for var input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%n
lr_status_bottom(symbol.1, ; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.2-heap, )
=LR status for var input.dst.local./*___y___foo__x__=L0%0%argnum0=/
lr_status_top
=LR status for var input.dst.local_alloc_count.=L0%0%d=
lr_status_top
=LR status for var input.dst.llvm-%hidden-reg
lr_status_top
=LR status for var input.dst.llvm-callee-save.0
lr_status_top
=LR status for var input.dst.llvm-callee-save.1
lr_status_top
=LR status for var input.dst.llvm-callee-save.2
lr_status_top
=LR status for var input.dst.llvm-callee-save.3
lr_status_top
=LR status for var input.dst.llvm-indir_tgt.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%i.0.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%cmp.Lfor.cond%2%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%47516aa5a9eab7a5f0d0bce668115131.intermediate.gepoffset.1.offset.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%47516aa5a9eab7a5f0d0bce668115131.intermediate.gepoffset.2.offset.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%47516aa5a9eab7a5f0d0bce668115131.gepoffset.1.total_offset.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%47516aa5a9eab7a5f0d0bce668115131.gepoffset.2.total_offset.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%hidden-reg.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%47516aa5a9eab7a5f0d0bce668115131.constexpr.E0%0%d
lr_status_linearly_related(symbol.1, ; )
=LR status for var input.dst.llvm-%ret-reg.E0%0%d
lr_status_linearly_related(symbol.1, ; )
=LR status for var input.dst.llvm-%2765c615cd3308ea01ce016481e.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%2765c615cd3308ea01ce016481e.gepoffset.1.total_offset.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%2765c615cd3308ea01ce016481e.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%2765c615cd3308ea01ce016481e.gepoffset.2.total_offset.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%47516aa5a9eab7a5f0d0bce668115131.gepoffset.3.total_offset.E0%0%d
lr_status_linearly_related(symbol.1, ; )
=LR status for var input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry
lr_status_linearly_related(symbol.1, ; )
=LR status for var input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%2765c615cd3308ea01ce016481e.gepoffset.3.total_offset.Lfor.cond%1%bbentry
lr_status_linearly_related(symbol.1, ; )
=LR status for var input.dst.llvm-%inc.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.local_alloc_count.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=VarnameToLRStatus End
=TFG_LLVM_done
=TFG_SSA_done
=eqcheck_info
=eqcheck
=proof_filename loop6.proof
=function_name foo
=asm_filename NONE
=fixed_reg_mappings begin
0 : 0 : 0
0 : 4 : 4
=fixed_reg_mappings end
=rodata_map begin
=rodata_map end
=dst_iseq
=dst_iseq done
=dst_insn_pcs
=dst_insn_pcs done
=xml_output_format text-color
=use_only_relocatable_memlabels 0
=run_safety_check 0
=debug_header_pc_lsprels
=Local offsets from compile log
=Local offsets from compile log done
=done
=spec_iospecs
=SpecFuncIOSpecs
=FunctionName: foo
=EntryPreconds
=pred 0
=Comment
equal-arg0
=LhsExpr
1 : $spec-arg-0 : BV:32
2 : $llvm-arg-0 : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=EntryPreconds done
=ExitAsserts
=pred 0
=Comment
symbol-implements-variable-sized-map
=LhsExpr
1 : $spec-ret : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : $llvm-arg-0 : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : $llvm-md : ARRAY[BV:32 -> BV:8]
11 : $llvm-ma : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : $llvm-sym-m : BV:32
14 : 4 { 0x4 +1.47e129 } : BV:32
15 : bvmul(9, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=ExitAsserts done
=SpecFuncIOSpecs done
=eqcheck done
=graph_with_guessing
=Nodes: L0%0%d_L0%0%d L3%6%bbentry_Lfor.cond%1%bbentry E0%0%d_E0%0%d
=Edges:
L0%0%d_L0%0%d => L3%6%bbentry_Lfor.cond%1%bbentry
L3%6%bbentry_Lfor.cond%1%bbentry => L3%6%bbentry_Lfor.cond%1%bbentry
L3%6%bbentry_Lfor.cond%1%bbentry => E0%0%d_E0%0%d
=graph done
=is_ssa_graph:
0
=StartState:
=state_end
=graph_with_var_versions done
=FunctionName: foo
=Input: tfg-method-arg.0
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%n : BV:32
=arg end
=Node outputs: E0%0%d_E0%0%d
=Node outputs done for E0%0%d_E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : m : 400 : 4 : 0
C_SYMBOL2 : foo : 14 : 1 : 0
=Touched symbols: C_SYMBOL1
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%n : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
=Edge: L0%0%d_L0%0%d => L3%6%bbentry_Lfor.cond%1%bbentry
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L0%0%d to L3%6%bbentry at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
(L0%0%d#{0,0}=>L3%6%bbentry#{0,0})
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from L0%0%d to Lfor.cond%1%bbentry at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
(L0%0%d#{0,0}=>Lfor.cond%1%bbentry#{0,0})
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L3%6%bbentry_Lfor.cond%1%bbentry => L3%6%bbentry_Lfor.cond%1%bbentry
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L3%6%bbentry to L3%6%bbentry at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
((L3%6%bbentry#{0,0}=>L3%7%d#{0,0})*((L3%7%d#{0,0}=>L3%9%bbentry#{0,0})*(L3%9%bbentry#{0,0}=>L3%6%bbentry#{1,0})))
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lfor.cond%1%bbentry to Lfor.cond%1%bbentry at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((Lfor.cond%1%bbentry#{0,0}=>Lfor.cond%2%d#{0,0})*((Lfor.cond%2%d#{0,0}=>Lfor.body%1%d#{0,0})*(Lfor.body%1%d#{0,0}=>Lfor.cond%1%bbentry#{1,0})))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L3%6%bbentry_Lfor.cond%1%bbentry => E0%0%d_E0%0%d
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L3%6%bbentry to E0%0%d at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
((L3%6%bbentry#{0,0}=>L3%7%d#{0,0})*((L3%7%d#{0,0}=>L3%8%bbentry#{0,0})*(L3%8%bbentry#{0,0}=>E0%0%d#{0,0})))
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lfor.cond%1%bbentry to E0%0%d at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((Lfor.cond%1%bbentry#{0,0}=>Lfor.cond%2%d#{0,0})*((Lfor.cond%2%d#{0,0}=>Lfor.end%1%d#{0,0})*(Lfor.end%1%d#{0,0}=>E0%0%d#{0,0})))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
equal-arg0
=LhsExpr
1 : input.spec-%var-n-1 : BV:32
2 : input.dst.llvm-%n : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.1
=Comment
precond-mlasserts
=LhsExpr
1 : input.memlabel-mem--symbol.1_begin : BV:32
2 : input.memlabel-mem--symbol.1_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 400 { 0x190 +1.4768e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : 4 { 0x4 +1.47e129 } : BV:32
15 : bvadd(14, 5) : BV:32
16 : bvadd(10, 15) : BV:32
17 : eq(11, 16) : BOOL
18 : and(13, 17) : BOOL
19 : bvuge(1, 10) : BOOL
20 : bvule(1, 11) : BOOL
21 : and(19, 20) : BOOL
22 : bvuge(2, 10) : BOOL
23 : bvule(2, 11) : BOOL
24 : and(22, 23) : BOOL
25 : not(24) : BOOL
26 : andnot1(21, 25) : BOOL
27 : bvuge(10, 1) : BOOL
28 : bvule(10, 2) : BOOL
29 : and(27, 28) : BOOL
30 : bvuge(11, 1) : BOOL
31 : bvule(11, 2) : BOOL
32 : and(30, 31) : BOOL
33 : not(32) : BOOL
34 : andnot1(29, 33) : BOOL
35 : and(26, 34) : BOOL
36 : and(18, 35) : BOOL
37 : symbol.1 : BV:32
38 : 3 { 0x3 +1.35e129 } : BV:32
39 : bvand(37, 38) : BV:32
40 : 0 { 0x0 +1.0e129 } : BV:32
41 : eq(39, 40) : BOOL
42 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
43 : bvand(42, 38) : BV:32
44 : eq(43, 40) : BOOL
45 : and(41, 44) : BOOL
46 : and(36, 45) : BOOL
47 : eq(37, 1) : BOOL
48 : eq(42, 10) : BOOL
49 : and(47, 48) : BOOL
50 : and(46, 49) : BOOL
51 : dst_symbol_addr.1 : BV:32
52 : eq(37, 51) : BOOL
53 : and(50, 52) : BOOL
54 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
55 : 1 { 0x1 +1.11e129 } : BV:32
56 : memlabel-mem-may-straddle-symbol.2-heap : MEMLABEL
57 : region_agrees_with_memlabel(54, 40, 55, 56) : BOOL
58 : and(53, 57) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.2
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%n : BV:32
=predicate done
=graph_with_precondition_done

=Locs in foo.A2.B2.C1
=Locs end
=Liveness in foo.A2.B2.C1
=live locs at L0%0%d_L0%0%d

=live locs at L3%6%bbentry_Lfor.cond%1%bbentry

=live locs at E0%0%d_E0%0%d


=Definedness in foo.A2.B2.C1

=Branch affecting variable locs in foo.A2.B2.C1

=Relevant Memlabels in foo.A2.B2.C1
=relevant memlabels
=function: foo
memlabel-mem--arg.0
memlabel-mem-may-straddle-symbol.2-heap
memlabel-mem--symbol.1
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
=touched symbol ids
 C_SYMBOL1
=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
=graph_with_ml_contiguity_info non-vacuous mls
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in foo.A2.B2.C1
=avail_exprs begin
=avail_exprs end
=sprel_map in foo.A2.B2.C1
=sprel_map done
=lr-status-map
=lr-status-map done
=lr-status-for-sprel-locs-map
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=global counterexamples for reason inductive-invariants
=global nodece 0
=global nodece 0 nodece z3v487.ce3.num_edges_traversed1
=global nodece 0 nodece_path
=global nodece 0 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 0 nodece_cached_counterexample
=counter_example_begin z3v487.ce3 7c1e71bf905e7095c36722f134c1df
=symbol.1
1 : 2147483264 { 0x7ffffe80 +1.99995422e128 } : BV:32
=dst_symbol_addr.1
1 : 2147483264 { 0x7ffffe80 +1.99995422e128 } : BV:32
=input.spec-%var-n-1
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-m-0.L3%6%bbentry
1 : Lambda18 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda19 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-8.L3%6%bbentry
1 : Lambda18 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda19 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 65535 ] -> memlabel-mem-may-straddle-symbol.2-heap, [ 65536; 65539 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 65540; 2147483263 ] -> memlabel-mem-may-straddle-symbol.2-heap, [ 2147483264; 2147483663 ] -> memlabel-mem--symbol.1, [ 2147483664; 4294967295 ] -> memlabel-mem-may-straddle-symbol.2-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 65536 { 0x10000 +1.781250e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1610438063 { 0x5ffd55af +1.97917735e64 } : COUNT
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1610438063 { 0x5ffd55af +1.97917735e64 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.memlabel-mem--symbol.1_begin
1 : 2147483264 { 0x7ffffe80 +1.99995422e128 } : BV:32
=input.memlabel-mem--symbol.1_end
1 : 2147483663 { 0x8000000f -2147483633 -1.178e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 65536 { 0x10000 +1.781250e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 65539 { 0x10003 +1.781285e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-8.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
1370483088
=counter_example_end
=global nodece 0 num_edges_traversed 1
=global nodece 0 nodece_visted_pcs: 
L0%0%d_L0%0%d -> L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 1
=global nodece 1 nodece z3.ce4.num_edges_traversed0
=global nodece 1 nodece_path
=global nodece 1 nodece_path.graph_edge_composition
(epsilon)
=global nodece 1 nodece_cached_counterexample
=counter_example_begin z3.ce4 3a07541e7de458789ecc33ceeab51
=symbol.1
1 : 2147483360 { 0x7ffffee0 +1.99996566e128 } : BV:32
=dst_symbol_addr.1
1 : 2147483360 { 0x7ffffee0 +1.99996566e128 } : BV:32
=input.spec-%var-n-1
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : Lambda40 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda41 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 2147483359 ] -> memlabel-mem-may-straddle-symbol.2-heap, [ 2147483360; 2147483759 ] -> memlabel-mem--symbol.1, [ 2147483760; 2874212067 ] -> memlabel-mem-may-straddle-symbol.2-heap, [ 2874212068; 2874212071 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2874212072; 4294967295 ] -> memlabel-mem-may-straddle-symbol.2-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2874212068 { 0xab50fee4 -1420755228 -1.63277864e215 } : BV:32
=input.spec-%var-n-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.memlabel-mem--symbol.1_begin
1 : 2147483360 { 0x7ffffee0 +1.99996566e128 } : BV:32
=input.memlabel-mem--symbol.1_end
1 : 2147483759 { 0x8000006f -2147483537 -1.1323e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2874212068 { 0xab50fee4 -1420755228 -1.63277864e215 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2874212071 { 0xab50fee7 -1420755225 -1.63277900e215 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-8.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
2494662331
=counter_example_end
=global nodece 1 num_edges_traversed 0
=global nodece 1 nodece_visted_pcs: 
L0%0%d_L0%0%d
=global nodece 2
=global nodece 2 nodece z3.ce25.num_edges_traversed1
=global nodece 2 nodece_path
=global nodece 2 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 2 nodece_cached_counterexample
=counter_example_begin z3.ce25 214b4795efba298c9c8ccdda42bca5
=symbol.1
1 : 2786934772 { 0xa61d3ff4 -1508032524 -1.22851419e205 } : BV:32
=dst_symbol_addr.1
1 : 2786934772 { 0xa61d3ff4 -1508032524 -1.22851419e205 } : BV:32
=input.spec-%var-n-1
1 : 16843009 { 0x1010101 +1.784313e131 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-m-0.L3%6%bbentry
1 : Lambda18 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda19 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-8.L3%6%bbentry
1 : Lambda18 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda19 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 1, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%n
1 : 16843009 { 0x1010101 +1.784313e131 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 2147483643 ] -> memlabel-mem-may-straddle-symbol.2-heap, [ 2147483644; 2147483647 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2147483648; 2786934771 ] -> memlabel-mem-may-straddle-symbol.2-heap, [ 2786934772; 2786935171 ] -> memlabel-mem--symbol.1, [ 2786935172; 4294967295 ] -> memlabel-mem-may-straddle-symbol.2-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 632200485 { 0x25ae9d25 +1.36417067e204 } : COUNT
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 1, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 16843009 { 0x1010101 +1.784313e131 } : BV:32
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 632200485 { 0x25ae9d25 +1.36417067e204 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.memlabel-mem--symbol.1_begin
1 : 2786934772 { 0xa61d3ff4 -1508032524 -1.22851419e205 } : BV:32
=input.memlabel-mem--symbol.1_end
1 : 2786935171 { 0xa61d4183 -1508032125 -1.22856175e205 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-8.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
4045775723
=counter_example_end
=global nodece 2 num_edges_traversed 1
=global nodece 2 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 3
=global nodece 3 nodece z3.ce47.num_edges_traversed1
=global nodece 3 nodece_path
=global nodece 3 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 3 nodece_cached_counterexample
=counter_example_begin z3.ce47 71ce6a40cfea3f52cc48209237981f4c
=symbol.1
1 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
=dst_symbol_addr.1
1 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
=input.spec-%var-n-1
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-m-0.L3%6%bbentry
1 : Lambda18 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda19 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-8.L3%6%bbentry
1 : Lambda18 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda19 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 255, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 2147483643 ] -> memlabel-mem-may-straddle-symbol.2-heap, [ 2147483644; 2147484043 ] -> memlabel-mem--symbol.1, [ 2147484044; 4294965243 ] -> memlabel-mem-may-straddle-symbol.2-heap, [ 4294965244; 4294965247 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4294965248; 4294967295 ] -> memlabel-mem-may-straddle-symbol.2-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4294965244 { 0xfffff7fc -2052 -1.99975538e128 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1823059443 { 0x6ca9adf3 +1.32562100e90 } : COUNT
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 255, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1823059443 { 0x6ca9adf3 +1.32562100e90 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.memlabel-mem--symbol.1_begin
1 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
=input.memlabel-mem--symbol.1_end
1 : 2147484043 { 0x8000018b -2147483253 -1.4708e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4294965244 { 0xfffff7fc -2052 -1.99975538e128 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-8.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
502475613
=counter_example_end
=global nodece 3 num_edges_traversed 1
=global nodece 3 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 4
=global nodece 4 nodece z3.ce69.num_edges_traversed1
=global nodece 4 nodece_path
=global nodece 4 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 4 nodece_cached_counterexample
=counter_example_begin z3.ce69 fc8b4f1b5ca0bb486156f03abf4436d1
=symbol.1
1 : 2684354556 { 0x9ffffffc -1610612740 -1.99999952e192 } : BV:32
=dst_symbol_addr.1
1 : 2684354556 { 0x9ffffffc -1610612740 -1.99999952e192 } : BV:32
=input.spec-%var-n-1
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-m-0.L3%6%bbentry
1 : Lambda18 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda19 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-8.L3%6%bbentry
1 : Lambda18 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda19 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967294 ] -> 0, [ 4294967295; 4294967295 ] -> 128, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 2684354555 ] -> memlabel-mem-may-straddle-symbol.2-heap, [ 2684354556; 2684354955 ] -> memlabel-mem--symbol.1, [ 2684354956; 4294967291 ] -> memlabel-mem-may-straddle-symbol.2-heap, [ 4294967292; 4294967295 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 492961346 { 0x1d61fe42 +1.76557183e187 } : COUNT
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967294 ] -> 0, [ 4294967295; 4294967295 ] -> 128, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 492961346 { 0x1d61fe42 +1.76557183e187 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.memlabel-mem--symbol.1_begin
1 : 2684354556 { 0x9ffffffc -1610612740 -1.99999952e192 } : BV:32
=input.memlabel-mem--symbol.1_end
1 : 2684354955 { 0xa000018b -1610612341 -1.4708e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-8.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
507686758
=counter_example_end
=global nodece 4 num_edges_traversed 1
=global nodece 4 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 5
=global nodece 5 nodece z3v487.ce407.num_edges_traversed0
=global nodece 5 nodece_path
=global nodece 5 nodece_path.graph_edge_composition
(epsilon)
=global nodece 5 nodece_cached_counterexample
=counter_example_begin z3v487.ce407 93a7cf401e2bc7517e435e17a1d163
=symbol.1
1 : 2147483264 { 0x7ffffe80 +1.99995422e128 } : BV:32
=dst_symbol_addr.1
1 : 2147483264 { 0x7ffffe80 +1.99995422e128 } : BV:32
=input.spec-%var-n-1
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-m-0.L3%6%bbentry
1 : Lambda431 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda432 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-8.L3%6%bbentry
1 : Lambda435 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda436 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 27 ] -> memlabel-mem-may-straddle-symbol.2-heap, [ 28; 31 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 32; 2147483263 ] -> memlabel-mem-may-straddle-symbol.2-heap, [ 2147483264; 2147483663 ] -> memlabel-mem--symbol.1, [ 2147483664; 4294967295 ] -> memlabel-mem-may-straddle-symbol.2-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 28 { 0x1c +1.333e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-m-0.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.memlabel-mem--symbol.1_begin
1 : 2147483264 { 0x7ffffe80 +1.99995422e128 } : BV:32
=input.memlabel-mem--symbol.1_end
1 : 2147483663 { 0x8000000f -2147483633 -1.178e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 28 { 0x1c +1.333e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 31 { 0x1f +1.369e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-8.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
876250030
=counter_example_end
=global nodece 5 num_edges_traversed 0
=global nodece 5 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 6
=global nodece 6 nodece z3.ce408.num_edges_traversed0
=global nodece 6 nodece_path
=global nodece 6 nodece_path.graph_edge_composition
(epsilon)
=global nodece 6 nodece_cached_counterexample
=counter_example_begin z3.ce408 778efe63e031b528a10b5403098c1bf
=symbol.1
1 : 889192464 { 0x35000010 +1.190e235 } : BV:32
=dst_symbol_addr.1
1 : 889192464 { 0x35000010 +1.190e235 } : BV:32
=input.spec-%var-n-1
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-m-0.L3%6%bbentry
1 : Lambda443 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda444 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-8.L3%6%bbentry
1 : Lambda447 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda448 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 838876971 ] -> memlabel-mem-may-straddle-symbol.2-heap, [ 838876972; 838876975 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 838876976; 889192463 ] -> memlabel-mem-may-straddle-symbol.2-heap, [ 889192464; 889192863 ] -> memlabel-mem--symbol.1, [ 889192864; 4294967295 ] -> memlabel-mem-may-straddle-symbol.2-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 838876972 { 0x32003f2c +1.192785e229 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-m-0.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.memlabel-mem--symbol.1_begin
1 : 889192464 { 0x35000010 +1.190e235 } : BV:32
=input.memlabel-mem--symbol.1_end
1 : 889192863 { 0x3500019f +1.4947e235 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 838876972 { 0x32003f2c +1.192785e229 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 838876975 { 0x32003f2f +1.192821e229 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-8.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
3997029992
=counter_example_end
=global nodece 6 num_edges_traversed 0
=global nodece 6 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 7
=global nodece 7 nodece z3.ce458.num_edges_traversed2
=global nodece 7 nodece_path
=global nodece 7 nodece_path.graph_edge_composition
(epsilon)
=global nodece 7 nodece_cached_counterexample
=counter_example_begin z3.ce458 8dbe3cf0ed7ef590be23ac74797d71d
=symbol.1
1 : 2786934772 { 0xa61d3ff4 -1508032524 -1.22851419e205 } : BV:32
=dst_symbol_addr.1
1 : 2786934772 { 0xa61d3ff4 -1508032524 -1.22851419e205 } : BV:32
=input.spec-%var-n-1
1 : 16843009 { 0x1010101 +1.784313e131 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-m-0.L3%6%bbentry
1 : Lambda483 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : lambda(1, 3) : FUNCTION[BV:32 -> BOOL]
5 : Lambda484 : BV:32
6 : eq(5, 2) : BOOL
7 : ite(6, 2, 2) : BV:32
8 : lambda(5, 7) : FUNCTION[BV:32 -> BV:32]
9 : map(4, 8) : MAP[BV:32 -> BV:32]
10 : sym_const(9) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-8.L3%6%bbentry
1 : Lambda18 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda19 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 1, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%n
1 : 16843009 { 0x1010101 +1.784313e131 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 2147483643 ] -> memlabel-mem-may-straddle-symbol.2-heap, [ 2147483644; 2147483647 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2147483648; 2786934771 ] -> memlabel-mem-may-straddle-symbol.2-heap, [ 2786934772; 2786935171 ] -> memlabel-mem--symbol.1, [ 2786935172; 4294967295 ] -> memlabel-mem-may-straddle-symbol.2-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 2786934771 ] -> 1, [ 2786934772; 2786934772 ] -> 0, [ 2786934773; 2786934773 ] -> 0, [ 2786934774; 2786934774 ] -> 0, [ 2786934775; 2786934775 ] -> 0, [ 2786934776; 4294967295 ] -> 1, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 16843009 { 0x1010101 +1.784313e131 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 632200485 { 0x25ae9d25 +1.36417067e204 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.memlabel-mem--symbol.1_begin
1 : 2786934772 { 0xa61d3ff4 -1508032524 -1.22851419e205 } : BV:32
=input.memlabel-mem--symbol.1_end
1 : 2786935171 { 0xa61d4183 -1508032125 -1.22856175e205 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-8.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
4045775723
=counter_example_end
=global nodece 7 num_edges_traversed 2
=global nodece 7 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 8
=global nodece 8 nodece z3.ce475.num_edges_traversed3
=global nodece 8 nodece_path
=global nodece 8 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 8 nodece_cached_counterexample
=counter_example_begin z3.ce475 81db7cffbe219d535a188ebf9b432
=symbol.1
1 : 2786934772 { 0xa61d3ff4 -1508032524 -1.22851419e205 } : BV:32
=dst_symbol_addr.1
1 : 2786934772 { 0xa61d3ff4 -1508032524 -1.22851419e205 } : BV:32
=input.spec-%var-n-1
1 : 16843009 { 0x1010101 +1.784313e131 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%var-m-0.L3%6%bbentry
1 : Lambda491 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : eq(1, 4) : BOOL
6 : or(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda492 : BV:32
9 : eq(8, 4) : BOOL
10 : eq(8, 2) : BOOL
11 : ite(10, 2, 2) : BV:32
12 : ite(9, 4, 11) : BV:32
13 : lambda(8, 12) : FUNCTION[BV:32 -> BV:32]
14 : map(7, 13) : MAP[BV:32 -> BV:32]
15 : sym_const(14) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-8.L3%6%bbentry
1 : Lambda18 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda19 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 1, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%n
1 : 16843009 { 0x1010101 +1.784313e131 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 2147483643 ] -> memlabel-mem-may-straddle-symbol.2-heap, [ 2147483644; 2147483647 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2147483648; 2786934771 ] -> memlabel-mem-may-straddle-symbol.2-heap, [ 2786934772; 2786935171 ] -> memlabel-mem--symbol.1, [ 2786935172; 4294967295 ] -> memlabel-mem-may-straddle-symbol.2-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 2786934771 ] -> 1, [ 2786934772; 2786934772 ] -> 0, [ 2786934773; 2786934773 ] -> 0, [ 2786934774; 2786934774 ] -> 0, [ 2786934775; 2786934775 ] -> 0, [ 2786934776; 2786934776 ] -> 1, [ 2786934777; 2786934777 ] -> 0, [ 2786934778; 2786934778 ] -> 0, [ 2786934779; 2786934779 ] -> 0, [ 2786934780; 4294967295 ] -> 1, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 16843009 { 0x1010101 +1.784313e131 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 632200485 { 0x25ae9d25 +1.36417067e204 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.memlabel-mem--symbol.1_begin
1 : 2786934772 { 0xa61d3ff4 -1508032524 -1.22851419e205 } : BV:32
=input.memlabel-mem--symbol.1_end
1 : 2786935171 { 0xa61d4183 -1508032125 -1.22856175e205 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-8.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
4045775723
=counter_example_end
=global nodece 8 num_edges_traversed 3
=global nodece 8 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 9
=global nodece 9 nodece z3.ce495.num_edges_traversed4
=global nodece 9 nodece_path
=global nodece 9 nodece_path.graph_edge_composition
(epsilon)
=global nodece 9 nodece_cached_counterexample
=counter_example_begin z3.ce495 86eb59e7ab8f482710a8586e7eb3553
=symbol.1
1 : 2786934772 { 0xa61d3ff4 -1508032524 -1.22851419e205 } : BV:32
=dst_symbol_addr.1
1 : 2786934772 { 0xa61d3ff4 -1508032524 -1.22851419e205 } : BV:32
=input.spec-%var-n-1
1 : 16843009 { 0x1010101 +1.784313e131 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-m-0.L3%6%bbentry
1 : Lambda499 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : eq(1, 4) : BOOL
6 : or(3, 5) : BOOL
7 : 2 { 0x2 +1.23e129 } : BV:32
8 : eq(1, 7) : BOOL
9 : or(6, 8) : BOOL
10 : lambda(1, 9) : FUNCTION[BV:32 -> BOOL]
11 : Lambda500 : BV:32
12 : eq(11, 7) : BOOL
13 : eq(11, 4) : BOOL
14 : eq(11, 2) : BOOL
15 : ite(14, 2, 2) : BV:32
16 : ite(13, 4, 15) : BV:32
17 : ite(12, 7, 16) : BV:32
18 : lambda(11, 17) : FUNCTION[BV:32 -> BV:32]
19 : map(10, 18) : MAP[BV:32 -> BV:32]
20 : sym_const(19) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-8.L3%6%bbentry
1 : Lambda18 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda19 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 1, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%n
1 : 16843009 { 0x1010101 +1.784313e131 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 2147483643 ] -> memlabel-mem-may-straddle-symbol.2-heap, [ 2147483644; 2147483647 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2147483648; 2786934771 ] -> memlabel-mem-may-straddle-symbol.2-heap, [ 2786934772; 2786935171 ] -> memlabel-mem--symbol.1, [ 2786935172; 4294967295 ] -> memlabel-mem-may-straddle-symbol.2-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 2786934771 ] -> 1, [ 2786934772; 2786934772 ] -> 0, [ 2786934773; 2786934773 ] -> 0, [ 2786934774; 2786934774 ] -> 0, [ 2786934775; 2786934775 ] -> 0, [ 2786934776; 2786934776 ] -> 1, [ 2786934777; 2786934777 ] -> 0, [ 2786934778; 2786934778 ] -> 0, [ 2786934779; 2786934779 ] -> 0, [ 2786934780; 2786934780 ] -> 2, [ 2786934781; 2786934781 ] -> 0, [ 2786934782; 2786934782 ] -> 0, [ 2786934783; 2786934783 ] -> 0, [ 2786934784; 4294967295 ] -> 1, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 16843009 { 0x1010101 +1.784313e131 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 632200485 { 0x25ae9d25 +1.36417067e204 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.memlabel-mem--symbol.1_begin
1 : 2786934772 { 0xa61d3ff4 -1508032524 -1.22851419e205 } : BV:32
=input.memlabel-mem--symbol.1_end
1 : 2786935171 { 0xa61d4183 -1508032125 -1.22856175e205 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-8.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
4045775723
=counter_example_end
=global nodece 9 num_edges_traversed 4
=global nodece 9 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 10
=global nodece 10 nodece z3.ce448.num_edges_traversed2
=global nodece 10 nodece_path
=global nodece 10 nodece_path.graph_edge_composition
(epsilon)
=global nodece 10 nodece_cached_counterexample
=counter_example_begin z3.ce448 923afbd4c348249788a696156756b13
=symbol.1
1 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
=dst_symbol_addr.1
1 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
=input.spec-%var-n-1
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-m-0.L3%6%bbentry
1 : Lambda475 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : lambda(1, 3) : FUNCTION[BV:32 -> BOOL]
5 : Lambda476 : BV:32
6 : eq(5, 2) : BOOL
7 : ite(6, 2, 2) : BV:32
8 : lambda(5, 7) : FUNCTION[BV:32 -> BV:32]
9 : map(4, 8) : MAP[BV:32 -> BV:32]
10 : sym_const(9) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-8.L3%6%bbentry
1 : Lambda18 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda19 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 255, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 2147483643 ] -> memlabel-mem-may-straddle-symbol.2-heap, [ 2147483644; 2147484043 ] -> memlabel-mem--symbol.1, [ 2147484044; 4294965243 ] -> memlabel-mem-may-straddle-symbol.2-heap, [ 4294965244; 4294965247 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4294965248; 4294967295 ] -> memlabel-mem-may-straddle-symbol.2-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4294965244 { 0xfffff7fc -2052 -1.99975538e128 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 2147483643 ] -> 255, [ 2147483644; 2147483644 ] -> 0, [ 2147483645; 2147483645 ] -> 0, [ 2147483646; 2147483646 ] -> 0, [ 2147483647; 2147483647 ] -> 0, [ 2147483648; 4294967295 ] -> 255, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1823059443 { 0x6ca9adf3 +1.32562100e90 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.memlabel-mem--symbol.1_begin
1 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
=input.memlabel-mem--symbol.1_end
1 : 2147484043 { 0x8000018b -2147483253 -1.4708e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4294965244 { 0xfffff7fc -2052 -1.99975538e128 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-8.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
502475613
=counter_example_end
=global nodece 10 num_edges_traversed 2
=global nodece 10 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 11
=global nodece 11 nodece z3.ce438.num_edges_traversed2
=global nodece 11 nodece_path
=global nodece 11 nodece_path.graph_edge_composition
(epsilon)
=global nodece 11 nodece_cached_counterexample
=counter_example_begin z3.ce438 df80f18859229f7d8d70aeb41a1ada4
=symbol.1
1 : 2684354556 { 0x9ffffffc -1610612740 -1.99999952e192 } : BV:32
=dst_symbol_addr.1
1 : 2684354556 { 0x9ffffffc -1610612740 -1.99999952e192 } : BV:32
=input.spec-%var-n-1
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-m-0.L3%6%bbentry
1 : Lambda467 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : lambda(1, 3) : FUNCTION[BV:32 -> BOOL]
5 : Lambda468 : BV:32
6 : eq(5, 2) : BOOL
7 : ite(6, 2, 2) : BV:32
8 : lambda(5, 7) : FUNCTION[BV:32 -> BV:32]
9 : map(4, 8) : MAP[BV:32 -> BV:32]
10 : sym_const(9) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-8.L3%6%bbentry
1 : Lambda18 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda19 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967294 ] -> 0, [ 4294967295; 4294967295 ] -> 128, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 2684354555 ] -> memlabel-mem-may-straddle-symbol.2-heap, [ 2684354556; 2684354955 ] -> memlabel-mem--symbol.1, [ 2684354956; 4294967291 ] -> memlabel-mem-may-straddle-symbol.2-heap, [ 4294967292; 4294967295 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967294 ] -> 0, [ 4294967295; 4294967295 ] -> 128, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 492961346 { 0x1d61fe42 +1.76557183e187 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.memlabel-mem--symbol.1_begin
1 : 2684354556 { 0x9ffffffc -1610612740 -1.99999952e192 } : BV:32
=input.memlabel-mem--symbol.1_end
1 : 2684354955 { 0xa000018b -1610612341 -1.4708e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-8.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
507686758
=counter_example_end
=global nodece 11 num_edges_traversed 2
=global nodece 11 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 12
=global nodece 12 nodece z3v487.ce428.num_edges_traversed1
=global nodece 12 nodece_path
=global nodece 12 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 12 nodece_cached_counterexample
=counter_example_begin z3v487.ce428 7e34f0af28eb369669c8664ee88fd5b
=symbol.1
1 : 2147483264 { 0x7ffffe80 +1.99995422e128 } : BV:32
=dst_symbol_addr.1
1 : 2147483264 { 0x7ffffe80 +1.99995422e128 } : BV:32
=input.spec-%var-n-1
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-m-0.L3%6%bbentry
1 : Lambda459 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : eq(1, 2) : BOOL
10 : or(8, 9) : BOOL
11 : lambda(1, 10) : FUNCTION[BV:32 -> BOOL]
12 : Lambda460 : BV:32
13 : eq(12, 2) : BOOL
14 : bvule(2, 12) : BOOL
15 : bvule(12, 4) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 2, 2) : BV:32
18 : ite(13, 2, 17) : BV:32
19 : lambda(12, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(11, 19) : MAP[BV:32 -> BV:32]
21 : sym_const(20) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-8.L3%6%bbentry
1 : Lambda435 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda436 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 673806246 { 0x282977a6 +1.32396388e209 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 27 ] -> memlabel-mem-may-straddle-symbol.2-heap, [ 28; 31 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 32; 2147483263 ] -> memlabel-mem-may-straddle-symbol.2-heap, [ 2147483264; 2147483663 ] -> memlabel-mem--symbol.1, [ 2147483664; 4294967295 ] -> memlabel-mem-may-straddle-symbol.2-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 28 { 0x1c +1.333e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-m-0.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 2044508430 { 0x79dcb90e +1.72439742e116 } : BV:32
=input.memlabel-mem--symbol.1_begin
1 : 2147483264 { 0x7ffffe80 +1.99995422e128 } : BV:32
=input.memlabel-mem--symbol.1_end
1 : 2147483663 { 0x8000000f -2147483633 -1.178e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 28 { 0x1c +1.333e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 31 { 0x1f +1.369e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-8.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
4247613750
=counter_example_end
=global nodece 12 num_edges_traversed 1
=global nodece 12 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 13
=global nodece 13 nodece z3v487.ce564.num_edges_traversed2
=global nodece 13 nodece_path
=global nodece 13 nodece_path.graph_edge_composition
(epsilon)
=global nodece 13 nodece_cached_counterexample
=counter_example_begin z3v487.ce564 e085394de94039e735aae723e38f6792
=symbol.1
1 : 2147483264 { 0x7ffffe80 +1.99995422e128 } : BV:32
=dst_symbol_addr.1
1 : 2147483264 { 0x7ffffe80 +1.99995422e128 } : BV:32
=input.spec-%var-n-1
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%var-m-0.L3%6%bbentry
1 : Lambda523 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : eq(1, 2) : BOOL
10 : or(8, 9) : BOOL
11 : 1 { 0x1 +1.11e129 } : BV:32
12 : eq(1, 11) : BOOL
13 : or(10, 12) : BOOL
14 : lambda(1, 13) : FUNCTION[BV:32 -> BOOL]
15 : Lambda524 : BV:32
16 : eq(15, 11) : BOOL
17 : eq(15, 2) : BOOL
18 : bvule(2, 15) : BOOL
19 : bvule(15, 4) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : ite(17, 2, 21) : BV:32
23 : ite(16, 11, 22) : BV:32
24 : lambda(15, 23) : FUNCTION[BV:32 -> BV:32]
25 : map(14, 24) : MAP[BV:32 -> BV:32]
26 : sym_const(25) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-8.L3%6%bbentry
1 : Lambda435 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda436 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 673806247 { 0x282977a7 +1.32396399e209 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 27 ] -> memlabel-mem-may-straddle-symbol.2-heap, [ 28; 31 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 32; 2147483263 ] -> memlabel-mem-may-straddle-symbol.2-heap, [ 2147483264; 2147483663 ] -> memlabel-mem--symbol.1, [ 2147483664; 4294967295 ] -> memlabel-mem-may-straddle-symbol.2-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 28 { 0x1c +1.333e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 2147483267 ] -> 0, [ 2147483268; 2147483268 ] -> 1, [ 2147483269; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-m-0.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 2044508431 { 0x79dcb90f +1.72439754e116 } : BV:32
=input.memlabel-mem--symbol.1_begin
1 : 2147483264 { 0x7ffffe80 +1.99995422e128 } : BV:32
=input.memlabel-mem--symbol.1_end
1 : 2147483663 { 0x8000000f -2147483633 -1.178e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 28 { 0x1c +1.333e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 31 { 0x1f +1.369e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-8.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
4247613750
=counter_example_end
=global nodece 13 num_edges_traversed 2
=global nodece 13 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 14
=global nodece 14 nodece z3.ce578.num_edges_traversed1
=global nodece 14 nodece_path
=global nodece 14 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 14 nodece_cached_counterexample
=counter_example_begin z3.ce578 df61116eac71bb7daa556d95e245c9
=symbol.1
1 : 1073806328 { 0x4000fbf8 +1.768947e1 } : BV:32
=dst_symbol_addr.1
1 : 1073806328 { 0x4000fbf8 +1.768947e1 } : BV:32
=input.spec-%var-n-1
1 : 2097154 { 0x200002 +1.25000023e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-m-0.L3%6%bbentry
1 : Lambda578 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2 { 0x2 +1.23e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : eq(1, 8) : BOOL
17 : or(15, 16) : BOOL
18 : lambda(1, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda579 : BV:32
20 : eq(19, 8) : BOOL
21 : bvule(2, 19) : BOOL
22 : bvule(19, 10) : BOOL
23 : and(21, 22) : BOOL
24 : ite(23, 2, 2) : BV:32
25 : ite(20, 8, 24) : BV:32
26 : lambda(19, 25) : FUNCTION[BV:32 -> BV:32]
27 : map(18, 26) : MAP[BV:32 -> BV:32]
28 : sym_const(27) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : Lambda582 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2 { 0x2 +1.23e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : eq(1, 8) : BOOL
17 : or(15, 16) : BOOL
18 : lambda(1, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda583 : BV:32
20 : eq(19, 8) : BOOL
21 : bvule(2, 19) : BOOL
22 : bvule(19, 10) : BOOL
23 : and(21, 22) : BOOL
24 : ite(23, 2, 2) : BV:32
25 : ite(20, 8, 24) : BV:32
26 : lambda(19, 25) : FUNCTION[BV:32 -> BV:32]
27 : map(18, 26) : MAP[BV:32 -> BV:32]
28 : sym_const(27) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-8.L3%6%bbentry
1 : Lambda563 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda564 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1208682876 { 0x480b097c +1.8622694e17 } : BV:32
=input.spec-%tmpvar-0.L3%7%d
1 : 0 { 0x0 } : BOOL
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 2097154 { 0x200002 +1.25000023e129 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 1073806327 ] -> memlabel-mem-may-straddle-symbol.2-heap, [ 1073806328; 1073806727 ] -> memlabel-mem--symbol.1, [ 1073806728; 2386558231 ] -> memlabel-mem-may-straddle-symbol.2-heap, [ 2386558232; 2386558235 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2386558236; 4294967295 ] -> memlabel-mem-may-straddle-symbol.2-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2386558232 { 0x8e3ffd18 -1908409064 -1.49991130e157 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 1073806339 ] -> 0, [ 1073806340; 1073806340 ] -> 3, [ 1073806341; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 2097154 { 0x200002 +1.25000023e129 } : BV:32
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-2.L3%6%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-m-0.L3%6%bbentry.0.1
1 : ([ 0; 2 ] -> true, [ 3; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 2078027743 { 0x7bdc2fdf +1.72021090e120 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%2765c615cd3308ea01ce016481e.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%2765c615cd3308ea01ce016481e.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%2765c615cd3308ea01ce016481e.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : 12 { 0xc +1.143e129 } : BV:32
=input.dst.llvm-%2765c615cd3308ea01ce016481e.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 12 { 0xc +1.143e129 } : BV:32
=input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry
1 : 1073806340 { 0x4000fc04 +1.769090e1 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%2765c615cd3308ea01ce016481e.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : 1073806340 { 0x4000fc04 +1.769090e1 } : BV:32
=input.dst.llvm-%inc.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.memlabel-mem--symbol.1_begin
1 : 1073806328 { 0x4000fbf8 +1.768947e1 } : BV:32
=input.memlabel-mem--symbol.1_end
1 : 1073806727 { 0x4000fd87 +1.773704e1 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2386558232 { 0x8e3ffd18 -1908409064 -1.49991130e157 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2386558235 { 0x8e3ffd1b -1908409061 -1.49991166e157 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-8.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
1632881948
=counter_example_end
=global nodece 14 num_edges_traversed 1
=global nodece 14 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 15
=global nodece 15 nodece z3.ce608.num_edges_traversed2
=global nodece 15 nodece_path
=global nodece 15 nodece_path.graph_edge_composition
(epsilon)
=global nodece 15 nodece_cached_counterexample
=counter_example_begin z3.ce608 528d7946bbe67523ee74caca9cdc
=symbol.1
1 : 1073806328 { 0x4000fbf8 +1.768947e1 } : BV:32
=dst_symbol_addr.1
1 : 1073806328 { 0x4000fbf8 +1.768947e1 } : BV:32
=input.spec-%var-n-1
1 : 2097154 { 0x200002 +1.25000023e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%var-m-0.L3%6%bbentry
1 : Lambda586 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2 { 0x2 +1.23e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : eq(1, 8) : BOOL
17 : or(15, 16) : BOOL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : eq(1, 18) : BOOL
20 : or(17, 19) : BOOL
21 : lambda(1, 20) : FUNCTION[BV:32 -> BOOL]
22 : Lambda587 : BV:32
23 : eq(22, 18) : BOOL
24 : eq(22, 8) : BOOL
25 : bvule(2, 22) : BOOL
26 : bvule(22, 10) : BOOL
27 : and(25, 26) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(24, 8, 28) : BV:32
30 : ite(23, 18, 29) : BV:32
31 : lambda(22, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(21, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-8.L3%6%bbentry
1 : Lambda563 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda564 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1208682877 { 0x480b097d +1.8622705e17 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 2097154 { 0x200002 +1.25000023e129 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 1073806327 ] -> memlabel-mem-may-straddle-symbol.2-heap, [ 1073806328; 1073806727 ] -> memlabel-mem--symbol.1, [ 1073806728; 2386558231 ] -> memlabel-mem-may-straddle-symbol.2-heap, [ 2386558232; 2386558235 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2386558236; 4294967295 ] -> memlabel-mem-may-straddle-symbol.2-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2386558232 { 0x8e3ffd18 -1908409064 -1.49991130e157 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 1073806339 ] -> 0, [ 1073806340; 1073806340 ] -> 3, [ 1073806341; 1073806343 ] -> 0, [ 1073806344; 1073806344 ] -> 4, [ 1073806345; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 2097154 { 0x200002 +1.25000023e129 } : BV:32
=input.spec-%var-m-0.L3%6%bbentry.0.1
1 : ([ 0; 2 ] -> true, [ 3; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 2078027744 { 0x7bdc2fe0 +1.72021102e120 } : BV:32
=input.memlabel-mem--symbol.1_begin
1 : 1073806328 { 0x4000fbf8 +1.768947e1 } : BV:32
=input.memlabel-mem--symbol.1_end
1 : 1073806727 { 0x4000fd87 +1.773704e1 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2386558232 { 0x8e3ffd18 -1908409064 -1.49991130e157 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2386558235 { 0x8e3ffd1b -1908409061 -1.49991166e157 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-8.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
1632881948
=counter_example_end
=global nodece 15 num_edges_traversed 2
=global nodece 15 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 16
=global nodece 16 nodece z3.ce631.num_edges_traversed1
=global nodece 16 nodece_path
=global nodece 16 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 16 nodece_cached_counterexample
=counter_example_begin z3.ce631 9ab4ba0c592036b92643fada80d6b8
=symbol.1
1 : 487587860 { 0x1d100014 +1.12500238e187 } : BV:32
=dst_symbol_addr.1
1 : 487587860 { 0x1d100014 +1.12500238e187 } : BV:32
=input.spec-%var-n-1
1 : 524289 { 0x80001 +1.6250011e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%var-m-0.L3%6%bbentry
1 : Lambda641 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : eq(1, 8) : BOOL
17 : or(15, 16) : BOOL
18 : lambda(1, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda642 : BV:32
20 : eq(19, 8) : BOOL
21 : bvule(2, 19) : BOOL
22 : bvule(19, 10) : BOOL
23 : and(21, 22) : BOOL
24 : ite(23, 2, 2) : BV:32
25 : ite(20, 8, 24) : BV:32
26 : lambda(19, 25) : FUNCTION[BV:32 -> BV:32]
27 : map(18, 26) : MAP[BV:32 -> BV:32]
28 : sym_const(27) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : Lambda645 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : eq(1, 8) : BOOL
17 : or(15, 16) : BOOL
18 : lambda(1, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda646 : BV:32
20 : eq(19, 8) : BOOL
21 : bvule(2, 19) : BOOL
22 : bvule(19, 10) : BOOL
23 : and(21, 22) : BOOL
24 : ite(23, 2, 2) : BV:32
25 : ite(20, 8, 24) : BV:32
26 : lambda(19, 25) : FUNCTION[BV:32 -> BV:32]
27 : map(18, 26) : MAP[BV:32 -> BV:32]
28 : sym_const(27) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-8.L3%6%bbentry
1 : Lambda626 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda627 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1561665095 { 0x5d151e47 +1.16498649e59 } : BV:32
=input.spec-%tmpvar-0.L3%7%d
1 : 0 { 0x0 } : BOOL
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 524289 { 0x80001 +1.6250011e129 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 487587859 ] -> memlabel-mem-may-straddle-symbol.2-heap, [ 487587860; 487588259 ] -> memlabel-mem--symbol.1, [ 487588260; 2739929091 ] -> memlabel-mem-may-straddle-symbol.2-heap, [ 2739929092; 2739929095 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2739929096; 4294967295 ] -> memlabel-mem-may-straddle-symbol.2-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2739929092 { 0xa3500004 -1555038204 -1.62500047e199 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 487587875 ] -> 0, [ 487587876; 487587876 ] -> 4, [ 487587877; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 524289 { 0x80001 +1.6250011e129 } : BV:32
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-2.L3%6%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%var-m-0.L3%6%bbentry.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 785122348 { 0x2ecc042c +1.59387731e222 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%2765c615cd3308ea01ce016481e.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%2765c615cd3308ea01ce016481e.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%2765c615cd3308ea01ce016481e.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%2765c615cd3308ea01ce016481e.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry
1 : 487587876 { 0x1d100024 +1.12500429e187 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%2765c615cd3308ea01ce016481e.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : 487587876 { 0x1d100024 +1.12500429e187 } : BV:32
=input.dst.llvm-%inc.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.memlabel-mem--symbol.1_begin
1 : 487587860 { 0x1d100014 +1.12500238e187 } : BV:32
=input.memlabel-mem--symbol.1_end
1 : 487588259 { 0x1d1001a3 +1.12504994e187 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2739929092 { 0xa3500004 -1555038204 -1.62500047e199 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2739929095 { 0xa3500007 -1555038201 -1.62500083e199 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-8.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
2292250482
=counter_example_end
=global nodece 16 num_edges_traversed 1
=global nodece 16 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 17
=global nodece 17 nodece z3.ce661.num_edges_traversed2
=global nodece 17 nodece_path
=global nodece 17 nodece_path.graph_edge_composition
(epsilon)
=global nodece 17 nodece_cached_counterexample
=counter_example_begin z3.ce661 194ce1c8b7b94716b22838d0ca85b8c
=symbol.1
1 : 487587860 { 0x1d100014 +1.12500238e187 } : BV:32
=dst_symbol_addr.1
1 : 487587860 { 0x1d100014 +1.12500238e187 } : BV:32
=input.spec-%var-n-1
1 : 524289 { 0x80001 +1.6250011e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 6 { 0x6 +1.71e129 } : BV:32
=input.spec-%var-m-0.L3%6%bbentry
1 : Lambda649 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : eq(1, 8) : BOOL
17 : or(15, 16) : BOOL
18 : 5 { 0x5 +1.59e129 } : BV:32
19 : eq(1, 18) : BOOL
20 : or(17, 19) : BOOL
21 : lambda(1, 20) : FUNCTION[BV:32 -> BOOL]
22 : Lambda650 : BV:32
23 : eq(22, 18) : BOOL
24 : eq(22, 8) : BOOL
25 : bvule(2, 22) : BOOL
26 : bvule(22, 10) : BOOL
27 : and(25, 26) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(24, 8, 28) : BV:32
30 : ite(23, 18, 29) : BV:32
31 : lambda(22, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(21, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-8.L3%6%bbentry
1 : Lambda626 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda627 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1561665096 { 0x5d151e48 +1.16498661e59 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 524289 { 0x80001 +1.6250011e129 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 487587859 ] -> memlabel-mem-may-straddle-symbol.2-heap, [ 487587860; 487588259 ] -> memlabel-mem--symbol.1, [ 487588260; 2739929091 ] -> memlabel-mem-may-straddle-symbol.2-heap, [ 2739929092; 2739929095 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2739929096; 4294967295 ] -> memlabel-mem-may-straddle-symbol.2-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2739929092 { 0xa3500004 -1555038204 -1.62500047e199 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 487587875 ] -> 0, [ 487587876; 487587876 ] -> 4, [ 487587877; 487587879 ] -> 0, [ 487587880; 487587880 ] -> 5, [ 487587881; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 524289 { 0x80001 +1.6250011e129 } : BV:32
=input.spec-%var-m-0.L3%6%bbentry.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 6 { 0x6 +1.71e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 785122349 { 0x2ecc042d +1.59387743e222 } : BV:32
=input.memlabel-mem--symbol.1_begin
1 : 487587860 { 0x1d100014 +1.12500238e187 } : BV:32
=input.memlabel-mem--symbol.1_end
1 : 487588259 { 0x1d1001a3 +1.12504994e187 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2739929092 { 0xa3500004 -1555038204 -1.62500047e199 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2739929095 { 0xa3500007 -1555038201 -1.62500083e199 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-8.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
2292250482
=counter_example_end
=global nodece 17 num_edges_traversed 2
=global nodece 17 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 18
=global nodece 18 nodece z3.ce684.num_edges_traversed0
=global nodece 18 nodece_path
=global nodece 18 nodece_path.graph_edge_composition
(epsilon)
=global nodece 18 nodece_cached_counterexample
=counter_example_begin z3.ce684 369faeaac38f50cf44536bf4b649d8
=symbol.1
1 : 1646784516 { 0x6227f004 +1.31201219e69 } : BV:32
=dst_symbol_addr.1
1 : 1646784516 { 0x6227f004 +1.31201219e69 } : BV:32
=input.spec-%var-n-1
1 : 328 { 0x148 +1.3910e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 328 { 0x148 +1.3910e129 } : BV:32
=input.spec-%var-m-0.L3%6%bbentry
1 : Lambda793 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 327 { 0x147 +1.3898e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 328 { 0x148 +1.3910e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda794 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-8.L3%6%bbentry
1 : Lambda797 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda798 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 328 { 0x148 +1.3910e129 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 1646784515 ] -> memlabel-mem-may-straddle-symbol.2-heap, [ 1646784516; 1646784915 ] -> memlabel-mem--symbol.1, [ 1646784916; 1789858815 ] -> memlabel-mem-may-straddle-symbol.2-heap, [ 1789858816; 1789858819 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1789858820; 4294967295 ] -> memlabel-mem-may-straddle-symbol.2-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1789858816 { 0x6aaf1400 +1.36779785e86 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 328 { 0x148 +1.3910e129 } : BV:32
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-m-0.L3%6%bbentry.0.1
1 : ([ 0; 327 ] -> true, [ 328; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 328 { 0x148 +1.3910e129 } : BV:32
=input.memlabel-mem--symbol.1_begin
1 : 1646784516 { 0x6227f004 +1.31201219e69 } : BV:32
=input.memlabel-mem--symbol.1_end
1 : 1646784915 { 0x6227f193 +1.31205976e69 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1789858816 { 0x6aaf1400 +1.36779785e86 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1789858819 { 0x6aaf1403 +1.36779820e86 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-8.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
1432546412
=counter_example_end
=global nodece 18 num_edges_traversed 0
=global nodece 18 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 19
=global nodece 19 nodece z3v487.ce685.num_edges_traversed0
=global nodece 19 nodece_path
=global nodece 19 nodece_path.graph_edge_composition
(epsilon)
=global nodece 19 nodece_cached_counterexample
=counter_example_begin z3v487.ce685 8c59b1facc66c1822252b258912d42
=symbol.1
1 : 1073741428 { 0x3ffffe74 +1.99995279e0 } : BV:32
=dst_symbol_addr.1
1 : 1073741428 { 0x3ffffe74 +1.99995279e0 } : BV:32
=input.spec-%var-n-1
1 : 14 { 0xe +1.166e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 14 { 0xe +1.166e129 } : BV:32
=input.spec-%var-m-0.L3%6%bbentry
1 : Lambda805 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 13 { 0xd +1.154e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 14 { 0xe +1.166e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda806 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-8.L3%6%bbentry
1 : Lambda809 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda810 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 14 { 0xe +1.166e129 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.2-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 8; 1073741427 ] -> memlabel-mem-may-straddle-symbol.2-heap, [ 1073741428; 1073741827 ] -> memlabel-mem--symbol.1, [ 1073741828; 4294967295 ] -> memlabel-mem-may-straddle-symbol.2-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 14 { 0xe +1.166e129 } : BV:32
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-m-0.L3%6%bbentry.0.1
1 : ([ 0; 13 ] -> true, [ 14; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 14 { 0xe +1.166e129 } : BV:32
=input.memlabel-mem--symbol.1_begin
1 : 1073741428 { 0x3ffffe74 +1.99995279e0 } : BV:32
=input.memlabel-mem--symbol.1_end
1 : 1073741827 { 0x40000003 +1.35e1 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-8.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
1778594238
=counter_example_end
=global nodece 19 num_edges_traversed 0
=global nodece 19 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 20
=global nodece 20 nodece z3v487.ce849.num_edges_traversed2
=global nodece 20 nodece_path
=global nodece 20 nodece_path.graph_edge_composition
(epsilon)
=global nodece 20 nodece_cached_counterexample
=counter_example_begin z3v487.ce849 3d6bbaf3a2d1b57ba9e6ef3589016c8
=symbol.1
1 : 2147483264 { 0x7ffffe80 +1.99995422e128 } : BV:32
=dst_symbol_addr.1
1 : 2147483264 { 0x7ffffe80 +1.99995422e128 } : BV:32
=retaddr_const
1 : 1728220986 { 0x67028f3a +1.1999592e79 } : BV:32
=input.spec-%var-n-1
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-6.E0%0%d
1 : Lambda18 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda19 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-5.E0%0%d
1 : Lambda18 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda19 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.spec-%var-m-0.L3%6%bbentry
1 : Lambda18 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda19 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.E0%0%d
1 : Lambda18 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda19 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-10.E0%0%d
1 : Lambda18 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda19 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-8.L3%6%bbentry
1 : Lambda18 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda19 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-0.L3%7%d
1 : 1 { 0x1 } : BOOL
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 65535 ] -> memlabel-mem-may-straddle-symbol.2-heap, [ 65536; 65539 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 65540; 2147483263 ] -> memlabel-mem-may-straddle-symbol.2-heap, [ 2147483264; 2147483663 ] -> memlabel-mem--symbol.1, [ 2147483664; 4294967295 ] -> memlabel-mem-may-straddle-symbol.2-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 65536 { 0x10000 +1.781250e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 1728220986 { 0x67028f3a +1.1999592e79 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%47516aa5a9eab7a5f0d0bce668115131.intermediate.gepoffset.1.offset.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%47516aa5a9eab7a5f0d0bce668115131.intermediate.gepoffset.2.offset.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%47516aa5a9eab7a5f0d0bce668115131.gepoffset.1.total_offset.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%47516aa5a9eab7a5f0d0bce668115131.gepoffset.2.total_offset.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 988310424 { 0x3ae86b98 +1.81578350e246 } : BV:32
=input.dst.llvm-%47516aa5a9eab7a5f0d0bce668115131.constexpr.E0%0%d
1 : 2147483264 { 0x7ffffe80 +1.99995422e128 } : BV:32
=input.dst.llvm-%ret-reg.E0%0%d
1 : 2147483264 { 0x7ffffe80 +1.99995422e128 } : BV:32
=input.dst.llvm-%47516aa5a9eab7a5f0d0bce668115131.gepoffset.3.total_offset.E0%0%d
1 : 2147483264 { 0x7ffffe80 +1.99995422e128 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1610438063 { 0x5ffd55af +1.97917735e64 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.memlabel-mem--symbol.1_begin
1 : 2147483264 { 0x7ffffe80 +1.99995422e128 } : BV:32
=input.memlabel-mem--symbol.1_end
1 : 2147483663 { 0x8000000f -2147483633 -1.178e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 65536 { 0x10000 +1.781250e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 65539 { 0x10003 +1.781285e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-8.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
4159958888
=counter_example_end
=global nodece 20 num_edges_traversed 2
=global nodece 20 nodece_visted_pcs: 
E0%0%d_E0%0%d
=graph_with_ce done
=point_set for reason inductive-invariants
=inductive-invariants point_set global exprs map
=inductive-invariants point_set point_expr 1
1 : input.memlabel-mem--symbol.1_begin : BV:32
2 : input.memlabel-mem--symbol.1_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 400 { 0x190 +1.4768e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : 4 { 0x4 +1.47e129 } : BV:32
15 : bvadd(14, 5) : BV:32
16 : bvadd(10, 15) : BV:32
17 : eq(11, 16) : BOOL
18 : and(13, 17) : BOOL
19 : bvuge(1, 10) : BOOL
20 : bvule(1, 11) : BOOL
21 : and(19, 20) : BOOL
22 : bvuge(2, 10) : BOOL
23 : bvule(2, 11) : BOOL
24 : and(22, 23) : BOOL
25 : not(24) : BOOL
26 : andnot1(21, 25) : BOOL
27 : bvuge(10, 1) : BOOL
28 : bvule(10, 2) : BOOL
29 : and(27, 28) : BOOL
30 : bvuge(11, 1) : BOOL
31 : bvule(11, 2) : BOOL
32 : and(30, 31) : BOOL
33 : not(32) : BOOL
34 : andnot1(29, 33) : BOOL
35 : and(26, 34) : BOOL
36 : and(18, 35) : BOOL
37 : symbol.1 : BV:32
38 : 3 { 0x3 +1.35e129 } : BV:32
39 : bvand(37, 38) : BV:32
40 : 0 { 0x0 +1.0e129 } : BV:32
41 : eq(39, 40) : BOOL
42 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
43 : bvand(42, 38) : BV:32
44 : eq(43, 40) : BOOL
45 : and(41, 44) : BOOL
46 : and(36, 45) : BOOL
47 : eq(37, 1) : BOOL
48 : eq(42, 10) : BOOL
49 : and(47, 48) : BOOL
50 : and(46, 49) : BOOL
51 : dst_symbol_addr.1 : BV:32
52 : eq(37, 51) : BOOL
53 : and(50, 52) : BOOL
54 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
55 : 1 { 0x1 +1.11e129 } : BV:32
56 : memlabel-mem-may-straddle-symbol.2-heap : MEMLABEL
57 : region_agrees_with_memlabel(54, 40, 55, 56) : BOOL
58 : and(53, 57) : BOOL
=inductive-invariants point_set point_expr 2
1 : input.spec-%var-n-1 : BV:32
=inductive-invariants point_set point_expr 3
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
=inductive-invariants point_set point_expr 4
1 : input.spec-%var-n-0.L3%6%bbentry : BV:32
=inductive-invariants point_set point_expr 5
1 : input.dst.llvm-%n : BV:32
=inductive-invariants point_set point_expr 6
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=inductive-invariants point_set point_expr 7
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 8
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 9
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 10
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 11
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 12
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 13
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 14
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 15
1 : input.spec-%var-m-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : symbol.1 : BV:32
14 : 4 { 0x4 +1.47e129 } : BV:32
15 : bvmul(9, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 16
1 : input.spec-%var-m-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : symbol.1 : BV:32
14 : 4 { 0x4 +1.47e129 } : BV:32
15 : bvmul(9, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 17
1 : input.spec-%tmpvar-10.E0%0%d : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : symbol.1 : BV:32
14 : 4 { 0x4 +1.47e129 } : BV:32
15 : bvmul(9, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 18
1 : spec-%tmpvar-8.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : SORT2EXPR.VAR : MAP[BV:32 -> BV:32]
3 : map_init(2) : MAP[BV:32 -> BV:32]
4 : eq(1, 3) : BOOL
=inductive-invariants point_set point_expr 19
1 : spec-%var-m-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : SORT2EXPR.VAR : MAP[BV:32 -> BV:32]
3 : map_init(2) : MAP[BV:32 -> BV:32]
4 : eq(1, 3) : BOOL
=inductive-invariants point_set global exprs map done
=inductive-invariants point_set points
=inductive-invariants point_set point z3v487.ce3
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 val 1 for and(and(and(and(and(and(and(and(bvule(input.memlabel-mem--symbol.1_begin, input.memlabel-mem--symbol.1_end), eq(input.memlabel-mem--symbol.1_end, bvadd(input.memlabel-mem--symbol.1_begin, bvadd(400, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.memlabel-mem--symbol.1_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.memlabel-mem--symbol.1_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.memlabel-mem--symbol.1_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.memlabel-mem--symbol.1_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.memlabel-mem--symbol.1_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.memlabel-mem--symbol.1_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.memlabel-mem--symbol.1_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.memlabel-mem--symbol.1_end)))))), and(eq(bvand(symbol.1, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(symbol.1, input.memlabel-mem--symbol.1_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), eq(symbol.1, dst_symbol_addr.1)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.2-heap))
1
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 val 2 for input.spec-%var-n-1
0
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 val 3 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 val 4 for input.spec-%var-n-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 val 6 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 val 7 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 val 8 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 val 9 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 val 10 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 val 11 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 val 12 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 val 13 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 val 14 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 done
=inductive-invariants point_set point z3.ce4
=inductive-invariants point_set point z3.ce4 expr point z3.ce4
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 val 1 for and(and(and(and(and(and(and(and(bvule(input.memlabel-mem--symbol.1_begin, input.memlabel-mem--symbol.1_end), eq(input.memlabel-mem--symbol.1_end, bvadd(input.memlabel-mem--symbol.1_begin, bvadd(400, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.memlabel-mem--symbol.1_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.memlabel-mem--symbol.1_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.memlabel-mem--symbol.1_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.memlabel-mem--symbol.1_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.memlabel-mem--symbol.1_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.memlabel-mem--symbol.1_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.memlabel-mem--symbol.1_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.memlabel-mem--symbol.1_end)))))), and(eq(bvand(symbol.1, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(symbol.1, input.memlabel-mem--symbol.1_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), eq(symbol.1, dst_symbol_addr.1)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.2-heap))
1
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 val 2 for input.spec-%var-n-1
0
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 val 3 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 val 4 for input.spec-%var-n-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 val 6 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 val 7 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 val 8 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 val 9 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 val 10 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 val 11 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 val 12 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 val 13 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 val 14 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 done
=inductive-invariants point_set point z3.ce69
=inductive-invariants point_set point z3.ce69 expr point z3.ce69
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 1 for and(and(and(and(and(and(and(and(bvule(input.memlabel-mem--symbol.1_begin, input.memlabel-mem--symbol.1_end), eq(input.memlabel-mem--symbol.1_end, bvadd(input.memlabel-mem--symbol.1_begin, bvadd(400, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.memlabel-mem--symbol.1_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.memlabel-mem--symbol.1_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.memlabel-mem--symbol.1_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.memlabel-mem--symbol.1_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.memlabel-mem--symbol.1_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.memlabel-mem--symbol.1_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.memlabel-mem--symbol.1_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.memlabel-mem--symbol.1_end)))))), and(eq(bvand(symbol.1, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(symbol.1, input.memlabel-mem--symbol.1_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), eq(symbol.1, dst_symbol_addr.1)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.2-heap))
1
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 2 for input.spec-%var-n-1
2147483648
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 3 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 4 for input.spec-%var-n-0.L3%6%bbentry
2147483648
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 5 for input.dst.llvm-%n
2147483648
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 6 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 7 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 8 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 9 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 10 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 11 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 12 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 13 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 14 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 done
=inductive-invariants point_set point z3.ce47
=inductive-invariants point_set point z3.ce47 expr point z3.ce47
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 1 for and(and(and(and(and(and(and(and(bvule(input.memlabel-mem--symbol.1_begin, input.memlabel-mem--symbol.1_end), eq(input.memlabel-mem--symbol.1_end, bvadd(input.memlabel-mem--symbol.1_begin, bvadd(400, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.memlabel-mem--symbol.1_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.memlabel-mem--symbol.1_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.memlabel-mem--symbol.1_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.memlabel-mem--symbol.1_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.memlabel-mem--symbol.1_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.memlabel-mem--symbol.1_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.memlabel-mem--symbol.1_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.memlabel-mem--symbol.1_end)))))), and(eq(bvand(symbol.1, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(symbol.1, input.memlabel-mem--symbol.1_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), eq(symbol.1, dst_symbol_addr.1)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.2-heap))
1
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 2 for input.spec-%var-n-1
4294967295
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 3 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 4 for input.spec-%var-n-0.L3%6%bbentry
4294967295
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 6 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 7 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 8 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 9 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 10 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 11 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 12 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 13 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 14 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 done
=inductive-invariants point_set point z3v487.ce48
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 1 for and(and(and(and(and(and(and(and(bvule(input.memlabel-mem--symbol.1_begin, input.memlabel-mem--symbol.1_end), eq(input.memlabel-mem--symbol.1_end, bvadd(input.memlabel-mem--symbol.1_begin, bvadd(400, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.memlabel-mem--symbol.1_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.memlabel-mem--symbol.1_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.memlabel-mem--symbol.1_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.memlabel-mem--symbol.1_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.memlabel-mem--symbol.1_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.memlabel-mem--symbol.1_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.memlabel-mem--symbol.1_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.memlabel-mem--symbol.1_end)))))), and(eq(bvand(symbol.1, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(symbol.1, input.memlabel-mem--symbol.1_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), eq(symbol.1, dst_symbol_addr.1)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.2-heap))
1
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 2 for input.spec-%var-n-1
4294967295
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 3 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 4 for input.spec-%var-n-0.L3%6%bbentry
4294967295
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 6 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 7 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 8 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 9 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 10 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 11 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 12 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 13 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 14 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 done
=inductive-invariants point_set point z3.ce25
=inductive-invariants point_set point z3.ce25 expr point z3.ce25
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 1 for and(and(and(and(and(and(and(and(bvule(input.memlabel-mem--symbol.1_begin, input.memlabel-mem--symbol.1_end), eq(input.memlabel-mem--symbol.1_end, bvadd(input.memlabel-mem--symbol.1_begin, bvadd(400, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.memlabel-mem--symbol.1_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.memlabel-mem--symbol.1_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.memlabel-mem--symbol.1_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.memlabel-mem--symbol.1_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.memlabel-mem--symbol.1_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.memlabel-mem--symbol.1_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.memlabel-mem--symbol.1_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.memlabel-mem--symbol.1_end)))))), and(eq(bvand(symbol.1, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(symbol.1, input.memlabel-mem--symbol.1_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), eq(symbol.1, dst_symbol_addr.1)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.2-heap))
1
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 2 for input.spec-%var-n-1
16843009
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 3 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 4 for input.spec-%var-n-0.L3%6%bbentry
16843009
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 5 for input.dst.llvm-%n
16843009
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 6 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 7 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 8 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 9 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 10 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 11 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 12 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 13 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 14 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 done
=inductive-invariants point_set point z3v487.ce26
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 1 for and(and(and(and(and(and(and(and(bvule(input.memlabel-mem--symbol.1_begin, input.memlabel-mem--symbol.1_end), eq(input.memlabel-mem--symbol.1_end, bvadd(input.memlabel-mem--symbol.1_begin, bvadd(400, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.memlabel-mem--symbol.1_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.memlabel-mem--symbol.1_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.memlabel-mem--symbol.1_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.memlabel-mem--symbol.1_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.memlabel-mem--symbol.1_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.memlabel-mem--symbol.1_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.memlabel-mem--symbol.1_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.memlabel-mem--symbol.1_end)))))), and(eq(bvand(symbol.1, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(symbol.1, input.memlabel-mem--symbol.1_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), eq(symbol.1, dst_symbol_addr.1)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.2-heap))
1
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 2 for input.spec-%var-n-1
16843009
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 3 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 4 for input.spec-%var-n-0.L3%6%bbentry
16843009
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 5 for input.dst.llvm-%n
16843009
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 6 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 7 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 8 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 9 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 10 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 11 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 12 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 13 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 14 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 done
=inductive-invariants point_set point z3v487.ce70
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 1 for and(and(and(and(and(and(and(and(bvule(input.memlabel-mem--symbol.1_begin, input.memlabel-mem--symbol.1_end), eq(input.memlabel-mem--symbol.1_end, bvadd(input.memlabel-mem--symbol.1_begin, bvadd(400, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.memlabel-mem--symbol.1_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.memlabel-mem--symbol.1_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.memlabel-mem--symbol.1_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.memlabel-mem--symbol.1_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.memlabel-mem--symbol.1_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.memlabel-mem--symbol.1_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.memlabel-mem--symbol.1_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.memlabel-mem--symbol.1_end)))))), and(eq(bvand(symbol.1, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(symbol.1, input.memlabel-mem--symbol.1_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), eq(symbol.1, dst_symbol_addr.1)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.2-heap))
1
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 2 for input.spec-%var-n-1
2147483648
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 3 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 4 for input.spec-%var-n-0.L3%6%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 5 for input.dst.llvm-%n
2147483648
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 6 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 7 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 8 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 9 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 10 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 11 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 12 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 13 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 14 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 done
=inductive-invariants point_set point z3v487.ce428
=inductive-invariants point_set point z3v487.ce428 expr point z3v487.ce428
=inductive-invariants point_set point z3v487.ce428 expr point z3v487.ce428 val 1 for and(and(and(and(and(and(and(and(bvule(input.memlabel-mem--symbol.1_begin, input.memlabel-mem--symbol.1_end), eq(input.memlabel-mem--symbol.1_end, bvadd(input.memlabel-mem--symbol.1_begin, bvadd(400, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.memlabel-mem--symbol.1_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.memlabel-mem--symbol.1_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.memlabel-mem--symbol.1_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.memlabel-mem--symbol.1_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.memlabel-mem--symbol.1_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.memlabel-mem--symbol.1_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.memlabel-mem--symbol.1_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.memlabel-mem--symbol.1_end)))))), and(eq(bvand(symbol.1, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(symbol.1, input.memlabel-mem--symbol.1_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), eq(symbol.1, dst_symbol_addr.1)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.2-heap))
1
=inductive-invariants point_set point z3v487.ce428 expr point z3v487.ce428 val 2 for input.spec-%var-n-1
4294967295
=inductive-invariants point_set point z3v487.ce428 expr point z3v487.ce428 val 3 for input.spec-%var-i-0.L3%6%bbentry
1
=inductive-invariants point_set point z3v487.ce428 expr point z3v487.ce428 val 4 for input.spec-%var-n-0.L3%6%bbentry
4294967295
=inductive-invariants point_set point z3v487.ce428 expr point z3v487.ce428 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3v487.ce428 expr point z3v487.ce428 val 6 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce428 expr point z3v487.ce428 val 7 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce428 expr point z3v487.ce428 val 8 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce428 expr point z3v487.ce428 val 9 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce428 expr point z3v487.ce428 val 10 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce428 expr point z3v487.ce428 val 11 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce428 expr point z3v487.ce428 val 12 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce428 expr point z3v487.ce428 val 13 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce428 expr point z3v487.ce428 val 14 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce428 expr point z3v487.ce428 done
=inductive-invariants point_set point z3.ce475
=inductive-invariants point_set point z3.ce475 expr point z3.ce475
=inductive-invariants point_set point z3.ce475 expr point z3.ce475 val 1 for and(and(and(and(and(and(and(and(bvule(input.memlabel-mem--symbol.1_begin, input.memlabel-mem--symbol.1_end), eq(input.memlabel-mem--symbol.1_end, bvadd(input.memlabel-mem--symbol.1_begin, bvadd(400, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.memlabel-mem--symbol.1_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.memlabel-mem--symbol.1_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.memlabel-mem--symbol.1_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.memlabel-mem--symbol.1_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.memlabel-mem--symbol.1_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.memlabel-mem--symbol.1_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.memlabel-mem--symbol.1_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.memlabel-mem--symbol.1_end)))))), and(eq(bvand(symbol.1, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(symbol.1, input.memlabel-mem--symbol.1_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), eq(symbol.1, dst_symbol_addr.1)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.2-heap))
1
=inductive-invariants point_set point z3.ce475 expr point z3.ce475 val 2 for input.spec-%var-n-1
16843009
=inductive-invariants point_set point z3.ce475 expr point z3.ce475 val 3 for input.spec-%var-i-0.L3%6%bbentry
2
=inductive-invariants point_set point z3.ce475 expr point z3.ce475 val 4 for input.spec-%var-n-0.L3%6%bbentry
16843009
=inductive-invariants point_set point z3.ce475 expr point z3.ce475 val 5 for input.dst.llvm-%n
16843009
=inductive-invariants point_set point z3.ce475 expr point z3.ce475 val 6 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3.ce475 expr point z3.ce475 val 7 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce475 expr point z3.ce475 val 8 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce475 expr point z3.ce475 val 9 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce475 expr point z3.ce475 val 10 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce475 expr point z3.ce475 val 11 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce475 expr point z3.ce475 val 12 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce475 expr point z3.ce475 val 13 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce475 expr point z3.ce475 val 14 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce475 expr point z3.ce475 done
=inductive-invariants point_set point z3.ce91
=inductive-invariants point_set point z3.ce91 expr point z3.ce91
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 1 for and(and(and(and(and(and(and(and(bvule(input.memlabel-mem--symbol.1_begin, input.memlabel-mem--symbol.1_end), eq(input.memlabel-mem--symbol.1_end, bvadd(input.memlabel-mem--symbol.1_begin, bvadd(400, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.memlabel-mem--symbol.1_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.memlabel-mem--symbol.1_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.memlabel-mem--symbol.1_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.memlabel-mem--symbol.1_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.memlabel-mem--symbol.1_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.memlabel-mem--symbol.1_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.memlabel-mem--symbol.1_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.memlabel-mem--symbol.1_end)))))), and(eq(bvand(symbol.1, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(symbol.1, input.memlabel-mem--symbol.1_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), eq(symbol.1, dst_symbol_addr.1)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.2-heap))
1
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 2 for input.spec-%var-n-1
0
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 3 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 4 for input.spec-%var-n-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 6 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 7 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 8 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 9 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 10 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 11 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 12 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 13 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 14 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 done
=inductive-invariants point_set point z3v487.ce92
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 1 for and(and(and(and(and(and(and(and(bvule(input.memlabel-mem--symbol.1_begin, input.memlabel-mem--symbol.1_end), eq(input.memlabel-mem--symbol.1_end, bvadd(input.memlabel-mem--symbol.1_begin, bvadd(400, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.memlabel-mem--symbol.1_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.memlabel-mem--symbol.1_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.memlabel-mem--symbol.1_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.memlabel-mem--symbol.1_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.memlabel-mem--symbol.1_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.memlabel-mem--symbol.1_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.memlabel-mem--symbol.1_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.memlabel-mem--symbol.1_end)))))), and(eq(bvand(symbol.1, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(symbol.1, input.memlabel-mem--symbol.1_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), eq(symbol.1, dst_symbol_addr.1)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.2-heap))
1
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 2 for input.spec-%var-n-1
0
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 3 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 4 for input.spec-%var-n-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 6 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 7 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 8 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 9 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 10 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 11 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 12 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 13 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 14 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 done
=inductive-invariants point_set point z3v487.ce113
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 1 for and(and(and(and(and(and(and(and(bvule(input.memlabel-mem--symbol.1_begin, input.memlabel-mem--symbol.1_end), eq(input.memlabel-mem--symbol.1_end, bvadd(input.memlabel-mem--symbol.1_begin, bvadd(400, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.memlabel-mem--symbol.1_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.memlabel-mem--symbol.1_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.memlabel-mem--symbol.1_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.memlabel-mem--symbol.1_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.memlabel-mem--symbol.1_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.memlabel-mem--symbol.1_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.memlabel-mem--symbol.1_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.memlabel-mem--symbol.1_end)))))), and(eq(bvand(symbol.1, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(symbol.1, input.memlabel-mem--symbol.1_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), eq(symbol.1, dst_symbol_addr.1)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.2-heap))
1
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 2 for input.spec-%var-n-1
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 3 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 4 for input.spec-%var-n-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 6 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 7 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 8 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 9 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 10 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 11 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 12 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 13 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 14 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 done
=inductive-invariants point_set point z3.ce114
=inductive-invariants point_set point z3.ce114 expr point z3.ce114
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 1 for and(and(and(and(and(and(and(and(bvule(input.memlabel-mem--symbol.1_begin, input.memlabel-mem--symbol.1_end), eq(input.memlabel-mem--symbol.1_end, bvadd(input.memlabel-mem--symbol.1_begin, bvadd(400, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.memlabel-mem--symbol.1_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.memlabel-mem--symbol.1_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.memlabel-mem--symbol.1_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.memlabel-mem--symbol.1_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.memlabel-mem--symbol.1_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.memlabel-mem--symbol.1_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.memlabel-mem--symbol.1_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.memlabel-mem--symbol.1_end)))))), and(eq(bvand(symbol.1, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(symbol.1, input.memlabel-mem--symbol.1_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), eq(symbol.1, dst_symbol_addr.1)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.2-heap))
1
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 2 for input.spec-%var-n-1
0
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 3 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 4 for input.spec-%var-n-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 6 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 7 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 8 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 9 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 10 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 11 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 12 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 13 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 14 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 done
=inductive-invariants point_set point z3.ce157
=inductive-invariants point_set point z3.ce157 expr point z3.ce157
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 1 for and(and(and(and(and(and(and(and(bvule(input.memlabel-mem--symbol.1_begin, input.memlabel-mem--symbol.1_end), eq(input.memlabel-mem--symbol.1_end, bvadd(input.memlabel-mem--symbol.1_begin, bvadd(400, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.memlabel-mem--symbol.1_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.memlabel-mem--symbol.1_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.memlabel-mem--symbol.1_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.memlabel-mem--symbol.1_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.memlabel-mem--symbol.1_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.memlabel-mem--symbol.1_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.memlabel-mem--symbol.1_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.memlabel-mem--symbol.1_end)))))), and(eq(bvand(symbol.1, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(symbol.1, input.memlabel-mem--symbol.1_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), eq(symbol.1, dst_symbol_addr.1)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.2-heap))
1
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 2 for input.spec-%var-n-1
1
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 3 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 4 for input.spec-%var-n-0.L3%6%bbentry
1
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 6 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 7 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 8 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 9 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 10 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 11 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 12 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 13 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 14 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 done
=inductive-invariants point_set point z3v487.ce135
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 1 for and(and(and(and(and(and(and(and(bvule(input.memlabel-mem--symbol.1_begin, input.memlabel-mem--symbol.1_end), eq(input.memlabel-mem--symbol.1_end, bvadd(input.memlabel-mem--symbol.1_begin, bvadd(400, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.memlabel-mem--symbol.1_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.memlabel-mem--symbol.1_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.memlabel-mem--symbol.1_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.memlabel-mem--symbol.1_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.memlabel-mem--symbol.1_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.memlabel-mem--symbol.1_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.memlabel-mem--symbol.1_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.memlabel-mem--symbol.1_end)))))), and(eq(bvand(symbol.1, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(symbol.1, input.memlabel-mem--symbol.1_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), eq(symbol.1, dst_symbol_addr.1)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.2-heap))
1
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 2 for input.spec-%var-n-1
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 3 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 4 for input.spec-%var-n-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 6 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 7 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 8 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 9 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 10 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 11 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 12 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 13 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 14 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 done
=inductive-invariants point_set point z3.ce136
=inductive-invariants point_set point z3.ce136 expr point z3.ce136
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 1 for and(and(and(and(and(and(and(and(bvule(input.memlabel-mem--symbol.1_begin, input.memlabel-mem--symbol.1_end), eq(input.memlabel-mem--symbol.1_end, bvadd(input.memlabel-mem--symbol.1_begin, bvadd(400, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.memlabel-mem--symbol.1_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.memlabel-mem--symbol.1_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.memlabel-mem--symbol.1_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.memlabel-mem--symbol.1_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.memlabel-mem--symbol.1_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.memlabel-mem--symbol.1_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.memlabel-mem--symbol.1_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.memlabel-mem--symbol.1_end)))))), and(eq(bvand(symbol.1, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(symbol.1, input.memlabel-mem--symbol.1_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), eq(symbol.1, dst_symbol_addr.1)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.2-heap))
1
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 2 for input.spec-%var-n-1
1
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 3 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 4 for input.spec-%var-n-0.L3%6%bbentry
1
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 6 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 7 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 8 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 9 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 10 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 11 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 12 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 13 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 14 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 done
=inductive-invariants point_set point z3v487.ce179
=inductive-invariants point_set point z3v487.ce179 expr point z3v487.ce179
=inductive-invariants point_set point z3v487.ce179 expr point z3v487.ce179 val 1 for and(and(and(and(and(and(and(and(bvule(input.memlabel-mem--symbol.1_begin, input.memlabel-mem--symbol.1_end), eq(input.memlabel-mem--symbol.1_end, bvadd(input.memlabel-mem--symbol.1_begin, bvadd(400, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.memlabel-mem--symbol.1_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.memlabel-mem--symbol.1_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.memlabel-mem--symbol.1_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.memlabel-mem--symbol.1_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.memlabel-mem--symbol.1_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.memlabel-mem--symbol.1_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.memlabel-mem--symbol.1_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.memlabel-mem--symbol.1_end)))))), and(eq(bvand(symbol.1, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(symbol.1, input.memlabel-mem--symbol.1_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), eq(symbol.1, dst_symbol_addr.1)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.2-heap))
1
=inductive-invariants point_set point z3v487.ce179 expr point z3v487.ce179 val 2 for input.spec-%var-n-1
0
=inductive-invariants point_set point z3v487.ce179 expr point z3v487.ce179 val 3 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce179 expr point z3v487.ce179 val 4 for input.spec-%var-n-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce179 expr point z3v487.ce179 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce179 expr point z3v487.ce179 val 6 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce179 expr point z3v487.ce179 val 7 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce179 expr point z3v487.ce179 val 8 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce179 expr point z3v487.ce179 val 9 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce179 expr point z3v487.ce179 val 10 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce179 expr point z3v487.ce179 val 11 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce179 expr point z3v487.ce179 val 12 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce179 expr point z3v487.ce179 val 13 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce179 expr point z3v487.ce179 val 14 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce179 expr point z3v487.ce179 done
=inductive-invariants point_set point z3v487.ce158
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 1 for and(and(and(and(and(and(and(and(bvule(input.memlabel-mem--symbol.1_begin, input.memlabel-mem--symbol.1_end), eq(input.memlabel-mem--symbol.1_end, bvadd(input.memlabel-mem--symbol.1_begin, bvadd(400, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.memlabel-mem--symbol.1_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.memlabel-mem--symbol.1_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.memlabel-mem--symbol.1_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.memlabel-mem--symbol.1_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.memlabel-mem--symbol.1_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.memlabel-mem--symbol.1_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.memlabel-mem--symbol.1_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.memlabel-mem--symbol.1_end)))))), and(eq(bvand(symbol.1, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(symbol.1, input.memlabel-mem--symbol.1_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), eq(symbol.1, dst_symbol_addr.1)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.2-heap))
1
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 2 for input.spec-%var-n-1
1
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 3 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 4 for input.spec-%var-n-0.L3%6%bbentry
1
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 6 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 7 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 8 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 9 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 10 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 11 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 12 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 13 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 14 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 done
=inductive-invariants point_set point z3.ce180
=inductive-invariants point_set point z3.ce180 expr point z3.ce180
=inductive-invariants point_set point z3.ce180 expr point z3.ce180 val 1 for and(and(and(and(and(and(and(and(bvule(input.memlabel-mem--symbol.1_begin, input.memlabel-mem--symbol.1_end), eq(input.memlabel-mem--symbol.1_end, bvadd(input.memlabel-mem--symbol.1_begin, bvadd(400, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.memlabel-mem--symbol.1_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.memlabel-mem--symbol.1_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.memlabel-mem--symbol.1_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.memlabel-mem--symbol.1_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.memlabel-mem--symbol.1_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.memlabel-mem--symbol.1_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.memlabel-mem--symbol.1_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.memlabel-mem--symbol.1_end)))))), and(eq(bvand(symbol.1, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(symbol.1, input.memlabel-mem--symbol.1_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), eq(symbol.1, dst_symbol_addr.1)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.2-heap))
1
=inductive-invariants point_set point z3.ce180 expr point z3.ce180 val 2 for input.spec-%var-n-1
0
=inductive-invariants point_set point z3.ce180 expr point z3.ce180 val 3 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce180 expr point z3.ce180 val 4 for input.spec-%var-n-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce180 expr point z3.ce180 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce180 expr point z3.ce180 val 6 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce180 expr point z3.ce180 val 7 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce180 expr point z3.ce180 val 8 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce180 expr point z3.ce180 val 9 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce180 expr point z3.ce180 val 10 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce180 expr point z3.ce180 val 11 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce180 expr point z3.ce180 val 12 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce180 expr point z3.ce180 val 13 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce180 expr point z3.ce180 val 14 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce180 expr point z3.ce180 done
=inductive-invariants point_set point z3.ce418
=inductive-invariants point_set point z3.ce418 expr point z3.ce418
=inductive-invariants point_set point z3.ce418 expr point z3.ce418 val 1 for and(and(and(and(and(and(and(and(bvule(input.memlabel-mem--symbol.1_begin, input.memlabel-mem--symbol.1_end), eq(input.memlabel-mem--symbol.1_end, bvadd(input.memlabel-mem--symbol.1_begin, bvadd(400, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.memlabel-mem--symbol.1_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.memlabel-mem--symbol.1_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.memlabel-mem--symbol.1_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.memlabel-mem--symbol.1_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.memlabel-mem--symbol.1_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.memlabel-mem--symbol.1_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.memlabel-mem--symbol.1_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.memlabel-mem--symbol.1_end)))))), and(eq(bvand(symbol.1, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(symbol.1, input.memlabel-mem--symbol.1_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), eq(symbol.1, dst_symbol_addr.1)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.2-heap))
1
=inductive-invariants point_set point z3.ce418 expr point z3.ce418 val 2 for input.spec-%var-n-1
4294967295
=inductive-invariants point_set point z3.ce418 expr point z3.ce418 val 3 for input.spec-%var-i-0.L3%6%bbentry
1
=inductive-invariants point_set point z3.ce418 expr point z3.ce418 val 4 for input.spec-%var-n-0.L3%6%bbentry
4294967295
=inductive-invariants point_set point z3.ce418 expr point z3.ce418 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3.ce418 expr point z3.ce418 val 6 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce418 expr point z3.ce418 val 7 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce418 expr point z3.ce418 val 8 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce418 expr point z3.ce418 val 9 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce418 expr point z3.ce418 val 10 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce418 expr point z3.ce418 val 11 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce418 expr point z3.ce418 val 12 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce418 expr point z3.ce418 val 13 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce418 expr point z3.ce418 val 14 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce418 expr point z3.ce418 done
=inductive-invariants point_set point z3.ce511
=inductive-invariants point_set point z3.ce511 expr point z3.ce511
=inductive-invariants point_set point z3.ce511 expr point z3.ce511 val 1 for and(and(and(and(and(and(and(and(bvule(input.memlabel-mem--symbol.1_begin, input.memlabel-mem--symbol.1_end), eq(input.memlabel-mem--symbol.1_end, bvadd(input.memlabel-mem--symbol.1_begin, bvadd(400, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.memlabel-mem--symbol.1_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.memlabel-mem--symbol.1_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.memlabel-mem--symbol.1_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.memlabel-mem--symbol.1_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.memlabel-mem--symbol.1_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.memlabel-mem--symbol.1_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.memlabel-mem--symbol.1_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.memlabel-mem--symbol.1_end)))))), and(eq(bvand(symbol.1, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(symbol.1, input.memlabel-mem--symbol.1_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), eq(symbol.1, dst_symbol_addr.1)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.2-heap))
1
=inductive-invariants point_set point z3.ce511 expr point z3.ce511 val 2 for input.spec-%var-n-1
4294967295
=inductive-invariants point_set point z3.ce511 expr point z3.ce511 val 3 for input.spec-%var-i-0.L3%6%bbentry
2
=inductive-invariants point_set point z3.ce511 expr point z3.ce511 val 4 for input.spec-%var-n-0.L3%6%bbentry
4294967295
=inductive-invariants point_set point z3.ce511 expr point z3.ce511 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3.ce511 expr point z3.ce511 val 6 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3.ce511 expr point z3.ce511 val 7 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce511 expr point z3.ce511 val 8 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce511 expr point z3.ce511 val 9 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce511 expr point z3.ce511 val 10 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce511 expr point z3.ce511 val 11 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce511 expr point z3.ce511 val 12 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce511 expr point z3.ce511 val 13 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce511 expr point z3.ce511 val 14 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce511 expr point z3.ce511 done
=inductive-invariants point_set point z3.ce534
=inductive-invariants point_set point z3.ce534 expr point z3.ce534
=inductive-invariants point_set point z3.ce534 expr point z3.ce534 val 1 for and(and(and(and(and(and(and(and(bvule(input.memlabel-mem--symbol.1_begin, input.memlabel-mem--symbol.1_end), eq(input.memlabel-mem--symbol.1_end, bvadd(input.memlabel-mem--symbol.1_begin, bvadd(400, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.memlabel-mem--symbol.1_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.memlabel-mem--symbol.1_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.memlabel-mem--symbol.1_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.memlabel-mem--symbol.1_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.memlabel-mem--symbol.1_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.memlabel-mem--symbol.1_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.memlabel-mem--symbol.1_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.memlabel-mem--symbol.1_end)))))), and(eq(bvand(symbol.1, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(symbol.1, input.memlabel-mem--symbol.1_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), eq(symbol.1, dst_symbol_addr.1)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.2-heap))
1
=inductive-invariants point_set point z3.ce534 expr point z3.ce534 val 2 for input.spec-%var-n-1
2147483648
=inductive-invariants point_set point z3.ce534 expr point z3.ce534 val 3 for input.spec-%var-i-0.L3%6%bbentry
2
=inductive-invariants point_set point z3.ce534 expr point z3.ce534 val 4 for input.spec-%var-n-0.L3%6%bbentry
2147483648
=inductive-invariants point_set point z3.ce534 expr point z3.ce534 val 5 for input.dst.llvm-%n
2147483648
=inductive-invariants point_set point z3.ce534 expr point z3.ce534 val 6 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3.ce534 expr point z3.ce534 val 7 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce534 expr point z3.ce534 val 8 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce534 expr point z3.ce534 val 9 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce534 expr point z3.ce534 val 10 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce534 expr point z3.ce534 val 11 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce534 expr point z3.ce534 val 12 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce534 expr point z3.ce534 val 13 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce534 expr point z3.ce534 val 14 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce534 expr point z3.ce534 done
=inductive-invariants point_set point z3v487.ce579
=inductive-invariants point_set point z3v487.ce579 expr point z3v487.ce579
=inductive-invariants point_set point z3v487.ce579 expr point z3v487.ce579 val 1 for and(and(and(and(and(and(and(and(bvule(input.memlabel-mem--symbol.1_begin, input.memlabel-mem--symbol.1_end), eq(input.memlabel-mem--symbol.1_end, bvadd(input.memlabel-mem--symbol.1_begin, bvadd(400, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.memlabel-mem--symbol.1_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.memlabel-mem--symbol.1_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.memlabel-mem--symbol.1_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.memlabel-mem--symbol.1_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.memlabel-mem--symbol.1_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.memlabel-mem--symbol.1_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.memlabel-mem--symbol.1_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.memlabel-mem--symbol.1_end)))))), and(eq(bvand(symbol.1, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(symbol.1, input.memlabel-mem--symbol.1_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), eq(symbol.1, dst_symbol_addr.1)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.2-heap))
1
=inductive-invariants point_set point z3v487.ce579 expr point z3v487.ce579 val 2 for input.spec-%var-n-1
2147483650
=inductive-invariants point_set point z3v487.ce579 expr point z3v487.ce579 val 3 for input.spec-%var-i-0.L3%6%bbentry
4
=inductive-invariants point_set point z3v487.ce579 expr point z3v487.ce579 val 4 for input.spec-%var-n-0.L3%6%bbentry
2147483650
=inductive-invariants point_set point z3v487.ce579 expr point z3v487.ce579 val 5 for input.dst.llvm-%n
2147483650
=inductive-invariants point_set point z3v487.ce579 expr point z3v487.ce579 val 6 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3v487.ce579 expr point z3v487.ce579 val 7 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce579 expr point z3v487.ce579 val 8 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce579 expr point z3v487.ce579 val 9 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce579 expr point z3v487.ce579 val 10 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce579 expr point z3v487.ce579 val 11 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce579 expr point z3v487.ce579 val 12 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce579 expr point z3v487.ce579 val 13 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce579 expr point z3v487.ce579 val 14 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce579 expr point z3v487.ce579 done
=inductive-invariants point_set point z3.ce578
=inductive-invariants point_set point z3.ce578 expr point z3.ce578
=inductive-invariants point_set point z3.ce578 expr point z3.ce578 val 1 for and(and(and(and(and(and(and(and(bvule(input.memlabel-mem--symbol.1_begin, input.memlabel-mem--symbol.1_end), eq(input.memlabel-mem--symbol.1_end, bvadd(input.memlabel-mem--symbol.1_begin, bvadd(400, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.memlabel-mem--symbol.1_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.memlabel-mem--symbol.1_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.memlabel-mem--symbol.1_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.memlabel-mem--symbol.1_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.memlabel-mem--symbol.1_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.memlabel-mem--symbol.1_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.memlabel-mem--symbol.1_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.memlabel-mem--symbol.1_end)))))), and(eq(bvand(symbol.1, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(symbol.1, input.memlabel-mem--symbol.1_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), eq(symbol.1, dst_symbol_addr.1)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.2-heap))
1
=inductive-invariants point_set point z3.ce578 expr point z3.ce578 val 2 for input.spec-%var-n-1
2097154
=inductive-invariants point_set point z3.ce578 expr point z3.ce578 val 3 for input.spec-%var-i-0.L3%6%bbentry
4
=inductive-invariants point_set point z3.ce578 expr point z3.ce578 val 4 for input.spec-%var-n-0.L3%6%bbentry
2097154
=inductive-invariants point_set point z3.ce578 expr point z3.ce578 val 5 for input.dst.llvm-%n
2097154
=inductive-invariants point_set point z3.ce578 expr point z3.ce578 val 6 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3.ce578 expr point z3.ce578 val 7 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce578 expr point z3.ce578 val 8 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce578 expr point z3.ce578 val 9 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce578 expr point z3.ce578 val 10 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce578 expr point z3.ce578 val 11 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce578 expr point z3.ce578 val 12 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce578 expr point z3.ce578 val 13 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce578 expr point z3.ce578 val 14 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce578 expr point z3.ce578 done
=inductive-invariants point_set point z3v487.ce632
=inductive-invariants point_set point z3v487.ce632 expr point z3v487.ce632
=inductive-invariants point_set point z3v487.ce632 expr point z3v487.ce632 val 1 for and(and(and(and(and(and(and(and(bvule(input.memlabel-mem--symbol.1_begin, input.memlabel-mem--symbol.1_end), eq(input.memlabel-mem--symbol.1_end, bvadd(input.memlabel-mem--symbol.1_begin, bvadd(400, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.memlabel-mem--symbol.1_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.memlabel-mem--symbol.1_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.memlabel-mem--symbol.1_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.memlabel-mem--symbol.1_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.memlabel-mem--symbol.1_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.memlabel-mem--symbol.1_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.memlabel-mem--symbol.1_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.memlabel-mem--symbol.1_end)))))), and(eq(bvand(symbol.1, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(symbol.1, input.memlabel-mem--symbol.1_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), eq(symbol.1, dst_symbol_addr.1)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.2-heap))
1
=inductive-invariants point_set point z3v487.ce632 expr point z3v487.ce632 val 2 for input.spec-%var-n-1
2147483649
=inductive-invariants point_set point z3v487.ce632 expr point z3v487.ce632 val 3 for input.spec-%var-i-0.L3%6%bbentry
5
=inductive-invariants point_set point z3v487.ce632 expr point z3v487.ce632 val 4 for input.spec-%var-n-0.L3%6%bbentry
2147483649
=inductive-invariants point_set point z3v487.ce632 expr point z3v487.ce632 val 5 for input.dst.llvm-%n
2147483649
=inductive-invariants point_set point z3v487.ce632 expr point z3v487.ce632 val 6 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
5
=inductive-invariants point_set point z3v487.ce632 expr point z3v487.ce632 val 7 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce632 expr point z3v487.ce632 val 8 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce632 expr point z3v487.ce632 val 9 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce632 expr point z3v487.ce632 val 10 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce632 expr point z3v487.ce632 val 11 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce632 expr point z3v487.ce632 val 12 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce632 expr point z3v487.ce632 val 13 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce632 expr point z3v487.ce632 val 14 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce632 expr point z3v487.ce632 done
=inductive-invariants point_set point z3.ce631
=inductive-invariants point_set point z3.ce631 expr point z3.ce631
=inductive-invariants point_set point z3.ce631 expr point z3.ce631 val 1 for and(and(and(and(and(and(and(and(bvule(input.memlabel-mem--symbol.1_begin, input.memlabel-mem--symbol.1_end), eq(input.memlabel-mem--symbol.1_end, bvadd(input.memlabel-mem--symbol.1_begin, bvadd(400, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.memlabel-mem--symbol.1_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.memlabel-mem--symbol.1_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.memlabel-mem--symbol.1_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.memlabel-mem--symbol.1_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.memlabel-mem--symbol.1_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.memlabel-mem--symbol.1_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.memlabel-mem--symbol.1_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.memlabel-mem--symbol.1_end)))))), and(eq(bvand(symbol.1, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(symbol.1, input.memlabel-mem--symbol.1_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), eq(symbol.1, dst_symbol_addr.1)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.2-heap))
1
=inductive-invariants point_set point z3.ce631 expr point z3.ce631 val 2 for input.spec-%var-n-1
524289
=inductive-invariants point_set point z3.ce631 expr point z3.ce631 val 3 for input.spec-%var-i-0.L3%6%bbentry
5
=inductive-invariants point_set point z3.ce631 expr point z3.ce631 val 4 for input.spec-%var-n-0.L3%6%bbentry
524289
=inductive-invariants point_set point z3.ce631 expr point z3.ce631 val 5 for input.dst.llvm-%n
524289
=inductive-invariants point_set point z3.ce631 expr point z3.ce631 val 6 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
5
=inductive-invariants point_set point z3.ce631 expr point z3.ce631 val 7 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce631 expr point z3.ce631 val 8 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce631 expr point z3.ce631 val 9 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce631 expr point z3.ce631 val 10 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce631 expr point z3.ce631 val 11 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce631 expr point z3.ce631 val 12 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce631 expr point z3.ce631 val 13 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce631 expr point z3.ce631 val 14 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce631 expr point z3.ce631 done
=inductive-invariants point_set points done
=out-of-bound-exprs for reason inductive-invariants
=out-of-bound-exprs for reason inductive-invariants at L0%0%d_L0%0%d

=out-of-bound-exprs for reason inductive-invariants at L3%6%bbentry_Lfor.cond%1%bbentry

=out-of-bound-exprs for reason inductive-invariants at E0%0%d_E0%0%d

=graph_with_points done
=Invariant state at node L0%0%d_L0%0%d for reason inductive-invariants
=pc L0%0%d_L0%0%d inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond.description

=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond.expr is null
=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond done
=pc L0%0%d_L0%0%d inductive-invariants invariant_state done
=Invariant state at node L3%6%bbentry_Lfor.cond%1%bbentry for reason inductive-invariants
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state failcond.description

=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state failcond.expr is null
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state failcond done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability name abstract-memlabel-asserts
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability expr_group_type HOUDINI_EXPECTS_STABILITY with 1 exprs
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability point_expr 1
1 : input.memlabel-mem--symbol.1_begin : BV:32
2 : input.memlabel-mem--symbol.1_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 400 { 0x190 +1.4768e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : 4 { 0x4 +1.47e129 } : BV:32
15 : bvadd(14, 5) : BV:32
16 : bvadd(10, 15) : BV:32
17 : eq(11, 16) : BOOL
18 : and(13, 17) : BOOL
19 : bvuge(1, 10) : BOOL
20 : bvule(1, 11) : BOOL
21 : and(19, 20) : BOOL
22 : bvuge(2, 10) : BOOL
23 : bvule(2, 11) : BOOL
24 : and(22, 23) : BOOL
25 : not(24) : BOOL
26 : andnot1(21, 25) : BOOL
27 : bvuge(10, 1) : BOOL
28 : bvule(10, 2) : BOOL
29 : and(27, 28) : BOOL
30 : bvuge(11, 1) : BOOL
31 : bvule(11, 2) : BOOL
32 : and(30, 31) : BOOL
33 : not(32) : BOOL
34 : andnot1(29, 33) : BOOL
35 : and(26, 34) : BOOL
36 : and(18, 35) : BOOL
37 : symbol.1 : BV:32
38 : 3 { 0x3 +1.35e129 } : BV:32
39 : bvand(37, 38) : BV:32
40 : 0 { 0x0 +1.0e129 } : BV:32
41 : eq(39, 40) : BOOL
42 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
43 : bvand(42, 38) : BV:32
44 : eq(43, 40) : BOOL
45 : and(41, 44) : BOOL
46 : and(36, 45) : BOOL
47 : eq(37, 1) : BOOL
48 : eq(42, 10) : BOOL
49 : and(47, 48) : BOOL
50 : and(46, 49) : BOOL
51 : dst_symbol_addr.1 : BV:32
52 : eq(37, 51) : BOOL
53 : and(50, 52) : BOOL
54 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
55 : 1 { 0x1 +1.11e129 } : BV:32
56 : memlabel-mem-may-straddle-symbol.2-heap : MEMLABEL
57 : region_agrees_with_memlabel(54, 40, 55, 56) : BOOL
58 : and(53, 57) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability pred 0
=Comment
abstract-memlabel-asserts-houdini-guess
=LhsExpr
1 : input.memlabel-mem--symbol.1_begin : BV:32
2 : input.memlabel-mem--symbol.1_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 400 { 0x190 +1.4768e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : 4 { 0x4 +1.47e129 } : BV:32
15 : bvadd(14, 5) : BV:32
16 : bvadd(10, 15) : BV:32
17 : eq(11, 16) : BOOL
18 : and(13, 17) : BOOL
19 : bvuge(1, 10) : BOOL
20 : bvule(1, 11) : BOOL
21 : and(19, 20) : BOOL
22 : bvuge(2, 10) : BOOL
23 : bvule(2, 11) : BOOL
24 : and(22, 23) : BOOL
25 : not(24) : BOOL
26 : andnot1(21, 25) : BOOL
27 : bvuge(10, 1) : BOOL
28 : bvule(10, 2) : BOOL
29 : and(27, 28) : BOOL
30 : bvuge(11, 1) : BOOL
31 : bvule(11, 2) : BOOL
32 : and(30, 31) : BOOL
33 : not(32) : BOOL
34 : andnot1(29, 33) : BOOL
35 : and(26, 34) : BOOL
36 : and(18, 35) : BOOL
37 : symbol.1 : BV:32
38 : 3 { 0x3 +1.35e129 } : BV:32
39 : bvand(37, 38) : BV:32
40 : 0 { 0x0 +1.0e129 } : BV:32
41 : eq(39, 40) : BOOL
42 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
43 : bvand(42, 38) : BV:32
44 : eq(43, 40) : BOOL
45 : and(41, 44) : BOOL
46 : and(36, 45) : BOOL
47 : eq(37, 1) : BOOL
48 : eq(42, 10) : BOOL
49 : and(47, 48) : BOOL
50 : and(46, 49) : BOOL
51 : dst_symbol_addr.1 : BV:32
52 : eq(37, 51) : BOOL
53 : and(50, 52) : BOOL
54 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
55 : 1 { 0x1 +1.11e129 } : BV:32
56 : memlabel-mem-may-straddle-symbol.2-heap : MEMLABEL
57 : region_agrees_with_memlabel(54, 40, 55, 56) : BOOL
58 : and(53, 57) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability predicate_set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ce 0: z3v487.ce3
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ces set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability summary: number of exprs=1; number of visited CEs=1; number of preds=1
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv name expr-group-bvs
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv expr_group_type BV_EQ with 5 exprs
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 2
1 : input.spec-%var-n-1 : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 3
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 4
1 : input.spec-%var-n-0.L3%6%bbentry : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 5
1 : input.dst.llvm-%n : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 6
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 0
=Comment
expr-group-bvs.linear2-32-free_var_idx.6
=LhsExpr
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 1
=Comment
expr-group-bvs.linear2-32-free_var_idx.5
=LhsExpr
1 : input.spec-%var-n-1 : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%n : BV:32
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 2
=Comment
expr-group-bvs.linear2-32-free_var_idx.4
=LhsExpr
1 : input.spec-%var-n-1 : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.spec-%var-n-0.L3%6%bbentry : BV:32
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv predicate_set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 0: z3v487.ce3
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 1: z3.ce25
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 2: z3v487.ce428
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 3: z3.ce475
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ces set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv summary: number of exprs=5; number of visited CEs=4; number of preds=3
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv output matrix
matrix:
4
-2147483648->0; 2->4294967295; 3->0; 4->1; 5->0; 6->0; 
5
-2147483648->0; 2->4294967295; 3->0; 4->0; 5->1; 6->0; 
6
-2147483648->0; 2->0; 3->4294967295; 4->0; 5->0; 6->1; 
matrix done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv state elems done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const name src-branches-const-ineq
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const point_expr 3
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const pred 0
=Comment
src-branches-const-ineq.ub-unsigned
=LhsExpr
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
2 : 399 { 0x18f +1.4756e129 } : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const pred 1
=Comment
src-branches-const-ineq.ub-signed
=LhsExpr
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
2 : 399 { 0x18f +1.4756e129 } : BV:32
3 : bvsle(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const pred 2
=Comment
src-branches-const-ineq.lb-signed
=LhsExpr
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvsge(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const predicate_set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 0: z3v487.ce3
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 1: z3.ce475
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 2: z3.ce578
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 3: z3.ce631
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ces set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=3
=m_lower_bound_signed_cur 0
=m_upper_bound_signed_cur 399
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 399
=m_lower_bound_signed_known 0
=m_upper_bound_signed_known 399
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 399
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 3
1 : 400 { 0x190 +1.4768e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 4
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_exprs done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const name src-branches-const-ineq
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const point_expr 4
1 : input.spec-%var-n-0.L3%6%bbentry : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const predicate_set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 0: z3v487.ce3
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 1: z3.ce69
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 2: z3.ce47
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 3: z3.ce25
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ces set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=0
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967295
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 3
1 : 400 { 0x190 +1.4768e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 4
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_exprs done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%n
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const point_expr 5
1 : input.dst.llvm-%n : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const predicate_set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 0: z3v487.ce3
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 1: z3.ce69
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 2: z3.ce47
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 3: z3.ce25
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ces set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=0
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967295
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 3
1 : 400 { 0x190 +1.4768e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 4
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_exprs done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const point_expr 6
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const pred 0
=Comment
dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.ub-unsigned
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 399 { 0x18f +1.4756e129 } : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const pred 1
=Comment
dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.ub-signed
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 399 { 0x18f +1.4756e129 } : BV:32
3 : bvsle(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const pred 2
=Comment
dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.lb-signed
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvsge(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const predicate_set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 0: z3v487.ce3
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 1: z3.ce475
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 2: z3.ce578
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 3: z3.ce631
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ces set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=3
=m_lower_bound_signed_cur 0
=m_upper_bound_signed_cur 399
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 399
=m_lower_bound_signed_known 0
=m_upper_bound_signed_known 399
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 399
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 3
1 : 400 { 0x190 +1.4768e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 4
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_exprs done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini name dst-ineq
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini expr_group_type HOUDINI with 8 exprs
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 7
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 8
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 9
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 10
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 11
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 12
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 13
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 14
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini pred 0
=Comment
dst-ineq-houdini-guess
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini predicate_set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini visited ce 0: z3v487.ce3
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini visited ce 1: z3.ce47
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini visited ce 2: z3.ce25
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini visited ces set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini summary: number of exprs=8; number of visited CEs=3; number of preds=1
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based name spec-coupling-invariants
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based expr_group_type HOUDINI_AXIOM_BASED with 5 exprs
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 15
1 : input.spec-%var-m-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : symbol.1 : BV:32
14 : 4 { 0x4 +1.47e129 } : BV:32
15 : bvmul(9, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 16
1 : input.spec-%var-m-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : symbol.1 : BV:32
14 : 4 { 0x4 +1.47e129 } : BV:32
15 : bvmul(9, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 17
1 : input.spec-%tmpvar-10.E0%0%d : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : symbol.1 : BV:32
14 : 4 { 0x4 +1.47e129 } : BV:32
15 : bvmul(9, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 18
1 : spec-%tmpvar-8.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : SORT2EXPR.VAR : MAP[BV:32 -> BV:32]
3 : map_init(2) : MAP[BV:32 -> BV:32]
4 : eq(1, 3) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 19
1 : spec-%var-m-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : SORT2EXPR.VAR : MAP[BV:32 -> BV:32]
3 : map_init(2) : MAP[BV:32 -> BV:32]
4 : eq(1, 3) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based pred 0
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-m-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : symbol.1 : BV:32
14 : 4 { 0x4 +1.47e129 } : BV:32
15 : bvmul(9, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based predicate_set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based visited ce 0: z3v487.ce3
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based visited ces set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based summary: number of exprs=5; number of visited CEs=1; number of preds=1
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state done
=Invariant state at node E0%0%d_E0%0%d for reason inductive-invariants
=pc E0%0%d_E0%0%d inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond.description

=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond.expr is null
=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond done
=pc E0%0%d_E0%0%d inductive-invariants invariant_state done
=invariant_state_changed_at_pcs for reason inductive-invariants:
=graph_with_guessing done
=graph_with_correctness_covers begin
=graph_with_correctness_covers done
=m_dst_fcall_edges_already_updated_from_pcs:
=m_internal_pcs:
=m_super_edges:
=AllocaPCLocalSprelAssumptionsBegin:
=Local offsets from compile log
=Local offsets from compile log done
=done
=AllocaPCLocalSprelAssumptionsEnd
=DeallocaPCLocalSprelAssumptionsBegin:
=Local offsets from compile log
=Local offsets from compile log done
=done
=DeallocaPCLocalSprelAssumptionsEnd
=src_tfg pcs reaching pcpair L0%0%d_L0%0%d
=src_tfg pc: L0%0%d
=exit_pc_asserts at E0%0%d_E0%0%d
=exit_pc_assert.0 at E0%0%d_E0%0%d
=Comment
symbol-implements-variable-sized-map
=LhsExpr
1 : input.spec-%tmpvar-10.E0%0%d : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : symbol.1 : BV:32
14 : 4 { 0x4 +1.47e129 } : BV:32
15 : bvmul(9, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry
=well-formedness-conditions for L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry edge well-formedness condition
=well-formedness-conditions for L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry edge well-formedness condition done
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry edge well-formedness condition
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond cg_path
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond src_path
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond dst_path
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond pred.0
=Comment
wfcond.from_pcL3%6%bbentry_Lfor.cond%1%bbentry.to_pcL3%6%bbentry_Lfor.cond%1%bbentry-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
4 : not(3) : BOOL
5 : input.spec-%var-i-0.L3%6%bbentry : BV:32
6 : input.spec-%var-n-0.L3%6%bbentry : BV:32
7 : bvuge(5, 6) : BOOL
8 : not(7) : BOOL
9 : or(4, 8) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry edge well-formedness condition done
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge well-formedness condition
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond pred.0
=Comment
wfcond.from_pcL3%6%bbentry_Lfor.cond%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
4 : input.spec-%var-i-0.L3%6%bbentry : BV:32
5 : input.spec-%var-n-0.L3%6%bbentry : BV:32
6 : bvuge(4, 5) : BOOL
7 : or(3, 6) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d)
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond pred.0
=Comment
symbol-implements-variable-sized-map
=LhsExpr
1 : input.spec-%tmpvar-10.E0%0%d : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : symbol.1 : BV:32
14 : 4 { 0x4 +1.47e129 } : BV:32
15 : bvmul(9, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge well-formedness condition done
=Ranking exprs at node L3%6%bbentry_Lfor.cond%1%bbentry
=SRC Ranking expr 0
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
=SRC Ranking expr 1
1 : input.spec-%var-n-0.L3%6%bbentry : BV:32
=SRC Tie Breaking expr 0
1 : input.spec-%var-n-1 : BV:32
=SRC Tie Breaking expr 1
1 : input.spec-%var-m-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
=DST Ranking expr 0
1 : input.dst.llvm-%n : BV:32
=DST Ranking expr 1
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=bv_rank_exprs done
=Ranking exprs done
=dst-to-src submaps done
=cg-edge-contains-repeated-src-tfg-edge at edge-id L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry
0
=cg-edge-contains-repeated-src-tfg-edge at edge-id L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry
1
=cg-edge-contains-repeated-src-tfg-edge at edge-id L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d
1
=cg-edge-contains-repeated-src-tfg-edge-map done
=cg.assumes_around_edge
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #0
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #0.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #0.pred
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
140367 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140374 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140452 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
140375 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
140341 : 4 { 0x4 +1.0e1025 } : INT
140303 : 0 { 0x0 } : BOOL
140453 : select(140367, 140374, 140452, 140375, 140341, 140303) : BV:32
=RhsExpr
140368 : input.dst.llvm-%n : BV:32
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #1
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #1.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #1.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #1.pred
=Comment
precond-mlasserts
=LhsExpr
140724 : input.memlabel-mem--symbol.1_begin : BV:32
140725 : input.memlabel-mem--symbol.1_end : BV:32
140726 : bvule(140724, 140725) : BOOL
140393 : 400 { 0x190 +1.4768e129 } : BV:32
140405 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
140727 : bvadd(140393, 140405) : BV:32
140728 : bvadd(140724, 140727) : BV:32
140729 : eq(140725, 140728) : BOOL
140730 : and(140726, 140729) : BOOL
140731 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
140732 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
140733 : bvule(140731, 140732) : BOOL
140734 : and(140730, 140733) : BOOL
140338 : 4 { 0x4 +1.47e129 } : BV:32
140735 : bvadd(140338, 140405) : BV:32
140736 : bvadd(140731, 140735) : BV:32
140737 : eq(140732, 140736) : BOOL
140738 : and(140734, 140737) : BOOL
140739 : bvuge(140724, 140731) : BOOL
140740 : bvule(140724, 140732) : BOOL
140741 : and(140739, 140740) : BOOL
140743 : bvuge(140725, 140731) : BOOL
140744 : bvule(140725, 140732) : BOOL
140745 : and(140743, 140744) : BOOL
140746 : not(140745) : BOOL
140747 : andnot1(140741, 140746) : BOOL
140742 : bvuge(140731, 140724) : BOOL
140748 : bvule(140731, 140725) : BOOL
140749 : and(140742, 140748) : BOOL
140751 : bvuge(140732, 140724) : BOOL
140752 : bvule(140732, 140725) : BOOL
140753 : and(140751, 140752) : BOOL
140754 : not(140753) : BOOL
140755 : andnot1(140749, 140754) : BOOL
140750 : and(140747, 140755) : BOOL
140756 : and(140738, 140750) : BOOL
258 : symbol.1 : BV:32
140757 : 3 { 0x3 +1.35e129 } : BV:32
140758 : bvand(258, 140757) : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
140759 : eq(140758, 140276) : BOOL
140375 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
140760 : bvand(140375, 140757) : BV:32
140761 : eq(140760, 140276) : BOOL
140762 : and(140759, 140761) : BOOL
140763 : and(140756, 140762) : BOOL
140764 : eq(258, 140724) : BOOL
140765 : eq(140375, 140731) : BOOL
140766 : and(140764, 140765) : BOOL
140767 : and(140763, 140766) : BOOL
65794 : dst_symbol_addr.1 : BV:32
140768 : eq(258, 65794) : BOOL
140769 : and(140767, 140768) : BOOL
140374 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140286 : 1 { 0x1 +1.11e129 } : BV:32
140383 : memlabel-mem-may-straddle-symbol.2-heap : MEMLABEL
140770 : region_agrees_with_memlabel(140374, 140276, 140286, 140383) : BOOL
140771 : and(140769, 140770) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #2
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #2.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #2.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #2.pred
=Comment
equal-arg0
=LhsExpr
140273 : input.spec-%var-n-1 : BV:32
140368 : input.dst.llvm-%n : BV:32
140772 : eq(140273, 140368) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry done
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry assume #0
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry assume #0.ec
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry assume #0.pred
=Comment
merged-predicate
=LhsExpr
140552 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
140368 : input.dst.llvm-%n : BV:32
140553 : bvult(140552, 140368) : BOOL
140275 : 1 { 0x1 } : BOOL
258 : symbol.1 : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
140477 : isgepoffset(258, 140276) : BOOL
140478 : 4 { 0x4 +1.0e1025 } : BV:64
140399 : 32 { 0x20 +1.0e1025 } : INT
140562 : bvsign_ext(140552, 140399) : BV:64
140647 : bvmul(140478, 140562) : BV:64
140403 : 63 { 0x3f +1.0e1025 } : INT
140648 : bvextract(140647, 140403, 140399) : BV:32
140652 : eq(140276, 140648) : BOOL
140341 : 4 { 0x4 +1.0e1025 } : INT
140654 : isindexforsize(140652, 140341) : BOOL
140338 : 4 { 0x4 +1.47e129 } : BV:32
140611 : bvmul(140338, 140552) : BV:32
140614 : bvadd(258, 140611) : BV:32
140656 : isgepoffset(140614, 140611) : BOOL
140661 : and(140275, 140477, 140654, 140656) : BOOL
140626 : islangaligned(140614, 140341) : BOOL
142685 : and(140661, 140626) : BOOL
142686 : eq(142685, 140275) : BOOL
142699 : implies(140553, 142686) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry done
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d assume #0
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d assume #0.ec
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d assume #0.pred
=Comment
undef-behavioursome.edge.Lfor.end%1%d=>E0%0%d
=LhsExpr
140552 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
140368 : input.dst.llvm-%n : BV:32
140553 : bvult(140552, 140368) : BOOL
140723 : not(140553) : BOOL
140275 : 1 { 0x1 } : BOOL
258 : symbol.1 : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
140477 : isgepoffset(258, 140276) : BOOL
140640 : and(140275, 140477) : BOOL
147843 : eq(140640, 140275) : BOOL
147844 : implies(140723, 147843) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d done
cg.assumes_around_edge done
=corr_graph_done
=bv_rank_map
=bv_rank at L0%0%d_L0%0%d
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=bv_rank at L3%6%bbentry_Lfor.cond%1%bbentry
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 5
=bv_rank at E0%0%d_E0%0%d
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=cg_with_rank done
=cg_with_backtracker done
=asm filename

=cg_with_asm_annotation done
