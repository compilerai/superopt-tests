argv[0] = /home/indrajit/scratch/repos/superopt-project/usr/local/bin/eq32
argv[1] = --disable-dst-to-src-submap
argv[2] = --smt-query-timeout=5
argv[3] = --tmpdir-path=par_tmpdir
argv[4] = --proof=couple7.proof
argv[5] = --spec-iospecs=couple7.iospecs
argv[6] = couple7.spec
argv[7] = couple7.c
Query dir: /tmp/smt-solver-tmp-files/indrajit.2708079
argv[0] = /home/indrajit/scratch/repos/superopt-project/usr/local/bin/clang
argv[1] = -Xclang
argv[2] = -disable-llvm-passes
argv[3] = -Xclang
argv[4] = -disable-O0-optnone
argv[5] = -c
argv[6] = -g
argv[7] = -emit-llvm
argv[8] = -O0
argv[9] = /home/indrajit/scratch/repos/superopt-project/superopt-tests/spec-tests/couple7.c
argv[10] = -o
argv[11] = par_tmpdir/couple7.c.bc.tmp
argv[12] = -m32

argv[0] = /home/indrajit/scratch/repos/superopt-project/usr/local/bin/llvm2tfg
argv[1] = --xml-output-format
argv[2] = text-color
argv[3] = -f
argv[4] = ALL
argv[5] = --call-context-depth
argv[6] = 0
argv[7] = --always-use-call-context-any
argv[8] = --src-etfg
argv[9] = par_tmpdir/couple7.spec.etfg
argv[10] = par_tmpdir/couple7.c.bc
argv[11] = -o
argv[12] = par_tmpdir/couple7.c.dst.etfg
<MSG>0:00 : Converting LLVM IR bitcode to Transfer Function Graph (TFG) for function foo</MSG>

tfg_get_simplified_edge_cond_for_edge: num_starts 184 time spent: 0:0:0 [0.000361s total; 0.000002 per start]
tfg_get_simplified_assumes_for_edge: num_starts 192 time spent: 0:0:0 [0.000340s total; 0.000002 per start]
expr_label_memlabels_using_memlabel_map: num_starts 2424 time spent: 0:0:0 [0.013997s total; 0.000006 per start]
expr_simplify_solver: num_starts 148 time spent: 0:0:0 [0.018897s total; 0.000128 per start]
expr_simplify_syntactic: num_starts 148 time spent: 0:0:0 [0.026531s total; 0.000179 per start]
expr_simplify_select_on_store: num_starts 8 time spent: 0:0:0 [0.022195s total; 0.002774 per start]
expr_simplify_using_lhs_set_helper: num_starts 124 time spent: 0:0:0 [0.049883s total; 0.000402 per start]
expr_simplify_using_lhs_set_visit_function: num_starts 406 time spent: 0:0:0 [0.049501s total; 0.000122 per start]
expr_simplify_sort_args_to_canonicalize: num_starts 147 time spent: 0:0:0 [0.000612s total; 0.000004 per start]
expr_simplify_eq: num_starts 12 time spent: 0:0:0 [0.000163s total; 0.000014 per start]
expr_simplify_not: num_starts 2 time spent: 0:0:0 [0.000006s total; 0.000003 per start]
expr_simplify_ite: num_starts 4 time spent: 0:0:0 [0.000513s total; 0.000128 per start]
canonicalize_expr_tree: num_starts 85 time spent: 0:0:0 [0.001600s total; 0.000019 per start]
expr_simplify_memalloc_using_memlabel: num_starts 5 time spent: 0:0:0 [0.000019s total; 0.000004 per start]
expr_simplify_select_on_store_visit_function: num_starts 8 time spent: 0:0:0 [0.021899s total; 0.002737 per start]
get_arithmetic_addsub_atoms: num_starts 124 time spent: 0:0:0 [0.000095s total; 0.000001 per start]
expr_linear_relation_holds_visit: num_starts 250 time spent: 0:0:0 [0.003290s total; 0.000013 per start]
expr_is_consts_struct_constant: num_starts 3220 time spent: 0:0:0 [0.001981s total; 0.000001 per start]
expr_do_simplify_helper: num_starts 5368 time spent: 0:0:0 [0.054886s total; 0.000010 per start]
expr_do_simplify_helper_cache: num_starts 5368 time spent: 0:0:0 [0.003973s total; 0.000001 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor_cache: num_starts 36 time spent: 0:0:0 [0.000004s total; 0.000000 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor: num_starts 36 time spent: 0:0:0 [0.000183s total; 0.000005 per start]
array_constant_equals: num_starts 19 time spent: 0:0:0 [0.000043s total; 0.000002 per start]
combo_dfa_xfer_and_meet: num_starts 221 time spent: 0:0:0 [0.334067s total; 0.001512 per start]
alias_val_xfer_and_meet: num_starts 221 time spent: 0:0:0 [0.072335s total; 0.000327 per start]
get_sprel_map_from_avail_exprs: num_starts 268 time spent: 0:0:0 [0.038548s total; 0.000144 per start]
update_memlabels_for_memslot_locs: num_starts 46 time spent: 0:0:0 [0.000253s total; 0.000006 per start]
populate_gen_and_kill_sets_for_edge: num_starts 442 time spent: 0:0:0 [0.025136s total; 0.000057 per start]
compute_simplified_loc_exprs_for_edge: num_starts 1089 time spent: 0:0:0 [0.080096s total; 0.000074 per start]
compute_locs_definitely_written_on_edge: num_starts 442 time spent: 0:0:0 [0.000192s total; 0.000000 per start]
get_locs_potentially_read_in_expr_using_locs_map: num_starts 98 time spent: 0:0:0 [0.009183s total; 0.000094 per start]
edge_update_memlabel_map_for_mlvars: num_starts 221 time spent: 0:0:0 [0.003553s total; 0.000016 per start]
add_new_locs_based_on_edge: num_starts 221 time spent: 0:0:0 [0.046730s total; 0.000211 per start]
expand_locset_to_include_slots_for_memmask: num_starts 141 time spent: 0:0:0 [0.000548s total; 0.000004 per start]
num_syntactic_match_tests = 0.
num_execution_tests = 0.
num_boolean_tests = 0.
fingerprinting rate: -nan per second (total), -nan per second (itable_enumerate_timer), -nan per second (excluding execution/boolean tests).

timers:
alias_val_t::constructor_with_map_arg.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_execution_constructor.src.spec.foo.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_paths_constructor.src.spec.foo.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_proofs_constructor.src.spec.foo.: 1e-06s (num_starts 1; 0.0000s/start)
set_string_contents_for_touched_symbols_at_zero_offset.: 1e-06s (num_starts 1; 0.0000s/start)
tfg_constructor.src.spec.foo.after_populate_assumes_around_edge.: 1e-06s (num_starts 1; 0.0000s/start)
tfg_llvm_interpret_intrinsic_fcalls.: 1e-06s (num_starts 1; 0.0000s/start)
context_constructor.init.: 2e-06s (num_starts 1; 0.0000s/start)
graph_with_ce_constructor.src.spec.foo.: 2e-06s (num_starts 1; 0.0000s/start)
graph_with_points_constructor.src.spec.foo.: 2e-06s (num_starts 1; 0.0000s/start)
remove_function_name_from_symbols.: 2e-06s (num_starts 1; 0.0000s/start)
graph_with_guessing_constructor.src.spec.foo.: 8e-06s (num_starts 1; 0.0000s/start)
add_extra_node_at_start_pc.: 2.9e-05s (num_starts 1; 0.0000s/start)
get_lr_status_for_loc_ids.: 2.9e-05s (num_starts 8; 0.0000s/start)
get_intersected_lr_status.: 3e-05s (num_starts 1; 0.0000s/start)
context_constructor.solver.: 3.1e-05s (num_starts 1; 0.0000s/start)
add_assumes_to_start_edge.: 3.8e-05s (num_starts 1; 0.0000s/start)
context_constructor.: 3.8e-05s (num_starts 1; 0.0000s/start)
lr_status_meet.: 8.6e-05s (num_starts 117; 0.0000s/start)
main.3.: 0.000106s (num_starts 1; 0.0001s/start)
populate_lr_status_for_sprel_locs_map.calling.compute_lr_status_for_expr.: 0.000112s (num_starts 6; 0.0000s/start)
expr_is_hidden_reg.: 0.000117s (num_starts 123; 0.0000s/start)
expr_is_callee_save_const.: 0.000131s (num_starts 127; 0.0000s/start)
compute_sprel_relations.: 0.000164s (num_starts 1; 0.0002s/start)
propagate_sprels.: 0.000171s (num_starts 1; 0.0002s/start)
tfg::populate_loc_definedness.set_loc_definedness().: 0.000212s (num_starts 2; 0.0001s/start)
graph_locs_add_all_specvars.: 0.000218s (num_starts 1; 0.0002s/start)
determinize_value_expr_map.: 0.000225s (num_starts 288; 0.0000s/start)
graph_locs_add_exvregs_for_edge.: 0.000266s (num_starts 73; 0.0000s/start)
populate_locid2expr_map.: 0.000305s (num_starts 2; 0.0002s/start)
graph_locs_add_all_exvregs.: 0.00032s (num_starts 1; 0.0003s/start)
graph_locs_add_local_vars_for_edge.: 0.000343s (num_starts 73; 0.0000s/start)
graph_locs_add_all_local_vars.: 0.000396s (num_starts 1; 0.0004s/start)
populate_memlabel_map.visit1.calling.compute_lr_status_for_expr.: 0.000425s (num_starts 8; 0.0001s/start)
sp_version_relations_val_t::compute_transitive_closure.: 0.000455s (num_starts 45; 0.0000s/start)
tfg::populate_loc_definedness.post_dfa.: 0.000558s (num_starts 2; 0.0003s/start)
expr_represents_llvm_undef.: 0.000773s (num_starts 129; 0.0000s/start)
graph_locs_add_all_llvmvars.: 0.000897s (num_starts 1; 0.0009s/start)
canonicalize_llvm_nextpcs.: 0.001092s (num_starts 1; 0.0011s/start)
graph_with_aliasing_constructor.src.spec.foo.: 0.001147s (num_starts 1; 0.0011s/start)
tfg_llvm_t::tfg_llvm_populate_varname_lr_status.: 0.001236s (num_starts 1; 0.0012s/start)
sp_version_relations_val_t::generate_vals_from_gen_set.: 0.001312s (num_starts 221; 0.0000s/start)
populate_simplified_to_state.: 0.001507s (num_starts 3; 0.0005s/start)
def_analysis::xfer_and_meet.: 0.001531s (num_starts 146; 0.0000s/start)
tfg_llvm_t::tfg_llvm_fill_remaining_llvm_to_source_mappings_using_avail_exprs.: 0.00198s (num_starts 1; 0.0020s/start)
graph_with_locs_constructor.src.spec.foo.: 0.002102s (num_starts 1; 0.0021s/start)
sp_version_relations_val_t::meet.: 0.002204s (num_starts 4056; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.post_dfa.: 0.002285s (num_starts 1; 0.0023s/start)
tfg::collect_assumes_around_edge.: 0.00235s (num_starts 192; 0.0000s/start)
populate_exit_return_values_for_llvm_method.: 0.002377s (num_starts 1; 0.0024s/start)
graph_add_location_slots_using_state_mem_acc_map.: 0.002606s (num_starts 221; 0.0000s/start)
graph_with_edge_structures_constructor.src.spec.foo.: 0.002622s (num_starts 1; 0.0026s/start)
expr_linear_relation_holds::visit.var.: 0.002642s (num_starts 129; 0.0000s/start)
edge_update_memlabel_map_for_mlvars.populate_memlabel_map.: 0.003286s (num_starts 221; 0.0000s/start)
compute_z3_expr.: 0.003454s (num_starts 80; 0.0000s/start)
query:convert_from_z3.: 0.003616s (num_starts 80; 0.0000s/start)
expr_substitute_using_available_exprs_submap.: 0.004246s (num_starts 147; 0.0000s/start)
graph_visit_exprs.: 0.00462s (num_starts 4; 0.0012s/start)
graph_with_simplified_assets_constructor.src.spec.foo.: 0.004878s (num_starts 1; 0.0049s/start)
populate_transitive_closure.: 0.005812s (num_starts 1; 0.0058s/start)
graph_with_predicates_constructor.src.spec.foo.: 0.006497s (num_starts 1; 0.0065s/start)
compute_lr_status_for_expr.: 0.00686s (num_starts 131; 0.0001s/start)
query:convert_to_z3.: 0.006881s (num_starts 80; 0.0001s/start)
compute_new_lr_status_on_locs.calling.compute_lr_status_for_expr.: 0.007055s (num_starts 117; 0.0001s/start)
compute_new_lr_status_on_locs.loc_lr_status.simplify_and_compute_lr_status.: 0.007292s (num_starts 117; 0.0001s/start)
tfg_llvm_t::tfg_llvm_compute_pc_to_llvm_to_source_varname_map.: 0.007561s (num_starts 1; 0.0076s/start)
tfg_constructor.src.spec.foo.after_transitive_closure.: 0.007828s (num_starts 1; 0.0078s/start)
tfg_constructor.src.spec.foo.post_parsing.: 0.007833s (num_starts 1; 0.0078s/start)
tfg_constructor.src.spec.foo.after_string_contents.: 0.007838s (num_starts 1; 0.0078s/start)
tfg_constructor.src.spec.foo.after_compute_max_memlabel_varnum.: 0.007843s (num_starts 1; 0.0078s/start)
tfg_constructor.src.spec.foo.: 0.007847s (num_starts 1; 0.0078s/start)
populate_simplified_assets.: 0.009095s (num_starts 6; 0.0015s/start)
populate_dominator_and_postdominator_relations.: 0.009413s (num_starts 2; 0.0047s/start)
rdefs_locs_ssa_analysis::xfer_and_meet.: 0.011133s (num_starts 160; 0.0001s/start)
create_closure_matrix.: 0.011481s (num_starts 267; 0.0000s/start)
graph_to_stream.: 0.011817s (num_starts 1; 0.0118s/start)
expr_contains_only_constants_or_sp_versions_or_count_sort_vars.: 0.012088s (num_starts 4242; 0.0000s/start)
query:simplify-z3.: 0.013354s (num_starts 165; 0.0001s/start)
graph_identify_back_edges.: 0.013971s (num_starts 5; 0.0028s/start)
graph_identify_natural_loops.: 0.014835s (num_starts 5; 0.0030s/start)
tfg::populate_loc_definedness.before_solve.: 0.015196s (num_starts 2; 0.0076s/start)
tfg::populate_loc_definedness.before_initialize.: 0.015851s (num_starts 2; 0.0079s/start)
tfg::populate_loc_definedness.: 0.016394s (num_starts 2; 0.0082s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.sprel.: 0.018892s (num_starts 2424; 0.0000s/start)
compute_new_lr_status_on_locs.: 0.020019s (num_starts 221; 0.0001s/start)
populate_locs_potentially_modified_on_edge.: 0.021259s (num_starts 3; 0.0071s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::sp_version_relations_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.021826s (num_starts 221; 0.0001s/start)
find_dominators.: 0.022045s (num_starts 9; 0.0024s/start)
populate_branch_affecting_locs.: 0.022154s (num_starts 2; 0.0111s/start)
compute_regions.: 0.023694s (num_starts 5; 0.0047s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_solve.: 0.024496s (num_starts 1; 0.0245s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_initialize.: 0.02479s (num_starts 1; 0.0248s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.: 0.025361s (num_starts 1; 0.0254s/start)
populate_auxilliary_structures_dependent_on_locs.: 0.030373s (num_starts 3; 0.0101s/start)
liveness_analysis_conservative::xfer_and_meet.: 0.033585s (num_starts 234; 0.0001s/start)
tfg_preprocess.dst.llvm.foo.: 0.035698s (num_starts 1; 0.0357s/start)
tfg::tfg_preprocess.: 0.035701s (num_starts 1; 0.0357s/start)
get_tfg.: 0.044309s (num_starts 1; 0.0443s/start)
get_function_tfg_map.foo.: 0.044345s (num_starts 1; 0.0443s/start)
get_function_tfg_map.: 0.044348s (num_starts 1; 0.0443s/start)
avail_exprs_val_t::generate_vals_from_gen_set.: 0.047677s (num_starts 221; 0.0002s/start)
expr_do_simplify_using_lhs_set_and_precond.: 0.050006s (num_starts 124; 0.0004s/start)
create_sp_version_relations_lattice_at_pc.: 0.050363s (num_starts 267; 0.0002s/start)
main.2.: 0.05609s (num_starts 1; 0.0561s/start)
populate_loc_liveness.: 0.05867s (num_starts 2; 0.0293s/start)
expr_label_memlabels_using_memlabel_map_visitor.simplify.: 0.069984s (num_starts 2424; 0.0000s/start)
ftmap_pointsto_analysis_combo_dfa_t.alias_val_xfer_and_meet.: 0.072716s (num_starts 221; 0.0003s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.model.: 0.073043s (num_starts 2424; 0.0000s/start)
graph_per_loc_dfa_val_t<avail_exprs_val_t>::meet.: 0.08167s (num_starts 221; 0.0004s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.: 0.090636s (num_starts 2424; 0.0000s/start)
avail_exprs_create_submap.: 0.120298s (num_starts 663; 0.0002s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::avail_exprs_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.145005s (num_starts 221; 0.0007s/start)
tfg_postprocess_after_pointsto_analysis.: 0.151402s (num_starts 1; 0.1514s/start)
tfg_llvm_t::tfg_postprocess_after_pointsto_analysis.: 0.19429s (num_starts 1; 0.1943s/start)
ftmap_pointsto_analysis_combo_dfa_t.ftmap_dfa_flow_insensitive_xfer_and_meet.: 0.334325s (num_starts 221; 0.0015s/start)
ftmap_run_pointsto_analysis.: 0.570865s (num_starts 1; 0.5709s/start)
parse_consts_db.: 6.88772s (num_starts 1; 6.8877s/start)
main.: 7.60708s (num_starts 1; 7.6071s/start)

counters:

flags:

info:


<MSG>0:00 : Converting Spec to Transfer Function Graph (TFG)...</MSG>
<MSG>0:07 : Converting C source code to LLVM IR bitcode...</MSG>
<MSG>0:14 : Converting LLVM IR bitcode to Transfer Function Graph (TFG)...</MSG>
<MSG>0:22 : Searching for equivalence at unroll factor 1</MSG>
<MSG>0:22 : Reading in SPEC-LLVM I/O specification from file couple7.iospecs...</MSG>
<MSG>0:22 : Computing equivalence for function: foo...</MSG>
<MSG>0:22 : Constructing SSA for SPEC TFG...</MSG>
<MSG>0:22 : Constructing SSA for LLVM TFG...</MSG>
<MSG>0:23 : Finished SSA construction for both TFGs...</MSG>
<MSG>0:23 : Computing equivalence of the two TFGs ( SPEC and LLVM )...</MSG>
<MSG>0:23 : Chose (after CE propagation) product-TFG foo (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: nullptr
  src-full-pathset: nullptr
<MSG>0:23 : product-TFG foo: Enumerating correlations for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : Considering 1 paths to src pc L3%7%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : Attempting correlation of src pathset L0%0%d=>L3%7%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : Found 1 feasible correlations for paths to src pc L3%7%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : Considering 1 paths to src pc L3%11%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : Attempting correlation of src pathset L0%0%d=>L3%11%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : Found 1 feasible correlations for paths to src pc L3%11%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : Considering 1 paths to src pc L3%19%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : Attempting correlation of src pathset L0%0%d=>L3%19%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : Found 1 feasible correlations for paths to src pc L3%19%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : Considering 1 paths to src pc L3%23%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : Attempting correlation of src pathset L0%0%d=>L3%23%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : Found 1 feasible correlations for paths to src pc L3%23%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : product-TFG foo: Found 4 correlations for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : product-TFG foo created 4 possibilities in group foo.A...</MSG>
<MSG>0:23 : Chose (for CE propagation) product-TFG foo.A1 (d:0, s:0, sp: 0) from a frontier of size 4...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%7%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:23 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1...</MSG>
<MSG>0:23 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1...</MSG>
<MSG>0:23 : Creating ssa-path for the src-tfg path L0%0%d --> L3%7%bbentry ending at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:23 : Adding a CG edge composition using the src path L0%0%d --> L3%7%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:23 : Identifying common alloc-deallocs in the src path L0%0%d --> L3%7%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry
</MSG>
<MSG>0:23 : Identified no common alloc-deallocs in the src path L0%0%d --> L3%7%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:23 : Adding new edge to the product-TFG foo.A1 for fromPC L0%0%d_L0%0%d and toPC L3%7%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%7%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A1: Computing loop hoisting select expressions at toPC L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A1: Computing loop hoisting non-linear expressions at toPC L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A1: Adding node L3%7%bbentry_Lfor.cond%1%bbentry to the product-TFG...</MSG>
<MSG>0:23 : foo.A1: Getting alloca-ptrs on edge L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A1: Found no alloca-ptrs on edge L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A1: Adding edge L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:23 : foo.A1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:23 : foo.A1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:23 : foo.A1: Propagated 2 out of 2 counter-examples across edge L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry</MSG>
<MSG>0:23 : foo.A1: Added the 2 propagated CEs at PC L3%7%bbentry_Lfor.cond%1%bbentry and propagated further.
</MSG>
<MSG>0:23 : foo.A1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:23 : foo.A1: Finished executing CG's add edge function...</MSG>
<MSG>0:23 : foo.A1: Computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A1: Done computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : Done adding new edge to the product-TFG foo.A1 for fromPC L0%0%d_L0%0%d and toPC L3%7%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%7%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : Done adding a CG edge composition using the src path L0%0%d --> L3%7%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:23 : Added correlation to the product-TFG foo.A1 (d:0, s:0, sp: 0) and created a correlation entry...</MSG>
<MSG>0:23 : Chose (after CE propagation) product-TFG foo.A1 (d:0, s:0, sp: 0) from a frontier of size 4...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 1 counterexamples (for correlating 7 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%7%bbentry[mu 1, delta {1,0}]
<MSG>0:23 : foo.A1: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:23 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A1: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:23 : foo.A1: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>0:23 : foo.A1: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>0:23 : foo.A1: Relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:23 : foo.A1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:23 : foo.A1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:25 : foo.A1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht10-prove_trivial4-prove6...</MSG>
<MSG>0:25 : foo.A1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:25 : foo.A1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:25 : foo.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:25 : foo.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>0:25 : foo.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:26 : foo.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:26 : foo.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:26 : foo.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:26 : foo.A1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 5 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:26 : foo.A1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>0:26 : foo.A1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:29 : foo.A1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht7-prove_trivial0-prove7...</MSG>
<MSG>0:29 : foo.A1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:29 : foo.A1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:29 : foo.A1: Done relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>0:29 : foo.A1: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>0:29 : foo.A1 (d:3, s:0, sp: 0): checked newly added edge and inferred invariants...</MSG>
<MSG>0:29 : foo.A1 (d:3, s:0, sp: 5): Chosen CG is no longer the most promising correlation entry; returning delayed-exploration...</MSG>
<MSG>0:29 : Chosen product-TFG foo.A1 will be explored later...</MSG>
<MSG>0:29 : Decided to explore product-TFG later after re-evaluating its best-first-search rank...</MSG>
<MSG>0:29 : Chose (for CE propagation) product-TFG foo.A2 (d:0, s:0, sp: 0) from a frontier of size 4...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%11%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:29 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A2...</MSG>
<MSG>0:29 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A2...</MSG>
<MSG>0:29 : Creating ssa-path for the src-tfg path L0%0%d --> L3%11%bbentry ending at L3%11%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:29 : Adding a CG edge composition using the src path L0%0%d --> L3%11%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:29 : Identifying common alloc-deallocs in the src path L0%0%d --> L3%11%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry
</MSG>
<MSG>0:29 : Identified no common alloc-deallocs in the src path L0%0%d --> L3%11%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:29 : Adding new edge to the product-TFG foo.A2 for fromPC L0%0%d_L0%0%d and toPC L3%11%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%11%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:29 : foo.A2: Computing loop hoisting select expressions at toPC L3%11%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:29 : foo.A2: Computing loop hoisting non-linear expressions at toPC L3%11%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:29 : foo.A2: Adding node L3%11%bbentry_Lfor.cond%1%bbentry to the product-TFG...</MSG>
<MSG>0:29 : foo.A2: Getting alloca-ptrs on edge L0%0%d_L0%0%d=>L3%11%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:29 : foo.A2: Found no alloca-ptrs on edge L0%0%d_L0%0%d=>L3%11%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:29 : foo.A2: Adding edge L0%0%d_L0%0%d=>L3%11%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:29 : foo.A2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:29 : foo.A2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:29 : foo.A2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:29 : foo.A2: marking unstable at L0%0%d_L0%0%d due to failing condition:
wfcond.from_pcL0%0%d_L0%0%d.to_pcL3%11%bbentry_Lfor.cond%1%bbentry-dst-edgecond-implies-src-edgecond
140275 : 1 { 0x1 } : BOOL                          : true
158485 : not(140275) : BOOL                        : false
140273 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]] : ( map(lambda(Lambda214Var, ite(and(bvule(0, Lambda214Var), bvule(Lambda214Var, 4294967295)), false, false)), lambda(Lambda215Var, map(lambda(Lambda216Var, false), lambda(Lambda217Var, 0)))) )
140276 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140569 : map_get(140273, 140276) : SUM[UNIT,MAP[BV:32 -> BV:32]] : ( sum(ite(ite(and(bvule(0, 0), bvule(0, 4294967295)), false, false), 1, 0), unit, map(lambda(Lambda3531Var, false), lambda(Lambda3532Var, 0))) )
140283 : 1 { 0x1 +1.0e1025 } : INT                 : 1
158483 : sum_is(140569, 140283) : BOOL             : false
158486 : or(158485, 158483) : BOOL                 : false

ce =
=counter_example_begin z3v487.ce4 128d2f26205d5146566fa26de1d942b
=input.spec-%var-x-1
1 : Lambda214Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda215Var : BV:32
11 : Lambda216Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda217Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda231Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda232Var : BV:32
11 : Lambda233Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda234Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 62985987 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 62985988; 62985991 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 62985992; 1082155007 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1082155008; 1082155011 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1082155012; 1279275583 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1279275584; 1279275587 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1279275588; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1082155008 { 0x40806000 +1.292968e2 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 62985988 { 0x3c11704 +1.50851488e136 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1279275584 { 0x4c403240 +1.50153350e25 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 62985988 { 0x3c11704 +1.50851488e136 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 62985991 { 0x3c11707 +1.50851523e136 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1279275584 { 0x4c403240 +1.50153350e25 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1279275587 { 0x4c403243 +1.50153386e25 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1082155008 { 0x40806000 +1.292968e2 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1082155011 { 0x40806003 +1.293004e2 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1368629833
=counter_example_end


failcond-expr = or(not(true), sum_is(map_get(input.spec-%var-x-1, 0), 1)):
1 : 1 { 0x1 } : BOOL
2 : not(1) : BOOL
3 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : map_get(3, 4) : SUM[UNIT,MAP[BV:32 -> BV:32]]
6 : 1 { 0x1 +1.0e1025 } : INT
7 : sum_is(5, 6) : BOOL
8 : or(2, 7) : BOOL
</MSG>
<MSG>0:29 : foo.A2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:29 : foo.A2: Finished executing CG's add edge function...</MSG>
<MSG>0:29 : foo.A2: Computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%11%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:29 : foo.A2: Done computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%11%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:29 : Done adding new edge to the product-TFG foo.A2 for fromPC L0%0%d_L0%0%d and toPC L3%11%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%11%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:29 : Done adding a CG edge composition using the src path L0%0%d --> L3%11%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:29 : Failed correlation of src pathset L0%0%d=>L3%11%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d: failcond = wfcond.from_pcL0%0%d_L0%0%d.to_pcL3%11%bbentry_Lfor.cond%1%bbentry-dst-edgecond-implies-src-edgecond
140275 : 1 { 0x1 } : BOOL                          : true
158485 : not(140275) : BOOL                        : false
140273 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]] : ( map(lambda(Lambda214Var, ite(and(bvule(0, Lambda214Var), bvule(Lambda214Var, 4294967295)), false, false)), lambda(Lambda215Var, map(lambda(Lambda216Var, false), lambda(Lambda217Var, 0)))) )
140276 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140569 : map_get(140273, 140276) : SUM[UNIT,MAP[BV:32 -> BV:32]] : ( sum(ite(ite(and(bvule(0, 0), bvule(0, 4294967295)), false, false), 1, 0), unit, map(lambda(Lambda3531Var, false), lambda(Lambda3532Var, 0))) )
140283 : 1 { 0x1 +1.0e1025 } : INT                 : 1
158483 : sum_is(140569, 140283) : BOOL             : false
158486 : or(158485, 158483) : BOOL                 : false

ce =
=counter_example_begin z3v487.ce4 128d2f26205d5146566fa26de1d942b
=input.spec-%var-x-1
1 : Lambda214Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda215Var : BV:32
11 : Lambda216Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda217Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda231Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda232Var : BV:32
11 : Lambda233Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda234Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 62985987 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 62985988; 62985991 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 62985992; 1082155007 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1082155008; 1082155011 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1082155012; 1279275583 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1279275584; 1279275587 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1279275588; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1082155008 { 0x40806000 +1.292968e2 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 62985988 { 0x3c11704 +1.50851488e136 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1279275584 { 0x4c403240 +1.50153350e25 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 62985988 { 0x3c11704 +1.50851488e136 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 62985991 { 0x3c11707 +1.50851523e136 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1279275584 { 0x4c403240 +1.50153350e25 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1279275587 { 0x4c403243 +1.50153386e25 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1082155008 { 0x40806000 +1.292968e2 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1082155011 { 0x40806003 +1.293004e2 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1368629833
=counter_example_end


</MSG>
<MSG>0:29 : Discovered that the correlation was useless for the product-TFG foo.A2 (d:0, s:0, sp: 0)...</MSG>
<MSG>0:29 : Chose (after CE propagation) product-TFG foo.A1 (d:3, s:0, sp: 5) from a frontier of size 1...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 11 counterexamples (for correlating 7 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%7%bbentry[mu 1, delta {1,0}]
<MSG>0:29 : foo.A1: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:29 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:29 : foo.A1: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:29 : foo.A1: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>0:29 : foo.A1: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>0:29 : foo.A1: Relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:29 : foo.A1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:29 : foo.A1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:29 : foo.A1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 8 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:29 : foo.A1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht5-prove_trivial4-prove1...</MSG>
<MSG>0:29 : foo.A1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:29 : foo.A1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:29 : foo.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:29 : foo.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:29 : foo.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:29 : foo.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:29 : foo.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:29 : foo.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:29 : foo.A1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 5 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:29 : foo.A1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>0:29 : foo.A1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:29 : foo.A1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>0:29 : foo.A1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:29 : foo.A1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:29 : foo.A1: Done relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged ...</MSG>
<MSG>0:29 : foo.A1: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>0:29 : foo.A1 (d:3, s:0, sp: 5): checked newly added edge and inferred invariants...</MSG>
<MSG>0:29 : foo.A1 (d:3, s:0, sp: 5): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:30 : product-TFG foo.A1: Enumerating correlations for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] starting at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:30 : Considering 2 paths to src pc L3%7%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:30 : Attempting correlation of src pathset L3%7%bbentry=>L3%7%bbentry[mu 0, delta {0,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:30 : Attempting correlation of src pathset L3%7%bbentry=>L3%7%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:30 : Found 2 feasible correlations for paths to src pc L3%7%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:30 : Considering 1 paths to src pc L3%11%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:30 : Attempting correlation of src pathset L3%7%bbentry=>L3%11%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:30 : Found 1 feasible correlations for paths to src pc L3%11%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:30 : Considering 1 paths to src pc L3%19%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:30 : Attempting correlation of src pathset L3%7%bbentry=>L3%19%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:30 : Found 1 feasible correlations for paths to src pc L3%19%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:30 : Considering 1 paths to src pc L3%23%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:30 : Attempting correlation of src pathset L3%7%bbentry=>L3%23%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:30 : Found 1 feasible correlations for paths to src pc L3%23%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:30 : product-TFG foo.A1: Found 5 correlations for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] starting at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:30 : product-TFG foo.A1 created 5 possibilities in group foo.A1.B...</MSG>
<MSG>0:30 : Chose (for CE propagation) product-TFG foo.A1.B3 (d:3, s:0, sp: 5) from a frontier of size 5...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 13 counterexamples (for correlating 7 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%11%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:30 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B3...</MSG>
<MSG>0:30 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B3...</MSG>
<MSG>0:30 : Creating ssa-path for the src-tfg path L3%7%bbentry --> L3%11%bbentry ending at L3%11%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:30 : Adding a CG edge composition using the src path L3%7%bbentry --> L3%11%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:30 : Identifying common alloc-deallocs in the src path L3%7%bbentry --> L3%11%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry
</MSG>
<MSG>0:30 : Identified no common alloc-deallocs in the src path L3%7%bbentry --> L3%11%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:30 : Adding new edge to the product-TFG foo.A1.B3 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%11%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%11%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>0:30 : foo.A1.B3: Computing loop hoisting select expressions at toPC L3%11%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:30 : foo.A1.B3: Computing loop hoisting non-linear expressions at toPC L3%11%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:30 : foo.A1.B3: Adding node L3%11%bbentry_Lfor.cond1%1%bbentry to the product-TFG...</MSG>
<MSG>0:30 : foo.A1.B3: Getting alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:30 : foo.A1.B3: Found no alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:30 : foo.A1.B3: Adding edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:30 : foo.A1.B3: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:30 : foo.A1.B3: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:30 : foo.A1.B3: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:30 : foo.A1.B3: Propagated 7 out of 13 counter-examples across edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry</MSG>
<MSG>0:30 : foo.A1.B3: Added the 7 propagated CEs at PC L3%11%bbentry_Lfor.cond1%1%bbentry and propagated further.
</MSG>
<MSG>0:30 : foo.A1.B3: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:30 : foo.A1.B3: Finished executing CG's add edge function...</MSG>
<MSG>0:30 : foo.A1.B3: Computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:30 : foo.A1.B3: Done computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:30 : Done adding new edge to the product-TFG foo.A1.B3 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%11%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%11%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>0:30 : Done adding a CG edge composition using the src path L3%7%bbentry --> L3%11%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:30 : Added correlation to the product-TFG foo.A1.B3 (d:6, s:0, sp: 5) and created a correlation entry...</MSG>
<MSG>0:30 : Chose (for CE propagation) product-TFG foo.A1.B4 (d:3, s:0, sp: 5) from a frontier of size 5...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 13 counterexamples (for correlating 7 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%19%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:30 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B4...</MSG>
<MSG>0:30 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B4...</MSG>
<MSG>0:30 : Creating ssa-path for the src-tfg path L3%7%bbentry --> L3%19%bbentry ending at L3%19%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:30 : Adding a CG edge composition using the src path L3%7%bbentry --> L3%19%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:30 : Identifying common alloc-deallocs in the src path L3%7%bbentry --> L3%19%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry
</MSG>
<MSG>0:30 : Identified no common alloc-deallocs in the src path L3%7%bbentry --> L3%19%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:30 : Adding new edge to the product-TFG foo.A1.B4 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%19%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%19%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>0:30 : foo.A1.B4: Computing loop hoisting select expressions at toPC L3%19%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:30 : foo.A1.B4: Computing loop hoisting non-linear expressions at toPC L3%19%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:30 : foo.A1.B4: Adding node L3%19%bbentry_Lfor.cond1%1%bbentry to the product-TFG...</MSG>
<MSG>0:31 : foo.A1.B4: Getting alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:31 : foo.A1.B4: Found no alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:31 : foo.A1.B4: Adding edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:31 : foo.A1.B4: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:31 : foo.A1.B4: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:31 : foo.A1.B4: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:32 : foo.A1.B4: Propagated 7 out of 13 counter-examples across edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry</MSG>
<MSG>0:32 : foo.A1.B4: Added the 7 propagated CEs at PC L3%19%bbentry_Lfor.cond1%1%bbentry and propagated further.
</MSG>
<MSG>0:32 : foo.A1.B4: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:32 : foo.A1.B4: Finished executing CG's add edge function...</MSG>
<MSG>0:32 : foo.A1.B4: Computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : foo.A1.B4: Done computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : Done adding new edge to the product-TFG foo.A1.B4 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%19%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%19%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : Done adding a CG edge composition using the src path L3%7%bbentry --> L3%19%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:32 : Added correlation to the product-TFG foo.A1.B4 (d:6, s:0, sp: 5) and created a correlation entry...</MSG>
<MSG>0:32 : Chose (for CE propagation) product-TFG foo.A1.B5 (d:3, s:0, sp: 5) from a frontier of size 5...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 13 counterexamples (for correlating 7 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%23%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:32 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B5...</MSG>
<MSG>0:32 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B5...</MSG>
<MSG>0:32 : Creating ssa-path for the src-tfg path L3%7%bbentry --> L3%23%bbentry ending at L3%23%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:32 : Adding a CG edge composition using the src path L3%7%bbentry --> L3%23%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:32 : Identifying common alloc-deallocs in the src path L3%7%bbentry --> L3%23%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry
</MSG>
<MSG>0:32 : Identified no common alloc-deallocs in the src path L3%7%bbentry --> L3%23%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:32 : Adding new edge to the product-TFG foo.A1.B5 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%23%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%23%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : foo.A1.B5: Computing loop hoisting select expressions at toPC L3%23%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : foo.A1.B5: Computing loop hoisting non-linear expressions at toPC L3%23%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : foo.A1.B5: Adding node L3%23%bbentry_Lfor.cond1%1%bbentry to the product-TFG...</MSG>
<MSG>0:32 : foo.A1.B5: Getting alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%23%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : foo.A1.B5: Found no alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%23%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : foo.A1.B5: Adding edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%23%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : foo.A1.B5: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:32 : foo.A1.B5: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:32 : foo.A1.B5: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:32 : foo.A1.B5: marking unstable at L3%7%bbentry_Lfor.cond%1%bbentry due to failing condition:
wfcond.from_pcL3%7%bbentry_Lfor.cond%1%bbentry.to_pcL3%23%bbentry_Lfor.cond1%1%bbentry-dst-edgecond-implies-src-edgecond
140612 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32 : 0
140383 : input.dst.llvm-%n : BV:32                 : 32
140613 : bvult(140612, 140383) : BOOL              : true
140900 : not(140613) : BOOL                        : false
140525 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]] : ( map(lambda(Lambda3831Var, ite(and(bvule(0, Lambda3831Var), bvule(Lambda3831Var, 31)), true, ite(and(bvule(32, Lambda3831Var), bvule(Lambda3831Var, 4294967295)), false, false))), lambda(Lambda3832Var, map(lambda(Lambda3833Var, false), lambda(Lambda3834Var, 0)))) )
140526 : input.spec-%var-i-0.L3%7%bbentry : BV:32  : 0
140527 : map_get(140525, 140526) : SUM[UNIT,MAP[BV:32 -> BV:32]] : ( sum(ite(ite(and(bvule(0, 0), bvule(0, 31)), true, ite(and(bvule(32, 0), bvule(0, 4294967295)), false, false)), 1, 0), unit, map(lambda(Lambda4679Var, false), lambda(Lambda4680Var, 0))) )
140283 : 1 { 0x1 +1.0e1025 } : INT                 : 1
158472 : sum_is(140527, 140283) : BOOL             : true
160707 : sum_get(140527, 140283) : MAP[BV:32 -> BV:32] : ( map(lambda(Lambda4717Var, false), lambda(Lambda4718Var, 0)) )
140276 : 0 { 0x0 +1.0e129 } : BV:32                : 0
160708 : map_get(160707, 140276) : SUM[UNIT,BV:32] : ( sum(ite(false, 1, 0), unit, 0) )
160709 : sum_is(160708, 140283) : BOOL             : false
160710 : and(158472, 160709) : BOOL                : false
160723 : or(140900, 160710) : BOOL                 : false

ce =
=counter_example_begin z3v487.ce339 85b1c7e763f5aab67620ab5752dbeb26
=input.spec-%var-x-1
1 : Lambda3814Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 31 { 0x1f +1.369e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 32 { 0x20 +1.381e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda3815Var : BV:32
18 : Lambda3816Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda3817Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda3831Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 31 { 0x1f +1.369e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 32 { 0x20 +1.381e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda3832Var : BV:32
18 : Lambda3833Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda3834Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 4; 1048579 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1048580; 1048583 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1048584; 33554439 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 33554440; 33554443 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 33554444; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1048580 { 0x100004 +1.12500047e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 32 { 0x20 +1.381e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 33554440 { 0x2000008 +1.95e133 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 33554440 { 0x2000008 +1.95e133 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 33554443 { 0x200000b +1.131e133 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1048580 { 0x100004 +1.12500047e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1048583 { 0x100007 +1.12500083e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 31 ] -> true, [ 32; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 31 ] -> true, [ 32; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1802347510
=counter_example_end


failcond-expr = or(not(bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)), and(sum_is(map_get(input.spec-%var-x-0.L3%7%bbentry, input.spec-%var-i-0.L3%7%bbentry), 1), sum_is(map_get(sum_get(map_get(input.spec-%var-x-0.L3%7%bbentry, input.spec-%var-i-0.L3%7%bbentry), 1), 0), 1))):
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
4 : not(3) : BOOL
5 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
6 : input.spec-%var-i-0.L3%7%bbentry : BV:32
7 : map_get(5, 6) : SUM[UNIT,MAP[BV:32 -> BV:32]]
8 : 1 { 0x1 +1.0e1025 } : INT
9 : sum_is(7, 8) : BOOL
10 : sum_get(7, 8) : MAP[BV:32 -> BV:32]
11 : 0 { 0x0 +1.0e129 } : BV:32
12 : map_get(10, 11) : SUM[UNIT,BV:32]
13 : sum_is(12, 8) : BOOL
14 : and(9, 13) : BOOL
15 : or(4, 14) : BOOL
</MSG>
<MSG>0:32 : foo.A1.B5: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:32 : foo.A1.B5: Finished executing CG's add edge function...</MSG>
<MSG>0:32 : foo.A1.B5: Computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%23%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : foo.A1.B5: Done computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%23%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : Done adding new edge to the product-TFG foo.A1.B5 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%23%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%23%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : Done adding a CG edge composition using the src path L3%7%bbentry --> L3%23%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:32 : Failed correlation of src pathset L3%7%bbentry=>L3%23%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry: failcond = wfcond.from_pcL3%7%bbentry_Lfor.cond%1%bbentry.to_pcL3%23%bbentry_Lfor.cond1%1%bbentry-dst-edgecond-implies-src-edgecond
140612 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32 : 0
140383 : input.dst.llvm-%n : BV:32                 : 32
140613 : bvult(140612, 140383) : BOOL              : true
140900 : not(140613) : BOOL                        : false
140525 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]] : ( map(lambda(Lambda3831Var, ite(and(bvule(0, Lambda3831Var), bvule(Lambda3831Var, 31)), true, ite(and(bvule(32, Lambda3831Var), bvule(Lambda3831Var, 4294967295)), false, false))), lambda(Lambda3832Var, map(lambda(Lambda3833Var, false), lambda(Lambda3834Var, 0)))) )
140526 : input.spec-%var-i-0.L3%7%bbentry : BV:32  : 0
140527 : map_get(140525, 140526) : SUM[UNIT,MAP[BV:32 -> BV:32]] : ( sum(ite(ite(and(bvule(0, 0), bvule(0, 31)), true, ite(and(bvule(32, 0), bvule(0, 4294967295)), false, false)), 1, 0), unit, map(lambda(Lambda4679Var, false), lambda(Lambda4680Var, 0))) )
140283 : 1 { 0x1 +1.0e1025 } : INT                 : 1
158472 : sum_is(140527, 140283) : BOOL             : true
160707 : sum_get(140527, 140283) : MAP[BV:32 -> BV:32] : ( map(lambda(Lambda4717Var, false), lambda(Lambda4718Var, 0)) )
140276 : 0 { 0x0 +1.0e129 } : BV:32                : 0
160708 : map_get(160707, 140276) : SUM[UNIT,BV:32] : ( sum(ite(false, 1, 0), unit, 0) )
160709 : sum_is(160708, 140283) : BOOL             : false
160710 : and(158472, 160709) : BOOL                : false
160723 : or(140900, 160710) : BOOL                 : false

ce =
=counter_example_begin z3v487.ce339 85b1c7e763f5aab67620ab5752dbeb26
=input.spec-%var-x-1
1 : Lambda3814Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 31 { 0x1f +1.369e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 32 { 0x20 +1.381e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda3815Var : BV:32
18 : Lambda3816Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda3817Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda3831Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 31 { 0x1f +1.369e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 32 { 0x20 +1.381e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda3832Var : BV:32
18 : Lambda3833Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda3834Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 4; 1048579 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1048580; 1048583 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1048584; 33554439 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 33554440; 33554443 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 33554444; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1048580 { 0x100004 +1.12500047e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 32 { 0x20 +1.381e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 33554440 { 0x2000008 +1.95e133 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 33554440 { 0x2000008 +1.95e133 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 33554443 { 0x200000b +1.131e133 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1048580 { 0x100004 +1.12500047e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1048583 { 0x100007 +1.12500083e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 31 ] -> true, [ 32; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 31 ] -> true, [ 32; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1802347510
=counter_example_end


</MSG>
<MSG>0:32 : Discovered that the correlation was useless for the product-TFG foo.A1.B5 (d:3, s:0, sp: 5)...</MSG>
<MSG>0:32 : Chose (for CE propagation) product-TFG foo.A1.B2 (d:3, s:0, sp: 5) from a frontier of size 4...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 13 counterexamples (for correlating 7 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%7%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:32 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B2...</MSG>
<MSG>0:32 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B2...</MSG>
<MSG>0:32 : Creating ssa-path for the src-tfg path L3%7%bbentry --> L3%7%bbentry ending at L3%7%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:32 : Adding a CG edge composition using the src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:32 : Identifying common alloc-deallocs in the src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry
</MSG>
<MSG>0:32 : Identified no common alloc-deallocs in the src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:32 : Adding new edge to the product-TFG foo.A1.B2 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%7%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : foo.A1.B2: Computing loop hoisting select expressions at toPC L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : foo.A1.B2: Computing loop hoisting non-linear expressions at toPC L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : foo.A1.B2: Adding node L3%7%bbentry_Lfor.cond1%1%bbentry to the product-TFG...</MSG>
<MSG>0:32 : foo.A1.B2: Getting alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : foo.A1.B2: Found no alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : foo.A1.B2: Adding edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : foo.A1.B2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:32 : foo.A1.B2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:32 : foo.A1.B2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:32 : foo.A1.B2: marking unstable at L3%7%bbentry_Lfor.cond%1%bbentry due to failing condition:
wfcond.from_pcL3%7%bbentry_Lfor.cond%1%bbentry.to_pcL3%7%bbentry_Lfor.cond1%1%bbentry-dst-edgecond-implies-src-edgecond
140612 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32 : 0
140383 : input.dst.llvm-%n : BV:32                 : 67108864
140613 : bvult(140612, 140383) : BOOL              : true
140900 : not(140613) : BOOL                        : false
140525 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]] : ( 159972 = bvconcat(ite(eq(bvadd(3, bvmul(4, Lambda3774Var)), 0), 242, ite(eq(bvadd(3, bvmul(4, Lambda3774Var)), 3), 241, ite(eq(bvadd(3, bvmul(4, Lambda3774Var)), 1), 127, ite(eq(bvadd(3, bvmul(4, Lambda3774Var)), 2), 253, 0)))), ite(eq(bvadd(2, bvmul(4, Lambda3774Var)), 0), 242, ite(eq(bvadd(2, bvmul(4, Lambda3774Var)), 3), 241, ite(eq(bvadd(2, bvmul(4, Lambda3774Var)), 1), 127, ite(eq(bvadd(2, bvmul(4, Lambda3774Var)), 2), 253, 0)))), ite(eq(bvadd(1, bvmul(4, Lambda3774Var)), 0), 242, ite(eq(bvadd(1, bvmul(4, Lambda3774Var)), 3), 241, ite(eq(bvadd(1, bvmul(4, Lambda3774Var)), 1), 127, ite(eq(bvadd(1, bvmul(4, Lambda3774Var)), 2), 253, 0)))), ite(eq(bvmul(4, Lambda3774Var), 0), 242, ite(eq(bvmul(4, Lambda3774Var), 3), 241, ite(eq(bvmul(4, Lambda3774Var), 1), 127, ite(eq(bvmul(4, Lambda3774Var), 2), 253, 0)))));map[159898](lambda(Lambda3773Var, ite(and(bvule(0, Lambda3773Var), bvule(Lambda3773Var, 67108863)), true, ite(and(bvule(67108864, Lambda3773Var), bvule(Lambda3773Var, 4294967295)), false, false))), lambda[159897](Lambda3774Var, map[159896](lambda(Lambda3775Var, ite(and(eq(ite(and(bvule(0, Lambda3774Var), bvule(Lambda3774Var, 67108863)), 0, ite(and(bvule(67108864, Lambda3774Var), bvule(Lambda3774Var, 67108864)), 67108864, ite(and(bvule(67108865, Lambda3774Var), bvule(Lambda3774Var, 4294967295)), 67108865, 67108865))), 0), eq(ite(and(bvule(0, Lambda3775Var), bvule(Lambda3775Var, 4095)), 0, ite(and(bvule(4097, Lambda3775Var), bvule(Lambda3775Var, 4294967295)), 4097, ite(and(bvule(4096, Lambda3775Var), bvule(Lambda3775Var, 4096)), 4096, 4096))), 0)), true, false)), lambda[159895](Lambda3776Var, ite[160051](and(eq(Lambda3774Var, 0), eq(Lambda3776Var, 0)), 0, bvconcat[160050](ite[160022](eq[160015](bvadd[160014](3, bvmul(4, Lambda3776Var), 159972), 0), 242, ite[160021](eq[160016](bvadd[160014](3, bvmul(4, Lambda3776Var), 159972), 3), 241, ite[160020](eq[160017](bvadd[160014](3, bvmul(4, Lambda3776Var), 159972), 1), 127, ite[160019](eq[160018](bvadd[160014](3, bvmul(4, Lambda3776Var), 159972), 2), 253, 0)))), ite[160031](eq[160024](bvadd[160023](2, bvmul(4, Lambda3776Var), 159972), 0), 242, ite[160030](eq[160025](bvadd[160023](2, bvmul(4, Lambda3776Var), 159972), 3), 241, ite[160029](eq[160026](bvadd[160023](2, bvmul(4, Lambda3776Var), 159972), 1), 127, ite[160028](eq[160027](bvadd[160023](2, bvmul(4, Lambda3776Var), 159972), 2), 253, 0)))), ite[160040](eq[160033](bvadd[160032](1, bvmul(4, Lambda3776Var), 159972), 0), 242, ite[160039](eq[160034](bvadd[160032](1, bvmul(4, Lambda3776Var), 159972), 3), 241, ite[160038](eq[160035](bvadd[160032](1, bvmul(4, Lambda3776Var), 159972), 1), 127, ite[160037](eq[160036](bvadd[160032](1, bvmul(4, Lambda3776Var), 159972), 2), 253, 0)))), ite[160049](eq[160042](bvadd[160041](bvmul(4, Lambda3776Var), 159972), 0), 242, ite[160048](eq[160043](bvadd[160041](bvmul(4, Lambda3776Var), 159972), 3), 241, ite[160047](eq[160044](bvadd[160041](bvmul(4, Lambda3776Var), 159972), 1), 127, ite[160046](eq[160045](bvadd[160041](bvmul(4, Lambda3776Var), 159972), 2), 253, 0)))))))))) )
140526 : input.spec-%var-i-0.L3%7%bbentry : BV:32  : 0
140527 : map_get(140525, 140526) : SUM[UNIT,MAP[BV:32 -> BV:32]] : ( 160117 = bvconcat(ite(eq(bvadd(3, bvmul(4, 0)), 0), 242, ite(eq(bvadd(3, bvmul(4, 0)), 3), 241, ite(eq(bvadd(3, bvmul(4, 0)), 1), 127, ite(eq(bvadd(3, bvmul(4, 0)), 2), 253, 0)))), ite(eq(bvadd(2, bvmul(4, 0)), 0), 242, ite(eq(bvadd(2, bvmul(4, 0)), 3), 241, ite(eq(bvadd(2, bvmul(4, 0)), 1), 127, ite(eq(bvadd(2, bvmul(4, 0)), 2), 253, 0)))), ite(eq(bvadd(1, bvmul(4, 0)), 0), 242, ite(eq(bvadd(1, bvmul(4, 0)), 3), 241, ite(eq(bvadd(1, bvmul(4, 0)), 1), 127, ite(eq(bvadd(1, bvmul(4, 0)), 2), 253, 0)))), ite(eq(bvmul(4, 0), 0), 242, ite(eq(bvmul(4, 0), 3), 241, ite(eq(bvmul(4, 0), 1), 127, ite(eq(bvmul(4, 0), 2), 253, 0)))));sum[161706](ite(ite(and(bvule(0, 0), bvule(0, 67108863)), true, ite(and(bvule(67108864, 0), bvule(0, 4294967295)), false, false)), 1, 0), unit, map[161705](lambda(Lambda4925Var, ite(and(eq(ite(and(bvule(0, 0), bvule(0, 67108863)), 0, ite(and(bvule(67108864, 0), bvule(0, 67108864)), 67108864, ite(and(bvule(67108865, 0), bvule(0, 4294967295)), 67108865, 67108865))), 0), eq(ite(and(bvule(0, Lambda4925Var), bvule(Lambda4925Var, 4095)), 0, ite(and(bvule(4097, Lambda4925Var), bvule(Lambda4925Var, 4294967295)), 4097, ite(and(bvule(4096, Lambda4925Var), bvule(Lambda4925Var, 4096)), 4096, 4096))), 0)), true, false)), lambda[161704](Lambda4926Var, ite[161703](and(eq(0, 0), eq(Lambda4926Var, 0)), 0, bvconcat[161702](ite[161671](eq[161664](bvadd[161663](3, bvmul(4, Lambda4926Var), 160117), 0), 242, ite[161670](eq[161665](bvadd[161663](3, bvmul(4, Lambda4926Var), 160117), 3), 241, ite[161669](eq[161666](bvadd[161663](3, bvmul(4, Lambda4926Var), 160117), 1), 127, ite[161668](eq[161667](bvadd[161663](3, bvmul(4, Lambda4926Var), 160117), 2), 253, 0)))), ite[161682](eq[161674](bvadd[161673](2, bvmul(4, Lambda4926Var), 160117), 0), 242, ite[161681](eq[161675](bvadd[161673](2, bvmul(4, Lambda4926Var), 160117), 3), 241, ite[161680](eq[161676](bvadd[161673](2, bvmul(4, Lambda4926Var), 160117), 1), 127, ite[161678](eq[161677](bvadd[161673](2, bvmul(4, Lambda4926Var), 160117), 2), 253, 0)))), ite[161692](eq[161684](bvadd[161683](1, bvmul(4, Lambda4926Var), 160117), 0), 242, ite[161691](eq[161685](bvadd[161683](1, bvmul(4, Lambda4926Var), 160117), 3), 241, ite[161690](eq[161686](bvadd[161683](1, bvmul(4, Lambda4926Var), 160117), 1), 127, ite[161689](eq[161688](bvadd[161683](1, bvmul(4, Lambda4926Var), 160117), 2), 253, 0)))), ite[161701](eq[161694](bvadd[161693](bvmul(4, Lambda4926Var), 160117), 0), 242, ite[161700](eq[161695](bvadd[161693](bvmul(4, Lambda4926Var), 160117), 3), 241, ite[161699](eq[161696](bvadd[161693](bvmul(4, Lambda4926Var), 160117), 1), 127, ite[161698](eq[161697](bvadd[161693](bvmul(4, Lambda4926Var), 160117), 2), 253, 0))))))))) )
140283 : 1 { 0x1 +1.0e1025 } : INT                 : 1
158472 : sum_is(140527, 140283) : BOOL             : true
160707 : sum_get(140527, 140283) : MAP[BV:32 -> BV:32] : ( 160117 = bvconcat(ite(eq(bvadd(3, bvmul(4, 0)), 0), 242, ite(eq(bvadd(3, bvmul(4, 0)), 3), 241, ite(eq(bvadd(3, bvmul(4, 0)), 1), 127, ite(eq(bvadd(3, bvmul(4, 0)), 2), 253, 0)))), ite(eq(bvadd(2, bvmul(4, 0)), 0), 242, ite(eq(bvadd(2, bvmul(4, 0)), 3), 241, ite(eq(bvadd(2, bvmul(4, 0)), 1), 127, ite(eq(bvadd(2, bvmul(4, 0)), 2), 253, 0)))), ite(eq(bvadd(1, bvmul(4, 0)), 0), 242, ite(eq(bvadd(1, bvmul(4, 0)), 3), 241, ite(eq(bvadd(1, bvmul(4, 0)), 1), 127, ite(eq(bvadd(1, bvmul(4, 0)), 2), 253, 0)))), ite(eq(bvmul(4, 0), 0), 242, ite(eq(bvmul(4, 0), 3), 241, ite(eq(bvmul(4, 0), 1), 127, ite(eq(bvmul(4, 0), 2), 253, 0)))));map[161829](lambda(Lambda4963Var, ite(and(eq(ite(and(bvule(0, 0), bvule(0, 67108863)), 0, ite(and(bvule(67108864, 0), bvule(0, 67108864)), 67108864, ite(and(bvule(67108865, 0), bvule(0, 4294967295)), 67108865, 67108865))), 0), eq(ite(and(bvule(0, Lambda4963Var), bvule(Lambda4963Var, 4095)), 0, ite(and(bvule(4097, Lambda4963Var), bvule(Lambda4963Var, 4294967295)), 4097, ite(and(bvule(4096, Lambda4963Var), bvule(Lambda4963Var, 4096)), 4096, 4096))), 0)), true, false)), lambda[161828](Lambda4964Var, ite[161826](and(eq(0, 0), eq(Lambda4964Var, 0)), 0, bvconcat[161825](ite[161796](eq[161789](bvadd[161788](3, bvmul(4, Lambda4964Var), 160117), 0), 242, ite[161795](eq[161790](bvadd[161788](3, bvmul(4, Lambda4964Var), 160117), 3), 241, ite[161794](eq[161791](bvadd[161788](3, bvmul(4, Lambda4964Var), 160117), 1), 127, ite[161793](eq[161792](bvadd[161788](3, bvmul(4, Lambda4964Var), 160117), 2), 253, 0)))), ite[161805](eq[161798](bvadd[161797](2, bvmul(4, Lambda4964Var), 160117), 0), 242, ite[161804](eq[161799](bvadd[161797](2, bvmul(4, Lambda4964Var), 160117), 3), 241, ite[161803](eq[161800](bvadd[161797](2, bvmul(4, Lambda4964Var), 160117), 1), 127, ite[161802](eq[161801](bvadd[161797](2, bvmul(4, Lambda4964Var), 160117), 2), 253, 0)))), ite[161815](eq[161808](bvadd[161807](1, bvmul(4, Lambda4964Var), 160117), 0), 242, ite[161814](eq[161809](bvadd[161807](1, bvmul(4, Lambda4964Var), 160117), 3), 241, ite[161813](eq[161810](bvadd[161807](1, bvmul(4, Lambda4964Var), 160117), 1), 127, ite[161812](eq[161811](bvadd[161807](1, bvmul(4, Lambda4964Var), 160117), 2), 253, 0)))), ite[161824](eq[161817](bvadd[161816](bvmul(4, Lambda4964Var), 160117), 0), 242, ite[161823](eq[161818](bvadd[161816](bvmul(4, Lambda4964Var), 160117), 3), 241, ite[161822](eq[161819](bvadd[161816](bvmul(4, Lambda4964Var), 160117), 1), 127, ite[161821](eq[161820](bvadd[161816](bvmul(4, Lambda4964Var), 160117), 2), 253, 0)))))))) )
140276 : 0 { 0x0 +1.0e129 } : BV:32                : 0
160708 : map_get(160707, 140276) : SUM[UNIT,BV:32] : ( 160117 = bvconcat(ite(eq(bvadd(3, bvmul(4, 0)), 0), 242, ite(eq(bvadd(3, bvmul(4, 0)), 3), 241, ite(eq(bvadd(3, bvmul(4, 0)), 1), 127, ite(eq(bvadd(3, bvmul(4, 0)), 2), 253, 0)))), ite(eq(bvadd(2, bvmul(4, 0)), 0), 242, ite(eq(bvadd(2, bvmul(4, 0)), 3), 241, ite(eq(bvadd(2, bvmul(4, 0)), 1), 127, ite(eq(bvadd(2, bvmul(4, 0)), 2), 253, 0)))), ite(eq(bvadd(1, bvmul(4, 0)), 0), 242, ite(eq(bvadd(1, bvmul(4, 0)), 3), 241, ite(eq(bvadd(1, bvmul(4, 0)), 1), 127, ite(eq(bvadd(1, bvmul(4, 0)), 2), 253, 0)))), ite(eq(bvmul(4, 0), 0), 242, ite(eq(bvmul(4, 0), 3), 241, ite(eq(bvmul(4, 0), 1), 127, ite(eq(bvmul(4, 0), 2), 253, 0)))));sum[161949](ite(ite(and(eq(ite(and(bvule(0, 0), bvule(0, 67108863)), 0, ite(and(bvule(67108864, 0), bvule(0, 67108864)), 67108864, ite(and(bvule(67108865, 0), bvule(0, 4294967295)), 67108865, 67108865))), 0), eq(ite(and(bvule(0, 0), bvule(0, 4095)), 0, ite(and(bvule(4097, 0), bvule(0, 4294967295)), 4097, ite(and(bvule(4096, 0), bvule(0, 4096)), 4096, 4096))), 0)), true, false), 1, 0), unit, ite[161948](and(eq(0, 0), eq(0, 0)), 0, bvconcat[161947](ite[161919](eq[161912](bvadd[161911](3, bvmul(4, 0), 160117), 0), 242, ite[161918](eq[161913](bvadd[161911](3, bvmul(4, 0), 160117), 3), 241, ite[161917](eq[161914](bvadd[161911](3, bvmul(4, 0), 160117), 1), 127, ite[161916](eq[161915](bvadd[161911](3, bvmul(4, 0), 160117), 2), 253, 0)))), ite[161928](eq[161921](bvadd[161920](2, bvmul(4, 0), 160117), 0), 242, ite[161927](eq[161922](bvadd[161920](2, bvmul(4, 0), 160117), 3), 241, ite[161926](eq[161923](bvadd[161920](2, bvmul(4, 0), 160117), 1), 127, ite[161925](eq[161924](bvadd[161920](2, bvmul(4, 0), 160117), 2), 253, 0)))), ite[161937](eq[161930](bvadd[161929](1, bvmul(4, 0), 160117), 0), 242, ite[161936](eq[161931](bvadd[161929](1, bvmul(4, 0), 160117), 3), 241, ite[161935](eq[161932](bvadd[161929](1, bvmul(4, 0), 160117), 1), 127, ite[161934](eq[161933](bvadd[161929](1, bvmul(4, 0), 160117), 2), 253, 0)))), ite[161946](eq[161939](bvadd[161938](bvmul(4, 0), 160117), 0), 242, ite[161945](eq[161940](bvadd[161938](bvmul(4, 0), 160117), 3), 241, ite[161944](eq[161941](bvadd[161938](bvmul(4, 0), 160117), 1), 127, ite[161943](eq[161942](bvadd[161938](bvmul(4, 0), 160117), 2), 253, 0))))))) )
140285 : 0 { 0x0 +1.0e1025 } : INT                 : 0
161647 : sum_is(160708, 140285) : BOOL             : false
161648 : and(158472, 161647) : BOOL                : false
161651 : or(140900, 161648) : BOOL                 : false

ce =
=counter_example_begin z3.ce338 c49cdea99d2945da5ea27314fe9b2431
=input.spec-%var-x-1
1 : Lambda3760Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 67108864 { 0x4000000 +1.0e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda3761Var : BV:32
18 : Lambda3762Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 67108865 { 0x4000001 +1.11e137 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4095 { 0xfff +1.48816e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 4097 { 0x1001 +1.48840e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 4096 { 0x1000 +1.48828e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda3763Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 10) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 41) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : bvmul(76, 17) : BV:32
79 : bvadd(75, 78) : BV:32
80 : eq(79, 2) : BOOL
81 : 242 { 0xf2 -14 } : BV:8
82 : eq(79, 75) : BOOL
83 : 241 { 0xf1 -15 } : BV:8
84 : 1 { 0x1 +1.11e129 } : BV:32
85 : eq(79, 84) : BOOL
86 : 127 { 0x7f } : BV:8
87 : 2 { 0x2 +1.23e129 } : BV:32
88 : eq(79, 87) : BOOL
89 : 253 { 0xfd -3 } : BV:8
90 : 0 { 0x0 } : BV:8
91 : ite(88, 89, 90) : BV:8
92 : ite(85, 86, 91) : BV:8
93 : ite(82, 83, 92) : BV:8
94 : ite(80, 81, 93) : BV:8
95 : bvadd(87, 78) : BV:32
96 : eq(95, 2) : BOOL
97 : eq(95, 75) : BOOL
98 : eq(95, 84) : BOOL
99 : eq(95, 87) : BOOL
100 : ite(99, 89, 90) : BV:8
101 : ite(98, 86, 100) : BV:8
102 : ite(97, 83, 101) : BV:8
103 : ite(96, 81, 102) : BV:8
104 : bvadd(84, 78) : BV:32
105 : eq(104, 2) : BOOL
106 : eq(104, 75) : BOOL
107 : eq(104, 84) : BOOL
108 : eq(104, 87) : BOOL
109 : ite(108, 89, 90) : BV:8
110 : ite(107, 86, 109) : BV:8
111 : ite(106, 83, 110) : BV:8
112 : ite(105, 81, 111) : BV:8
113 : eq(78, 2) : BOOL
114 : eq(78, 75) : BOOL
115 : eq(78, 84) : BOOL
116 : eq(78, 87) : BOOL
117 : ite(116, 89, 90) : BV:8
118 : ite(115, 86, 117) : BV:8
119 : ite(114, 83, 118) : BV:8
120 : ite(113, 81, 119) : BV:8
121 : bvconcat(94, 103, 112, 120) : BV:32
122 : bvadd(75, 77, 121) : BV:32
123 : eq(122, 2) : BOOL
124 : eq(122, 75) : BOOL
125 : eq(122, 84) : BOOL
126 : eq(122, 87) : BOOL
127 : ite(126, 89, 90) : BV:8
128 : ite(125, 86, 127) : BV:8
129 : ite(124, 83, 128) : BV:8
130 : ite(123, 81, 129) : BV:8
131 : bvadd(87, 77, 121) : BV:32
132 : eq(131, 2) : BOOL
133 : eq(131, 75) : BOOL
134 : eq(131, 84) : BOOL
135 : eq(131, 87) : BOOL
136 : ite(135, 89, 90) : BV:8
137 : ite(134, 86, 136) : BV:8
138 : ite(133, 83, 137) : BV:8
139 : ite(132, 81, 138) : BV:8
140 : bvadd(84, 77, 121) : BV:32
141 : eq(140, 2) : BOOL
142 : eq(140, 75) : BOOL
143 : eq(140, 84) : BOOL
144 : eq(140, 87) : BOOL
145 : ite(144, 89, 90) : BV:8
146 : ite(143, 86, 145) : BV:8
147 : ite(142, 83, 146) : BV:8
148 : ite(141, 81, 147) : BV:8
149 : bvadd(77, 121) : BV:32
150 : eq(149, 2) : BOOL
151 : eq(149, 75) : BOOL
152 : eq(149, 84) : BOOL
153 : eq(149, 87) : BOOL
154 : ite(153, 89, 90) : BV:8
155 : ite(152, 86, 154) : BV:8
156 : ite(151, 83, 155) : BV:8
157 : ite(150, 81, 156) : BV:8
158 : bvconcat(130, 139, 148, 157) : BV:32
159 : ite(55, 2, 158) : BV:32
160 : ite(74, 158, 159) : BV:32
161 : ite(55, 2, 160) : BV:32
162 : lambda(52, 161) : FUNCTION[BV:32 -> BV:32]
163 : map(51, 162) : MAP[BV:32 -> BV:32]
164 : lambda(17, 163) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
165 : map(16, 164) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
166 : sym_const(165) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda3773Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 67108864 { 0x4000000 +1.0e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda3774Var : BV:32
18 : Lambda3775Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 67108865 { 0x4000001 +1.11e137 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4095 { 0xfff +1.48816e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 4097 { 0x1001 +1.48840e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 4096 { 0x1000 +1.48828e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda3776Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59) : BV:32
61 : eq(60, 2) : BOOL
62 : 242 { 0xf2 -14 } : BV:8
63 : eq(60, 56) : BOOL
64 : 241 { 0xf1 -15 } : BV:8
65 : 1 { 0x1 +1.11e129 } : BV:32
66 : eq(60, 65) : BOOL
67 : 127 { 0x7f } : BV:8
68 : 2 { 0x2 +1.23e129 } : BV:32
69 : eq(60, 68) : BOOL
70 : 253 { 0xfd -3 } : BV:8
71 : 0 { 0x0 } : BV:8
72 : ite(69, 70, 71) : BV:8
73 : ite(66, 67, 72) : BV:8
74 : ite(63, 64, 73) : BV:8
75 : ite(61, 62, 74) : BV:8
76 : bvadd(68, 59) : BV:32
77 : eq(76, 2) : BOOL
78 : eq(76, 56) : BOOL
79 : eq(76, 65) : BOOL
80 : eq(76, 68) : BOOL
81 : ite(80, 70, 71) : BV:8
82 : ite(79, 67, 81) : BV:8
83 : ite(78, 64, 82) : BV:8
84 : ite(77, 62, 83) : BV:8
85 : bvadd(65, 59) : BV:32
86 : eq(85, 2) : BOOL
87 : eq(85, 56) : BOOL
88 : eq(85, 65) : BOOL
89 : eq(85, 68) : BOOL
90 : ite(89, 70, 71) : BV:8
91 : ite(88, 67, 90) : BV:8
92 : ite(87, 64, 91) : BV:8
93 : ite(86, 62, 92) : BV:8
94 : eq(59, 2) : BOOL
95 : eq(59, 56) : BOOL
96 : eq(59, 65) : BOOL
97 : eq(59, 68) : BOOL
98 : ite(97, 70, 71) : BV:8
99 : ite(96, 67, 98) : BV:8
100 : ite(95, 64, 99) : BV:8
101 : ite(94, 62, 100) : BV:8
102 : bvconcat(75, 84, 93, 101) : BV:32
103 : bvadd(56, 58, 102) : BV:32
104 : eq(103, 2) : BOOL
105 : eq(103, 56) : BOOL
106 : eq(103, 65) : BOOL
107 : eq(103, 68) : BOOL
108 : ite(107, 70, 71) : BV:8
109 : ite(106, 67, 108) : BV:8
110 : ite(105, 64, 109) : BV:8
111 : ite(104, 62, 110) : BV:8
112 : bvadd(68, 58, 102) : BV:32
113 : eq(112, 2) : BOOL
114 : eq(112, 56) : BOOL
115 : eq(112, 65) : BOOL
116 : eq(112, 68) : BOOL
117 : ite(116, 70, 71) : BV:8
118 : ite(115, 67, 117) : BV:8
119 : ite(114, 64, 118) : BV:8
120 : ite(113, 62, 119) : BV:8
121 : bvadd(65, 58, 102) : BV:32
122 : eq(121, 2) : BOOL
123 : eq(121, 56) : BOOL
124 : eq(121, 65) : BOOL
125 : eq(121, 68) : BOOL
126 : ite(125, 70, 71) : BV:8
127 : ite(124, 67, 126) : BV:8
128 : ite(123, 64, 127) : BV:8
129 : ite(122, 62, 128) : BV:8
130 : bvadd(58, 102) : BV:32
131 : eq(130, 2) : BOOL
132 : eq(130, 56) : BOOL
133 : eq(130, 65) : BOOL
134 : eq(130, 68) : BOOL
135 : ite(134, 70, 71) : BV:8
136 : ite(133, 67, 135) : BV:8
137 : ite(132, 64, 136) : BV:8
138 : ite(131, 62, 137) : BV:8
139 : bvconcat(111, 120, 129, 138) : BV:32
140 : ite(55, 2, 139) : BV:32
141 : lambda(52, 140) : FUNCTION[BV:32 -> BV:32]
142 : map(51, 141) : MAP[BV:32 -> BV:32]
143 : lambda(17, 142) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
144 : map(16, 143) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
145 : sym_const(144) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 242, [ 1; 1 ] -> 127, [ 2; 2 ] -> 253, [ 3; 3 ] -> 241, [ 4; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 408417167 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 408417168; 408417171 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 408417172; 2044707699 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2044707700; 2044707703 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2044707704; 3493055215 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3493055216; 3493055219 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3493055220; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 408417168 { 0x1857f390 +1.68712043e177 } : BV:32
=input.dst.llvm-%m
1 : 4096 { 0x1000 +1.48828e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3493055216 { 0xd033caf0 -801912080 -1.40463066e33 } : BV:32
=input.dst.llvm-%n
1 : 67108864 { 0x4000000 +1.0e137 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2044707700 { 0x79dfc374 +1.74815225e116 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3493055216 { 0xd033caf0 -801912080 -1.40463066e33 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3493055219 { 0xd033caf3 -801912077 -1.40463101e33 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2044707700 { 0x79dfc374 +1.74815225e116 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2044707703 { 0x79dfc377 +1.74815261e116 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 408417168 { 0x1857f390 +1.68712043e177 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 408417171 { 0x1857f393 +1.68712079e177 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda3695Var : BV:32
2 : Lambda3696Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 67108864 { 0x4000000 +1.0e137 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 67108865 { 0x4000001 +1.11e137 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 4095 { 0xfff +1.48816e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 4097 { 0x1001 +1.48840e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 14) : BOOL
36 : and(34, 35) : BOOL
37 : 4096 { 0x1000 +1.48828e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 37) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : bvmul(49, 1) : BV:32
52 : bvadd(48, 51) : BV:32
53 : eq(52, 3) : BOOL
54 : 242 { 0xf2 -14 } : BV:8
55 : eq(52, 48) : BOOL
56 : 241 { 0xf1 -15 } : BV:8
57 : 1 { 0x1 +1.11e129 } : BV:32
58 : eq(52, 57) : BOOL
59 : 127 { 0x7f } : BV:8
60 : 2 { 0x2 +1.23e129 } : BV:32
61 : eq(52, 60) : BOOL
62 : 253 { 0xfd -3 } : BV:8
63 : 0 { 0x0 } : BV:8
64 : ite(61, 62, 63) : BV:8
65 : ite(58, 59, 64) : BV:8
66 : ite(55, 56, 65) : BV:8
67 : ite(53, 54, 66) : BV:8
68 : bvadd(60, 51) : BV:32
69 : eq(68, 3) : BOOL
70 : eq(68, 48) : BOOL
71 : eq(68, 57) : BOOL
72 : eq(68, 60) : BOOL
73 : ite(72, 62, 63) : BV:8
74 : ite(71, 59, 73) : BV:8
75 : ite(70, 56, 74) : BV:8
76 : ite(69, 54, 75) : BV:8
77 : bvadd(57, 51) : BV:32
78 : eq(77, 3) : BOOL
79 : eq(77, 48) : BOOL
80 : eq(77, 57) : BOOL
81 : eq(77, 60) : BOOL
82 : ite(81, 62, 63) : BV:8
83 : ite(80, 59, 82) : BV:8
84 : ite(79, 56, 83) : BV:8
85 : ite(78, 54, 84) : BV:8
86 : eq(51, 3) : BOOL
87 : eq(51, 48) : BOOL
88 : eq(51, 57) : BOOL
89 : eq(51, 60) : BOOL
90 : ite(89, 62, 63) : BV:8
91 : ite(88, 59, 90) : BV:8
92 : ite(87, 56, 91) : BV:8
93 : ite(86, 54, 92) : BV:8
94 : bvconcat(67, 76, 85, 93) : BV:32
95 : bvadd(48, 50, 94) : BV:32
96 : eq(95, 3) : BOOL
97 : eq(95, 48) : BOOL
98 : eq(95, 57) : BOOL
99 : eq(95, 60) : BOOL
100 : ite(99, 62, 63) : BV:8
101 : ite(98, 59, 100) : BV:8
102 : ite(97, 56, 101) : BV:8
103 : ite(96, 54, 102) : BV:8
104 : bvadd(60, 50, 94) : BV:32
105 : eq(104, 3) : BOOL
106 : eq(104, 48) : BOOL
107 : eq(104, 57) : BOOL
108 : eq(104, 60) : BOOL
109 : ite(108, 62, 63) : BV:8
110 : ite(107, 59, 109) : BV:8
111 : ite(106, 56, 110) : BV:8
112 : ite(105, 54, 111) : BV:8
113 : bvadd(57, 50, 94) : BV:32
114 : eq(113, 3) : BOOL
115 : eq(113, 48) : BOOL
116 : eq(113, 57) : BOOL
117 : eq(113, 60) : BOOL
118 : ite(117, 62, 63) : BV:8
119 : ite(116, 59, 118) : BV:8
120 : ite(115, 56, 119) : BV:8
121 : ite(114, 54, 120) : BV:8
122 : bvadd(50, 94) : BV:32
123 : eq(122, 3) : BOOL
124 : eq(122, 48) : BOOL
125 : eq(122, 57) : BOOL
126 : eq(122, 60) : BOOL
127 : ite(126, 62, 63) : BV:8
128 : ite(125, 59, 127) : BV:8
129 : ite(124, 56, 128) : BV:8
130 : ite(123, 54, 129) : BV:8
131 : bvconcat(103, 112, 121, 130) : BV:32
132 : ite(6, 3, 131) : BV:32
133 : ite(47, 131, 132) : BV:32
134 : ite(6, 3, 133) : BV:32
135 : lambda(1, 2, 134) : FUNCTION[BV:32,BV:32 -> BV:32]
136 : sym_const(135) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda3700Var : BV:32
2 : Lambda3701Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 67108864 { 0x4000000 +1.0e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 67108865 { 0x4000001 +1.11e137 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4095 { 0xfff +1.48816e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 4097 { 0x1001 +1.48840e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 14) : BOOL
28 : and(26, 27) : BOOL
29 : 4096 { 0x1000 +1.48828e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 67108863 ] -> true, [ 67108864; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 67108863 ] -> true, [ 67108864; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda3709Var : BV:32
2 : Lambda3710Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 67108864 { 0x4000000 +1.0e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 67108865 { 0x4000001 +1.11e137 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4095 { 0xfff +1.48816e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 4097 { 0x1001 +1.48840e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 14) : BOOL
28 : and(26, 27) : BOOL
29 : 4096 { 0x1000 +1.48828e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda3705Var : BV:32
2 : Lambda3706Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10) : BV:32
12 : eq(11, 3) : BOOL
13 : 242 { 0xf2 -14 } : BV:8
14 : eq(11, 7) : BOOL
15 : 241 { 0xf1 -15 } : BV:8
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : eq(11, 16) : BOOL
18 : 127 { 0x7f } : BV:8
19 : 2 { 0x2 +1.23e129 } : BV:32
20 : eq(11, 19) : BOOL
21 : 253 { 0xfd -3 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : ite(17, 18, 23) : BV:8
25 : ite(14, 15, 24) : BV:8
26 : ite(12, 13, 25) : BV:8
27 : bvadd(19, 10) : BV:32
28 : eq(27, 3) : BOOL
29 : eq(27, 7) : BOOL
30 : eq(27, 16) : BOOL
31 : eq(27, 19) : BOOL
32 : ite(31, 21, 22) : BV:8
33 : ite(30, 18, 32) : BV:8
34 : ite(29, 15, 33) : BV:8
35 : ite(28, 13, 34) : BV:8
36 : bvadd(16, 10) : BV:32
37 : eq(36, 3) : BOOL
38 : eq(36, 7) : BOOL
39 : eq(36, 16) : BOOL
40 : eq(36, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : ite(39, 18, 41) : BV:8
43 : ite(38, 15, 42) : BV:8
44 : ite(37, 13, 43) : BV:8
45 : eq(10, 3) : BOOL
46 : eq(10, 7) : BOOL
47 : eq(10, 16) : BOOL
48 : eq(10, 19) : BOOL
49 : ite(48, 21, 22) : BV:8
50 : ite(47, 18, 49) : BV:8
51 : ite(46, 15, 50) : BV:8
52 : ite(45, 13, 51) : BV:8
53 : bvconcat(26, 35, 44, 52) : BV:32
54 : bvadd(7, 9, 53) : BV:32
55 : eq(54, 3) : BOOL
56 : eq(54, 7) : BOOL
57 : eq(54, 16) : BOOL
58 : eq(54, 19) : BOOL
59 : ite(58, 21, 22) : BV:8
60 : ite(57, 18, 59) : BV:8
61 : ite(56, 15, 60) : BV:8
62 : ite(55, 13, 61) : BV:8
63 : bvadd(19, 9, 53) : BV:32
64 : eq(63, 3) : BOOL
65 : eq(63, 7) : BOOL
66 : eq(63, 16) : BOOL
67 : eq(63, 19) : BOOL
68 : ite(67, 21, 22) : BV:8
69 : ite(66, 18, 68) : BV:8
70 : ite(65, 15, 69) : BV:8
71 : ite(64, 13, 70) : BV:8
72 : bvadd(16, 9, 53) : BV:32
73 : eq(72, 3) : BOOL
74 : eq(72, 7) : BOOL
75 : eq(72, 16) : BOOL
76 : eq(72, 19) : BOOL
77 : ite(76, 21, 22) : BV:8
78 : ite(75, 18, 77) : BV:8
79 : ite(74, 15, 78) : BV:8
80 : ite(73, 13, 79) : BV:8
81 : bvadd(9, 53) : BV:32
82 : eq(81, 3) : BOOL
83 : eq(81, 7) : BOOL
84 : eq(81, 16) : BOOL
85 : eq(81, 19) : BOOL
86 : ite(85, 21, 22) : BV:8
87 : ite(84, 18, 86) : BV:8
88 : ite(83, 15, 87) : BV:8
89 : ite(82, 13, 88) : BV:8
90 : bvconcat(62, 71, 80, 89) : BV:32
91 : ite(6, 3, 90) : BV:32
92 : lambda(1, 2, 91) : FUNCTION[BV:32,BV:32 -> BV:32]
93 : sym_const(92) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1626471087
=counter_example_end


failcond-expr = or(not(bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)), and(sum_is(map_get(input.spec-%var-x-0.L3%7%bbentry, input.spec-%var-i-0.L3%7%bbentry), 1), sum_is(map_get(sum_get(map_get(input.spec-%var-x-0.L3%7%bbentry, input.spec-%var-i-0.L3%7%bbentry), 1), 0), 0))):
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
4 : not(3) : BOOL
5 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
6 : input.spec-%var-i-0.L3%7%bbentry : BV:32
7 : map_get(5, 6) : SUM[UNIT,MAP[BV:32 -> BV:32]]
8 : 1 { 0x1 +1.0e1025 } : INT
9 : sum_is(7, 8) : BOOL
10 : sum_get(7, 8) : MAP[BV:32 -> BV:32]
11 : 0 { 0x0 +1.0e129 } : BV:32
12 : map_get(10, 11) : SUM[UNIT,BV:32]
13 : 0 { 0x0 +1.0e1025 } : INT
14 : sum_is(12, 13) : BOOL
15 : and(9, 14) : BOOL
16 : or(4, 15) : BOOL
</MSG>
<MSG>0:32 : foo.A1.B2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:32 : foo.A1.B2: Finished executing CG's add edge function...</MSG>
<MSG>0:32 : foo.A1.B2: Computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : foo.A1.B2: Done computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : Done adding new edge to the product-TFG foo.A1.B2 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%7%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : Done adding a CG edge composition using the src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:32 : Failed correlation of src pathset L3%7%bbentry=>L3%7%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry: failcond = wfcond.from_pcL3%7%bbentry_Lfor.cond%1%bbentry.to_pcL3%7%bbentry_Lfor.cond1%1%bbentry-dst-edgecond-implies-src-edgecond
140612 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32 : 0
140383 : input.dst.llvm-%n : BV:32                 : 67108864
140613 : bvult(140612, 140383) : BOOL              : true
140900 : not(140613) : BOOL                        : false
140525 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]] : ( 159972 = bvconcat(ite(eq(bvadd(3, bvmul(4, Lambda3774Var)), 0), 242, ite(eq(bvadd(3, bvmul(4, Lambda3774Var)), 3), 241, ite(eq(bvadd(3, bvmul(4, Lambda3774Var)), 1), 127, ite(eq(bvadd(3, bvmul(4, Lambda3774Var)), 2), 253, 0)))), ite(eq(bvadd(2, bvmul(4, Lambda3774Var)), 0), 242, ite(eq(bvadd(2, bvmul(4, Lambda3774Var)), 3), 241, ite(eq(bvadd(2, bvmul(4, Lambda3774Var)), 1), 127, ite(eq(bvadd(2, bvmul(4, Lambda3774Var)), 2), 253, 0)))), ite(eq(bvadd(1, bvmul(4, Lambda3774Var)), 0), 242, ite(eq(bvadd(1, bvmul(4, Lambda3774Var)), 3), 241, ite(eq(bvadd(1, bvmul(4, Lambda3774Var)), 1), 127, ite(eq(bvadd(1, bvmul(4, Lambda3774Var)), 2), 253, 0)))), ite(eq(bvmul(4, Lambda3774Var), 0), 242, ite(eq(bvmul(4, Lambda3774Var), 3), 241, ite(eq(bvmul(4, Lambda3774Var), 1), 127, ite(eq(bvmul(4, Lambda3774Var), 2), 253, 0)))));map[159898](lambda(Lambda3773Var, ite(and(bvule(0, Lambda3773Var), bvule(Lambda3773Var, 67108863)), true, ite(and(bvule(67108864, Lambda3773Var), bvule(Lambda3773Var, 4294967295)), false, false))), lambda[159897](Lambda3774Var, map[159896](lambda(Lambda3775Var, ite(and(eq(ite(and(bvule(0, Lambda3774Var), bvule(Lambda3774Var, 67108863)), 0, ite(and(bvule(67108864, Lambda3774Var), bvule(Lambda3774Var, 67108864)), 67108864, ite(and(bvule(67108865, Lambda3774Var), bvule(Lambda3774Var, 4294967295)), 67108865, 67108865))), 0), eq(ite(and(bvule(0, Lambda3775Var), bvule(Lambda3775Var, 4095)), 0, ite(and(bvule(4097, Lambda3775Var), bvule(Lambda3775Var, 4294967295)), 4097, ite(and(bvule(4096, Lambda3775Var), bvule(Lambda3775Var, 4096)), 4096, 4096))), 0)), true, false)), lambda[159895](Lambda3776Var, ite[160051](and(eq(Lambda3774Var, 0), eq(Lambda3776Var, 0)), 0, bvconcat[160050](ite[160022](eq[160015](bvadd[160014](3, bvmul(4, Lambda3776Var), 159972), 0), 242, ite[160021](eq[160016](bvadd[160014](3, bvmul(4, Lambda3776Var), 159972), 3), 241, ite[160020](eq[160017](bvadd[160014](3, bvmul(4, Lambda3776Var), 159972), 1), 127, ite[160019](eq[160018](bvadd[160014](3, bvmul(4, Lambda3776Var), 159972), 2), 253, 0)))), ite[160031](eq[160024](bvadd[160023](2, bvmul(4, Lambda3776Var), 159972), 0), 242, ite[160030](eq[160025](bvadd[160023](2, bvmul(4, Lambda3776Var), 159972), 3), 241, ite[160029](eq[160026](bvadd[160023](2, bvmul(4, Lambda3776Var), 159972), 1), 127, ite[160028](eq[160027](bvadd[160023](2, bvmul(4, Lambda3776Var), 159972), 2), 253, 0)))), ite[160040](eq[160033](bvadd[160032](1, bvmul(4, Lambda3776Var), 159972), 0), 242, ite[160039](eq[160034](bvadd[160032](1, bvmul(4, Lambda3776Var), 159972), 3), 241, ite[160038](eq[160035](bvadd[160032](1, bvmul(4, Lambda3776Var), 159972), 1), 127, ite[160037](eq[160036](bvadd[160032](1, bvmul(4, Lambda3776Var), 159972), 2), 253, 0)))), ite[160049](eq[160042](bvadd[160041](bvmul(4, Lambda3776Var), 159972), 0), 242, ite[160048](eq[160043](bvadd[160041](bvmul(4, Lambda3776Var), 159972), 3), 241, ite[160047](eq[160044](bvadd[160041](bvmul(4, Lambda3776Var), 159972), 1), 127, ite[160046](eq[160045](bvadd[160041](bvmul(4, Lambda3776Var), 159972), 2), 253, 0)))))))))) )
140526 : input.spec-%var-i-0.L3%7%bbentry : BV:32  : 0
140527 : map_get(140525, 140526) : SUM[UNIT,MAP[BV:32 -> BV:32]] : ( 160117 = bvconcat(ite(eq(bvadd(3, bvmul(4, 0)), 0), 242, ite(eq(bvadd(3, bvmul(4, 0)), 3), 241, ite(eq(bvadd(3, bvmul(4, 0)), 1), 127, ite(eq(bvadd(3, bvmul(4, 0)), 2), 253, 0)))), ite(eq(bvadd(2, bvmul(4, 0)), 0), 242, ite(eq(bvadd(2, bvmul(4, 0)), 3), 241, ite(eq(bvadd(2, bvmul(4, 0)), 1), 127, ite(eq(bvadd(2, bvmul(4, 0)), 2), 253, 0)))), ite(eq(bvadd(1, bvmul(4, 0)), 0), 242, ite(eq(bvadd(1, bvmul(4, 0)), 3), 241, ite(eq(bvadd(1, bvmul(4, 0)), 1), 127, ite(eq(bvadd(1, bvmul(4, 0)), 2), 253, 0)))), ite(eq(bvmul(4, 0), 0), 242, ite(eq(bvmul(4, 0), 3), 241, ite(eq(bvmul(4, 0), 1), 127, ite(eq(bvmul(4, 0), 2), 253, 0)))));sum[161706](ite(ite(and(bvule(0, 0), bvule(0, 67108863)), true, ite(and(bvule(67108864, 0), bvule(0, 4294967295)), false, false)), 1, 0), unit, map[161705](lambda(Lambda4925Var, ite(and(eq(ite(and(bvule(0, 0), bvule(0, 67108863)), 0, ite(and(bvule(67108864, 0), bvule(0, 67108864)), 67108864, ite(and(bvule(67108865, 0), bvule(0, 4294967295)), 67108865, 67108865))), 0), eq(ite(and(bvule(0, Lambda4925Var), bvule(Lambda4925Var, 4095)), 0, ite(and(bvule(4097, Lambda4925Var), bvule(Lambda4925Var, 4294967295)), 4097, ite(and(bvule(4096, Lambda4925Var), bvule(Lambda4925Var, 4096)), 4096, 4096))), 0)), true, false)), lambda[161704](Lambda4926Var, ite[161703](and(eq(0, 0), eq(Lambda4926Var, 0)), 0, bvconcat[161702](ite[161671](eq[161664](bvadd[161663](3, bvmul(4, Lambda4926Var), 160117), 0), 242, ite[161670](eq[161665](bvadd[161663](3, bvmul(4, Lambda4926Var), 160117), 3), 241, ite[161669](eq[161666](bvadd[161663](3, bvmul(4, Lambda4926Var), 160117), 1), 127, ite[161668](eq[161667](bvadd[161663](3, bvmul(4, Lambda4926Var), 160117), 2), 253, 0)))), ite[161682](eq[161674](bvadd[161673](2, bvmul(4, Lambda4926Var), 160117), 0), 242, ite[161681](eq[161675](bvadd[161673](2, bvmul(4, Lambda4926Var), 160117), 3), 241, ite[161680](eq[161676](bvadd[161673](2, bvmul(4, Lambda4926Var), 160117), 1), 127, ite[161678](eq[161677](bvadd[161673](2, bvmul(4, Lambda4926Var), 160117), 2), 253, 0)))), ite[161692](eq[161684](bvadd[161683](1, bvmul(4, Lambda4926Var), 160117), 0), 242, ite[161691](eq[161685](bvadd[161683](1, bvmul(4, Lambda4926Var), 160117), 3), 241, ite[161690](eq[161686](bvadd[161683](1, bvmul(4, Lambda4926Var), 160117), 1), 127, ite[161689](eq[161688](bvadd[161683](1, bvmul(4, Lambda4926Var), 160117), 2), 253, 0)))), ite[161701](eq[161694](bvadd[161693](bvmul(4, Lambda4926Var), 160117), 0), 242, ite[161700](eq[161695](bvadd[161693](bvmul(4, Lambda4926Var), 160117), 3), 241, ite[161699](eq[161696](bvadd[161693](bvmul(4, Lambda4926Var), 160117), 1), 127, ite[161698](eq[161697](bvadd[161693](bvmul(4, Lambda4926Var), 160117), 2), 253, 0))))))))) )
140283 : 1 { 0x1 +1.0e1025 } : INT                 : 1
158472 : sum_is(140527, 140283) : BOOL             : true
160707 : sum_get(140527, 140283) : MAP[BV:32 -> BV:32] : ( 160117 = bvconcat(ite(eq(bvadd(3, bvmul(4, 0)), 0), 242, ite(eq(bvadd(3, bvmul(4, 0)), 3), 241, ite(eq(bvadd(3, bvmul(4, 0)), 1), 127, ite(eq(bvadd(3, bvmul(4, 0)), 2), 253, 0)))), ite(eq(bvadd(2, bvmul(4, 0)), 0), 242, ite(eq(bvadd(2, bvmul(4, 0)), 3), 241, ite(eq(bvadd(2, bvmul(4, 0)), 1), 127, ite(eq(bvadd(2, bvmul(4, 0)), 2), 253, 0)))), ite(eq(bvadd(1, bvmul(4, 0)), 0), 242, ite(eq(bvadd(1, bvmul(4, 0)), 3), 241, ite(eq(bvadd(1, bvmul(4, 0)), 1), 127, ite(eq(bvadd(1, bvmul(4, 0)), 2), 253, 0)))), ite(eq(bvmul(4, 0), 0), 242, ite(eq(bvmul(4, 0), 3), 241, ite(eq(bvmul(4, 0), 1), 127, ite(eq(bvmul(4, 0), 2), 253, 0)))));map[161829](lambda(Lambda4963Var, ite(and(eq(ite(and(bvule(0, 0), bvule(0, 67108863)), 0, ite(and(bvule(67108864, 0), bvule(0, 67108864)), 67108864, ite(and(bvule(67108865, 0), bvule(0, 4294967295)), 67108865, 67108865))), 0), eq(ite(and(bvule(0, Lambda4963Var), bvule(Lambda4963Var, 4095)), 0, ite(and(bvule(4097, Lambda4963Var), bvule(Lambda4963Var, 4294967295)), 4097, ite(and(bvule(4096, Lambda4963Var), bvule(Lambda4963Var, 4096)), 4096, 4096))), 0)), true, false)), lambda[161828](Lambda4964Var, ite[161826](and(eq(0, 0), eq(Lambda4964Var, 0)), 0, bvconcat[161825](ite[161796](eq[161789](bvadd[161788](3, bvmul(4, Lambda4964Var), 160117), 0), 242, ite[161795](eq[161790](bvadd[161788](3, bvmul(4, Lambda4964Var), 160117), 3), 241, ite[161794](eq[161791](bvadd[161788](3, bvmul(4, Lambda4964Var), 160117), 1), 127, ite[161793](eq[161792](bvadd[161788](3, bvmul(4, Lambda4964Var), 160117), 2), 253, 0)))), ite[161805](eq[161798](bvadd[161797](2, bvmul(4, Lambda4964Var), 160117), 0), 242, ite[161804](eq[161799](bvadd[161797](2, bvmul(4, Lambda4964Var), 160117), 3), 241, ite[161803](eq[161800](bvadd[161797](2, bvmul(4, Lambda4964Var), 160117), 1), 127, ite[161802](eq[161801](bvadd[161797](2, bvmul(4, Lambda4964Var), 160117), 2), 253, 0)))), ite[161815](eq[161808](bvadd[161807](1, bvmul(4, Lambda4964Var), 160117), 0), 242, ite[161814](eq[161809](bvadd[161807](1, bvmul(4, Lambda4964Var), 160117), 3), 241, ite[161813](eq[161810](bvadd[161807](1, bvmul(4, Lambda4964Var), 160117), 1), 127, ite[161812](eq[161811](bvadd[161807](1, bvmul(4, Lambda4964Var), 160117), 2), 253, 0)))), ite[161824](eq[161817](bvadd[161816](bvmul(4, Lambda4964Var), 160117), 0), 242, ite[161823](eq[161818](bvadd[161816](bvmul(4, Lambda4964Var), 160117), 3), 241, ite[161822](eq[161819](bvadd[161816](bvmul(4, Lambda4964Var), 160117), 1), 127, ite[161821](eq[161820](bvadd[161816](bvmul(4, Lambda4964Var), 160117), 2), 253, 0)))))))) )
140276 : 0 { 0x0 +1.0e129 } : BV:32                : 0
160708 : map_get(160707, 140276) : SUM[UNIT,BV:32] : ( 160117 = bvconcat(ite(eq(bvadd(3, bvmul(4, 0)), 0), 242, ite(eq(bvadd(3, bvmul(4, 0)), 3), 241, ite(eq(bvadd(3, bvmul(4, 0)), 1), 127, ite(eq(bvadd(3, bvmul(4, 0)), 2), 253, 0)))), ite(eq(bvadd(2, bvmul(4, 0)), 0), 242, ite(eq(bvadd(2, bvmul(4, 0)), 3), 241, ite(eq(bvadd(2, bvmul(4, 0)), 1), 127, ite(eq(bvadd(2, bvmul(4, 0)), 2), 253, 0)))), ite(eq(bvadd(1, bvmul(4, 0)), 0), 242, ite(eq(bvadd(1, bvmul(4, 0)), 3), 241, ite(eq(bvadd(1, bvmul(4, 0)), 1), 127, ite(eq(bvadd(1, bvmul(4, 0)), 2), 253, 0)))), ite(eq(bvmul(4, 0), 0), 242, ite(eq(bvmul(4, 0), 3), 241, ite(eq(bvmul(4, 0), 1), 127, ite(eq(bvmul(4, 0), 2), 253, 0)))));sum[161949](ite(ite(and(eq(ite(and(bvule(0, 0), bvule(0, 67108863)), 0, ite(and(bvule(67108864, 0), bvule(0, 67108864)), 67108864, ite(and(bvule(67108865, 0), bvule(0, 4294967295)), 67108865, 67108865))), 0), eq(ite(and(bvule(0, 0), bvule(0, 4095)), 0, ite(and(bvule(4097, 0), bvule(0, 4294967295)), 4097, ite(and(bvule(4096, 0), bvule(0, 4096)), 4096, 4096))), 0)), true, false), 1, 0), unit, ite[161948](and(eq(0, 0), eq(0, 0)), 0, bvconcat[161947](ite[161919](eq[161912](bvadd[161911](3, bvmul(4, 0), 160117), 0), 242, ite[161918](eq[161913](bvadd[161911](3, bvmul(4, 0), 160117), 3), 241, ite[161917](eq[161914](bvadd[161911](3, bvmul(4, 0), 160117), 1), 127, ite[161916](eq[161915](bvadd[161911](3, bvmul(4, 0), 160117), 2), 253, 0)))), ite[161928](eq[161921](bvadd[161920](2, bvmul(4, 0), 160117), 0), 242, ite[161927](eq[161922](bvadd[161920](2, bvmul(4, 0), 160117), 3), 241, ite[161926](eq[161923](bvadd[161920](2, bvmul(4, 0), 160117), 1), 127, ite[161925](eq[161924](bvadd[161920](2, bvmul(4, 0), 160117), 2), 253, 0)))), ite[161937](eq[161930](bvadd[161929](1, bvmul(4, 0), 160117), 0), 242, ite[161936](eq[161931](bvadd[161929](1, bvmul(4, 0), 160117), 3), 241, ite[161935](eq[161932](bvadd[161929](1, bvmul(4, 0), 160117), 1), 127, ite[161934](eq[161933](bvadd[161929](1, bvmul(4, 0), 160117), 2), 253, 0)))), ite[161946](eq[161939](bvadd[161938](bvmul(4, 0), 160117), 0), 242, ite[161945](eq[161940](bvadd[161938](bvmul(4, 0), 160117), 3), 241, ite[161944](eq[161941](bvadd[161938](bvmul(4, 0), 160117), 1), 127, ite[161943](eq[161942](bvadd[161938](bvmul(4, 0), 160117), 2), 253, 0))))))) )
140285 : 0 { 0x0 +1.0e1025 } : INT                 : 0
161647 : sum_is(160708, 140285) : BOOL             : false
161648 : and(158472, 161647) : BOOL                : false
161651 : or(140900, 161648) : BOOL                 : false

ce =
=counter_example_begin z3.ce338 c49cdea99d2945da5ea27314fe9b2431
=input.spec-%var-x-1
1 : Lambda3760Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 67108864 { 0x4000000 +1.0e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda3761Var : BV:32
18 : Lambda3762Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 67108865 { 0x4000001 +1.11e137 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4095 { 0xfff +1.48816e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 4097 { 0x1001 +1.48840e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 4096 { 0x1000 +1.48828e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda3763Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 10) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 41) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : bvmul(76, 17) : BV:32
79 : bvadd(75, 78) : BV:32
80 : eq(79, 2) : BOOL
81 : 242 { 0xf2 -14 } : BV:8
82 : eq(79, 75) : BOOL
83 : 241 { 0xf1 -15 } : BV:8
84 : 1 { 0x1 +1.11e129 } : BV:32
85 : eq(79, 84) : BOOL
86 : 127 { 0x7f } : BV:8
87 : 2 { 0x2 +1.23e129 } : BV:32
88 : eq(79, 87) : BOOL
89 : 253 { 0xfd -3 } : BV:8
90 : 0 { 0x0 } : BV:8
91 : ite(88, 89, 90) : BV:8
92 : ite(85, 86, 91) : BV:8
93 : ite(82, 83, 92) : BV:8
94 : ite(80, 81, 93) : BV:8
95 : bvadd(87, 78) : BV:32
96 : eq(95, 2) : BOOL
97 : eq(95, 75) : BOOL
98 : eq(95, 84) : BOOL
99 : eq(95, 87) : BOOL
100 : ite(99, 89, 90) : BV:8
101 : ite(98, 86, 100) : BV:8
102 : ite(97, 83, 101) : BV:8
103 : ite(96, 81, 102) : BV:8
104 : bvadd(84, 78) : BV:32
105 : eq(104, 2) : BOOL
106 : eq(104, 75) : BOOL
107 : eq(104, 84) : BOOL
108 : eq(104, 87) : BOOL
109 : ite(108, 89, 90) : BV:8
110 : ite(107, 86, 109) : BV:8
111 : ite(106, 83, 110) : BV:8
112 : ite(105, 81, 111) : BV:8
113 : eq(78, 2) : BOOL
114 : eq(78, 75) : BOOL
115 : eq(78, 84) : BOOL
116 : eq(78, 87) : BOOL
117 : ite(116, 89, 90) : BV:8
118 : ite(115, 86, 117) : BV:8
119 : ite(114, 83, 118) : BV:8
120 : ite(113, 81, 119) : BV:8
121 : bvconcat(94, 103, 112, 120) : BV:32
122 : bvadd(75, 77, 121) : BV:32
123 : eq(122, 2) : BOOL
124 : eq(122, 75) : BOOL
125 : eq(122, 84) : BOOL
126 : eq(122, 87) : BOOL
127 : ite(126, 89, 90) : BV:8
128 : ite(125, 86, 127) : BV:8
129 : ite(124, 83, 128) : BV:8
130 : ite(123, 81, 129) : BV:8
131 : bvadd(87, 77, 121) : BV:32
132 : eq(131, 2) : BOOL
133 : eq(131, 75) : BOOL
134 : eq(131, 84) : BOOL
135 : eq(131, 87) : BOOL
136 : ite(135, 89, 90) : BV:8
137 : ite(134, 86, 136) : BV:8
138 : ite(133, 83, 137) : BV:8
139 : ite(132, 81, 138) : BV:8
140 : bvadd(84, 77, 121) : BV:32
141 : eq(140, 2) : BOOL
142 : eq(140, 75) : BOOL
143 : eq(140, 84) : BOOL
144 : eq(140, 87) : BOOL
145 : ite(144, 89, 90) : BV:8
146 : ite(143, 86, 145) : BV:8
147 : ite(142, 83, 146) : BV:8
148 : ite(141, 81, 147) : BV:8
149 : bvadd(77, 121) : BV:32
150 : eq(149, 2) : BOOL
151 : eq(149, 75) : BOOL
152 : eq(149, 84) : BOOL
153 : eq(149, 87) : BOOL
154 : ite(153, 89, 90) : BV:8
155 : ite(152, 86, 154) : BV:8
156 : ite(151, 83, 155) : BV:8
157 : ite(150, 81, 156) : BV:8
158 : bvconcat(130, 139, 148, 157) : BV:32
159 : ite(55, 2, 158) : BV:32
160 : ite(74, 158, 159) : BV:32
161 : ite(55, 2, 160) : BV:32
162 : lambda(52, 161) : FUNCTION[BV:32 -> BV:32]
163 : map(51, 162) : MAP[BV:32 -> BV:32]
164 : lambda(17, 163) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
165 : map(16, 164) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
166 : sym_const(165) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda3773Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 67108864 { 0x4000000 +1.0e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda3774Var : BV:32
18 : Lambda3775Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 67108865 { 0x4000001 +1.11e137 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4095 { 0xfff +1.48816e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 4097 { 0x1001 +1.48840e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 4096 { 0x1000 +1.48828e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda3776Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59) : BV:32
61 : eq(60, 2) : BOOL
62 : 242 { 0xf2 -14 } : BV:8
63 : eq(60, 56) : BOOL
64 : 241 { 0xf1 -15 } : BV:8
65 : 1 { 0x1 +1.11e129 } : BV:32
66 : eq(60, 65) : BOOL
67 : 127 { 0x7f } : BV:8
68 : 2 { 0x2 +1.23e129 } : BV:32
69 : eq(60, 68) : BOOL
70 : 253 { 0xfd -3 } : BV:8
71 : 0 { 0x0 } : BV:8
72 : ite(69, 70, 71) : BV:8
73 : ite(66, 67, 72) : BV:8
74 : ite(63, 64, 73) : BV:8
75 : ite(61, 62, 74) : BV:8
76 : bvadd(68, 59) : BV:32
77 : eq(76, 2) : BOOL
78 : eq(76, 56) : BOOL
79 : eq(76, 65) : BOOL
80 : eq(76, 68) : BOOL
81 : ite(80, 70, 71) : BV:8
82 : ite(79, 67, 81) : BV:8
83 : ite(78, 64, 82) : BV:8
84 : ite(77, 62, 83) : BV:8
85 : bvadd(65, 59) : BV:32
86 : eq(85, 2) : BOOL
87 : eq(85, 56) : BOOL
88 : eq(85, 65) : BOOL
89 : eq(85, 68) : BOOL
90 : ite(89, 70, 71) : BV:8
91 : ite(88, 67, 90) : BV:8
92 : ite(87, 64, 91) : BV:8
93 : ite(86, 62, 92) : BV:8
94 : eq(59, 2) : BOOL
95 : eq(59, 56) : BOOL
96 : eq(59, 65) : BOOL
97 : eq(59, 68) : BOOL
98 : ite(97, 70, 71) : BV:8
99 : ite(96, 67, 98) : BV:8
100 : ite(95, 64, 99) : BV:8
101 : ite(94, 62, 100) : BV:8
102 : bvconcat(75, 84, 93, 101) : BV:32
103 : bvadd(56, 58, 102) : BV:32
104 : eq(103, 2) : BOOL
105 : eq(103, 56) : BOOL
106 : eq(103, 65) : BOOL
107 : eq(103, 68) : BOOL
108 : ite(107, 70, 71) : BV:8
109 : ite(106, 67, 108) : BV:8
110 : ite(105, 64, 109) : BV:8
111 : ite(104, 62, 110) : BV:8
112 : bvadd(68, 58, 102) : BV:32
113 : eq(112, 2) : BOOL
114 : eq(112, 56) : BOOL
115 : eq(112, 65) : BOOL
116 : eq(112, 68) : BOOL
117 : ite(116, 70, 71) : BV:8
118 : ite(115, 67, 117) : BV:8
119 : ite(114, 64, 118) : BV:8
120 : ite(113, 62, 119) : BV:8
121 : bvadd(65, 58, 102) : BV:32
122 : eq(121, 2) : BOOL
123 : eq(121, 56) : BOOL
124 : eq(121, 65) : BOOL
125 : eq(121, 68) : BOOL
126 : ite(125, 70, 71) : BV:8
127 : ite(124, 67, 126) : BV:8
128 : ite(123, 64, 127) : BV:8
129 : ite(122, 62, 128) : BV:8
130 : bvadd(58, 102) : BV:32
131 : eq(130, 2) : BOOL
132 : eq(130, 56) : BOOL
133 : eq(130, 65) : BOOL
134 : eq(130, 68) : BOOL
135 : ite(134, 70, 71) : BV:8
136 : ite(133, 67, 135) : BV:8
137 : ite(132, 64, 136) : BV:8
138 : ite(131, 62, 137) : BV:8
139 : bvconcat(111, 120, 129, 138) : BV:32
140 : ite(55, 2, 139) : BV:32
141 : lambda(52, 140) : FUNCTION[BV:32 -> BV:32]
142 : map(51, 141) : MAP[BV:32 -> BV:32]
143 : lambda(17, 142) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
144 : map(16, 143) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
145 : sym_const(144) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 242, [ 1; 1 ] -> 127, [ 2; 2 ] -> 253, [ 3; 3 ] -> 241, [ 4; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 408417167 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 408417168; 408417171 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 408417172; 2044707699 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2044707700; 2044707703 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2044707704; 3493055215 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3493055216; 3493055219 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3493055220; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 408417168 { 0x1857f390 +1.68712043e177 } : BV:32
=input.dst.llvm-%m
1 : 4096 { 0x1000 +1.48828e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3493055216 { 0xd033caf0 -801912080 -1.40463066e33 } : BV:32
=input.dst.llvm-%n
1 : 67108864 { 0x4000000 +1.0e137 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2044707700 { 0x79dfc374 +1.74815225e116 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3493055216 { 0xd033caf0 -801912080 -1.40463066e33 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3493055219 { 0xd033caf3 -801912077 -1.40463101e33 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2044707700 { 0x79dfc374 +1.74815225e116 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2044707703 { 0x79dfc377 +1.74815261e116 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 408417168 { 0x1857f390 +1.68712043e177 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 408417171 { 0x1857f393 +1.68712079e177 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda3695Var : BV:32
2 : Lambda3696Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 67108864 { 0x4000000 +1.0e137 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 67108865 { 0x4000001 +1.11e137 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 4095 { 0xfff +1.48816e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 4097 { 0x1001 +1.48840e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 14) : BOOL
36 : and(34, 35) : BOOL
37 : 4096 { 0x1000 +1.48828e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 37) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : bvmul(49, 1) : BV:32
52 : bvadd(48, 51) : BV:32
53 : eq(52, 3) : BOOL
54 : 242 { 0xf2 -14 } : BV:8
55 : eq(52, 48) : BOOL
56 : 241 { 0xf1 -15 } : BV:8
57 : 1 { 0x1 +1.11e129 } : BV:32
58 : eq(52, 57) : BOOL
59 : 127 { 0x7f } : BV:8
60 : 2 { 0x2 +1.23e129 } : BV:32
61 : eq(52, 60) : BOOL
62 : 253 { 0xfd -3 } : BV:8
63 : 0 { 0x0 } : BV:8
64 : ite(61, 62, 63) : BV:8
65 : ite(58, 59, 64) : BV:8
66 : ite(55, 56, 65) : BV:8
67 : ite(53, 54, 66) : BV:8
68 : bvadd(60, 51) : BV:32
69 : eq(68, 3) : BOOL
70 : eq(68, 48) : BOOL
71 : eq(68, 57) : BOOL
72 : eq(68, 60) : BOOL
73 : ite(72, 62, 63) : BV:8
74 : ite(71, 59, 73) : BV:8
75 : ite(70, 56, 74) : BV:8
76 : ite(69, 54, 75) : BV:8
77 : bvadd(57, 51) : BV:32
78 : eq(77, 3) : BOOL
79 : eq(77, 48) : BOOL
80 : eq(77, 57) : BOOL
81 : eq(77, 60) : BOOL
82 : ite(81, 62, 63) : BV:8
83 : ite(80, 59, 82) : BV:8
84 : ite(79, 56, 83) : BV:8
85 : ite(78, 54, 84) : BV:8
86 : eq(51, 3) : BOOL
87 : eq(51, 48) : BOOL
88 : eq(51, 57) : BOOL
89 : eq(51, 60) : BOOL
90 : ite(89, 62, 63) : BV:8
91 : ite(88, 59, 90) : BV:8
92 : ite(87, 56, 91) : BV:8
93 : ite(86, 54, 92) : BV:8
94 : bvconcat(67, 76, 85, 93) : BV:32
95 : bvadd(48, 50, 94) : BV:32
96 : eq(95, 3) : BOOL
97 : eq(95, 48) : BOOL
98 : eq(95, 57) : BOOL
99 : eq(95, 60) : BOOL
100 : ite(99, 62, 63) : BV:8
101 : ite(98, 59, 100) : BV:8
102 : ite(97, 56, 101) : BV:8
103 : ite(96, 54, 102) : BV:8
104 : bvadd(60, 50, 94) : BV:32
105 : eq(104, 3) : BOOL
106 : eq(104, 48) : BOOL
107 : eq(104, 57) : BOOL
108 : eq(104, 60) : BOOL
109 : ite(108, 62, 63) : BV:8
110 : ite(107, 59, 109) : BV:8
111 : ite(106, 56, 110) : BV:8
112 : ite(105, 54, 111) : BV:8
113 : bvadd(57, 50, 94) : BV:32
114 : eq(113, 3) : BOOL
115 : eq(113, 48) : BOOL
116 : eq(113, 57) : BOOL
117 : eq(113, 60) : BOOL
118 : ite(117, 62, 63) : BV:8
119 : ite(116, 59, 118) : BV:8
120 : ite(115, 56, 119) : BV:8
121 : ite(114, 54, 120) : BV:8
122 : bvadd(50, 94) : BV:32
123 : eq(122, 3) : BOOL
124 : eq(122, 48) : BOOL
125 : eq(122, 57) : BOOL
126 : eq(122, 60) : BOOL
127 : ite(126, 62, 63) : BV:8
128 : ite(125, 59, 127) : BV:8
129 : ite(124, 56, 128) : BV:8
130 : ite(123, 54, 129) : BV:8
131 : bvconcat(103, 112, 121, 130) : BV:32
132 : ite(6, 3, 131) : BV:32
133 : ite(47, 131, 132) : BV:32
134 : ite(6, 3, 133) : BV:32
135 : lambda(1, 2, 134) : FUNCTION[BV:32,BV:32 -> BV:32]
136 : sym_const(135) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda3700Var : BV:32
2 : Lambda3701Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 67108864 { 0x4000000 +1.0e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 67108865 { 0x4000001 +1.11e137 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4095 { 0xfff +1.48816e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 4097 { 0x1001 +1.48840e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 14) : BOOL
28 : and(26, 27) : BOOL
29 : 4096 { 0x1000 +1.48828e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 67108863 ] -> true, [ 67108864; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 67108863 ] -> true, [ 67108864; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda3709Var : BV:32
2 : Lambda3710Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 67108864 { 0x4000000 +1.0e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 67108865 { 0x4000001 +1.11e137 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4095 { 0xfff +1.48816e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 4097 { 0x1001 +1.48840e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 14) : BOOL
28 : and(26, 27) : BOOL
29 : 4096 { 0x1000 +1.48828e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda3705Var : BV:32
2 : Lambda3706Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10) : BV:32
12 : eq(11, 3) : BOOL
13 : 242 { 0xf2 -14 } : BV:8
14 : eq(11, 7) : BOOL
15 : 241 { 0xf1 -15 } : BV:8
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : eq(11, 16) : BOOL
18 : 127 { 0x7f } : BV:8
19 : 2 { 0x2 +1.23e129 } : BV:32
20 : eq(11, 19) : BOOL
21 : 253 { 0xfd -3 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : ite(17, 18, 23) : BV:8
25 : ite(14, 15, 24) : BV:8
26 : ite(12, 13, 25) : BV:8
27 : bvadd(19, 10) : BV:32
28 : eq(27, 3) : BOOL
29 : eq(27, 7) : BOOL
30 : eq(27, 16) : BOOL
31 : eq(27, 19) : BOOL
32 : ite(31, 21, 22) : BV:8
33 : ite(30, 18, 32) : BV:8
34 : ite(29, 15, 33) : BV:8
35 : ite(28, 13, 34) : BV:8
36 : bvadd(16, 10) : BV:32
37 : eq(36, 3) : BOOL
38 : eq(36, 7) : BOOL
39 : eq(36, 16) : BOOL
40 : eq(36, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : ite(39, 18, 41) : BV:8
43 : ite(38, 15, 42) : BV:8
44 : ite(37, 13, 43) : BV:8
45 : eq(10, 3) : BOOL
46 : eq(10, 7) : BOOL
47 : eq(10, 16) : BOOL
48 : eq(10, 19) : BOOL
49 : ite(48, 21, 22) : BV:8
50 : ite(47, 18, 49) : BV:8
51 : ite(46, 15, 50) : BV:8
52 : ite(45, 13, 51) : BV:8
53 : bvconcat(26, 35, 44, 52) : BV:32
54 : bvadd(7, 9, 53) : BV:32
55 : eq(54, 3) : BOOL
56 : eq(54, 7) : BOOL
57 : eq(54, 16) : BOOL
58 : eq(54, 19) : BOOL
59 : ite(58, 21, 22) : BV:8
60 : ite(57, 18, 59) : BV:8
61 : ite(56, 15, 60) : BV:8
62 : ite(55, 13, 61) : BV:8
63 : bvadd(19, 9, 53) : BV:32
64 : eq(63, 3) : BOOL
65 : eq(63, 7) : BOOL
66 : eq(63, 16) : BOOL
67 : eq(63, 19) : BOOL
68 : ite(67, 21, 22) : BV:8
69 : ite(66, 18, 68) : BV:8
70 : ite(65, 15, 69) : BV:8
71 : ite(64, 13, 70) : BV:8
72 : bvadd(16, 9, 53) : BV:32
73 : eq(72, 3) : BOOL
74 : eq(72, 7) : BOOL
75 : eq(72, 16) : BOOL
76 : eq(72, 19) : BOOL
77 : ite(76, 21, 22) : BV:8
78 : ite(75, 18, 77) : BV:8
79 : ite(74, 15, 78) : BV:8
80 : ite(73, 13, 79) : BV:8
81 : bvadd(9, 53) : BV:32
82 : eq(81, 3) : BOOL
83 : eq(81, 7) : BOOL
84 : eq(81, 16) : BOOL
85 : eq(81, 19) : BOOL
86 : ite(85, 21, 22) : BV:8
87 : ite(84, 18, 86) : BV:8
88 : ite(83, 15, 87) : BV:8
89 : ite(82, 13, 88) : BV:8
90 : bvconcat(62, 71, 80, 89) : BV:32
91 : ite(6, 3, 90) : BV:32
92 : lambda(1, 2, 91) : FUNCTION[BV:32,BV:32 -> BV:32]
93 : sym_const(92) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1626471087
=counter_example_end


</MSG>
<MSG>0:32 : Discovered that the correlation was useless for the product-TFG foo.A1.B2 (d:3, s:0, sp: 5)...</MSG>
<MSG>0:32 : Chose (for CE propagation) product-TFG foo.A1.B1 (d:3, s:0, sp: 5) from a frontier of size 3...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 13 counterexamples (for correlating 7 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%7%bbentry[mu 0, delta {0,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:32 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B1...</MSG>
<MSG>0:32 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B1...</MSG>
<MSG>0:32 : Creating ssa-path for the src-tfg path L3%7%bbentry --> L3%7%bbentry ending at L3%7%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:32 : Adding a CG edge composition using the src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:32 : Identifying common alloc-deallocs in the src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry
</MSG>
<MSG>0:32 : Identified no common alloc-deallocs in the src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:32 : Adding new edge to the product-TFG foo.A1.B1 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%7%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : foo.A1.B1: Computing loop hoisting select expressions at toPC L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : foo.A1.B1: Computing loop hoisting non-linear expressions at toPC L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : foo.A1.B1: Adding node L3%7%bbentry_Lfor.cond1%1%bbentry to the product-TFG...</MSG>
<MSG>0:32 : foo.A1.B1: Getting alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : foo.A1.B1: Found no alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : foo.A1.B1: Adding edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : foo.A1.B1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:32 : foo.A1.B1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:32 : foo.A1.B1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:32 : foo.A1.B1: Propagated 7 out of 13 counter-examples across edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry</MSG>
<MSG>0:33 : foo.A1.B1: Added the 7 propagated CEs at PC L3%7%bbentry_Lfor.cond1%1%bbentry and propagated further.
</MSG>
<MSG>0:33 : foo.A1.B1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:33 : foo.A1.B1: Finished executing CG's add edge function...</MSG>
<MSG>0:33 : foo.A1.B1: Computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : foo.A1.B1: Done computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : Done adding new edge to the product-TFG foo.A1.B1 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%7%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : Done adding a CG edge composition using the src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:33 : Added correlation to the product-TFG foo.A1.B1 (d:3, s:0, sp: 5) and created a correlation entry...</MSG>
<MSG>0:33 : Chose (after CE propagation) product-TFG foo.A1.B1 (d:3, s:0, sp: 5) from a frontier of size 3...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%7%bbentry at mu 0 delta {0,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 13 counterexamples (for correlating 7 bv exprs)
            L3%7%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry, A (line 4 at column 28))
                L3%7%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 7 counterexamples (for correlating 9 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%7%bbentry[mu 0, delta {0,0}]
<MSG>0:33 : foo.A1.B1: Updating invariants over the newly added edges in edge composition L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:33 : Constructed infer_invariants_dfa with initial worklist L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : foo.A1.B1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:33 : foo.A1.B1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>0:33 : foo.A1.B1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:33 : foo.A1.B1: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:33 : foo.A1.B1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:33 : foo.A1.B1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:33 : foo.A1.B1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 9 exprs and 2 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:34 : foo.A1.B1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht12-prove_trivial7-prove5...</MSG>
<MSG>0:34 : foo.A1.B1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:34 : foo.A1.B1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:34 : foo.A1.B1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:34 : foo.A1.B1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>0:34 : foo.A1.B1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:35 : foo.A1.B1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>0:35 : foo.A1.B1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:35 : foo.A1.B1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:35 : foo.A1.B1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:35 : foo.A1.B1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:35 : foo.A1.B1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:36 : foo.A1.B1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht10-prove_trivial5-prove5...</MSG>
<MSG>0:36 : foo.A1.B1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 14 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:40 : foo.A1.B1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht15-prove_trivial2-prove13...</MSG>
<MSG>0:40 : foo.A1.B1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:40 : foo.A1.B1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:40 : foo.A1.B1: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry), result: changed ...</MSG>
<MSG>0:40 : foo.A1.B1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>0:40 : foo.A1.B1 (d:6, s:0, sp: 5): checked newly added edge and inferred invariants...</MSG>
<MSG>0:40 : foo.A1.B1 (d:6, s:0, sp: 18): Chosen CG is no longer the most promising correlation entry; returning delayed-exploration...</MSG>
<MSG>0:40 : Chosen product-TFG foo.A1.B1 will be explored later...</MSG>
<MSG>0:40 : Decided to explore product-TFG later after re-evaluating its best-first-search rank...</MSG>
<MSG>0:40 : Chose (after CE propagation) product-TFG foo.A1.B3 (d:6, s:0, sp: 5) from a frontier of size 3...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%11%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 13 counterexamples (for correlating 7 bv exprs)
            L3%11%bbentry_Lfor.cond1%1%bbentry (C L3%11%bbentry, A (line 4 at column 28))
                L3%11%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 6 counterexamples (for correlating 9 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%11%bbentry[mu 1, delta {1,0}]
<MSG>0:40 : foo.A1.B3: Updating invariants over the newly added edges in edge composition L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:40 : Constructed infer_invariants_dfa with initial worklist L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:40 : foo.A1.B3: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:40 : foo.A1.B3: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>0:40 : foo.A1.B3: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:40 : foo.A1.B3: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:40 : foo.A1.B3: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:40 : foo.A1.B3: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:40 : foo.A1.B3: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 9 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:40 : foo.A1.B3: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht8-prove_trivial6-prove2...</MSG>
<MSG>0:40 : foo.A1.B3: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:40 : foo.A1.B3: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:40 : foo.A1.B3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:40 : foo.A1.B3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:40 : foo.A1.B3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:41 : foo.A1.B3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:41 : foo.A1.B3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:41 : foo.A1.B3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:41 : foo.A1.B3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:41 : foo.A1.B3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:41 : foo.A1.B3: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:41 : foo.A1.B3: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht10-prove_trivial5-prove5...</MSG>
<MSG>0:41 : foo.A1.B3: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:45 : foo.A1.B3: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht12-prove_trivial2-prove10...</MSG>
<MSG>0:45 : foo.A1.B3: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:45 : foo.A1.B3: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:45 : foo.A1.B3: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry), result: changed ...</MSG>
<MSG>0:45 : foo.A1.B3: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>0:45 : foo.A1.B3 (d:6, s:0, sp: 5): checked newly added edge and inferred invariants...</MSG>
<MSG>0:45 : foo.A1.B3 (d:6, s:0, sp: 14): Chosen CG is no longer the most promising correlation entry; returning delayed-exploration...</MSG>
<MSG>0:45 : Chosen product-TFG foo.A1.B3 will be explored later...</MSG>
<MSG>0:45 : Decided to explore product-TFG later after re-evaluating its best-first-search rank...</MSG>
<MSG>0:45 : Chose (after CE propagation) product-TFG foo.A1.B4 (d:6, s:0, sp: 5) from a frontier of size 3...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%19%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 13 counterexamples (for correlating 7 bv exprs)
            L3%19%bbentry_Lfor.cond1%1%bbentry (C L3%19%bbentry, A (line 4 at column 28))
                L3%19%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 6 counterexamples (for correlating 12 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%19%bbentry[mu 1, delta {1,0}]
<MSG>0:45 : foo.A1.B4: Updating invariants over the newly added edges in edge composition L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:45 : Constructed infer_invariants_dfa with initial worklist L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:45 : foo.A1.B4: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:45 : foo.A1.B4: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>0:45 : foo.A1.B4: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:45 : foo.A1.B4: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:45 : foo.A1.B4: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:45 : foo.A1.B4: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:45 : foo.A1.B4: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 12 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:45 : foo.A1.B4: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht11-prove_trivial8-prove3...</MSG>
<MSG>0:45 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:45 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:45 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:46 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial0-prove4...</MSG>
<MSG>0:46 : foo.A1.B4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:46 : foo.A1.B4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:46 : foo.A1.B4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:46 : foo.A1.B4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:46 : foo.A1.B4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:46 : foo.A1.B4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:46 : foo.A1.B4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:46 : foo.A1.B4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:46 : foo.A1.B4: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:46 : foo.A1.B4: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht10-prove_trivial5-prove5...</MSG>
<MSG>0:46 : foo.A1.B4: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 13 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:48 : foo.A1.B4: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht14-prove_trivial2-prove12...</MSG>
<MSG>0:48 : foo.A1.B4: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:48 : foo.A1.B4: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:48 : foo.A1.B4: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: changed ...</MSG>
<MSG>0:48 : foo.A1.B4: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>0:48 : foo.A1.B4 (d:6, s:0, sp: 5): checked newly added edge and inferred invariants...</MSG>
<MSG>0:48 : foo.A1.B4 (d:6, s:0, sp: 14): Chosen CG is no longer the most promising correlation entry; returning delayed-exploration...</MSG>
<MSG>0:48 : Chosen product-TFG foo.A1.B4 will be explored later...</MSG>
<MSG>0:48 : Decided to explore product-TFG later after re-evaluating its best-first-search rank...</MSG>
<MSG>0:48 : Chose (after CE propagation) product-TFG foo.A1.B3 (d:6, s:0, sp: 14) from a frontier of size 3...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%11%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 13 counterexamples (for correlating 7 bv exprs)
            L3%11%bbentry_Lfor.cond1%1%bbentry (C L3%11%bbentry, A (line 4 at column 28))
                L3%11%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 9 counterexamples (for correlating 9 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%11%bbentry[mu 1, delta {1,0}]
<MSG>0:48 : foo.A1.B3: Updating invariants over the newly added edges in edge composition L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:48 : Constructed infer_invariants_dfa with initial worklist L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:48 : foo.A1.B3: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:48 : foo.A1.B3: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>0:48 : foo.A1.B3: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:48 : foo.A1.B3: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:48 : foo.A1.B3: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:48 : foo.A1.B3: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:48 : foo.A1.B3: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 9 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:48 : foo.A1.B3: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial6-prove1...</MSG>
<MSG>0:48 : foo.A1.B3: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:48 : foo.A1.B3: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:48 : foo.A1.B3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:48 : foo.A1.B3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:48 : foo.A1.B3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:48 : foo.A1.B3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:48 : foo.A1.B3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:48 : foo.A1.B3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:48 : foo.A1.B3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:48 : foo.A1.B3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:48 : foo.A1.B3: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:48 : foo.A1.B3: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht10-prove_trivial5-prove5...</MSG>
<MSG>0:48 : foo.A1.B3: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:48 : foo.A1.B3: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial2-prove1...</MSG>
<MSG>0:48 : foo.A1.B3: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:48 : foo.A1.B3: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:48 : foo.A1.B3: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>0:48 : foo.A1.B3: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>0:48 : foo.A1.B3 (d:6, s:0, sp: 14): checked newly added edge and inferred invariants...</MSG>
<MSG>0:48 : foo.A1.B3 (d:6, s:0, sp: 14): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:48 : product-TFG foo.A1.B3: Enumerating correlations for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L3%11%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:48 : Considering 1 paths to src pc L3%7%bbentry as correlation candidates for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%11%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:48 : Attempting correlation of src pathset L3%11%bbentry=>L3%7%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%11%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:48 : Found 1 feasible correlations for paths to src pc L3%7%bbentry as correlation candidates for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%11%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:48 : product-TFG foo.A1.B3: Found 1 correlations for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L3%11%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:48 : product-TFG foo.A1.B3 created 1 possibilities in group foo.A1.B3.C...</MSG>
<MSG>0:48 : Chose (for CE propagation) product-TFG foo.A1.B3.C1 (d:6, s:0, sp: 14) from a frontier of size 3...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%11%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 13 counterexamples (for correlating 7 bv exprs)
            L3%11%bbentry_Lfor.cond1%1%bbentry (C L3%11%bbentry, A (line 4 at column 28))
                L3%11%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 11 counterexamples (for correlating 9 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%11%bbentry=>L3%7%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:48 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B3.C1...</MSG>
<MSG>0:48 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B3.C1...</MSG>
<MSG>0:48 : Creating ssa-path for the src-tfg path L3%11%bbentry --> L3%7%bbentry ending at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:48 : Adding a CG edge composition using the src path L3%11%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry</MSG>
<MSG>0:48 : Identifying common alloc-deallocs in the src path L3%11%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry
</MSG>
<MSG>0:48 : Identified no common alloc-deallocs in the src path L3%11%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry</MSG>
<MSG>0:48 : Adding new edge to the product-TFG foo.A1.B3.C1 for fromPC L3%11%bbentry_Lfor.cond1%1%bbentry and toPC L3%7%bbentry_Lfor.cond%1%bbentry, src path L3%11%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:48 : foo.A1.B3.C1: Getting alloca-ptrs on edge L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:48 : foo.A1.B3.C1: Found no alloca-ptrs on edge L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:48 : foo.A1.B3.C1: Adding edge L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:48 : foo.A1.B3.C1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:48 : foo.A1.B3.C1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:48 : foo.A1.B3.C1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:49 : foo.A1.B3.C1: Propagated 7 out of 11 counter-examples across edge L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry</MSG>
<MSG>0:50 : foo.A1.B3.C1: Added the 7 propagated CEs at PC L3%7%bbentry_Lfor.cond%1%bbentry and propagated further.
</MSG>
<MSG>0:50 : foo.A1.B3.C1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Finished executing CG's add edge function...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Computing CG regions after the addition of the edge L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Done computing CG regions after the addition of the edge L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:50 : Done adding new edge to the product-TFG foo.A1.B3.C1 for fromPC L3%11%bbentry_Lfor.cond1%1%bbentry and toPC L3%7%bbentry_Lfor.cond%1%bbentry, src path L3%11%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:50 : Done adding a CG edge composition using the src path L3%11%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry</MSG>
<MSG>0:50 : Added correlation to the product-TFG foo.A1.B3.C1 (d:6, s:0, sp: 14) and created a correlation entry...</MSG>
<MSG>0:50 : Chose (after CE propagation) product-TFG foo.A1.B3.C1 (d:6, s:0, sp: 14) from a frontier of size 3...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%11%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%11%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 21 counterexamples (for correlating 7 bv exprs)
            L3%11%bbentry_Lfor.cond1%1%bbentry (C L3%11%bbentry, A (line 4 at column 28))
                L3%11%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 13 counterexamples (for correlating 9 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%11%bbentry=>L3%7%bbentry[mu 1, delta {1,0}]
<MSG>0:50 : foo.A1.B3.C1: Updating invariants over the newly added edges in edge composition L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:50 : Constructed infer_invariants_dfa with initial worklist L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>0:50 : foo.A1.B3.C1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 9 exprs and 7 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht6-prove_trivial5-prove1...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial1-prove2...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial1-prove2...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial2-prove5...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial2-prove1...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Relaxing dst graph's memlabels for edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Done relaxing dst graph's memlabels for edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>0:51 : foo.A1.B3.C1: Checking well-formedness assertions on outgoing edges from L3%11%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Relaxing invariants across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 9 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial3-prove1...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:52 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht5-prove_trivial0-prove5...</MSG>
<MSG>0:52 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:52 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:52 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:52 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:52 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 9 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial3-prove1...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariants across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing memlabels and invariants across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>0:53 : foo.A1.B3.C1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 9 exprs and 7 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht6-prove_trivial5-prove1...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht6-prove_trivial2-prove4...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial2-prove1...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing dst graph's memlabels for edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing dst graph's memlabels for edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>0:54 : foo.A1.B3.C1: Checking well-formedness assertions on outgoing edges from L3%11%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariants across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 9 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial3-prove1...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariants across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged ...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing memlabels and invariants across the edge composition (L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>0:54 : foo.A1.B3.C1 (d:6, s:0, sp: 14): checked newly added edge and inferred invariants...</MSG>
<MSG>0:54 : foo.A1.B3.C1 (d:6, s:0, sp: 14): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:55 : product-TFG foo.A1.B3.C1: Enumerating correlations for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] starting at L3%11%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:55 : Considering 2 paths to src pc L3%11%bbentry as correlation candidates for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%11%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:55 : Attempting correlation of src pathset L3%11%bbentry=>L3%11%bbentry[mu 0, delta {0,0}] as correlation candidate for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%11%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:55 : Attempting correlation of src pathset L3%11%bbentry=>L3%11%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%11%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:55 : Found 2 feasible correlations for paths to src pc L3%11%bbentry as correlation candidates for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%11%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:55 : product-TFG foo.A1.B3.C1: Found 2 correlations for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] starting at L3%11%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:55 : product-TFG foo.A1.B3.C1 created 2 possibilities in group foo.A1.B3.C1.D...</MSG>
<MSG>0:55 : Chose (for CE propagation) product-TFG foo.A1.B3.C1.D2 (d:6, s:0, sp: 14) from a frontier of size 4...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%11%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%11%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 28 counterexamples (for correlating 7 bv exprs)
            L3%11%bbentry_Lfor.cond1%1%bbentry (C L3%11%bbentry, A (line 4 at column 28))
                L3%11%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 18 counterexamples (for correlating 9 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%11%bbentry=>L3%11%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:55 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B3.C1.D2...</MSG>
<MSG>0:55 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B3.C1.D2...</MSG>
<MSG>0:55 : Creating ssa-path for the src-tfg path L3%11%bbentry --> L3%11%bbentry ending at L3%11%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:55 : Adding a CG edge composition using the src path L3%11%bbentry --> L3%11%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:55 : Identifying common alloc-deallocs in the src path L3%11%bbentry --> L3%11%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry
</MSG>
<MSG>0:55 : Identified no common alloc-deallocs in the src path L3%11%bbentry --> L3%11%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:55 : Adding new edge to the product-TFG foo.A1.B3.C1.D2 for fromPC L3%11%bbentry_Lfor.cond1%1%bbentry and toPC L3%11%bbentry_Lfor.cond1%1%bbentry, src path L3%11%bbentry --> L3%11%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>0:55 : foo.A1.B3.C1.D2: Getting alloca-ptrs on edge L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:55 : foo.A1.B3.C1.D2: Found no alloca-ptrs on edge L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:55 : foo.A1.B3.C1.D2: Adding edge L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:55 : foo.A1.B3.C1.D2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:55 : foo.A1.B3.C1.D2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:55 : foo.A1.B3.C1.D2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:55 : foo.A1.B3.C1.D2: marking unstable at L3%11%bbentry_Lfor.cond1%1%bbentry due to failing condition:
wfcond.from_pcL3%11%bbentry_Lfor.cond1%1%bbentry.to_pcL3%11%bbentry_Lfor.cond1%1%bbentry-dst-edgecond-implies-src-edgecond
140614 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32 : 0
140381 : input.dst.llvm-%m : BV:32                 : 1024
140615 : bvult(140614, 140381) : BOOL              : true
197720 : not(140615) : BOOL                        : false
140513 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]] : ( sum(2147483648, unit, map(lambda(Lambda24838Var, ite(and(bvule(0, Lambda24838Var), bvule(Lambda24838Var, 1023)), true, ite(and(bvule(1024, Lambda24838Var), bvule(Lambda24838Var, 4294967295)), false, false))), lambda(Lambda24839Var, ite(eq(Lambda24839Var, 0), 0, bvconcat(ite(eq(bvadd(3, bvmul(4, Lambda24839Var), 1152), 2740192), 2, ite(eq(bvadd(3, bvmul(4, Lambda24839Var), 1152), 3135460), 128, ite(eq(bvadd(3, bvmul(4, Lambda24839Var), 1152), 3135461), 4, 0))), ite(eq(bvadd(2, bvmul(4, Lambda24839Var), 1152), 2740192), 2, ite(eq(bvadd(2, bvmul(4, Lambda24839Var), 1152), 3135460), 128, ite(eq(bvadd(2, bvmul(4, Lambda24839Var), 1152), 3135461), 4, 0))), ite(eq(bvadd(1, bvmul(4, Lambda24839Var), 1152), 2740192), 2, ite(eq(bvadd(1, bvmul(4, Lambda24839Var), 1152), 3135460), 128, ite(eq(bvadd(1, bvmul(4, Lambda24839Var), 1152), 3135461), 4, 0))), ite(eq(bvadd(bvmul(4, Lambda24839Var), 1152), 2740192), 2, ite(eq(bvadd(bvmul(4, Lambda24839Var), 1152), 3135460), 128, ite(eq(bvadd(bvmul(4, Lambda24839Var), 1152), 3135461), 4, 0)))))))) )
140283 : 1 { 0x1 +1.0e1025 } : INT                 : 1
140540 : sum_get(140513, 140283) : MAP[BV:32 -> BV:32] : ( map(lambda(Lambda24925Var, ite(and(bvule(0, Lambda24925Var), bvule(Lambda24925Var, 1023)), true, ite(and(bvule(1024, Lambda24925Var), bvule(Lambda24925Var, 4294967295)), false, false))), lambda(Lambda24926Var, ite(eq(Lambda24926Var, 0), 0, bvconcat(ite(eq(bvadd(3, bvmul(4, Lambda24926Var), 1152), 2740192), 2, ite(eq(bvadd(3, bvmul(4, Lambda24926Var), 1152), 3135460), 128, ite(eq(bvadd(3, bvmul(4, Lambda24926Var), 1152), 3135461), 4, 0))), ite(eq(bvadd(2, bvmul(4, Lambda24926Var), 1152), 2740192), 2, ite(eq(bvadd(2, bvmul(4, Lambda24926Var), 1152), 3135460), 128, ite(eq(bvadd(2, bvmul(4, Lambda24926Var), 1152), 3135461), 4, 0))), ite(eq(bvadd(1, bvmul(4, Lambda24926Var), 1152), 2740192), 2, ite(eq(bvadd(1, bvmul(4, Lambda24926Var), 1152), 3135460), 128, ite(eq(bvadd(1, bvmul(4, Lambda24926Var), 1152), 3135461), 4, 0))), ite(eq(bvadd(bvmul(4, Lambda24926Var), 1152), 2740192), 2, ite(eq(bvadd(bvmul(4, Lambda24926Var), 1152), 3135460), 128, ite(eq(bvadd(bvmul(4, Lambda24926Var), 1152), 3135461), 4, 0))))))) )
140276 : 0 { 0x0 +1.0e129 } : BV:32                : 0
160668 : map_get(140540, 140276) : SUM[UNIT,BV:32] : ( sum(ite(ite(and(bvule(0, 0), bvule(0, 1023)), true, ite(and(bvule(1024, 0), bvule(0, 4294967295)), false, false)), 1, 0), unit, ite(eq(0, 0), 0, bvconcat(ite(eq(bvadd(3, bvmul(4, 0), 1152), 2740192), 2, ite(eq(bvadd(3, bvmul(4, 0), 1152), 3135460), 128, ite(eq(bvadd(3, bvmul(4, 0), 1152), 3135461), 4, 0))), ite(eq(bvadd(2, bvmul(4, 0), 1152), 2740192), 2, ite(eq(bvadd(2, bvmul(4, 0), 1152), 3135460), 128, ite(eq(bvadd(2, bvmul(4, 0), 1152), 3135461), 4, 0))), ite(eq(bvadd(1, bvmul(4, 0), 1152), 2740192), 2, ite(eq(bvadd(1, bvmul(4, 0), 1152), 3135460), 128, ite(eq(bvadd(1, bvmul(4, 0), 1152), 3135461), 4, 0))), ite(eq(bvadd(bvmul(4, 0), 1152), 2740192), 2, ite(eq(bvadd(bvmul(4, 0), 1152), 3135460), 128, ite(eq(bvadd(bvmul(4, 0), 1152), 3135461), 4, 0)))))) )
140285 : 0 { 0x0 +1.0e1025 } : INT                 : 0
161643 : sum_is(160668, 140285) : BOOL             : false
140525 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]] : ( 203265 = eq(ite(and(bvule(0, Lambda24850Var), bvule(Lambda24850Var, 1075905025)), 0, ite(and(bvule(1075905027, Lambda24850Var), bvule(Lambda24850Var, 4294967295)), 1075905027, ite(and(bvule(1075905026, Lambda24850Var), bvule(Lambda24850Var, 1075905026)), 1075905026, 1075905026))), 0);203386 = bvconcat(ite(eq(bvadd(2740195, bvmul(4, Lambda24850Var)), 2740192), 2, ite(eq(bvadd(2740195, bvmul(4, Lambda24850Var)), 3135460), 128, ite(eq(bvadd(2740195, bvmul(4, Lambda24850Var)), 3135461), 4, 0))), ite(eq(bvadd(2740194, bvmul(4, Lambda24850Var)), 2740192), 2, ite(eq(bvadd(2740194, bvmul(4, Lambda24850Var)), 3135460), 128, ite(eq(bvadd(2740194, bvmul(4, Lambda24850Var)), 3135461), 4, 0))), ite(eq(bvadd(2740193, bvmul(4, Lambda24850Var)), 2740192), 2, ite(eq(bvadd(2740193, bvmul(4, Lambda24850Var)), 3135460), 128, ite(eq(bvadd(2740193, bvmul(4, Lambda24850Var)), 3135461), 4, 0))), ite(eq(bvadd(2740192, bvmul(4, Lambda24850Var)), 2740192), 2, ite(eq(bvadd(2740192, bvmul(4, Lambda24850Var)), 3135460), 128, ite(eq(bvadd(2740192, bvmul(4, Lambda24850Var)), 3135461), 4, 0))));203466 = bvconcat[203466](ite[203444](eq[203439](bvadd[203438](3, bvmul(4, Lambda24852Var), 203386), 2740192), 2, ite[203443](eq[203440](bvadd[203438](3, bvmul(4, Lambda24852Var), 203386), 3135460), 128, ite[203442](eq[203441](bvadd[203438](3, bvmul(4, Lambda24852Var), 203386), 3135461), 4, 0))), ite[203451](eq[203446](bvadd[203445](2, bvmul(4, Lambda24852Var), 203386), 2740192), 2, ite[203450](eq[203447](bvadd[203445](2, bvmul(4, Lambda24852Var), 203386), 3135460), 128, ite[203449](eq[203448](bvadd[203445](2, bvmul(4, Lambda24852Var), 203386), 3135461), 4, 0))), ite[203458](eq[203453](bvadd[203452](1, bvmul(4, Lambda24852Var), 203386), 2740192), 2, ite[203457](eq[203454](bvadd[203452](1, bvmul(4, Lambda24852Var), 203386), 3135460), 128, ite[203456](eq[203455](bvadd[203452](1, bvmul(4, Lambda24852Var), 203386), 3135461), 4, 0))), ite[203465](eq[203460](bvadd[203459](bvmul(4, Lambda24852Var), 203386), 2740192), 2, ite[203464](eq[203461](bvadd[203459](bvmul(4, Lambda24852Var), 203386), 3135460), 128, ite[203463](eq[203462](bvadd[203459](bvmul(4, Lambda24852Var), 203386), 3135461), 4, 0))));map[203310](lambda(Lambda24849Var, ite(and(bvule(0, Lambda24849Var), bvule(Lambda24849Var, 1075905025)), true, ite(and(bvule(1075905026, Lambda24849Var), bvule(Lambda24849Var, 4294967295)), false, false))), lambda[203309](Lambda24850Var, map[203288](lambda[203286](Lambda24851Var, ite[203282](and[203281](203265, eq(ite(and(bvule(0, Lambda24851Var), bvule(Lambda24851Var, 1023)), 0, ite(and(bvule(1025, Lambda24851Var), bvule(Lambda24851Var, 4294967295)), 1025, ite(and(bvule(1024, Lambda24851Var), bvule(Lambda24851Var, 1024)), 1024, 1024))), 0)), true, false)), lambda[203287](Lambda24852Var, ite[203469](and(eq(Lambda24850Var, 0), eq(Lambda24852Var, 0)), 0, ite[203468](and[203436](ite(and(bvule(0, Lambda24850Var), bvule(Lambda24850Var, 1075905025)), true, ite(and(bvule(1075905026, Lambda24850Var), bvule(Lambda24850Var, 4294967295)), false, false)), ite[203435](and[203434](203265, eq(ite(and(bvule(0, Lambda24852Var), bvule(Lambda24852Var, 1023)), 0, ite(and(bvule(1025, Lambda24852Var), bvule(Lambda24852Var, 4294967295)), 1025, ite(and(bvule(1024, Lambda24852Var), bvule(Lambda24852Var, 1024)), 1024, 1024))), 0)), true, false)), 203466, ite[203467](and(eq(Lambda24850Var, 0), eq(Lambda24852Var, 0)), 0, 203466))))))) )
140288 : 1 { 0x1 +1.11e129 } : BV:32               : 1
140526 : input.spec-%var-i-0.L3%7%bbentry : BV:32  : 1073840641
140574 : bvadd(140288, 140526) : BV:32             : 1073840642
202731 : map_get(140525, 140574) : SUM[UNIT,MAP[BV:32 -> BV:32]] : ( 203370 = eq(ite(and(bvule(0, 1073840642), bvule(1073840642, 1075905025)), 0, ite(and(bvule(1075905027, 1073840642), bvule(1073840642, 4294967295)), 1075905027, ite(and(bvule(1075905026, 1073840642), bvule(1073840642, 1075905026)), 1075905026, 1075905026))), 0);203413 = ite(and(bvule(0, 1073840642), bvule(1073840642, 1075905025)), true, ite(and(bvule(1075905026, 1073840642), bvule(1073840642, 4294967295)), false, false));203517 = bvconcat(ite(eq(bvadd(2740195, bvmul(4, 1073840642)), 2740192), 2, ite(eq(bvadd(2740195, bvmul(4, 1073840642)), 3135460), 128, ite(eq(bvadd(2740195, bvmul(4, 1073840642)), 3135461), 4, 0))), ite(eq(bvadd(2740194, bvmul(4, 1073840642)), 2740192), 2, ite(eq(bvadd(2740194, bvmul(4, 1073840642)), 3135460), 128, ite(eq(bvadd(2740194, bvmul(4, 1073840642)), 3135461), 4, 0))), ite(eq(bvadd(2740193, bvmul(4, 1073840642)), 2740192), 2, ite(eq(bvadd(2740193, bvmul(4, 1073840642)), 3135460), 128, ite(eq(bvadd(2740193, bvmul(4, 1073840642)), 3135461), 4, 0))), ite(eq(bvadd(2740192, bvmul(4, 1073840642)), 2740192), 2, ite(eq(bvadd(2740192, bvmul(4, 1073840642)), 3135460), 128, ite(eq(bvadd(2740192, bvmul(4, 1073840642)), 3135461), 4, 0))));203568 = bvconcat[203568](ite[203524](eq[203519](bvadd[203518](3, bvmul(4, Lambda24960Var), 203517), 2740192), 2, ite[203523](eq[203520](bvadd[203518](3, bvmul(4, Lambda24960Var), 203517), 3135460), 128, ite[203522](eq[203521](bvadd[203518](3, bvmul(4, Lambda24960Var), 203517), 3135461), 4, 0))), ite[203531](eq[203526](bvadd[203525](2, bvmul(4, Lambda24960Var), 203517), 2740192), 2, ite[203530](eq[203527](bvadd[203525](2, bvmul(4, Lambda24960Var), 203517), 3135460), 128, ite[203529](eq[203528](bvadd[203525](2, bvmul(4, Lambda24960Var), 203517), 3135461), 4, 0))), ite[203560](eq[203533](bvadd[203532](1, bvmul(4, Lambda24960Var), 203517), 2740192), 2, ite[203544](eq[203534](bvadd[203532](1, bvmul(4, Lambda24960Var), 203517), 3135460), 128, ite[203543](eq[203535](bvadd[203532](1, bvmul(4, Lambda24960Var), 203517), 3135461), 4, 0))), ite[203567](eq[203562](bvadd[203561](bvmul(4, Lambda24960Var), 203517), 2740192), 2, ite[203566](eq[203563](bvadd[203561](bvmul(4, Lambda24960Var), 203517), 3135460), 128, ite[203565](eq[203564](bvadd[203561](bvmul(4, Lambda24960Var), 203517), 3135461), 4, 0))));sum[203574](ite[203414](203413, 1, 0), unit, map[203573](lambda[203374](Lambda24959Var, ite[203373](and[203371](203370, eq(ite(and(bvule(0, Lambda24959Var), bvule(Lambda24959Var, 1023)), 0, ite(and(bvule(1025, Lambda24959Var), bvule(Lambda24959Var, 4294967295)), 1025, ite(and(bvule(1024, Lambda24959Var), bvule(Lambda24959Var, 1024)), 1024, 1024))), 0)), true, false)), lambda[203572](Lambda24960Var, ite[203571](and(eq(1073840642, 0), eq(Lambda24960Var, 0)), 0, ite[203570](and[203389](203413, ite[203388](and[203387](203370, eq(ite(and(bvule(0, Lambda24960Var), bvule(Lambda24960Var, 1023)), 0, ite(and(bvule(1025, Lambda24960Var), bvule(Lambda24960Var, 4294967295)), 1025, ite(and(bvule(1024, Lambda24960Var), bvule(Lambda24960Var, 1024)), 1024, 1024))), 0)), true, false)), 203568, ite[203569](and(eq(1073840642, 0), eq(Lambda24960Var, 0)), 0, 203568)))))) )
202732 : sum_is(202731, 140283) : BOOL             : true
203236 : and(161643, 202732) : BOOL                : false
203240 : or(197720, 203236) : BOOL                 : false

ce =
=counter_example_begin z3v487.ce2824 89b57b38962e9f98a49885abaf8586d1
=input.spec-%var-x-1
1 : Lambda24829Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1075905025 { 0x40210201 +1.25787365e1 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1075905026 { 0x40210202 +1.25787377e1 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda24830Var : BV:32
18 : Lambda24831Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1075905027 { 0x40210203 +1.25787389e1 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 1023 { 0x3ff +1.12195e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 1025 { 0x401 +1.12218e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 1024 { 0x400 +1.12207e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda24832Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 2740195 { 0x29cfe3 +1.32665669e129 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 2740192 { 0x29cfe0 +1.32665634e129 } : BV:32
63 : eq(61, 62) : BOOL
64 : 2 { 0x2 } : BV:8
65 : 3135460 { 0x2fd7e4 +1.37377595e129 } : BV:32
66 : eq(61, 65) : BOOL
67 : 128 { 0x80 -128 } : BV:8
68 : 3135461 { 0x2fd7e5 +1.37377607e129 } : BV:32
69 : eq(61, 68) : BOOL
70 : 4 { 0x4 } : BV:8
71 : 0 { 0x0 } : BV:8
72 : ite(69, 70, 71) : BV:8
73 : ite(66, 67, 72) : BV:8
74 : ite(63, 64, 73) : BV:8
75 : 2740194 { 0x29cfe2 +1.32665657e129 } : BV:32
76 : bvadd(75, 60) : BV:32
77 : eq(76, 62) : BOOL
78 : eq(76, 65) : BOOL
79 : eq(76, 68) : BOOL
80 : ite(79, 70, 71) : BV:8
81 : ite(78, 67, 80) : BV:8
82 : ite(77, 64, 81) : BV:8
83 : 2740193 { 0x29cfe1 +1.32665646e129 } : BV:32
84 : bvadd(83, 60) : BV:32
85 : eq(84, 62) : BOOL
86 : eq(84, 65) : BOOL
87 : eq(84, 68) : BOOL
88 : ite(87, 70, 71) : BV:8
89 : ite(86, 67, 88) : BV:8
90 : ite(85, 64, 89) : BV:8
91 : bvadd(62, 60) : BV:32
92 : eq(91, 62) : BOOL
93 : eq(91, 65) : BOOL
94 : eq(91, 68) : BOOL
95 : ite(94, 70, 71) : BV:8
96 : ite(93, 67, 95) : BV:8
97 : ite(92, 64, 96) : BV:8
98 : bvconcat(74, 82, 90, 97) : BV:32
99 : bvadd(56, 58, 98) : BV:32
100 : eq(99, 62) : BOOL
101 : eq(99, 65) : BOOL
102 : eq(99, 68) : BOOL
103 : ite(102, 70, 71) : BV:8
104 : ite(101, 67, 103) : BV:8
105 : ite(100, 64, 104) : BV:8
106 : 2 { 0x2 +1.23e129 } : BV:32
107 : bvadd(106, 58, 98) : BV:32
108 : eq(107, 62) : BOOL
109 : eq(107, 65) : BOOL
110 : eq(107, 68) : BOOL
111 : ite(110, 70, 71) : BV:8
112 : ite(109, 67, 111) : BV:8
113 : ite(108, 64, 112) : BV:8
114 : 1 { 0x1 +1.11e129 } : BV:32
115 : bvadd(114, 58, 98) : BV:32
116 : eq(115, 62) : BOOL
117 : eq(115, 65) : BOOL
118 : eq(115, 68) : BOOL
119 : ite(118, 70, 71) : BV:8
120 : ite(117, 67, 119) : BV:8
121 : ite(116, 64, 120) : BV:8
122 : bvadd(58, 98) : BV:32
123 : eq(122, 62) : BOOL
124 : eq(122, 65) : BOOL
125 : eq(122, 68) : BOOL
126 : ite(125, 70, 71) : BV:8
127 : ite(124, 67, 126) : BV:8
128 : ite(123, 64, 127) : BV:8
129 : bvconcat(105, 113, 121, 128) : BV:32
130 : ite(55, 2, 129) : BV:32
131 : lambda(52, 130) : FUNCTION[BV:32 -> BV:32]
132 : map(51, 131) : MAP[BV:32 -> BV:32]
133 : lambda(17, 132) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
134 : map(16, 133) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
135 : sym_const(134) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda24849Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1075905025 { 0x40210201 +1.25787365e1 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1075905026 { 0x40210202 +1.25787377e1 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda24850Var : BV:32
18 : Lambda24851Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1075905027 { 0x40210203 +1.25787389e1 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 1023 { 0x3ff +1.12195e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 1025 { 0x401 +1.12218e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 1024 { 0x400 +1.12207e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda24852Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 10) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 41) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 2740195 { 0x29cfe3 +1.32665669e129 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 2740192 { 0x29cfe0 +1.32665634e129 } : BV:32
82 : eq(80, 81) : BOOL
83 : 2 { 0x2 } : BV:8
84 : 3135460 { 0x2fd7e4 +1.37377595e129 } : BV:32
85 : eq(80, 84) : BOOL
86 : 128 { 0x80 -128 } : BV:8
87 : 3135461 { 0x2fd7e5 +1.37377607e129 } : BV:32
88 : eq(80, 87) : BOOL
89 : 4 { 0x4 } : BV:8
90 : 0 { 0x0 } : BV:8
91 : ite(88, 89, 90) : BV:8
92 : ite(85, 86, 91) : BV:8
93 : ite(82, 83, 92) : BV:8
94 : 2740194 { 0x29cfe2 +1.32665657e129 } : BV:32
95 : bvadd(94, 79) : BV:32
96 : eq(95, 81) : BOOL
97 : eq(95, 84) : BOOL
98 : eq(95, 87) : BOOL
99 : ite(98, 89, 90) : BV:8
100 : ite(97, 86, 99) : BV:8
101 : ite(96, 83, 100) : BV:8
102 : 2740193 { 0x29cfe1 +1.32665646e129 } : BV:32
103 : bvadd(102, 79) : BV:32
104 : eq(103, 81) : BOOL
105 : eq(103, 84) : BOOL
106 : eq(103, 87) : BOOL
107 : ite(106, 89, 90) : BV:8
108 : ite(105, 86, 107) : BV:8
109 : ite(104, 83, 108) : BV:8
110 : bvadd(81, 79) : BV:32
111 : eq(110, 81) : BOOL
112 : eq(110, 84) : BOOL
113 : eq(110, 87) : BOOL
114 : ite(113, 89, 90) : BV:8
115 : ite(112, 86, 114) : BV:8
116 : ite(111, 83, 115) : BV:8
117 : bvconcat(93, 101, 109, 116) : BV:32
118 : bvadd(75, 77, 117) : BV:32
119 : eq(118, 81) : BOOL
120 : eq(118, 84) : BOOL
121 : eq(118, 87) : BOOL
122 : ite(121, 89, 90) : BV:8
123 : ite(120, 86, 122) : BV:8
124 : ite(119, 83, 123) : BV:8
125 : 2 { 0x2 +1.23e129 } : BV:32
126 : bvadd(125, 77, 117) : BV:32
127 : eq(126, 81) : BOOL
128 : eq(126, 84) : BOOL
129 : eq(126, 87) : BOOL
130 : ite(129, 89, 90) : BV:8
131 : ite(128, 86, 130) : BV:8
132 : ite(127, 83, 131) : BV:8
133 : 1 { 0x1 +1.11e129 } : BV:32
134 : bvadd(133, 77, 117) : BV:32
135 : eq(134, 81) : BOOL
136 : eq(134, 84) : BOOL
137 : eq(134, 87) : BOOL
138 : ite(137, 89, 90) : BV:8
139 : ite(136, 86, 138) : BV:8
140 : ite(135, 83, 139) : BV:8
141 : bvadd(77, 117) : BV:32
142 : eq(141, 81) : BOOL
143 : eq(141, 84) : BOOL
144 : eq(141, 87) : BOOL
145 : ite(144, 89, 90) : BV:8
146 : ite(143, 86, 145) : BV:8
147 : ite(142, 83, 146) : BV:8
148 : bvconcat(124, 132, 140, 147) : BV:32
149 : ite(55, 2, 148) : BV:32
150 : ite(74, 148, 149) : BV:32
151 : ite(55, 2, 150) : BV:32
152 : lambda(52, 151) : FUNCTION[BV:32 -> BV:32]
153 : map(51, 152) : MAP[BV:32 -> BV:32]
154 : lambda(17, 153) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
155 : map(16, 154) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
156 : sym_const(155) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 2740191 ] -> 0, [ 2740192; 2740192 ] -> 2, [ 2740193; 3135459 ] -> 0, [ 3135460; 3135460 ] -> 128, [ 3135461; 3135461 ] -> 4, [ 3135462; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 4456719 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4456720; 4456723 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 4456724; 4479427 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4479428; 4479431 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 4479432; 71455431 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 71455432; 71455435 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 71455436; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 4479428 { 0x4459c4 +1.53398942e129 } : BV:32
=input.dst.llvm-%m
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4456720 { 0x440110 +1.53128242e129 } : BV:32
=input.dst.llvm-%n
1 : 1075905026 { 0x40210202 +1.25787377e1 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 71455432 { 0x44252c8 +1.51815128e137 } : BV:32
=input.dst.llvm-%x
1 : 2740192 { 0x29cfe0 +1.32665634e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 1073840641 { 0x40018201 +1.1177990e1 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda24838Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 1023 { 0x3ff +1.12195e129 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 1024 { 0x400 +1.12207e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda24839Var : BV:32
20 : eq(19, 4) : BOOL
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 19) : BV:32
24 : 1152 { 0x480 +1.13732e129 } : BV:32
25 : bvadd(21, 23, 24) : BV:32
26 : 2740192 { 0x29cfe0 +1.32665634e129 } : BV:32
27 : eq(25, 26) : BOOL
28 : 2 { 0x2 } : BV:8
29 : 3135460 { 0x2fd7e4 +1.37377595e129 } : BV:32
30 : eq(25, 29) : BOOL
31 : 128 { 0x80 -128 } : BV:8
32 : 3135461 { 0x2fd7e5 +1.37377607e129 } : BV:32
33 : eq(25, 32) : BOOL
34 : 4 { 0x4 } : BV:8
35 : 0 { 0x0 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(30, 31, 36) : BV:8
38 : ite(27, 28, 37) : BV:8
39 : 2 { 0x2 +1.23e129 } : BV:32
40 : bvadd(39, 23, 24) : BV:32
41 : eq(40, 26) : BOOL
42 : eq(40, 29) : BOOL
43 : eq(40, 32) : BOOL
44 : ite(43, 34, 35) : BV:8
45 : ite(42, 31, 44) : BV:8
46 : ite(41, 28, 45) : BV:8
47 : 1 { 0x1 +1.11e129 } : BV:32
48 : bvadd(47, 23, 24) : BV:32
49 : eq(48, 26) : BOOL
50 : eq(48, 29) : BOOL
51 : eq(48, 32) : BOOL
52 : ite(51, 34, 35) : BV:8
53 : ite(50, 31, 52) : BV:8
54 : ite(49, 28, 53) : BV:8
55 : bvadd(23, 24) : BV:32
56 : eq(55, 26) : BOOL
57 : eq(55, 29) : BOOL
58 : eq(55, 32) : BOOL
59 : ite(58, 34, 35) : BV:8
60 : ite(57, 31, 59) : BV:8
61 : ite(56, 28, 60) : BV:8
62 : bvconcat(38, 46, 54, 61) : BV:32
63 : ite(20, 4, 62) : BV:32
64 : lambda(19, 63) : FUNCTION[BV:32 -> BV:32]
65 : map(18, 64) : MAP[BV:32 -> BV:32]
66 : sum(1, 2, 65) : SUM[UNIT,MAP[BV:32 -> BV:32]]
67 : sym_const(66) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1073840641 { 0x40018201 +1.1177990e1 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4456720 { 0x440110 +1.53128242e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 4456723 { 0x440113 +1.53128278e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 71455432 { 0x44252c8 +1.51815128e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 71455435 { 0x44252cb +1.51815164e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 4479428 { 0x4459c4 +1.53398942e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 4479431 { 0x4459c7 +1.53398978e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda24705Var : BV:32
2 : Lambda24706Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 2740195 { 0x29cfe3 +1.32665669e129 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 2740192 { 0x29cfe0 +1.32665634e129 } : BV:32
14 : eq(12, 13) : BOOL
15 : 2 { 0x2 } : BV:8
16 : 3135460 { 0x2fd7e4 +1.37377595e129 } : BV:32
17 : eq(12, 16) : BOOL
18 : 128 { 0x80 -128 } : BV:8
19 : 3135461 { 0x2fd7e5 +1.37377607e129 } : BV:32
20 : eq(12, 19) : BOOL
21 : 4 { 0x4 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : ite(17, 18, 23) : BV:8
25 : ite(14, 15, 24) : BV:8
26 : 2740194 { 0x29cfe2 +1.32665657e129 } : BV:32
27 : bvadd(26, 11) : BV:32
28 : eq(27, 13) : BOOL
29 : eq(27, 16) : BOOL
30 : eq(27, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : ite(29, 18, 31) : BV:8
33 : ite(28, 15, 32) : BV:8
34 : 2740193 { 0x29cfe1 +1.32665646e129 } : BV:32
35 : bvadd(34, 11) : BV:32
36 : eq(35, 13) : BOOL
37 : eq(35, 16) : BOOL
38 : eq(35, 19) : BOOL
39 : ite(38, 21, 22) : BV:8
40 : ite(37, 18, 39) : BV:8
41 : ite(36, 15, 40) : BV:8
42 : bvadd(13, 11) : BV:32
43 : eq(42, 13) : BOOL
44 : eq(42, 16) : BOOL
45 : eq(42, 19) : BOOL
46 : ite(45, 21, 22) : BV:8
47 : ite(44, 18, 46) : BV:8
48 : ite(43, 15, 47) : BV:8
49 : bvconcat(25, 33, 41, 48) : BV:32
50 : bvadd(7, 9, 49) : BV:32
51 : eq(50, 13) : BOOL
52 : eq(50, 16) : BOOL
53 : eq(50, 19) : BOOL
54 : ite(53, 21, 22) : BV:8
55 : ite(52, 18, 54) : BV:8
56 : ite(51, 15, 55) : BV:8
57 : 2 { 0x2 +1.23e129 } : BV:32
58 : bvadd(57, 9, 49) : BV:32
59 : eq(58, 13) : BOOL
60 : eq(58, 16) : BOOL
61 : eq(58, 19) : BOOL
62 : ite(61, 21, 22) : BV:8
63 : ite(60, 18, 62) : BV:8
64 : ite(59, 15, 63) : BV:8
65 : 1 { 0x1 +1.11e129 } : BV:32
66 : bvadd(65, 9, 49) : BV:32
67 : eq(66, 13) : BOOL
68 : eq(66, 16) : BOOL
69 : eq(66, 19) : BOOL
70 : ite(69, 21, 22) : BV:8
71 : ite(68, 18, 70) : BV:8
72 : ite(67, 15, 71) : BV:8
73 : bvadd(9, 49) : BV:32
74 : eq(73, 13) : BOOL
75 : eq(73, 16) : BOOL
76 : eq(73, 19) : BOOL
77 : ite(76, 21, 22) : BV:8
78 : ite(75, 18, 77) : BV:8
79 : ite(74, 15, 78) : BV:8
80 : bvconcat(56, 64, 72, 79) : BV:32
81 : ite(6, 3, 80) : BV:32
82 : lambda(1, 2, 81) : FUNCTION[BV:32,BV:32 -> BV:32]
83 : sym_const(82) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda24707Var : BV:32
2 : Lambda24708Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1075905025 { 0x40210201 +1.25787365e1 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1075905027 { 0x40210203 +1.25787389e1 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1075905026 { 0x40210202 +1.25787377e1 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1023 { 0x3ff +1.12195e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 1025 { 0x401 +1.12218e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 10) : BOOL
28 : and(26, 27) : BOOL
29 : 1024 { 0x400 +1.12207e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 1075905025 ] -> true, [ 1075905026; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 1075905025 ] -> true, [ 1075905026; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda24717Var : BV:32
2 : Lambda24718Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1075905025 { 0x40210201 +1.25787365e1 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1075905027 { 0x40210203 +1.25787389e1 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1075905026 { 0x40210202 +1.25787377e1 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1023 { 0x3ff +1.12195e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 1025 { 0x401 +1.12218e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 10) : BOOL
28 : and(26, 27) : BOOL
29 : 1024 { 0x400 +1.12207e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda24721Var : BV:32
2 : Lambda24722Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 1075905025 { 0x40210201 +1.25787365e1 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 1075905026 { 0x40210202 +1.25787377e1 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 1075905027 { 0x40210203 +1.25787389e1 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 1023 { 0x3ff +1.12195e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 1025 { 0x401 +1.12218e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 14) : BOOL
36 : and(34, 35) : BOOL
37 : 1024 { 0x400 +1.12207e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 37) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 2740195 { 0x29cfe3 +1.32665669e129 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 2740192 { 0x29cfe0 +1.32665634e129 } : BV:32
55 : eq(53, 54) : BOOL
56 : 2 { 0x2 } : BV:8
57 : 3135460 { 0x2fd7e4 +1.37377595e129 } : BV:32
58 : eq(53, 57) : BOOL
59 : 128 { 0x80 -128 } : BV:8
60 : 3135461 { 0x2fd7e5 +1.37377607e129 } : BV:32
61 : eq(53, 60) : BOOL
62 : 4 { 0x4 } : BV:8
63 : 0 { 0x0 } : BV:8
64 : ite(61, 62, 63) : BV:8
65 : ite(58, 59, 64) : BV:8
66 : ite(55, 56, 65) : BV:8
67 : 2740194 { 0x29cfe2 +1.32665657e129 } : BV:32
68 : bvadd(67, 52) : BV:32
69 : eq(68, 54) : BOOL
70 : eq(68, 57) : BOOL
71 : eq(68, 60) : BOOL
72 : ite(71, 62, 63) : BV:8
73 : ite(70, 59, 72) : BV:8
74 : ite(69, 56, 73) : BV:8
75 : 2740193 { 0x29cfe1 +1.32665646e129 } : BV:32
76 : bvadd(75, 52) : BV:32
77 : eq(76, 54) : BOOL
78 : eq(76, 57) : BOOL
79 : eq(76, 60) : BOOL
80 : ite(79, 62, 63) : BV:8
81 : ite(78, 59, 80) : BV:8
82 : ite(77, 56, 81) : BV:8
83 : bvadd(54, 52) : BV:32
84 : eq(83, 54) : BOOL
85 : eq(83, 57) : BOOL
86 : eq(83, 60) : BOOL
87 : ite(86, 62, 63) : BV:8
88 : ite(85, 59, 87) : BV:8
89 : ite(84, 56, 88) : BV:8
90 : bvconcat(66, 74, 82, 89) : BV:32
91 : bvadd(48, 50, 90) : BV:32
92 : eq(91, 54) : BOOL
93 : eq(91, 57) : BOOL
94 : eq(91, 60) : BOOL
95 : ite(94, 62, 63) : BV:8
96 : ite(93, 59, 95) : BV:8
97 : ite(92, 56, 96) : BV:8
98 : 2 { 0x2 +1.23e129 } : BV:32
99 : bvadd(98, 50, 90) : BV:32
100 : eq(99, 54) : BOOL
101 : eq(99, 57) : BOOL
102 : eq(99, 60) : BOOL
103 : ite(102, 62, 63) : BV:8
104 : ite(101, 59, 103) : BV:8
105 : ite(100, 56, 104) : BV:8
106 : 1 { 0x1 +1.11e129 } : BV:32
107 : bvadd(106, 50, 90) : BV:32
108 : eq(107, 54) : BOOL
109 : eq(107, 57) : BOOL
110 : eq(107, 60) : BOOL
111 : ite(110, 62, 63) : BV:8
112 : ite(109, 59, 111) : BV:8
113 : ite(108, 56, 112) : BV:8
114 : bvadd(50, 90) : BV:32
115 : eq(114, 54) : BOOL
116 : eq(114, 57) : BOOL
117 : eq(114, 60) : BOOL
118 : ite(117, 62, 63) : BV:8
119 : ite(116, 59, 118) : BV:8
120 : ite(115, 56, 119) : BV:8
121 : bvconcat(97, 105, 113, 120) : BV:32
122 : ite(6, 3, 121) : BV:32
123 : ite(47, 121, 122) : BV:32
124 : ite(6, 3, 123) : BV:32
125 : lambda(1, 2, 124) : FUNCTION[BV:32,BV:32 -> BV:32]
126 : sym_const(125) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 1023 ] -> true, [ 1024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda24726Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 1152 { 0x480 +1.13732e129 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 2740192 { 0x29cfe0 +1.32665634e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 2 { 0x2 } : BV:8
12 : 3135460 { 0x2fd7e4 +1.37377595e129 } : BV:32
13 : eq(8, 12) : BOOL
14 : 128 { 0x80 -128 } : BV:8
15 : 3135461 { 0x2fd7e5 +1.37377607e129 } : BV:32
16 : eq(8, 15) : BOOL
17 : 4 { 0x4 } : BV:8
18 : 0 { 0x0 } : BV:8
19 : ite(16, 17, 18) : BV:8
20 : ite(13, 14, 19) : BV:8
21 : ite(10, 11, 20) : BV:8
22 : 2 { 0x2 +1.23e129 } : BV:32
23 : bvadd(22, 6, 7) : BV:32
24 : eq(23, 9) : BOOL
25 : eq(23, 12) : BOOL
26 : eq(23, 15) : BOOL
27 : ite(26, 17, 18) : BV:8
28 : ite(25, 14, 27) : BV:8
29 : ite(24, 11, 28) : BV:8
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : bvadd(30, 6, 7) : BV:32
32 : eq(31, 9) : BOOL
33 : eq(31, 12) : BOOL
34 : eq(31, 15) : BOOL
35 : ite(34, 17, 18) : BV:8
36 : ite(33, 14, 35) : BV:8
37 : ite(32, 11, 36) : BV:8
38 : bvadd(6, 7) : BV:32
39 : eq(38, 9) : BOOL
40 : eq(38, 12) : BOOL
41 : eq(38, 15) : BOOL
42 : ite(41, 17, 18) : BV:8
43 : ite(40, 14, 42) : BV:8
44 : ite(39, 11, 43) : BV:8
45 : bvconcat(21, 29, 37, 44) : BV:32
46 : ite(3, 2, 45) : BV:32
47 : lambda(1, 46) : FUNCTION[BV:32 -> BV:32]
48 : sym_const(47) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
2995042314
=counter_example_end


failcond-expr = or(not(bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)), and(sum_is(map_get(sum_get(input.spec-%tmpvar-7.L3%8%d, 1), 0), 0), sum_is(map_get(input.spec-%var-x-0.L3%7%bbentry, bvadd(1, input.spec-%var-i-0.L3%7%bbentry)), 1))):
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
4 : not(3) : BOOL
5 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
6 : 1 { 0x1 +1.0e1025 } : INT
7 : sum_get(5, 6) : MAP[BV:32 -> BV:32]
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : map_get(7, 8) : SUM[UNIT,BV:32]
10 : 0 { 0x0 +1.0e1025 } : INT
11 : sum_is(9, 10) : BOOL
12 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
13 : 1 { 0x1 +1.11e129 } : BV:32
14 : input.spec-%var-i-0.L3%7%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : map_get(12, 15) : SUM[UNIT,MAP[BV:32 -> BV:32]]
17 : sum_is(16, 6) : BOOL
18 : and(11, 17) : BOOL
19 : or(4, 18) : BOOL
</MSG>
<MSG>0:55 : foo.A1.B3.C1.D2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:55 : foo.A1.B3.C1.D2: Finished executing CG's add edge function...</MSG>
<MSG>0:55 : foo.A1.B3.C1.D2: Computing CG regions after the addition of the edge L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:55 : foo.A1.B3.C1.D2: Done computing CG regions after the addition of the edge L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:55 : Done adding new edge to the product-TFG foo.A1.B3.C1.D2 for fromPC L3%11%bbentry_Lfor.cond1%1%bbentry and toPC L3%11%bbentry_Lfor.cond1%1%bbentry, src path L3%11%bbentry --> L3%11%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>0:55 : Done adding a CG edge composition using the src path L3%11%bbentry --> L3%11%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:55 : Failed correlation of src pathset L3%11%bbentry=>L3%11%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%11%bbentry_Lfor.cond1%1%bbentry: failcond = wfcond.from_pcL3%11%bbentry_Lfor.cond1%1%bbentry.to_pcL3%11%bbentry_Lfor.cond1%1%bbentry-dst-edgecond-implies-src-edgecond
140614 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32 : 0
140381 : input.dst.llvm-%m : BV:32                 : 1024
140615 : bvult(140614, 140381) : BOOL              : true
197720 : not(140615) : BOOL                        : false
140513 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]] : ( sum(2147483648, unit, map(lambda(Lambda24838Var, ite(and(bvule(0, Lambda24838Var), bvule(Lambda24838Var, 1023)), true, ite(and(bvule(1024, Lambda24838Var), bvule(Lambda24838Var, 4294967295)), false, false))), lambda(Lambda24839Var, ite(eq(Lambda24839Var, 0), 0, bvconcat(ite(eq(bvadd(3, bvmul(4, Lambda24839Var), 1152), 2740192), 2, ite(eq(bvadd(3, bvmul(4, Lambda24839Var), 1152), 3135460), 128, ite(eq(bvadd(3, bvmul(4, Lambda24839Var), 1152), 3135461), 4, 0))), ite(eq(bvadd(2, bvmul(4, Lambda24839Var), 1152), 2740192), 2, ite(eq(bvadd(2, bvmul(4, Lambda24839Var), 1152), 3135460), 128, ite(eq(bvadd(2, bvmul(4, Lambda24839Var), 1152), 3135461), 4, 0))), ite(eq(bvadd(1, bvmul(4, Lambda24839Var), 1152), 2740192), 2, ite(eq(bvadd(1, bvmul(4, Lambda24839Var), 1152), 3135460), 128, ite(eq(bvadd(1, bvmul(4, Lambda24839Var), 1152), 3135461), 4, 0))), ite(eq(bvadd(bvmul(4, Lambda24839Var), 1152), 2740192), 2, ite(eq(bvadd(bvmul(4, Lambda24839Var), 1152), 3135460), 128, ite(eq(bvadd(bvmul(4, Lambda24839Var), 1152), 3135461), 4, 0)))))))) )
140283 : 1 { 0x1 +1.0e1025 } : INT                 : 1
140540 : sum_get(140513, 140283) : MAP[BV:32 -> BV:32] : ( map(lambda(Lambda24925Var, ite(and(bvule(0, Lambda24925Var), bvule(Lambda24925Var, 1023)), true, ite(and(bvule(1024, Lambda24925Var), bvule(Lambda24925Var, 4294967295)), false, false))), lambda(Lambda24926Var, ite(eq(Lambda24926Var, 0), 0, bvconcat(ite(eq(bvadd(3, bvmul(4, Lambda24926Var), 1152), 2740192), 2, ite(eq(bvadd(3, bvmul(4, Lambda24926Var), 1152), 3135460), 128, ite(eq(bvadd(3, bvmul(4, Lambda24926Var), 1152), 3135461), 4, 0))), ite(eq(bvadd(2, bvmul(4, Lambda24926Var), 1152), 2740192), 2, ite(eq(bvadd(2, bvmul(4, Lambda24926Var), 1152), 3135460), 128, ite(eq(bvadd(2, bvmul(4, Lambda24926Var), 1152), 3135461), 4, 0))), ite(eq(bvadd(1, bvmul(4, Lambda24926Var), 1152), 2740192), 2, ite(eq(bvadd(1, bvmul(4, Lambda24926Var), 1152), 3135460), 128, ite(eq(bvadd(1, bvmul(4, Lambda24926Var), 1152), 3135461), 4, 0))), ite(eq(bvadd(bvmul(4, Lambda24926Var), 1152), 2740192), 2, ite(eq(bvadd(bvmul(4, Lambda24926Var), 1152), 3135460), 128, ite(eq(bvadd(bvmul(4, Lambda24926Var), 1152), 3135461), 4, 0))))))) )
140276 : 0 { 0x0 +1.0e129 } : BV:32                : 0
160668 : map_get(140540, 140276) : SUM[UNIT,BV:32] : ( sum(ite(ite(and(bvule(0, 0), bvule(0, 1023)), true, ite(and(bvule(1024, 0), bvule(0, 4294967295)), false, false)), 1, 0), unit, ite(eq(0, 0), 0, bvconcat(ite(eq(bvadd(3, bvmul(4, 0), 1152), 2740192), 2, ite(eq(bvadd(3, bvmul(4, 0), 1152), 3135460), 128, ite(eq(bvadd(3, bvmul(4, 0), 1152), 3135461), 4, 0))), ite(eq(bvadd(2, bvmul(4, 0), 1152), 2740192), 2, ite(eq(bvadd(2, bvmul(4, 0), 1152), 3135460), 128, ite(eq(bvadd(2, bvmul(4, 0), 1152), 3135461), 4, 0))), ite(eq(bvadd(1, bvmul(4, 0), 1152), 2740192), 2, ite(eq(bvadd(1, bvmul(4, 0), 1152), 3135460), 128, ite(eq(bvadd(1, bvmul(4, 0), 1152), 3135461), 4, 0))), ite(eq(bvadd(bvmul(4, 0), 1152), 2740192), 2, ite(eq(bvadd(bvmul(4, 0), 1152), 3135460), 128, ite(eq(bvadd(bvmul(4, 0), 1152), 3135461), 4, 0)))))) )
140285 : 0 { 0x0 +1.0e1025 } : INT                 : 0
161643 : sum_is(160668, 140285) : BOOL             : false
140525 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]] : ( 203265 = eq(ite(and(bvule(0, Lambda24850Var), bvule(Lambda24850Var, 1075905025)), 0, ite(and(bvule(1075905027, Lambda24850Var), bvule(Lambda24850Var, 4294967295)), 1075905027, ite(and(bvule(1075905026, Lambda24850Var), bvule(Lambda24850Var, 1075905026)), 1075905026, 1075905026))), 0);203386 = bvconcat(ite(eq(bvadd(2740195, bvmul(4, Lambda24850Var)), 2740192), 2, ite(eq(bvadd(2740195, bvmul(4, Lambda24850Var)), 3135460), 128, ite(eq(bvadd(2740195, bvmul(4, Lambda24850Var)), 3135461), 4, 0))), ite(eq(bvadd(2740194, bvmul(4, Lambda24850Var)), 2740192), 2, ite(eq(bvadd(2740194, bvmul(4, Lambda24850Var)), 3135460), 128, ite(eq(bvadd(2740194, bvmul(4, Lambda24850Var)), 3135461), 4, 0))), ite(eq(bvadd(2740193, bvmul(4, Lambda24850Var)), 2740192), 2, ite(eq(bvadd(2740193, bvmul(4, Lambda24850Var)), 3135460), 128, ite(eq(bvadd(2740193, bvmul(4, Lambda24850Var)), 3135461), 4, 0))), ite(eq(bvadd(2740192, bvmul(4, Lambda24850Var)), 2740192), 2, ite(eq(bvadd(2740192, bvmul(4, Lambda24850Var)), 3135460), 128, ite(eq(bvadd(2740192, bvmul(4, Lambda24850Var)), 3135461), 4, 0))));203466 = bvconcat[203466](ite[203444](eq[203439](bvadd[203438](3, bvmul(4, Lambda24852Var), 203386), 2740192), 2, ite[203443](eq[203440](bvadd[203438](3, bvmul(4, Lambda24852Var), 203386), 3135460), 128, ite[203442](eq[203441](bvadd[203438](3, bvmul(4, Lambda24852Var), 203386), 3135461), 4, 0))), ite[203451](eq[203446](bvadd[203445](2, bvmul(4, Lambda24852Var), 203386), 2740192), 2, ite[203450](eq[203447](bvadd[203445](2, bvmul(4, Lambda24852Var), 203386), 3135460), 128, ite[203449](eq[203448](bvadd[203445](2, bvmul(4, Lambda24852Var), 203386), 3135461), 4, 0))), ite[203458](eq[203453](bvadd[203452](1, bvmul(4, Lambda24852Var), 203386), 2740192), 2, ite[203457](eq[203454](bvadd[203452](1, bvmul(4, Lambda24852Var), 203386), 3135460), 128, ite[203456](eq[203455](bvadd[203452](1, bvmul(4, Lambda24852Var), 203386), 3135461), 4, 0))), ite[203465](eq[203460](bvadd[203459](bvmul(4, Lambda24852Var), 203386), 2740192), 2, ite[203464](eq[203461](bvadd[203459](bvmul(4, Lambda24852Var), 203386), 3135460), 128, ite[203463](eq[203462](bvadd[203459](bvmul(4, Lambda24852Var), 203386), 3135461), 4, 0))));map[203310](lambda(Lambda24849Var, ite(and(bvule(0, Lambda24849Var), bvule(Lambda24849Var, 1075905025)), true, ite(and(bvule(1075905026, Lambda24849Var), bvule(Lambda24849Var, 4294967295)), false, false))), lambda[203309](Lambda24850Var, map[203288](lambda[203286](Lambda24851Var, ite[203282](and[203281](203265, eq(ite(and(bvule(0, Lambda24851Var), bvule(Lambda24851Var, 1023)), 0, ite(and(bvule(1025, Lambda24851Var), bvule(Lambda24851Var, 4294967295)), 1025, ite(and(bvule(1024, Lambda24851Var), bvule(Lambda24851Var, 1024)), 1024, 1024))), 0)), true, false)), lambda[203287](Lambda24852Var, ite[203469](and(eq(Lambda24850Var, 0), eq(Lambda24852Var, 0)), 0, ite[203468](and[203436](ite(and(bvule(0, Lambda24850Var), bvule(Lambda24850Var, 1075905025)), true, ite(and(bvule(1075905026, Lambda24850Var), bvule(Lambda24850Var, 4294967295)), false, false)), ite[203435](and[203434](203265, eq(ite(and(bvule(0, Lambda24852Var), bvule(Lambda24852Var, 1023)), 0, ite(and(bvule(1025, Lambda24852Var), bvule(Lambda24852Var, 4294967295)), 1025, ite(and(bvule(1024, Lambda24852Var), bvule(Lambda24852Var, 1024)), 1024, 1024))), 0)), true, false)), 203466, ite[203467](and(eq(Lambda24850Var, 0), eq(Lambda24852Var, 0)), 0, 203466))))))) )
140288 : 1 { 0x1 +1.11e129 } : BV:32               : 1
140526 : input.spec-%var-i-0.L3%7%bbentry : BV:32  : 1073840641
140574 : bvadd(140288, 140526) : BV:32             : 1073840642
202731 : map_get(140525, 140574) : SUM[UNIT,MAP[BV:32 -> BV:32]] : ( 203370 = eq(ite(and(bvule(0, 1073840642), bvule(1073840642, 1075905025)), 0, ite(and(bvule(1075905027, 1073840642), bvule(1073840642, 4294967295)), 1075905027, ite(and(bvule(1075905026, 1073840642), bvule(1073840642, 1075905026)), 1075905026, 1075905026))), 0);203413 = ite(and(bvule(0, 1073840642), bvule(1073840642, 1075905025)), true, ite(and(bvule(1075905026, 1073840642), bvule(1073840642, 4294967295)), false, false));203517 = bvconcat(ite(eq(bvadd(2740195, bvmul(4, 1073840642)), 2740192), 2, ite(eq(bvadd(2740195, bvmul(4, 1073840642)), 3135460), 128, ite(eq(bvadd(2740195, bvmul(4, 1073840642)), 3135461), 4, 0))), ite(eq(bvadd(2740194, bvmul(4, 1073840642)), 2740192), 2, ite(eq(bvadd(2740194, bvmul(4, 1073840642)), 3135460), 128, ite(eq(bvadd(2740194, bvmul(4, 1073840642)), 3135461), 4, 0))), ite(eq(bvadd(2740193, bvmul(4, 1073840642)), 2740192), 2, ite(eq(bvadd(2740193, bvmul(4, 1073840642)), 3135460), 128, ite(eq(bvadd(2740193, bvmul(4, 1073840642)), 3135461), 4, 0))), ite(eq(bvadd(2740192, bvmul(4, 1073840642)), 2740192), 2, ite(eq(bvadd(2740192, bvmul(4, 1073840642)), 3135460), 128, ite(eq(bvadd(2740192, bvmul(4, 1073840642)), 3135461), 4, 0))));203568 = bvconcat[203568](ite[203524](eq[203519](bvadd[203518](3, bvmul(4, Lambda24960Var), 203517), 2740192), 2, ite[203523](eq[203520](bvadd[203518](3, bvmul(4, Lambda24960Var), 203517), 3135460), 128, ite[203522](eq[203521](bvadd[203518](3, bvmul(4, Lambda24960Var), 203517), 3135461), 4, 0))), ite[203531](eq[203526](bvadd[203525](2, bvmul(4, Lambda24960Var), 203517), 2740192), 2, ite[203530](eq[203527](bvadd[203525](2, bvmul(4, Lambda24960Var), 203517), 3135460), 128, ite[203529](eq[203528](bvadd[203525](2, bvmul(4, Lambda24960Var), 203517), 3135461), 4, 0))), ite[203560](eq[203533](bvadd[203532](1, bvmul(4, Lambda24960Var), 203517), 2740192), 2, ite[203544](eq[203534](bvadd[203532](1, bvmul(4, Lambda24960Var), 203517), 3135460), 128, ite[203543](eq[203535](bvadd[203532](1, bvmul(4, Lambda24960Var), 203517), 3135461), 4, 0))), ite[203567](eq[203562](bvadd[203561](bvmul(4, Lambda24960Var), 203517), 2740192), 2, ite[203566](eq[203563](bvadd[203561](bvmul(4, Lambda24960Var), 203517), 3135460), 128, ite[203565](eq[203564](bvadd[203561](bvmul(4, Lambda24960Var), 203517), 3135461), 4, 0))));sum[203574](ite[203414](203413, 1, 0), unit, map[203573](lambda[203374](Lambda24959Var, ite[203373](and[203371](203370, eq(ite(and(bvule(0, Lambda24959Var), bvule(Lambda24959Var, 1023)), 0, ite(and(bvule(1025, Lambda24959Var), bvule(Lambda24959Var, 4294967295)), 1025, ite(and(bvule(1024, Lambda24959Var), bvule(Lambda24959Var, 1024)), 1024, 1024))), 0)), true, false)), lambda[203572](Lambda24960Var, ite[203571](and(eq(1073840642, 0), eq(Lambda24960Var, 0)), 0, ite[203570](and[203389](203413, ite[203388](and[203387](203370, eq(ite(and(bvule(0, Lambda24960Var), bvule(Lambda24960Var, 1023)), 0, ite(and(bvule(1025, Lambda24960Var), bvule(Lambda24960Var, 4294967295)), 1025, ite(and(bvule(1024, Lambda24960Var), bvule(Lambda24960Var, 1024)), 1024, 1024))), 0)), true, false)), 203568, ite[203569](and(eq(1073840642, 0), eq(Lambda24960Var, 0)), 0, 203568)))))) )
202732 : sum_is(202731, 140283) : BOOL             : true
203236 : and(161643, 202732) : BOOL                : false
203240 : or(197720, 203236) : BOOL                 : false

ce =
=counter_example_begin z3v487.ce2824 89b57b38962e9f98a49885abaf8586d1
=input.spec-%var-x-1
1 : Lambda24829Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1075905025 { 0x40210201 +1.25787365e1 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1075905026 { 0x40210202 +1.25787377e1 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda24830Var : BV:32
18 : Lambda24831Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1075905027 { 0x40210203 +1.25787389e1 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 1023 { 0x3ff +1.12195e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 1025 { 0x401 +1.12218e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 1024 { 0x400 +1.12207e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda24832Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 2740195 { 0x29cfe3 +1.32665669e129 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 2740192 { 0x29cfe0 +1.32665634e129 } : BV:32
63 : eq(61, 62) : BOOL
64 : 2 { 0x2 } : BV:8
65 : 3135460 { 0x2fd7e4 +1.37377595e129 } : BV:32
66 : eq(61, 65) : BOOL
67 : 128 { 0x80 -128 } : BV:8
68 : 3135461 { 0x2fd7e5 +1.37377607e129 } : BV:32
69 : eq(61, 68) : BOOL
70 : 4 { 0x4 } : BV:8
71 : 0 { 0x0 } : BV:8
72 : ite(69, 70, 71) : BV:8
73 : ite(66, 67, 72) : BV:8
74 : ite(63, 64, 73) : BV:8
75 : 2740194 { 0x29cfe2 +1.32665657e129 } : BV:32
76 : bvadd(75, 60) : BV:32
77 : eq(76, 62) : BOOL
78 : eq(76, 65) : BOOL
79 : eq(76, 68) : BOOL
80 : ite(79, 70, 71) : BV:8
81 : ite(78, 67, 80) : BV:8
82 : ite(77, 64, 81) : BV:8
83 : 2740193 { 0x29cfe1 +1.32665646e129 } : BV:32
84 : bvadd(83, 60) : BV:32
85 : eq(84, 62) : BOOL
86 : eq(84, 65) : BOOL
87 : eq(84, 68) : BOOL
88 : ite(87, 70, 71) : BV:8
89 : ite(86, 67, 88) : BV:8
90 : ite(85, 64, 89) : BV:8
91 : bvadd(62, 60) : BV:32
92 : eq(91, 62) : BOOL
93 : eq(91, 65) : BOOL
94 : eq(91, 68) : BOOL
95 : ite(94, 70, 71) : BV:8
96 : ite(93, 67, 95) : BV:8
97 : ite(92, 64, 96) : BV:8
98 : bvconcat(74, 82, 90, 97) : BV:32
99 : bvadd(56, 58, 98) : BV:32
100 : eq(99, 62) : BOOL
101 : eq(99, 65) : BOOL
102 : eq(99, 68) : BOOL
103 : ite(102, 70, 71) : BV:8
104 : ite(101, 67, 103) : BV:8
105 : ite(100, 64, 104) : BV:8
106 : 2 { 0x2 +1.23e129 } : BV:32
107 : bvadd(106, 58, 98) : BV:32
108 : eq(107, 62) : BOOL
109 : eq(107, 65) : BOOL
110 : eq(107, 68) : BOOL
111 : ite(110, 70, 71) : BV:8
112 : ite(109, 67, 111) : BV:8
113 : ite(108, 64, 112) : BV:8
114 : 1 { 0x1 +1.11e129 } : BV:32
115 : bvadd(114, 58, 98) : BV:32
116 : eq(115, 62) : BOOL
117 : eq(115, 65) : BOOL
118 : eq(115, 68) : BOOL
119 : ite(118, 70, 71) : BV:8
120 : ite(117, 67, 119) : BV:8
121 : ite(116, 64, 120) : BV:8
122 : bvadd(58, 98) : BV:32
123 : eq(122, 62) : BOOL
124 : eq(122, 65) : BOOL
125 : eq(122, 68) : BOOL
126 : ite(125, 70, 71) : BV:8
127 : ite(124, 67, 126) : BV:8
128 : ite(123, 64, 127) : BV:8
129 : bvconcat(105, 113, 121, 128) : BV:32
130 : ite(55, 2, 129) : BV:32
131 : lambda(52, 130) : FUNCTION[BV:32 -> BV:32]
132 : map(51, 131) : MAP[BV:32 -> BV:32]
133 : lambda(17, 132) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
134 : map(16, 133) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
135 : sym_const(134) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda24849Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1075905025 { 0x40210201 +1.25787365e1 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1075905026 { 0x40210202 +1.25787377e1 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda24850Var : BV:32
18 : Lambda24851Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1075905027 { 0x40210203 +1.25787389e1 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 1023 { 0x3ff +1.12195e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 1025 { 0x401 +1.12218e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 1024 { 0x400 +1.12207e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda24852Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 10) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 41) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 2740195 { 0x29cfe3 +1.32665669e129 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 2740192 { 0x29cfe0 +1.32665634e129 } : BV:32
82 : eq(80, 81) : BOOL
83 : 2 { 0x2 } : BV:8
84 : 3135460 { 0x2fd7e4 +1.37377595e129 } : BV:32
85 : eq(80, 84) : BOOL
86 : 128 { 0x80 -128 } : BV:8
87 : 3135461 { 0x2fd7e5 +1.37377607e129 } : BV:32
88 : eq(80, 87) : BOOL
89 : 4 { 0x4 } : BV:8
90 : 0 { 0x0 } : BV:8
91 : ite(88, 89, 90) : BV:8
92 : ite(85, 86, 91) : BV:8
93 : ite(82, 83, 92) : BV:8
94 : 2740194 { 0x29cfe2 +1.32665657e129 } : BV:32
95 : bvadd(94, 79) : BV:32
96 : eq(95, 81) : BOOL
97 : eq(95, 84) : BOOL
98 : eq(95, 87) : BOOL
99 : ite(98, 89, 90) : BV:8
100 : ite(97, 86, 99) : BV:8
101 : ite(96, 83, 100) : BV:8
102 : 2740193 { 0x29cfe1 +1.32665646e129 } : BV:32
103 : bvadd(102, 79) : BV:32
104 : eq(103, 81) : BOOL
105 : eq(103, 84) : BOOL
106 : eq(103, 87) : BOOL
107 : ite(106, 89, 90) : BV:8
108 : ite(105, 86, 107) : BV:8
109 : ite(104, 83, 108) : BV:8
110 : bvadd(81, 79) : BV:32
111 : eq(110, 81) : BOOL
112 : eq(110, 84) : BOOL
113 : eq(110, 87) : BOOL
114 : ite(113, 89, 90) : BV:8
115 : ite(112, 86, 114) : BV:8
116 : ite(111, 83, 115) : BV:8
117 : bvconcat(93, 101, 109, 116) : BV:32
118 : bvadd(75, 77, 117) : BV:32
119 : eq(118, 81) : BOOL
120 : eq(118, 84) : BOOL
121 : eq(118, 87) : BOOL
122 : ite(121, 89, 90) : BV:8
123 : ite(120, 86, 122) : BV:8
124 : ite(119, 83, 123) : BV:8
125 : 2 { 0x2 +1.23e129 } : BV:32
126 : bvadd(125, 77, 117) : BV:32
127 : eq(126, 81) : BOOL
128 : eq(126, 84) : BOOL
129 : eq(126, 87) : BOOL
130 : ite(129, 89, 90) : BV:8
131 : ite(128, 86, 130) : BV:8
132 : ite(127, 83, 131) : BV:8
133 : 1 { 0x1 +1.11e129 } : BV:32
134 : bvadd(133, 77, 117) : BV:32
135 : eq(134, 81) : BOOL
136 : eq(134, 84) : BOOL
137 : eq(134, 87) : BOOL
138 : ite(137, 89, 90) : BV:8
139 : ite(136, 86, 138) : BV:8
140 : ite(135, 83, 139) : BV:8
141 : bvadd(77, 117) : BV:32
142 : eq(141, 81) : BOOL
143 : eq(141, 84) : BOOL
144 : eq(141, 87) : BOOL
145 : ite(144, 89, 90) : BV:8
146 : ite(143, 86, 145) : BV:8
147 : ite(142, 83, 146) : BV:8
148 : bvconcat(124, 132, 140, 147) : BV:32
149 : ite(55, 2, 148) : BV:32
150 : ite(74, 148, 149) : BV:32
151 : ite(55, 2, 150) : BV:32
152 : lambda(52, 151) : FUNCTION[BV:32 -> BV:32]
153 : map(51, 152) : MAP[BV:32 -> BV:32]
154 : lambda(17, 153) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
155 : map(16, 154) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
156 : sym_const(155) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 2740191 ] -> 0, [ 2740192; 2740192 ] -> 2, [ 2740193; 3135459 ] -> 0, [ 3135460; 3135460 ] -> 128, [ 3135461; 3135461 ] -> 4, [ 3135462; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 4456719 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4456720; 4456723 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 4456724; 4479427 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4479428; 4479431 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 4479432; 71455431 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 71455432; 71455435 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 71455436; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 4479428 { 0x4459c4 +1.53398942e129 } : BV:32
=input.dst.llvm-%m
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4456720 { 0x440110 +1.53128242e129 } : BV:32
=input.dst.llvm-%n
1 : 1075905026 { 0x40210202 +1.25787377e1 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 71455432 { 0x44252c8 +1.51815128e137 } : BV:32
=input.dst.llvm-%x
1 : 2740192 { 0x29cfe0 +1.32665634e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 1073840641 { 0x40018201 +1.1177990e1 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda24838Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 1023 { 0x3ff +1.12195e129 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 1024 { 0x400 +1.12207e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda24839Var : BV:32
20 : eq(19, 4) : BOOL
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 19) : BV:32
24 : 1152 { 0x480 +1.13732e129 } : BV:32
25 : bvadd(21, 23, 24) : BV:32
26 : 2740192 { 0x29cfe0 +1.32665634e129 } : BV:32
27 : eq(25, 26) : BOOL
28 : 2 { 0x2 } : BV:8
29 : 3135460 { 0x2fd7e4 +1.37377595e129 } : BV:32
30 : eq(25, 29) : BOOL
31 : 128 { 0x80 -128 } : BV:8
32 : 3135461 { 0x2fd7e5 +1.37377607e129 } : BV:32
33 : eq(25, 32) : BOOL
34 : 4 { 0x4 } : BV:8
35 : 0 { 0x0 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(30, 31, 36) : BV:8
38 : ite(27, 28, 37) : BV:8
39 : 2 { 0x2 +1.23e129 } : BV:32
40 : bvadd(39, 23, 24) : BV:32
41 : eq(40, 26) : BOOL
42 : eq(40, 29) : BOOL
43 : eq(40, 32) : BOOL
44 : ite(43, 34, 35) : BV:8
45 : ite(42, 31, 44) : BV:8
46 : ite(41, 28, 45) : BV:8
47 : 1 { 0x1 +1.11e129 } : BV:32
48 : bvadd(47, 23, 24) : BV:32
49 : eq(48, 26) : BOOL
50 : eq(48, 29) : BOOL
51 : eq(48, 32) : BOOL
52 : ite(51, 34, 35) : BV:8
53 : ite(50, 31, 52) : BV:8
54 : ite(49, 28, 53) : BV:8
55 : bvadd(23, 24) : BV:32
56 : eq(55, 26) : BOOL
57 : eq(55, 29) : BOOL
58 : eq(55, 32) : BOOL
59 : ite(58, 34, 35) : BV:8
60 : ite(57, 31, 59) : BV:8
61 : ite(56, 28, 60) : BV:8
62 : bvconcat(38, 46, 54, 61) : BV:32
63 : ite(20, 4, 62) : BV:32
64 : lambda(19, 63) : FUNCTION[BV:32 -> BV:32]
65 : map(18, 64) : MAP[BV:32 -> BV:32]
66 : sum(1, 2, 65) : SUM[UNIT,MAP[BV:32 -> BV:32]]
67 : sym_const(66) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1073840641 { 0x40018201 +1.1177990e1 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4456720 { 0x440110 +1.53128242e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 4456723 { 0x440113 +1.53128278e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 71455432 { 0x44252c8 +1.51815128e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 71455435 { 0x44252cb +1.51815164e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 4479428 { 0x4459c4 +1.53398942e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 4479431 { 0x4459c7 +1.53398978e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda24705Var : BV:32
2 : Lambda24706Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 2740195 { 0x29cfe3 +1.32665669e129 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 2740192 { 0x29cfe0 +1.32665634e129 } : BV:32
14 : eq(12, 13) : BOOL
15 : 2 { 0x2 } : BV:8
16 : 3135460 { 0x2fd7e4 +1.37377595e129 } : BV:32
17 : eq(12, 16) : BOOL
18 : 128 { 0x80 -128 } : BV:8
19 : 3135461 { 0x2fd7e5 +1.37377607e129 } : BV:32
20 : eq(12, 19) : BOOL
21 : 4 { 0x4 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : ite(17, 18, 23) : BV:8
25 : ite(14, 15, 24) : BV:8
26 : 2740194 { 0x29cfe2 +1.32665657e129 } : BV:32
27 : bvadd(26, 11) : BV:32
28 : eq(27, 13) : BOOL
29 : eq(27, 16) : BOOL
30 : eq(27, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : ite(29, 18, 31) : BV:8
33 : ite(28, 15, 32) : BV:8
34 : 2740193 { 0x29cfe1 +1.32665646e129 } : BV:32
35 : bvadd(34, 11) : BV:32
36 : eq(35, 13) : BOOL
37 : eq(35, 16) : BOOL
38 : eq(35, 19) : BOOL
39 : ite(38, 21, 22) : BV:8
40 : ite(37, 18, 39) : BV:8
41 : ite(36, 15, 40) : BV:8
42 : bvadd(13, 11) : BV:32
43 : eq(42, 13) : BOOL
44 : eq(42, 16) : BOOL
45 : eq(42, 19) : BOOL
46 : ite(45, 21, 22) : BV:8
47 : ite(44, 18, 46) : BV:8
48 : ite(43, 15, 47) : BV:8
49 : bvconcat(25, 33, 41, 48) : BV:32
50 : bvadd(7, 9, 49) : BV:32
51 : eq(50, 13) : BOOL
52 : eq(50, 16) : BOOL
53 : eq(50, 19) : BOOL
54 : ite(53, 21, 22) : BV:8
55 : ite(52, 18, 54) : BV:8
56 : ite(51, 15, 55) : BV:8
57 : 2 { 0x2 +1.23e129 } : BV:32
58 : bvadd(57, 9, 49) : BV:32
59 : eq(58, 13) : BOOL
60 : eq(58, 16) : BOOL
61 : eq(58, 19) : BOOL
62 : ite(61, 21, 22) : BV:8
63 : ite(60, 18, 62) : BV:8
64 : ite(59, 15, 63) : BV:8
65 : 1 { 0x1 +1.11e129 } : BV:32
66 : bvadd(65, 9, 49) : BV:32
67 : eq(66, 13) : BOOL
68 : eq(66, 16) : BOOL
69 : eq(66, 19) : BOOL
70 : ite(69, 21, 22) : BV:8
71 : ite(68, 18, 70) : BV:8
72 : ite(67, 15, 71) : BV:8
73 : bvadd(9, 49) : BV:32
74 : eq(73, 13) : BOOL
75 : eq(73, 16) : BOOL
76 : eq(73, 19) : BOOL
77 : ite(76, 21, 22) : BV:8
78 : ite(75, 18, 77) : BV:8
79 : ite(74, 15, 78) : BV:8
80 : bvconcat(56, 64, 72, 79) : BV:32
81 : ite(6, 3, 80) : BV:32
82 : lambda(1, 2, 81) : FUNCTION[BV:32,BV:32 -> BV:32]
83 : sym_const(82) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda24707Var : BV:32
2 : Lambda24708Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1075905025 { 0x40210201 +1.25787365e1 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1075905027 { 0x40210203 +1.25787389e1 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1075905026 { 0x40210202 +1.25787377e1 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1023 { 0x3ff +1.12195e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 1025 { 0x401 +1.12218e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 10) : BOOL
28 : and(26, 27) : BOOL
29 : 1024 { 0x400 +1.12207e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 1075905025 ] -> true, [ 1075905026; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 1075905025 ] -> true, [ 1075905026; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda24717Var : BV:32
2 : Lambda24718Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1075905025 { 0x40210201 +1.25787365e1 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1075905027 { 0x40210203 +1.25787389e1 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1075905026 { 0x40210202 +1.25787377e1 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1023 { 0x3ff +1.12195e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 1025 { 0x401 +1.12218e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 10) : BOOL
28 : and(26, 27) : BOOL
29 : 1024 { 0x400 +1.12207e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda24721Var : BV:32
2 : Lambda24722Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 1075905025 { 0x40210201 +1.25787365e1 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 1075905026 { 0x40210202 +1.25787377e1 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 1075905027 { 0x40210203 +1.25787389e1 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 1023 { 0x3ff +1.12195e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 1025 { 0x401 +1.12218e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 14) : BOOL
36 : and(34, 35) : BOOL
37 : 1024 { 0x400 +1.12207e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 37) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 2740195 { 0x29cfe3 +1.32665669e129 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 2740192 { 0x29cfe0 +1.32665634e129 } : BV:32
55 : eq(53, 54) : BOOL
56 : 2 { 0x2 } : BV:8
57 : 3135460 { 0x2fd7e4 +1.37377595e129 } : BV:32
58 : eq(53, 57) : BOOL
59 : 128 { 0x80 -128 } : BV:8
60 : 3135461 { 0x2fd7e5 +1.37377607e129 } : BV:32
61 : eq(53, 60) : BOOL
62 : 4 { 0x4 } : BV:8
63 : 0 { 0x0 } : BV:8
64 : ite(61, 62, 63) : BV:8
65 : ite(58, 59, 64) : BV:8
66 : ite(55, 56, 65) : BV:8
67 : 2740194 { 0x29cfe2 +1.32665657e129 } : BV:32
68 : bvadd(67, 52) : BV:32
69 : eq(68, 54) : BOOL
70 : eq(68, 57) : BOOL
71 : eq(68, 60) : BOOL
72 : ite(71, 62, 63) : BV:8
73 : ite(70, 59, 72) : BV:8
74 : ite(69, 56, 73) : BV:8
75 : 2740193 { 0x29cfe1 +1.32665646e129 } : BV:32
76 : bvadd(75, 52) : BV:32
77 : eq(76, 54) : BOOL
78 : eq(76, 57) : BOOL
79 : eq(76, 60) : BOOL
80 : ite(79, 62, 63) : BV:8
81 : ite(78, 59, 80) : BV:8
82 : ite(77, 56, 81) : BV:8
83 : bvadd(54, 52) : BV:32
84 : eq(83, 54) : BOOL
85 : eq(83, 57) : BOOL
86 : eq(83, 60) : BOOL
87 : ite(86, 62, 63) : BV:8
88 : ite(85, 59, 87) : BV:8
89 : ite(84, 56, 88) : BV:8
90 : bvconcat(66, 74, 82, 89) : BV:32
91 : bvadd(48, 50, 90) : BV:32
92 : eq(91, 54) : BOOL
93 : eq(91, 57) : BOOL
94 : eq(91, 60) : BOOL
95 : ite(94, 62, 63) : BV:8
96 : ite(93, 59, 95) : BV:8
97 : ite(92, 56, 96) : BV:8
98 : 2 { 0x2 +1.23e129 } : BV:32
99 : bvadd(98, 50, 90) : BV:32
100 : eq(99, 54) : BOOL
101 : eq(99, 57) : BOOL
102 : eq(99, 60) : BOOL
103 : ite(102, 62, 63) : BV:8
104 : ite(101, 59, 103) : BV:8
105 : ite(100, 56, 104) : BV:8
106 : 1 { 0x1 +1.11e129 } : BV:32
107 : bvadd(106, 50, 90) : BV:32
108 : eq(107, 54) : BOOL
109 : eq(107, 57) : BOOL
110 : eq(107, 60) : BOOL
111 : ite(110, 62, 63) : BV:8
112 : ite(109, 59, 111) : BV:8
113 : ite(108, 56, 112) : BV:8
114 : bvadd(50, 90) : BV:32
115 : eq(114, 54) : BOOL
116 : eq(114, 57) : BOOL
117 : eq(114, 60) : BOOL
118 : ite(117, 62, 63) : BV:8
119 : ite(116, 59, 118) : BV:8
120 : ite(115, 56, 119) : BV:8
121 : bvconcat(97, 105, 113, 120) : BV:32
122 : ite(6, 3, 121) : BV:32
123 : ite(47, 121, 122) : BV:32
124 : ite(6, 3, 123) : BV:32
125 : lambda(1, 2, 124) : FUNCTION[BV:32,BV:32 -> BV:32]
126 : sym_const(125) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 1023 ] -> true, [ 1024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda24726Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 1152 { 0x480 +1.13732e129 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 2740192 { 0x29cfe0 +1.32665634e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 2 { 0x2 } : BV:8
12 : 3135460 { 0x2fd7e4 +1.37377595e129 } : BV:32
13 : eq(8, 12) : BOOL
14 : 128 { 0x80 -128 } : BV:8
15 : 3135461 { 0x2fd7e5 +1.37377607e129 } : BV:32
16 : eq(8, 15) : BOOL
17 : 4 { 0x4 } : BV:8
18 : 0 { 0x0 } : BV:8
19 : ite(16, 17, 18) : BV:8
20 : ite(13, 14, 19) : BV:8
21 : ite(10, 11, 20) : BV:8
22 : 2 { 0x2 +1.23e129 } : BV:32
23 : bvadd(22, 6, 7) : BV:32
24 : eq(23, 9) : BOOL
25 : eq(23, 12) : BOOL
26 : eq(23, 15) : BOOL
27 : ite(26, 17, 18) : BV:8
28 : ite(25, 14, 27) : BV:8
29 : ite(24, 11, 28) : BV:8
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : bvadd(30, 6, 7) : BV:32
32 : eq(31, 9) : BOOL
33 : eq(31, 12) : BOOL
34 : eq(31, 15) : BOOL
35 : ite(34, 17, 18) : BV:8
36 : ite(33, 14, 35) : BV:8
37 : ite(32, 11, 36) : BV:8
38 : bvadd(6, 7) : BV:32
39 : eq(38, 9) : BOOL
40 : eq(38, 12) : BOOL
41 : eq(38, 15) : BOOL
42 : ite(41, 17, 18) : BV:8
43 : ite(40, 14, 42) : BV:8
44 : ite(39, 11, 43) : BV:8
45 : bvconcat(21, 29, 37, 44) : BV:32
46 : ite(3, 2, 45) : BV:32
47 : lambda(1, 46) : FUNCTION[BV:32 -> BV:32]
48 : sym_const(47) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
2995042314
=counter_example_end


</MSG>
<MSG>0:55 : Discovered that the correlation was useless for the product-TFG foo.A1.B3.C1.D2 (d:6, s:0, sp: 14)...</MSG>
<MSG>0:55 : Chose (for CE propagation) product-TFG foo.A1.B3.C1.D1 (d:6, s:0, sp: 14) from a frontier of size 3...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%11%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%11%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 28 counterexamples (for correlating 7 bv exprs)
            L3%11%bbentry_Lfor.cond1%1%bbentry (C L3%11%bbentry, A (line 4 at column 28))
                L3%11%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 18 counterexamples (for correlating 9 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%11%bbentry=>L3%11%bbentry[mu 0, delta {0,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:55 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B3.C1.D1...</MSG>
<MSG>0:55 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B3.C1.D1...</MSG>
<MSG>0:55 : Creating ssa-path for the src-tfg path L3%11%bbentry --> L3%11%bbentry ending at L3%11%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:55 : Adding a CG edge composition using the src path L3%11%bbentry --> L3%11%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:55 : Identifying common alloc-deallocs in the src path L3%11%bbentry --> L3%11%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry
</MSG>
<MSG>0:55 : Identified no common alloc-deallocs in the src path L3%11%bbentry --> L3%11%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:55 : Adding new edge to the product-TFG foo.A1.B3.C1.D1 for fromPC L3%11%bbentry_Lfor.cond1%1%bbentry and toPC L3%11%bbentry_Lfor.cond1%1%bbentry, src path L3%11%bbentry --> L3%11%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>0:55 : foo.A1.B3.C1.D1: Getting alloca-ptrs on edge L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:55 : foo.A1.B3.C1.D1: Found no alloca-ptrs on edge L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:55 : foo.A1.B3.C1.D1: Adding edge L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:55 : foo.A1.B3.C1.D1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:55 : foo.A1.B3.C1.D1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:55 : foo.A1.B3.C1.D1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:55 : foo.A1.B3.C1.D1: Propagated 3 out of 18 counter-examples across edge L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry</MSG>
<MSG>0:57 : foo.A1.B3.C1.D1: marking unstable at L3%11%bbentry_Lfor.cond1%1%bbentry due to failing condition:
wfcond.from_pcL3%11%bbentry_Lfor.cond1%1%bbentry.to_pcL3%7%bbentry_Lfor.cond%1%bbentry-dst-edgecond-implies-src-edgecond
140614 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32 : 1
140381 : input.dst.llvm-%m : BV:32                 : 1
140615 : bvult(140614, 140381) : BOOL              : false
140513 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]] : ( 186573 = eq(ite(and(bvule(0, 0), bvule(0, 127)), 0, ite(and(bvule(128, 0), bvule(0, 128)), 128, ite(and(bvule(129, 0), bvule(0, 4294967295)), 129, 129))), 0);sum[186624](ite(ite(and(bvule(0, 0), bvule(0, 127)), true, ite(and(bvule(128, 0), bvule(0, 4294967295)), false, false)), 1, 0), unit, map[186623](lambda[186576](Lambda11575Var, ite[186575](and[186574](186573, eq(ite(and(bvule(0, Lambda11575Var), bvule(Lambda11575Var, 0)), 0, ite(and(bvule(1, Lambda11575Var), bvule(Lambda11575Var, 1)), 1, ite(and(bvule(2, Lambda11575Var), bvule(Lambda11575Var, 4294967295)), 2, 2))), 0)), true, false)), lambda[186622](Lambda11576Var, ite[186621](and(eq(0, 0), eq(Lambda11576Var, 0)), 0, ite[186620](and[186618](ite(and(bvule(0, 0), bvule(0, 127)), true, ite(and(bvule(128, 0), bvule(0, 4294967295)), false, false)), ite[186617](and[186616](186573, eq(ite(and(bvule(0, Lambda11576Var), bvule(Lambda11576Var, 0)), 0, ite(and(bvule(1, Lambda11576Var), bvule(Lambda11576Var, 1)), 1, ite(and(bvule(2, Lambda11576Var), bvule(Lambda11576Var, 4294967295)), 2, 2))), 0)), true, false)), 0, ite(and(eq(0, 0), eq(Lambda11576Var, 0)), 0, 0)))))) )
140283 : 1 { 0x1 +1.0e1025 } : INT                 : 1
140540 : sum_get(140513, 140283) : MAP[BV:32 -> BV:32] : ( 186573 = eq(ite(and(bvule(0, 0), bvule(0, 127)), 0, ite(and(bvule(128, 0), bvule(0, 128)), 128, ite(and(bvule(129, 0), bvule(0, 4294967295)), 129, 129))), 0);map[203476](lambda[203474](Lambda25109Var, ite[203392](and[203391](186573, eq(ite(and(bvule(0, Lambda25109Var), bvule(Lambda25109Var, 0)), 0, ite(and(bvule(1, Lambda25109Var), bvule(Lambda25109Var, 1)), 1, ite(and(bvule(2, Lambda25109Var), bvule(Lambda25109Var, 4294967295)), 2, 2))), 0)), true, false)), lambda[203475](Lambda25110Var, ite[203473](and(eq(0, 0), eq(Lambda25110Var, 0)), 0, ite[203472](and[203470](ite(and(bvule(0, 0), bvule(0, 127)), true, ite(and(bvule(128, 0), bvule(0, 4294967295)), false, false)), ite[203418](and[203417](186573, eq(ite(and(bvule(0, Lambda25110Var), bvule(Lambda25110Var, 0)), 0, ite(and(bvule(1, Lambda25110Var), bvule(Lambda25110Var, 1)), 1, ite(and(bvule(2, Lambda25110Var), bvule(Lambda25110Var, 4294967295)), 2, 2))), 0)), true, false)), 0, ite(and(eq(0, 0), eq(Lambda25110Var, 0)), 0, 0))))) )
140276 : 0 { 0x0 +1.0e129 } : BV:32                : 0
160668 : map_get(140540, 140276) : SUM[UNIT,BV:32] : ( 198288 = ite(and(eq(ite(and(bvule(0, 0), bvule(0, 127)), 0, ite(and(bvule(128, 0), bvule(0, 128)), 128, ite(and(bvule(129, 0), bvule(0, 4294967295)), 129, 129))), 0), eq(ite(and(bvule(0, 0), bvule(0, 0)), 0, ite(and(bvule(1, 0), bvule(0, 1)), 1, ite(and(bvule(2, 0), bvule(0, 4294967295)), 2, 2))), 0)), true, false);sum[203527](ite[198295](198288, 1, 0), unit, ite[203526](and(eq(0, 0), eq(0, 0)), 0, ite[203525](and[203523](ite(and(bvule(0, 0), bvule(0, 127)), true, ite(and(bvule(128, 0), bvule(0, 4294967295)), false, false)), 198288), 0, ite(and(eq(0, 0), eq(0, 0)), 0, 0)))) )
140285 : 0 { 0x0 +1.0e1025 } : INT                 : 0
161643 : sum_is(160668, 140285) : BOOL             : false
197975 : or(140615, 161643) : BOOL                 : false

ce =
=counter_example_begin z3v487.ce2892 e864536b6ffeb2db889a27c413484445
=input.spec-%var-x-1
1 : Lambda11474Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 127 { 0x7f +1.1513e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 128 { 0x80 +1.1525e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda11475Var : BV:32
18 : Lambda11476Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 129 { 0x81 +1.1537e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda11477Var : BV:32
52 : lambda(51, 2) : FUNCTION[BV:32 -> BV:32]
53 : map(50, 52) : MAP[BV:32 -> BV:32]
54 : lambda(17, 53) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
55 : map(16, 54) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
56 : sym_const(55) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda11487Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 127 { 0x7f +1.1513e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 128 { 0x80 +1.1525e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda11488Var : BV:32
18 : Lambda11489Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 129 { 0x81 +1.1537e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda11490Var : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : and(22, 27) : BOOL
56 : ite(55, 13, 13) : BOOL
57 : ite(21, 7, 56) : BOOL
58 : bvule(2, 51) : BOOL
59 : bvule(51, 2) : BOOL
60 : and(58, 59) : BOOL
61 : bvule(36, 51) : BOOL
62 : bvule(51, 36) : BOOL
63 : and(61, 62) : BOOL
64 : bvule(40, 51) : BOOL
65 : bvule(51, 10) : BOOL
66 : and(64, 65) : BOOL
67 : ite(66, 40, 40) : BV:32
68 : ite(63, 36, 67) : BV:32
69 : ite(60, 2, 68) : BV:32
70 : eq(69, 2) : BOOL
71 : and(32, 70) : BOOL
72 : ite(71, 7, 13) : BOOL
73 : and(57, 72) : BOOL
74 : ite(54, 2, 2) : BV:32
75 : ite(73, 2, 74) : BV:32
76 : ite(54, 2, 75) : BV:32
77 : lambda(51, 76) : FUNCTION[BV:32 -> BV:32]
78 : map(50, 77) : MAP[BV:32 -> BV:32]
79 : lambda(17, 78) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
80 : map(16, 79) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
81 : sym_const(80) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 494115 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 494116; 494119 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 494120; 155483431 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 155483432; 155483435 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 155483436; 3645973127 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3645973128; 3645973131 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3645973132; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 155483432 { 0x9447d28 +1.53506946e147 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 494116 { 0x78a24 +1.5890321e129 } : BV:32
=input.dst.llvm-%n
1 : 128 { 0x80 +1.1525e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3645973128 { 0xd9512288 -648994168 -1.63386631e51 } : BV:32
=input.dst.llvm-%x
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 127 { 0x7f +1.1513e129 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 128 { 0x80 +1.1525e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda11575Var : BV:32
19 : bvule(1, 7) : BOOL
20 : and(8, 19) : BOOL
21 : 129 { 0x81 +1.1537e129 } : BV:32
22 : bvule(21, 1) : BOOL
23 : and(22, 10) : BOOL
24 : ite(23, 21, 21) : BV:32
25 : ite(20, 7, 24) : BV:32
26 : ite(5, 1, 25) : BV:32
27 : eq(26, 1) : BOOL
28 : bvule(1, 18) : BOOL
29 : bvule(18, 1) : BOOL
30 : and(28, 29) : BOOL
31 : bvule(15, 18) : BOOL
32 : bvule(18, 15) : BOOL
33 : and(31, 32) : BOOL
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvule(34, 18) : BOOL
36 : bvule(18, 9) : BOOL
37 : and(35, 36) : BOOL
38 : ite(37, 34, 34) : BV:32
39 : ite(33, 15, 38) : BV:32
40 : ite(30, 1, 39) : BV:32
41 : eq(40, 1) : BOOL
42 : and(27, 41) : BOOL
43 : ite(42, 6, 12) : BOOL
44 : lambda(18, 43) : FUNCTION[BV:32 -> BOOL]
45 : Lambda11576Var : BV:32
46 : eq(1, 1) : BOOL
47 : eq(45, 1) : BOOL
48 : and(46, 47) : BOOL
49 : bvule(1, 45) : BOOL
50 : bvule(45, 1) : BOOL
51 : and(49, 50) : BOOL
52 : bvule(15, 45) : BOOL
53 : bvule(45, 15) : BOOL
54 : and(52, 53) : BOOL
55 : bvule(34, 45) : BOOL
56 : bvule(45, 9) : BOOL
57 : and(55, 56) : BOOL
58 : ite(57, 34, 34) : BV:32
59 : ite(54, 15, 58) : BV:32
60 : ite(51, 1, 59) : BV:32
61 : eq(60, 1) : BOOL
62 : and(27, 61) : BOOL
63 : ite(62, 6, 12) : BOOL
64 : and(14, 63) : BOOL
65 : ite(48, 1, 1) : BV:32
66 : ite(64, 1, 65) : BV:32
67 : ite(48, 1, 66) : BV:32
68 : lambda(45, 67) : FUNCTION[BV:32 -> BV:32]
69 : map(44, 68) : MAP[BV:32 -> BV:32]
70 : sum(16, 17, 69) : SUM[UNIT,MAP[BV:32 -> BV:32]]
71 : sym_const(70) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 494116 { 0x78a24 +1.5890321e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 494119 { 0x78a27 +1.5890357e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3645973128 { 0xd9512288 -648994168 -1.63386631e51 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3645973131 { 0xd951228b -648994165 -1.63386666e51 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 155483432 { 0x9447d28 +1.53506946e147 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 155483435 { 0x9447d2b +1.53506982e147 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda11409Var : BV:32
2 : Lambda11410Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 127 { 0x7f +1.1513e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 128 { 0x80 +1.1525e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 129 { 0x81 +1.1537e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 127 ] -> true, [ 128; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 127 ] -> true, [ 128; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda11419Var : BV:32
2 : Lambda11420Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 127 { 0x7f +1.1513e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 128 { 0x80 +1.1525e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 129 { 0x81 +1.1537e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda11423Var : BV:32
2 : Lambda11424Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 127 { 0x7f +1.1513e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 128 { 0x80 +1.1525e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 129 { 0x81 +1.1537e129 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : bvule(2, 3) : BOOL
31 : and(29, 30) : BOOL
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : bvule(32, 2) : BOOL
34 : bvule(2, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvule(36, 2) : BOOL
38 : bvule(2, 14) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 3, 41) : BV:32
43 : eq(42, 3) : BOOL
44 : and(28, 43) : BOOL
45 : ite(44, 11, 17) : BOOL
46 : and(19, 45) : BOOL
47 : ite(6, 3, 3) : BV:32
48 : ite(46, 3, 47) : BV:32
49 : ite(6, 3, 48) : BV:32
50 : lambda(1, 2, 49) : FUNCTION[BV:32,BV:32 -> BV:32]
51 : sym_const(50) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3997393353
=counter_example_end


failcond-expr = or(bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m), sum_is(map_get(sum_get(input.spec-%tmpvar-7.L3%8%d, 1), 0), 0)):
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
4 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
5 : 1 { 0x1 +1.0e1025 } : INT
6 : sum_get(4, 5) : MAP[BV:32 -> BV:32]
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : map_get(6, 7) : SUM[UNIT,BV:32]
9 : 0 { 0x0 +1.0e1025 } : INT
10 : sum_is(8, 9) : BOOL
11 : or(3, 10) : BOOL
</MSG>
<MSG>0:57 : foo.A1.B3.C1.D1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:57 : foo.A1.B3.C1.D1: Finished executing CG's add edge function...</MSG>
<MSG>0:57 : foo.A1.B3.C1.D1: Computing CG regions after the addition of the edge L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:57 : foo.A1.B3.C1.D1: Done computing CG regions after the addition of the edge L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:57 : Done adding new edge to the product-TFG foo.A1.B3.C1.D1 for fromPC L3%11%bbentry_Lfor.cond1%1%bbentry and toPC L3%11%bbentry_Lfor.cond1%1%bbentry, src path L3%11%bbentry --> L3%11%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>0:57 : Done adding a CG edge composition using the src path L3%11%bbentry --> L3%11%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:57 : Failed correlation of src pathset L3%11%bbentry=>L3%11%bbentry[mu 0, delta {0,0}] as correlation candidate for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%11%bbentry_Lfor.cond1%1%bbentry: failcond = wfcond.from_pcL3%11%bbentry_Lfor.cond1%1%bbentry.to_pcL3%7%bbentry_Lfor.cond%1%bbentry-dst-edgecond-implies-src-edgecond
140614 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32 : 1
140381 : input.dst.llvm-%m : BV:32                 : 1
140615 : bvult(140614, 140381) : BOOL              : false
140513 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]] : ( 186573 = eq(ite(and(bvule(0, 0), bvule(0, 127)), 0, ite(and(bvule(128, 0), bvule(0, 128)), 128, ite(and(bvule(129, 0), bvule(0, 4294967295)), 129, 129))), 0);sum[186624](ite(ite(and(bvule(0, 0), bvule(0, 127)), true, ite(and(bvule(128, 0), bvule(0, 4294967295)), false, false)), 1, 0), unit, map[186623](lambda[186576](Lambda11575Var, ite[186575](and[186574](186573, eq(ite(and(bvule(0, Lambda11575Var), bvule(Lambda11575Var, 0)), 0, ite(and(bvule(1, Lambda11575Var), bvule(Lambda11575Var, 1)), 1, ite(and(bvule(2, Lambda11575Var), bvule(Lambda11575Var, 4294967295)), 2, 2))), 0)), true, false)), lambda[186622](Lambda11576Var, ite[186621](and(eq(0, 0), eq(Lambda11576Var, 0)), 0, ite[186620](and[186618](ite(and(bvule(0, 0), bvule(0, 127)), true, ite(and(bvule(128, 0), bvule(0, 4294967295)), false, false)), ite[186617](and[186616](186573, eq(ite(and(bvule(0, Lambda11576Var), bvule(Lambda11576Var, 0)), 0, ite(and(bvule(1, Lambda11576Var), bvule(Lambda11576Var, 1)), 1, ite(and(bvule(2, Lambda11576Var), bvule(Lambda11576Var, 4294967295)), 2, 2))), 0)), true, false)), 0, ite(and(eq(0, 0), eq(Lambda11576Var, 0)), 0, 0)))))) )
140283 : 1 { 0x1 +1.0e1025 } : INT                 : 1
140540 : sum_get(140513, 140283) : MAP[BV:32 -> BV:32] : ( 186573 = eq(ite(and(bvule(0, 0), bvule(0, 127)), 0, ite(and(bvule(128, 0), bvule(0, 128)), 128, ite(and(bvule(129, 0), bvule(0, 4294967295)), 129, 129))), 0);map[203476](lambda[203474](Lambda25109Var, ite[203392](and[203391](186573, eq(ite(and(bvule(0, Lambda25109Var), bvule(Lambda25109Var, 0)), 0, ite(and(bvule(1, Lambda25109Var), bvule(Lambda25109Var, 1)), 1, ite(and(bvule(2, Lambda25109Var), bvule(Lambda25109Var, 4294967295)), 2, 2))), 0)), true, false)), lambda[203475](Lambda25110Var, ite[203473](and(eq(0, 0), eq(Lambda25110Var, 0)), 0, ite[203472](and[203470](ite(and(bvule(0, 0), bvule(0, 127)), true, ite(and(bvule(128, 0), bvule(0, 4294967295)), false, false)), ite[203418](and[203417](186573, eq(ite(and(bvule(0, Lambda25110Var), bvule(Lambda25110Var, 0)), 0, ite(and(bvule(1, Lambda25110Var), bvule(Lambda25110Var, 1)), 1, ite(and(bvule(2, Lambda25110Var), bvule(Lambda25110Var, 4294967295)), 2, 2))), 0)), true, false)), 0, ite(and(eq(0, 0), eq(Lambda25110Var, 0)), 0, 0))))) )
140276 : 0 { 0x0 +1.0e129 } : BV:32                : 0
160668 : map_get(140540, 140276) : SUM[UNIT,BV:32] : ( 198288 = ite(and(eq(ite(and(bvule(0, 0), bvule(0, 127)), 0, ite(and(bvule(128, 0), bvule(0, 128)), 128, ite(and(bvule(129, 0), bvule(0, 4294967295)), 129, 129))), 0), eq(ite(and(bvule(0, 0), bvule(0, 0)), 0, ite(and(bvule(1, 0), bvule(0, 1)), 1, ite(and(bvule(2, 0), bvule(0, 4294967295)), 2, 2))), 0)), true, false);sum[203527](ite[198295](198288, 1, 0), unit, ite[203526](and(eq(0, 0), eq(0, 0)), 0, ite[203525](and[203523](ite(and(bvule(0, 0), bvule(0, 127)), true, ite(and(bvule(128, 0), bvule(0, 4294967295)), false, false)), 198288), 0, ite(and(eq(0, 0), eq(0, 0)), 0, 0)))) )
140285 : 0 { 0x0 +1.0e1025 } : INT                 : 0
161643 : sum_is(160668, 140285) : BOOL             : false
197975 : or(140615, 161643) : BOOL                 : false

ce =
=counter_example_begin z3v487.ce2892 e864536b6ffeb2db889a27c413484445
=input.spec-%var-x-1
1 : Lambda11474Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 127 { 0x7f +1.1513e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 128 { 0x80 +1.1525e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda11475Var : BV:32
18 : Lambda11476Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 129 { 0x81 +1.1537e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda11477Var : BV:32
52 : lambda(51, 2) : FUNCTION[BV:32 -> BV:32]
53 : map(50, 52) : MAP[BV:32 -> BV:32]
54 : lambda(17, 53) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
55 : map(16, 54) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
56 : sym_const(55) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda11487Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 127 { 0x7f +1.1513e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 128 { 0x80 +1.1525e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda11488Var : BV:32
18 : Lambda11489Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 129 { 0x81 +1.1537e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda11490Var : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : and(22, 27) : BOOL
56 : ite(55, 13, 13) : BOOL
57 : ite(21, 7, 56) : BOOL
58 : bvule(2, 51) : BOOL
59 : bvule(51, 2) : BOOL
60 : and(58, 59) : BOOL
61 : bvule(36, 51) : BOOL
62 : bvule(51, 36) : BOOL
63 : and(61, 62) : BOOL
64 : bvule(40, 51) : BOOL
65 : bvule(51, 10) : BOOL
66 : and(64, 65) : BOOL
67 : ite(66, 40, 40) : BV:32
68 : ite(63, 36, 67) : BV:32
69 : ite(60, 2, 68) : BV:32
70 : eq(69, 2) : BOOL
71 : and(32, 70) : BOOL
72 : ite(71, 7, 13) : BOOL
73 : and(57, 72) : BOOL
74 : ite(54, 2, 2) : BV:32
75 : ite(73, 2, 74) : BV:32
76 : ite(54, 2, 75) : BV:32
77 : lambda(51, 76) : FUNCTION[BV:32 -> BV:32]
78 : map(50, 77) : MAP[BV:32 -> BV:32]
79 : lambda(17, 78) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
80 : map(16, 79) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
81 : sym_const(80) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 494115 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 494116; 494119 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 494120; 155483431 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 155483432; 155483435 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 155483436; 3645973127 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3645973128; 3645973131 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3645973132; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 155483432 { 0x9447d28 +1.53506946e147 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 494116 { 0x78a24 +1.5890321e129 } : BV:32
=input.dst.llvm-%n
1 : 128 { 0x80 +1.1525e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3645973128 { 0xd9512288 -648994168 -1.63386631e51 } : BV:32
=input.dst.llvm-%x
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 127 { 0x7f +1.1513e129 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 128 { 0x80 +1.1525e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda11575Var : BV:32
19 : bvule(1, 7) : BOOL
20 : and(8, 19) : BOOL
21 : 129 { 0x81 +1.1537e129 } : BV:32
22 : bvule(21, 1) : BOOL
23 : and(22, 10) : BOOL
24 : ite(23, 21, 21) : BV:32
25 : ite(20, 7, 24) : BV:32
26 : ite(5, 1, 25) : BV:32
27 : eq(26, 1) : BOOL
28 : bvule(1, 18) : BOOL
29 : bvule(18, 1) : BOOL
30 : and(28, 29) : BOOL
31 : bvule(15, 18) : BOOL
32 : bvule(18, 15) : BOOL
33 : and(31, 32) : BOOL
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvule(34, 18) : BOOL
36 : bvule(18, 9) : BOOL
37 : and(35, 36) : BOOL
38 : ite(37, 34, 34) : BV:32
39 : ite(33, 15, 38) : BV:32
40 : ite(30, 1, 39) : BV:32
41 : eq(40, 1) : BOOL
42 : and(27, 41) : BOOL
43 : ite(42, 6, 12) : BOOL
44 : lambda(18, 43) : FUNCTION[BV:32 -> BOOL]
45 : Lambda11576Var : BV:32
46 : eq(1, 1) : BOOL
47 : eq(45, 1) : BOOL
48 : and(46, 47) : BOOL
49 : bvule(1, 45) : BOOL
50 : bvule(45, 1) : BOOL
51 : and(49, 50) : BOOL
52 : bvule(15, 45) : BOOL
53 : bvule(45, 15) : BOOL
54 : and(52, 53) : BOOL
55 : bvule(34, 45) : BOOL
56 : bvule(45, 9) : BOOL
57 : and(55, 56) : BOOL
58 : ite(57, 34, 34) : BV:32
59 : ite(54, 15, 58) : BV:32
60 : ite(51, 1, 59) : BV:32
61 : eq(60, 1) : BOOL
62 : and(27, 61) : BOOL
63 : ite(62, 6, 12) : BOOL
64 : and(14, 63) : BOOL
65 : ite(48, 1, 1) : BV:32
66 : ite(64, 1, 65) : BV:32
67 : ite(48, 1, 66) : BV:32
68 : lambda(45, 67) : FUNCTION[BV:32 -> BV:32]
69 : map(44, 68) : MAP[BV:32 -> BV:32]
70 : sum(16, 17, 69) : SUM[UNIT,MAP[BV:32 -> BV:32]]
71 : sym_const(70) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 494116 { 0x78a24 +1.5890321e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 494119 { 0x78a27 +1.5890357e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3645973128 { 0xd9512288 -648994168 -1.63386631e51 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3645973131 { 0xd951228b -648994165 -1.63386666e51 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 155483432 { 0x9447d28 +1.53506946e147 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 155483435 { 0x9447d2b +1.53506982e147 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda11409Var : BV:32
2 : Lambda11410Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 127 { 0x7f +1.1513e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 128 { 0x80 +1.1525e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 129 { 0x81 +1.1537e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 127 ] -> true, [ 128; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 127 ] -> true, [ 128; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda11419Var : BV:32
2 : Lambda11420Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 127 { 0x7f +1.1513e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 128 { 0x80 +1.1525e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 129 { 0x81 +1.1537e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda11423Var : BV:32
2 : Lambda11424Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 127 { 0x7f +1.1513e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 128 { 0x80 +1.1525e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 129 { 0x81 +1.1537e129 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : bvule(2, 3) : BOOL
31 : and(29, 30) : BOOL
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : bvule(32, 2) : BOOL
34 : bvule(2, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvule(36, 2) : BOOL
38 : bvule(2, 14) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 3, 41) : BV:32
43 : eq(42, 3) : BOOL
44 : and(28, 43) : BOOL
45 : ite(44, 11, 17) : BOOL
46 : and(19, 45) : BOOL
47 : ite(6, 3, 3) : BV:32
48 : ite(46, 3, 47) : BV:32
49 : ite(6, 3, 48) : BV:32
50 : lambda(1, 2, 49) : FUNCTION[BV:32,BV:32 -> BV:32]
51 : sym_const(50) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3997393353
=counter_example_end


</MSG>
<MSG>0:57 : Discovered that the correlation was useless for the product-TFG foo.A1.B3.C1.D1 (d:6, s:0, sp: 14)...</MSG>
<MSG>0:57 : Chose (after CE propagation) product-TFG foo.A1.B4 (d:6, s:0, sp: 14) from a frontier of size 2...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%19%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 13 counterexamples (for correlating 7 bv exprs)
            L3%19%bbentry_Lfor.cond1%1%bbentry (C L3%19%bbentry, A (line 4 at column 28))
                L3%19%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 9 counterexamples (for correlating 12 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%19%bbentry[mu 1, delta {1,0}]
<MSG>0:57 : foo.A1.B4: Updating invariants over the newly added edges in edge composition L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:57 : Constructed infer_invariants_dfa with initial worklist L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:57 : foo.A1.B4: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:57 : foo.A1.B4: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>0:57 : foo.A1.B4: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:57 : foo.A1.B4: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:57 : foo.A1.B4: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:57 : foo.A1.B4: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:57 : foo.A1.B4: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 12 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:57 : foo.A1.B4: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht10-prove_trivial8-prove2...</MSG>
<MSG>0:57 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:57 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:57 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:57 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial0-prove4...</MSG>
<MSG>0:57 : foo.A1.B4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:57 : foo.A1.B4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:57 : foo.A1.B4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:57 : foo.A1.B4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:57 : foo.A1.B4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:58 : foo.A1.B4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:58 : foo.A1.B4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:58 : foo.A1.B4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:58 : foo.A1.B4: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:58 : foo.A1.B4: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht10-prove_trivial5-prove5...</MSG>
<MSG>0:58 : foo.A1.B4: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 13 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:58 : foo.A1.B4: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht5-prove_trivial2-prove3...</MSG>
<MSG>0:58 : foo.A1.B4: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:58 : foo.A1.B4: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:58 : foo.A1.B4: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>0:58 : foo.A1.B4: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>0:58 : foo.A1.B4 (d:6, s:0, sp: 14): checked newly added edge and inferred invariants...</MSG>
<MSG>0:58 : foo.A1.B4 (d:6, s:0, sp: 14): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:58 : product-TFG foo.A1.B4: Enumerating correlations for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L3%19%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:58 : Considering 1 paths to src pc L3%7%bbentry as correlation candidates for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%19%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:58 : Attempting correlation of src pathset L3%19%bbentry=>L3%7%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%19%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:58 : Found 1 feasible correlations for paths to src pc L3%7%bbentry as correlation candidates for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%19%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:58 : product-TFG foo.A1.B4: Found 1 correlations for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L3%19%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:58 : product-TFG foo.A1.B4 created 1 possibilities in group foo.A1.B4.C...</MSG>
<MSG>0:58 : Chose (for CE propagation) product-TFG foo.A1.B4.C1 (d:6, s:0, sp: 14) from a frontier of size 2...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%19%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 13 counterexamples (for correlating 7 bv exprs)
            L3%19%bbentry_Lfor.cond1%1%bbentry (C L3%19%bbentry, A (line 4 at column 28))
                L3%19%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%19%bbentry=>L3%7%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:58 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B4.C1...</MSG>
<MSG>0:58 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B4.C1...</MSG>
<MSG>0:58 : Creating ssa-path for the src-tfg path L3%19%bbentry --> L3%7%bbentry ending at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:58 : Adding a CG edge composition using the src path L3%19%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry</MSG>
<MSG>0:58 : Identifying common alloc-deallocs in the src path L3%19%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry
</MSG>
<MSG>0:58 : Identified no common alloc-deallocs in the src path L3%19%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry</MSG>
<MSG>0:58 : Adding new edge to the product-TFG foo.A1.B4.C1 for fromPC L3%19%bbentry_Lfor.cond1%1%bbentry and toPC L3%7%bbentry_Lfor.cond%1%bbentry, src path L3%19%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:58 : foo.A1.B4.C1: Getting alloca-ptrs on edge L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:58 : foo.A1.B4.C1: Found no alloca-ptrs on edge L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:58 : foo.A1.B4.C1: Adding edge L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:58 : foo.A1.B4.C1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:58 : foo.A1.B4.C1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:58 : foo.A1.B4.C1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:58 : foo.A1.B4.C1: Propagated 7 out of 11 counter-examples across edge L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry</MSG>
<MSG>0:59 : foo.A1.B4.C1: Added the 7 propagated CEs at PC L3%7%bbentry_Lfor.cond%1%bbentry and propagated further.
</MSG>
<MSG>0:59 : foo.A1.B4.C1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Finished executing CG's add edge function...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Computing CG regions after the addition of the edge L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Done computing CG regions after the addition of the edge L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:59 : Done adding new edge to the product-TFG foo.A1.B4.C1 for fromPC L3%19%bbentry_Lfor.cond1%1%bbentry and toPC L3%7%bbentry_Lfor.cond%1%bbentry, src path L3%19%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:59 : Done adding a CG edge composition using the src path L3%19%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry</MSG>
<MSG>0:59 : Added correlation to the product-TFG foo.A1.B4.C1 (d:6, s:0, sp: 14) and created a correlation entry...</MSG>
<MSG>0:59 : Chose (after CE propagation) product-TFG foo.A1.B4.C1 (d:6, s:0, sp: 14) from a frontier of size 2...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%19%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%19%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 21 counterexamples (for correlating 7 bv exprs)
            L3%19%bbentry_Lfor.cond1%1%bbentry (C L3%19%bbentry, A (line 4 at column 28))
                L3%19%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 13 counterexamples (for correlating 12 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%19%bbentry=>L3%7%bbentry[mu 1, delta {1,0}]
<MSG>0:59 : foo.A1.B4.C1: Updating invariants over the newly added edges in edge composition L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:59 : Constructed infer_invariants_dfa with initial worklist L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>0:59 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 12 exprs and 7 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht9-prove_trivial7-prove2...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial0-prove4...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial1-prove2...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial2-prove5...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 13 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht5-prove_trivial2-prove3...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>1:01 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%19%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 9 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial3-prove1...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht4-prove_trivial2-prove2...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 9 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial3-prove1...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial2-prove1...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>1:02 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 12 exprs and 7 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht9-prove_trivial7-prove2...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht5-prove_trivial0-prove5...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial2-prove5...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 13 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht5-prove_trivial2-prove3...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 12 exprs and 7 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht9-prove_trivial7-prove2...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial0-prove4...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial2-prove5...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 13 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht5-prove_trivial2-prove3...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: changed ...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>1:04 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%19%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 9 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial3-prove1...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht4-prove_trivial2-prove2...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 9 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial3-prove1...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial2-prove1...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>1:05 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 12 exprs and 7 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht9-prove_trivial7-prove2...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht4-prove_trivial0-prove4...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial2-prove5...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 13 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht5-prove_trivial2-prove3...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 12 exprs and 7 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht9-prove_trivial7-prove2...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial2-prove5...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 13 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht5-prove_trivial2-prove3...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: changed ...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>1:08 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%19%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 9 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial3-prove1...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht3-prove_trivial1-prove2...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 9 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial3-prove1...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>1:09 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 12 exprs and 7 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht9-prove_trivial7-prove2...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial2-prove5...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 13 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht5-prove_trivial2-prove3...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 12 exprs and 7 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht9-prove_trivial7-prove2...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial2-prove5...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 13 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht5-prove_trivial2-prove3...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: changed ...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>1:12 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%19%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 9 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial3-prove1...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 9 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial3-prove1...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>1:13 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 12 exprs and 7 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht9-prove_trivial7-prove2...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht6-prove_trivial2-prove4...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 13 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht5-prove_trivial2-prove3...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 12 exprs and 7 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht9-prove_trivial7-prove2...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht6-prove_trivial2-prove4...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 13 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht5-prove_trivial2-prove3...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: changed ...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>1:18 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%19%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 9 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial3-prove1...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 9 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial3-prove1...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>1:18 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 12 exprs and 7 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:19 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht9-prove_trivial7-prove2...</MSG>
<MSG>1:19 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:19 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:19 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:19 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:19 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:19 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:19 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:19 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:19 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:19 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:19 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:19 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:19 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:19 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht6-prove_trivial2-prove4...</MSG>
<MSG>1:19 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 13 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:19 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht5-prove_trivial2-prove3...</MSG>
<MSG>1:19 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:19 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:19 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>1:19 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>1:19 : foo.A1.B4.C1 (d:6, s:0, sp: 14): checked newly added edge and inferred invariants...</MSG>
<MSG>1:19 : foo.A1.B4.C1 (d:6, s:0, sp: 14): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>1:20 : product-TFG foo.A1.B4.C1: Enumerating correlations for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] starting at L3%19%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>1:20 : Considering 2 paths to src pc L3%19%bbentry as correlation candidates for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%19%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>1:20 : Attempting correlation of src pathset L3%19%bbentry=>L3%19%bbentry[mu 0, delta {0,0}] as correlation candidate for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%19%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>1:20 : Attempting correlation of src pathset L3%19%bbentry=>L3%19%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%19%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>1:20 : Found 2 feasible correlations for paths to src pc L3%19%bbentry as correlation candidates for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%19%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>1:20 : product-TFG foo.A1.B4.C1: Found 2 correlations for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] starting at L3%19%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>1:20 : product-TFG foo.A1.B4.C1 created 2 possibilities in group foo.A1.B4.C1.D...</MSG>
<MSG>1:20 : Chose (for CE propagation) product-TFG foo.A1.B4.C1.D2 (d:6, s:0, sp: 14) from a frontier of size 3...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%19%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%19%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 26 counterexamples (for correlating 7 bv exprs)
            L3%19%bbentry_Lfor.cond1%1%bbentry (C L3%19%bbentry, A (line 4 at column 28))
                L3%19%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 20 counterexamples (for correlating 12 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%19%bbentry=>L3%19%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>1:20 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B4.C1.D2...</MSG>
<MSG>1:20 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B4.C1.D2...</MSG>
<MSG>1:20 : Creating ssa-path for the src-tfg path L3%19%bbentry --> L3%19%bbentry ending at L3%19%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>1:20 : Adding a CG edge composition using the src path L3%19%bbentry --> L3%19%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>1:20 : Identifying common alloc-deallocs in the src path L3%19%bbentry --> L3%19%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry
</MSG>
<MSG>1:20 : Identified no common alloc-deallocs in the src path L3%19%bbentry --> L3%19%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>1:20 : Adding new edge to the product-TFG foo.A1.B4.C1.D2 for fromPC L3%19%bbentry_Lfor.cond1%1%bbentry and toPC L3%19%bbentry_Lfor.cond1%1%bbentry, src path L3%19%bbentry --> L3%19%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>1:20 : foo.A1.B4.C1.D2: Getting alloca-ptrs on edge L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>1:20 : foo.A1.B4.C1.D2: Found no alloca-ptrs on edge L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>1:20 : foo.A1.B4.C1.D2: Adding edge L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>1:20 : foo.A1.B4.C1.D2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>1:20 : foo.A1.B4.C1.D2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>1:20 : foo.A1.B4.C1.D2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>1:23 : foo.A1.B4.C1.D2: Propagated 5 out of 20 counter-examples across edge L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry</MSG>
<MSG>1:31 : foo.A1.B4.C1.D2: Added the 5 propagated CEs at PC L3%19%bbentry_Lfor.cond1%1%bbentry and propagated further.
</MSG>
<MSG>1:31 : foo.A1.B4.C1.D2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>1:31 : foo.A1.B4.C1.D2: Finished executing CG's add edge function...</MSG>
<MSG>1:31 : foo.A1.B4.C1.D2: Computing CG regions after the addition of the edge L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>1:31 : foo.A1.B4.C1.D2: Done computing CG regions after the addition of the edge L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>1:31 : Done adding new edge to the product-TFG foo.A1.B4.C1.D2 for fromPC L3%19%bbentry_Lfor.cond1%1%bbentry and toPC L3%19%bbentry_Lfor.cond1%1%bbentry, src path L3%19%bbentry --> L3%19%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>1:31 : Done adding a CG edge composition using the src path L3%19%bbentry --> L3%19%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>1:31 : Added correlation to the product-TFG foo.A1.B4.C1.D2 (d:6, s:0, sp: 14) and created a correlation entry...</MSG>
<MSG>1:31 : Chose (after CE propagation) product-TFG foo.A1.B4.C1.D2 (d:6, s:0, sp: 14) from a frontier of size 3...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%19%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%19%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry (C L3%19%bbentry => C L3%19%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 26 counterexamples (for correlating 7 bv exprs)
            L3%19%bbentry_Lfor.cond1%1%bbentry (C L3%19%bbentry, A (line 4 at column 28))
                L3%19%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 30 counterexamples (for correlating 12 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%19%bbentry=>L3%19%bbentry[mu 1, delta {1,0}]
<MSG>1:31 : foo.A1.B4.C1.D2: Updating invariants over the newly added edges in edge composition L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>1:31 : Constructed infer_invariants_dfa with initial worklist L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>1:31 : foo.A1.B4.C1.D2: Relaxing dst graph's memlabels for edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>1:31 : foo.A1.B4.C1.D2: Done relaxing dst graph's memlabels for edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>1:31 : foo.A1.B4.C1.D2: Checking well-formedness assertions on outgoing edges from L3%19%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>1:31 : foo.A1.B4.C1.D2: Relaxing invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>1:31 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:31 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:31 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 12 exprs and 10 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:38 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht8-prove_trivial4-prove8...</MSG>
<MSG>1:38 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:40 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht3-prove_trivial2-prove3...</MSG>
<MSG>1:40 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:40 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove1...</MSG>
<MSG>1:40 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:40 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:40 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:40 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:40 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:40 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:40 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:40 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>1:40 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 7 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:43 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht5-prove_trivial2-prove3...</MSG>
<MSG>1:43 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 13 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:43 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht5-prove_trivial5-prove3...</MSG>
<MSG>1:43 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:43 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:43 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:43 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:43 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 12 exprs and 13 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:44 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht6-prove_trivial4-prove6...</MSG>
<MSG>1:44 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:44 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove2...</MSG>
<MSG>1:44 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:44 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove1...</MSG>
<MSG>1:44 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:44 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:44 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:44 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:44 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:44 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:44 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:44 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>1:44 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 8 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:46 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht4-prove_trivial2-prove2...</MSG>
<MSG>1:46 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 13 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:46 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht5-prove_trivial5-prove3...</MSG>
<MSG>1:46 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:46 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:46 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:46 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:46 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 12 exprs and 13 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:47 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht6-prove_trivial4-prove6...</MSG>
<MSG>1:47 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:47 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove2...</MSG>
<MSG>1:47 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:48 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove1...</MSG>
<MSG>1:48 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:48 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:48 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:48 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:48 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:48 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:48 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:48 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>1:48 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 9 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:48 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial2-prove1...</MSG>
<MSG>1:48 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 13 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:48 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht5-prove_trivial5-prove3...</MSG>
<MSG>1:48 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:48 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:48 : foo.A1.B4.C1.D2: Done relaxing invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: changed ...</MSG>
<MSG>1:48 : foo.A1.B4.C1.D2: Done relaxing memlabels and invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>1:48 : foo.A1.B4.C1.D2: Relaxing dst graph's memlabels for edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>1:48 : foo.A1.B4.C1.D2: Done relaxing dst graph's memlabels for edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>1:48 : foo.A1.B4.C1.D2: Checking well-formedness assertions on outgoing edges from L3%19%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>1:48 : foo.A1.B4.C1.D2: Relaxing invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>1:48 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:48 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:48 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 12 exprs and 13 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:48 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht6-prove_trivial4-prove6...</MSG>
<MSG>1:48 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:48 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove2...</MSG>
<MSG>1:48 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:48 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove1...</MSG>
<MSG>1:48 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:48 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:48 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:48 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:48 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:48 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:48 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:48 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>1:48 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 9 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:48 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial2-prove1...</MSG>
<MSG>1:48 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 13 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:49 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht5-prove_trivial5-prove3...</MSG>
<MSG>1:49 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:49 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:49 : foo.A1.B4.C1.D2: Done relaxing invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>1:49 : foo.A1.B4.C1.D2: Done relaxing memlabels and invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>1:49 : foo.A1.B4.C1.D2: Relaxing dst graph's memlabels for edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>1:49 : foo.A1.B4.C1.D2: Done relaxing dst graph's memlabels for edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>1:49 : foo.A1.B4.C1.D2: Checking well-formedness assertions on outgoing edges from L3%19%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>1:49 : foo.A1.B4.C1.D2: Relaxing invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>1:49 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:49 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:49 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 9 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:50 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht4-prove_trivial2-prove2...</MSG>
<MSG>1:50 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:50 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:50 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:50 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:50 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:50 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:50 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:50 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:50 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:50 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:50 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:50 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:50 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:50 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:50 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:50 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:50 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 10 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:50 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial2-prove1...</MSG>
<MSG>1:50 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:50 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:50 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:50 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:50 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:50 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:50 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:50 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:50 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:50 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:50 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:50 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:50 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:50 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:50 : foo.A1.B4.C1.D2: Done relaxing invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>1:50 : foo.A1.B4.C1.D2: Done relaxing memlabels and invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>1:50 : foo.A1.B4.C1.D2: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>1:50 : foo.A1.B4.C1.D2: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>1:50 : foo.A1.B4.C1.D2: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>1:50 : foo.A1.B4.C1.D2: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>1:50 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:50 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:50 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 12 exprs and 13 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:51 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht6-prove_trivial4-prove2...</MSG>
<MSG>1:51 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:51 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:51 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:51 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:51 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:51 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:51 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:51 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:51 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:51 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:51 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:51 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:51 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 9 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:51 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial2-prove1...</MSG>
<MSG>1:51 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 13 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:51 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht5-prove_trivial2-prove3...</MSG>
<MSG>1:51 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:51 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:51 : foo.A1.B4.C1.D2: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>1:51 : foo.A1.B4.C1.D2: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>1:51 : foo.A1.B4.C1.D2: Relaxing dst graph's memlabels for edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>1:51 : foo.A1.B4.C1.D2: Done relaxing dst graph's memlabels for edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>1:51 : foo.A1.B4.C1.D2: Checking well-formedness assertions on outgoing edges from L3%19%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>1:51 : foo.A1.B4.C1.D2: Relaxing invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>1:51 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:51 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:51 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 10 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:51 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial2-prove1...</MSG>
<MSG>1:51 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:51 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:51 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:51 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:51 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:51 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:51 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:51 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:51 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:51 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:51 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:51 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:51 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:51 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:51 : foo.A1.B4.C1.D2: Done relaxing invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged ...</MSG>
<MSG>1:51 : foo.A1.B4.C1.D2: Done relaxing memlabels and invariants across the edge composition (L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>1:51 : foo.A1.B4.C1.D2 (d:6, s:0, sp: 14): checked newly added edge and inferred invariants...</MSG>
<MSG>1:51 : foo.A1.B4.C1.D2 (d:6, s:0, sp: 14): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>1:52 : product-TFG foo.A1.B4.C1.D2: Enumerating correlations for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] starting at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>1:52 : Considering 1 paths to src pc E0%0%d as correlation candidates for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>1:52 : Attempting correlation of src pathset L3%7%bbentry=>E0%0%d[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>1:52 : Found 1 feasible correlations for paths to src pc E0%0%d as correlation candidates for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>1:52 : product-TFG foo.A1.B4.C1.D2: Found 1 correlations for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] starting at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>1:52 : product-TFG foo.A1.B4.C1.D2 created 1 possibilities in group foo.A1.B4.C1.D2.E...</MSG>
<MSG>1:52 : Chose (for CE propagation) product-TFG foo.A1.B4.C1.D2.E1 (d:6, s:0, sp: 14) from a frontier of size 3...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%19%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%19%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry (C L3%19%bbentry => C L3%19%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 30 counterexamples (for correlating 7 bv exprs)
            L3%19%bbentry_Lfor.cond1%1%bbentry (C L3%19%bbentry, A (line 4 at column 28))
                L3%19%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 42 counterexamples (for correlating 12 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>E0%0%d[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>1:52 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B4.C1.D2.E1...</MSG>
<MSG>1:52 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B4.C1.D2.E1...</MSG>
<MSG>1:52 : Creating ssa-path for the src-tfg path L3%7%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>1:52 : Adding a CG edge composition using the src path L3%7%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
<MSG>1:52 : Identifying common alloc-deallocs in the src path L3%7%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d
</MSG>
<MSG>1:52 : Identified no common alloc-deallocs in the src path L3%7%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
<MSG>1:52 : Adding new edge to the product-TFG foo.A1.B4.C1.D2.E1 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC E0%0%d_E0%0%d, src path L3%7%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d...</MSG>
<MSG>1:52 : foo.A1.B4.C1.D2.E1: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>1:52 : foo.A1.B4.C1.D2.E1: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>1:52 : foo.A1.B4.C1.D2.E1: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>1:52 : foo.A1.B4.C1.D2.E1: Getting alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>1:52 : foo.A1.B4.C1.D2.E1: Found no alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>1:52 : foo.A1.B4.C1.D2.E1: Adding edge L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>1:52 : foo.A1.B4.C1.D2.E1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>1:52 : foo.A1.B4.C1.D2.E1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>1:52 : foo.A1.B4.C1.D2.E1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>1:54 : foo.A1.B4.C1.D2.E1: Propagated 14 out of 21 counter-examples across edge L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d</MSG>
<MSG>1:54 : foo.A1.B4.C1.D2.E1: Added the 14 propagated CEs at PC E0%0%d_E0%0%d and propagated further.
</MSG>
<MSG>1:54 : foo.A1.B4.C1.D2.E1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>1:54 : foo.A1.B4.C1.D2.E1: Finished executing CG's add edge function...</MSG>
<MSG>1:54 : foo.A1.B4.C1.D2.E1: Computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>1:54 : foo.A1.B4.C1.D2.E1: Done computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>1:54 : Done adding new edge to the product-TFG foo.A1.B4.C1.D2.E1 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC E0%0%d_E0%0%d, src path L3%7%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d...</MSG>
<MSG>1:54 : Done adding a CG edge composition using the src path L3%7%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
<MSG>1:54 : Added correlation to the product-TFG foo.A1.B4.C1.D2.E1 (d:6, s:0, sp: 14) and created a correlation entry...</MSG>
<MSG>1:54 : Chose (after CE propagation) product-TFG foo.A1.B4.C1.D2.E1 (d:6, s:0, sp: 14) from a frontier of size 3...</MSG>
<cg>
  Edges[5]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%19%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%19%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry (C L3%19%bbentry => C L3%19%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%7%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 3 at column 26) => A E0%0%d at mu 1 delta {1,0})
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 30 counterexamples (for correlating 7 bv exprs)
            L3%19%bbentry_Lfor.cond1%1%bbentry (C L3%19%bbentry, A (line 4 at column 28))
                L3%19%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 42 counterexamples (for correlating 12 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 11 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>E0%0%d[mu 1, delta {1,0}]
<MSG>1:54 : foo.A1.B4.C1.D2.E1: Updating invariants over the newly added edges in edge composition L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d and other downstream edges that change due to it...</MSG>
<MSG>1:54 : Constructed infer_invariants_dfa with initial worklist L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>1:54 : foo.A1.B4.C1.D2.E1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d) ...</MSG>
<MSG>1:54 : foo.A1.B4.C1.D2.E1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d), result: unchanged</MSG>
<MSG>1:54 : foo.A1.B4.C1.D2.E1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>1:54 : foo.A1.B4.C1.D2.E1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d), result: unchanged( 0, 0 ) ...</MSG>
<MSG>1:54 : foo.A1.B4.C1.D2.E1 (d:6, s:0, sp: 14): checked newly added edge and inferred invariants...</MSG>
<MSG>1:54 : foo.A1.B4.C1.D2.E1 (d:6, s:0, sp: 14): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>1:54 : Chosen product-TFG represents our required correlation graph...</MSG>
<MSG>1:54 : Checking equivalence proof...</MSG>
<MSG>1:56 : Equivalence check passed: product CFG has strong enough inductive invariants...</MSG>
CG invariants =
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%7%bbentry_Lfor.cond%1%bbentry: (d:3, s:0, sp: 5)
  Invariant state (9 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-i-0.L3%7%bbentry ; 3-->input.spec-%var-ret-1.L3%7%bbentry ; 4-->input.dst.llvm-%m ; 5-->input.dst.llvm-%n ; 6-->input.dst.llvm-%x ; 7-->input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvneg(bvmul(4294967295, input.spec-%var-i-0.L3%7%bbentry))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(4294967295, input.spec-%var-ret-1.L3%7%bbentry))  ==  input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%x, 1, 0)
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3.ce3      1.:z3.ce64      2.:z3v487.ce87      3.:z3.ce28      4.:z3v487.ce27      5.:z3v487.ce51      6.:z3v487.ce63      7.:z3.ce111      8.:z3v487.ce2987      9.:z3.ce4511
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%7%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce3      1.:z3v487.ce2987      2.:z3v487.ce3350      3.:z3v487.ce3254      4.:z3v487.ce3446      5.:z3v487.ce3542      6.:z3v487.ce3665
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3v487.ce27      2.:z3.ce135      3.:z3v487.ce159
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%m, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%m ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce64      2.:z3v487.ce159      3.:z3.ce183
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce3      1.:z3v487.ce2987      2.:z3v487.ce3350      3.:z3v487.ce3254      4.:z3v487.ce3446      5.:z3v487.ce3542      6.:z3v487.ce3665
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [24]: 9-->bvslt(input.dst.llvm-%m, input.dst.llvm-%n) ; 10-->bvult(input.dst.llvm-%m, input.dst.llvm-%n) ; 11-->bvslt(input.dst.llvm-%n, input.dst.llvm-%m) ; 12-->bvult(input.dst.llvm-%n, input.dst.llvm-%m) ; 13-->bvsle(input.dst.llvm-%m, input.dst.llvm-%n) ; 14-->bvule(input.dst.llvm-%m, input.dst.llvm-%n) ; 15-->bvsle(input.dst.llvm-%n, input.dst.llvm-%m) ; 16-->bvule(input.dst.llvm-%n, input.dst.llvm-%m) ; 17-->bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 18-->bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 19-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m) ; 20-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m) ; 21-->bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 22-->bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 23-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m) ; 24-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m) ; 25-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 26-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 27-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 28-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 29-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 30-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 31-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 32-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3.ce3      1.:z3.ce64      2.:z3v487.ce27      3.:z3.ce135      4.:z3v487.ce159      5.:z3v487.ce2987
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [6]: 33-->140995 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141066](input.spec-%var-x-1, map[141065](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141064](Lambda0Var, map[141063](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141062](Lambda1Var, select[141061](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140995, bvadd[141060](bvmul(Lambda1Var, 4), select[141059](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140995, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 34-->140995 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141737](input.spec-%var-x-0.L3%7%bbentry, map[141065](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141064](Lambda0Var, map[141063](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141062](Lambda1Var, select[141061](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140995, bvadd[141060](bvmul(Lambda1Var, 4), select[141059](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140995, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 35-->140995 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141744](input.spec-%var-x-0.L3%7%bbentry, map[141743](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141742](Lambda0Var, map[141741](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%n))), lambda[141062](Lambda1Var, select[141061](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140995, bvadd[141060](bvmul(Lambda1Var, 4), select[141059](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140995, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 36-->140995 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141751](input.spec-%var-x-0.L3%7%bbentry, map[141750](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141749](Lambda0Var, map[141748](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%x))), lambda[141062](Lambda1Var, select[141061](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140995, bvadd[141060](bvmul(Lambda1Var, 4), select[141059](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140995, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 37-->140995 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141758](input.spec-%var-x-0.L3%7%bbentry, map[141757](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141756](Lambda0Var, map[141755](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%ret.0.Lfor.cond%1%bbentry))), lambda[141062](Lambda1Var, select[141061](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140995, bvadd[141060](bvmul(Lambda1Var, 4), select[141059](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140995, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 38-->140995 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141765](input.spec-%var-x-0.L3%7%bbentry, map[141764](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141763](Lambda0Var, map[141762](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda[141062](Lambda1Var, select[141061](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140995, bvadd[141060](bvmul(Lambda1Var, 4), select[141059](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140995, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 
    2 preds:
      0.: 140995 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141737](input.spec-%var-x-0.L3%7%bbentry, map[141065](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141064](Lambda0Var, map[141063](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141062](Lambda1Var, select[141061](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140995, bvadd[141060](bvmul(Lambda1Var, 4), select[141059](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140995, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false))))))  ==  true
      1.: 140995 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141066](input.spec-%var-x-1, map[141065](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141064](Lambda0Var, map[141063](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141062](Lambda1Var, select[141061](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140995, bvadd[141060](bvmul(Lambda1Var, 4), select[141059](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140995, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false))))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 8:
    smallest point cover name local-sizes-are-equal, type HOUDINI, exprs [0]: 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3

L3%19%bbentry_Lfor.cond1%1%bbentry: (d:3, s:0, sp: 9)
  Invariant state (11 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce27
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [12]: 2-->input.spec-%var-i-0.L3%7%bbentry ; 3-->input.spec-%var-ret-1.L3%7%bbentry ; 4-->input.dst.llvm-%m ; 5-->input.dst.llvm-%n ; 6-->input.dst.llvm-%x ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 39-->input.spec-%var-j-0.L3%19%bbentry ; 40-->input.spec-%var-ret-0.L3%19%bbentry ; 41-->input.spec-%tmpvar-9.L3%19%bbentry ; 42-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 43-->input.dst.llvm-%j.0.Lfor.cond1%1%bbentry ; 44-->input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry ; 
    6 preds:
      0.: bvneg(bvmul(4294967295, input.spec-%var-ret-0.L3%19%bbentry))  ==  input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
      1.: bvneg(bvmul(4294967295, input.spec-%var-j-0.L3%19%bbentry))  ==  input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
      2.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      3.: bvadd(1, bvneg(bvmul(4294967295, input.spec-%var-i-0.L3%7%bbentry)))  ==  input.spec-%tmpvar-9.L3%19%bbentry
      4.: bvneg(bvmul(4294967295, input.spec-%var-i-0.L3%7%bbentry))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      5.: 0                     ==  bvextract(input.dst.llvm-%x, 1, 0)
     is_assumed_eqclass : 0
    13 visited ces:
      0.:z3.ce28      1.:z3v487.ce27      2.:z3v487.ce51      3.:z3v487.ce159      4.:z3.ce1740      5.:z3v487.ce1739      6.:z3v487.ce3053      7.:z3v487.ce3863      8.:z3.ce3741      9.:z3.ce3950      10.:z3.ce4143      11.:z3.ce4067      12.:z3.ce4179
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 39-->input.spec-%var-j-0.L3%19%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-j-0.L3%19%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-j-0.L3%19%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce27      1.:z3v487.ce3863      2.:z3v487.ce4144      3.:z3.ce4266
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 41-->input.spec-%tmpvar-9.L3%19%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%tmpvar-9.L3%19%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3v487.ce27      1.:z3v487.ce3053      2.:z3v487.ce3300      3.:z3.ce3396      4.:z3.ce3492      5.:z3.ce3588
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce27      1.:z3v487.ce51      2.:z3.ce135      3.:z3v487.ce159
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%m, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%m ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce27      1.:z3v487.ce159      2.:z3.ce338      3.:z3.ce1779
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3v487.ce27      1.:z3v487.ce3088      2.:z3v487.ce3053      3.:z3.ce3396      4.:z3.ce3492      5.:z3.ce3588      6.:z3.ce3638
    eqclass 7:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, type BV_CONST_INEQ, exprs [1]: 43-->input.dst.llvm-%j.0.Lfor.cond1%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce27      1.:z3v487.ce3863      2.:z3v487.ce4144      3.:z3.ce4266
    eqclass 8:
    smallest point cover name dst-ineq, type HOUDINI, exprs [48]: 9-->bvslt(input.dst.llvm-%m, input.dst.llvm-%n) ; 10-->bvult(input.dst.llvm-%m, input.dst.llvm-%n) ; 11-->bvslt(input.dst.llvm-%n, input.dst.llvm-%m) ; 12-->bvult(input.dst.llvm-%n, input.dst.llvm-%m) ; 13-->bvsle(input.dst.llvm-%m, input.dst.llvm-%n) ; 14-->bvule(input.dst.llvm-%m, input.dst.llvm-%n) ; 15-->bvsle(input.dst.llvm-%n, input.dst.llvm-%m) ; 16-->bvule(input.dst.llvm-%n, input.dst.llvm-%m) ; 17-->bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 18-->bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 19-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m) ; 20-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m) ; 21-->bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 22-->bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 23-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m) ; 24-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m) ; 25-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 26-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 27-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 28-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 29-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 30-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 31-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 32-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 45-->bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 46-->bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 47-->bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m) ; 48-->bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m) ; 49-->bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 50-->bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 51-->bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m) ; 52-->bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m) ; 53-->bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 54-->bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 55-->bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n) ; 56-->bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n) ; 57-->bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 58-->bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 59-->bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n) ; 60-->bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n) ; 61-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 62-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 63-->bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 64-->bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 65-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 66-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 67-->bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 68-->bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    3 preds:
      0.: bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)  ==  true
      1.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
      2.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3v487.ce27      1.:z3.ce135      2.:z3v487.ce159      3.:z3.ce338      4.:z3v487.ce3053      5.:z3.ce3588      6.:z3v487.ce3863      7.:z3.ce4342      8.:z3.ce4418
    eqclass 9:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 33-->140995 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141066](input.spec-%var-x-1, map[141065](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141064](Lambda0Var, map[141063](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141062](Lambda1Var, select[141061](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140995, bvadd[141060](bvmul(Lambda1Var, 4), select[141059](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140995, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 34-->140995 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141737](input.spec-%var-x-0.L3%7%bbentry, map[141065](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141064](Lambda0Var, map[141063](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141062](Lambda1Var, select[141061](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140995, bvadd[141060](bvmul(Lambda1Var, 4), select[141059](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140995, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 35-->140995 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141744](input.spec-%var-x-0.L3%7%bbentry, map[141743](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141742](Lambda0Var, map[141741](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%n))), lambda[141062](Lambda1Var, select[141061](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140995, bvadd[141060](bvmul(Lambda1Var, 4), select[141059](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140995, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 36-->140995 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141751](input.spec-%var-x-0.L3%7%bbentry, map[141750](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141749](Lambda0Var, map[141748](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%x))), lambda[141062](Lambda1Var, select[141061](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140995, bvadd[141060](bvmul(Lambda1Var, 4), select[141059](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140995, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 38-->140995 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141765](input.spec-%var-x-0.L3%7%bbentry, map[141764](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141763](Lambda0Var, map[141762](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda[141062](Lambda1Var, select[141061](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140995, bvadd[141060](bvmul(Lambda1Var, 4), select[141059](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140995, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 69-->140995 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[149701](input.spec-%var-x-1, map[141750](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141749](Lambda0Var, map[141748](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%x))), lambda[141062](Lambda1Var, select[141061](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140995, bvadd[141060](bvmul(Lambda1Var, 4), select[141059](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140995, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 70-->140995 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[152924](input.spec-%var-x-1, map[141743](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141742](Lambda0Var, map[141741](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%n))), lambda[141062](Lambda1Var, select[141061](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140995, bvadd[141060](bvmul(Lambda1Var, 4), select[141059](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140995, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 71-->140995 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[159996](input.spec-%var-x-1, map[159991](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[159990](Lambda0Var, map[159989](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry))), lambda[141062](Lambda1Var, select[141061](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140995, bvadd[141060](bvmul(Lambda1Var, 4), select[141059](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140995, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 72-->140995 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[159995](input.spec-%var-x-1, map[141764](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141763](Lambda0Var, map[141762](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda[141062](Lambda1Var, select[141061](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140995, bvadd[141060](bvmul(Lambda1Var, 4), select[141059](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140995, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 73-->140995 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[159994](input.spec-%tmpvar-7.L3%8%d, map_get[159993](map[141065](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141064](Lambda0Var, map[141063](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141062](Lambda1Var, select[141061](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140995, bvadd[141060](bvmul(Lambda1Var, 4), select[141059](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140995, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false))))), input.spec-%var-i-0.L3%7%bbentry)) ; 74-->140995 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[159992](input.spec-%var-x-0.L3%7%bbentry, map[159991](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[159990](Lambda0Var, map[159989](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry))), lambda[141062](Lambda1Var, select[141061](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140995, bvadd[141060](bvmul(Lambda1Var, 4), select[141059](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140995, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 75-->140995 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[160056](input.spec-%var-x_i-0.L3%19%bbentry, sum_get[160055](map_get[159993](map[141065](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141064](Lambda0Var, map[141063](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141062](Lambda1Var, select[141061](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140995, bvadd[141060](bvmul(Lambda1Var, 4), select[141059](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140995, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false))))), input.spec-%var-i-0.L3%7%bbentry), 1)) ; 76-->140995 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[160058](input.spec-%var-x_i-1.L3%19%bbentry, sum_get[160055](map_get[159993](map[141065](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141064](Lambda0Var, map[141063](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141062](Lambda1Var, select[141061](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140995, bvadd[141060](bvmul(Lambda1Var, 4), select[141059](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140995, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false))))), input.spec-%var-i-0.L3%7%bbentry), 1)) ; 
    5 preds:
      0.: 140995 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141737](input.spec-%var-x-0.L3%7%bbentry, map[141065](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141064](Lambda0Var, map[141063](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141062](Lambda1Var, select[141061](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140995, bvadd[141060](bvmul(Lambda1Var, 4), select[141059](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140995, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false))))))  ==  true
      1.: 140995 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141066](input.spec-%var-x-1, map[141065](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141064](Lambda0Var, map[141063](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141062](Lambda1Var, select[141061](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140995, bvadd[141060](bvmul(Lambda1Var, 4), select[141059](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140995, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false))))))  ==  true
      2.: 140995 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[160058](input.spec-%var-x_i-1.L3%19%bbentry, sum_get[160055](map_get[159993](map[141065](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141064](Lambda0Var, map[141063](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141062](Lambda1Var, select[141061](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140995, bvadd[141060](bvmul(Lambda1Var, 4), select[141059](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140995, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false))))), input.spec-%var-i-0.L3%7%bbentry), 1))  ==  true
      3.: 140995 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[160056](input.spec-%var-x_i-0.L3%19%bbentry, sum_get[160055](map_get[159993](map[141065](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141064](Lambda0Var, map[141063](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141062](Lambda1Var, select[141061](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140995, bvadd[141060](bvmul(Lambda1Var, 4), select[141059](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140995, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false))))), input.spec-%var-i-0.L3%7%bbentry), 1))  ==  true
      4.: 140995 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[159994](input.spec-%tmpvar-7.L3%8%d, map_get[159993](map[141065](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141064](Lambda0Var, map[141063](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141062](Lambda1Var, select[141061](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140995, bvadd[141060](bvmul(Lambda1Var, 4), select[141059](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140995, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false))))), input.spec-%var-i-0.L3%7%bbentry))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce27
    eqclass 10:
    smallest point cover name local-sizes-are-equal, type HOUDINI, exprs [0]: 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce27

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


Found equivalence proof. Final CG:
<cg>
  Edges[5]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%19%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%19%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry (C L3%19%bbentry => C L3%19%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%7%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 3 at column 26) => A E0%0%d at mu 1 delta {1,0})
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 30 counterexamples (for correlating 7 bv exprs)
            L3%19%bbentry_Lfor.cond1%1%bbentry (C L3%19%bbentry, A (line 4 at column 28))
                L3%19%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 42 counterexamples (for correlating 12 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 11 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
EQUIV equivalence check for function foo. 94.02s, query:smt.: 23.5444s (num_starts 291; 0.0809s/start), decide_hoare_triple.ce.: 0s (num_starts 0; -nans/start), decide_hoare_triple_helper.: 54.8381s (num_starts 1037; 0.0529s/start)ftmap_run_pointsto_analysis.: 0.471082s (num_starts 2; 0.2355s/start)

Printing statistics:

timers:
decide_hoare_triple.ce.: 0s (num_starts 0; -nans/start)
compute_loop_hoisting_non_linear_exprs_at_pcpair.: 7e-06s (num_starts 8; 0.0000s/start)
compute_tfg_pred_eqclass.: 1.7e-05s (num_starts 7; 0.0000s/start)
update_dst_edge_for_local_allocations_and_deallocations.: 1.7e-05s (num_starts 13; 0.0000s/start)
invariant_inference_xfer.local-sizes-are-equal.from.L0%0%d_L0%0%d.: 1.9e-05s (num_starts 2; 0.0000s/start)
cg_compute_well_formedness_conditions_for_stack_pointer.: 2.3e-05s (num_starts 13; 0.0000s/start)
invariant_inference_xfer.local-sizes-are-equal.from.L3%11%bbentry_Lfor.cond1%1%bbentry.: 2.9e-05s (num_starts 3; 0.0000s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%11%bbentry_Lfor.cond1%1%bbentry.: 3e-05s (num_starts 3; 0.0000s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%11%bbentry_Lfor.cond1%1%bbentry.: 3e-05s (num_starts 3; 0.0000s/start)
get_paths_with_matching_to_pc.: 3.3e-05s (num_starts 13; 0.0000s/start)
prune_dst_memslots.: 3.7e-05s (num_starts 7; 0.0000s/start)
check_wfconds_on_edge.L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry.: 4e-05s (num_starts 1; 0.0000s/start)
corr_graph_update_dst_to_src_submaps_for_cg_edge.: 4e-05s (num_starts 45; 0.0000s/start)
get_intersected_lr_status.: 4.9e-05s (num_starts 2; 0.0000s/start)
alias_val_t::constructor_with_map_arg.: 7.6e-05s (num_starts 101; 0.0000s/start)
determinize_value_expr_map.: 8.6e-05s (num_starts 33; 0.0000s/start)
corr_graph_add_correlation_and_create_new_correl_entry.after_corr_graph_add_correlation.: 8.7e-05s (num_starts 8; 0.0000s/start)
tfg::populate_loc_definedness.set_loc_definedness().: 9.9e-05s (num_starts 3; 0.0000s/start)
graph_edge_contains_unknown_function_call.: 0.000107s (num_starts 95; 0.0000s/start)
check_wfconds_on_edge.L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry.: 0.000126s (num_starts 3; 0.0000s/start)
select_llvmvars_not_defined_on_from_pc_and_add_to_dst.: 0.000133s (num_starts 7; 0.0000s/start)
ce_perform_memory_fuzzing.: 0.00014s (num_starts 166; 0.0000s/start)
remove_complex_bv_exprs.: 0.000143s (num_starts 7; 0.0000s/start)
get_lr_status_for_loc_ids.: 0.000149s (num_starts 60; 0.0000s/start)
populate_lr_status_for_sprel_locs_map.calling.compute_lr_status_for_expr.: 0.000179s (num_starts 11; 0.0000s/start)
src_tfg_counter_example_translate_on_edge_composition.delta{0,0}.: 0.000182s (num_starts 54; 0.0000s/start)
invariant_inference_xfer.local-sizes-are-equal.from.L3%19%bbentry_Lfor.cond1%1%bbentry.: 0.00022s (num_starts 17; 0.0000s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%19%bbentry_Lfor.cond1%1%bbentry.: 0.000222s (num_starts 17; 0.0000s/start)
tfg::populate_loc_definedness.post_dfa.: 0.000235s (num_starts 3; 0.0001s/start)
compute_sprel_relations.: 0.000247s (num_starts 2; 0.0001s/start)
propagate_sprels.: 0.00027s (num_starts 2; 0.0001s/start)
populate_locid2expr_map.: 0.000282s (num_starts 2; 0.0001s/start)
invariant_inference_xfer.local-sizes-are-equal.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 0.000291s (num_starts 18; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.post_dfa.: 0.000295s (num_starts 1; 0.0003s/start)
graph_locs_add_exvregs_for_edge.: 0.000342s (num_starts 22; 0.0000s/start)
graph_locs_add_all_exvregs.: 0.000359s (num_starts 2; 0.0002s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon);-trivial.: 0.000369s (num_starts 1; 0.0004s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities.;-trivial.: 0.000369s (num_starts 1; 0.0004s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.00037s (num_starts 1; 0.0004s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.00037s (num_starts 1; 0.0004s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities..: 0.000372s (num_starts 1; 0.0004s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;outgoing_edges_cover_all_possibilities.;-trivial.: 0.000372s (num_starts 1; 0.0004s/start)
lr_status_meet.: 0.000372s (num_starts 506; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities..: 0.000389s (num_starts 1; 0.0004s/start)
select_llvmvars_live_at_pc_and_add_to_dst.: 0.000431s (num_starts 7; 0.0001s/start)
expr_is_hidden_reg.: 0.000457s (num_starts 569; 0.0000s/start)
graph_locs_add_local_vars_for_edge.: 0.000477s (num_starts 22; 0.0000s/start)
graph_locs_add_all_local_vars.: 0.000494s (num_starts 2; 0.0002s/start)
tfg_llvm_t::tfg_llvm_fill_remaining_llvm_to_source_mappings_using_avail_exprs.: 0.0005s (num_starts 1; 0.0005s/start)
sp_version_relations_val_t::meet.: 0.000502s (num_starts 1044; 0.0000s/start)
corr_graph_generate_local_sprel_expr_guesses_for_locals.: 0.000532s (num_starts 16; 0.0000s/start)
get_sprel_map_pair.: 0.000553s (num_starts 60; 0.0000s/start)
expr_is_callee_save_const.: 0.000559s (num_starts 581; 0.0000s/start)
def_analysis::xfer_and_meet.: 0.00056s (num_starts 33; 0.0000s/start)
prove_trivial.: 0.000572s (num_starts 591; 0.0000s/start)
populate_dominator_and_postdominator_relations.: 0.000654s (num_starts 2; 0.0003s/start)
tfg::collect_assumes_around_edge.: 0.000681s (num_starts 55; 0.0000s/start)
expr_simplify_using_sprel_and_memlabel_maps.sprel.: 0.001014s (num_starts 137; 0.0000s/start)
graph_locs_add_all_llvmvars.: 0.001115s (num_starts 2; 0.0006s/start)
populate_simplified_to_state.: 0.001169s (num_starts 3; 0.0004s/start)
sort_exprs_and_compute_bv_eqclass.: 0.001198s (num_starts 7; 0.0002s/start)
compute_bv_bool_eqclass.: 0.001258s (num_starts 7; 0.0002s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.bvcover_weaken_till_arity_within_bound.: 0.001308s (num_starts 200; 0.0000s/start)
graph_ec_apply_trans_funs_helper.1.: 0.001352s (num_starts 9; 0.0002s/start)
graph_locs_add_all_specvars.: 0.001381s (num_starts 2; 0.0007s/start)
sp_version_relations_val_t::compute_transitive_closure.: 0.001387s (num_starts 138; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_varname_lr_status.: 0.001394s (num_starts 1; 0.0014s/start)
pred_lhs_rhs_convert_memmask_to_select_for_symbols_and_locals.: 0.001598s (num_starts 1087; 0.0000s/start)
get_path_wp_exprs_for_cg_invariant_inference.computeWP_for_pred_across_ec.: 0.001603s (num_starts 9; 0.0002s/start)
interesting_wp_exprs_apply_trans_funs.: 0.00166s (num_starts 9; 0.0002s/start)
rdefs_locs_ssa_analysis::xfer_and_meet.: 0.00177s (num_starts 23; 0.0001s/start)
pth_collect_preds_using_atom_func_and_wp_fn.operator().graph_ec_apply_trans_funs_using_wp_fn.: 0.001833s (num_starts 11; 0.0002s/start)
parse_yices_model.: 0.001939s (num_starts 1; 0.0019s/start)
identify_address_taken_local_variables.: 0.002073s (num_starts 1; 0.0021s/start)
tfg::populate_loc_definedness.before_solve.: 0.002112s (num_starts 3; 0.0007s/start)
collect_dst_to_src_submap_preds.: 0.002166s (num_starts 1037; 0.0000s/start)
generate_region_agrees_with_memlabel_constraints_from_expr.: 0.002195s (num_starts 360; 0.0000s/start)
get_path_wp_exprs_for_cg_invariant_inference.: 0.002223s (num_starts 7; 0.0003s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_expr_is_provable.: 0.002247s (num_starts 496; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.002422s (num_starts 1; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.002424s (num_starts 1; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.002425s (num_starts 1; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.002429s (num_starts 1; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;abstract-memlabel-asserts-houdini-guess.: 0.002431s (num_starts 1; 0.0024s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.002437s (num_starts 1; 0.0024s/start)
parse_cvc4_model.: 0.002439s (num_starts 1; 0.0024s/start)
ssa_vars_renaming_analysis::xfer_and_meet.: 0.002506s (num_starts 46; 0.0001s/start)
tfg::populate_loc_definedness.before_initialize.: 0.002535s (num_starts 3; 0.0008s/start)
graph_get_reduced_graph_with_anchor_nodes_only.: 0.002585s (num_starts 11; 0.0002s/start)
tfg::populate_loc_definedness.: 0.002673s (num_starts 3; 0.0009s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_solve.: 0.002719s (num_starts 1; 0.0027s/start)
tfg_suffixpath_get_expr_helper.: 0.002769s (num_starts 20; 0.0001s/start)
expr_contains_only_constants_or_sp_versions_or_count_sort_vars.: 0.002772s (num_starts 1053; 0.0000s/start)
pth_collect_preds_using_atom_func.: 0.002803s (num_starts 97; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.002804s (num_starts 4; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;lb-signed;-trivial.: 0.002812s (num_starts 4; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.002813s (num_starts 4; 0.0007s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_initialize.: 0.002863s (num_starts 1; 0.0029s/start)
graph_apply_trans_funs_on_aliasing_constraints.mem_alloc.computeWP_for_pred_across_ec.: 0.00287s (num_starts 48; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.002912s (num_starts 2; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.002917s (num_starts 2; 0.0015s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.002945s (num_starts 4; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;ub-signed;-trivial.: 0.002955s (num_starts 4; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.002959s (num_starts 4; 0.0007s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.: 0.00296s (num_starts 1; 0.0030s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed.: 0.002971s (num_starts 4; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;ub-signed.: 0.002982s (num_starts 4; 0.0007s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed.: 0.003001s (num_starts 4; 0.0008s/start)
collect_assumes_around_edge.: 0.003051s (num_starts 13; 0.0002s/start)
create_closure_matrix.: 0.003053s (num_starts 192; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.003058s (num_starts 2; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.003065s (num_starts 1; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.003067s (num_starts 1; 0.0031s/start)
tfg_llvm_t::tfg_llvm_compute_pc_to_llvm_to_source_varname_map.: 0.003073s (num_starts 2; 0.0015s/start)
graph_add_location_slots_using_state_mem_acc_map.: 0.003098s (num_starts 69; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.003135s (num_starts 4; 0.0008s/start)
removeMostPromising.: 0.00314s (num_starts 36; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;ub-unsigned;-trivial.: 0.003145s (num_starts 4; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.003149s (num_starts 4; 0.0008s/start)
expr_represents_llvm_undef.: 0.003341s (num_starts 585; 0.0000s/start)
graph_apply_trans_funs_on_aliasing_constraints.guard_pred.computeWP_for_pred_across_ec.: 0.003389s (num_starts 48; 0.0001s/start)
sp_version_relations_val_t::generate_vals_from_gen_set.: 0.003432s (num_starts 168; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.003447s (num_starts 2; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;pred-type-unknown;-trivial.: 0.003451s (num_starts 2; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.003454s (num_starts 2; 0.0017s/start)
tfg_edge_composition_get_assumes.: 0.003539s (num_starts 97; 0.0000s/start)
populate_simplified_assets.: 0.003616s (num_starts 6; 0.0006s/start)
graph_visit_exprs.: 0.003633s (num_starts 3; 0.0012s/start)
graph_apply_trans_funs_on_aliasing_constraints.addr_pred.computeWP_for_pred_across_ec.: 0.003768s (num_starts 48; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.003918s (num_starts 1; 0.0039s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.003923s (num_starts 1; 0.0039s/start)
find_dominators.: 0.004017s (num_starts 48; 0.0001s/start)
get_uapprox_predicate_list_from_guarded_preds_and_graph_ec.: 0.004051s (num_starts 496; 0.0000s/start)
cg_with_asm_annotation::mark_graph_unstable.: 0.00413s (num_starts 5; 0.0008s/start)
aliasing_constraints.get_region_agrees_with_memlabel_preds.: 0.004238s (num_starts 7; 0.0006s/start)
compute_ssa_vars_renaming_map.: 0.00424s (num_starts 2; 0.0021s/start)
graph_identify_back_edges.: 0.004253s (num_starts 44; 0.0001s/start)
proof_query_is_trivial_helper.: 0.00427s (num_starts 1149; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.004289s (num_starts 3; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;lb-signed;-trivial.: 0.004298s (num_starts 3; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.004303s (num_starts 3; 0.0014s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-signed;-trivial.: 0.004398s (num_starts 3; 0.0015s/start)
aliasing_constraints.get_region_agrees_with_memlabel_exprs.: 0.004403s (num_starts 367; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;ub-signed;-trivial.: 0.004405s (num_starts 3; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-signed;-trivial.: 0.004407s (num_starts 3; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 0.004418s (num_starts 3; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;ub-signed.: 0.004426s (num_starts 3; 0.0015s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 0.00444s (num_starts 3; 0.0015s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.00452s (num_starts 3; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;ub-unsigned;-trivial.: 0.004526s (num_starts 3; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.004531s (num_starts 3; 0.0015s/start)
graph_visit_exprs_and_keys.: 0.004687s (num_starts 2; 0.0023s/start)
compute_region_agrees_with_memlabel_eqclass.: 0.004737s (num_starts 7; 0.0007s/start)
populate_branch_affecting_locs.: 0.004742s (num_starts 3; 0.0016s/start)
graph_identify_natural_loops.: 0.004759s (num_starts 44; 0.0001s/start)
expr_simplify_using_sprel_and_memlabel_maps.model.: 0.00509s (num_starts 137; 0.0000s/start)
invariant_inference_xfer.src-branches-const-ineq.from.L0%0%d_L0%0%d.: 0.005217s (num_starts 2; 0.0026s/start)
corr_graph_enumerate_correlations.: 0.005237s (num_starts 13; 0.0004s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.: 0.005238s (num_starts 2; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.005285s (num_starts 2; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.005294s (num_starts 2; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;ub-signed;-trivial.: 0.005391s (num_starts 2; 0.0027s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);ub-signed;-trivial.: 0.005393s (num_starts 2; 0.0027s/start)
collect_aliasing_constaints_starting_at_pc_till_maximal_bbs.: 0.005432s (num_starts 34; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.005542s (num_starts 1; 0.0055s/start)
tfg_edge_composition_get_edge_cond_using_econd_fn.: 0.005544s (num_starts 118; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.005547s (num_starts 1; 0.0055s/start)
set_result_and_counter_example.: 0.00569s (num_starts 291; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.005848s (num_starts 2; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.005856s (num_starts 2; 0.0029s/start)
get_maximal_basic_block_edge_list_starting_at_pc.: 0.006346s (num_starts 1140; 0.0000s/start)
populate_locs_potentially_modified_on_edge.: 0.006387s (num_starts 3; 0.0021s/start)
compute_interesting_exprs_for_invariant_inference_for_pc.: 0.006532s (num_starts 6; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.006568s (num_starts 2; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.006572s (num_starts 2; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.006579s (num_starts 2; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;abstract-memlabel-asserts-houdini-guess.: 0.006586s (num_starts 2; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;ub-unsigned;-trivial.: 0.006805s (num_starts 2; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.006814s (num_starts 2; 0.0034s/start)
expr_simplify_using_sprel_and_memlabel_maps.: 0.007352s (num_starts 137; 0.0001s/start)
aliasing_constraints.convert_to_expr.: 0.007569s (num_starts 496; 0.0000s/start)
rdefs_vars_ssa_analysis::xfer_and_meet.: 0.007647s (num_starts 48; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.008045s (num_starts 1; 0.0080s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.008051s (num_starts 1; 0.0081s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;lb-signed;-trivial.: 0.008388s (num_starts 6; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.008399s (num_starts 6; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.00842s (num_starts 6; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;lb-signed.: 0.008434s (num_starts 6; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;ub-signed;-trivial.: 0.008557s (num_starts 6; 0.0014s/start)
get_maximal_basic_block_edge_list_ending_at_pc.: 0.008557s (num_starts 1140; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);ub-signed;-trivial.: 0.008587s (num_starts 6; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 0.008608s (num_starts 6; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;ub-signed.: 0.008622s (num_starts 6; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;ub-unsigned;-trivial.: 0.008726s (num_starts 6; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.008735s (num_starts 6; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.008838s (num_starts 2; 0.0044s/start)
construct_linear_combination_exprs.: 0.009002s (num_starts 409; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.009128s (num_starts 2; 0.0046s/start)
compute_vars_reaching_definitions.: 0.009266s (num_starts 2; 0.0046s/start)
populate_transitive_closure.: 0.009715s (num_starts 59; 0.0002s/start)
generate_aliasing_constraints_from_expr.: 0.00976s (num_starts 2440; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.009838s (num_starts 7; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;linear;-trivial.: 0.009855s (num_starts 7; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.009861s (num_starts 7; 0.0014s/start)
populate_auxilliary_structures_dependent_on_locs.: 0.01002s (num_starts 3; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.010232s (num_starts 2; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.010236s (num_starts 2; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.010249s (num_starts 2; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;abstract-memlabel-asserts-houdini-guess.: 0.010263s (num_starts 2; 0.0051s/start)
populate_memlabel_map.visit1.calling.compute_lr_status_for_expr.: 0.010713s (num_starts 130; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;lb-signed;-trivial.: 0.011078s (num_starts 4; 0.0028s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.01109s (num_starts 4; 0.0028s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.011117s (num_starts 4; 0.0028s/start)
proof_query_is_trivial.: 0.011137s (num_starts 1087; 0.0000s/start)
expr_linear_relation_holds::visit.var.: 0.01148s (num_starts 585; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.012525s (num_starts 3; 0.0042s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.012746s (num_starts 4; 0.0032s/start)
expr_substitute_using_available_exprs_submap.: 0.012975s (num_starts 503; 0.0000s/start)
get_unrolled_loop_paths_from.: 0.013029s (num_starts 7; 0.0019s/start)
compute_regions.: 0.013179s (num_starts 44; 0.0003s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);-trivial.: 0.013326s (num_starts 1; 0.0133s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-trivial.: 0.013328s (num_starts 1; 0.0133s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-trivial.: 0.013333s (num_starts 1; 0.0133s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;-dst-edgecond-implies-src-edgecond;-trivial.: 0.013445s (num_starts 1; 0.0134s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.013448s (num_starts 1; 0.0134s/start)
segment_memory_and_perform_commonMEM_optimization.: 0.013476s (num_starts 496; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.013889s (num_starts 2; 0.0069s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.013899s (num_starts 2; 0.0069s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);ub-signed;-trivial.: 0.013929s (num_starts 8; 0.0017s/start)
ldr_decomposition.: 0.013999s (num_starts 200; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;-dst-edgecond-implies-src-edgecond;-trivial.: 0.014253s (num_starts 1; 0.0143s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.014256s (num_starts 1; 0.0143s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.014384s (num_starts 4; 0.0036s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.014752s (num_starts 1; 0.0148s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;lb-unsigned;-trivial.: 0.014757s (num_starts 1; 0.0148s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.014759s (num_starts 1; 0.0148s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);false-predicate;-trivial.: 0.014818s (num_starts 1; 0.0148s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;false-predicate;-trivial.: 0.014821s (num_starts 1; 0.0148s/start)
decide_hoare_triple_helper;per-query-type;false-predicate;-trivial.: 0.014821s (num_starts 1; 0.0148s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);false-predicate;-trivial.: 0.014823s (num_starts 1; 0.0148s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);false-predicate.: 0.014832s (num_starts 1; 0.0148s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;false-predicate.: 0.014835s (num_starts 1; 0.0148s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);false-predicate.: 0.014841s (num_starts 1; 0.0148s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.015031s (num_starts 1; 0.0150s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.015034s (num_starts 1; 0.0150s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.015039s (num_starts 1; 0.0150s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.015106s (num_starts 3; 0.0050s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.01512s (num_starts 3; 0.0050s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.015505s (num_starts 8; 0.0019s/start)
graph_with_guessing_sync_preds.: 0.015733s (num_starts 1037; 0.0000s/start)
compute_loop_hoisting_select_exprs_at_pcpair.: 0.015834s (num_starts 8; 0.0020s/start)
corr_graph::get_simplified_non_mem_assumes_helper.: 0.016436s (num_starts 548; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.016654s (num_starts 3; 0.0056s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 0.016661s (num_starts 3; 0.0056s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.016866s (num_starts 3; 0.0056s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.016875s (num_starts 3; 0.0056s/start)
eqspace::smallest_point_cover_houdini_expects_stability_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.017003s (num_starts 240; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;linear;-trivial.: 0.017127s (num_starts 9; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.017143s (num_starts 9; 0.0019s/start)
corr_graph::get_simplified_non_mem_assumes.: 0.017926s (num_starts 548; 0.0000s/start)
get_next_potential_correlations.: 0.01874s (num_starts 7; 0.0027s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.019436s (num_starts 10; 0.0019s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.019633s (num_starts 10; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.020102s (num_starts 6; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.020128s (num_starts 6; 0.0034s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.020137s (num_starts 11; 0.0018s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.020471s (num_starts 3; 0.0068s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.020472s (num_starts 3; 0.0068s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.020489s (num_starts 3; 0.0068s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.02055s (num_starts 3; 0.0068s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.021386s (num_starts 2; 0.0107s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;dst-ineq-houdini-guess;-trivial.: 0.021398s (num_starts 2; 0.0107s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.021402s (num_starts 2; 0.0107s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.022446s (num_starts 6; 0.0037s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.022466s (num_starts 6; 0.0037s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.022494s (num_starts 6; 0.0037s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.022555s (num_starts 6; 0.0038s/start)
bv_const_ref_map2expr_map.: 0.022566s (num_starts 409; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.022585s (num_starts 5; 0.0045s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;dst-ineq-houdini-guess;-trivial.: 0.022637s (num_starts 5; 0.0045s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.022687s (num_starts 5; 0.0045s/start)
do_ssa_transformation.: 0.022814s (num_starts 2; 0.0114s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;-dst-edgecond-implies-src-edgecond;-trivial.: 0.023033s (num_starts 1; 0.0230s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.023034s (num_starts 1; 0.0230s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L3%11%bbentry_Lfor.cond1%1%bbentry.: 0.023581s (num_starts 3; 0.0079s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.023589s (num_starts 1; 0.0236s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.023594s (num_starts 1; 0.0236s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;lb-signed;-trivial.: 0.023812s (num_starts 7; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.023821s (num_starts 7; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;ub-signed;-trivial.: 0.024026s (num_starts 7; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-signed;-trivial.: 0.024038s (num_starts 7; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.024092s (num_starts 4; 0.0060s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.024109s (num_starts 4; 0.0060s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.024228s (num_starts 4; 0.0061s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L3%11%bbentry_Lfor.cond1%1%bbentry.: 0.02456s (num_starts 3; 0.0082s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.025669s (num_starts 2; 0.0128s/start)
pth_collect_preds_using_atom_func_and_wp_fn.operator().: 0.025815s (num_starts 2419; 0.0000s/start)
tfg::get_aliasing_constraints_for_edge.: 0.026886s (num_starts 559; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.026898s (num_starts 1; 0.0269s/start)
graph_to_stream.: 0.026928s (num_starts 4; 0.0067s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%19%bbentry_Lfor.cond1%1%bbentry.: 0.027954s (num_starts 17; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.028564s (num_starts 3; 0.0095s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 0.028579s (num_starts 3; 0.0095s/start)
create_sp_version_relations_lattice_at_pc.: 0.02911s (num_starts 192; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.029184s (num_starts 2; 0.0146s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.029194s (num_starts 2; 0.0146s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;pred-type-unknown;-trivial.: 0.029436s (num_starts 5; 0.0059s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.029445s (num_starts 5; 0.0059s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.029768s (num_starts 2; 0.0149s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.029773s (num_starts 2; 0.0149s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;-dst-edgecond-implies-src-edgecond;-trivial.: 0.029983s (num_starts 2; 0.0150s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.029986s (num_starts 2; 0.0150s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.029994s (num_starts 2; 0.0150s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;-dst-edgecond-implies-src-edgecond.: 0.030002s (num_starts 2; 0.0150s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.030117s (num_starts 10; 0.0030s/start)
avail_exprs_val_t::generate_vals_from_gen_set.: 0.032441s (num_starts 168; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.033286s (num_starts 3; 0.0111s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 0.033301s (num_starts 3; 0.0111s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.033702s (num_starts 6; 0.0056s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);linear.: 0.033718s (num_starts 6; 0.0056s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.034363s (num_starts 5; 0.0069s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;abstract-memlabel-asserts-houdini-guess.: 0.034424s (num_starts 5; 0.0069s/start)
predicate_canonicalized.: 0.035746s (num_starts 409; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.036271s (num_starts 3; 0.0121s/start)
compute_new_lr_status_on_locs.calling.compute_lr_status_for_expr.: 0.037422s (num_starts 506; 0.0001s/start)
compute_new_lr_status_on_locs.loc_lr_status.simplify_and_compute_lr_status.: 0.038197s (num_starts 506; 0.0001s/start)
gen_pred_from_coeff_row.simplify.: 0.038427s (num_starts 409; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;linear;-trivial.: 0.03867s (num_starts 13; 0.0030s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.038695s (num_starts 13; 0.0030s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;ub-unsigned;-trivial.: 0.039868s (num_starts 8; 0.0050s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.039881s (num_starts 8; 0.0050s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::sp_version_relations_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.040042s (num_starts 168; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.041329s (num_starts 4; 0.0103s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.041355s (num_starts 4; 0.0103s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.04181s (num_starts 2; 0.0209s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.041822s (num_starts 2; 0.0209s/start)
pth_collect_preds_using_atom_func_and_wp_fn.: 0.042719s (num_starts 1672; 0.0000s/start)
corr_graph::get_aliasing_constraints_for_edge_helper.: 0.043438s (num_starts 80; 0.0005s/start)
corr_graph::get_aliasing_constraints_for_edge.: 0.043699s (num_starts 80; 0.0005s/start)
compute_lr_status_for_expr.: 0.043785s (num_starts 647; 0.0001s/start)
graph_per_loc_dfa_val_t<avail_exprs_val_t>::meet.: 0.04501s (num_starts 168; 0.0003s/start)
query:convert_from_z3.: 0.045081s (num_starts 793; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.045406s (num_starts 2; 0.0227s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.045416s (num_starts 2; 0.0227s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.04612s (num_starts 2; 0.0231s/start)
get_sprel_map_pair_at_pc.: 0.046203s (num_starts 496; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;pred-type-unknown;-trivial.: 0.046536s (num_starts 10; 0.0047s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.046883s (num_starts 5; 0.0094s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.04699s (num_starts 5; 0.0094s/start)
pth_collect_simplified_preds_using_atom_func.: 0.047896s (num_starts 1575; 0.0000s/start)
liveness_analysis_conservative::xfer_and_meet.: 0.049319s (num_starts 47; 0.0010s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);-trivial.: 0.05144s (num_starts 24; 0.0021s/start)
collect_aliasing_constraints_around_path_helper.: 0.052573s (num_starts 431; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;lb-unsigned;-trivial.: 0.052633s (num_starts 5; 0.0105s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.052637s (num_starts 5; 0.0105s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.053094s (num_starts 2; 0.0265s/start)
edge_update_memlabel_map_for_mlvars.populate_memlabel_map.: 0.05324s (num_starts 168; 0.0003s/start)
decide_hoare_triple_helper_get_aliasing_cons.: 0.053268s (num_starts 73; 0.0007s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.053457s (num_starts 9; 0.0059s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;lb-unsigned;-trivial.: 0.053587s (num_starts 3; 0.0179s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.053591s (num_starts 3; 0.0179s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.054113s (num_starts 2; 0.0271s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.054124s (num_starts 2; 0.0271s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;dst-ineq-houdini-guess;-trivial.: 0.054532s (num_starts 6; 0.0091s/start)
compute_expr_eqclasses_at_pc.: 0.055005s (num_starts 7; 0.0079s/start)
populate_loc_liveness.: 0.056349s (num_starts 3; 0.0188s/start)
collect_aliasing_constraints_around_path.: 0.056505s (num_starts 271; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;lb-signed;-trivial.: 0.05702s (num_starts 4; 0.0143s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;lb-signed.: 0.057056s (num_starts 4; 0.0143s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.057686s (num_starts 3; 0.0192s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.057702s (num_starts 3; 0.0192s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-signed;-trivial.: 0.057861s (num_starts 25; 0.0023s/start)
graph_with_guessing_add_node_invariants_top_or_boundary.: 0.058582s (num_starts 9; 0.0065s/start)
avail_exprs_create_submap.: 0.058831s (num_starts 504; 0.0001s/start)
cg_add_node.: 0.058917s (num_starts 9; 0.0065s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;lb-signed;-trivial.: 0.05893s (num_starts 4; 0.0147s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;lb-unsigned;-trivial.: 0.058949s (num_starts 4; 0.0147s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;lb-unsigned.: 0.058987s (num_starts 4; 0.0147s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.061657s (num_starts 10; 0.0062s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.061733s (num_starts 10; 0.0062s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.062613s (num_starts 6; 0.0104s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.062643s (num_starts 6; 0.0104s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.063025s (num_starts 8; 0.0079s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.064123s (num_starts 10; 0.0064s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.064186s (num_starts 10; 0.0064s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.064483s (num_starts 8; 0.0081s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;abstract-memlabel-asserts-houdini-guess.: 0.064579s (num_starts 8; 0.0081s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.066179s (num_starts 1; 0.0662s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.06619s (num_starts 1; 0.0662s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.066858s (num_starts 1; 0.0669s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.067367s (num_starts 5; 0.0135s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 0.067379s (num_starts 5; 0.0135s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.067443s (num_starts 6; 0.0112s/start)
decide_hoare_triple_helper;per-path;L3%19%bbentry_Lfor.cond1%1%bbentry;(epsilon);-trivial.: 0.068422s (num_starts 3; 0.0228s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.068428s (num_starts 3; 0.0228s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.068708s (num_starts 23; 0.0030s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.069194s (num_starts 1; 0.0692s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.0692s (num_starts 1; 0.0692s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.069209s (num_starts 1; 0.0692s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 0.069269s (num_starts 3; 0.0231s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.069298s (num_starts 1; 0.0693s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.069333s (num_starts 1; 0.0693s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities..: 0.06934s (num_starts 1; 0.0693s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities..: 0.069356s (num_starts 1; 0.0694s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.069971s (num_starts 1; 0.0700s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.069983s (num_starts 1; 0.0700s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.070421s (num_starts 1; 0.0704s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.070424s (num_starts 1; 0.0704s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.070432s (num_starts 1; 0.0704s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.070453s (num_starts 1; 0.0705s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.070468s (num_starts 1; 0.0705s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;-dst-edgecond-implies-src-edgecond;-trivial.: 0.07107s (num_starts 4; 0.0178s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.071404s (num_starts 1; 0.0714s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.071416s (num_starts 1; 0.0714s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.072671s (num_starts 1; 0.0727s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.072679s (num_starts 1; 0.0727s/start)
compute_new_lr_status_on_locs.: 0.073s (num_starts 168; 0.0004s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;dst-ineq-houdini-guess;-trivial.: 0.073513s (num_starts 7; 0.0105s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.074183s (num_starts 1; 0.0742s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.074191s (num_starts 1; 0.0742s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;ub-unsigned;-trivial.: 0.074581s (num_starts 6; 0.0124s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;ub-unsigned.: 0.074635s (num_starts 6; 0.0124s/start)
create_new_corr_graph_edge.new_node.: 0.074858s (num_starts 8; 0.0094s/start)
create_new_corr_graph_edge.: 0.075453s (num_starts 13; 0.0058s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;pred-type-unknown;-trivial.: 0.075945s (num_starts 4; 0.0190s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.075954s (num_starts 4; 0.0190s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 0.076009s (num_starts 3; 0.0253s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;ub-unsigned;-trivial.: 0.076267s (num_starts 8; 0.0095s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.076579s (num_starts 1; 0.0766s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.076955s (num_starts 1; 0.0770s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.076964s (num_starts 1; 0.0770s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.077456s (num_starts 10; 0.0077s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.077512s (num_starts 10; 0.0078s/start)
tfg_llvm_t::tfg_postprocess_after_pointsto_analysis.: 0.078217s (num_starts 1; 0.0782s/start)
tfg_postprocess_after_pointsto_analysis.: 0.07887s (num_starts 2; 0.0394s/start)
query:convert_to_z3.: 0.078999s (num_starts 793; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.079576s (num_starts 1; 0.0796s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.079587s (num_starts 1; 0.0796s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.080279s (num_starts 1; 0.0803s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.080286s (num_starts 1; 0.0803s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.080669s (num_starts 14; 0.0058s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.080928s (num_starts 29; 0.0028s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.080962s (num_starts 14; 0.0058s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.081324s (num_starts 1; 0.0813s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.081347s (num_starts 1; 0.0813s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.08136s (num_starts 1; 0.0814s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.081377s (num_starts 1; 0.0814s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;lb-unsigned.: 0.081383s (num_starts 1; 0.0814s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.081393s (num_starts 1; 0.0814s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-signed;-trivial.: 0.081745s (num_starts 32; 0.0026s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.081794s (num_starts 7; 0.0117s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.081998s (num_starts 1; 0.0820s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.082006s (num_starts 1; 0.0820s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.082026s (num_starts 1; 0.0820s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.082341s (num_starts 1; 0.0823s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;abstract-memlabel-asserts-houdini-guess.: 0.082997s (num_starts 4; 0.0207s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-trivial.: 0.083327s (num_starts 6; 0.0139s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.083332s (num_starts 6; 0.0139s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.084769s (num_starts 1; 0.0848s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.084779s (num_starts 1; 0.0848s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.085448s (num_starts 20; 0.0043s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.085609s (num_starts 20; 0.0043s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.086196s (num_starts 2; 0.0431s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;lb-unsigned.: 0.086204s (num_starts 2; 0.0431s/start)
collect_assumes_around_path_helper.: 0.086409s (num_starts 1140; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.087489s (num_starts 1; 0.0875s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.087512s (num_starts 1; 0.0875s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities..: 0.08753s (num_starts 1; 0.0875s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities..: 0.087545s (num_starts 1; 0.0875s/start)
eqspace::smallest_point_cover_houdini_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.08767s (num_starts 442; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.088465s (num_starts 2; 0.0442s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;-dst-edgecond-implies-src-edgecond.: 0.088473s (num_starts 2; 0.0442s/start)
get_unrolled_paths_from.: 0.090792s (num_starts 40; 0.0023s/start)
graph_with_paths::collect_assumes_around_path.: 0.090841s (num_starts 1140; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.091196s (num_starts 3; 0.0304s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;linear;-trivial.: 0.092672s (num_starts 20; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.092708s (num_starts 20; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;linear;-trivial.: 0.094273s (num_starts 20; 0.0047s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.094908s (num_starts 10; 0.0095s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.095102s (num_starts 14; 0.0068s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown.: 0.095371s (num_starts 2; 0.0477s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown.: 0.09541s (num_starts 2; 0.0477s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d).: 0.095423s (num_starts 2; 0.0477s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.095451s (num_starts 14; 0.0068s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.098295s (num_starts 1; 0.0983s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.098329s (num_starts 1; 0.0983s/start)
ldr_decompose_and_linear_solve.: 0.099239s (num_starts 200; 0.0005s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;dst-ineq-houdini-guess;-trivial.: 0.099964s (num_starts 15; 0.0067s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.100004s (num_starts 15; 0.0067s/start)
counter_example_satisfies_preds.: 0.101885s (num_starts 1973; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.102831s (num_starts 5; 0.0206s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.10349s (num_starts 2; 0.0517s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 0.103665s (num_starts 8; 0.0130s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;ub-signed.: 0.10369s (num_starts 8; 0.0130s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.104673s (num_starts 1; 0.1047s/start)
bv_linear_solve.: 0.104768s (num_starts 200; 0.0005s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.105967s (num_starts 3; 0.0353s/start)
query:bv_solve.: 0.106057s (num_starts 200; 0.0005s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.107184s (num_starts 4; 0.0268s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.108638s (num_starts 8; 0.0136s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;lb-signed.: 0.108665s (num_starts 8; 0.0136s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.109914s (num_starts 9; 0.0122s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;ub-unsigned.: 0.10994s (num_starts 9; 0.0122s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 0.110089s (num_starts 18; 0.0061s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.110734s (num_starts 28; 0.0040s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.111346s (num_starts 28; 0.0040s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.112571s (num_starts 19; 0.0059s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::avail_exprs_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.113086s (num_starts 168; 0.0007s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.113347s (num_starts 40; 0.0028s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.113355s (num_starts 5; 0.0227s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 0.113382s (num_starts 5; 0.0227s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.11436s (num_starts 1; 0.1144s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.114372s (num_starts 1; 0.1144s/start)
graph_edge_composition_get_to_state_using_to_state_fn.: 0.115299s (num_starts 602; 0.0002s/start)
graph_with_guessing_relax_dst_memlabels_on_ec_for_corr_graph.: 0.117883s (num_starts 28; 0.0042s/start)
gen_pred_from_coeff_row.: 0.118809s (num_starts 409; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;ub-signed;-trivial.: 0.120425s (num_starts 31; 0.0039s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.120459s (num_starts 32; 0.0038s/start)
compute_preds_for_bv_points.: 0.120783s (num_starts 54; 0.0022s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.121133s (num_starts 94; 0.0013s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.123915s (num_starts 2; 0.0620s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.123929s (num_starts 2; 0.0620s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.124611s (num_starts 12; 0.0104s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.124674s (num_starts 12; 0.0104s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.125083s (num_starts 9; 0.0139s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.128123s (num_starts 13; 0.0099s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.130582s (num_starts 4; 0.0326s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;lb-unsigned.: 0.130602s (num_starts 4; 0.0327s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.131419s (num_starts 1; 0.1314s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.131424s (num_starts 1; 0.1314s/start)
bv_solve_returning_intermediate_structures.: 0.132169s (num_starts 200; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.133904s (num_starts 5; 0.0268s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.136371s (num_starts 2; 0.0682s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L3%19%bbentry_Lfor.cond1%1%bbentry.: 0.13662s (num_starts 17; 0.0080s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.138548s (num_starts 2; 0.0693s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.139113s (num_starts 20; 0.0070s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;abstract-memlabel-asserts-houdini-guess.: 0.139362s (num_starts 20; 0.0070s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.140183s (num_starts 3; 0.0467s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.140217s (num_starts 3; 0.0467s/start)
invariant_inference_xfer.dst-ineq.from.L3%11%bbentry_Lfor.cond1%1%bbentry.: 0.140643s (num_starts 3; 0.0469s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 0.14095s (num_starts 18; 0.0078s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;dst-ineq-houdini-guess.: 0.142798s (num_starts 8; 0.0178s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.145354s (num_starts 4; 0.0363s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;dst-ineq-houdini-guess.: 0.145367s (num_starts 4; 0.0363s/start)
invariant_inference_xfer.dst-ineq.from.L0%0%d_L0%0%d.: 0.145969s (num_starts 2; 0.0730s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.146474s (num_starts 2; 0.0732s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;abstract-memlabel-asserts-houdini-guess.: 0.146479s (num_starts 2; 0.0732s/start)
add_fresh_counterexample_at_pc_and_propagate.L0%0%d_L0%0%d.inductive-invariants.: 0.146693s (num_starts 27; 0.0054s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.: 0.147579s (num_starts 2; 0.0738s/start)
decide_hoare_triple_helper;per-path;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);-trivial.: 0.148803s (num_starts 21; 0.0071s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;dst-ineq-houdini-guess;-trivial.: 0.150113s (num_starts 14; 0.0107s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);linear.: 0.150793s (num_starts 6; 0.0251s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.150821s (num_starts 3; 0.0503s/start)
bvsolve_cache_query.miss1.: 0.151341s (num_starts 200; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;-dst-edgecond-implies-src-edgecond.: 0.151405s (num_starts 5; 0.0303s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond;-trivial.: 0.15177s (num_starts 9; 0.0169s/start)
bvsolve_cache_query.: 0.156312s (num_starts 200; 0.0008s/start)
tfg_relax_pointsto_vals_on_edge.: 0.156724s (num_starts 99; 0.0016s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.156806s (num_starts 2; 0.0784s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.156829s (num_starts 2; 0.0784s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;lb-unsigned;-trivial.: 0.157129s (num_starts 9; 0.0175s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.157144s (num_starts 9; 0.0175s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;outgoing_edges_cover_all_possibilities..: 0.157263s (num_starts 3; 0.0524s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities..: 0.157276s (num_starts 3; 0.0524s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.15732s (num_starts 2; 0.0787s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.157344s (num_starts 2; 0.0787s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.157359s (num_starts 2; 0.0787s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.157681s (num_starts 6; 0.0263s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.15772s (num_starts 6; 0.0263s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.157999s (num_starts 1; 0.1580s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.158004s (num_starts 1; 0.1580s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.158006s (num_starts 1; 0.1580s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);false-predicate.: 0.158017s (num_starts 1; 0.1580s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;false-predicate.: 0.158021s (num_starts 1; 0.1580s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);false-predicate.: 0.158028s (num_starts 1; 0.1580s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.158592s (num_starts 2; 0.0793s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.160855s (num_starts 2; 0.0804s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.16087s (num_starts 2; 0.0804s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.160892s (num_starts 2; 0.0804s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;lb-unsigned.: 0.16091s (num_starts 2; 0.0805s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.162623s (num_starts 2; 0.0813s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.162641s (num_starts 2; 0.0813s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 0.162784s (num_starts 4; 0.0407s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;ub-signed.: 0.162809s (num_starts 4; 0.0407s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);linear.: 0.163269s (num_starts 21; 0.0078s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;linear.: 0.163313s (num_starts 21; 0.0078s/start)
decide_hoare_triple_helper;per-query-type;ub-signed;-trivial.: 0.165678s (num_starts 53; 0.0031s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);-trivial.: 0.168225s (num_starts 31; 0.0054s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.168636s (num_starts 2; 0.0843s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;dst-ineq-houdini-guess;-trivial.: 0.168644s (num_starts 20; 0.0084s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.168658s (num_starts 2; 0.0843s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.168686s (num_starts 20; 0.0084s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);linear.: 0.16874s (num_starts 12; 0.0141s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 0.168757s (num_starts 20; 0.0084s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;dst-ineq-houdini-guess.: 0.168797s (num_starts 20; 0.0084s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 0.171503s (num_starts 10; 0.0172s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.172399s (num_starts 2; 0.0862s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.172458s (num_starts 2; 0.0862s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.173499s (num_starts 6; 0.0289s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);linear.: 0.173531s (num_starts 6; 0.0289s/start)
query:simplify-z3.: 0.180917s (num_starts 1676; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.185868s (num_starts 45; 0.0041s/start)
recomputed_preds_would_be_different_from_current_preds.: 0.186121s (num_starts 1805; 0.0001s/start)
check_wfconds_on_edge.L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d.: 0.191309s (num_starts 2; 0.0957s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.193067s (num_starts 3; 0.0644s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.193393s (num_starts 2; 0.0967s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.193431s (num_starts 2; 0.0967s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.sprel.: 0.193844s (num_starts 3026; 0.0001s/start)
expr_try_breaking_bvextracts_to_fresh_vars.: 0.197637s (num_starts 496; 0.0004s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.201821s (num_starts 2; 0.1009s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.20183s (num_starts 2; 0.1009s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.202557s (num_starts 2; 0.1013s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.202607s (num_starts 2; 0.1013s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.203562s (num_starts 8; 0.0254s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%11%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.206745s (num_starts 2; 0.1034s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%11%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.206784s (num_starts 2; 0.1034s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%11%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.206821s (num_starts 2; 0.1034s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%11%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.206848s (num_starts 2; 0.1034s/start)
check_wfconds_on_edge.L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry.: 0.208421s (num_starts 2; 0.1042s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.208844s (num_starts 2; 0.1044s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.210487s (num_starts 1; 0.2105s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.210491s (num_starts 1; 0.2105s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.210494s (num_starts 1; 0.2105s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);false-predicate.: 0.210506s (num_starts 1; 0.2105s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;false-predicate.: 0.21051s (num_starts 1; 0.2105s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);false-predicate.: 0.210517s (num_starts 1; 0.2105s/start)
solve_for_bv_points.: 0.212128s (num_starts 200; 0.0011s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.214626s (num_starts 5; 0.0429s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.214898s (num_starts 1; 0.2149s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.214902s (num_starts 1; 0.2149s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.214904s (num_starts 1; 0.2149s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);false-predicate.: 0.214917s (num_starts 1; 0.2149s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;false-predicate.: 0.214923s (num_starts 1; 0.2149s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);false-predicate.: 0.214929s (num_starts 1; 0.2149s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.215129s (num_starts 12; 0.0179s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.216948s (num_starts 3; 0.0723s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 0.217574s (num_starts 6; 0.0363s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.222686s (num_starts 1; 0.2227s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.222689s (num_starts 1; 0.2227s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.222689s (num_starts 1; 0.2227s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.222706s (num_starts 1; 0.2227s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.222723s (num_starts 1; 0.2227s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;pred-type-unknown;-trivial.: 0.226194s (num_starts 14; 0.0162s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.232219s (num_starts 3; 0.0774s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.232878s (num_starts 35; 0.0067s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;lb-signed.: 0.233849s (num_starts 5; 0.0468s/start)
expr_try_converting_unaliased_memslots_to_fresh_vars.: 0.235881s (num_starts 496; 0.0005s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 0.236751s (num_starts 12; 0.0197s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 0.236872s (num_starts 12; 0.0197s/start)
invariant_inference_xfer.expr-group-bvs.from.L3%11%bbentry_Lfor.cond1%1%bbentry.: 0.23848s (num_starts 3; 0.0795s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;lb-signed;-trivial.: 0.238593s (num_starts 35; 0.0068s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;linear;-trivial.: 0.238785s (num_starts 17; 0.0140s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;pred-type-unknown.: 0.240135s (num_starts 12; 0.0200s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.240447s (num_starts 14; 0.0172s/start)
dst_tfg_counter_example_translate_on_edge_composition.: 0.242425s (num_starts 380; 0.0006s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%11%bbentry_Lfor.cond1%1%bbentry.: 0.243903s (num_starts 3; 0.0813s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;ub-unsigned;-trivial.: 0.245056s (num_starts 44; 0.0056s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 0.245139s (num_starts 5; 0.0490s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.24716s (num_starts 4; 0.0618s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.252816s (num_starts 1; 0.2528s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%11%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.25282s (num_starts 1; 0.2528s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%11%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.252839s (num_starts 1; 0.2528s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;dst_edge_composition_proves_false.: 0.252842s (num_starts 1; 0.2528s/start)
check_wfconds_on_edge.L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry.: 0.256328s (num_starts 3; 0.0854s/start)
add_fresh_counterexample_at_pc_and_propagate.L3%11%bbentry_Lfor.cond1%1%bbentry.inductive-invariants.: 0.258547s (num_starts 14; 0.0185s/start)
check_wfconds_on_edge.L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry.: 0.259346s (num_starts 4; 0.0648s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed.: 0.265351s (num_starts 8; 0.0332s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed.: 0.265437s (num_starts 8; 0.0332s/start)
ftmap_pointsto_analysis_combo_dfa_t.alias_val_xfer_and_meet.: 0.269235s (num_starts 69; 0.0039s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.270104s (num_starts 1; 0.2701s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.270107s (num_starts 1; 0.2701s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.270111s (num_starts 1; 0.2701s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.270112s (num_starts 1; 0.2701s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false.: 0.270123s (num_starts 1; 0.2701s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo;dst_edge_composition_proves_false.: 0.270125s (num_starts 1; 0.2701s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false.: 0.27013s (num_starts 1; 0.2701s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon).: 0.270527s (num_starts 2; 0.1353s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.271549s (num_starts 3; 0.0905s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.model.: 0.273398s (num_starts 3026; 0.0001s/start)
expr_label_memlabels_using_memlabel_map_visitor.simplify.: 0.27424s (num_starts 3163; 0.0001s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L0%0%d_L0%0%d.: 0.275565s (num_starts 2; 0.1378s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.280283s (num_starts 1; 0.2803s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%19%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.280286s (num_starts 1; 0.2803s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%19%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.280304s (num_starts 1; 0.2803s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;dst_edge_composition_proves_false.: 0.280308s (num_starts 1; 0.2803s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.281894s (num_starts 1; 0.2819s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.281895s (num_starts 1; 0.2819s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.284739s (num_starts 42; 0.0068s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.290666s (num_starts 7; 0.0415s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;ub-unsigned.: 0.290686s (num_starts 7; 0.0415s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.291599s (num_starts 2; 0.1458s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.291614s (num_starts 2; 0.1458s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;linear;-trivial.: 0.292461s (num_starts 24; 0.0122s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;linear.: 0.305152s (num_starts 18; 0.0170s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recomputed_preds_would_be_different_from_current_preds.: 0.306889s (num_starts 200; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.30803s (num_starts 79; 0.0039s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.310962s (num_starts 4; 0.0777s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;pred-type-unknown;-trivial.: 0.312393s (num_starts 17; 0.0184s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.312414s (num_starts 17; 0.0184s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.318171s (num_starts 4; 0.0795s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.321716s (num_starts 3; 0.1072s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);-trivial.: 0.322295s (num_starts 82; 0.0039s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.324209s (num_starts 46; 0.0070s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.325046s (num_starts 6; 0.0542s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.: 0.327187s (num_starts 3026; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.329123s (num_starts 16; 0.0206s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 0.329539s (num_starts 28; 0.0118s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);linear.: 0.330396s (num_starts 15; 0.0220s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;linear.: 0.330443s (num_starts 15; 0.0220s/start)
graph_edge_composition_get_simplified_edge_cond.: 0.336421s (num_starts 11313; 0.0000s/start)
decide_hoare_triple_helper;per-query-type;lb-unsigned;-trivial.: 0.337017s (num_starts 22; 0.0153s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.344812s (num_starts 4; 0.0862s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.351036s (num_starts 4; 0.0878s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.37221s (num_starts 5; 0.0744s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.372264s (num_starts 5; 0.0745s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.372521s (num_starts 5; 0.0745s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.372601s (num_starts 5; 0.0745s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.372644s (num_starts 5; 0.0745s/start)
ftmap_pointsto_analysis_combo_dfa_t.ftmap_dfa_flow_insensitive_xfer_and_meet.: 0.37272s (num_starts 69; 0.0054s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.37335s (num_starts 3; 0.1245s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.373442s (num_starts 3; 0.1245s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.375389s (num_starts 4; 0.0938s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;-dst-edgecond-implies-src-edgecond.: 0.3755s (num_starts 4; 0.0939s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;pred-type-unknown.: 0.384984s (num_starts 16; 0.0241s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;pred-type-unknown;-trivial.: 0.385456s (num_starts 25; 0.0154s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.388486s (num_starts 18; 0.0216s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.391007s (num_starts 1; 0.3910s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.391009s (num_starts 1; 0.3910s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.391022s (num_starts 1; 0.3910s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;dst_edge_composition_proves_false.: 0.391027s (num_starts 1; 0.3910s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.394356s (num_starts 4; 0.0986s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 0.395459s (num_starts 10; 0.0395s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;dst-ineq-houdini-guess.: 0.395519s (num_starts 10; 0.0396s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 0.395622s (num_starts 10; 0.0396s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.400611s (num_starts 5; 0.0801s/start)
decide_hoare_triple_helper;per-query-type;lb-signed;-trivial.: 0.404839s (num_starts 67; 0.0060s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;linear.: 0.405608s (num_starts 24; 0.0169s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.414125s (num_starts 6; 0.0690s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;-dst-edgecond-implies-src-edgecond.: 0.417521s (num_starts 5; 0.0835s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.418208s (num_starts 43; 0.0097s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.426177s (num_starts 8; 0.0533s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 0.426906s (num_starts 18; 0.0237s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;pred-type-unknown.: 0.42696s (num_starts 18; 0.0237s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.430055s (num_starts 4; 0.1075s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 0.433565s (num_starts 36; 0.0120s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.dst_tfg.computeWP_for_pred_across_ec.: 0.441108s (num_starts 1179; 0.0004s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.442358s (num_starts 21; 0.0211s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.448234s (num_starts 109; 0.0041s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.455536s (num_starts 10; 0.0456s/start)
decide_hoare_triple_helper;per-query-type;ub-unsigned;-trivial.: 0.458838s (num_starts 81; 0.0057s/start)
ftmap_run_pointsto_analysis.: 0.471082s (num_starts 2; 0.2355s/start)
tfg_run_pointsto_analysis.: 0.471527s (num_starts 2; 0.2358s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 0.472422s (num_starts 20; 0.0236s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;dst-ineq-houdini-guess.: 0.472494s (num_starts 20; 0.0236s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.474107s (num_starts 5; 0.0948s/start)
tfg_populate_structs_after_ssa_construction.: 0.485836s (num_starts 2; 0.2429s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess.: 0.487357s (num_starts 44; 0.0111s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.493474s (num_starts 5; 0.0987s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);linear.: 0.499435s (num_starts 27; 0.0185s/start)
../../include/graph/smallest_point_cover.h.smallest_point_cover_add_point_using_CE.: 0.500179s (num_starts 2005; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.511927s (num_starts 39; 0.0131s/start)
tfg_ssa_construct_from_non_ssa_tfg.: 0.512296s (num_starts 2; 0.2561s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.522812s (num_starts 1; 0.5228s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.522819s (num_starts 1; 0.5228s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.522821s (num_starts 1; 0.5228s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.525656s (num_starts 5; 0.1051s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;lb-signed.: 0.525673s (num_starts 5; 0.1051s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.525699s (num_starts 5; 0.1051s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.src_tfg.computeWP_for_pred_across_ec.: 0.528511s (num_starts 1126; 0.0005s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.533951s (num_starts 1; 0.5340s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.533954s (num_starts 1; 0.5340s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.533962s (num_starts 1; 0.5340s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;dst_edge_composition_proves_false.: 0.533967s (num_starts 1; 0.5340s/start)
check_wfconds_on_edge.L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry.: 0.535642s (num_starts 10; 0.0536s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.536011s (num_starts 5; 0.1072s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.53886s (num_starts 2; 0.2694s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.538875s (num_starts 2; 0.2694s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.538879s (num_starts 2; 0.2694s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;linear;-trivial.: 0.540677s (num_starts 114; 0.0047s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 0.542064s (num_starts 6; 0.0903s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;ub-unsigned.: 0.542083s (num_starts 6; 0.0903s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 0.542111s (num_starts 6; 0.0904s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.546128s (num_starts 5; 0.1092s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;dst-ineq-houdini-guess;-trivial.: 0.551983s (num_starts 48; 0.0115s/start)
apply_mask_and_overlay_array_constant.mk_array_constant.: 0.553465s (num_starts 441; 0.0013s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.554227s (num_starts 4; 0.1386s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.554385s (num_starts 4; 0.1386s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%19%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.559927s (num_starts 5; 0.1120s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%19%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.560061s (num_starts 5; 0.1120s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.57842s (num_starts 2; 0.2892s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.578429s (num_starts 2; 0.2892s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.578435s (num_starts 2; 0.2892s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.582776s (num_starts 5; 0.1166s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;lb-signed.: 0.58279s (num_starts 5; 0.1166s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.582819s (num_starts 5; 0.1166s/start)
decide_hoare_triple_helper;per-query-type;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.583389s (num_starts 3; 0.1945s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;lb-unsigned.: 0.588905s (num_starts 10; 0.0589s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;ub-signed.: 0.595015s (num_starts 36; 0.0165s/start)
apply_mask_and_overlay_array_constant.: 0.597081s (num_starts 441; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;pred-type-unknown;-trivial.: 0.597286s (num_starts 59; 0.0101s/start)
decide_hoare_triple_helper;per-query-type;false-predicate.: 0.598303s (num_starts 4; 0.1496s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.599959s (num_starts 5; 0.1200s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.612172s (num_starts 68; 0.0090s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.615882s (num_starts 13; 0.0474s/start)
guarded_predicate_set_and.: 0.624942s (num_starts 496; 0.0013s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.625984s (num_starts 2; 0.3130s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.625993s (num_starts 2; 0.3130s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.625995s (num_starts 2; 0.3130s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.630568s (num_starts 5; 0.1261s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;ub-unsigned.: 0.630586s (num_starts 5; 0.1261s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.63062s (num_starts 5; 0.1261s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.650656s (num_starts 6; 0.1084s/start)
put_smtlib_string_in_file.: 0.666055s (num_starts 582; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.666155s (num_starts 1; 0.6662s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%19%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.666158s (num_starts 1; 0.6662s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%19%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.666179s (num_starts 1; 0.6662s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;dst_edge_composition_proves_false.: 0.666183s (num_starts 1; 0.6662s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.679729s (num_starts 9; 0.0755s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.680219s (num_starts 10; 0.0680s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 0.692602s (num_starts 13; 0.0533s/start)
decide_hoare_triple_helper;per-query-type;ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.710963s (num_starts 8; 0.0889s/start)
check_wfconds_on_edge.L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry.: 0.714829s (num_starts 8; 0.0894s/start)
lhs_set_sort.: 0.717831s (num_starts 496; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.72219s (num_starts 1; 0.7222s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%11%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.722192s (num_starts 1; 0.7222s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%11%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.722211s (num_starts 1; 0.7222s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;dst_edge_composition_proves_false.: 0.722215s (num_starts 1; 0.7222s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 0.726755s (num_starts 40; 0.0182s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.75447s (num_starts 6; 0.1257s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.754555s (num_starts 6; 0.1258s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.754607s (num_starts 6; 0.1258s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.763122s (num_starts 6; 0.1272s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.771898s (num_starts 2; 0.3859s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry.from.L3%19%bbentry_Lfor.cond1%1%bbentry.: 0.777951s (num_starts 4; 0.1945s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.777963s (num_starts 10; 0.0778s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.796122s (num_starts 10; 0.0796s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.807825s (num_starts 8; 0.1010s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;lb-signed.: 0.813751s (num_starts 10; 0.0814s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L0%0%d_L0%0%d.: 0.818433s (num_starts 2; 0.4092s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.821355s (num_starts 11; 0.0747s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;dst-ineq-houdini-guess.: 0.832864s (num_starts 16; 0.0521s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 0.834996s (num_starts 10; 0.0835s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.85483s (num_starts 14; 0.0611s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.862128s (num_starts 10; 0.0862s/start)
decide_hoare_triple_helper;per-query-type;ub-signed.: 0.877743s (num_starts 61; 0.0144s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.880101s (num_starts 16; 0.0550s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.88145s (num_starts 8; 0.1102s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 0.883672s (num_starts 20; 0.0442s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.904004s (num_starts 11; 0.0822s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.904085s (num_starts 11; 0.0822s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.915509s (num_starts 7; 0.1308s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.915686s (num_starts 7; 0.1308s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.924945s (num_starts 2; 0.4625s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.925005s (num_starts 2; 0.4625s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.92771s (num_starts 64; 0.0145s/start)
graph_ec_apply_trans_funs_helper.0.: 0.941428s (num_starts 2460; 0.0004s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.946414s (num_starts 2; 0.4732s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.946506s (num_starts 2; 0.4733s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.95044s (num_starts 11; 0.0864s/start)
graph_ec_apply_trans_funs_helper.: 0.950949s (num_starts 2469; 0.0004s/start)
graph_ec_apply_trans_funs_using_wp_fn.: 0.957251s (num_starts 2469; 0.0004s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.960459s (num_starts 10; 0.0960s/start)
computeWP_for_pred_across_ec.graph_ec_apply_trans_funs_using_wp_fn.: 0.963836s (num_starts 2458; 0.0004s/start)
computeWP_for_pred_across_ec.: 0.972182s (num_starts 2458; 0.0004s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.972409s (num_starts 5; 0.1945s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.9725s (num_starts 5; 0.1945s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 0.972592s (num_starts 5; 0.1945s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 0.972651s (num_starts 5; 0.1945s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;-dst-edgecond-implies-src-edgecond.: 0.974242s (num_starts 11; 0.0886s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%11%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.974984s (num_starts 2; 0.4875s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%11%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.975071s (num_starts 2; 0.4875s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 0.997275s (num_starts 25; 0.0399s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L3%19%bbentry_Lfor.cond1%1%bbentry.: 1.00561s (num_starts 17; 0.0592s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.02779s (num_starts 14; 0.0734s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.05164s (num_starts 14; 0.0751s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 1.0614s (num_starts 20; 0.0531s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;lb-unsigned.: 1.06152s (num_starts 20; 0.0531s/start)
decide_hoare_triple_helper;per-path;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);-trivial.: 1.06387s (num_starts 120; 0.0089s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed.: 1.07366s (num_starts 13; 0.0826s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed.: 1.07384s (num_starts 13; 0.0826s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);linear.: 1.12982s (num_starts 90; 0.0126s/start)
decide_hoare_triple_helper;per-query-type;dst-ineq-houdini-guess;-trivial.: 1.14247s (num_starts 117; 0.0098s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.14336s (num_starts 14; 0.0817s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;pred-type-unknown.: 1.14905s (num_starts 31; 0.0371s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 1.16541s (num_starts 33; 0.0353s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.: 1.16942s (num_starts 1126; 0.0010s/start)
invariant_inference_xfer.src-branches-const-ineq.from.L3%11%bbentry_Lfor.cond1%1%bbentry.: 1.17363s (num_starts 3; 0.3912s/start)
decide_hoare_triple_helper;per-path;L3%11%bbentry_Lfor.cond1%1%bbentry;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.1817s (num_starts 4; 0.2954s/start)
decide_hoare_triple_helper;per-path;L3%11%bbentry_Lfor.cond1%1%bbentry;(epsilon).: 1.18194s (num_starts 4; 0.2955s/start)
edge_composition_apply_trans_funs_on_pred.: 1.1874s (num_starts 1037; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.19364s (num_starts 11; 0.1085s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.19375s (num_starts 11; 0.1085s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.20189s (num_starts 6; 0.2003s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.20191s (num_starts 6; 0.2003s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%19%bbentry_Lfor.cond1%1%bbentry.: 1.21113s (num_starts 17; 0.0712s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 1.21914s (num_starts 15; 0.0813s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;linear.: 1.21918s (num_starts 15; 0.0813s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.24146s (num_starts 5; 0.2483s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.24151s (num_starts 5; 0.2483s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.24153s (num_starts 5; 0.2483s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);linear.: 1.25147s (num_starts 12; 0.1043s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;linear.: 1.25151s (num_starts 12; 0.1043s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);linear.: 1.25157s (num_starts 12; 0.1043s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.2652s (num_starts 7; 0.1807s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.26801s (num_starts 7; 0.1811s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 1.28856s (num_starts 18; 0.0716s/start)
invariant_inference_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.: 1.29017s (num_starts 2; 0.6451s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.29061s (num_starts 9; 0.1434s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 1.29538s (num_starts 18; 0.0720s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;ub-unsigned.: 1.2977s (num_starts 11; 0.1180s/start)
check_equivalence_proof.: 1.3056s (num_starts 1; 1.3056s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.31466s (num_starts 16; 0.0822s/start)
decide_hoare_triple_helper;per-path;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);-trivial.: 1.31975s (num_starts 77; 0.0171s/start)
decide_hoare_triple_helper;per-query-type;linear;-trivial.: 1.3241s (num_starts 224; 0.0059s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 1.38486s (num_starts 28; 0.0495s/start)
lhs_set_eliminate_constructs_that_the_solver_cannot_handle.: 1.41497s (num_starts 496; 0.0029s/start)
expr_do_simplify_using_lhs_set_and_precond.: 1.44064s (num_starts 1505; 0.0010s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.46167s (num_starts 8; 0.1827s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.46177s (num_starts 8; 0.1827s/start)
decide_hoare_triple_helper;per-path;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.46573s (num_starts 9; 0.1629s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 1.47492s (num_starts 18; 0.0819s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);linear.: 1.47865s (num_starts 123; 0.0120s/start)
prove_spawn_and_join.eliminate_constructs_that_the_solver_cannot_handle1.: 1.48707s (num_starts 496; 0.0030s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.51652s (num_starts 14; 0.1083s/start)
collect_inductive_preds_around_path.: 1.52152s (num_starts 1037; 0.0015s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.58391s (num_starts 7; 0.2263s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.58411s (num_starts 7; 0.2263s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 1.58674s (num_starts 20; 0.0793s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 1.58699s (num_starts 20; 0.0793s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 1.5908s (num_starts 53; 0.0300s/start)
decide_hoare_triple_helper;per-path;L3%11%bbentry_Lfor.cond1%1%bbentry;(L3%11%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry).: 1.61569s (num_starts 30; 0.0539s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 1.65171s (num_starts 13; 0.1271s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.66637s (num_starts 8; 0.2083s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown;-trivial.: 1.67647s (num_starts 136; 0.0123s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 1.70595s (num_starts 50; 0.0341s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 1.70961s (num_starts 16; 0.1069s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;ub-unsigned.: 1.74299s (num_starts 16; 0.1089s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.75295s (num_starts 5; 0.3506s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.79028s (num_starts 13; 0.1377s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;pred-type-unknown.: 1.79181s (num_starts 70; 0.0256s/start)
decide_hoare_triple_helper;per-query-type;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.83039s (num_starts 21; 0.0872s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 1.83404s (num_starts 34; 0.0539s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.8376s (num_starts 6; 0.3063s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.84452s (num_starts 24; 0.0769s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;linear.: 1.85697s (num_starts 130; 0.0143s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon).: 1.87456s (num_starts 19; 0.0987s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.88448s (num_starts 20; 0.0942s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.91078s (num_starts 25; 0.0764s/start)
decide_hoare_triple_helper;per-path;L3%19%bbentry_Lfor.cond1%1%bbentry;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.91528s (num_starts 11; 0.1741s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.93199s (num_starts 8; 0.2415s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 1.95193s (num_starts 46; 0.0424s/start)
decide_hoare_triple_helper;per-path;L3%19%bbentry_Lfor.cond1%1%bbentry;(epsilon).: 1.98457s (num_starts 14; 0.1418s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond.: 2.03728s (num_starts 29; 0.0703s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 2.05267s (num_starts 40; 0.0513s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.08408s (num_starts 10; 0.2084s/start)
check_wfconds_on_edge.: 2.16641s (num_starts 33; 0.0656s/start)
decide_hoare_triple_helper;per-query-type;lb-unsigned.: 2.16874s (num_starts 43; 0.0504s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 2.18273s (num_starts 18; 0.1213s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 2.26321s (num_starts 67; 0.0338s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.26774s (num_starts 5; 0.4535s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.26781s (num_starts 5; 0.4536s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 2.27131s (num_starts 55; 0.0413s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 2.36287s (num_starts 15; 0.1575s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.3904s (num_starts 29; 0.0824s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 2.3964s (num_starts 18; 0.1331s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.43928s (num_starts 7; 0.3485s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 2.44608s (num_starts 78; 0.0314s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.47921s (num_starts 9; 0.2755s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.47925s (num_starts 9; 0.2755s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 2.50882s (num_starts 14; 0.1792s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;pred-type-unknown.: 2.50887s (num_starts 14; 0.1792s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 2.52554s (num_starts 93; 0.0272s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;dst-ineq-houdini-guess.: 2.58981s (num_starts 21; 0.1233s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.66853s (num_starts 12; 0.2224s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.67252s (num_starts 11; 0.2430s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);-trivial.: 2.71883s (num_starts 387; 0.0070s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 2.72666s (num_starts 20; 0.1363s/start)
compute_z3_expr.: 2.79935s (num_starts 1084; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;lb-signed.: 2.90789s (num_starts 47; 0.0619s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.92894s (num_starts 4; 0.7322s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.92895s (num_starts 4; 0.7322s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;dst-ineq-houdini-guess.: 2.94375s (num_starts 77; 0.0382s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 3.00497s (num_starts 8; 0.3756s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;pred-type-unknown.: 3.00499s (num_starts 8; 0.3756s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.00548s (num_starts 5; 0.6011s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 3.10858s (num_starts 10; 0.3109s/start)
decide_hoare_triple_helper;per-query-type;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.11647s (num_starts 7; 0.4452s/start)
decide_hoare_triple_helper;per-query-type;dst_edge_composition_proves_false.: 3.1167s (num_starts 7; 0.4452s/start)
check_preds_on_edge_compositions.dhd_with_ce_propagation.: 3.15788s (num_starts 89; 0.0355s/start)
check_preds_on_edge_compositions.: 3.19864s (num_starts 38; 0.0842s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L0%0%d_L0%0%d.: 3.21738s (num_starts 2; 1.6087s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.39367s (num_starts 16; 0.2121s/start)
invariant_inference_xfer.expr-group-bvs.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 3.5078s (num_starts 18; 0.1949s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;ub-unsigned.: 3.63966s (num_starts 60; 0.0607s/start)
parse_z3_model.: 3.70914s (num_starts 143; 0.0259s/start)
dst_edge_composition_proves_false.: 3.71373s (num_starts 7; 0.5305s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.71543s (num_starts 12; 0.3096s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.71548s (num_starts 12; 0.3096s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.71552s (num_starts 12; 0.3096s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 3.71915s (num_starts 14; 0.2657s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;pred-type-unknown.: 3.71919s (num_starts 14; 0.2657s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 3.71929s (num_starts 14; 0.2657s/start)
read_counter_examples_from_channel.: 3.74797s (num_starts 73; 0.0513s/start)
get_next_dst_edge_composition_to_correlate.: 3.77172s (num_starts 8; 0.4715s/start)
decide_hoare_triple.: 3.82448s (num_starts 10; 0.3824s/start)
invariant_inference_xfer.dst-ineq.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 4.09179s (num_starts 18; 0.2273s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 4.10464s (num_starts 14; 0.2932s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 4.10497s (num_starts 14; 0.2932s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);linear.: 4.32048s (num_starts 26; 0.1662s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);linear.: 4.49443s (num_starts 32; 0.1405s/start)
decide_hoare_triple_helper;per-path;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 4.49535s (num_starts 30; 0.1498s/start)
invariant_inference_xfer.src-branches-const-ineq.from.L3%19%bbentry_Lfor.cond1%1%bbentry.: 4.79947s (num_starts 21; 0.2285s/start)
decide_hoare_triple_helper;per-query-type;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 4.8316s (num_starts 23; 0.2101s/start)
invariant_inference_xfer.dst-ineq.from.L3%19%bbentry_Lfor.cond1%1%bbentry.: 5.00406s (num_starts 17; 0.2944s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 5.01308s (num_starts 18; 0.2785s/start)
decide_hoare_triple_helper;per-query-type;lb-signed.: 5.23845s (num_starts 90; 0.0582s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;linear.: 5.30648s (num_starts 42; 0.1263s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 5.35832s (num_starts 40; 0.1340s/start)
decide_hoare_triple_helper;per-path;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry).: 5.56477s (num_starts 150; 0.0371s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%11%bbentry_Lfor.cond1%1%bbentry).: 5.68537s (num_starts 122; 0.0466s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 5.88794s (num_starts 21; 0.2804s/start)
decide_hoare_triple_helper;-trivial.: 5.99544s (num_starts 753; 0.0080s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry).: 6.05774s (num_starts 52; 0.1165s/start)
decide_hoare_triple_helper;per-query-type;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 6.54509s (num_starts 59; 0.1109s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 6.8255s (num_starts 28; 0.2438s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry).: 6.87891s (num_starts 52; 0.1323s/start)
invariant_inference_xfer.src-branches-const-ineq.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 7.05249s (num_starts 31; 0.2275s/start)
add_fresh_counterexample_at_pc_and_propagate.L3%19%bbentry_Lfor.cond1%1%bbentry.inductive-invariants.: 7.54733s (num_starts 26; 0.2903s/start)
decide_hoare_triple_helper;per-query-type;dst-ineq-houdini-guess.: 7.69204s (num_starts 176; 0.0437s/start)
add_fresh_counterexample_at_pc_and_propagate.L3%7%bbentry_Lfor.cond%1%bbentry.inductive-invariants.: 7.71046s (num_starts 99; 0.0779s/start)
decide_hoare_triple_helper;per-query-type;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 7.86707s (num_starts 39; 0.2017s/start)
decide_hoare_triple_helper;per-query-type;ub-unsigned.: 8.32875s (num_starts 120; 0.0694s/start)
propagate_nodece_across_edge.: 9.2656s (num_starts 84; 0.1103s/start)
decide_hoare_triple_helper;per-query-type;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 9.50988s (num_starts 53; 0.1794s/start)
decide_hoare_triple_helper;per-path;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 9.63802s (num_starts 39; 0.2471s/start)
check_node_stability_after_CE_addition.: 9.74962s (num_starts 265; 0.0368s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 9.87034s (num_starts 87; 0.1135s/start)
src_tfg_counter_example_translate_on_edge_composition.delta{1,0}.: 10.0116s (num_starts 213; 0.0470s/start)
src_tfg_counter_example_translate_on_edge_composition.: 10.0134s (num_starts 267; 0.0375s/start)
ce_reconcile_sorts.: 10.1717s (num_starts 145; 0.0701s/start)
invariant_inference_xfer.expr-group-bvs.from.L3%19%bbentry_Lfor.cond1%1%bbentry.: 10.6383s (num_starts 17; 0.6258s/start)
decide_hoare_triple_helper;per-query-type;linear.: 10.8395s (num_starts 277; 0.0391s/start)
decide_hoare_triple_helper;per-path;L3%19%bbentry_Lfor.cond1%1%bbentry;(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry).: 10.9629s (num_starts 116; 0.0945s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 11.5464s (num_starts 47; 0.2457s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 12.5168s (num_starts 18; 0.6954s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry).: 12.6038s (num_starts 474; 0.0266s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown.: 13.2266s (num_starts 183; 0.0723s/start)
counter_example_translate_on_edge_composition_helper.: 13.7259s (num_starts 2042; 0.0067s/start)
add_fresh_counterexample_at_pc_and_propagate.: 15.6642s (num_starts 166; 0.0944s/start)
decide_hoare_triple_with_alias_cons.ce.: 15.6688s (num_starts 945; 0.0166s/start)
corr_graph::add_edge().: 21.4433s (num_starts 13; 1.6495s/start)
corr_graph_create_and_add_cg_edge_composition_using_src_and_dst_fp.: 21.5226s (num_starts 13; 1.6556s/start)
corr_graph_add_correlation.: 21.5231s (num_starts 13; 1.6556s/start)
corr_graph_add_correlation_and_create_new_correl_entry.: 21.5237s (num_starts 13; 1.6557s/start)
query:smt.: 23.5444s (num_starts 291; 0.0809s/start)
counter_example_falsifies_preds.: 24.5781s (num_starts 412; 0.0597s/start)
counter_example_evaluate_preds.: 24.6744s (num_starts 2385; 0.0103s/start)
spawn_smt_query.: 27.2957s (num_starts 291; 0.0938s/start)
solver_provable.: 41.5902s (num_starts 496; 0.0839s/start)
solver_satisfiable-cache-miss.: 41.6355s (num_starts 291; 0.1431s/start)
solver_satisfiable.: 41.6398s (num_starts 497; 0.0838s/start)
expr_is_provable.: 42.0315s (num_starts 496; 0.0847s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_commonMEM_optimization.: 42.0399s (num_starts 496; 0.0848s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_aliasing_constraints_generation.: 42.0656s (num_starts 496; 0.0848s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_simplify_and_add_auxiliary_structures.: 42.0835s (num_starts 496; 0.0848s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_precond_is_false.: 42.7571s (num_starts 496; 0.0862s/start)
is_expr_equal_using_lhs_set_and_precond_helper.syntactic_check_failed.: 42.852s (num_starts 496; 0.0864s/start)
is_expr_equal_using_lhs_set_and_precond_helper.: 42.8601s (num_starts 496; 0.0864s/start)
is_expr_equal_using_lhs_set_and_precond.: 48.6301s (num_starts 496; 0.0980s/start)
prove.: 48.6367s (num_starts 496; 0.0981s/start)
prove_spawn_and_join_helper.: 48.6396s (num_starts 496; 0.0981s/start)
decide_hoare_triple_helper;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 48.7979s (num_starts 284; 0.1718s/start)
prove_spawn_and_join.: 51.5042s (num_starts 496; 0.1038s/start)
prove_wrapper.proof_query_not_trivial.: 51.5878s (num_starts 496; 0.1040s/start)
prove_wrapper.: 51.7556s (num_starts 1087; 0.0476s/start)
decide_hoare_triple_check_ub.: 53.0187s (num_starts 1037; 0.0511s/start)
decide_hoare_triple_helper.: 54.8381s (num_starts 1037; 0.0529s/start)
update_invariant_state_for_edges.: 65.9985s (num_starts 11; 5.9999s/start)
cg_check_new_cg_ec.: 65.9987s (num_starts 11; 5.9999s/start)
correl_entry_apply.: 65.9994s (num_starts 11; 5.9999s/start)
expandProductCFG.: 69.7914s (num_starts 12; 5.8160s/start)
decide_hoare_triple_with_alias_cons.: 70.5152s (num_starts 1037; 0.0680s/start)
bestFirstSearch.: 91.4064s (num_starts 1; 91.4064s/start)
Time taken for equivalence check.: 92.7271s (num_starts 1; 92.7271s/start)

counters:
# of Paths Prunned through CE propagation.: 5
# of assume sat failures for undef-behavioursome.edge.Lfor.body3%1%d=>Lfor.cond1%1%bbentry.: 9
# of correlations rejected by -dst-edgecond-implies-src-edgecond check.: 5
# of paths enumerated.: 41
# of paths expanded.: 11
# of queries to linear solver.: 200
# of smt-solver-queries.: 291
L0%0%d=>Lfor.cond%1%bbentry-src_ecs.: 4
L0%0%d=>Lfor.cond%1%bbentry-src_to_pcs.: 4
Lfor.cond%1%bbentry=>E0%0%d-src_ecs.: 1
Lfor.cond%1%bbentry=>E0%0%d-src_to_pcs.: 1
Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry-src_ecs.: 5
Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry-src_to_pcs.: 4
Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry-src_ecs.: 1
Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry-src_to_pcs.: 1
Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry-src_ecs.: 2
Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry-src_to_pcs.: 1
num-backtrackings.: 4
removed-siblings.: 2
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.iters.: 2
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.prove_queries.: 2
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%11%bbentry_Lfor.cond1%1%bbentry.iters.: 3
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%11%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%19%bbentry_Lfor.cond1%1%bbentry.iters.: 17
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%19%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 18
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.iters.: 2
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%11%bbentry_Lfor.cond1%1%bbentry.iters.: 1
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%11%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 1
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%19%bbentry_Lfor.cond1%1%bbentry.iters.: 12
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%19%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 18
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 19
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 8
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry.from.L3%19%bbentry_Lfor.cond1%1%bbentry.iters.: 4
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry.from.L3%19%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 8
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 18
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L0%0%d_L0%0%d.iters.: 1
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L0%0%d_L0%0%d.prove_queries.: 1
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%11%bbentry_Lfor.cond1%1%bbentry.iters.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%11%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%19%bbentry_Lfor.cond1%1%bbentry.iters.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%19%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 4
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 4
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L0%0%d_L0%0%d.iters.: 2
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L0%0%d_L0%0%d.prove_queries.: 2
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%11%bbentry_Lfor.cond1%1%bbentry.iters.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%11%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%19%bbentry_Lfor.cond1%1%bbentry.iters.: 4
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%19%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 20
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 20
smallest_point_cover_xfer.dst-ineq.from.L0%0%d_L0%0%d.iters.: 2
smallest_point_cover_xfer.dst-ineq.from.L0%0%d_L0%0%d.prove_queries.: 4
smallest_point_cover_xfer.dst-ineq.from.L3%11%bbentry_Lfor.cond1%1%bbentry.iters.: 3
smallest_point_cover_xfer.dst-ineq.from.L3%11%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 3
smallest_point_cover_xfer.dst-ineq.from.L3%19%bbentry_Lfor.cond1%1%bbentry.iters.: 19
smallest_point_cover_xfer.dst-ineq.from.L3%19%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 20
smallest_point_cover_xfer.dst-ineq.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 18
smallest_point_cover_xfer.dst-ineq.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 82
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.iters.: 7
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.prove_queries.: 7
smallest_point_cover_xfer.expr-group-bvs.from.L3%11%bbentry_Lfor.cond1%1%bbentry.iters.: 3
smallest_point_cover_xfer.expr-group-bvs.from.L3%11%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 3
smallest_point_cover_xfer.expr-group-bvs.from.L3%19%bbentry_Lfor.cond1%1%bbentry.iters.: 20
smallest_point_cover_xfer.expr-group-bvs.from.L3%19%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 40
smallest_point_cover_xfer.expr-group-bvs.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 24
smallest_point_cover_xfer.expr-group-bvs.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 37
smallest_point_cover_xfer.local-sizes-are-equal.from.L0%0%d_L0%0%d.iters.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L3%11%bbentry_Lfor.cond1%1%bbentry.iters.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L3%11%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L3%19%bbentry_Lfor.cond1%1%bbentry.iters.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L3%19%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.spec-coupling-invariants.from.L0%0%d_L0%0%d.iters.: 7
smallest_point_cover_xfer.spec-coupling-invariants.from.L0%0%d_L0%0%d.prove_queries.: 9
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%11%bbentry_Lfor.cond1%1%bbentry.iters.: 3
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%11%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%19%bbentry_Lfor.cond1%1%bbentry.iters.: 17
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%19%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 12
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 49
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 74
smallest_point_cover_xfer.src-branches-const-ineq.from.L0%0%d_L0%0%d.iters.: 2
smallest_point_cover_xfer.src-branches-const-ineq.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%11%bbentry_Lfor.cond1%1%bbentry.iters.: 5
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%11%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 5
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%19%bbentry_Lfor.cond1%1%bbentry.iters.: 22
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%19%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 24
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 35
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 41
smt-queries-cache-hits.: 206
smt-queries-cvc4-sat.: 1
smt-queries-yices-sat.: 1
smt-queries-z3-sat.: 143
total-correlation-possibilities.: 17
total-correlation-possibilities-mod-lsprels.: 17
total-correlations-explored.: 12

flags:
dst-aloc.: 0
dst-edges.: 11
dst-nodes.: 10
dst-sp-updates.: 0
final-CG-alloc-correlations.: 0
final-CG-counterexamples-generated-at-L3%19%bbentry_Lfor.cond1%1%bbentry.: 20
final-CG-counterexamples-generated-at-L3%7%bbentry_Lfor.cond%1%bbentry.: 16
final-CG-counterexamples-total-at-L3%19%bbentry_Lfor.cond1%1%bbentry.: 42
final-CG-counterexamples-total-at-L3%7%bbentry_Lfor.cond%1%bbentry.: 30
final-CG-dealloc-correlations.: 0
final-CG-dht-queries.: 5
final-CG-edges.: 5
final-CG-nodes.: 4
final-CG-num-invariants.: 29
final-CG-super-edges.: 0
src-edges.: 11
src-nodes.: 10
timeout-occured.: 0

info:
eq-state.: find_correlation
final-CG-time-secs.: 65.09
final-CG-time-to-total-time-ratio.: 0.71
query-time-to-total-time-ratio.: 0.25

Context stats:
exprs: count: 251115
sorts: count: 164
num_proof_queries: 496
num_proof_queries_answered_by_syntactic_check: 0
cache_stats:
m_simplify:
	----------- total:	60189
	        hit ratio:	0.991477
m_simplify_solver:
	----------- total:	5564
	        hit ratio:	0.841301
m_prune_obviously_false_branches_using_assume_clause:
	----------- total:	60
	        hit ratio:	0.333333
m_z3_solver_substitution:
	----------- total:	883
	        hit ratio:	0
m_replace_donotsimplify_using_solver_expressions_by_free_vars:
	----------- total:	883
	        hit ratio:	0
m_expr_size:
	----------- total:	17439
	        hit ratio:	0.940765
m_contains_only_constants_or_sp_versions:
	----------- total:	24
	        hit ratio:	0.791667
m_expr_evaluates_to_constant_visitor:
	----------- total:	209767
	        hit ratio:	0.483198

z3_solver expr_query_cache entry size: 291
	----------- total:	497
	             hits:	206
	        hit ratio:	0.414487
histogram (time taken by solver in ms):
[ 32.3900,  43.6679) (avg.  39.8166)     : 55
[ 43.6679,  58.8727) (avg.  49.9087)     : 104
[ 58.8727,  79.3717) (avg.  67.1833)     : 58
[ 79.3717, 107.0082) (avg.  89.9724)     : 25
[107.0082, 144.2675) (avg. 122.1073)     : 29
[144.2675, 194.5001) (avg. 177.5775)     : 4
[194.5001, 262.2234) (avg. 228.6275)     : 4
[262.2234, 353.5272) (avg. 289.3112)     : 5
[353.5272, 476.6223) (avg. 423.1237)     : 3
[476.6223, 642.5780) (avg. 533.0007)     : 4
histogram (number of quantifiers in query)
[ 0,  5) (avg.  0)                       : 1
[ 5,  9) (avg.  0)                       : 0
[ 9, 14) (avg. 12)                       : 19
[14, 18) (avg. 14)                       : 3
[18, 23) (avg. 20)                       : 149
[23, 27) (avg. 23)                       : 33
[27, 32) (avg. 31)                       : 82
[32, 36) (avg. 35)                       : 4
[36, 41) (avg.  0)                       : 0
[41, 45) (avg.  0)                       : 0
histogram (number of nodes in z3 ast)
[103, 159) (avg. 103)                    : 1
[159, 214) (avg.   0)                    : 0
[214, 270) (avg.   0)                    : 0
[270, 325) (avg. 302)                    : 54
[325, 381) (avg. 346)                    : 123
[381, 436) (avg. 391)                    : 14
[436, 492) (avg. 467)                    : 15
[492, 547) (avg. 534)                    : 21
[547, 603) (avg. 579)                    : 50
[603, 658) (avg. 624)                    : 13
Top 10 highest time taking queries:
1. [0.642s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.lb-signed.from_pcL3%7%bbentry_Lfor.cond%1%bbentry.cond_ap.13
2. [0.502s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.dst-ineq-houdini-guess.from_pcL3%19%bbentry_Lfor.cond1%1%bbentry.cond_apply_set_elem0_of_1.11
3. [0.497s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.expr-group-bvs.linear1-7-free_var_idx.40.from_pcL3%19%bbentry_Lfor.cond1%1%bbentry.cond_apply_set_elem0_of_2.0
4. [0.492s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.dst-ineq-houdini-guess.from_pcL3%19%bbentry_Lfor.cond1%1%bbentry.cond_apply_set_elem0_of_1.15
5. [0.459s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.expr-group-bvs.linear1-2-free_var_idx.40.from_pcL3%19%bbentry_Lfor.cond1%1%bbentry.cond_apply_set_elem0_of_2.0
6. [0.437s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.ub-unsigned.from_pcL3%19%bbentry_Lfor.cond1%1%bbentry.cond_apply_set_elem0_of_2.0
7. [0.373s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.dst_edge_composition_proves_false.CGfromPC.L3%11%bbentry_Lfor.cond1%1%bbentry.dstToPC.Lfor.cond1%1%bbentry.from_pcL3%11%b.0
8. [0.313s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.expr-group-bvs.linear1-32-free_var_idx.7.from_pcL3%19%bbentry_Lfor.cond1%1%bbentry.cond_apply_set_elem0_of_1.10
9. [0.294s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.dst_edge_composition_proves_false.CGfromPC.L3%19%bbentry_Lfor.cond1%1%bbentry.dstToPC.Lfor.cond1%1%bbentry.from_pcL3%19%b.0
10. [0.284s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.ub-unsigned.from_pcL3%7%bbentry_Lfor.cond%1%bbentry.cond_apply_set_elem0_of_1.26

<MSG>1:56 : Successfully computed equivalence for function: foo.</MSG>

tfg_edge_expr_wp_fn: num_starts 199 time spent: 0:0:0 [0.004287s total; 0.000022 per start]
tfg_computeWP: num_starts 6492 time spent: 0:0:0 [0.848588s total; 0.000131 per start]
tfg_get_simplified_to_state_for_edge: num_starts 14524 time spent: 0:0:0 [0.027781s total; 0.000002 per start]
tfg_get_simplified_edge_cond_for_edge: num_starts 9290 time spent: 0:0:0 [0.017111s total; 0.000002 per start]
tfg_get_simplified_assumes_for_edge: num_starts 7442 time spent: 0:0:0 [0.012668s total; 0.000002 per start]
add_nodeces_at_pc_and_propagate: num_starts 175 time spent: 0:0:20 [20.298670s total; 0.115992 per start]
graph_with_ce_propagate_CEs_across_new_edge_for_reason: num_starts 26 time spent: 0:0:21 [21.420657s total; 0.823871 per start]
tfg_counter_example_translate_on_edge_helper: num_starts 1578 time spent: 0:0:10 [10.211783s total; 0.006471 per start]
corr_graph_edge_well_formedness_conditions_falsified_by_counter_example: num_starts 503 time spent: 0:0:25 [25.940104s total; 0.051571 per start]
counter_example_translate_using_to_state_mapping_assigning_random_consts_as_needed: num_starts 1440 time spent: 0:0:7 [7.237111s total; 0.005026 per start]
ce_evaluate_expr_assigning_random_consts_as_needed: num_starts 6827 time spent: 0:0:35 [35.396068s total; 0.005185 per start]
tfg_edge_assumes_satisfied_by_counter_example: num_starts 1449 time spent: 0:0:0 [0.086073s total; 0.000059 per start]
tfg_graph_get_vars_written_on_edge: num_starts 1440 time spent: 0:0:0 [0.036264s total; 0.000025 per start]
cg_with_rank_add_CE_at_pc: num_starts 266 time spent: 0:0:11 [11.028260s total; 0.041460 per start]
graph_with_ce_add_CE_at_pc: num_starts 139 time spent: 0:0:0 [0.006566s total; 0.000047 per start]
graph_with_guessing_add_CE_at_pc: num_starts 266 time spent: 0:0:11 [11.021621s total; 0.041435 per start]
point_set_add_point_using_CE: num_starts 1805 time spent: 0:0:0 [0.593810s total; 0.000329 per start]
graph_with_points_add_point_using_CE_at_pc: num_starts 1805 time spent: 0:0:0 [0.597611s total; 0.000331 per start]
graph_with_guessing_add_point_using_CE_at_pc: num_starts 203 time spent: 0:0:1 [1.262619s total; 0.006220 per start]
invariant_state_add_point_using_CE_at_pc: num_starts 203 time spent: 0:0:0 [0.658004s total; 0.003241 per start]
expr_label_memlabels_using_memlabel_map: num_starts 50726 time spent: 0:0:1 [1.712462s total; 0.000034 per start]
evaluate_expr_assigning_random_consts_and_check_bounds: num_starts 10040 time spent: 0:0:0 [0.302130s total; 0.000030 per start]
expr_simplify_solver: num_starts 5684 time spent: 0:0:0 [0.378200s total; 0.000067 per start]
expr_simplify_syntactic: num_starts 6188 time spent: 0:0:0 [0.968776s total; 0.000157 per start]
expr_simplify_select_on_store: num_starts 351 time spent: 0:0:0 [0.881032s total; 0.002510 per start]
expr_simplify_using_lhs_set_helper: num_starts 1599 time spent: 0:0:1 [1.474259s total; 0.000922 per start]
expr_simplify_using_lhs_set_visit_function: num_starts 11183 time spent: 0:0:1 [1.461302s total; 0.000131 per start]
expr_simplify_sort_args_to_canonicalize: num_starts 5895 time spent: 0:0:0 [0.021236s total; 0.000004 per start]
expr_simplify_eq: num_starts 651 time spent: 0:0:0 [0.005724s total; 0.000009 per start]
expr_simplify_or: num_starts 51 time spent: 0:0:0 [0.000076s total; 0.000001 per start]
expr_simplify_and: num_starts 554 time spent: 0:0:0 [0.003576s total; 0.000006 per start]
expr_simplify_andnot1: num_starts 48 time spent: 0:0:0 [0.000650s total; 0.000014 per start]
expr_simplify_andnot2: num_starts 1 time spent: 0:0:0 [0.000016s total; 0.000016 per start]
expr_simplify_not: num_starts 86 time spent: 0:0:0 [0.000266s total; 0.000003 per start]
expr_simplify_implies: num_starts 38 time spent: 0:0:0 [0.000336s total; 0.000009 per start]
expr_simplify_ite: num_starts 14 time spent: 0:0:0 [0.001496s total; 0.000107 per start]
canonicalize_expr_tree: num_starts 949 time spent: 0:0:0 [0.070473s total; 0.000074 per start]
expr_simplify_memalloc_using_memlabel: num_starts 78 time spent: 0:0:0 [0.000224s total; 0.000003 per start]
expr_simplify_select_on_store_visit_function: num_starts 351 time spent: 0:0:0 [0.867635s total; 0.002472 per start]
get_arithmetic_addsub_atoms: num_starts 9977 time spent: 0:0:0 [0.005987s total; 0.000001 per start]
expr_linear_relation_holds_visit: num_starts 1432 time spent: 0:0:0 [0.014954s total; 0.000010 per start]
expr_is_consts_struct_constant: num_starts 1419 time spent: 0:0:0 [0.000960s total; 0.000001 per start]
expr_do_simplify_helper: num_starts 60722 time spent: 0:0:0 [0.908090s total; 0.000015 per start]
expr_do_simplify_helper_cache: num_starts 60722 time spent: 0:0:0 [0.062729s total; 0.000001 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor_cache: num_starts 72 time spent: 0:0:0 [0.000021s total; 0.000000 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor: num_starts 72 time spent: 0:0:0 [0.000458s total; 0.000006 per start]
evaluate_expr_and_check_bounds: num_starts 13813 time spent: 0:0:35 [35.696204s total; 0.002584 per start]
array_constant_equals: num_starts 64739 time spent: 0:0:0 [0.057956s total; 0.000001 per start]
combo_dfa_xfer_and_meet: num_starts 69 time spent: 0:0:0 [0.372638s total; 0.005401 per start]
alias_val_xfer_and_meet: num_starts 69 time spent: 0:0:0 [0.269094s total; 0.003900 per start]
get_sprel_map_from_avail_exprs: num_starts 95 time spent: 0:0:0 [0.010959s total; 0.000115 per start]
update_memlabels_for_memslot_locs: num_starts 24 time spent: 0:0:0 [0.000118s total; 0.000005 per start]
populate_gen_and_kill_sets_for_edge: num_starts 336 time spent: 0:0:0 [0.064961s total; 0.000193 per start]
compute_simplified_loc_exprs_for_edge: num_starts 703 time spent: 0:0:0 [0.175117s total; 0.000249 per start]
compute_locs_definitely_written_on_edge: num_starts 336 time spent: 0:0:0 [0.000592s total; 0.000002 per start]
get_locs_potentially_read_in_expr_using_locs_map: num_starts 62 time spent: 0:0:0 [0.008035s total; 0.000130 per start]
edge_update_memlabel_map_for_mlvars: num_starts 168 time spent: 0:0:0 [0.053501s total; 0.000318 per start]
add_new_locs_based_on_edge: num_starts 69 time spent: 0:0:0 [0.193638s total; 0.002806 per start]
expand_locset_to_include_slots_for_memmask: num_starts 113 time spent: 0:0:0 [0.000420s total; 0.000004 per start]
total: num_starts 1 time spent: 0:2:3 [123.104213s total; 123.104213 per start]
num_syntactic_match_tests = 0.
num_execution_tests = 0.
num_boolean_tests = 0.
fingerprinting rate: 0.00 per second (total), -nan per second (itable_enumerate_timer), -nan per second (excluding execution/boolean tests).

Time taken for equivalence check: 94.05s.
ftmap_run_pointsto_analysis.: 0.471082s (num_starts 2; 0.2355s/start)s.
EQ Time after pointsto analysis: 93.5752s.
EQ Time after pointsto analysis and smt_query: 41.8196s.
EQ Time after pointsto analysis and smt_query and bv-solve: 41.6632s.
Equivalence proof found. The programs are equivalent.
