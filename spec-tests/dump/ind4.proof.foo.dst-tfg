=TFG_SSA:
=TFG_LLVM dst.llvm.foo:
=TFG:
=Nodes: L0%0%d Lwhile.body%1%d Lwhile.cond%1%bbentry Lwhile.cond%2%d Lwhile.end%1%d E0%0%d
=Edges:
L0%0%d => Lwhile.cond%1%bbentry
Lwhile.cond%1%bbentry => Lwhile.cond%2%d
Lwhile.cond%2%d => Lwhile.body%1%d
Lwhile.cond%2%d => Lwhile.end%1%d
Lwhile.end%1%d => E0%0%d
Lwhile.body%1%d => Lwhile.cond%1%bbentry (backedge) 
=graph done
=is_ssa_graph:
1
=StartState:
=dst.llvm-%l
1 : input.dst.llvm-%l : BV:32
=dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=state_end
=PC to var-version map at L0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lwhile.body%1%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lwhile.cond%1%bbentry
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lwhile.cond%2%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lwhile.end%1%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at E0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=graph_with_var_versions done
=FunctionName: foo
=Input: tfg-method-arg.0
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%l : BV:32
=arg end
=Node outputs: E0%0%d
=Output: heap
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=Output: llvm-indir_tgt
1 : retaddr_const : BV:32
=Output: llvm-%ret-reg
1 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : foo : 18 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%l : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;foo}
=memlabel_map.0 for call-context {*;foo}
mlheap.dst.llvm.foo : memlabel-mem-may-straddle-symbol.1-heap
=memlabel_map.1 for call-context {*;foo}
mlvar.dst.llvm.foo.0 : memlabel-mem-no-straddle-symbol.1-heap-arg.0
=memlabel_map.2 for call-context {*;foo}
mlvar.dst.llvm.foo.1 : memlabel-mem-no-straddle-symbol.1-heap-arg.0
=Edge: L0%0%d => Lwhile.cond%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.cur_rounding_mode.Lwhile.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%l : BV:32
=dst.llvm-%l.addr.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%l : BV:32
=dst.llvm-%sum.0.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%sum.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-ghostvar.itervar.1.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.local_alloc_count.Lwhile.cond%1%bbentry
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : input.dst.llvm-%l : BV:32
2 : 8 { 0x8 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:-1:((((((start_pc_edge*  br label %while.cond, !dbg !23)*  %sum.0 = phi i32 [ 0, %entry ], [ %add, %while.body ], !dbg !21)*(  %l.addr.0 = phi %struct.list* [ %l, %entry ], [ %1, %while.body ]*  br label %while.cond, !dbg !23))*  br label %while.cond, !dbg !23)*(  br label %while.cond, !dbg !23*  br label %while.cond, !dbg !23))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=Edge: Lwhile.cond%1%bbentry => Lwhile.cond%2%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%tobool.Lwhile.cond%2%d
1 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : not(3) : BOOL
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*  %tobool = icmp ne %struct.list* %l.addr.0, null, !dbg !23)
tfg_edge_comment end

=Edge: Lwhile.cond%2%d => Lwhile.body%1%d
=Edge.EdgeCond: 
1 : input.dst.llvm-%tobool.Lwhile.cond%2%d : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %tobool, label %while.body, label %while.end, !dbg !23*  br i1 %tobool, label %while.body, label %while.end, !dbg !23)*  br i1 %tobool, label %while.body, label %while.end, !dbg !23)
tfg_edge_comment end

=Edge: Lwhile.cond%2%d => Lwhile.end%1%d
=Edge.EdgeCond: 
1 : input.dst.llvm-%tobool.Lwhile.cond%2%d : BOOL
2 : not(1) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %tobool, label %while.body, label %while.end, !dbg !23*  br i1 %tobool, label %while.body, label %while.end, !dbg !23)*  br i1 %tobool, label %while.body, label %while.end, !dbg !23)
tfg_edge_comment end

=Edge: Lwhile.end%1%d => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:1:  ret i32 %sum.0, !dbg !30
tfg_edge_comment end

=Edge: Lwhile.body%1%d => Lwhile.cond%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.1 : MEMLABEL
4 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : 8 { 0x8 +1.95e129 } : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(5, 7) : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(8, 9) : BV:32
11 : bvadd(4, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(1, 2, 3, 11, 12, 13) : BV:32
=dst.llvm-%sum.0.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : mlvar.dst.llvm.foo.0 : MEMLABEL
5 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
6 : 0 { 0x0 +1.0e129 } : BV:32
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(6, 8) : BV:32
10 : bvadd(9, 6) : BV:32
11 : bvadd(5, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(2, 3, 4, 11, 12, 13) : BV:32
15 : bvadd(1, 14) : BV:32
=dst.llvm-ghostvar.itervar.1.Lwhile.cond%1%bbentry
1 : input.dst.llvm-ghostvar.itervar.1.Lwhile.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%0.Lwhile.cond%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.0 : MEMLABEL
4 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : 8 { 0x8 +1.95e129 } : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(5, 7) : BV:32
9 : bvadd(8, 5) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
=dst.llvm-%1.Lwhile.cond%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.1 : MEMLABEL
4 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : 8 { 0x8 +1.95e129 } : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(5, 7) : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(8, 9) : BV:32
11 : bvadd(4, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(1, 2, 3, 11, 12, 13) : BV:32
=dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.1.total_offset.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvadd(1, 3) : BV:32
=dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.2.total_offset.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvadd(1, 3) : BV:32
5 : bvadd(4, 1) : BV:32
=dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.3.total_offset.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 8 { 0x8 +1.95e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(2, 4) : BV:32
6 : bvadd(5, 2) : BV:32
7 : bvadd(1, 6) : BV:32
=dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%add.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : mlvar.dst.llvm.foo.0 : MEMLABEL
5 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
6 : 0 { 0x0 +1.0e129 } : BV:32
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(6, 8) : BV:32
10 : bvadd(9, 6) : BV:32
11 : bvadd(5, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(2, 3, 4, 11, 12, 13) : BV:32
15 : bvadd(1, 14) : BV:32
=dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.1.total_offset.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvadd(1, 3) : BV:32
=dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.2.total_offset.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvadd(1, 3) : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvadd(4, 5) : BV:32
=dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.3.total_offset.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 8 { 0x8 +1.95e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(2, 4) : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvadd(5, 6) : BV:32
8 : bvadd(1, 7) : BV:32
=dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=dst.llvm-%l.addr.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.1 : MEMLABEL
4 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : 8 { 0x8 +1.95e129 } : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(5, 7) : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(8, 9) : BV:32
11 : bvadd(4, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(1, 2, 3, 11, 12, 13) : BV:32
=dst.llvm-%next.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 8 { 0x8 +1.95e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(2, 4) : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvadd(5, 6) : BV:32
8 : bvadd(1, 7) : BV:32
=dst.llvm-%sum.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : mlvar.dst.llvm.foo.0 : MEMLABEL
5 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
6 : 0 { 0x0 +1.0e129 } : BV:32
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(6, 8) : BV:32
10 : bvadd(9, 6) : BV:32
11 : bvadd(5, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(2, 3, 4, 11, 12, 13) : BV:32
15 : bvadd(1, 14) : BV:32
=dst.llvm-%val.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 8 { 0x8 +1.95e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(2, 4) : BV:32
6 : bvadd(5, 2) : BV:32
7 : bvadd(1, 6) : BV:32
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvslt(1, 1) : BOOL
3 : 32 { 0x20 +1.0e1025 } : INT
4 : bvsign_ext(1, 3) : BV:64
5 : 8 { 0x8 +1.95e129 } : BV:32
6 : bvzero_ext(5, 3) : BV:64
7 : bvmul(4, 6) : BV:64
8 : 63 { 0x3f +1.0e1025 } : INT
9 : bvextract(7, 8, 3) : BV:32
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : eq(9, 10) : BOOL
12 : eq(9, 1) : BOOL
13 : ite(2, 11, 12) : BOOL
14 : 8 { 0x8 +1.0e1025 } : INT
15 : isindexforsize(13, 14) : BOOL
16 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
17 : bvmul(1, 5) : BV:32
18 : bvadd(1, 17) : BV:32
19 : bvadd(16, 18) : BV:32
20 : isgepoffset(19, 17) : BOOL
21 : and(15, 20) : BOOL
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvadd(18, 22) : BV:32
24 : bvadd(16, 23) : BV:32
25 : isgepoffset(24, 22) : BOOL
26 : and(21, 25) : BOOL
27 : 4 { 0x4 +1.0e1025 } : INT
28 : islangaligned(24, 27) : BOOL
29 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
30 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
31 : mlvar.dst.llvm.foo.1 : MEMLABEL
32 : 0 { 0x0 } : BOOL
33 : select(29, 30, 31, 24, 27, 32) : BV:32
34 : islangaligned(33, 14) : BOOL
35 : and(34, 28) : BOOL
36 : and(28, 35) : BOOL
37 : and(26, 36) : BOOL
=EdgeAssume.1
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvslt(1, 1) : BOOL
3 : 32 { 0x20 +1.0e1025 } : INT
4 : bvsign_ext(1, 3) : BV:64
5 : 8 { 0x8 +1.95e129 } : BV:32
6 : bvzero_ext(5, 3) : BV:64
7 : bvmul(4, 6) : BV:64
8 : 63 { 0x3f +1.0e1025 } : INT
9 : bvextract(7, 8, 3) : BV:32
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : eq(9, 10) : BOOL
12 : eq(9, 1) : BOOL
13 : ite(2, 11, 12) : BOOL
14 : 8 { 0x8 +1.0e1025 } : INT
15 : isindexforsize(13, 14) : BOOL
16 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
17 : bvmul(1, 5) : BV:32
18 : bvadd(1, 17) : BV:32
19 : bvadd(16, 18) : BV:32
20 : isgepoffset(19, 17) : BOOL
21 : and(15, 20) : BOOL
22 : bvadd(18, 1) : BV:32
23 : bvadd(16, 22) : BV:32
24 : isgepoffset(23, 1) : BOOL
25 : and(21, 24) : BOOL
26 : 4 { 0x4 +1.0e1025 } : INT
27 : islangaligned(23, 26) : BOOL
28 : and(25, 27) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:1:((((  %val = getelementptr inbounds %struct.list, %struct.list* %l.addr.0, i32 0, i32 0, !dbg !24*  %val = getelementptr inbounds %struct.list, %struct.list* %l.addr.0, i32 0, i32 0, !dbg !24)*(  %val = getelementptr inbounds %struct.list, %struct.list* %l.addr.0, i32 0, i32 0, !dbg !24*  %val = getelementptr inbounds %struct.list, %struct.list* %l.addr.0, i32 0, i32 0, !dbg !24))*((  %0 = load i32, i32* %val, align 4, !dbg !24*  %0 = load i32, i32* %val, align 4, !dbg !24)*  %add = add i32 %sum.0, %0, !dbg !26))*(((  %next = getelementptr inbounds %struct.list, %struct.list* %l.addr.0, i32 0, i32 1, !dbg !27*  %next = getelementptr inbounds %struct.list, %struct.list* %l.addr.0, i32 0, i32 1, !dbg !27)*(  %next = getelementptr inbounds %struct.list, %struct.list* %l.addr.0, i32 0, i32 1, !dbg !27*  %next = getelementptr inbounds %struct.list, %struct.list* %l.addr.0, i32 0, i32 1, !dbg !27))*(((((((  %1 = load %struct.list*, %struct.list** %next, align 4, !dbg !27*  %1 = load %struct.list*, %struct.list** %next, align 4, !dbg !27)*  br label %while.cond, !dbg !23, !llvm.loop !28)*  %sum.0 = phi i32 [ 0, %entry ], [ %add, %while.body ], !dbg !21)*(  %l.addr.0 = phi %struct.list* [ %l, %entry ], [ %1, %while.body ]*  br label %while.cond, !dbg !23, !llvm.loop !28))*  br label %while.cond, !dbg !23, !llvm.loop !28)*(  br label %while.cond, !dbg !23, !llvm.loop !28*  br label %while.cond, !dbg !23, !llvm.loop !28))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))))
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%l : BV:32
=predicate done
=graph_with_precondition_done

=Locs in dst.llvm.foo
=Loc 100002 in dst.llvm.foo.
REGMEM
dst.llvm-%l
1 : input.dst.llvm-%l : BV:32
=Loc 100024 in dst.llvm.foo.
REGMEM
dst.llvm-%hidden-reg
1 : input.dst.llvm-%hidden-reg : BV:32
=Loc 100026 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.0
1 : input.dst.llvm-callee-save.0 : BV:32
=Loc 100027 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.1
1 : input.dst.llvm-callee-save.1 : BV:32
=Loc 100028 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.2
1 : input.dst.llvm-callee-save.2 : BV:32
=Loc 100029 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.3
1 : input.dst.llvm-callee-save.3 : BV:32
=Loc 100033 in dst.llvm.foo.
REGMEM
dst.local_alloc_count.=L0%0%d=
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=Loc 100034 in dst.llvm.foo.
REGMEM
dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=Loc 100036 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 100037 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
=Loc 100038 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem-may-straddle-symbol.1-heap
=Loc 100039 in dst.llvm.foo.
REGMEM
dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=Loc 100040 in dst.llvm.foo.
REGMEM
dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=Loc 100041 in dst.llvm.foo.
REGMEM
dst.llvm-%sum.0.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
=Loc 100042 in dst.llvm.foo.
REGMEM
dst.llvm-indir_tgt.E0%0%d
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=Loc 100043 in dst.llvm.foo.
REGMEM
dst.llvm-%tobool.Lwhile.cond%2%d
1 : input.dst.llvm-%tobool.Lwhile.cond%2%d : BOOL
=Loc 100044 in dst.llvm.foo.
REGMEM
dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
=Loc 100045 in dst.llvm.foo.
REGMEM
dst.llvm-%l.addr.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%l.addr.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry : BV:32
=Loc 100046 in dst.llvm.foo.
REGMEM
dst.llvm-%sum.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%sum.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry : BV:32
=Loc 100047 in dst.llvm.foo.
REGMEM
dst.llvm-ghostvar.itervar.1.Lwhile.cond%1%bbentry
1 : input.dst.llvm-ghostvar.itervar.1.Lwhile.cond%1%bbentry : BV:32
=Loc 100048 in dst.llvm.foo.
REGMEM
dst.llvm-%0.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%0.Lwhile.cond%1%bbentry : BV:32
=Loc 100049 in dst.llvm.foo.
REGMEM
dst.llvm-%1.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%1.Lwhile.cond%1%bbentry : BV:32
=Loc 100050 in dst.llvm.foo.
REGMEM
dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.1.total_offset.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.1.total_offset.Lwhile.cond%1%bbentry : BV:32
=Loc 100051 in dst.llvm.foo.
REGMEM
dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.2.total_offset.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.2.total_offset.Lwhile.cond%1%bbentry : BV:32
=Loc 100052 in dst.llvm.foo.
REGMEM
dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.3.total_offset.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.3.total_offset.Lwhile.cond%1%bbentry : BV:32
=Loc 100053 in dst.llvm.foo.
REGMEM
dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry : BV:32
=Loc 100054 in dst.llvm.foo.
REGMEM
dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry : BV:32
=Loc 100055 in dst.llvm.foo.
REGMEM
dst.llvm-%add.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%add.Lwhile.cond%1%bbentry : BV:32
=Loc 100056 in dst.llvm.foo.
REGMEM
dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.1.total_offset.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.1.total_offset.Lwhile.cond%1%bbentry : BV:32
=Loc 100057 in dst.llvm.foo.
REGMEM
dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.2.total_offset.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.2.total_offset.Lwhile.cond%1%bbentry : BV:32
=Loc 100058 in dst.llvm.foo.
REGMEM
dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.3.total_offset.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.3.total_offset.Lwhile.cond%1%bbentry : BV:32
=Loc 100059 in dst.llvm.foo.
REGMEM
dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry : BV:32
=Loc 100060 in dst.llvm.foo.
REGMEM
dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry : BV:32
=Loc 100061 in dst.llvm.foo.
REGMEM
dst.llvm-%l.addr.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%l.addr.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry : BV:32
=Loc 100062 in dst.llvm.foo.
REGMEM
dst.llvm-%next.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%next.Lwhile.cond%1%bbentry : BV:32
=Loc 100063 in dst.llvm.foo.
REGMEM
dst.llvm-%sum.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%sum.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry : BV:32
=Loc 100064 in dst.llvm.foo.
REGMEM
dst.llvm-%val.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%val.Lwhile.cond%1%bbentry : BV:32
=Loc 100065 in dst.llvm.foo.
REGMEM
dst.local_alloc_count.Lwhile.cond%1%bbentry
1 : input.dst.local_alloc_count.Lwhile.cond%1%bbentry : COUNT
=Loc 100066 in dst.llvm.foo.
REGMEM
dst.cur_rounding_mode.Lwhile.cond%1%bbentry
1 : input.dst.cur_rounding_mode.Lwhile.cond%1%bbentry : ROUNDING_MODE
=Locs end
=Liveness in dst.llvm.foo
=live locs at L0%0%d
100002, 100037, 100038, 
=live locs at Lwhile.body%1%d
100037, 100038, 100041, 100044, 
=live locs at Lwhile.cond%1%bbentry
100037, 100038, 100041[f], 100044, 
=live locs at Lwhile.cond%2%d
100037, 100038, 100041[f], 100043, 100044, 
=live locs at Lwhile.end%1%d
100038, 100041[f], 
=live locs at E0%0%d
100038, 100041[f], 

=Definedness in dst.llvm.foo
=loc definedness at L0%0%d
100002, 100034, 100036, 100037, 100038
=loc definedness at Lwhile.body%1%d
100002, 100034, 100036, 100037, 100038, 100041, 100043, 100044, 100045, 100046, 100047, 100065, 100066
=loc definedness at Lwhile.cond%1%bbentry
100002, 100034, 100036, 100037, 100038, 100041, 100044, 100045, 100046, 100047, 100065, 100066
=loc definedness at Lwhile.cond%2%d
100002, 100034, 100036, 100037, 100038, 100041, 100043, 100044, 100045, 100046, 100047, 100065, 100066
=loc definedness at Lwhile.end%1%d
100002, 100034, 100036, 100037, 100038, 100041, 100043, 100044, 100045, 100046, 100047, 100065, 100066
=loc definedness at E0%0%d
100002, 100034, 100036, 100037, 100038, 100039, 100040, 100041, 100042, 100043, 100044, 100045, 100046, 100047, 100065, 100066

=Branch affecting variable locs in dst.llvm.foo
=branch affecting variable locs at L0%0%d
100002, 100038
=branch affecting variable locs at Lwhile.body%1%d
100038
=branch affecting variable locs at Lwhile.cond%1%bbentry
100038, 100044
=branch affecting variable locs at Lwhile.cond%2%d
100038, 100043
=branch affecting variable locs at Lwhile.end%1%d

=branch affecting variable locs at E0%0%d


=Relevant Memlabels in dst.llvm.foo
=relevant memlabels
=function: foo
memlabel-mem--arg.0
memlabel-mem-may-straddle-symbol.1-heap
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lwhile.cond%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lwhile.cond%1%bbentry for loc_id 100041 {input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lwhile.cond%1%bbentry for loc_id 100044 {input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry }
1 : input.dst.llvm-%l : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lwhile.cond%1%bbentry for loc_id 100045 {input.dst.llvm-%l.addr.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry }
1 : input.dst.llvm-%l : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lwhile.cond%1%bbentry for loc_id 100046 {input.dst.llvm-%sum.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lwhile.cond%1%bbentry for loc_id 100047 {input.dst.llvm-ghostvar.itervar.1.Lwhile.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lwhile.cond%1%bbentry for loc_id 100065 {input.dst.local_alloc_count.Lwhile.cond%1%bbentry }
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lwhile.cond%1%bbentry for loc_id 100066 {input.dst.cur_rounding_mode.Lwhile.cond%1%bbentry }
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lwhile.cond%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at Lwhile.body%1%d=>Lwhile.cond%1%bbentry for loc_id 100041 {input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry }
1 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
5 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
6 : 4 { 0x4 +1.0e1025 } : INT
7 : 0 { 0x0 } : BOOL
8 : select(2, 3, 4, 5, 6, 7) : BV:32
9 : bvadd(1, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lwhile.body%1%d=>Lwhile.cond%1%bbentry for loc_id 100044 {input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
6 : bvadd(4, 5) : BV:32
7 : 4 { 0x4 +1.0e1025 } : INT
8 : 0 { 0x0 } : BOOL
9 : select(1, 2, 3, 6, 7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lwhile.body%1%d=>Lwhile.cond%1%bbentry for loc_id 100047 {input.dst.llvm-ghostvar.itervar.1.Lwhile.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-ghostvar.itervar.1.Lwhile.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lwhile.body%1%d=>Lwhile.cond%1%bbentry for loc_id 100048 {input.dst.llvm-%0.Lwhile.cond%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lwhile.body%1%d=>Lwhile.cond%1%bbentry for loc_id 100049 {input.dst.llvm-%1.Lwhile.cond%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
6 : bvadd(4, 5) : BV:32
7 : 4 { 0x4 +1.0e1025 } : INT
8 : 0 { 0x0 } : BOOL
9 : select(1, 2, 3, 6, 7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lwhile.body%1%d=>Lwhile.cond%1%bbentry for loc_id 100050 {input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.1.total_offset.Lwhile.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lwhile.body%1%d=>Lwhile.cond%1%bbentry for loc_id 100051 {input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.2.total_offset.Lwhile.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lwhile.body%1%d=>Lwhile.cond%1%bbentry for loc_id 100052 {input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.3.total_offset.Lwhile.cond%1%bbentry }
1 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lwhile.body%1%d=>Lwhile.cond%1%bbentry for loc_id 100053 {input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lwhile.body%1%d=>Lwhile.cond%1%bbentry for loc_id 100054 {input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lwhile.body%1%d=>Lwhile.cond%1%bbentry for loc_id 100055 {input.dst.llvm-%add.Lwhile.cond%1%bbentry }
1 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
5 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
6 : 4 { 0x4 +1.0e1025 } : INT
7 : 0 { 0x0 } : BOOL
8 : select(2, 3, 4, 5, 6, 7) : BV:32
9 : bvadd(1, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lwhile.body%1%d=>Lwhile.cond%1%bbentry for loc_id 100056 {input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.1.total_offset.Lwhile.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lwhile.body%1%d=>Lwhile.cond%1%bbentry for loc_id 100057 {input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.2.total_offset.Lwhile.cond%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lwhile.body%1%d=>Lwhile.cond%1%bbentry for loc_id 100058 {input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.3.total_offset.Lwhile.cond%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lwhile.body%1%d=>Lwhile.cond%1%bbentry for loc_id 100059 {input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lwhile.body%1%d=>Lwhile.cond%1%bbentry for loc_id 100060 {input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lwhile.body%1%d=>Lwhile.cond%1%bbentry for loc_id 100061 {input.dst.llvm-%l.addr.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
6 : bvadd(4, 5) : BV:32
7 : 4 { 0x4 +1.0e1025 } : INT
8 : 0 { 0x0 } : BOOL
9 : select(1, 2, 3, 6, 7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lwhile.body%1%d=>Lwhile.cond%1%bbentry for loc_id 100062 {input.dst.llvm-%next.Lwhile.cond%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lwhile.body%1%d=>Lwhile.cond%1%bbentry for loc_id 100063 {input.dst.llvm-%sum.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry }
1 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
5 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
6 : 4 { 0x4 +1.0e1025 } : INT
7 : 0 { 0x0 } : BOOL
8 : select(2, 3, 4, 5, 6, 7) : BV:32
9 : bvadd(1, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lwhile.body%1%d=>Lwhile.cond%1%bbentry for loc_id 100064 {input.dst.llvm-%val.Lwhile.cond%1%bbentry }
1 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lwhile.body%1%d=>Lwhile.cond%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lwhile.cond%1%bbentry=>Lwhile.cond%2%d
=graph_with_edge_structures.loc_to_expr_map at Lwhile.cond%1%bbentry=>Lwhile.cond%2%d for loc_id 100043 {input.dst.llvm-%tobool.Lwhile.cond%2%d }
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
3 : eq(1, 2) : BOOL
4 : not(3) : BOOL
=graph_with_edge_structures.loc_to_expr_map at Lwhile.cond%1%bbentry=>Lwhile.cond%2%d done
=graph_with_edge_structures.loc_to_expr_map at Lwhile.cond%2%d=>Lwhile.body%1%d
=graph_with_edge_structures.loc_to_expr_map at Lwhile.cond%2%d=>Lwhile.body%1%d done
=graph_with_edge_structures.loc_to_expr_map at Lwhile.cond%2%d=>Lwhile.end%1%d
=graph_with_edge_structures.loc_to_expr_map at Lwhile.cond%2%d=>Lwhile.end%1%d done
=graph_with_edge_structures.loc_to_expr_map at Lwhile.end%1%d=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at Lwhile.end%1%d=>E0%0%d for loc_id 100039 {input.dst.llvm-%hidden-reg.E0%0%d }
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lwhile.end%1%d=>E0%0%d for loc_id 100040 {input.dst.llvm-%ret-reg.E0%0%d }
1 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lwhile.end%1%d=>E0%0%d for loc_id 100042 {input.dst.llvm-indir_tgt.E0%0%d }
1 : retaddr_const : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lwhile.end%1%d=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at Lwhile.body%1%d:
vacuous mls at Lwhile.cond%1%bbentry:
vacuous mls at Lwhile.cond%2%d:
vacuous mls at Lwhile.end%1%d:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at Lwhile.body%1%d:
non-vacuous mls at Lwhile.cond%1%bbentry:
non-vacuous mls at Lwhile.cond%2%d:
non-vacuous mls at Lwhile.end%1%d:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in dst.llvm.foo
=avail_exprs begin
=loc 100002
=loc_expr
140357 : input.dst.llvm-%l : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100024
=loc_expr
140418 : input.dst.llvm-%hidden-reg : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100026
=loc_expr
140419 : input.dst.llvm-callee-save.0 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100027
=loc_expr
140421 : input.dst.llvm-callee-save.1 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100028
=loc_expr
140423 : input.dst.llvm-callee-save.2 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100029
=loc_expr
140425 : input.dst.llvm-callee-save.3 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100033
=loc_expr
140365 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100034
=loc_expr
140360 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100039
=loc_expr
140538 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=avail_exprs_val.end
=loc 100040
=loc_expr
140539 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
=avail_exprs_val.end
=loc 100042
=loc_expr
140540 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : retaddr_const : BV:32
=avail_exprs_val.end
=loc 100043
=loc_expr
140511 : input.dst.llvm-%tobool.Lwhile.cond%2%d : BOOL
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
3 : eq(1, 2) : BOOL
4 : not(3) : BOOL
=avail_exprs_val.end
=loc 100045
=loc_expr
140541 : input.dst.llvm-%l.addr.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%l : BV:32
=avail_exprs_val.end
=loc 100046
=loc_expr
140542 : input.dst.llvm-%sum.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100048
=loc_expr
140543 : input.dst.llvm-%0.Lwhile.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=avail_exprs_val.end
=loc 100049
=loc_expr
140544 : input.dst.llvm-%1.Lwhile.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
6 : bvadd(4, 5) : BV:32
7 : 4 { 0x4 +1.0e1025 } : INT
8 : 0 { 0x0 } : BOOL
9 : select(1, 2, 3, 6, 7, 8) : BV:32
=avail_exprs_val.end
=loc 100050
=loc_expr
140545 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.1.total_offset.Lwhile.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100051
=loc_expr
140546 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.2.total_offset.Lwhile.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100052
=loc_expr
140547 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.3.total_offset.Lwhile.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
=avail_exprs_val.end
=loc 100053
=loc_expr
140548 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100054
=loc_expr
140549 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100056
=loc_expr
140551 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.1.total_offset.Lwhile.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100057
=loc_expr
140552 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.2.total_offset.Lwhile.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 4 { 0x4 +1.47e129 } : BV:32
=avail_exprs_val.end
=loc 100058
=loc_expr
140553 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.3.total_offset.Lwhile.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=avail_exprs_val.end
=loc 100059
=loc_expr
140554 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100060
=loc_expr
140555 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 4 { 0x4 +1.47e129 } : BV:32
=avail_exprs_val.end
=loc 100061
=loc_expr
140556 : input.dst.llvm-%l.addr.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
6 : bvadd(4, 5) : BV:32
7 : 4 { 0x4 +1.0e1025 } : INT
8 : 0 { 0x0 } : BOOL
9 : select(1, 2, 3, 6, 7, 8) : BV:32
=avail_exprs_val.end
=loc 100062
=loc_expr
140557 : input.dst.llvm-%next.Lwhile.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=avail_exprs_val.end
=loc 100064
=loc_expr
140559 : input.dst.llvm-%val.Lwhile.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
=avail_exprs_val.end
=loc 100065
=loc_expr
140560 : input.dst.local_alloc_count.Lwhile.cond%1%bbentry : COUNT
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.end
=loc 100066
=loc_expr
140561 : input.dst.cur_rounding_mode.Lwhile.cond%1%bbentry : ROUNDING_MODE
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=avail_exprs_val.end
=avail_exprs end
=sprel_map in dst.llvm.foo
=loc 100042 expr
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=loc 100042 spreled-expr
140267 : retaddr_const : BV:32
=loc 100046 expr
1 : input.dst.llvm-%sum.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry : BV:32
=loc 100046 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100050 expr
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.1.total_offset.Lwhile.cond%1%bbentry : BV:32
=loc 100050 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100051 expr
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.2.total_offset.Lwhile.cond%1%bbentry : BV:32
=loc 100051 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100053 expr
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry : BV:32
=loc 100053 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100054 expr
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry : BV:32
=loc 100054 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100056 expr
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.1.total_offset.Lwhile.cond%1%bbentry : BV:32
=loc 100056 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100057 expr
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.2.total_offset.Lwhile.cond%1%bbentry : BV:32
=loc 100057 spreled-expr
140341 : 4 { 0x4 +1.47e129 } : BV:32
=loc 100059 expr
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry : BV:32
=loc 100059 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100060 expr
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry : BV:32
=loc 100060 spreled-expr
140341 : 4 { 0x4 +1.47e129 } : BV:32
=loc 100065 expr
1 : input.dst.local_alloc_count.Lwhile.cond%1%bbentry : COUNT
=loc 100065 spreled-expr
140365 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=loc 100066 expr
1 : input.dst.cur_rounding_mode.Lwhile.cond%1%bbentry : ROUNDING_MODE
=loc 100066 spreled-expr
140364 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;foo}
=loc_id 100002 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100024 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100026 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100027 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100028 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100029 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100033 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100034 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100036 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100037 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100038 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100039 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100040 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100041 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100042 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100043 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100044 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100045 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100046 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100047 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100048 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100049 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100050 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100051 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100052 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100053 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100054 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100055 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100056 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100057 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100058 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100059 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100060 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100061 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100062 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100063 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100064 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100065 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100066 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 100042 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100046 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100050 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100051 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100053 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100054 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100056 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100057 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100059 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100060 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100065 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100066 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>Lwhile.cond%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lwhile.body%1%d=>Lwhile.cond%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lwhile.cond%1%bbentry=>Lwhile.cond%2%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lwhile.cond%2%d=>Lwhile.body%1%d
1 : input.dst.llvm-%tobool.Lwhile.cond%2%d : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lwhile.cond%2%d=>Lwhile.end%1%d
1 : input.dst.llvm-%tobool.Lwhile.cond%2%d : BOOL
2 : not(1) : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lwhile.end%1%d=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>Lwhile.cond%1%bbentry
=dst.cur_rounding_mode.Lwhile.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%l : BV:32
=dst.llvm-%l.addr.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%l : BV:32
=dst.llvm-%sum.0.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%sum.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-ghostvar.itervar.1.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.local_alloc_count.Lwhile.cond%1%bbentry
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=state_end
=graph_with_simplified_assets.simplified_to_state at Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
6 : bvadd(4, 5) : BV:32
7 : 4 { 0x4 +1.0e1025 } : INT
8 : 0 { 0x0 } : BOOL
9 : select(1, 2, 3, 6, 7, 8) : BV:32
=dst.llvm-%sum.0.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
5 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
6 : 4 { 0x4 +1.0e1025 } : INT
7 : 0 { 0x0 } : BOOL
8 : select(2, 3, 4, 5, 6, 7) : BV:32
9 : bvadd(1, 8) : BV:32
=dst.llvm-ghostvar.itervar.1.Lwhile.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-ghostvar.itervar.1.Lwhile.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%0.Lwhile.cond%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=dst.llvm-%1.Lwhile.cond%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
6 : bvadd(4, 5) : BV:32
7 : 4 { 0x4 +1.0e1025 } : INT
8 : 0 { 0x0 } : BOOL
9 : select(1, 2, 3, 6, 7, 8) : BV:32
=dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.1.total_offset.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.2.total_offset.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.3.total_offset.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
=dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%add.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
5 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
6 : 4 { 0x4 +1.0e1025 } : INT
7 : 0 { 0x0 } : BOOL
8 : select(2, 3, 4, 5, 6, 7) : BV:32
9 : bvadd(1, 8) : BV:32
=dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.1.total_offset.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.2.total_offset.Lwhile.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.3.total_offset.Lwhile.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=dst.llvm-%l.addr.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
6 : bvadd(4, 5) : BV:32
7 : 4 { 0x4 +1.0e1025 } : INT
8 : 0 { 0x0 } : BOOL
9 : select(1, 2, 3, 6, 7, 8) : BV:32
=dst.llvm-%next.Lwhile.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%sum.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
5 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
6 : 4 { 0x4 +1.0e1025 } : INT
7 : 0 { 0x0 } : BOOL
8 : select(2, 3, 4, 5, 6, 7) : BV:32
9 : bvadd(1, 8) : BV:32
=dst.llvm-%val.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lwhile.cond%1%bbentry=>Lwhile.cond%2%d
=dst.llvm-%tobool.Lwhile.cond%2%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
3 : eq(1, 2) : BOOL
4 : not(3) : BOOL
=state_end
=graph_with_simplified_assets.simplified_to_state at Lwhile.cond%2%d=>Lwhile.body%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state at Lwhile.cond%2%d=>Lwhile.end%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state at Lwhile.end%1%d=>E0%0%d
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lwhile.cond%1%bbentry
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lwhile.cond%1%bbentry assume# 0
1 : input.dst.llvm-%l : BV:32
2 : 8 { 0x8 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lwhile.cond%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=graph_with_simplified_assets.simplified_assumes at Lwhile.body%1%d=>Lwhile.cond%1%bbentry assume# 0
1 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : isgepoffset(1, 2) : BOOL
4 : 1 { 0x1 } : BOOL
5 : and(4, 3) : BOOL
6 : and(3, 5) : BOOL
7 : 4 { 0x4 +1.0e1025 } : INT
8 : islangaligned(1, 7) : BOOL
9 : and(6, 8) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lwhile.body%1%d=>Lwhile.cond%1%bbentry assume# 1
1 : 1 { 0x1 } : BOOL
2 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : isgepoffset(2, 3) : BOOL
5 : and(1, 4) : BOOL
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvadd(6, 2) : BV:32
8 : isgepoffset(7, 6) : BOOL
9 : 4 { 0x4 +1.0e1025 } : INT
10 : islangaligned(7, 9) : BOOL
11 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
12 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
13 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
14 : 0 { 0x0 } : BOOL
15 : select(11, 12, 13, 7, 9, 14) : BV:32
16 : 8 { 0x8 +1.0e1025 } : INT
17 : islangaligned(15, 16) : BOOL
18 : and(10, 17) : BOOL
19 : and(5, 8, 10, 18) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lwhile.body%1%d=>Lwhile.cond%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lwhile.cond%1%bbentry=>Lwhile.cond%2%d
=graph_with_simplified_assets.simplified_assumes at Lwhile.cond%1%bbentry=>Lwhile.cond%2%d done
=graph_with_simplified_assets.simplified_assumes at Lwhile.cond%2%d=>Lwhile.body%1%d
=graph_with_simplified_assets.simplified_assumes at Lwhile.cond%2%d=>Lwhile.body%1%d done
=graph_with_simplified_assets.simplified_assumes at Lwhile.cond%2%d=>Lwhile.end%1%d
=graph_with_simplified_assets.simplified_assumes at Lwhile.cond%2%d=>Lwhile.end%1%d done
=graph_with_simplified_assets.simplified_assumes at Lwhile.end%1%d=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at Lwhile.end%1%d=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
2
=String-contents:
=Nextpc-map:
=Nextpc-map done
=suffixpaths for dst.llvm.foo
=suffixpath_at_L0%0%d for dst.llvm.foo
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_Lwhile.body%1%d for dst.llvm.foo
=suffixpath_at_Lwhile.body%1%d.graph_edge_composition
((L0%0%d=>Lwhile.cond%1%bbentry)*((Lwhile.cond%1%bbentry=>Lwhile.cond%2%d)*(Lwhile.cond%2%d=>Lwhile.body%1%d)))
=suffixpath_at_Lwhile.cond%1%bbentry for dst.llvm.foo
=suffixpath_at_Lwhile.cond%1%bbentry.graph_edge_composition
(L0%0%d=>Lwhile.cond%1%bbentry)
=suffixpath_at_Lwhile.cond%2%d for dst.llvm.foo
=suffixpath_at_Lwhile.cond%2%d.graph_edge_composition
((L0%0%d=>Lwhile.cond%1%bbentry)*(Lwhile.cond%1%bbentry=>Lwhile.cond%2%d))
=suffixpath_at_Lwhile.end%1%d for dst.llvm.foo
=suffixpath_at_Lwhile.end%1%d.graph_edge_composition
((L0%0%d=>Lwhile.cond%1%bbentry)*((Lwhile.cond%1%bbentry=>Lwhile.cond%2%d)*(Lwhile.cond%2%d=>Lwhile.end%1%d)))
=suffixpath_at_E0%0%d for dst.llvm.foo
=suffixpath_at_E0%0%d.graph_edge_composition
((L0%0%d=>Lwhile.cond%1%bbentry)*((Lwhile.cond%1%bbentry=>Lwhile.cond%2%d)*((Lwhile.cond%2%d=>Lwhile.end%1%d)*(Lwhile.end%1%d=>E0%0%d))))
=suffixpaths for dst.llvm.foo done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>Lwhile.cond%1%bbentry
tfg.assumes_around_edge at L0%0%d=>Lwhile.cond%1%bbentry assume #0
tfg.assumes_around_edge at L0%0%d=>Lwhile.cond%1%bbentry assume #0.ec
tfg.assumes_around_edge at L0%0%d=>Lwhile.cond%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at L0%0%d=>Lwhile.cond%1%bbentry assume #0.pred
=Comment
undef-behaviour-align-assume.edge.L0%0%d=>Lwhile.cond%1%bbentry
=LhsExpr
140357 : input.dst.llvm-%l : BV:32
140366 : 8 { 0x8 +1.0e1025 } : INT
140367 : islangaligned(140357, 140366) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at L0%0%d=>Lwhile.cond%1%bbentry done
tfg.assumes_around_edge at Lwhile.body%1%d=>Lwhile.cond%1%bbentry
tfg.assumes_around_edge at Lwhile.body%1%d=>Lwhile.cond%1%bbentry assume #0
tfg.assumes_around_edge at Lwhile.body%1%d=>Lwhile.cond%1%bbentry assume #0.ec
tfg.assumes_around_edge at Lwhile.body%1%d=>Lwhile.cond%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lwhile.body%1%d=>Lwhile.cond%1%bbentry assume #0.pred
=Comment
undef-behavioursome.edge.Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=LhsExpr
140514 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
140595 : isgepoffset(140514, 140276) : BOOL
140275 : 1 { 0x1 } : BOOL
140597 : and(140275, 140595) : BOOL
140616 : and(140595, 140597) : BOOL
140329 : 4 { 0x4 +1.0e1025 } : INT
140620 : islangaligned(140514, 140329) : BOOL
140622 : and(140616, 140620) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lwhile.body%1%d=>Lwhile.cond%1%bbentry assume #1
tfg.assumes_around_edge at Lwhile.body%1%d=>Lwhile.cond%1%bbentry assume #1.ec
tfg.assumes_around_edge at Lwhile.body%1%d=>Lwhile.cond%1%bbentry assume #1.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lwhile.body%1%d=>Lwhile.cond%1%bbentry assume #1.pred
=Comment
undef-behavioursome.edge.Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=LhsExpr
140275 : 1 { 0x1 } : BOOL
140514 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
140595 : isgepoffset(140514, 140276) : BOOL
140597 : and(140275, 140595) : BOOL
140341 : 4 { 0x4 +1.47e129 } : BV:32
140570 : bvadd(140341, 140514) : BV:32
140599 : isgepoffset(140570, 140341) : BOOL
140329 : 4 { 0x4 +1.0e1025 } : INT
140603 : islangaligned(140570, 140329) : BOOL
140358 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140359 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140444 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
140330 : 0 { 0x0 } : BOOL
140576 : select(140358, 140359, 140444, 140570, 140329, 140330) : BV:32
140366 : 8 { 0x8 +1.0e1025 } : INT
140605 : islangaligned(140576, 140366) : BOOL
140608 : and(140603, 140605) : BOOL
140613 : and(140597, 140599, 140603, 140608) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lwhile.body%1%d=>Lwhile.cond%1%bbentry done
tfg.assumes_around_edge at Lwhile.cond%1%bbentry=>Lwhile.cond%2%d
tfg.assumes_around_edge at Lwhile.cond%1%bbentry=>Lwhile.cond%2%d done
tfg.assumes_around_edge at Lwhile.cond%2%d=>Lwhile.body%1%d
tfg.assumes_around_edge at Lwhile.cond%2%d=>Lwhile.body%1%d done
tfg.assumes_around_edge at Lwhile.cond%2%d=>Lwhile.end%1%d
tfg.assumes_around_edge at Lwhile.cond%2%d=>Lwhile.end%1%d done
tfg.assumes_around_edge at Lwhile.end%1%d=>E0%0%d
tfg.assumes_around_edge at Lwhile.end%1%d=>E0%0%d done
tfg.assumes_around_edge done
=TFGdone
=PC_to_linename:
=pc
Lentry%1%d
=linename
line 8
=pc
Lwhile.body%1%d
=linename
line 9
=pc
Lwhile.body%2%d
=linename
line 9
=pc
Lwhile.body%3%d
=linename
line 9
=pc
Lwhile.body%4%d
=linename
line 10
=pc
Lwhile.body%5%d
=linename
line 10
=pc
Lwhile.body%6%d
=linename
line 8
=pc
Lwhile.cond%1%d
=linename
line 8
=pc
Lwhile.cond%2%d
=linename
line 8
=pc
Lwhile.end%1%d
=linename
line 12
=PC_to_linename done
=PC_to_column_name:
=pc
Lentry%1%d
=column_name
 at column 3
=pc
Lwhile.body%1%d
=column_name
 at column 15
=pc
Lwhile.body%2%d
=column_name
 at column 15
=pc
Lwhile.body%3%d
=column_name
 at column 9
=pc
Lwhile.body%4%d
=column_name
 at column 12
=pc
Lwhile.body%5%d
=column_name
 at column 12
=pc
Lwhile.body%6%d
=column_name
 at column 3
=pc
Lwhile.cond%1%d
=column_name
 at column 3
=pc
Lwhile.cond%2%d
=column_name
 at column 3
=pc
Lwhile.end%1%d
=column_name
 at column 3
=PC_to_column_name done
=PC_to_line_and_column:
=pc
Lentry%1%d
=line_and_column
line 8
=pc
Lwhile.body%1%d
=line_and_column
(line 9 at column 15)
=pc
Lwhile.body%2%d
=line_and_column
(line 9 at column 15)
=pc
Lwhile.body%3%d
=line_and_column
(line 9 at column 9)
=pc
Lwhile.body%4%d
=line_and_column
line 10
=pc
Lwhile.body%5%d
=line_and_column
line 10
=pc
Lwhile.body%6%d
=line_and_column
line 8
=pc
Lwhile.cond%1%d
=line_and_column
line 8
=pc
Lwhile.cond%2%d
=line_and_column
line 8
=pc
Lwhile.end%1%d
=line_and_column
line 12
=PC_to_line_and_column done
=SourceToLLVMVarnames:
=SourceToLLVMVarnames done
=InputLLVMToSourceVarnames:
input.dst.llvm-%l.addr.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry : L0%0%d : DSTMEM[(4 + input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)]_4
input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry : L0%0%d : 4
input.dst.llvm-%l : L0%0%d : l'
input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : L0%0%d : input.dst.local./*___y___foo__x__=L0%0%argnum0=/
input.dst.llvm-%sum.0 : Lwhile.cond%1%bbentry : sum'
input.dst.local_alloc_count.=L0%0%d= : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.llvm-%sum.0.phi.tmpvar.entry : L0%0%d : 0
input.dst.llvm-%l.addr.0 : Lwhile.cond%1%bbentry : l'
input.dst.llvm-%tobool : L0%0%d : not(input.dst.llvm-%l.addr.0 = 0)
input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.1.total_offset : L0%0%d : 0
input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.2.total_offset : L0%0%d : 0
input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.3.total_offset : L0%0%d : input.dst.llvm-%l.addr.0
input.dst.llvm-%0 : L0%0%d : DSTMEM[input.dst.llvm-%val]_4
input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.1.total_offset : L0%0%d : 0
input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.2.total_offset : L0%0%d : 4
input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.3.total_offset : L0%0%d : (input.dst.llvm-%l.addr.0 + 4)
input.dst.llvm-%1 : Lwhile.body%6%bbentry : l'
input.dst.llvm-%add : Lwhile.body%4%bbentry : sum'
input.dst.llvm-%hidden-reg : L0%0%d : input.dst.llvm-%hidden-reg
input.dst.llvm-callee-save.0 : L0%0%d : input.dst.llvm-callee-save.0
input.dst.llvm-callee-save.1 : L0%0%d : input.dst.llvm-callee-save.1
input.dst.llvm-callee-save.2 : L0%0%d : input.dst.llvm-callee-save.2
input.dst.llvm-callee-save.3 : L0%0%d : input.dst.llvm-callee-save.3
input.dst.llvm-%l.addr.0.phi.tmpvar.entry : L0%0%d : l'
input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.1.offset : L0%0%d : 0
input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.2.offset : L0%0%d : 0
input.dst.llvm-%val : L0%0%d : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.3.total_offset
input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.1.offset : L0%0%d : 0
input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.2.offset : L0%0%d : 4
input.dst.llvm-%next : L0%0%d : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.3.total_offset
input.dst.llvm-%sum.0.phi.tmpvar.while.body : L0%0%d : input.dst.llvm-%add
input.dst.llvm-%l.addr.0.phi.tmpvar.while.body : L0%0%d : input.dst.llvm-%1
input.dst.llvm-%ret-reg : L0%0%d : input.dst.llvm-%sum.0
input.dst.llvm-indir_tgt : L0%0%d : return-address
input.dst.local_alloc_count : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.cur_rounding_mode : L0%0%d : ROUND_to_nearest_ties_to_even
input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.2.total_offset.Lwhile.cond%1%bbentry : L0%0%d : 0
input.dst.llvm-%tobool.Lwhile.cond%2%d : L0%0%d : not(input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry = 0)
input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.3.total_offset.Lwhile.cond%1%bbentry : L0%0%d : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry : L0%0%d : 0
input.dst.llvm-%ret-reg.E0%0%d : L0%0%d : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
input.dst.llvm-indir_tgt.E0%0%d : L0%0%d : return-address
input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry : L0%0%d : 0
input.dst.llvm-%hidden-reg.E0%0%d : L0%0%d : bvxor(bvxor(bvxor(bvxor(input.dst.llvm-%hidden-reg, input.dst.llvm-callee-save.0), input.dst.llvm-callee-save.1), input.dst.llvm-callee-save.2), input.dst.llvm-callee-save.3)
input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.1.total_offset.Lwhile.cond%1%bbentry : L0%0%d : 0
input.dst.llvm-%l.addr.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry : L0%0%d : l'
input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.1.total_offset.Lwhile.cond%1%bbentry : L0%0%d : 0
input.dst.llvm-%sum.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry : L0%0%d : 0
input.dst.llvm-%0.Lwhile.cond%1%bbentry : L0%0%d : DSTMEM[input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry]_4
input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.2.total_offset.Lwhile.cond%1%bbentry : L0%0%d : 4
input.dst.llvm-%1.Lwhile.cond%1%bbentry : L0%0%d : DSTMEM[(4 + input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)]_4
input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.3.total_offset.Lwhile.cond%1%bbentry : L0%0%d : (4 + input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)
input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry : L0%0%d : 0
input.dst.llvm-%next.Lwhile.cond%1%bbentry : L0%0%d : (4 + input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)
input.dst.llvm-%val.Lwhile.cond%1%bbentry : L0%0%d : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
input.dst.local_alloc_count.Lwhile.cond%1%bbentry : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.cur_rounding_mode.Lwhile.cond%1%bbentry : L0%0%d : ROUND_to_nearest_ties_to_even
=InputLLVMToSourceVarnames done
=PotentialSCEVRelations:
=dst.llvm-%l.addr.0
=dst.llvm-%l.addr.0 loop pc: Lwhile.cond%1%d
=dst.llvm-%l.addr.0 val_scevb
=dst.llvm-%l.addr.0 val_scevb scev
=dst.llvm-%l.addr.0 val_scevb scev loop: L0%0%d
=dst.llvm-%l.addr.0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%l.addr.0 val_scevb scev scev_expr
1 : input.dst.llvm-%l.addr.0 : BV32
=dst.llvm-%l.addr.0 val_scevb scev scev_expr done
=dst.llvm-%l.addr.0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%l.addr.0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%l.addr.0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%l.addr.0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%l.addr.0 atuse_scevb
=dst.llvm-%l.addr.0 atuse_scevb scev
=dst.llvm-%l.addr.0 atuse_scevb scev loop: L0%0%d
=dst.llvm-%l.addr.0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%l.addr.0 atuse_scevb scev scev_expr
1 : input.dst.llvm-%l.addr.0 : BV32
=dst.llvm-%l.addr.0 atuse_scevb scev scev_expr done
=dst.llvm-%l.addr.0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%l.addr.0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%l.addr.0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%l.addr.0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%l.addr.0 atexit_scev
=dst.llvm-%l.addr.0 atexit_scev loop: L0%0%d
=dst.llvm-%l.addr.0 atexit_scev scev_overflow_flag: 
=dst.llvm-%l.addr.0 atexit_scev scev_expr
1 : input.dst.llvm-%l.addr.0 : BV32
=dst.llvm-%l.addr.0 atexit_scev scev_expr done
=dst.llvm-%sum.0
=dst.llvm-%sum.0 loop pc: Lwhile.cond%1%d
=dst.llvm-%sum.0 val_scevb
=dst.llvm-%sum.0 val_scevb scev
=dst.llvm-%sum.0 val_scevb scev loop: L0%0%d
=dst.llvm-%sum.0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%sum.0 val_scevb scev scev_expr
2 : input.dst.llvm-%sum.0 : BV32
=dst.llvm-%sum.0 val_scevb scev scev_expr done
=dst.llvm-%sum.0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%sum.0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%sum.0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%sum.0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%sum.0 atuse_scevb
=dst.llvm-%sum.0 atuse_scevb scev
=dst.llvm-%sum.0 atuse_scevb scev loop: L0%0%d
=dst.llvm-%sum.0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%sum.0 atuse_scevb scev scev_expr
2 : input.dst.llvm-%sum.0 : BV32
=dst.llvm-%sum.0 atuse_scevb scev scev_expr done
=dst.llvm-%sum.0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%sum.0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%sum.0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%sum.0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%sum.0 atexit_scev
=dst.llvm-%sum.0 atexit_scev loop: L0%0%d
=dst.llvm-%sum.0 atexit_scev scev_overflow_flag: 
=dst.llvm-%sum.0 atexit_scev scev_expr
2 : input.dst.llvm-%sum.0 : BV32
=dst.llvm-%sum.0 atexit_scev scev_expr done
=dst.llvm-%val
=dst.llvm-%val loop pc: Lwhile.cond%1%d
=dst.llvm-%val val_scevb
=dst.llvm-%val val_scevb scev
=dst.llvm-%val val_scevb scev loop: L0%0%d
=dst.llvm-%val val_scevb scev scev_overflow_flag: 
=dst.llvm-%val val_scevb scev scev_expr
1 : input.dst.llvm-%l.addr.0 : BV32
=dst.llvm-%val val_scevb scev scev_expr done
=dst.llvm-%val val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%val val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%val val_scevb signed lower bound: 32:4294967295
=dst.llvm-%val val_scevb signed upper bound: 32:4294967295
=dst.llvm-%val atuse_scevb
=dst.llvm-%val atuse_scevb scev
=dst.llvm-%val atuse_scevb scev loop: L0%0%d
=dst.llvm-%val atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%val atuse_scevb scev scev_expr
1 : input.dst.llvm-%l.addr.0 : BV32
=dst.llvm-%val atuse_scevb scev scev_expr done
=dst.llvm-%val atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%val atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%val atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%val atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%val atexit_scev
=dst.llvm-%val atexit_scev loop: L0%0%d
=dst.llvm-%val atexit_scev scev_overflow_flag: 
=dst.llvm-%val atexit_scev scev_expr
1 : input.dst.llvm-%l.addr.0 : BV32
=dst.llvm-%val atexit_scev scev_expr done
=dst.llvm-%0
=dst.llvm-%0 loop pc: Lwhile.cond%1%d
=dst.llvm-%0 val_scevb
=dst.llvm-%0 val_scevb scev
=dst.llvm-%0 val_scevb scev loop: L0%0%d
=dst.llvm-%0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%0 val_scevb scev scev_expr
3 : input.dst.llvm-%0 : BV32
=dst.llvm-%0 val_scevb scev scev_expr done
=dst.llvm-%0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%0 atuse_scevb
=dst.llvm-%0 atuse_scevb scev
=dst.llvm-%0 atuse_scevb scev loop: L0%0%d
=dst.llvm-%0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%0 atuse_scevb scev scev_expr
3 : input.dst.llvm-%0 : BV32
=dst.llvm-%0 atuse_scevb scev scev_expr done
=dst.llvm-%0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%0 atexit_scev
=dst.llvm-%0 atexit_scev loop: L0%0%d
=dst.llvm-%0 atexit_scev scev_overflow_flag: 
=dst.llvm-%0 atexit_scev scev_expr
3 : input.dst.llvm-%0 : BV32
=dst.llvm-%0 atexit_scev scev_expr done
=dst.llvm-%add
=dst.llvm-%add loop pc: Lwhile.cond%1%d
=dst.llvm-%add val_scevb
=dst.llvm-%add val_scevb scev
=dst.llvm-%add val_scevb scev loop: L0%0%d
=dst.llvm-%add val_scevb scev scev_overflow_flag: 
=dst.llvm-%add val_scevb scev scev_expr
3 : input.dst.llvm-%0 : BV32
2 : input.dst.llvm-%sum.0 : BV32
4 : scev_op_add(3, 2) : loop L0%0%d : 
=dst.llvm-%add val_scevb scev scev_expr done
=dst.llvm-%add val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%add val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%add val_scevb signed lower bound: 32:4294967295
=dst.llvm-%add val_scevb signed upper bound: 32:4294967295
=dst.llvm-%add atuse_scevb
=dst.llvm-%add atuse_scevb scev
=dst.llvm-%add atuse_scevb scev loop: L0%0%d
=dst.llvm-%add atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%add atuse_scevb scev scev_expr
3 : input.dst.llvm-%0 : BV32
2 : input.dst.llvm-%sum.0 : BV32
4 : scev_op_add(3, 2) : loop L0%0%d : 
=dst.llvm-%add atuse_scevb scev scev_expr done
=dst.llvm-%add atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%add atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%add atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%add atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%add atexit_scev
=dst.llvm-%add atexit_scev loop: L0%0%d
=dst.llvm-%add atexit_scev scev_overflow_flag: 
=dst.llvm-%add atexit_scev scev_expr
3 : input.dst.llvm-%0 : BV32
2 : input.dst.llvm-%sum.0 : BV32
4 : scev_op_add(3, 2) : loop L0%0%d : 
=dst.llvm-%add atexit_scev scev_expr done
=dst.llvm-%next
=dst.llvm-%next loop pc: Lwhile.cond%1%d
=dst.llvm-%next val_scevb
=dst.llvm-%next val_scevb scev
=dst.llvm-%next val_scevb scev loop: L0%0%d
=dst.llvm-%next val_scevb scev scev_overflow_flag: nsw
=dst.llvm-%next val_scevb scev scev_expr
5 : 00000000000000000000000000000100b
1 : input.dst.llvm-%l.addr.0 : BV32
6 : scev_op_add(5, 1) : loop L0%0%d : nsw
=dst.llvm-%next val_scevb scev scev_expr done
=dst.llvm-%next val_scevb unsigned lower bound: 32:2147483652
=dst.llvm-%next val_scevb unsigned upper bound: 32:2147483648
=dst.llvm-%next val_scevb signed lower bound: 32:2147483652
=dst.llvm-%next val_scevb signed upper bound: 32:2147483648
=dst.llvm-%next atuse_scevb
=dst.llvm-%next atuse_scevb scev
=dst.llvm-%next atuse_scevb scev loop: L0%0%d
=dst.llvm-%next atuse_scevb scev scev_overflow_flag: nsw
=dst.llvm-%next atuse_scevb scev scev_expr
5 : 00000000000000000000000000000100b
1 : input.dst.llvm-%l.addr.0 : BV32
6 : scev_op_add(5, 1) : loop L0%0%d : nsw
=dst.llvm-%next atuse_scevb scev scev_expr done
=dst.llvm-%next atuse_scevb unsigned lower bound: 32:2147483652
=dst.llvm-%next atuse_scevb unsigned upper bound: 32:2147483648
=dst.llvm-%next atuse_scevb signed lower bound: 32:2147483652
=dst.llvm-%next atuse_scevb signed upper bound: 32:2147483648
=dst.llvm-%next atexit_scev
=dst.llvm-%next atexit_scev loop: L0%0%d
=dst.llvm-%next atexit_scev scev_overflow_flag: nsw
=dst.llvm-%next atexit_scev scev_expr
5 : 00000000000000000000000000000100b
1 : input.dst.llvm-%l.addr.0 : BV32
6 : scev_op_add(5, 1) : loop L0%0%d : nsw
=dst.llvm-%next atexit_scev scev_expr done
=dst.llvm-%1
=dst.llvm-%1 loop pc: Lwhile.cond%1%d
=dst.llvm-%1 val_scevb
=dst.llvm-%1 val_scevb scev
=dst.llvm-%1 val_scevb scev loop: L0%0%d
=dst.llvm-%1 val_scevb scev scev_overflow_flag: 
=dst.llvm-%1 val_scevb scev scev_expr
7 : input.dst.llvm-%1 : BV32
=dst.llvm-%1 val_scevb scev scev_expr done
=dst.llvm-%1 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%1 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%1 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%1 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%1 atuse_scevb
=dst.llvm-%1 atuse_scevb scev
=dst.llvm-%1 atuse_scevb scev loop: L0%0%d
=dst.llvm-%1 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%1 atuse_scevb scev scev_expr
7 : input.dst.llvm-%1 : BV32
=dst.llvm-%1 atuse_scevb scev scev_expr done
=dst.llvm-%1 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%1 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%1 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%1 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%1 atexit_scev
=dst.llvm-%1 atexit_scev loop: L0%0%d
=dst.llvm-%1 atexit_scev scev_overflow_flag: 
=dst.llvm-%1 atexit_scev scev_expr
7 : input.dst.llvm-%1 : BV32
=dst.llvm-%1 atexit_scev scev_expr done
=PotentialSCEVRelations done
=ReachingDefinitionsForLocs:
=Reaching Definitions at L0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-%l : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns done
=Reaching Definitions at Lwhile.body%1%d
=reaching defns for expr 0
1 : input.dst.llvm-%l : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 4 edges
  L0%0%d=>Lwhile.cond%1%bbentry
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-%tobool.Lwhile.cond%2%d : BOOL
=reaching defns for expr 5 edges
  Lwhile.cond%1%bbentry=>Lwhile.cond%2%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 6 edges
  L0%0%d=>Lwhile.cond%1%bbentry
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-ghostvar.itervar.1.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 7 edges
  L0%0%d=>Lwhile.cond%1%bbentry
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%l.addr.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 8 edges
  L0%0%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%sum.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 9 edges
  L0%0%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%0.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%1.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.1.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.2.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.3.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%add.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.1.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.2.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.3.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%l.addr.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%next.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%sum.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%val.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns done
=Reaching Definitions at Lwhile.cond%1%bbentry
=reaching defns for expr 0
1 : input.dst.llvm-%l : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 4 edges
  L0%0%d=>Lwhile.cond%1%bbentry
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-%tobool.Lwhile.cond%2%d : BOOL
=reaching defns for expr 5 edges
  Lwhile.cond%1%bbentry=>Lwhile.cond%2%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 6 edges
  L0%0%d=>Lwhile.cond%1%bbentry
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-ghostvar.itervar.1.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 7 edges
  L0%0%d=>Lwhile.cond%1%bbentry
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%l.addr.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 8 edges
  L0%0%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%sum.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 9 edges
  L0%0%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%0.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%1.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.1.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.2.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.3.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%add.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.1.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.2.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.3.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%l.addr.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%next.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%sum.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%val.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns done
=Reaching Definitions at Lwhile.cond%2%d
=reaching defns for expr 0
1 : input.dst.llvm-%l : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 4 edges
  L0%0%d=>Lwhile.cond%1%bbentry
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-%tobool.Lwhile.cond%2%d : BOOL
=reaching defns for expr 5 edges
  Lwhile.cond%1%bbentry=>Lwhile.cond%2%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 6 edges
  L0%0%d=>Lwhile.cond%1%bbentry
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-ghostvar.itervar.1.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 7 edges
  L0%0%d=>Lwhile.cond%1%bbentry
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%l.addr.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 8 edges
  L0%0%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%sum.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 9 edges
  L0%0%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%0.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%1.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.1.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.2.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.3.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%add.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.1.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.2.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.3.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%l.addr.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%next.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%sum.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%val.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns done
=Reaching Definitions at Lwhile.end%1%d
=reaching defns for expr 0
1 : input.dst.llvm-%l : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 4 edges
  L0%0%d=>Lwhile.cond%1%bbentry
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-%tobool.Lwhile.cond%2%d : BOOL
=reaching defns for expr 5 edges
  Lwhile.cond%1%bbentry=>Lwhile.cond%2%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 6 edges
  L0%0%d=>Lwhile.cond%1%bbentry
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-ghostvar.itervar.1.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 7 edges
  L0%0%d=>Lwhile.cond%1%bbentry
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%l.addr.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 8 edges
  L0%0%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%sum.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 9 edges
  L0%0%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%0.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%1.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.1.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.2.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.3.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%add.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.1.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.2.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.3.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%l.addr.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%next.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%sum.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%val.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns done
=Reaching Definitions at E0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-%l : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 4 edges
  L0%0%d=>Lwhile.cond%1%bbentry
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-%tobool.Lwhile.cond%2%d : BOOL
=reaching defns for expr 5 edges
  Lwhile.cond%1%bbentry=>Lwhile.cond%2%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 6 edges
  L0%0%d=>Lwhile.cond%1%bbentry
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-ghostvar.itervar.1.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 7 edges
  L0%0%d=>Lwhile.cond%1%bbentry
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=reaching defns for expr 8 edges
  Lwhile.end%1%d=>E0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=reaching defns for expr 9 edges
  Lwhile.end%1%d=>E0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=reaching defns for expr 10 edges
  Lwhile.end%1%d=>E0%0%d
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%l.addr.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%sum.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%0.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%1.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.1.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.2.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.3.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%add.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.1.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.2.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.3.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%l.addr.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%next.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%sum.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%val.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns done
=ReachingDefinitionsForLocs done
=VarnameToLRStatus Begin:
=LR status for var input.dst.llvm-%l.addr.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%l
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.local./*___y___foo__x__=L0%0%argnum0=/
lr_status_top
=LR status for var input.dst.local_alloc_count.=L0%0%d=
lr_status_top
=LR status for var input.dst.llvm-%hidden-reg
lr_status_top
=LR status for var input.dst.llvm-callee-save.0
lr_status_top
=LR status for var input.dst.llvm-callee-save.1
lr_status_top
=LR status for var input.dst.llvm-callee-save.2
lr_status_top
=LR status for var input.dst.llvm-callee-save.3
lr_status_top
=LR status for var input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.2.total_offset.Lwhile.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-ghostvar.itervar.1.Lwhile.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%tobool.Lwhile.cond%2%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.3.total_offset.Lwhile.cond%1%bbentry
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%ret-reg.E0%0%d
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-indir_tgt.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%hidden-reg.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.1.total_offset.Lwhile.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%add.Lwhile.cond%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%l.addr.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.1.total_offset.Lwhile.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%sum.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%0.Lwhile.cond%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.2.total_offset.Lwhile.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%1.Lwhile.cond%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.3.total_offset.Lwhile.cond%1%bbentry
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%sum.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%next.Lwhile.cond%1%bbentry
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%val.Lwhile.cond%1%bbentry
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.local_alloc_count.Lwhile.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.cur_rounding_mode.Lwhile.cond%1%bbentry
lr_status_linearly_related(; )
=VarnameToLRStatus End
=TFG_LLVM_done
=TFG_SSA_done
